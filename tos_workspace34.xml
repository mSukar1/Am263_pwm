<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<PREFERENCES VERSION="6">
  <WORKSPACE ACCOUNT_MODELS="ABRWVE1fU0VSSUFMSVpBVElPTl9WMAAAAAEAFFZBTV9TRVJJQUxJWkFUSU9OX1Yzf_C9wAAAAA9WaXJ0dWFsIEFjY291bnQAAAAAAAAAAAAAAAIAAAAAf_C9wQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH_wvcAAAAAAAAAAA1VTJAADVVMkAARDQVNIQPhqAAAAAAAAAAAAAAAAAAADRk5EAAVWQUxJRAAJRGVtbyBDYXNoAAAAAAAAAAAAAAROT05FAAAAAH_wvcIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB_8L3AAAAAAAAAAAZVU0QkRlgAA1VTRAAKRk9SRVhfQ0FTSED4agAAAAAAAAAAAAAAAAAAA0ZORAAFVkFMSUQAD0RlbW8gRm9yZXggQ2FzaAAAAAAAAAAAAAAETk9ORQ==" POSITION="1616201735655">
    <DETACHED_FRAME_0 ALWAYS_ON_TOP="false" HEIGHT="1040" LAYOUT="MAIN" STATE="MAXIMIZED_HORIZ  MAXIMIZED_VERT" WIDTH="1920" X="0" Y="0">
      <AUDIO URL=""/>
      <COM.DEVEXPERTS.TOS.UI.USER.ALERT.LASTSOUNDTAGKEY LAST_SOUNDTAG="Bell"/>
      <DESKTOP ALERTS_THINK_SCRIPT_EDITOR_HEIGHT="530" ALERTS_THINK_SCRIPT_EDITOR_WIDTH="850" ALERTS_THINK_SCRIPT_ERROR_PANEL_HEIGHT="65" ALERTS_THINK_SCRIPT_HELP_DIVIDER_LOCATION="176" ALERTS_THINK_SCRIPT_SIDE_PANEL_WIDTH="283" ALLOCATION_MODE="Single Account" CUSTOM_QUOTES_THINK_SCRIPT_EDITOR_HEIGHT="489" CUSTOM_QUOTES_THINK_SCRIPT_EDITOR_WIDTH="1538" CUSTOM_QUOTES_THINK_SCRIPT_ERROR_PANEL_HEIGHT="65" CUSTOM_QUOTES_THINK_SCRIPT_HELP_DIVIDER_LOCATION="222" CUSTOM_QUOTES_THINK_SCRIPT_SIDE_PANEL_WIDTH="333" FILTERS_THINK_SCRIPT_EDITOR_HEIGHT="828" FILTERS_THINK_SCRIPT_EDITOR_WIDTH="1750" FILTERS_THINK_SCRIPT_ERROR_PANEL_HEIGHT="65" FILTERS_THINK_SCRIPT_HELP_DIVIDER_LOCATION="628" FILTERS_THINK_SCRIPT_SIDE_PANEL_WIDTH="333" LAST_USED_LAYOUT="Scanner" MRU_SYMBOLS="AKU,GLOP,AAPL,OLO,SJI,SWI,VSTM,AAL,SLDB,AZRX,RMO,AJRD,EBS,USAC,T,/RTY:XCME,IWM,AMD,KMX,DCTH" ORDER_THINK_SCRIPT_EDITOR_HEIGHT="530" ORDER_THINK_SCRIPT_EDITOR_WIDTH="850" ORDER_THINK_SCRIPT_ERROR_PANEL_HEIGHT="65" ORDER_THINK_SCRIPT_HELP_DIVIDER_LOCATION="176" ORDER_THINK_SCRIPT_SIDE_PANEL_WIDTH="283" PATTERN_EDITOR_DIVIDER="400" PATTERN_EDITOR_HEIGHT="800" PATTERN_EDITOR_WIDTH="1000" SAVE_ALLOCATION_MODE="false" THINK_SCRIPT_ALERT_AUTOCOMPLETE="true" THINK_SCRIPT_ALERT_POPUP_HELP="true" THINK_SCRIPT_EDITOR_FONT_FAMILY="Monospaced" THINK_SCRIPT_EDITOR_FONT_SIZE="16" THINK_SCRIPT_EDITOR_HEIGHT="859" THINK_SCRIPT_EDITOR_WIDTH="1099" THINK_SCRIPT_ERROR_PANEL_HEIGHT="132" THINK_SCRIPT_HELP_DIVIDER_LOCATION="546" THINK_SCRIPT_SIDE_PANEL="Reference" THINK_SCRIPT_SIDE_PANEL_WIDTH="103" UD_WARNING="false">
        <ACCNT_STMT ACCOUNTSTATEMENTDATEFILTER="DAYS_FROM,1,TODAY" ORDER_ENTRY_EXPANDED="false" SYMBOL_GROUP="-1">
          <ACCOUNT_SUMMARY EXPANDED="false"/>
          <CASH_BALANCE_COLUMN CASHBALANCEFILTER="" CASH_BALANCE_COLUMN="TRADE_DATE:60::F,EXEC_DATE:60::F,EXEC_TIME:60:,TYPE:45:,REFERENCE:70:,DESCRIPTION:400:,FEE:80:,COMMISSION:80:,AMOUNT:80:,BALANCE:100:" EXPANDED="false">
            <CASH_BALANCE_COLUMN CASHBALANCEFILTER="" CASH_BALANCE_COLUMN="TRADE_DATE:60::F,EXEC_DATE:60::F,EXEC_TIME:60:,TYPE:45:,REFERENCE:70:,DESCRIPTION:400:,FEE:80:,COMMISSION:80:,AMOUNT:80:,BALANCE:100:"/>
          </CASH_BALANCE_COLUMN>
          <EQUITIES_COLUMN EQUITIES_COLUMN="I.SYMBOL:79:,DESCRIPTION:311::F,QTY:88:,TRADE_PRICE:90:,&lt;arrow&gt;:11:F:F" EXPANDED="true">
            <EQUITIES_COLUMN EQUITIES_COLUMN="I.SYMBOL:79:,DESCRIPTION:311::F,QTY:88:,TRADE_PRICE:90:,&lt;arrow&gt;:11:F:F"/>
          </EQUITIES_COLUMN>
          <FOREX_ACCOUNT_SUMMARY EXPANDED="false"/>
          <FOREX_CASH_BALANCE_COLUMN CASHBALANCEFILTER="FX_ROLLOVER_ORDERS,FX_CONVERSION_ORDERS" EXPANDED="false" FOREX_CASH_BALANCE_COLUMN="EMPTY_COLUMN:16:F:F,DATE:60::F,TIME:60:,TYPE:45:,TICKET_ID:70:,DESCRIPTION:400:,COMMISSION:80:,AMOUNT:80:,AMOUNT_BASE:80:,SUMMARY_BALANCE:90:">
            <FOREX_CASH_BALANCE_COLUMN CASHBALANCEFILTER="FX_ROLLOVER_ORDERS,FX_CONVERSION_ORDERS" FOREX_CASH_BALANCE_COLUMN="EMPTY_COLUMN:16:F:F,DATE:60::F,TIME:60:,TYPE:45:,TICKET_ID:70:,DESCRIPTION:400:,COMMISSION:80:,AMOUNT:80:,AMOUNT_BASE:80:,SUMMARY_BALANCE:90:"/>
          </FOREX_CASH_BALANCE_COLUMN>
          <FOREX_COLUMN EXPANDED="false" FOREX_COLUMN="I.SYMBOL:79:,DESCRIPTION:311:,QTY:88:,TRADE_PRICE:90:,FX_FPL:1:,&lt;arrow&gt;:11:F:F">
            <FOREX_COLUMN FOREX_COLUMN="I.SYMBOL:79:,DESCRIPTION:311:,QTY:88:,TRADE_PRICE:90:,FX_FPL:1:,&lt;arrow&gt;:11:F:F"/>
          </FOREX_COLUMN>
          <FUTURES_CASH_BALANCE_COLUMN CASHBALANCEFILTER="" EXPANDED="false" FUTURES_CASH_BALANCE_COLUMN="TRADE_DATE:60::F,EXEC_DATE:60:,EXEC_TIME:60:,TYPE:45:,REFERENCE:70:,DESCRIPTION:400:,FEE:80:,COMMISSION:80:,AMOUNT:80:,BALANCE:100:">
            <FUTURES_CASH_BALANCE_COLUMN CASHBALANCEFILTER="" FUTURES_CASH_BALANCE_COLUMN="TRADE_DATE:60::F,EXEC_DATE:60:,EXEC_TIME:60:,TYPE:45:,REFERENCE:70:,DESCRIPTION:400:,FEE:80:,COMMISSION:80:,AMOUNT:80:,BALANCE:100:"/>
          </FUTURES_CASH_BALANCE_COLUMN>
          <FUTURES_COLUMN EXPANDED="false" FUTURES_COLUMN="I.SYMBOL:72:,DESCRIPTION:212:,I.SPC:51:,I.EXPIRATION:71:,QTY:83:,TRADE_PRICE:81:,PL_DAY:79:,&lt;arrow&gt;:11:F:F">
            <FUTURES_COLUMN FUTURES_COLUMN="I.SYMBOL:72:,DESCRIPTION:212:,I.SPC:51:,I.EXPIRATION:71:,QTY:83:,TRADE_PRICE:81:,PL_DAY:79:,&lt;arrow&gt;:11:F:F"/>
          </FUTURES_COLUMN>
          <FUTURES_OPTIONS_COLUMN EXPANDED="false" FUTURES_OPTIONS_COLUMN="I.SYMBOL_SPC:72:,I.OPTION_CODE:86::F,I.EXPIRATION:71:,I.STRIKE:55:,I.TYPE:55:,QTY:79:,TRADE_PRICE:98:,&lt;arrow&gt;:11:F:F">
            <FUTURES_OPTIONS_COLUMN FUTURES_OPTIONS_COLUMN="I.SYMBOL_SPC:72:,I.OPTION_CODE:86::F,I.EXPIRATION:71:,I.STRIKE:55:,I.TYPE:55:,QTY:79:,TRADE_PRICE:98:,&lt;arrow&gt;:11:F:F"/>
          </FUTURES_OPTIONS_COLUMN>
          <IN_CONVERSION_COLUMN EXPANDED="false" IN_CONVERSION_COLUMN="TIME:100:,CURRENCY:50:,SIDE:55:,BASE_CURRENCY_AMOUNT:70:,CONVERSION_RATE:70:,COUNTER_CURRENCY_AMOUNT:80:,SETTLEMENT_DATE:65:,STATUS:60:,&lt;arrow&gt;:11:F:F">
            <IN_CONVERSION_COLUMN IN_CONVERSION_COLUMN="TIME:100:,CURRENCY:50:,SIDE:55:,BASE_CURRENCY_AMOUNT:70:,CONVERSION_RATE:70:,COUNTER_CURRENCY_AMOUNT:80:,SETTLEMENT_DATE:65:,STATUS:60:,&lt;arrow&gt;:11:F:F"/>
          </IN_CONVERSION_COLUMN>
          <OPTIONS_COLUMN EXPANDED="true" OPTIONS_COLUMN="I.SYMBOL_SPC:72:,I.OPTION_CODE:86::F,I.EXPIRATION:71:,I.STRIKE:55:,I.TYPE:55:,QTY:79:,TRADE_PRICE:98:,&lt;arrow&gt;:11:F:F">
            <OPTIONS_COLUMN OPTIONS_COLUMN="I.SYMBOL_SPC:72:,I.OPTION_CODE:86::F,I.EXPIRATION:71:,I.STRIKE:55:,I.TYPE:55:,QTY:79:,TRADE_PRICE:98:,&lt;arrow&gt;:11:F:F"/>
          </OPTIONS_COLUMN>
          <ORDER_HISTORY EXPANDED="true" ORDER_HISTORY_COLUMN="NOTES:22:,SELLOUT:28:,TIME_PLACED:97:,SPREAD:61:,LEG_SIDE:42:,LINKED_QTY:77:,LEG_POS_EFFECT:55:,I.SYMBOL_SPC:72:,I.EXPIRATION:66:,I.STRIKE:55:,I.TYPE:55:,LINK_LABELED_PRICE:97:,INSTR:57:,STATUS:57:,DETAILS:22:,&lt;arrow&gt;:11:F:F">
            <SORTING COLUMN="STATUS" ORDER="1"/>
            <SWITCH POSITION="0"/>
          </ORDER_HISTORY>
          <OTHERS_COLUMN EXPANDED="false" OTHERS_COLUMN="I.SYMBOL:80:,DESCRIPTION:321:,QTY:79:,TRADE_PRICE:96:,&lt;arrow&gt;:11:F:F">
            <OTHERS_COLUMN OTHERS_COLUMN="I.SYMBOL:80:,DESCRIPTION:321:,QTY:79:,TRADE_PRICE:96:,&lt;arrow&gt;:11:F:F"/>
          </OTHERS_COLUMN>
          <PL_COLUMN EXPANDED="true" GROUP_MODE_INDEX="SYMBOL_GROUPING" PL_COLUMN="SYMBOL:67:,DESCRIPTION:232::F,PL_OPEN:66:,PL_PERCENT:65:,PL_DAY:67:,MARK_VALUE:86:,&lt;arrow&gt;:11:F:F">
            <PL_COLUMN GROUP_MODE_INDEX="SYMBOL_GROUPING" PL_COLUMN="SYMBOL:67:,DESCRIPTION:232::F,PL_OPEN:66:,PL_PERCENT:65:,PL_DAY:67:,MARK_VALUE:86:,&lt;arrow&gt;:11:F:F"/>
          </PL_COLUMN>
          <SWITCH POSITION="0"/>
          <TRADE_HISTORY EXPANDED="false" TRADE_HISTORY_COLUMN="SELLOUT:14:,EXEC_TIME:96:,SPREAD:55:,LEG_SIDE:53:,LEG_QTY:54:,LEG_POS_EFFECT:55:,I.SYMBOL_SPC:72:,I.EXPIRATION:69:,I.STRIKE:55:,I.TYPE:55:,LEG_PRICE:63:,NET_PRICE:72:,ORDER_TYPE:70:,&lt;arrow&gt;:11:F:F"/>
        </ACCNT_STMT>
        <ACCOUNT_GROUP FOREX_REPORT_LAYOUT_CONFIG="" ORDER_ENTRY_EXPANDED="false" SELECTED_LAYOUT="MONITOR"/>
        <ACTIVE_ACCOUNT_HEADLINE>
          <ACTIVE_ACCOUNT COMPONENTS="OPTION_BP,DTBP,CASH_AND_MONEY_MARKET_FUNDS" ITEM_DISPLAY_MODE="HIDE_UNSED"/>
        </ACTIVE_ACCOUNT_HEADLINE>
        <ACTIVE_TRADER ACT_TRD_COLUMN_COUNT="3" ACT_TRD_DEFAULT_TYPE="CHART" ACT_TRD_MAXIMIZED_INDEX="5" ACT_TRD_ROW_COUNT="3" CURRENT_GRID_NAME="Mahi_smi2" ORDER_ENTRY_EXPANDED="false">
          <ACT_TRD_CELL0 ROWSPANELWEIGHT="1.0" ROWWEIGHT0="1.5330578512396693" ROWWEIGHT1="0.4669421487603306" SELECTED_TYPE="CHART" SIDEBAR_IS_ACTIVE="true" SYMBOL="EVRG" SYMBOL_GROUP="1" TRADE_BUTTONS_MIGRATED="true">
            <ACTIVETRADER CELL_IDS="POSITION_BREAKDOWN;NET_POSITION;AVERAGE_PRICE;PL_OPEN;PL_DAY" COLUMNS="TRADE_AMOUNT:47:,BUY_ORDER:67:,BIDSIZE:32:,PRICE:97:,ASKSIZE:20:,SELL_ORDER:29:" ENABLED="true" SHOW_STUDY_MARKERS="false" SYMBOL="FDX" SYMBOL_GROUP="1" VERTICAL="false" VISIBLE="false" WEIGHT="0.9984152139461172" ZOOMING_STEPS="1">
              <POSITION_SUMMARY_PANEL CELL_IDS="POSITION_BREAKDOWN;NET_POSITION;AVERAGE_PRICE;PL_OPEN;PL_DAY" ENABLED="true"/>
              <TRADE_BUTTONS_CONFIG CONFIGURATION_NAME="SINGLE" ORDER_RULES_SET="STOCK" ORDER_TYPE="LIMIT" OS_AUTO="false" OS_EXPANDED="true" OS_TIF="DAY" QTY="100.0" QTY_STEP="1.0" TEMPLATE="SINGLE" TRADE_BUTTONS="FIRST_LINE;BUY_BID;SELL_ASK;AUTO_SEND;MULTI_CANCEL;REVERSE;FLAT;SECOND_LINE;QUANTITY_WITH_BUTTONS;SELL_MKT;BUY_MKT;ORDER_TEMPLATE;ORDER_SETUP">
                <OCO_STOP>
                  <TRG_0 TRG_ENBL="true" TRG_LINK="ASK_BID" TRG_OFFSET_MODE="TICK" TRG_OT="STOP" TRG_SETUP="10.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL AAL="10.0" AAPL="10.0" ABB="10.0" ABBV="10.0" ABIO="10.0" ABR="10.0" ABUS="10.0" ACRX="10.0" ADBE="10.0" ADM="10.0" ADMA="10.0" ADPT="10.0" AEL="10.0" AES="10.0" AGNC="10.0" AGRX="10.0" AIG="10.0" ALK="10.0" ALKS="10.0" ALL="10.0" ALLO="10.0" AMAR="10.0" AMD="10.0" AMGN="10.0" AMRS="10.0" AMX="10.0" AMZN="10.0" APA="10.0" APG="10.0" APHA="10.0" APPL="10.0" APT="10.0" ARCO="10.0" ARLO="10.0" ARM="10.0" ARMK="10.0" ARR="10.0" ASNA="10.0" ATVI="10.0" AU="10.0" AUY="10.0" AVH="10.0" AXGT="10.0" AXIM="10.0" AXP="10.0" AYX="10.0" AZN="10.0" BA="10.0" BABA="10.0" BB="10.0" BBBY="10.0" BBD="10.0" BBVA="10.0" BBY="10.0" BC="10.0" BCOV="10.0" BE="10.0" BF="10.0" BF.B="10.0" BKR="10.0" BLDR="10.0" BOXL="10.0" BP="10.0" BRFS="10.0" BRQS="10.0" BTG="10.0" CAKE="10.0" CAN="10.0" CARR="10.0" CAT="10.0" CCAN="10.0" CCL="10.0" CDE="10.0" CGC="10.0" CGIX="10.0" CIDM="10.0" CLDR="10.0" CLVS="10.0" CNK="10.0" CNSP="10.0" COMP="10.0" CPE="10.0" CRDF="10.0" CRM="10.0" CRON="10.0" CSCO="10.0" CTVA="10.0" CVS="10.0" CWH="10.0" CYCC="10.0" CYDY="10.0" DAL="10.0" DBVT="10.0" DBX="10.0" DDD="10.0" DDOG="10.0" DE="10.0" DHT="10.0" DLAKF="10.0" DRAD="10.0" DT="10.0" DUK="10.0" DVAX="10.0" E="10.0" EAT="10.0" EBAY="10.0" ECL="10.0" EL="10.0" ELAN="10.0" ENIA="10.0" ENLC="10.0" ENTX="10.0" EOG="10.0" EPD="10.0" EPZM="10.0" EQNR="10.0" EQT="10.0" ET="10.0" ETSY="10.0" EVRG="10.0" EXK="10.0" EXPE="10.0" FAST="10.0" FB="10.0" FCX="10.0" FDX="10.0" FISV="10.0" FIT="10.0" FIZZ="10.0" FL="10.0" FSLY="10.0" FSM="10.0" FTCH="10.0" FTNT="10.0" FTSI="10.0" GAB="10.0" GAU="10.0" GE="10.0" GFI="10.0" GGO="10.0" GH="10.0" GILD="10.0" GLPI="10.0" GLUU="10.0" GMED="10.0" GOLD="10.0" GPRO="10.0" GRNQ="10.0" GSK="10.0" GSV="10.0" HAL="10.0" HL="10.0" HLX="10.0" HMY="10.0" HP="10.0" HPE="10.0" HRB="10.0" HTHT="10.0" HTZ="10.0" HUYA="10.0" HYRE="10.0" HZNP="10.0" IAC="10.0" IAG="10.0" IBIO="10.0" IBM="10.0" ICAGY="10.0" ICL="10.0" ILMN="10.0" ING="10.0" INO="10.0" INSG="10.0" INTC="10.0" ITCI="10.0" JBLU="10.0" JETS="10.0" JKS="10.0" KDMN="10.0" KGC="10.0" KHC="10.0" KMI="10.0" KODK="10.0" KPCPF="10.0" KURA="10.0" LAC="10.0" LAKE="10.0" LLY="10.0" LODE="10.0" LTM="10.0" LUV="10.0" LVS="10.0" LYFT="10.0" MBT="10.0" MFA="10.0" MGY="10.0" MNKD="10.0" MNLO="10.0" MPW="10.0" MRNA="10.0" MRO="10.0" MSFT="10.0" MUX="10.0" MVIS="10.0" NAK="10.0" NAT="10.0" NCV="10.0" NDX="10.0" NET="10.0" NEXT="10.0" NFLX="10.0" NGD="10.0" NIO="10.0" NKLA="10.0" NLY="10.0" NRZ="10.0" NSLPQ="10.0" NTGR="10.0" NTNX="10.0" NVAX="10.0" NVCR="10.0" NVDA="10.0" NVEE="10.0" NWL="10.0" ONEM="10.0" ORTX="10.0" OSTK="10.0" PAAC="10.0" PACB="10.0" PANW="10.0" PBF="10.0" PBR="10.0" PENN="10.0" PFE="10.0" PIXY="10.0" PLAY="10.0" PLCE="10.0" PLNHF="10.0" PLNT="10.0" POR="10.0" PPD="10.0" PRTY="10.0" PULM="10.0" QGEN="10.0" QQQ="10.0" R="10.0" RCL="10.0" REED="10.0" RIG="10.0" RLFTF="10.0" ROKO="10.0" ROKU="10.0" RRC="10.0" RT="10.0" RTX="10.0" S="10.0" SABR="10.0" SAVE="10.0" SCGIX="10.0" SESN="10.0" SFET="10.0" SGLB="10.0" SHLL="10.0" SHOP="10.0" SINT="10.0" SLF="10.0" SLGG="10.0" SM="10.0" SNOW="10.0" SOL="10.0" SPPI="10.0" SPT="10.0" SPX="10.0" SPY="10.0" SQ="10.0" SRC="10.0" SRNE="10.0" SRPT="10.0" SSRM="10.0" SUMO="10.0" SURF="10.0" SWBI="10.0" SWCH="10.0" SWKS="10.0" T="10.0" TCEHY="10.0" TIF="10.0" TLRY="10.0" TMUS="10.0" TNXP="10.0" TPR="10.0" TRIL="10.0" TRQ="10.0" TSLA="10.0" TSM="10.0" TUP="10.0" TWTR="10.0" UA="10.0" UAL="10.0" UBER="10.0" UGAZ="10.0" UIS="10.0" UONE="10.0" UPS="10.0" USO="10.0" VALE="10.0" VER="10.0" VET="10.0" VICI="10.0" VIPS="10.0" VIX="10.0" VNET="10.0" VNO="10.0" VSLR="10.0" VTIQ="10.0" VYNE="10.0" VZ="10.0" WBA="10.0" WKHS="10.0" WMB="10.0" WORK="10.0" WPRT="10.0" X="10.0" XELB="10.0" XLNX="10.0" YELP="10.0" YEXT="10.0" ZBH="10.0" ZM="10.0" ZUO="10.0" ZYME="10.0"/>
                  </TRG_0>
                </OCO_STOP>
                <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="1.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AAL="1.0" AAPL="1.0" ABB="1.0" ABBV="1.0" ABIO="1.0" ABR="1.0" ABUS="1.0" ACRX="1.0" ADBE="1.0" ADM="1.0" ADMA="1.0" ADPT="1.0" AEL="1.0" AES="1.0" AGNC="1.0" AGRX="1.0" AIG="1.0" ALK="1.0" ALKS="1.0" ALL="1.0" ALLO="1.0" AMAR="1.0" AMD="1.0" AMGN="1.0" AMRS="1.0" AMX="1.0" AMZN="1.0" APA="1.0" APG="1.0" APHA="1.0" APPL="1.0" APT="1.0" ARCO="1.0" ARLO="1.0" ARM="1.0" ARMK="1.0" ARR="1.0" ASNA="1.0" ATVI="1.0" AU="1.0" AUY="1.0" AVH="1.0" AXGT="1.0" AXIM="1.0" AXP="1.0" AYX="1.0" AZN="1.0" BA="1.0" BABA="1.0" BB="1.0" BBBY="1.0" BBD="1.0" BBVA="1.0" BBY="1.0" BC="1.0" BCOV="1.0" BE="1.0" BF="1.0" BF.B="1.0" BKR="1.0" BLDR="1.0" BOXL="1.0" BP="1.0" BRFS="1.0" BRQS="1.0" BTG="1.0" CAKE="1.0" CAN="1.0" CARR="1.0" CAT="1.0" CCAN="1.0" CCL="1.0" CDE="1.0" CGC="1.0" CGIX="1.0" CIDM="1.0" CLDR="1.0" CLVS="1.0" CNK="1.0" CNSP="1.0" COMP="1.0" CPE="1.0" CRDF="1.0" CRM="1.0" CRON="1.0" CSCO="1.0" CTVA="1.0" CVS="1.0" CWH="1.0" CYCC="1.0" CYDY="1.0" DAL="1.0" DBVT="1.0" DBX="1.0" DDD="1.0" DDOG="1.0" DE="1.0" DHT="1.0" DLAKF="1.0" DRAD="1.0" DT="1.0" DUK="1.0" DVAX="1.0" E="1.0" EAT="1.0" EBAY="1.0" ECL="1.0" EL="1.0" ELAN="1.0" ENIA="1.0" ENLC="1.0" ENTX="1.0" EOG="1.0" EPD="1.0" EPZM="1.0" EQNR="1.0" EQT="1.0" ET="1.0" ETSY="1.0" EVRG="1.0" EXK="1.0" EXPE="1.0" FAST="1.0" FB="1.0" FCX="1.0" FDX="1.0" FISV="1.0" FIT="1.0" FIZZ="1.0" FL="1.0" FSLY="1.0" FSM="1.0" FTCH="1.0" FTNT="1.0" FTSI="1.0" GAB="1.0" GAU="1.0" GE="1.0" GFI="1.0" GGO="1.0" GH="1.0" GILD="1.0" GLPI="1.0" GLUU="1.0" GMED="1.0" GOLD="1.0" GPRO="1.0" GRNQ="1.0" GSK="1.0" GSV="1.0" HAL="1.0" HL="1.0" HLX="1.0" HMY="1.0" HP="1.0" HPE="1.0" HRB="1.0" HTHT="1.0" HTZ="1.0" HUYA="1.0" HYRE="1.0" HZNP="1.0" IAC="1.0" IAG="1.0" IBIO="1.0" IBM="1.0" ICAGY="1.0" ICL="1.0" ILMN="1.0" ING="1.0" INO="1.0" INSG="1.0" INTC="1.0" ITCI="1.0" JBLU="1.0" JETS="1.0" JKS="1.0" KDMN="1.0" KGC="1.0" KHC="1.0" KMI="1.0" KODK="1.0" KPCPF="1.0" KURA="1.0" LAC="1.0" LAKE="1.0" LLY="1.0" LODE="1.0" LTM="1.0" LUV="1.0" LVS="1.0" LYFT="1.0" MBT="1.0" MFA="1.0" MGY="1.0" MNKD="1.0" MNLO="1.0" MPW="1.0" MRNA="1.0" MRO="1.0" MSFT="1.0" MUX="1.0" MVIS="1.0" NAK="1.0" NAT="1.0" NCV="1.0" NDX="1.0" NET="1.0" NEXT="1.0" NFLX="1.0" NGD="1.0" NIO="1.0" NKLA="1.0" NLY="1.0" NRZ="1.0" NSLPQ="1.0" NTGR="1.0" NTNX="1.0" NVAX="1.0" NVCR="1.0" NVDA="1.0" NVEE="1.0" NWL="1.0" ONEM="1.0" ORTX="1.0" OSTK="1.0" PAAC="1.0" PACB="1.0" PANW="1.0" PBF="1.0" PBR="1.0" PENN="1.0" PFE="1.0" PIXY="1.0" PLAY="1.0" PLCE="1.0" PLNHF="1.0" PLNT="1.0" POR="1.0" PPD="1.0" PRTY="1.0" PULM="1.0" QGEN="1.0" QQQ="1.0" R="1.0" RCL="1.0" REED="1.0" RIG="1.0" RLFTF="1.0" ROKO="1.0" ROKU="1.0" RRC="1.0" RT="1.0" RTX="1.0" S="1.0" SABR="1.0" SAVE="1.0" SCGIX="1.0" SESN="1.0" SFET="1.0" SGLB="1.0" SHLL="1.0" SHOP="1.0" SINT="1.0" SLF="1.0" SLGG="1.0" SM="1.0" SNOW="1.0" SOL="1.0" SPPI="1.0" SPT="1.0" SPX="1.0" SPY="1.0" SQ="1.0" SRC="1.0" SRNE="1.0" SRPT="1.0" SSRM="1.0" SUMO="1.0" SURF="1.0" SWBI="1.0" SWCH="1.0" SWKS="1.0" T="1.0" TCEHY="1.0" TIF="1.0" TLRY="1.0" TMUS="1.0" TNXP="1.0" TPR="1.0" TRIL="1.0" TRQ="1.0" TSLA="1.0" TSM="1.0" TUP="1.0" TWTR="1.0" UA="1.0" UAL="1.0" UBER="1.0" UGAZ="1.0" UIS="1.0" UONE="1.0" UPS="1.0" USO="1.0" VALE="1.0" VER="1.0" VET="1.0" VICI="1.0" VIPS="1.0" VIX="1.0" VNET="1.0" VNO="1.0" VSLR="1.0" VTIQ="1.0" VYNE="1.0" VZ="1.0" WBA="1.0" WKHS="1.0" WMB="1.0" WORK="1.0" WPRT="1.0" X="1.0" XELB="1.0" XLNX="1.0" YELP="1.0" YEXT="1.0" ZBH="1.0" ZM="1.0" ZUO="1.0" ZYME="1.0"/>
                </TRG_0>
                <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-1.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AAL="-1.0" AAPL="-1.0" ABB="-1.0" ABBV="-1.0" ABIO="-1.0" ABR="-1.0" ABUS="-1.0" ACRX="-1.0" ADBE="-1.0" ADM="-1.0" ADMA="-1.0" ADPT="-1.0" AEL="-1.0" AES="-1.0" AGNC="-1.0" AGRX="-1.0" AIG="-1.0" ALK="-1.0" ALKS="-1.0" ALL="-1.0" ALLO="-1.0" AMAR="-1.0" AMD="-1.0" AMGN="-1.0" AMRS="-1.0" AMX="-1.0" AMZN="-1.0" APA="-1.0" APG="-1.0" APHA="-1.0" APPL="-1.0" APT="-1.0" ARCO="-1.0" ARLO="-1.0" ARM="-1.0" ARMK="-1.0" ARR="-1.0" ASNA="-1.0" ATVI="-1.0" AU="-1.0" AUY="-1.0" AVH="-1.0" AXGT="-1.0" AXIM="-1.0" AXP="-1.0" AYX="-1.0" AZN="-1.0" BA="-1.0" BABA="-1.0" BB="-1.0" BBBY="-1.0" BBD="-1.0" BBVA="-1.0" BBY="-1.0" BC="-1.0" BCOV="-1.0" BE="-1.0" BF="-1.0" BF.B="-1.0" BKR="-1.0" BLDR="-1.0" BOXL="-1.0" BP="-1.0" BRFS="-1.0" BRQS="-1.0" BTG="-1.0" CAKE="-1.0" CAN="-1.0" CARR="-1.0" CAT="-1.0" CCAN="-1.0" CCL="-1.0" CDE="-1.0" CGC="-1.0" CGIX="-1.0" CIDM="-1.0" CLDR="-1.0" CLVS="-1.0" CNK="-1.0" CNSP="-1.0" COMP="-1.0" CPE="-1.0" CRDF="-1.0" CRM="-1.0" CRON="-1.0" CSCO="-1.0" CTVA="-1.0" CVS="-1.0" CWH="-1.0" CYCC="-1.0" CYDY="-1.0" DAL="-1.0" DBVT="-1.0" DBX="-1.0" DDD="-1.0" DDOG="-1.0" DE="-1.0" DHT="-1.0" DLAKF="-1.0" DRAD="-1.0" DT="-1.0" DUK="-1.0" DVAX="-1.0" E="-1.0" EAT="-1.0" EBAY="-1.0" ECL="-1.0" EL="-1.0" ELAN="-1.0" ENIA="-1.0" ENLC="-1.0" ENTX="-1.0" EOG="-1.0" EPD="-1.0" EPZM="-1.0" EQNR="-1.0" EQT="-1.0" ET="-1.0" ETSY="-1.0" EVRG="-1.0" EXK="-1.0" EXPE="-1.0" FAST="-1.0" FB="-1.0" FCX="-1.0" FDX="-1.0" FISV="-1.0" FIT="-1.0" FIZZ="-1.0" FL="-1.0" FSLY="-1.0" FSM="-1.0" FTCH="-1.0" FTNT="-1.0" FTSI="-1.0" GAB="-1.0" GAU="-1.0" GE="-1.0" GFI="-1.0" GGO="-1.0" GH="-1.0" GILD="-1.0" GLPI="-1.0" GLUU="-1.0" GMED="-1.0" GOLD="-1.0" GPRO="-1.0" GRNQ="-1.0" GSK="-1.0" GSV="-1.0" HAL="-1.0" HL="-1.0" HLX="-1.0" HMY="-1.0" HP="-1.0" HPE="-1.0" HRB="-1.0" HTHT="-1.0" HTZ="-1.0" HUYA="-1.0" HYRE="-1.0" HZNP="-1.0" IAC="-1.0" IAG="-1.0" IBIO="-1.0" IBM="-1.0" ICAGY="-1.0" ICL="-1.0" ILMN="-1.0" ING="-1.0" INO="-1.0" INSG="-1.0" INTC="-1.0" ITCI="-1.0" JBLU="-1.0" JETS="-1.0" JKS="-1.0" KDMN="-1.0" KGC="-1.0" KHC="-1.0" KMI="-1.0" KODK="-1.0" KPCPF="-1.0" KURA="-1.0" LAC="-1.0" LAKE="-1.0" LLY="-1.0" LODE="-1.0" LTM="-1.0" LUV="-1.0" LVS="-1.0" LYFT="-1.0" MBT="-1.0" MFA="-1.0" MGY="-1.0" MNKD="-1.0" MNLO="-1.0" MPW="-1.0" MRNA="-1.0" MRO="-1.0" MSFT="-1.0" MUX="-1.0" MVIS="-1.0" NAK="-1.0" NAT="-1.0" NCV="-1.0" NDX="-1.0" NET="-1.0" NEXT="-1.0" NFLX="-1.0" NGD="-1.0" NIO="-1.0" NKLA="-1.0" NLY="-1.0" NRZ="-1.0" NSLPQ="-1.0" NTGR="-1.0" NTNX="-1.0" NVAX="-1.0" NVCR="-1.0" NVDA="-1.0" NVEE="-1.0" NWL="-1.0" ONEM="-1.0" ORTX="-1.0" OSTK="-1.0" PAAC="-1.0" PACB="-1.0" PANW="-1.0" PBF="-1.0" PBR="-1.0" PENN="-1.0" PFE="-1.0" PIXY="-1.0" PLAY="-1.0" PLCE="-1.0" PLNHF="-1.0" PLNT="-1.0" POR="-1.0" PPD="-1.0" PRTY="-1.0" PULM="-1.0" QGEN="-1.0" QQQ="-1.0" R="-1.0" RCL="-1.0" REED="-1.0" RIG="-1.0" RLFTF="-1.0" ROKO="-1.0" ROKU="-1.0" RRC="-1.0" RT="-1.0" RTX="-1.0" S="-1.0" SABR="-1.0" SAVE="-1.0" SCGIX="-1.0" SESN="-1.0" SFET="-1.0" SGLB="-1.0" SHLL="-1.0" SHOP="-1.0" SINT="-1.0" SLF="-1.0" SLGG="-1.0" SM="-1.0" SNOW="-1.0" SOL="-1.0" SPPI="-1.0" SPT="-1.0" SPX="-1.0" SPY="-1.0" SQ="-1.0" SRC="-1.0" SRNE="-1.0" SRPT="-1.0" SSRM="-1.0" SUMO="-1.0" SURF="-1.0" SWBI="-1.0" SWCH="-1.0" SWKS="-1.0" T="-1.0" TCEHY="-1.0" TIF="-1.0" TLRY="-1.0" TMUS="-1.0" TNXP="-1.0" TPR="-1.0" TRIL="-1.0" TRQ="-1.0" TSLA="-1.0" TSM="-1.0" TUP="-1.0" TWTR="-1.0" UA="-1.0" UAL="-1.0" UBER="-1.0" UGAZ="-1.0" UIS="-1.0" UONE="-1.0" UPS="-1.0" USO="-1.0" VALE="-1.0" VER="-1.0" VET="-1.0" VICI="-1.0" VIPS="-1.0" VIX="-1.0" VNET="-1.0" VNO="-1.0" VSLR="-1.0" VTIQ="-1.0" VYNE="-1.0" VZ="-1.0" WBA="-1.0" WKHS="-1.0" WMB="-1.0" WORK="-1.0" WPRT="-1.0" X="-1.0" XELB="-1.0" XLNX="-1.0" YELP="-1.0" YEXT="-1.0" ZBH="-1.0" ZM="-1.0" ZUO="-1.0" ZYME="-1.0"/>
                </TRG_1>
                <_2>
                  <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="2.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL AAL="2.0" AAPL="2.0" ABB="2.0" ABBV="2.0" ABIO="2.0" ABR="2.0" ABUS="2.0" ACRX="2.0" ADBE="2.0" ADM="2.0" ADMA="2.0" ADPT="2.0" AEL="2.0" AES="2.0" AGNC="2.0" AGRX="2.0" AIG="2.0" ALK="2.0" ALKS="2.0" ALL="2.0" ALLO="2.0" AMAR="2.0" AMD="2.0" AMGN="2.0" AMRS="2.0" AMX="2.0" AMZN="2.0" APA="2.0" APG="2.0" APHA="2.0" APPL="2.0" APT="2.0" ARCO="2.0" ARLO="2.0" ARM="2.0" ARMK="2.0" ARR="2.0" ASNA="2.0" ATVI="2.0" AU="2.0" AUY="2.0" AVH="2.0" AXGT="2.0" AXIM="2.0" AXP="2.0" AYX="2.0" AZN="2.0" BA="2.0" BABA="2.0" BB="2.0" BBBY="2.0" BBD="2.0" BBVA="2.0" BBY="2.0" BC="2.0" BCOV="2.0" BE="2.0" BF="2.0" BF.B="2.0" BKR="2.0" BLDR="2.0" BOXL="2.0" BP="2.0" BRFS="2.0" BRQS="2.0" BTG="2.0" CAKE="2.0" CAN="2.0" CARR="2.0" CAT="2.0" CCAN="2.0" CCL="2.0" CDE="2.0" CGC="2.0" CGIX="2.0" CIDM="2.0" CLDR="2.0" CLVS="2.0" CNK="2.0" CNSP="2.0" COMP="2.0" CPE="2.0" CRDF="2.0" CRM="2.0" CRON="2.0" CSCO="2.0" CTVA="2.0" CVS="2.0" CWH="2.0" CYCC="2.0" CYDY="2.0" DAL="2.0" DBVT="2.0" DBX="2.0" DDD="2.0" DDOG="2.0" DE="2.0" DHT="2.0" DLAKF="2.0" DRAD="2.0" DT="2.0" DUK="2.0" DVAX="2.0" E="2.0" EAT="2.0" EBAY="2.0" ECL="2.0" EL="2.0" ELAN="2.0" ENIA="2.0" ENLC="2.0" ENTX="2.0" EOG="2.0" EPD="2.0" EPZM="2.0" EQNR="2.0" EQT="2.0" ET="2.0" ETSY="2.0" EVRG="2.0" EXK="2.0" EXPE="2.0" FAST="2.0" FB="2.0" FCX="2.0" FDX="2.0" FISV="2.0" FIT="2.0" FIZZ="2.0" FL="2.0" FSLY="2.0" FSM="2.0" FTCH="2.0" FTNT="2.0" FTSI="2.0" GAB="2.0" GAU="2.0" GE="2.0" GFI="2.0" GGO="2.0" GH="2.0" GILD="2.0" GLPI="2.0" GLUU="2.0" GMED="2.0" GOLD="2.0" GPRO="2.0" GRNQ="2.0" GSK="2.0" GSV="2.0" HAL="2.0" HL="2.0" HLX="2.0" HMY="2.0" HP="2.0" HPE="2.0" HRB="2.0" HTHT="2.0" HTZ="2.0" HUYA="2.0" HYRE="2.0" HZNP="2.0" IAC="2.0" IAG="2.0" IBIO="2.0" IBM="2.0" ICAGY="2.0" ICL="2.0" ILMN="2.0" ING="2.0" INO="2.0" INSG="2.0" INTC="2.0" ITCI="2.0" JBLU="2.0" JETS="2.0" JKS="2.0" KDMN="2.0" KGC="2.0" KHC="2.0" KMI="2.0" KODK="2.0" KPCPF="2.0" KURA="2.0" LAC="2.0" LAKE="2.0" LLY="2.0" LODE="2.0" LTM="2.0" LUV="2.0" LVS="2.0" LYFT="2.0" MBT="2.0" MFA="2.0" MGY="2.0" MNKD="2.0" MNLO="2.0" MPW="2.0" MRNA="2.0" MRO="2.0" MSFT="2.0" MUX="2.0" MVIS="2.0" NAK="2.0" NAT="2.0" NCV="2.0" NDX="2.0" NET="2.0" NEXT="2.0" NFLX="2.0" NGD="2.0" NIO="2.0" NKLA="2.0" NLY="2.0" NRZ="2.0" NSLPQ="2.0" NTGR="2.0" NTNX="2.0" NVAX="2.0" NVCR="2.0" NVDA="2.0" NVEE="2.0" NWL="2.0" ONEM="2.0" ORTX="2.0" OSTK="2.0" PAAC="2.0" PACB="2.0" PANW="2.0" PBF="2.0" PBR="2.0" PENN="2.0" PFE="2.0" PIXY="2.0" PLAY="2.0" PLCE="2.0" PLNHF="2.0" PLNT="2.0" POR="2.0" PPD="2.0" PRTY="2.0" PULM="2.0" QGEN="2.0" QQQ="2.0" R="2.0" RCL="2.0" REED="2.0" RIG="2.0" RLFTF="2.0" ROKO="2.0" ROKU="2.0" RRC="2.0" RT="2.0" RTX="2.0" S="2.0" SABR="2.0" SAVE="2.0" SCGIX="2.0" SESN="2.0" SFET="2.0" SGLB="2.0" SHLL="2.0" SHOP="2.0" SINT="2.0" SLF="2.0" SLGG="2.0" SM="2.0" SNOW="2.0" SOL="2.0" SPPI="2.0" SPT="2.0" SPX="2.0" SPY="2.0" SQ="2.0" SRC="2.0" SRNE="2.0" SRPT="2.0" SSRM="2.0" SUMO="2.0" SURF="2.0" SWBI="2.0" SWCH="2.0" SWKS="2.0" T="2.0" TCEHY="2.0" TIF="2.0" TLRY="2.0" TMUS="2.0" TNXP="2.0" TPR="2.0" TRIL="2.0" TRQ="2.0" TSLA="2.0" TSM="2.0" TUP="2.0" TWTR="2.0" UA="2.0" UAL="2.0" UBER="2.0" UGAZ="2.0" UIS="2.0" UONE="2.0" UPS="2.0" USO="2.0" VALE="2.0" VER="2.0" VET="2.0" VICI="2.0" VIPS="2.0" VIX="2.0" VNET="2.0" VNO="2.0" VSLR="2.0" VTIQ="2.0" VYNE="2.0" VZ="2.0" WBA="2.0" WKHS="2.0" WMB="2.0" WORK="2.0" WPRT="2.0" X="2.0" XELB="2.0" XLNX="2.0" YELP="2.0" YEXT="2.0" ZBH="2.0" ZM="2.0" ZUO="2.0" ZYME="2.0"/>
                  </TRG_0>
                  <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-2.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL AAL="-2.0" AAPL="-2.0" ABB="-2.0" ABBV="-2.0" ABIO="-2.0" ABR="-2.0" ABUS="-2.0" ACRX="-2.0" ADBE="-2.0" ADM="-2.0" ADMA="-2.0" ADPT="-2.0" AEL="-2.0" AES="-2.0" AGNC="-2.0" AGRX="-2.0" AIG="-2.0" ALK="-2.0" ALKS="-2.0" ALL="-2.0" ALLO="-2.0" AMAR="-2.0" AMD="-2.0" AMGN="-2.0" AMRS="-2.0" AMX="-2.0" AMZN="-2.0" APA="-2.0" APG="-2.0" APHA="-2.0" APPL="-2.0" APT="-2.0" ARCO="-2.0" ARLO="-2.0" ARM="-2.0" ARMK="-2.0" ARR="-2.0" ASNA="-2.0" ATVI="-2.0" AU="-2.0" AUY="-2.0" AVH="-2.0" AXGT="-2.0" AXIM="-2.0" AXP="-2.0" AYX="-2.0" AZN="-2.0" BA="-2.0" BABA="-2.0" BB="-2.0" BBBY="-2.0" BBD="-2.0" BBVA="-2.0" BBY="-2.0" BC="-2.0" BCOV="-2.0" BE="-2.0" BF="-2.0" BF.B="-2.0" BKR="-2.0" BLDR="-2.0" BOXL="-2.0" BP="-2.0" BRFS="-2.0" BRQS="-2.0" BTG="-2.0" CAKE="-2.0" CAN="-2.0" CARR="-2.0" CAT="-2.0" CCAN="-2.0" CCL="-2.0" CDE="-2.0" CGC="-2.0" CGIX="-2.0" CIDM="-2.0" CLDR="-2.0" CLVS="-2.0" CNK="-2.0" CNSP="-2.0" COMP="-2.0" CPE="-2.0" CRDF="-2.0" CRM="-2.0" CRON="-2.0" CSCO="-2.0" CTVA="-2.0" CVS="-2.0" CWH="-2.0" CYCC="-2.0" CYDY="-2.0" DAL="-2.0" DBVT="-2.0" DBX="-2.0" DDD="-2.0" DDOG="-2.0" DE="-2.0" DHT="-2.0" DLAKF="-2.0" DRAD="-2.0" DT="-2.0" DUK="-2.0" DVAX="-2.0" E="-2.0" EAT="-2.0" EBAY="-2.0" ECL="-2.0" EL="-2.0" ELAN="-2.0" ENIA="-2.0" ENLC="-2.0" ENTX="-2.0" EOG="-2.0" EPD="-2.0" EPZM="-2.0" EQNR="-2.0" EQT="-2.0" ET="-2.0" ETSY="-2.0" EVRG="-2.0" EXK="-2.0" EXPE="-2.0" FAST="-2.0" FB="-2.0" FCX="-2.0" FDX="-2.0" FISV="-2.0" FIT="-2.0" FIZZ="-2.0" FL="-2.0" FSLY="-2.0" FSM="-2.0" FTCH="-2.0" FTNT="-2.0" FTSI="-2.0" GAB="-2.0" GAU="-2.0" GE="-2.0" GFI="-2.0" GGO="-2.0" GH="-2.0" GILD="-2.0" GLPI="-2.0" GLUU="-2.0" GMED="-2.0" GOLD="-2.0" GPRO="-2.0" GRNQ="-2.0" GSK="-2.0" GSV="-2.0" HAL="-2.0" HL="-2.0" HLX="-2.0" HMY="-2.0" HP="-2.0" HPE="-2.0" HRB="-2.0" HTHT="-2.0" HTZ="-2.0" HUYA="-2.0" HYRE="-2.0" HZNP="-2.0" IAC="-2.0" IAG="-2.0" IBIO="-2.0" IBM="-2.0" ICAGY="-2.0" ICL="-2.0" ILMN="-2.0" ING="-2.0" INO="-2.0" INSG="-2.0" INTC="-2.0" ITCI="-2.0" JBLU="-2.0" JETS="-2.0" JKS="-2.0" KDMN="-2.0" KGC="-2.0" KHC="-2.0" KMI="-2.0" KODK="-2.0" KPCPF="-2.0" KURA="-2.0" LAC="-2.0" LAKE="-2.0" LLY="-2.0" LODE="-2.0" LTM="-2.0" LUV="-2.0" LVS="-2.0" LYFT="-2.0" MBT="-2.0" MFA="-2.0" MGY="-2.0" MNKD="-2.0" MNLO="-2.0" MPW="-2.0" MRNA="-2.0" MRO="-2.0" MSFT="-2.0" MUX="-2.0" MVIS="-2.0" NAK="-2.0" NAT="-2.0" NCV="-2.0" NDX="-2.0" NET="-2.0" NEXT="-2.0" NFLX="-2.0" NGD="-2.0" NIO="-2.0" NKLA="-2.0" NLY="-2.0" NRZ="-2.0" NSLPQ="-2.0" NTGR="-2.0" NTNX="-2.0" NVAX="-2.0" NVCR="-2.0" NVDA="-2.0" NVEE="-2.0" NWL="-2.0" ONEM="-2.0" ORTX="-2.0" OSTK="-2.0" PAAC="-2.0" PACB="-2.0" PANW="-2.0" PBF="-2.0" PBR="-2.0" PENN="-2.0" PFE="-2.0" PIXY="-2.0" PLAY="-2.0" PLCE="-2.0" PLNHF="-2.0" PLNT="-2.0" POR="-2.0" PPD="-2.0" PRTY="-2.0" PULM="-2.0" QGEN="-2.0" QQQ="-2.0" R="-2.0" RCL="-2.0" REED="-2.0" RIG="-2.0" RLFTF="-2.0" ROKO="-2.0" ROKU="-2.0" RRC="-2.0" RT="-2.0" RTX="-2.0" S="-2.0" SABR="-2.0" SAVE="-2.0" SCGIX="-2.0" SESN="-2.0" SFET="-2.0" SGLB="-2.0" SHLL="-2.0" SHOP="-2.0" SINT="-2.0" SLF="-2.0" SLGG="-2.0" SM="-2.0" SNOW="-2.0" SOL="-2.0" SPPI="-2.0" SPT="-2.0" SPX="-2.0" SPY="-2.0" SQ="-2.0" SRC="-2.0" SRNE="-2.0" SRPT="-2.0" SSRM="-2.0" SUMO="-2.0" SURF="-2.0" SWBI="-2.0" SWCH="-2.0" SWKS="-2.0" T="-2.0" TCEHY="-2.0" TIF="-2.0" TLRY="-2.0" TMUS="-2.0" TNXP="-2.0" TPR="-2.0" TRIL="-2.0" TRQ="-2.0" TSLA="-2.0" TSM="-2.0" TUP="-2.0" TWTR="-2.0" UA="-2.0" UAL="-2.0" UBER="-2.0" UGAZ="-2.0" UIS="-2.0" UONE="-2.0" UPS="-2.0" USO="-2.0" VALE="-2.0" VER="-2.0" VET="-2.0" VICI="-2.0" VIPS="-2.0" VIX="-2.0" VNET="-2.0" VNO="-2.0" VSLR="-2.0" VTIQ="-2.0" VYNE="-2.0" VZ="-2.0" WBA="-2.0" WKHS="-2.0" WMB="-2.0" WORK="-2.0" WPRT="-2.0" X="-2.0" XELB="-2.0" XLNX="-2.0" YELP="-2.0" YEXT="-2.0" ZBH="-2.0" ZM="-2.0" ZUO="-2.0" ZYME="-2.0"/>
                  </TRG_1>
                </_2>
                <_3>
                  <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="3.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL AAL="3.0" AAPL="3.0" ABB="3.0" ABBV="3.0" ABIO="3.0" ABR="3.0" ABUS="3.0" ACRX="3.0" ADBE="3.0" ADM="3.0" ADMA="3.0" ADPT="3.0" AEL="3.0" AES="3.0" AGNC="3.0" AGRX="3.0" AIG="3.0" ALK="3.0" ALKS="3.0" ALL="3.0" ALLO="3.0" AMAR="3.0" AMD="3.0" AMGN="3.0" AMRS="3.0" AMX="3.0" AMZN="3.0" APA="3.0" APG="3.0" APHA="3.0" APPL="3.0" APT="3.0" ARCO="3.0" ARLO="3.0" ARM="3.0" ARMK="3.0" ARR="3.0" ASNA="3.0" ATVI="3.0" AU="3.0" AUY="3.0" AVH="3.0" AXGT="3.0" AXIM="3.0" AXP="3.0" AYX="3.0" AZN="3.0" BA="3.0" BABA="3.0" BB="3.0" BBBY="3.0" BBD="3.0" BBVA="3.0" BBY="3.0" BC="3.0" BCOV="3.0" BE="3.0" BF="3.0" BF.B="3.0" BKR="3.0" BLDR="3.0" BOXL="3.0" BP="3.0" BRFS="3.0" BRQS="3.0" BTG="3.0" CAKE="3.0" CAN="3.0" CARR="3.0" CAT="3.0" CCAN="3.0" CCL="3.0" CDE="3.0" CGC="3.0" CGIX="3.0" CIDM="3.0" CLDR="3.0" CLVS="3.0" CNK="3.0" CNSP="3.0" COMP="3.0" CPE="3.0" CRDF="3.0" CRM="3.0" CRON="3.0" CSCO="3.0" CTVA="3.0" CVS="3.0" CWH="3.0" CYCC="3.0" CYDY="3.0" DAL="3.0" DBVT="3.0" DBX="3.0" DDD="3.0" DDOG="3.0" DE="3.0" DHT="3.0" DLAKF="3.0" DRAD="3.0" DT="3.0" DUK="3.0" DVAX="3.0" E="3.0" EAT="3.0" EBAY="3.0" ECL="3.0" EL="3.0" ELAN="3.0" ENIA="3.0" ENLC="3.0" ENTX="3.0" EOG="3.0" EPD="3.0" EPZM="3.0" EQNR="3.0" EQT="3.0" ET="3.0" ETSY="3.0" EVRG="3.0" EXK="3.0" EXPE="3.0" FAST="3.0" FB="3.0" FCX="3.0" FDX="3.0" FISV="3.0" FIT="3.0" FIZZ="3.0" FL="3.0" FSLY="3.0" FSM="3.0" FTCH="3.0" FTNT="3.0" FTSI="3.0" GAB="3.0" GAU="3.0" GE="3.0" GFI="3.0" GGO="3.0" GH="3.0" GILD="3.0" GLPI="3.0" GLUU="3.0" GMED="3.0" GOLD="3.0" GPRO="3.0" GRNQ="3.0" GSK="3.0" GSV="3.0" HAL="3.0" HL="3.0" HLX="3.0" HMY="3.0" HP="3.0" HPE="3.0" HRB="3.0" HTHT="3.0" HTZ="3.0" HUYA="3.0" HYRE="3.0" HZNP="3.0" IAC="3.0" IAG="3.0" IBIO="3.0" IBM="3.0" ICAGY="3.0" ICL="3.0" ILMN="3.0" ING="3.0" INO="3.0" INSG="3.0" INTC="3.0" ITCI="3.0" JBLU="3.0" JETS="3.0" JKS="3.0" KDMN="3.0" KGC="3.0" KHC="3.0" KMI="3.0" KODK="3.0" KPCPF="3.0" KURA="3.0" LAC="3.0" LAKE="3.0" LLY="3.0" LODE="3.0" LTM="3.0" LUV="3.0" LVS="3.0" LYFT="3.0" MBT="3.0" MFA="3.0" MGY="3.0" MNKD="3.0" MNLO="3.0" MPW="3.0" MRNA="3.0" MRO="3.0" MSFT="3.0" MUX="3.0" MVIS="3.0" NAK="3.0" NAT="3.0" NCV="3.0" NDX="3.0" NET="3.0" NEXT="3.0" NFLX="3.0" NGD="3.0" NIO="3.0" NKLA="3.0" NLY="3.0" NRZ="3.0" NSLPQ="3.0" NTGR="3.0" NTNX="3.0" NVAX="3.0" NVCR="3.0" NVDA="3.0" NVEE="3.0" NWL="3.0" ONEM="3.0" ORTX="3.0" OSTK="3.0" PAAC="3.0" PACB="3.0" PANW="3.0" PBF="3.0" PBR="3.0" PENN="3.0" PFE="3.0" PIXY="3.0" PLAY="3.0" PLCE="3.0" PLNHF="3.0" PLNT="3.0" POR="3.0" PPD="3.0" PRTY="3.0" PULM="3.0" QGEN="3.0" QQQ="3.0" R="3.0" RCL="3.0" REED="3.0" RIG="3.0" RLFTF="3.0" ROKO="3.0" ROKU="3.0" RRC="3.0" RT="3.0" RTX="3.0" S="3.0" SABR="3.0" SAVE="3.0" SCGIX="3.0" SESN="3.0" SFET="3.0" SGLB="3.0" SHLL="3.0" SHOP="3.0" SINT="3.0" SLF="3.0" SLGG="3.0" SM="3.0" SNOW="3.0" SOL="3.0" SPPI="3.0" SPT="3.0" SPX="3.0" SPY="3.0" SQ="3.0" SRC="3.0" SRNE="3.0" SRPT="3.0" SSRM="3.0" SUMO="3.0" SURF="3.0" SWBI="3.0" SWCH="3.0" SWKS="3.0" T="3.0" TCEHY="3.0" TIF="3.0" TLRY="3.0" TMUS="3.0" TNXP="3.0" TPR="3.0" TRIL="3.0" TRQ="3.0" TSLA="3.0" TSM="3.0" TUP="3.0" TWTR="3.0" UA="3.0" UAL="3.0" UBER="3.0" UGAZ="3.0" UIS="3.0" UONE="3.0" UPS="3.0" USO="3.0" VALE="3.0" VER="3.0" VET="3.0" VICI="3.0" VIPS="3.0" VIX="3.0" VNET="3.0" VNO="3.0" VSLR="3.0" VTIQ="3.0" VYNE="3.0" VZ="3.0" WBA="3.0" WKHS="3.0" WMB="3.0" WORK="3.0" WPRT="3.0" X="3.0" XELB="3.0" XLNX="3.0" YELP="3.0" YEXT="3.0" ZBH="3.0" ZM="3.0" ZUO="3.0" ZYME="3.0"/>
                  </TRG_0>
                  <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-3.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL AAL="-3.0" AAPL="-3.0" ABB="-3.0" ABBV="-3.0" ABIO="-3.0" ABR="-3.0" ABUS="-3.0" ACRX="-3.0" ADBE="-3.0" ADM="-3.0" ADMA="-3.0" ADPT="-3.0" AEL="-3.0" AES="-3.0" AGNC="-3.0" AGRX="-3.0" AIG="-3.0" ALK="-3.0" ALKS="-3.0" ALL="-3.0" ALLO="-3.0" AMAR="-3.0" AMD="-3.0" AMGN="-3.0" AMRS="-3.0" AMX="-3.0" AMZN="-3.0" APA="-3.0" APG="-3.0" APHA="-3.0" APPL="-3.0" APT="-3.0" ARCO="-3.0" ARLO="-3.0" ARM="-3.0" ARMK="-3.0" ARR="-3.0" ASNA="-3.0" ATVI="-3.0" AU="-3.0" AUY="-3.0" AVH="-3.0" AXGT="-3.0" AXIM="-3.0" AXP="-3.0" AYX="-3.0" AZN="-3.0" BA="-3.0" BABA="-3.0" BB="-3.0" BBBY="-3.0" BBD="-3.0" BBVA="-3.0" BBY="-3.0" BC="-3.0" BCOV="-3.0" BE="-3.0" BF="-3.0" BF.B="-3.0" BKR="-3.0" BLDR="-3.0" BOXL="-3.0" BP="-3.0" BRFS="-3.0" BRQS="-3.0" BTG="-3.0" CAKE="-3.0" CAN="-3.0" CARR="-3.0" CAT="-3.0" CCAN="-3.0" CCL="-3.0" CDE="-3.0" CGC="-3.0" CGIX="-3.0" CIDM="-3.0" CLDR="-3.0" CLVS="-3.0" CNK="-3.0" CNSP="-3.0" COMP="-3.0" CPE="-3.0" CRDF="-3.0" CRM="-3.0" CRON="-3.0" CSCO="-3.0" CTVA="-3.0" CVS="-3.0" CWH="-3.0" CYCC="-3.0" CYDY="-3.0" DAL="-3.0" DBVT="-3.0" DBX="-3.0" DDD="-3.0" DDOG="-3.0" DE="-3.0" DHT="-3.0" DLAKF="-3.0" DRAD="-3.0" DT="-3.0" DUK="-3.0" DVAX="-3.0" E="-3.0" EAT="-3.0" EBAY="-3.0" ECL="-3.0" EL="-3.0" ELAN="-3.0" ENIA="-3.0" ENLC="-3.0" ENTX="-3.0" EOG="-3.0" EPD="-3.0" EPZM="-3.0" EQNR="-3.0" EQT="-3.0" ET="-3.0" ETSY="-3.0" EVRG="-3.0" EXK="-3.0" EXPE="-3.0" FAST="-3.0" FB="-3.0" FCX="-3.0" FDX="-3.0" FISV="-3.0" FIT="-3.0" FIZZ="-3.0" FL="-3.0" FSLY="-3.0" FSM="-3.0" FTCH="-3.0" FTNT="-3.0" FTSI="-3.0" GAB="-3.0" GAU="-3.0" GE="-3.0" GFI="-3.0" GGO="-3.0" GH="-3.0" GILD="-3.0" GLPI="-3.0" GLUU="-3.0" GMED="-3.0" GOLD="-3.0" GPRO="-3.0" GRNQ="-3.0" GSK="-3.0" GSV="-3.0" HAL="-3.0" HL="-3.0" HLX="-3.0" HMY="-3.0" HP="-3.0" HPE="-3.0" HRB="-3.0" HTHT="-3.0" HTZ="-3.0" HUYA="-3.0" HYRE="-3.0" HZNP="-3.0" IAC="-3.0" IAG="-3.0" IBIO="-3.0" IBM="-3.0" ICAGY="-3.0" ICL="-3.0" ILMN="-3.0" ING="-3.0" INO="-3.0" INSG="-3.0" INTC="-3.0" ITCI="-3.0" JBLU="-3.0" JETS="-3.0" JKS="-3.0" KDMN="-3.0" KGC="-3.0" KHC="-3.0" KMI="-3.0" KODK="-3.0" KPCPF="-3.0" KURA="-3.0" LAC="-3.0" LAKE="-3.0" LLY="-3.0" LODE="-3.0" LTM="-3.0" LUV="-3.0" LVS="-3.0" LYFT="-3.0" MBT="-3.0" MFA="-3.0" MGY="-3.0" MNKD="-3.0" MNLO="-3.0" MPW="-3.0" MRNA="-3.0" MRO="-3.0" MSFT="-3.0" MUX="-3.0" MVIS="-3.0" NAK="-3.0" NAT="-3.0" NCV="-3.0" NDX="-3.0" NET="-3.0" NEXT="-3.0" NFLX="-3.0" NGD="-3.0" NIO="-3.0" NKLA="-3.0" NLY="-3.0" NRZ="-3.0" NSLPQ="-3.0" NTGR="-3.0" NTNX="-3.0" NVAX="-3.0" NVCR="-3.0" NVDA="-3.0" NVEE="-3.0" NWL="-3.0" ONEM="-3.0" ORTX="-3.0" OSTK="-3.0" PAAC="-3.0" PACB="-3.0" PANW="-3.0" PBF="-3.0" PBR="-3.0" PENN="-3.0" PFE="-3.0" PIXY="-3.0" PLAY="-3.0" PLCE="-3.0" PLNHF="-3.0" PLNT="-3.0" POR="-3.0" PPD="-3.0" PRTY="-3.0" PULM="-3.0" QGEN="-3.0" QQQ="-3.0" R="-3.0" RCL="-3.0" REED="-3.0" RIG="-3.0" RLFTF="-3.0" ROKO="-3.0" ROKU="-3.0" RRC="-3.0" RT="-3.0" RTX="-3.0" S="-3.0" SABR="-3.0" SAVE="-3.0" SCGIX="-3.0" SESN="-3.0" SFET="-3.0" SGLB="-3.0" SHLL="-3.0" SHOP="-3.0" SINT="-3.0" SLF="-3.0" SLGG="-3.0" SM="-3.0" SNOW="-3.0" SOL="-3.0" SPPI="-3.0" SPT="-3.0" SPX="-3.0" SPY="-3.0" SQ="-3.0" SRC="-3.0" SRNE="-3.0" SRPT="-3.0" SSRM="-3.0" SUMO="-3.0" SURF="-3.0" SWBI="-3.0" SWCH="-3.0" SWKS="-3.0" T="-3.0" TCEHY="-3.0" TIF="-3.0" TLRY="-3.0" TMUS="-3.0" TNXP="-3.0" TPR="-3.0" TRIL="-3.0" TRQ="-3.0" TSLA="-3.0" TSM="-3.0" TUP="-3.0" TWTR="-3.0" UA="-3.0" UAL="-3.0" UBER="-3.0" UGAZ="-3.0" UIS="-3.0" UONE="-3.0" UPS="-3.0" USO="-3.0" VALE="-3.0" VER="-3.0" VET="-3.0" VICI="-3.0" VIPS="-3.0" VIX="-3.0" VNET="-3.0" VNO="-3.0" VSLR="-3.0" VTIQ="-3.0" VYNE="-3.0" VZ="-3.0" WBA="-3.0" WKHS="-3.0" WMB="-3.0" WORK="-3.0" WPRT="-3.0" X="-3.0" XELB="-3.0" XLNX="-3.0" YELP="-3.0" YEXT="-3.0" ZBH="-3.0" ZM="-3.0" ZUO="-3.0" ZYME="-3.0"/>
                  </TRG_1>
                </_3>
              </TRADE_BUTTONS_CONFIG>
            </ACTIVETRADER>
            <BIG_BUTTONS BIG_BUTTONS="AUTO_SEND;QUANTITY;BUY_MKT;SELL_MKT;CANCEL_ALL;REVERSE;FLAT" BIG_BUTTONS_TIF_AUTOSEND_MIGRATED="true" ORDER_RULES_SET="STOCK" OS_AUTO="false" OS_TIF="DAY" QTY="100.0" VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <CHART CONFIGURATION="@v8@%0:com.devexperts.tos.thinkscript.data,1:java.awt,2:com.devexperts.toschart.control.subgraph,3:com.devexperts.toschart.elstudies,4:com.devexperts.toschart.script%owner{chartAggregationPeriods:ChartAggregationPeriodArray0,chartAggregationPeriods=@ChartAggregationPeriodArray0}#com.devexperts.toschart.core.ChartModel{encodedMixinsState=&quot;{\&quot;common\&quot;:{\&quot;DRAWING_SETS\&quot;:\&quot;{}\&quot;},\&quot;state_props\&quot;:{\&quot;state_type\&quot;:\&quot;REGULAR\&quot;},\&quot;monkey_bars_exp\&quot;:{\&quot;LikefolioMixin\&quot;:\&quot;{\\\&quot;paintingSettings\\\&quot;:{\\\&quot;neutralSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;positiveSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;negativeSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;sentimentSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true}},\\\&quot;shownDivisions\\\&quot;:[],\\\&quot;allDivisions\\\&quot;:[]}\&quot;},\&quot;monkey_bars\&quot;:{},\&quot;seasonality\&quot;:{},\&quot;regular\&quot;:{\&quot;DescriberMixin\&quot;:\&quot;{\\\&quot;visibility\\\&quot;:\\\&quot;HIDE_PANEL\\\&quot;,\\\&quot;studiesMode\\\&quot;:\\\&quot;HIDE_STUDIES\\\&quot;}\&quot;,\&quot;LikefolioMixin\&quot;:\&quot;{\\\&quot;paintingSettings\\\&quot;:{\\\&quot;neutralSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;positiveSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;negativeSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;sentimentSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true}},\\\&quot;shownDivisions\\\&quot;:[],\\\&quot;allDivisions\\\&quot;:[]}\&quot;}}&quot;,encodedPatternsModel=&quot;{\&quot;showPatterns\&quot;:true,\&quot;models\&quot;:[],\&quot;fibModels\&quot;:[]}&quot;,groupId=&quot;default&quot;,styleSettings{commonStyleSettings{colorSettings{backgroundColor=#%0.CustomColor(#%1.Color(0,0,0,255)),monkeyProfileTypeColors.defaultRowHeight=&lt;F,mpExpandedTypeColors.defaultRowHeight=&lt;F,volumeColor=#%0.CustomColor(#%1.Color(0,0,0,255))},expansion.right=115,fitOrdersToScreen=&lt;T,keepPriceZoom=&lt;T,leftAxisRegulator{maxValue=805926.78632479d,minValue=-33029.78632479d},manualAxisRegulator{maxValue=82.18717383d,minValue=37.34498953d},previousRightExpansion=115,shortCuts{^(&quot;Time Zone&quot;,&lt;F),^(&quot;Show Expiration Friday &quot;,&lt;F),^(&quot;Keep Price Zoom&quot;,&lt;F),^(&quot;enableLeftAxis&quot;,&lt;F),!get:Boolean0(&quot;Chart mode&quot;),^(&quot;Fit expected price ranges&quot;,@Boolean0),^(&quot;emphasizeDigitMPExpanded&quot;,&lt;F),^(&quot;showWicksCandleTrend&quot;,&lt;F),^(&quot;highlightEarnings&quot;,&lt;F),^(&quot;synchronizeCrosshair&quot;,&lt;F),^(&quot;myToolsMode&quot;,&lt;F),^(&quot;seasonalityStyle&quot;,&lt;F),^(&quot;Show Price Subgraph&quot;,&lt;F),^(&quot;closePriceLevel&quot;,&lt;F),^(&quot;Color Volume As Symbol Ticks&quot;,&lt;F),^(&quot;highlightPhantomRBars&quot;,&lt;F),^(&quot;Cross type &quot;,&lt;F),^(&quot;Fit Studies to Screen&quot;,@Boolean0),^(&quot;Chart type &quot;,&lt;F),^(&quot;Fit Orders&quot;,&lt;F),^(&quot;Bubbles as Percentage&quot;,&lt;F),^(&quot;hideStatusString&quot;,&lt;F),^(&quot;Show Studies &quot;,&lt;F),^(&quot;showWicksHeikinAshi&quot;,&lt;F),^(&quot;Alerts&quot;,&lt;F),^(&quot;Chart scale&quot;,&lt;F),^(&quot;Fit High/Low&quot;,&lt;F),^(&quot;Orders&quot;,&lt;F),^(&quot;Use Log Scale &quot;,&lt;F),^(&quot;Fit Study Markers to Screen&quot;,@Boolean0),^(&quot;Fit Alerts&quot;,&lt;F),^(&quot;Fit patterns&quot;,&lt;F),^(&quot;Percentage View&quot;,&lt;F),^(&quot;Make Auto Zoom &quot;,&lt;F),^(&quot;Show Year Marking Line&quot;,&lt;F),^(&quot;Show Rollover Line&quot;,&lt;F),^(&quot;Show High/Low Bubbles &quot;,&lt;F),^(&quot;Snap mode&quot;,&lt;F),^(&quot;highlightStudies&quot;,&lt;F),^(&quot;Overlapped Volume&quot;,&lt;F),^(&quot;Show Symbol Logo&quot;,&lt;F),^(&quot;Show Last Price Bubble &quot;,&lt;F),^(&quot;emphasizeDigitMP&quot;,&lt;F),^(&quot;Show grid&quot;,@Boolean0),^(&quot;showWicksCandle&quot;,&lt;F),^(&quot;Show trades&quot;,&lt;F),^(&quot;highlightSeasons&quot;,&lt;F),^(&quot;Extend Order/Alert Line to Left&quot;,&lt;F)},showGrid=&lt;F,showTradeExecution=&lt;T,step=2.73224043715847d},forexStyleSettings.shortCuts.^(&quot;Show Volume Subgraph&quot;,&lt;F),futuresStyleSettings{highlightExtendedHours=&lt;T,shortCuts{^(&quot;adjustForContractChanges&quot;,&lt;F),^(&quot;Show Open Interest&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,&lt;F),^(&quot;showContractChangeEvents&quot;,&lt;F),^(&quot;futures_daily_close_price&quot;,&lt;F),^(&quot;Show Options&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,&lt;F),^(&quot;startAtMarketOpen&quot;,&lt;F)},tradingHoursOnly=&lt;T},optionsStyleSettings{shortCuts{^(&quot;Show Open Interest&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,&lt;F),^(&quot;Show Theo Price&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,&lt;F),^(&quot;startAtMarketOpen&quot;,&lt;F)},startAggregationAtMarketOpen=&lt;F},otherStyleSettings{shortCuts{^(&quot;Show Social Sentiment&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,@Boolean0),^(&quot;Show Options&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,&lt;F),^(&quot;Show Corporate Actions&quot;,&lt;F),^(&quot;Show CNBC Video&quot;,&lt;F),^(&quot;startAtMarketOpen&quot;,@Boolean0),^(&quot;adjustForDividends&quot;,&lt;F)},startAggregationAtMarketOpen=&lt;F,tradingHoursOnly=&lt;T},setsIdentifiers.styleSetName=&quot;DEF_X_STYLE&quot;},subgraphModels{!get(#%2.SubgraphId(&quot;Symbol&quot;)){height=491,storableIndicators.+(!%3.CompiledStudy.resolveStudy(#%4.ScriptEssence{body=&quot;input averageType = AverageType.SIMPLE;\ninput showMovingAvgLable =Yes;\ninput price = close;\ninput length1 = 10;\ninput length2 = 20;\ninput length3 = 50;\ninput length4 = 200;\ninput displace = 0;\ninput showAvg3 = yes;\n\ninput showAvg4 = yes;\n\ninput showBreakoutSignals = no;\n\n\n\n\n#def AvgExp = ExpAverage(price[-displace], length);\nplot Avg1 = MovingAverage(averageType, price[-displace], length1);\nplot Avg2 = MovingAverage(averageType, price[-displace], length2);\nplot Avg3 = MovingAverage(averageType, price[-displace], length3);\nplot Avg4 = MovingAverage(averageType, price[-displace], length4);\n\nAvg3.setHiding(!showAvg3);\nAvg4.setHiding(!showAvg4);\n\n\n#plot SMA ( Average(price[-displace], length);\nplot UpSignal = price crosses above Avg1;\nplot DownSignal = price crosses below Avg1;\n#Add Label\n\nAddLabel(showMovingAvgLable, \&quot;  \&quot;+ length1+ \&quot;MAvg\&quot; ,Avg1.TakeValueColor ());\nAddLabel(showMovingAvgLable,  astext(Avg1), if Avg1&lt; close then Color.LIGHT_GREEN else if Avg1&gt; close then color.light_red else Color.Light_GRAY);\n\n\nAddLabel(showMovingAvgLable, \&quot;  \&quot;+ length2+ \&quot;MAvg\&quot; ,Avg2.TakeValueColor ());\nAddLabel(showMovingAvgLable,  astext(Avg2), if Avg2&lt; close then Color.LIGHT_GREEN else if Avg2&gt; close then color.light_red else Color.Light_GRAY);\n\nAddLabel(showMovingAvgLable, \&quot;  \&quot;+ length3+ \&quot;MAvg\&quot; ,Avg3.TakeValueColor ());\nAddLabel(showMovingAvgLable,  astext(Avg3), if Avg3&lt; close then Color.LIGHT_GREEN else if Avg3&gt; close then color.light_red else Color.Light_GRAY);\n\n\nAddLabel(showMovingAvgLable, \&quot;  \&quot;+ length4+ \&quot;MAvg\&quot; ,Avg4.TakeValueColor ());\nAddLabel(showMovingAvgLable,  astext(Avg4), if Avg4&lt; close then Color.LIGHT_GREEN else if Avg4&gt; close then color.light_red else Color.Light_GRAY);\n\n\n# Avg1.TakeValueColor ()\n#AddLabel(showMovingAvgLable,  length1+ \&quot;MAvg \&quot; +astext(Avg1) ,Avg1.TakeValueColor ());\n#AddLabel(showMovingAvgLable, astext(Avg1), if Avg1&lt; close then Color.GREEN else if Avg1&gt; close then color.light_red else Color.Light_GRAY);\n\n\n\n#AddLabel(showMovingAvgLable,  length2+ \&quot;MAvg \&quot;+ astext(Avg2) ,Avg2.TakeValueColor ());\n#AddLabel(showMovingAvgLable,  astext(Avg2), if Avg2&lt; close then Color.GREEN else if Avg2&gt; close then color.light_red else Color.Light_GRAY);\n#AddLabel(showMovingAvgLable,  length3+ \&quot;MAvg \&quot; +astext(Avg3),Avg3.TakeValueColor ());\n#AddLabel(showMovingAvgLable, astext(Avg3), if Avg3&lt; close then Color.GREEN else if Avg3&gt; close then color.light_red else Color.Light_GRAY);\n#AddLabel(showMovingAvgLable,  length4+ \&quot;MAvg \&quot; +astext(Avg4),Avg4.TakeValueColor ());\n#AddLabel(showMovingAvgLable, astext(Avg4), if Avg4&lt; close then Color.GREEN else if Avg4&gt; close then color.light_red else Color.Light_GRAY);\ndef bub;\nif !IsNaN(close[-1])\nthen {\n\n    bub = no;#Double.NaN;\n    \n} else {\nbub = yes;\n    \n}\ndef bubb = if  BarNumber() == 20  then yes else no;\n\ninput Show_Mavg_Key=no;\n\n#AddChartBubble(bub, Avg1, \&quot;MAvg\&quot;+ length1+ \&quot;= \&quot; + astext(Avg1), Color.LIGHT_ORANGE, no);\nAddChartBubble(bub and Show_Mavg_Key, Avg1, \&quot;MAvg\&quot;+ length1+ \&quot;= \&quot; + astext(Avg1), Avg1.TakeValueColor (), yes);\nAddChartBubble(bub and Show_Mavg_Key, Avg2, \&quot;MAvg\&quot;+ length2+ \&quot;= \&quot; + astext(Avg2), Avg2.TakeValueColor (), yes);\nAddChartBubble(bub and Show_Mavg_Key, Avg3, \&quot;MAvg\&quot;+ length3+ \&quot;= \&quot; + astext(Avg3), Avg3.TakeValueColor (), yes);\nAddChartBubble(bub and Show_Mavg_Key, Avg4, \&quot;MAvg\&quot;+ length4+ \&quot;= \&quot; + astext(Avg4), Avg4.TakeValueColor (), yes);\n\n#Vwap\ninput vwapTimeFrame = {default DAY, WEEK, MONTH};\ninput numDevDn = -2.0;\ninput numDevUp = 2.0;\n\n\ndef cap = getAggregationPeriod();\ndef errorInAggregation =\n    vwapTimeFrame == vwapTimeFrame.DAY and cap &gt;= AggregationPeriod.WEEK or\n    vwapTimeFrame == vwapTimeFrame.WEEK and cap &gt;= AggregationPeriod.MONTH;\nassert(!errorInAggregation, \&quot;timeFrame should be not less than current chart aggregation period\&quot;);\n\ndef yyyyMmDd = getYyyyMmDd();\ndef periodIndx;\nswitch (vwapTimeFrame) {\ncase DAY:\n    periodIndx = yyyyMmDd;\ncase WEEK:\n    periodIndx = Floor((daysFromDate(first(yyyyMmDd)) + getDayOfWeek(first(yyyyMmDd))) / 7);\ncase MONTH:\n    periodIndx = roundDown(yyyyMmDd / 100, 0);\n}\ndef isPeriodRolled = compoundValue(1, periodIndx != periodIndx[1], yes);\n\ndef volumeSum;\ndef volumeVwapSum;\ndef volumeVwap2Sum;\n\nif (isPeriodRolled) {\n    volumeSum = volume;\n    volumeVwapSum = volume * vwap;\n    volumeVwap2Sum = volume * Sqr(vwap);\n} else {\n    volumeSum = compoundValue(1, volumeSum[1] + volume, volume);\n    volumeVwapSum = compoundValue(1, volumeVwapSum[1] + volume * vwap, volume * vwap);\n    volumeVwap2Sum = compoundValue(1, volumeVwap2Sum[1] + volume * Sqr(vwap), volume * Sqr(vwap));\n}\ndef VWprice = volumeVwapSum / volumeSum;\ndef deviation = Sqrt(Max(volumeVwap2Sum / volumeSum - Sqr(VWprice), 0));\n\nplot VWAP = VWprice;\nplot UpperBand = VWprice + numDevUp * deviation;\nplot LowerBand = VWprice + numDevDn * deviation;\n\nVWAP.setDefaultColor(getColor(0));\nUpperBand.setDefaultColor(getColor(0));\nLowerBand.setDefaultColor(getColor(0));\n\nUpperBand.SetStyle(Curve.MEDIUM_DASH);\nLowerBand.SetStyle(Curve.MEDIUM_DASH);\n\n\n\nUpperBand.hide();\nLowerBand.hide();\n\n#vwap\n\nAddLabel(yes, \&quot;VWAP= \&quot; + astext(VWAP), if VWAP&lt; close then Color.LIGHT_GREEN else if VWAP&gt; close then color.LIGHT_red else Color.GRAY);\n#AddLabel(yes, \&quot;VWAP= \&quot; + astext(VWAP), Color.White);\ndef vwDif= close- VWAP;\nAddLabel(yes, \&quot; \&quot;+astext(vwDif), if vwDif&gt; 0 then Color.LIGHT_GREEN else if vwDif&lt; 0 then color.LIGHT_red else Color.GRAY);\n\n#RSI\ninput overBoughtRsi = 70;\ninput overSoldRsi = 30;\ninput rsiLength = 14;\ninput rsiPrice = close;\ndef rsi_val = reference RSI(length = rsiLength, price = rsiPrice );\n####\n\n\n\nAddLabel(yes, \&quot;RSI = \&quot; + astext(rsi_val) , if rsi_val &gt; overBoughtRsi  then Color.RED else if rsi_val &lt; overSoldRsi then  Color.GREEN else Color.light_GRAY);\n\n\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\nAvg1.SetDefaultColor(color.white);\nAvg2.SetDefaultColor(color.cyan);\nAvg3.SetDefaultColor(color.light_red);\nAvg4.SetDefaultColor(color.pink);\n#avg3.SetStyle(Curve.MEDIUM_DASH);\n#avg4.SetStyle(Curve.MEDIUM_DASH);\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);\n&quot;,name=&quot;_686a0d47_2dc7_4466_91d6_64cf4907bd2a&quot;}))},!get(#%2.SubgraphId(&quot;Volume&quot;)){height=80,storableIndicators.+(!%3.CompiledStudy.resolveStudy(#%4.ScriptEssence{body=&quot;# Modified by Mahi\n# Second Mod by Ramon DV\n\ndeclare on_volume;\n#v2\n#Inputs\n\ninput ShowDayAvg = yes;\ninput AvgDayVolLength = 30;\ninput ShowTodayVolume = yes;\ninput ShowTodayVolumeProjection = yes;\ninput ShowPercentOfDayAvg = yes;\ninput UnusualVolumePercent = 200;\ninput ShowBarAvg = yes;\ninput AvgBarVolLength = 30;\ninput ShowCurrentBar = yes;\ninput ShowPercentOfBarAvg = yes;\ninput ShowSellVolumePercent = yes;\ninput ShowBuyVolumePercent = yes;\ninput AvgType = AverageType.SIMPLE;\n\ndef O = open;\ndef H = high;\ndef C = close;\ndef L = low;\ndef V = volume;\n\n#def buying =  V * (C - L) / (H - L);\n#def selling = V * (H - C) / (H - L);\n\ndef buying =   V * (H - O) / (H - L) ;\ndef selling =  V * (O - L) / (H - L) ;\n\ndef O_day = open(period = AggregationPeriod.DAY);\ndef H_day = high(period = AggregationPeriod.DAY);\ndef C_day = close(period = AggregationPeriod.DAY);\ndef L_day = low(period = AggregationPeriod.DAY);\ndef V_day = volume(period = AggregationPeriod.DAY);\n#def selling_day = V_day * (H_day - C_day) / (H_day - L_day);\n#def buying_day = V_day * (C_day - L_day) / (H_day - L_day);\ndef selling_day = V_day * (H_day - O_day) / (H_day - L_day);\ndef buying_day = V_day * (O_day - L_day) / (H_day - L_day);\n# Selling Volume pressure\n\nplot SellVol = selling;\nSellVol.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);\nSellVol.SetDefaultColor(Color.RED);\nSellVol.HideTitle();\nSellVol.HideBubble();\nSellVol.SetLineWeight(5);\n\n# Total Volume\n# Buying Volume pressure\n\nplot BuyVol = buying + selling; # plot in the background of selling volume\nBuyVol.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);\nBuyVol.SetDefaultColor(Color.DARK_GREEN);\nBuyVol.HideTitle();\nBuyVol.HideBubble();\nBuyVol.SetLineWeight(5);\n\n#Volume Data\n\ndef DayVol = volume(period = “DAY”);\ndef AvgDayVol = MovingAverage(AvgType, DayVol[1], AvgDayVolLength);\ndef percentOfDay = Round((DayVol / AvgDayVol) * 100, 0);\n\n\ndef AvgBarVol = MovingAverage(AvgType, volume[1], AvgBarVolLength);\ndef percentOfBar = Round((volume / AvgBarVol) * 100, 0);\ndef SellVolPercent = Round((selling / volume) * 100, 0);\ndef BuyVolPercent = 100 - SellVolPercent;\n\ndef SellVolPercent_day = Round((selling_day / V_day) * 100, 0);\ndef BuyVolPercent_day = 100 - SellVolPercent_day;\n\n# Labels\n\nAddLabel(ShowDayAvg, \&quot;Avg “ + AvgDayVolLength + “ Days: \&quot; + Round(AvgDayVol, 0), Color.LIGHT_GRAY);\n\nAddLabel(ShowTodayVolume, \&quot;Today: \&quot; + DayVol, (if percentOfDay &gt;= UnusualVolumePercent then Color.GREEN else if percentOfDay &gt;= 100 then Color.ORANGE else Color.LIGHT_GRAY));\n\nAddLabel(ShowPercentOfDayAvg, percentOfDay + \&quot;%\&quot;, (if percentOfDay &gt;= UnusualVolumePercent then Color.GREEN else if percentOfDay &gt;= 100 then Color.ORANGE else Color.WHITE) );\n\nAddLabel(ShowBarAvg, \&quot;Avg “ + AvgBarVolLength + ” Bars: \&quot; + Round(AvgBarVol, 0), Color.LIGHT_GRAY);\n\nAddLabel(ShowCurrentBar, \&quot;Cur Bar: \&quot; + volume, (if percentOfBar &gt;= UnusualVolumePercent then Color.GREEN else if percentOfBar &gt;= 100 then Color.ORANGE else Color.LIGHT_GRAY));\n\nAddLabel(ShowPercentOfBarAvg, percentOfBar + \&quot;%\&quot;, (if percentOfBar &gt;= UnusualVolumePercent then Color.GREEN else if percentOfBar &gt;= 100 then Color.ORANGE else Color.WHITE) );\n\n\nAddLabel(ShowSellVolumePercent and (SellVolPercent &gt; BuyVolPercent) , \&quot;Cur Bar Sell %: \&quot; + SellVolPercent, if SellVolPercent &gt; BuyVolPercent then Color.RED else Color.GRAY);\nAddLabel(ShowBuyVolumePercent and (SellVolPercent &lt;= BuyVolPercent), \&quot;Cur Bar Buy %: \&quot; + BuyVolPercent, if BuyVolPercent &gt; SellVolPercent then Color.GREEN else Color.GRAY);\n\n\n# PriceOpen.Hide();\ninput length = 50;\n\nplot Vol = volume;\nplot VolAvg = Average(volume, length);\n\nVol.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);\nVol.SetLineWeight(3);\nVol.DefineColor(\&quot;Up\&quot;, Color.UPTICK);\nVol.DefineColor(\&quot;Down\&quot;, Color.DOWNTICK);\nVol.AssignValueColor(if close &gt; close[1] then Vol.Color(\&quot;Up\&quot;) else if close &lt; close[1] then Vol.Color(\&quot;Down\&quot;) else GetColor(1));\nVolAvg.SetDefaultColor(GetColor(8));\n\n\n#########################################################\n\n#def rth = (RegularTradingEnd(GetYYYYMMDD()) - RegularTradingStart(GetYYYYMMDD())) / AggregationPeriod.HOUR;\ndef rth = (RegularTradingEnd(GetYYYYMMDD()) - RegularTradingStart(GetYYYYMMDD())) / AggregationPeriod.MIN;\ndef MarketNotClosed = GetTime() &lt;= RegularTradingEnd (GetYYYYMMDD());\n# def eod = ((  RegularTradingEnd (GetYYYYMMDD()) - GetTime() ) / AggregationPeriod.MIN);\ndef eod = if MarketNotClosed then ((  RegularTradingEnd (GetYYYYMMDD()) - GetTime() ) / AggregationPeriod.MIN) else ((  RegularTradingEnd (GetYYYYMMDD())  ) / AggregationPeriod.MIN);\n\ndef DayVol_Projetion = volume(period = “DAY”) * rth / (rth - eod);\ndef percentOfDayProjection = Round((DayVol_Projetion / AvgDayVol) * 100, 0);\nAddLabel(ShowBuyVolumePercent, \&quot;Day Buy %: \&quot; + BuyVolPercent_day, if BuyVolPercent_day &gt; SellVolPercent_day then Color.GREEN else Color.GRAY);\n\nAddLabel(ShowTodayVolumeProjection, \&quot;Est. Vol: \&quot; + Round(DayVol_Projetion, 0) , if DayVol_Projetion &gt; AvgDayVol * 1.5  then Color.GREEN else Color.GRAY);\n\nAddLabel(ShowTodayVolumeProjection,  percentOfDayProjection  + \&quot;%\&quot;, if DayVol_Projetion &gt; AvgDayVol * 1.5  then Color.GREEN else Color.GRAY);\n\ndef y = GetTime() / AggregationPeriod.MIN;\n#eod =2;\n#AddLabel(yes, \&quot;RTH duration (min): \&quot; + rth);\n#AddLabel(yes, \&quot;EOD duration (min): \&quot; + eod);\n#AddLabel(yes, \&quot;Market Not closed: \&quot; + y);\n\n#######&quot;,name=&quot;_5261aedd_9830_4f97_bb0c_d3f9282e8428&quot;}))},^(#%2.SubgraphId(&quot;Subgraph1&quot;),#%2.SubgraphStorableModel{height=177,storableIndicators.+(!%3.CompiledStudy.resolveStudy(#%4.ScriptEssence{body=&quot;declare lower;\ninput aggregationPeriod1 = AggregationPeriod.THIRTY_MIN;\n\ninput useOpen =yes;\ndef price = if (useOpen) then   open(period = aggregationPeriod1) else close(period = aggregationPeriod1) ;\n\ninput over_bought = 40.0;\ninput over_sold = -40.0;\ninput percentDLength = 3;\ninput percentKLength = 5;\n\ndef min_low = Lowest(low (period = aggregationPeriod1), percentKLength);\ndef max_high = Highest(high (period = aggregationPeriod1), percentKLength);\ndef rel_diff = price - (max_high + min_low) / 2;\ndef diff = max_high - min_low;\n\ndef avgrel = ExpAverage(ExpAverage(rel_diff, percentDLength), percentDLength);\ndef avgdiff = ExpAverage(ExpAverage(diff, percentDLength), percentDLength);\n\nplot SMI = if avgdiff != 0 then avgrel / (avgdiff / 2) * 100 else 0;\nSMI.SetDefaultColor(GetColor(1));\n\nplot AvgSMI = ExpAverage(SMI, percentDLength);\nAvgSMI.SetDefaultColor(GetColor(5));\n\nplot overbought = over_bought;\noverbought.SetDefaultColor(GetColor(5));\n\nplot oversold = over_sold;\noversold.SetDefaultColor(GetColor(5));\n\n\n\n#RSI\ninput overBoughtRsi = 70;\ninput overSoldRsi = 30;\ninput rsiLength = 14;\ninput  rsiPrice = close;\nplot rsi_val = reference RSI(length = rsiLength, price = rsiPrice );\n####\n\n\n\nAddLabel(yes, \&quot;RSI = \&quot; + rsi_val , if rsi_val &gt; overBoughtRsi  then Color.RED else if rsi_val &lt; overSoldRsi then  Color.GREEN else Color.GRAY);\n\n\n\n#trend reversal\ndef y = rsi_val ;\ninput riReversLength = 2;\ninput lookBack = 2;\n\n\ndef rsi_expAvg = ExpAverage(rsi_val, riReversLength);\n\n#trend reversal\ndef overBoughtReversal = if ((rsi_expAvg &gt; overBoughtRsi)within 2 bar) and  (rsi_expAvg crosses above rsi_val) then price else 0;# if (rsi_expAvg &gt; OverBought and  rsi_expAvg crosses above rsi_val  within 3 bar ) then 40 else 0;\ndef oversoldRevesal = if ((rsi_expAvg &lt; overSoldRsi)within 2 bar) and  (rsi_expAvg crosses below rsi_val within 2 bar) then price else 0;\n\n##############\n########!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n#vwap vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\n#input numDevUp = 2.0;\ninput vwapTimeFrame = {default DAY, WEEK, MONTH};\n\ndef cap = GetAggregationPeriod();\ndef errorInAggregation =\n    vwapTimeFrame == vwapTimeFrame.DAY and cap &gt;= AggregationPeriod.WEEK or\n    vwapTimeFrame == vwapTimeFrame.WEEK and cap &gt;= AggregationPeriod.MONTH;\nAssert(!errorInAggregation, \&quot;timeFrame should be not less than current chart aggregation period\&quot;);\n\ndef yyyyMmDd = GetYYYYMMDD();\ndef periodIndx;\nswitch (vwapTimeFrame) {\ncase DAY:\n    periodIndx = yyyyMmDd;\ncase WEEK:\n    periodIndx = Floor((DaysFromDate(First(yyyyMmDd)) + GetDayOfWeek(First(yyyyMmDd))) / 7);\ncase MONTH:\n    periodIndx = RoundDown(yyyyMmDd / 100, 0);\n}\ndef isPeriodRolled = CompoundValue(1, periodIndx != periodIndx[1], yes);\n\ndef volumeSum;\ndef volumeVwapSum;\ndef volumeVwap2Sum;\n\nif (isPeriodRolled) {\n    volumeSum = volume;\n    volumeVwapSum = volume * vwap;\n    volumeVwap2Sum = volume * Sqr(vwap);\n} else {\n    volumeSum = CompoundValue(1, volumeSum[1] + volume, volume);\n    volumeVwapSum = CompoundValue(1, volumeVwapSum[1] + volume * vwap, volume * vwap);\n    volumeVwap2Sum = CompoundValue(1, volumeVwap2Sum[1] + volume * Sqr(vwap), volume * Sqr(vwap));\n}\ndef vWapprice = volumeVwapSum / volumeSum;\ndef deviation = Sqrt(Max(volumeVwap2Sum / volumeSum - Sqr(vWapprice), 0));\n\ndef VWAP = vWapprice;\ninput numDevUp = 2.0;\ninput numDevDn = -2.0;\n\ndef vwap_UpperBand = price + numDevUp * deviation;\ndef vwap_LowerBand = price + numDevDn * deviation;\n\ninput vwapCondition = no;\n#input vp=close;\ndef conVwapBuy = if  vwapCondition then  close &gt;= VWAP else 1;\n\n#####^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n#MACD\n\ninput fastLength = 12;\ninput slowLength = 26;\ninput MACDLength = 9;\ninput displace = 0;\ndef fastAvg = Sum(volume * price, fastLength) / Sum(volume, fastLength);\ndef slowAvg = Sum(volume * price, slowLength) / Sum(volume, slowLength);\ndef Value = fastAvg - slowAvg;\ndef Avg = ExpAverage(Value, MACDLength);\ndef MACD_Diff  = Value - Avg;\n#def ZeroLine = 0;\n\ninput def_cond = no;\ndef MACD_cond_logic = if (def_cond) then MACD_Diff &lt;= 0 else yes;\n\n\n#MACD Pivot reversal\n#input FilterLength=3;\n######################\n#def MACDV_Diff_expAvg = ExpAverage(MACD_Diff, FilterLength);\n#plot oversoldRevesalMACDV =if ((Diff_MACDV &lt; MacdZeroLine)within lookBack bar) and  ( Diff_MACDV crosses above   MACDV_Diff_expAvg within lookBack bar)and Diff_MACDV &gt; Diff_MACDV[1] then 1 else 0;# if (MACDV_Diff_expAvg &gt; OverBought and  MACDV_Diff_expAvg crosses above rsi_val  within 3 bar ) then 40 else 0;\n#plot overBoughtReversalMACDV = if ((Diff_MACDV &gt; MacdZeroLine)within lookBack bar) and  (MACDV_Diff_expAvg crosses above  Diff_MACDV  within lookBack bar)  and Diff_MACDV &lt; Diff_MACDV[1] and Diff_MACDV&gt;0 then 1 else 0;\n\n\n#trend Pivot reversal\ndef twoBarPivotMACD_Buy =  MACD_Diff &gt; MACD_Diff[1] and MACD_Diff[1] &gt; MACD_Diff[2] and MACD_Diff[2] &lt; MACD_Diff[3] and MACD_Diff[3] &lt; MACD_Diff [4];\ndef twoBarPivotMACD_Sell = MACD_Diff &lt; MACD_Diff[1] and MACD_Diff[1] &lt; MACD_Diff[2] and MACD_Diff[2] &gt; MACD_Diff[3] and MACD_Diff[3] &gt; MACD_Diff [4];\n###################\n\n\ndef uptrend = if price &gt; price[1] and price[1] &gt;= price[2] then 1 else 0;\n\n#####################################-----------------\n\ninput aggPeriod = AggregationPeriod.DAY;\ninput AvgType = AverageType.SIMPLE;\ninput short_len = 10;\ninput mid_len = 21;\ninput long_len = 50;\ninput moving_average = no;\ndef AVG1 = MovingAverage(AvgType, close(period = aggPeriod), short_len);\ndef AVG2 = MovingAverage(AvgType, close(period = aggPeriod), mid_len);\ndef AVG3 = MovingAverage(AvgType, close(period = aggPeriod), long_len);\n#def EMA_condition = if moving_average then (close &gt; AVG1 or close &gt; AVG2 or  close &gt; AVG3) else yes;\ndef EMA_condition = if moving_average then (close &gt; AVG1 ) else yes;\n\nAddLabel( yes, Concat(short_len + \&quot;MA = \&quot;, AVG1), Color.CYAN);\nAddLabel( yes, Concat(mid_len + \&quot;MA = \&quot;, AVG2), Color.LIGHT_ORANGE);\nAddLabel( yes, Concat(long_len + \&quot;MA = \&quot;, AVG3), Color.PINK);\n\n\n\n##############################################\n#@@@@\n#ADX\ninput adxLength = 14;\ninput adxAverageType = AverageType.WILDERS;\n\ndef ADX = DMI(adxLength, adxAverageType).ADX;\n#ADX.setDefaultColor(GetColor(5));\n\ninput length = 7;\ninput signalLength = 10;\ninput averageType = AverageType.WEIGHTED;\ninput averageTypeSignal = AverageType.EXPONENTIAL;\n\n\n\ndef Ref = ADX;# reference OnBalanceVolume();\nplot RefMoving = MovingAverage(averageType, Ref, length);\nplot Signal = MovingAverage(averageTypeSignal, RefMoving, signalLength);\nplot dif =  Ref - RefMoving;\n#Ref.SetDefaultColor(GetColor(4));\nRefMoving.SetDefaultColor(GetColor(8));\nSignal.SetDefaultColor(GetColor(2));\ndif.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);\ndif.SetLineWeight(3);\n\n\ndif.DefineColor(\&quot;Positive and Up\&quot;, Color.CYAN);\ndif.DefineColor(\&quot;Positive and Down\&quot;, Color.BLUE);\ndif.DefineColor(\&quot;Negative and Down\&quot;, Color.RED);\ndif.DefineColor(\&quot;Negative and Up\&quot;, Color.YELLOW);\ndif.AssignValueColor(if dif &gt;= 0 then if dif &gt; dif[1] then dif.Color(\&quot;Positive and Up\&quot;) else dif.Color(\&quot;Positive and Down\&quot;) else if dif &lt; dif[1] then dif.Color(\&quot;Negative and Down\&quot;) else dif.Color(\&quot;Negative and Up\&quot;));\n\n\n#@@@@@\n###################################\ndef SMI_ADX_Buy_Signal;\nif GetAggregationPeriod() &lt; AggregationPeriod.FIFTEEN_MIN\nthen\n{\n    SMI_ADX_Buy_Signal = if ( (SMI crosses above AvgSMI  within lookBack bar) and (Ref crosses above RefMoving within lookBack bar) and dif &gt;= 0 and (rsi_val &gt; overSoldRsi and rsi_val &lt; 60 ) and MACD_cond_logic and  EMA_condition) and Ref &gt; Ref[2] then 1 else 0;\n\n}\nelse {\n    SMI_ADX_Buy_Signal = 0;\n}\nplot buy6 = SMI_ADX_Buy_Signal;\n\n\ndef SMI_Buy_Signal = if ( (SMI crosses above overbought  within lookBack bar) and SMI &gt;  AvgSMI and (rsi_val &gt; overSoldRsi and rsi_val &lt; overBoughtRsi + 10 ) and MACD_cond_logic and  EMA_condition) and  (uptrend) then 1 else 0;\nplot buy2 = SMI_Buy_Signal;\n\n#def  buySvix_Signal = if ( MACD_cond_logic  and  EMA_condition and  oversoldRevesal  and buySvix &lt; Zeroline - 10 ) then 1 else 0;\n#plot buy3 = buySvix_Signal;\n\n\n\n\n\n\ndef SMI_Sell_Signal = if ( (SMI crosses below AvgSMI within lookBack bar) and (overBoughtReversal)) then 1 else 0;\n#def sellSignal2 = if ((rsi_val  &gt; overBoughtRsi within 3 bar) and (smi crosses below AvgSMI within 3 bar)) then 1 else 0;\n\n\nplot sell2 = SMI_Sell_Signal;\n\n#######\n\n#def FVE_buySignal = conVwapBuy and oversoldRevesal and pFVE_Bull  and MACD_cond_logic ;# and Diff &gt;= 0;\n#def sig_buy = pFVE_Bull and Diff &gt;= 0;\n#plot buy4 = FVE_buySignal ;\n\n\n#def FVE_sellSignal = overBoughtReversal and pFVE_Bear ;\n#plot sell4 = FVE_sellSignal;\nplot buy5 = twoBarPivotMACD_Buy and oversoldRevesal;\nplot sell5 = twoBarPivotMACD_Sell and overBoughtReversal;\n\n####\n#def buySignal2 = if (oversoldRevesal  and buythedip2 &lt; Zeroline ) then 1 else 0;\n\n#def buySignal3 = if ( oversoldRevesal  and buythedip3 &lt; Zeroline - 10 ) then 1 else 0;\n#plot buy3 = buySignal3;\n\nAddChartBubble(buy2 == 1, buy2, \&quot;B2SMI= \&quot; +  low[1] + \&quot; rsi \&quot; + rsi_val + \&quot; w \&quot; + VWAP[1], Color.LIGHT_ORANGE, no);\n#AddChartBubble(buy3 == 1, buy3,  \&quot;B3Svix= \&quot; + price + \&quot; rsi \&quot; + rsi_val, Color.LIGHT_GRAY, no);\n#AddChartBubble(buy4 == 1, buy4,  \&quot;B4FVE= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.YELLOW, no);\nAddChartBubble(buy5 == 1, buy5,  \&quot;B5Macd= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.CYAN, no);\nAddChartBubble(buy6 == 1, buy6,  \&quot;B5AdxSMI= \&quot; + price + \&quot; \\nrsi \&quot; + rsi_val[lookBack] + \&quot; \\nAdx \&quot; + Ref[lookBack], Color.GREEN, no);\n\n#AddChartBubble(sell1 == 1, sell1, \&quot;S1STR= \&quot; + price + \&quot; rsi \&quot; + rsi_val, Color.LIGHT_RED, no);#Buy the Dip\n\nAddChartBubble(sell2 == 1, sell2, \&quot;S2SMI= \&quot; + price + \&quot; rsi \&quot; + rsi_val, Color.PINK, no);#Buy the Dip\n#AddChartBubble(sell4 == 1, sell4, \&quot;S4FVE= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.VIOLET, no);#Buy the Dip\nAddChartBubble(sell5 == 1, sell5, \&quot;S5Macd= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.BLUE, no);#Buy the Dip\n#AddChartBubble(oversoldRevesal , close, rsi_val, Color.blue, no);#Buy the Dip\nplot scan = buy2;&quot;,name=&quot;_895e3e9a_2bdf_4c37_bc8e_713002a58848&quot;}){inputsMap:TreeMap0{^(&quot;aggregationPeriod1&quot;,&quot;WEEK&quot;),^(&quot;rsiPrice&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap0,plots{4:{hiding=&lt;T},5:{hiding=&lt;T},6:{hiding=&lt;T},7:{hiding=&lt;T}}})}),^(#%2.SubgraphId(&quot;Subgraph7&quot;),#%2.SubgraphStorableModel{height=177,storableIndicators.+(!%3.CompiledStudy.resolveStudy(#%4.ScriptEssence{body=&quot;declare lower;\n\ninput price = close;\n\ninput over_bought = 40.0;\ninput over_sold = -40.0;\ninput percentDLength = 3;\ninput percentKLength = 5;\n\ndef min_low = Lowest(low, percentKLength);\ndef max_high = Highest(high, percentKLength);\ndef rel_diff = price - (max_high + min_low) / 2;\ndef diff = max_high - min_low;\n\ndef avgrel = ExpAverage(ExpAverage(rel_diff, percentDLength), percentDLength);\ndef avgdiff = ExpAverage(ExpAverage(diff, percentDLength), percentDLength);\n\nplot SMI = if avgdiff != 0 then avgrel / (avgdiff / 2) * 100 else 0;\nSMI.SetDefaultColor(GetColor(1));\n\nplot AvgSMI = ExpAverage(SMI, percentDLength);\nAvgSMI.SetDefaultColor(GetColor(5));\n\nplot overbought = over_bought;\noverbought.SetDefaultColor(GetColor(5));\n\nplot oversold = over_sold;\noversold.SetDefaultColor(GetColor(5));\n\n\n\n#RSI\ninput overBoughtRsi = 70;\ninput overSoldRsi = 30;\ninput rsiLength = 14;\ninput rsiPrice = close;\ndef rsi_val = reference RSI(length = rsiLength, price = rsiPrice );\n####\n\n\n\nAddLabel(yes, \&quot;RSI = \&quot; + rsi_val , if rsi_val &gt; overBoughtRsi  then Color.RED else if rsi_val &lt; overSoldRsi then  Color.GREEN else Color.GRAY);\n\n\n\n#trend reversal\ndef y = rsi_val ;\ninput riReversLength = 2;\ninput lookBack = 2;\n\n\ndef rsi_expAvg = ExpAverage(rsi_val, riReversLength);\n\n#trend reversal\ndef overBoughtReversal = if ((rsi_expAvg &gt; overBoughtRsi)within 2 bar) and  (rsi_expAvg crosses above rsi_val) then price else 0;# if (rsi_expAvg &gt; OverBought and  rsi_expAvg crosses above rsi_val  within 3 bar ) then 40 else 0;\ndef oversoldRevesal = if ((rsi_expAvg &lt; overSoldRsi)within 2 bar) and  (rsi_expAvg crosses below rsi_val within 2 bar) then price else 0;\n\n##############\n########!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n#vwap vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\n#input numDevUp = 2.0;\ninput vwapTimeFrame = {default DAY, WEEK, MONTH};\n\ndef cap = GetAggregationPeriod();\ndef errorInAggregation =\n    vwapTimeFrame == vwapTimeFrame.DAY and cap &gt;= AggregationPeriod.WEEK or\n    vwapTimeFrame == vwapTimeFrame.WEEK and cap &gt;= AggregationPeriod.MONTH;\nAssert(!errorInAggregation, \&quot;timeFrame should be not less than current chart aggregation period\&quot;);\n\ndef yyyyMmDd = GetYYYYMMDD();\ndef periodIndx;\nswitch (vwapTimeFrame) {\ncase DAY:\n    periodIndx = yyyyMmDd;\ncase WEEK:\n    periodIndx = Floor((DaysFromDate(First(yyyyMmDd)) + GetDayOfWeek(First(yyyyMmDd))) / 7);\ncase MONTH:\n    periodIndx = RoundDown(yyyyMmDd / 100, 0);\n}\ndef isPeriodRolled = CompoundValue(1, periodIndx != periodIndx[1], yes);\n\ndef volumeSum;\ndef volumeVwapSum;\ndef volumeVwap2Sum;\n\nif (isPeriodRolled) {\n    volumeSum = volume;\n    volumeVwapSum = volume * vwap;\n    volumeVwap2Sum = volume * Sqr(vwap);\n} else {\n    volumeSum = CompoundValue(1, volumeSum[1] + volume, volume);\n    volumeVwapSum = CompoundValue(1, volumeVwapSum[1] + volume * vwap, volume * vwap);\n    volumeVwap2Sum = CompoundValue(1, volumeVwap2Sum[1] + volume * Sqr(vwap), volume * Sqr(vwap));\n}\ndef vWapprice = volumeVwapSum / volumeSum;\ndef deviation = Sqrt(Max(volumeVwap2Sum / volumeSum - Sqr(vWapprice), 0));\n\ndef VWAP = vWapprice;\ninput numDevUp = 2.0;\ninput numDevDn = -2.0;\n\ndef vwap_UpperBand = price + numDevUp * deviation;\ndef vwap_LowerBand = price + numDevDn * deviation;\n\ninput vwapCondition = no;\n#input vp=close;\ndef conVwapBuy = if  vwapCondition then  close &gt;= VWAP else 1;\n\n#####^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n#MACD\n\ninput fastLength = 12;\ninput slowLength = 26;\ninput MACDLength = 9;\ninput displace = 0;\ndef fastAvg = Sum(volume * price, fastLength) / Sum(volume, fastLength);\ndef slowAvg = Sum(volume * price, slowLength) / Sum(volume, slowLength);\ndef Value = fastAvg - slowAvg;\ndef Avg = ExpAverage(Value, MACDLength);\ndef MACD_Diff  = Value - Avg;\n#def ZeroLine = 0;\n\ninput def_cond = no;\ndef MACD_cond_logic = if (def_cond) then MACD_Diff &lt;= 0 else yes;\n\n\n#MACD Pivot reversal\n#input FilterLength=3;\n######################\n#def MACDV_Diff_expAvg = ExpAverage(MACD_Diff, FilterLength);\n#plot oversoldRevesalMACDV =if ((Diff_MACDV &lt; MacdZeroLine)within lookBack bar) and  ( Diff_MACDV crosses above   MACDV_Diff_expAvg within lookBack bar)and Diff_MACDV &gt; Diff_MACDV[1] then 1 else 0;# if (MACDV_Diff_expAvg &gt; OverBought and  MACDV_Diff_expAvg crosses above rsi_val  within 3 bar ) then 40 else 0;\n#plot overBoughtReversalMACDV = if ((Diff_MACDV &gt; MacdZeroLine)within lookBack bar) and  (MACDV_Diff_expAvg crosses above  Diff_MACDV  within lookBack bar)  and Diff_MACDV &lt; Diff_MACDV[1] and Diff_MACDV&gt;0 then 1 else 0;\n\n\n#trend Pivot reversal\ndef twoBarPivotMACD_Buy =  MACD_Diff &gt; MACD_Diff[1] and MACD_Diff[1] &gt; MACD_Diff[2] and MACD_Diff[2] &lt; MACD_Diff[3] and MACD_Diff[3] &lt; MACD_Diff [4];\ndef twoBarPivotMACD_Sell = MACD_Diff &lt; MACD_Diff[1] and MACD_Diff[1] &lt; MACD_Diff[2] and MACD_Diff[2] &gt; MACD_Diff[3] and MACD_Diff[3] &gt; MACD_Diff [4];\n###################\n\n\ndef uptrend = if price &gt; price[1] and price[1] &gt;= price[2] then 1 else 0;\n\n#####################################-----------------\n\ninput aggPeriod = AggregationPeriod.DAY;\ninput AvgType = AverageType.SIMPLE;\ninput short_len = 10;\ninput mid_len = 21;\ninput long_len = 50;\ninput moving_average = no;\ndef AVG1 = MovingAverage(AvgType, close(period = aggPeriod), short_len);\ndef AVG2 = MovingAverage(AvgType, close(period = aggPeriod), mid_len);\ndef AVG3 = MovingAverage(AvgType, close(period = aggPeriod), long_len);\n#def EMA_condition = if moving_average then (close &gt; AVG1 or close &gt; AVG2 or  close &gt; AVG3) else yes;\ndef EMA_condition = if moving_average then (close &gt; AVG1 ) else yes;\n\nAddLabel( yes, Concat(short_len + \&quot;MA = \&quot;, AVG1), Color.CYAN);\nAddLabel( yes, Concat(mid_len + \&quot;MA = \&quot;, AVG2), Color.LIGHT_ORANGE);\nAddLabel( yes, Concat(long_len + \&quot;MA = \&quot;, AVG3), Color.PINK);\n\n\n\n##############################################\n#@@@@\n#ADX\ninput adxLength = 14;\ninput adxAverageType = AverageType.WILDERS;\n\ndef ADX = DMI(adxLength, adxAverageType).ADX;\n#ADX.setDefaultColor(GetColor(5));\n\ninput length = 7;\ninput signalLength = 10;\ninput averageType = AverageType.WEIGHTED;\ninput averageTypeSignal = AverageType.EXPONENTIAL;\n\n\n\ndef Ref = ADX;# reference OnBalanceVolume();\nplot RefMoving = MovingAverage(averageType, Ref, length);\nplot Signal = MovingAverage(averageTypeSignal, RefMoving, signalLength);\nplot dif =  Ref - RefMoving;\n#Ref.SetDefaultColor(GetColor(4));\nRefMoving.SetDefaultColor(GetColor(8));\nSignal.SetDefaultColor(GetColor(2));\ndif.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);\ndif.SetLineWeight(3);\n\n\ndif.DefineColor(\&quot;Positive and Up\&quot;, Color.CYAN);\ndif.DefineColor(\&quot;Positive and Down\&quot;, Color.BLUE);\ndif.DefineColor(\&quot;Negative and Down\&quot;, Color.RED);\ndif.DefineColor(\&quot;Negative and Up\&quot;, Color.YELLOW);\ndif.AssignValueColor(if dif &gt;= 0 then if dif &gt; dif[1] then dif.Color(\&quot;Positive and Up\&quot;) else dif.Color(\&quot;Positive and Down\&quot;) else if dif &lt; dif[1] then dif.Color(\&quot;Negative and Down\&quot;) else dif.Color(\&quot;Negative and Up\&quot;));\n\n\n#@@@@@\n###################################\ndef SMI_ADX_Buy_Signal;\nif GetAggregationPeriod() &lt; AggregationPeriod.FIFTEEN_MIN\nthen\n{\n    SMI_ADX_Buy_Signal = if ( (SMI crosses above AvgSMI  within lookBack bar) and (Ref crosses above RefMoving within lookBack bar) and dif &gt;= 0 and (rsi_val &gt; overSoldRsi and rsi_val &lt; 60 ) and MACD_cond_logic and  EMA_condition) and Ref &gt; Ref[2] then 1 else 0;\n\n}\nelse {\n    SMI_ADX_Buy_Signal = 0;\n}\nplot buy6 = SMI_ADX_Buy_Signal;\n\n\ndef SMI_Buy_Signal = if ( (AvgSMI crosses above overbought  within lookBack bar) and SMI &gt;  AvgSMI and (rsi_val &gt; overSoldRsi and rsi_val &lt; overBoughtRsi + 10 ) and MACD_cond_logic and  EMA_condition) and (close[1] &gt;= VWAP[1] and close &gt;= vwap_UpperBand[1]) and (uptrend) then 1 else 0;\nplot buy2 = SMI_Buy_Signal;\n\n#def  buySvix_Signal = if ( MACD_cond_logic  and  EMA_condition and  oversoldRevesal  and buySvix &lt; Zeroline - 10 ) then 1 else 0;\n#plot buy3 = buySvix_Signal;\n\n\n\n\n\n\ndef SMI_Sell_Signal = if ( (SMI crosses below AvgSMI within lookBack bar) and (overBoughtReversal)) then 1 else 0;\n#def sellSignal2 = if ((rsi_val  &gt; overBoughtRsi within 3 bar) and (smi crosses below AvgSMI within 3 bar)) then 1 else 0;\n\n\nplot sell2 = SMI_Sell_Signal;\n\n#######\n\n#def FVE_buySignal = conVwapBuy and oversoldRevesal and pFVE_Bull  and MACD_cond_logic ;# and Diff &gt;= 0;\n#def sig_buy = pFVE_Bull and Diff &gt;= 0;\n#plot buy4 = FVE_buySignal ;\n\n\n#def FVE_sellSignal = overBoughtReversal and pFVE_Bear ;\n#plot sell4 = FVE_sellSignal;\nplot buy5 = twoBarPivotMACD_Buy and oversoldRevesal;\nplot sell5 = twoBarPivotMACD_Sell and overBoughtReversal;\n\n####\n#def buySignal2 = if (oversoldRevesal  and buythedip2 &lt; Zeroline ) then 1 else 0;\n\n#def buySignal3 = if ( oversoldRevesal  and buythedip3 &lt; Zeroline - 10 ) then 1 else 0;\n#plot buy3 = buySignal3;\n\nAddChartBubble(buy2 == 1, buy2, \&quot;B2SMI= \&quot; +  low[1] + \&quot; rsi \&quot; + rsi_val + \&quot; w \&quot; + VWAP[1], Color.LIGHT_ORANGE, no);\n#AddChartBubble(buy3 == 1, buy3,  \&quot;B3Svix= \&quot; + price + \&quot; rsi \&quot; + rsi_val, Color.LIGHT_GRAY, no);\n#AddChartBubble(buy4 == 1, buy4,  \&quot;B4FVE= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.YELLOW, no);\nAddChartBubble(buy5 == 1, buy5,  \&quot;B5Macd= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.CYAN, no);\nAddChartBubble(buy6 == 1, buy6,  \&quot;B5AdxSMI= \&quot; + price + \&quot; \\nrsi \&quot; + rsi_val[lookBack] + \&quot; \\nAdx \&quot; + Ref[lookBack], Color.GREEN, no);\n\n#AddChartBubble(sell1 == 1, sell1, \&quot;S1STR= \&quot; + price + \&quot; rsi \&quot; + rsi_val, Color.LIGHT_RED, no);#Buy the Dip\n\nAddChartBubble(sell2 == 1, sell2, \&quot;S2SMI= \&quot; + price + \&quot; rsi \&quot; + rsi_val, Color.PINK, no);#Buy the Dip\n#AddChartBubble(sell4 == 1, sell4, \&quot;S4FVE= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.VIOLET, no);#Buy the Dip\nAddChartBubble(sell5 == 1, sell5, \&quot;S5Macd= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.BLUE, no);#Buy the Dip\n#AddChartBubble(oversoldRevesal , close, rsi_val, Color.blue, no);#Buy the Dip\nplot scan = buy2;&quot;,name=&quot;_d344cec2_79a9_43f5_8e27_7e658f475446&quot;}))})}}" SYMBOL="EVRG" SYMBOL_GROUP="1" VERTICAL="false" VISIBLE="true" WEIGHT="4.001584786053883"/>
            <CHART_2 VERTICAL="false" VISIBLE="false" WEIGHT="3.0"/>
            <CHART_3 VERTICAL="false" VISIBLE="false" WEIGHT="3.0"/>
            <DASHBOARD SYMBOL="UAL" SYMBOL_GROUP="1" VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <LEVEL_II SYMBOL="FDX" SYMBOL_GROUP="1" VERTICAL="false" VISIBLE="false" WEIGHT="1.0">
              <SORTING COLUMN="BID" ORDER="-1"/>
              <SORTING1 COLUMN="ASK" ORDER="1"/>
            </LEVEL_II>
            <LIVE_NEWS SYMBOL="AAL" SYMBOL_GROUP="1" VERTICAL="false" VISIBLE="false" WEIGHT="2.6354992076069728">
              <SORTING COLUMN="TIME" ORDER="-1"/>
            </LIVE_NEWS>
            <PHASE_SCORES PHASE_SCORE_GROUP_NAME="Company's Growth" SYMBOL="CLDR" VERTICAL="false" VISIBLE="false" WEIGHT="0.3645007923930269">
              <PHASE_SCORES_PANEL>
                <DROPDOWN_EXPANDED_0 SECOND_LEVEL_GROUP="Growth Phase 1" TOP_LEVEL_GROUP="Company's Growth"/>
                <DROPDOWN_EXPANDED_1 SECOND_LEVEL_GROUP="Stock Highlights" TOP_LEVEL_GROUP="Company's Growth"/>
                <DROPDOWN_EXPANDED_2 SECOND_LEVEL_GROUP="Growth Phase 2" TOP_LEVEL_GROUP="Company's Growth"/>
              </PHASE_SCORES_PANEL>
            </PHASE_SCORES>
            <TIME_SALES SYMBOL="AAL" SYMBOL_GROUP="6" TIME_SALES_COLUMN="TIME:30:F:F,PRICE:20:,SIZE:20:" VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <TRADE CONFIGURATION_NAME="SINGLE" ORDER_RULES_SET="STOCK" ORDER_TYPE="LIMIT" OS_AUTO="false" OS_EXPANDED="false" OS_TIF="DAY" QTY="100.0" QTY_STEP="1.0" TEMPLATE="SINGLE" TRADE_BUTTONS="BUY_MKT;SELL_MKT;MULTI_CANCEL;REVERSE;FLAT;SECOND_LINE;QUANTITY;AUTO_SEND;ORDER_SETUP" VISIBLE="false">
              <OCO_STOP>
                <TRG_0 TRG_ENBL="true" TRG_LINK="ASK_BID" TRG_OFFSET_MODE="TICK" TRG_OT="STOP" TRG_SETUP="10.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AAL="10.0" AAPL="10.0" ABB="10.0" ABBV="10.0" ABIO="10.0" ABR="10.0" ABUS="10.0" ACRX="10.0" ADBE="10.0" ADM="10.0" ADMA="10.0" ADPT="10.0" AEL="10.0" AES="10.0" AGNC="10.0" AGRX="10.0" AIG="10.0" ALK="10.0" ALKS="10.0" ALL="10.0" ALLO="10.0" AMAR="10.0" AMD="10.0" AMGN="10.0" AMRS="10.0" AMX="10.0" AMZN="10.0" APA="10.0" APG="10.0" APHA="10.0" APPL="10.0" APT="10.0" ARCO="10.0" ARLO="10.0" ARM="10.0" ARMK="10.0" ARR="10.0" ASNA="10.0" ATVI="10.0" AU="10.0" AUY="10.0" AVH="10.0" AXGT="10.0" AXIM="10.0" AXP="10.0" AYX="10.0" AZN="10.0" BA="10.0" BABA="10.0" BB="10.0" BBBY="10.0" BBD="10.0" BBVA="10.0" BBY="10.0" BC="10.0" BCOV="10.0" BE="10.0" BF="10.0" BF.B="10.0" BKR="10.0" BLDR="10.0" BOXL="10.0" BP="10.0" BRFS="10.0" BRQS="10.0" BTG="10.0" CAKE="10.0" CAN="10.0" CARR="10.0" CAT="10.0" CCAN="10.0" CCL="10.0" CDE="10.0" CGC="10.0" CGIX="10.0" CIDM="10.0" CLDR="10.0" CLVS="10.0" CNK="10.0" CNSP="10.0" COMP="10.0" CPE="10.0" CRDF="10.0" CRM="10.0" CRON="10.0" CSCO="10.0" CTVA="10.0" CVS="10.0" CWH="10.0" CYCC="10.0" CYDY="10.0" DAL="10.0" DBVT="10.0" DBX="10.0" DDD="10.0" DDOG="10.0" DE="10.0" DHT="10.0" DLAKF="10.0" DRAD="10.0" DT="10.0" DUK="10.0" DVAX="10.0" E="10.0" EAT="10.0" EBAY="10.0" ECL="10.0" EL="10.0" ELAN="10.0" ENIA="10.0" ENLC="10.0" ENTX="10.0" EOG="10.0" EPD="10.0" EPZM="10.0" EQNR="10.0" EQT="10.0" ET="10.0" ETSY="10.0" EVRG="10.0" EXK="10.0" EXPE="10.0" FAST="10.0" FB="10.0" FCX="10.0" FDX="10.0" FISV="10.0" FIT="10.0" FIZZ="10.0" FL="10.0" FSLY="10.0" FSM="10.0" FTCH="10.0" FTNT="10.0" FTSI="10.0" GAB="10.0" GAU="10.0" GE="10.0" GFI="10.0" GGO="10.0" GH="10.0" GILD="10.0" GLPI="10.0" GLUU="10.0" GMED="10.0" GOLD="10.0" GPRO="10.0" GRNQ="10.0" GSK="10.0" GSV="10.0" HAL="10.0" HL="10.0" HLX="10.0" HMY="10.0" HP="10.0" HPE="10.0" HRB="10.0" HTA="10.0" HTHT="10.0" HTZ="10.0" HUYA="10.0" HYRE="10.0" HZNP="10.0" IAC="10.0" IAG="10.0" IBIO="10.0" IBM="10.0" ICAGY="10.0" ICL="10.0" ILMN="10.0" ING="10.0" INO="10.0" INSG="10.0" INTC="10.0" ITCI="10.0" JBLU="10.0" JETS="10.0" JKS="10.0" KDMN="10.0" KGC="10.0" KHC="10.0" KMI="10.0" KODK="10.0" KPCPF="10.0" KURA="10.0" LAC="10.0" LAKE="10.0" LLY="10.0" LODE="10.0" LTM="10.0" LUV="10.0" LVS="10.0" LYFT="10.0" MBT="10.0" MFA="10.0" MGY="10.0" MNKD="10.0" MNLO="10.0" MPW="10.0" MRNA="10.0" MRO="10.0" MSFT="10.0" MUX="10.0" MVIS="10.0" NAK="10.0" NAT="10.0" NCV="10.0" NDX="10.0" NET="10.0" NEXT="10.0" NFLX="10.0" NGD="10.0" NIO="10.0" NKLA="10.0" NLY="10.0" NRZ="10.0" NSLPQ="10.0" NTGR="10.0" NTNX="10.0" NVAX="10.0" NVCR="10.0" NVDA="10.0" NVEE="10.0" NWL="10.0" ONEM="10.0" ORTX="10.0" OSTK="10.0" PAAC="10.0" PACB="10.0" PANW="10.0" PBF="10.0" PBR="10.0" PENN="10.0" PFE="10.0" PIXY="10.0" PLAY="10.0" PLCE="10.0" PLNHF="10.0" PLNT="10.0" POR="10.0" PPD="10.0" PRTY="10.0" PULM="10.0" QGEN="10.0" QQQ="10.0" R="10.0" RCL="10.0" REED="10.0" RIG="10.0" RLFTF="10.0" ROKO="10.0" ROKU="10.0" RRC="10.0" RT="10.0" RTX="10.0" S="10.0" SABR="10.0" SAVE="10.0" SCGIX="10.0" SESN="10.0" SFET="10.0" SGLB="10.0" SHLL="10.0" SHOP="10.0" SINT="10.0" SLF="10.0" SLGG="10.0" SM="10.0" SNOW="10.0" SOL="10.0" SPPI="10.0" SPT="10.0" SPX="10.0" SPY="10.0" SQ="10.0" SRC="10.0" SRNE="10.0" SRPT="10.0" SSRM="10.0" SUMO="10.0" SURF="10.0" SWBI="10.0" SWCH="10.0" SWKS="10.0" T="10.0" TCEHY="10.0" TGT="10.0" TIF="10.0" TLRY="10.0" TMUS="10.0" TNXP="10.0" TPR="10.0" TRIL="10.0" TRQ="10.0" TSLA="10.0" TSM="10.0" TUP="10.0" TWTR="10.0" UA="10.0" UAL="10.0" UBER="10.0" UGAZ="10.0" UIS="10.0" UONE="10.0" UPS="10.0" USO="10.0" VALE="10.0" VER="10.0" VET="10.0" VICI="10.0" VIPS="10.0" VIX="10.0" VNET="10.0" VNO="10.0" VSLR="10.0" VTIQ="10.0" VYNE="10.0" VZ="10.0" WBA="10.0" WKHS="10.0" WMB="10.0" WORK="10.0" WPRT="10.0" X="10.0" XELB="10.0" XLNX="10.0" YELP="10.0" YEXT="10.0" ZBH="10.0" ZM="10.0" ZUO="10.0" ZYME="10.0"/>
                </TRG_0>
              </OCO_STOP>
              <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="1.0" TRG_TIF="DAY">
                <OFFSET_PER_SYMBOL AAL="1.0" AAPL="1.0" ABB="1.0" ABBV="1.0" ABIO="1.0" ABR="1.0" ABUS="1.0" ACRX="1.0" ADBE="1.0" ADM="1.0" ADMA="1.0" ADPT="1.0" AEL="1.0" AES="1.0" AGNC="1.0" AGRX="1.0" AIG="1.0" ALK="1.0" ALKS="1.0" ALL="1.0" ALLO="1.0" AMAR="1.0" AMD="1.0" AMGN="1.0" AMRS="1.0" AMX="1.0" AMZN="1.0" APA="1.0" APG="1.0" APHA="1.0" APPL="1.0" APT="1.0" ARCO="1.0" ARLO="1.0" ARM="1.0" ARMK="1.0" ARR="1.0" ASNA="1.0" ATVI="1.0" AU="1.0" AUY="1.0" AVH="1.0" AXGT="1.0" AXIM="1.0" AXP="1.0" AYX="1.0" AZN="1.0" BA="1.0" BABA="1.0" BB="1.0" BBBY="1.0" BBD="1.0" BBVA="1.0" BBY="1.0" BC="1.0" BCOV="1.0" BE="1.0" BF="1.0" BF.B="1.0" BKR="1.0" BLDR="1.0" BOXL="1.0" BP="1.0" BRFS="1.0" BRQS="1.0" BTG="1.0" CAKE="1.0" CAN="1.0" CARR="1.0" CAT="1.0" CCAN="1.0" CCL="1.0" CDE="1.0" CGC="1.0" CGIX="1.0" CIDM="1.0" CLDR="1.0" CLVS="1.0" CNK="1.0" CNSP="1.0" COMP="1.0" CPE="1.0" CRDF="1.0" CRM="1.0" CRON="1.0" CSCO="1.0" CTVA="1.0" CVS="1.0" CWH="1.0" CYCC="1.0" CYDY="1.0" DAL="1.0" DBVT="1.0" DBX="1.0" DDD="1.0" DDOG="1.0" DE="1.0" DHT="1.0" DLAKF="1.0" DRAD="1.0" DT="1.0" DUK="1.0" DVAX="1.0" E="1.0" EAT="1.0" EBAY="1.0" ECL="1.0" EL="1.0" ELAN="1.0" ENIA="1.0" ENLC="1.0" ENTX="1.0" EOG="1.0" EPD="1.0" EPZM="1.0" EQNR="1.0" EQT="1.0" ET="1.0" ETSY="1.0" EVRG="1.0" EXK="1.0" EXPE="1.0" FAST="1.0" FB="1.0" FCX="1.0" FDX="1.0" FISV="1.0" FIT="1.0" FIZZ="1.0" FL="1.0" FSLY="1.0" FSM="1.0" FTCH="1.0" FTNT="1.0" FTSI="1.0" GAB="1.0" GAU="1.0" GE="1.0" GFI="1.0" GGO="1.0" GH="1.0" GILD="1.0" GLPI="1.0" GLUU="1.0" GMED="1.0" GOLD="1.0" GPRO="1.0" GRNQ="1.0" GSK="1.0" GSV="1.0" HAL="1.0" HL="1.0" HLX="1.0" HMY="1.0" HP="1.0" HPE="1.0" HRB="1.0" HTA="1.0" HTHT="1.0" HTZ="1.0" HUYA="1.0" HYRE="1.0" HZNP="1.0" IAC="1.0" IAG="1.0" IBIO="1.0" IBM="1.0" ICAGY="1.0" ICL="1.0" ILMN="1.0" ING="1.0" INO="1.0" INSG="1.0" INTC="1.0" ITCI="1.0" JBLU="1.0" JETS="1.0" JKS="1.0" KDMN="1.0" KGC="1.0" KHC="1.0" KMI="1.0" KODK="1.0" KPCPF="1.0" KURA="1.0" LAC="1.0" LAKE="1.0" LLY="1.0" LODE="1.0" LTM="1.0" LUV="1.0" LVS="1.0" LYFT="1.0" MBT="1.0" MFA="1.0" MGY="1.0" MNKD="1.0" MNLO="1.0" MPW="1.0" MRNA="1.0" MRO="1.0" MSFT="1.0" MUX="1.0" MVIS="1.0" NAK="1.0" NAT="1.0" NCV="1.0" NDX="1.0" NET="1.0" NEXT="1.0" NFLX="1.0" NGD="1.0" NIO="1.0" NKLA="1.0" NLY="1.0" NRZ="1.0" NSLPQ="1.0" NTGR="1.0" NTNX="1.0" NVAX="1.0" NVCR="1.0" NVDA="1.0" NVEE="1.0" NWL="1.0" ONEM="1.0" ORTX="1.0" OSTK="1.0" PAAC="1.0" PACB="1.0" PANW="1.0" PBF="1.0" PBR="1.0" PENN="1.0" PFE="1.0" PIXY="1.0" PLAY="1.0" PLCE="1.0" PLNHF="1.0" PLNT="1.0" POR="1.0" PPD="1.0" PRTY="1.0" PULM="1.0" QGEN="1.0" QQQ="1.0" R="1.0" RCL="1.0" REED="1.0" RIG="1.0" RLFTF="1.0" ROKO="1.0" ROKU="1.0" RRC="1.0" RT="1.0" RTX="1.0" S="1.0" SABR="1.0" SAVE="1.0" SCGIX="1.0" SESN="1.0" SFET="1.0" SGLB="1.0" SHLL="1.0" SHOP="1.0" SINT="1.0" SLF="1.0" SLGG="1.0" SM="1.0" SNOW="1.0" SOL="1.0" SPPI="1.0" SPT="1.0" SPX="1.0" SPY="1.0" SQ="1.0" SRC="1.0" SRNE="1.0" SRPT="1.0" SSRM="1.0" SUMO="1.0" SURF="1.0" SWBI="1.0" SWCH="1.0" SWKS="1.0" T="1.0" TCEHY="1.0" TGT="1.0" TIF="1.0" TLRY="1.0" TMUS="1.0" TNXP="1.0" TPR="1.0" TRIL="1.0" TRQ="1.0" TSLA="1.0" TSM="1.0" TUP="1.0" TWTR="1.0" UA="1.0" UAL="1.0" UBER="1.0" UGAZ="1.0" UIS="1.0" UONE="1.0" UPS="1.0" USO="1.0" VALE="1.0" VER="1.0" VET="1.0" VICI="1.0" VIPS="1.0" VIX="1.0" VNET="1.0" VNO="1.0" VSLR="1.0" VTIQ="1.0" VYNE="1.0" VZ="1.0" WBA="1.0" WKHS="1.0" WMB="1.0" WORK="1.0" WPRT="1.0" X="1.0" XELB="1.0" XLNX="1.0" YELP="1.0" YEXT="1.0" ZBH="1.0" ZM="1.0" ZUO="1.0" ZYME="1.0"/>
              </TRG_0>
              <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-1.0" TRG_TIF="DAY">
                <OFFSET_PER_SYMBOL AAL="-1.0" AAPL="-1.0" ABB="-1.0" ABBV="-1.0" ABIO="-1.0" ABR="-1.0" ABUS="-1.0" ACRX="-1.0" ADBE="-1.0" ADM="-1.0" ADMA="-1.0" ADPT="-1.0" AEL="-1.0" AES="-1.0" AGNC="-1.0" AGRX="-1.0" AIG="-1.0" ALK="-1.0" ALKS="-1.0" ALL="-1.0" ALLO="-1.0" AMAR="-1.0" AMD="-1.0" AMGN="-1.0" AMRS="-1.0" AMX="-1.0" AMZN="-1.0" APA="-1.0" APG="-1.0" APHA="-1.0" APPL="-1.0" APT="-1.0" ARCO="-1.0" ARLO="-1.0" ARM="-1.0" ARMK="-1.0" ARR="-1.0" ASNA="-1.0" ATVI="-1.0" AU="-1.0" AUY="-1.0" AVH="-1.0" AXGT="-1.0" AXIM="-1.0" AXP="-1.0" AYX="-1.0" AZN="-1.0" BA="-1.0" BABA="-1.0" BB="-1.0" BBBY="-1.0" BBD="-1.0" BBVA="-1.0" BBY="-1.0" BC="-1.0" BCOV="-1.0" BE="-1.0" BF="-1.0" BF.B="-1.0" BKR="-1.0" BLDR="-1.0" BOXL="-1.0" BP="-1.0" BRFS="-1.0" BRQS="-1.0" BTG="-1.0" CAKE="-1.0" CAN="-1.0" CARR="-1.0" CAT="-1.0" CCAN="-1.0" CCL="-1.0" CDE="-1.0" CGC="-1.0" CGIX="-1.0" CIDM="-1.0" CLDR="-1.0" CLVS="-1.0" CNK="-1.0" CNSP="-1.0" COMP="-1.0" CPE="-1.0" CRDF="-1.0" CRM="-1.0" CRON="-1.0" CSCO="-1.0" CTVA="-1.0" CVS="-1.0" CWH="-1.0" CYCC="-1.0" CYDY="-1.0" DAL="-1.0" DBVT="-1.0" DBX="-1.0" DDD="-1.0" DDOG="-1.0" DE="-1.0" DHT="-1.0" DLAKF="-1.0" DRAD="-1.0" DT="-1.0" DUK="-1.0" DVAX="-1.0" E="-1.0" EAT="-1.0" EBAY="-1.0" ECL="-1.0" EL="-1.0" ELAN="-1.0" ENIA="-1.0" ENLC="-1.0" ENTX="-1.0" EOG="-1.0" EPD="-1.0" EPZM="-1.0" EQNR="-1.0" EQT="-1.0" ET="-1.0" ETSY="-1.0" EVRG="-1.0" EXK="-1.0" EXPE="-1.0" FAST="-1.0" FB="-1.0" FCX="-1.0" FDX="-1.0" FISV="-1.0" FIT="-1.0" FIZZ="-1.0" FL="-1.0" FSLY="-1.0" FSM="-1.0" FTCH="-1.0" FTNT="-1.0" FTSI="-1.0" GAB="-1.0" GAU="-1.0" GE="-1.0" GFI="-1.0" GGO="-1.0" GH="-1.0" GILD="-1.0" GLPI="-1.0" GLUU="-1.0" GMED="-1.0" GOLD="-1.0" GPRO="-1.0" GRNQ="-1.0" GSK="-1.0" GSV="-1.0" HAL="-1.0" HL="-1.0" HLX="-1.0" HMY="-1.0" HP="-1.0" HPE="-1.0" HRB="-1.0" HTA="-1.0" HTHT="-1.0" HTZ="-1.0" HUYA="-1.0" HYRE="-1.0" HZNP="-1.0" IAC="-1.0" IAG="-1.0" IBIO="-1.0" IBM="-1.0" ICAGY="-1.0" ICL="-1.0" ILMN="-1.0" ING="-1.0" INO="-1.0" INSG="-1.0" INTC="-1.0" ITCI="-1.0" JBLU="-1.0" JETS="-1.0" JKS="-1.0" KDMN="-1.0" KGC="-1.0" KHC="-1.0" KMI="-1.0" KODK="-1.0" KPCPF="-1.0" KURA="-1.0" LAC="-1.0" LAKE="-1.0" LLY="-1.0" LODE="-1.0" LTM="-1.0" LUV="-1.0" LVS="-1.0" LYFT="-1.0" MBT="-1.0" MFA="-1.0" MGY="-1.0" MNKD="-1.0" MNLO="-1.0" MPW="-1.0" MRNA="-1.0" MRO="-1.0" MSFT="-1.0" MUX="-1.0" MVIS="-1.0" NAK="-1.0" NAT="-1.0" NCV="-1.0" NDX="-1.0" NET="-1.0" NEXT="-1.0" NFLX="-1.0" NGD="-1.0" NIO="-1.0" NKLA="-1.0" NLY="-1.0" NRZ="-1.0" NSLPQ="-1.0" NTGR="-1.0" NTNX="-1.0" NVAX="-1.0" NVCR="-1.0" NVDA="-1.0" NVEE="-1.0" NWL="-1.0" ONEM="-1.0" ORTX="-1.0" OSTK="-1.0" PAAC="-1.0" PACB="-1.0" PANW="-1.0" PBF="-1.0" PBR="-1.0" PENN="-1.0" PFE="-1.0" PIXY="-1.0" PLAY="-1.0" PLCE="-1.0" PLNHF="-1.0" PLNT="-1.0" POR="-1.0" PPD="-1.0" PRTY="-1.0" PULM="-1.0" QGEN="-1.0" QQQ="-1.0" R="-1.0" RCL="-1.0" REED="-1.0" RIG="-1.0" RLFTF="-1.0" ROKO="-1.0" ROKU="-1.0" RRC="-1.0" RT="-1.0" RTX="-1.0" S="-1.0" SABR="-1.0" SAVE="-1.0" SCGIX="-1.0" SESN="-1.0" SFET="-1.0" SGLB="-1.0" SHLL="-1.0" SHOP="-1.0" SINT="-1.0" SLF="-1.0" SLGG="-1.0" SM="-1.0" SNOW="-1.0" SOL="-1.0" SPPI="-1.0" SPT="-1.0" SPX="-1.0" SPY="-1.0" SQ="-1.0" SRC="-1.0" SRNE="-1.0" SRPT="-1.0" SSRM="-1.0" SUMO="-1.0" SURF="-1.0" SWBI="-1.0" SWCH="-1.0" SWKS="-1.0" T="-1.0" TCEHY="-1.0" TGT="-1.0" TIF="-1.0" TLRY="-1.0" TMUS="-1.0" TNXP="-1.0" TPR="-1.0" TRIL="-1.0" TRQ="-1.0" TSLA="-1.0" TSM="-1.0" TUP="-1.0" TWTR="-1.0" UA="-1.0" UAL="-1.0" UBER="-1.0" UGAZ="-1.0" UIS="-1.0" UONE="-1.0" UPS="-1.0" USO="-1.0" VALE="-1.0" VER="-1.0" VET="-1.0" VICI="-1.0" VIPS="-1.0" VIX="-1.0" VNET="-1.0" VNO="-1.0" VSLR="-1.0" VTIQ="-1.0" VYNE="-1.0" VZ="-1.0" WBA="-1.0" WKHS="-1.0" WMB="-1.0" WORK="-1.0" WPRT="-1.0" X="-1.0" XELB="-1.0" XLNX="-1.0" YELP="-1.0" YEXT="-1.0" ZBH="-1.0" ZM="-1.0" ZUO="-1.0" ZYME="-1.0"/>
              </TRG_1>
              <_2>
                <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="2.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AAL="2.0" AAPL="2.0" ABB="2.0" ABBV="2.0" ABIO="2.0" ABR="2.0" ABUS="2.0" ACRX="2.0" ADBE="2.0" ADM="2.0" ADMA="2.0" ADPT="2.0" AEL="2.0" AES="2.0" AGNC="2.0" AGRX="2.0" AIG="2.0" ALK="2.0" ALKS="2.0" ALL="2.0" ALLO="2.0" AMAR="2.0" AMD="2.0" AMGN="2.0" AMRS="2.0" AMX="2.0" AMZN="2.0" APA="2.0" APG="2.0" APHA="2.0" APPL="2.0" APT="2.0" ARCO="2.0" ARLO="2.0" ARM="2.0" ARMK="2.0" ARR="2.0" ASNA="2.0" ATVI="2.0" AU="2.0" AUY="2.0" AVH="2.0" AXGT="2.0" AXIM="2.0" AXP="2.0" AYX="2.0" AZN="2.0" BA="2.0" BABA="2.0" BB="2.0" BBBY="2.0" BBD="2.0" BBVA="2.0" BBY="2.0" BC="2.0" BCOV="2.0" BE="2.0" BF="2.0" BF.B="2.0" BKR="2.0" BLDR="2.0" BOXL="2.0" BP="2.0" BRFS="2.0" BRQS="2.0" BTG="2.0" CAKE="2.0" CAN="2.0" CARR="2.0" CAT="2.0" CCAN="2.0" CCL="2.0" CDE="2.0" CGC="2.0" CGIX="2.0" CIDM="2.0" CLDR="2.0" CLVS="2.0" CNK="2.0" CNSP="2.0" COMP="2.0" CPE="2.0" CRDF="2.0" CRM="2.0" CRON="2.0" CSCO="2.0" CTVA="2.0" CVS="2.0" CWH="2.0" CYCC="2.0" CYDY="2.0" DAL="2.0" DBVT="2.0" DBX="2.0" DDD="2.0" DDOG="2.0" DE="2.0" DHT="2.0" DLAKF="2.0" DRAD="2.0" DT="2.0" DUK="2.0" DVAX="2.0" E="2.0" EAT="2.0" EBAY="2.0" ECL="2.0" EL="2.0" ELAN="2.0" ENIA="2.0" ENLC="2.0" ENTX="2.0" EOG="2.0" EPD="2.0" EPZM="2.0" EQNR="2.0" EQT="2.0" ET="2.0" ETSY="2.0" EVRG="2.0" EXK="2.0" EXPE="2.0" FAST="2.0" FB="2.0" FCX="2.0" FDX="2.0" FISV="2.0" FIT="2.0" FIZZ="2.0" FL="2.0" FSLY="2.0" FSM="2.0" FTCH="2.0" FTNT="2.0" FTSI="2.0" GAB="2.0" GAU="2.0" GE="2.0" GFI="2.0" GGO="2.0" GH="2.0" GILD="2.0" GLPI="2.0" GLUU="2.0" GMED="2.0" GOLD="2.0" GPRO="2.0" GRNQ="2.0" GSK="2.0" GSV="2.0" HAL="2.0" HL="2.0" HLX="2.0" HMY="2.0" HP="2.0" HPE="2.0" HRB="2.0" HTA="2.0" HTHT="2.0" HTZ="2.0" HUYA="2.0" HYRE="2.0" HZNP="2.0" IAC="2.0" IAG="2.0" IBIO="2.0" IBM="2.0" ICAGY="2.0" ICL="2.0" ILMN="2.0" ING="2.0" INO="2.0" INSG="2.0" INTC="2.0" ITCI="2.0" JBLU="2.0" JETS="2.0" JKS="2.0" KDMN="2.0" KGC="2.0" KHC="2.0" KMI="2.0" KODK="2.0" KPCPF="2.0" KURA="2.0" LAC="2.0" LAKE="2.0" LLY="2.0" LODE="2.0" LTM="2.0" LUV="2.0" LVS="2.0" LYFT="2.0" MBT="2.0" MFA="2.0" MGY="2.0" MNKD="2.0" MNLO="2.0" MPW="2.0" MRNA="2.0" MRO="2.0" MSFT="2.0" MUX="2.0" MVIS="2.0" NAK="2.0" NAT="2.0" NCV="2.0" NDX="2.0" NET="2.0" NEXT="2.0" NFLX="2.0" NGD="2.0" NIO="2.0" NKLA="2.0" NLY="2.0" NRZ="2.0" NSLPQ="2.0" NTGR="2.0" NTNX="2.0" NVAX="2.0" NVCR="2.0" NVDA="2.0" NVEE="2.0" NWL="2.0" ONEM="2.0" ORTX="2.0" OSTK="2.0" PAAC="2.0" PACB="2.0" PANW="2.0" PBF="2.0" PBR="2.0" PENN="2.0" PFE="2.0" PIXY="2.0" PLAY="2.0" PLCE="2.0" PLNHF="2.0" PLNT="2.0" POR="2.0" PPD="2.0" PRTY="2.0" PULM="2.0" QGEN="2.0" QQQ="2.0" R="2.0" RCL="2.0" REED="2.0" RIG="2.0" RLFTF="2.0" ROKO="2.0" ROKU="2.0" RRC="2.0" RT="2.0" RTX="2.0" S="2.0" SABR="2.0" SAVE="2.0" SCGIX="2.0" SESN="2.0" SFET="2.0" SGLB="2.0" SHLL="2.0" SHOP="2.0" SINT="2.0" SLF="2.0" SLGG="2.0" SM="2.0" SNOW="2.0" SOL="2.0" SPPI="2.0" SPT="2.0" SPX="2.0" SPY="2.0" SQ="2.0" SRC="2.0" SRNE="2.0" SRPT="2.0" SSRM="2.0" SUMO="2.0" SURF="2.0" SWBI="2.0" SWCH="2.0" SWKS="2.0" T="2.0" TCEHY="2.0" TGT="2.0" TIF="2.0" TLRY="2.0" TMUS="2.0" TNXP="2.0" TPR="2.0" TRIL="2.0" TRQ="2.0" TSLA="2.0" TSM="2.0" TUP="2.0" TWTR="2.0" UA="2.0" UAL="2.0" UBER="2.0" UGAZ="2.0" UIS="2.0" UONE="2.0" UPS="2.0" USO="2.0" VALE="2.0" VER="2.0" VET="2.0" VICI="2.0" VIPS="2.0" VIX="2.0" VNET="2.0" VNO="2.0" VSLR="2.0" VTIQ="2.0" VYNE="2.0" VZ="2.0" WBA="2.0" WKHS="2.0" WMB="2.0" WORK="2.0" WPRT="2.0" X="2.0" XELB="2.0" XLNX="2.0" YELP="2.0" YEXT="2.0" ZBH="2.0" ZM="2.0" ZUO="2.0" ZYME="2.0"/>
                </TRG_0>
                <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-2.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AAL="-2.0" AAPL="-2.0" ABB="-2.0" ABBV="-2.0" ABIO="-2.0" ABR="-2.0" ABUS="-2.0" ACRX="-2.0" ADBE="-2.0" ADM="-2.0" ADMA="-2.0" ADPT="-2.0" AEL="-2.0" AES="-2.0" AGNC="-2.0" AGRX="-2.0" AIG="-2.0" ALK="-2.0" ALKS="-2.0" ALL="-2.0" ALLO="-2.0" AMAR="-2.0" AMD="-2.0" AMGN="-2.0" AMRS="-2.0" AMX="-2.0" AMZN="-2.0" APA="-2.0" APG="-2.0" APHA="-2.0" APPL="-2.0" APT="-2.0" ARCO="-2.0" ARLO="-2.0" ARM="-2.0" ARMK="-2.0" ARR="-2.0" ASNA="-2.0" ATVI="-2.0" AU="-2.0" AUY="-2.0" AVH="-2.0" AXGT="-2.0" AXIM="-2.0" AXP="-2.0" AYX="-2.0" AZN="-2.0" BA="-2.0" BABA="-2.0" BB="-2.0" BBBY="-2.0" BBD="-2.0" BBVA="-2.0" BBY="-2.0" BC="-2.0" BCOV="-2.0" BE="-2.0" BF="-2.0" BF.B="-2.0" BKR="-2.0" BLDR="-2.0" BOXL="-2.0" BP="-2.0" BRFS="-2.0" BRQS="-2.0" BTG="-2.0" CAKE="-2.0" CAN="-2.0" CARR="-2.0" CAT="-2.0" CCAN="-2.0" CCL="-2.0" CDE="-2.0" CGC="-2.0" CGIX="-2.0" CIDM="-2.0" CLDR="-2.0" CLVS="-2.0" CNK="-2.0" CNSP="-2.0" COMP="-2.0" CPE="-2.0" CRDF="-2.0" CRM="-2.0" CRON="-2.0" CSCO="-2.0" CTVA="-2.0" CVS="-2.0" CWH="-2.0" CYCC="-2.0" CYDY="-2.0" DAL="-2.0" DBVT="-2.0" DBX="-2.0" DDD="-2.0" DDOG="-2.0" DE="-2.0" DHT="-2.0" DLAKF="-2.0" DRAD="-2.0" DT="-2.0" DUK="-2.0" DVAX="-2.0" E="-2.0" EAT="-2.0" EBAY="-2.0" ECL="-2.0" EL="-2.0" ELAN="-2.0" ENIA="-2.0" ENLC="-2.0" ENTX="-2.0" EOG="-2.0" EPD="-2.0" EPZM="-2.0" EQNR="-2.0" EQT="-2.0" ET="-2.0" ETSY="-2.0" EVRG="-2.0" EXK="-2.0" EXPE="-2.0" FAST="-2.0" FB="-2.0" FCX="-2.0" FDX="-2.0" FISV="-2.0" FIT="-2.0" FIZZ="-2.0" FL="-2.0" FSLY="-2.0" FSM="-2.0" FTCH="-2.0" FTNT="-2.0" FTSI="-2.0" GAB="-2.0" GAU="-2.0" GE="-2.0" GFI="-2.0" GGO="-2.0" GH="-2.0" GILD="-2.0" GLPI="-2.0" GLUU="-2.0" GMED="-2.0" GOLD="-2.0" GPRO="-2.0" GRNQ="-2.0" GSK="-2.0" GSV="-2.0" HAL="-2.0" HL="-2.0" HLX="-2.0" HMY="-2.0" HP="-2.0" HPE="-2.0" HRB="-2.0" HTA="-2.0" HTHT="-2.0" HTZ="-2.0" HUYA="-2.0" HYRE="-2.0" HZNP="-2.0" IAC="-2.0" IAG="-2.0" IBIO="-2.0" IBM="-2.0" ICAGY="-2.0" ICL="-2.0" ILMN="-2.0" ING="-2.0" INO="-2.0" INSG="-2.0" INTC="-2.0" ITCI="-2.0" JBLU="-2.0" JETS="-2.0" JKS="-2.0" KDMN="-2.0" KGC="-2.0" KHC="-2.0" KMI="-2.0" KODK="-2.0" KPCPF="-2.0" KURA="-2.0" LAC="-2.0" LAKE="-2.0" LLY="-2.0" LODE="-2.0" LTM="-2.0" LUV="-2.0" LVS="-2.0" LYFT="-2.0" MBT="-2.0" MFA="-2.0" MGY="-2.0" MNKD="-2.0" MNLO="-2.0" MPW="-2.0" MRNA="-2.0" MRO="-2.0" MSFT="-2.0" MUX="-2.0" MVIS="-2.0" NAK="-2.0" NAT="-2.0" NCV="-2.0" NDX="-2.0" NET="-2.0" NEXT="-2.0" NFLX="-2.0" NGD="-2.0" NIO="-2.0" NKLA="-2.0" NLY="-2.0" NRZ="-2.0" NSLPQ="-2.0" NTGR="-2.0" NTNX="-2.0" NVAX="-2.0" NVCR="-2.0" NVDA="-2.0" NVEE="-2.0" NWL="-2.0" ONEM="-2.0" ORTX="-2.0" OSTK="-2.0" PAAC="-2.0" PACB="-2.0" PANW="-2.0" PBF="-2.0" PBR="-2.0" PENN="-2.0" PFE="-2.0" PIXY="-2.0" PLAY="-2.0" PLCE="-2.0" PLNHF="-2.0" PLNT="-2.0" POR="-2.0" PPD="-2.0" PRTY="-2.0" PULM="-2.0" QGEN="-2.0" QQQ="-2.0" R="-2.0" RCL="-2.0" REED="-2.0" RIG="-2.0" RLFTF="-2.0" ROKO="-2.0" ROKU="-2.0" RRC="-2.0" RT="-2.0" RTX="-2.0" S="-2.0" SABR="-2.0" SAVE="-2.0" SCGIX="-2.0" SESN="-2.0" SFET="-2.0" SGLB="-2.0" SHLL="-2.0" SHOP="-2.0" SINT="-2.0" SLF="-2.0" SLGG="-2.0" SM="-2.0" SNOW="-2.0" SOL="-2.0" SPPI="-2.0" SPT="-2.0" SPX="-2.0" SPY="-2.0" SQ="-2.0" SRC="-2.0" SRNE="-2.0" SRPT="-2.0" SSRM="-2.0" SUMO="-2.0" SURF="-2.0" SWBI="-2.0" SWCH="-2.0" SWKS="-2.0" T="-2.0" TCEHY="-2.0" TGT="-2.0" TIF="-2.0" TLRY="-2.0" TMUS="-2.0" TNXP="-2.0" TPR="-2.0" TRIL="-2.0" TRQ="-2.0" TSLA="-2.0" TSM="-2.0" TUP="-2.0" TWTR="-2.0" UA="-2.0" UAL="-2.0" UBER="-2.0" UGAZ="-2.0" UIS="-2.0" UONE="-2.0" UPS="-2.0" USO="-2.0" VALE="-2.0" VER="-2.0" VET="-2.0" VICI="-2.0" VIPS="-2.0" VIX="-2.0" VNET="-2.0" VNO="-2.0" VSLR="-2.0" VTIQ="-2.0" VYNE="-2.0" VZ="-2.0" WBA="-2.0" WKHS="-2.0" WMB="-2.0" WORK="-2.0" WPRT="-2.0" X="-2.0" XELB="-2.0" XLNX="-2.0" YELP="-2.0" YEXT="-2.0" ZBH="-2.0" ZM="-2.0" ZUO="-2.0" ZYME="-2.0"/>
                </TRG_1>
              </_2>
              <_3>
                <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="3.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AAL="3.0" AAPL="3.0" ABB="3.0" ABBV="3.0" ABIO="3.0" ABR="3.0" ABUS="3.0" ACRX="3.0" ADBE="3.0" ADM="3.0" ADMA="3.0" ADPT="3.0" AEL="3.0" AES="3.0" AGNC="3.0" AGRX="3.0" AIG="3.0" ALK="3.0" ALKS="3.0" ALL="3.0" ALLO="3.0" AMAR="3.0" AMD="3.0" AMGN="3.0" AMRS="3.0" AMX="3.0" AMZN="3.0" APA="3.0" APG="3.0" APHA="3.0" APPL="3.0" APT="3.0" ARCO="3.0" ARLO="3.0" ARM="3.0" ARMK="3.0" ARR="3.0" ASNA="3.0" ATVI="3.0" AU="3.0" AUY="3.0" AVH="3.0" AXGT="3.0" AXIM="3.0" AXP="3.0" AYX="3.0" AZN="3.0" BA="3.0" BABA="3.0" BB="3.0" BBBY="3.0" BBD="3.0" BBVA="3.0" BBY="3.0" BC="3.0" BCOV="3.0" BE="3.0" BF="3.0" BF.B="3.0" BKR="3.0" BLDR="3.0" BOXL="3.0" BP="3.0" BRFS="3.0" BRQS="3.0" BTG="3.0" CAKE="3.0" CAN="3.0" CARR="3.0" CAT="3.0" CCAN="3.0" CCL="3.0" CDE="3.0" CGC="3.0" CGIX="3.0" CIDM="3.0" CLDR="3.0" CLVS="3.0" CNK="3.0" CNSP="3.0" COMP="3.0" CPE="3.0" CRDF="3.0" CRM="3.0" CRON="3.0" CSCO="3.0" CTVA="3.0" CVS="3.0" CWH="3.0" CYCC="3.0" CYDY="3.0" DAL="3.0" DBVT="3.0" DBX="3.0" DDD="3.0" DDOG="3.0" DE="3.0" DHT="3.0" DLAKF="3.0" DRAD="3.0" DT="3.0" DUK="3.0" DVAX="3.0" E="3.0" EAT="3.0" EBAY="3.0" ECL="3.0" EL="3.0" ELAN="3.0" ENIA="3.0" ENLC="3.0" ENTX="3.0" EOG="3.0" EPD="3.0" EPZM="3.0" EQNR="3.0" EQT="3.0" ET="3.0" ETSY="3.0" EVRG="3.0" EXK="3.0" EXPE="3.0" FAST="3.0" FB="3.0" FCX="3.0" FDX="3.0" FISV="3.0" FIT="3.0" FIZZ="3.0" FL="3.0" FSLY="3.0" FSM="3.0" FTCH="3.0" FTNT="3.0" FTSI="3.0" GAB="3.0" GAU="3.0" GE="3.0" GFI="3.0" GGO="3.0" GH="3.0" GILD="3.0" GLPI="3.0" GLUU="3.0" GMED="3.0" GOLD="3.0" GPRO="3.0" GRNQ="3.0" GSK="3.0" GSV="3.0" HAL="3.0" HL="3.0" HLX="3.0" HMY="3.0" HP="3.0" HPE="3.0" HRB="3.0" HTA="3.0" HTHT="3.0" HTZ="3.0" HUYA="3.0" HYRE="3.0" HZNP="3.0" IAC="3.0" IAG="3.0" IBIO="3.0" IBM="3.0" ICAGY="3.0" ICL="3.0" ILMN="3.0" ING="3.0" INO="3.0" INSG="3.0" INTC="3.0" ITCI="3.0" JBLU="3.0" JETS="3.0" JKS="3.0" KDMN="3.0" KGC="3.0" KHC="3.0" KMI="3.0" KODK="3.0" KPCPF="3.0" KURA="3.0" LAC="3.0" LAKE="3.0" LLY="3.0" LODE="3.0" LTM="3.0" LUV="3.0" LVS="3.0" LYFT="3.0" MBT="3.0" MFA="3.0" MGY="3.0" MNKD="3.0" MNLO="3.0" MPW="3.0" MRNA="3.0" MRO="3.0" MSFT="3.0" MUX="3.0" MVIS="3.0" NAK="3.0" NAT="3.0" NCV="3.0" NDX="3.0" NET="3.0" NEXT="3.0" NFLX="3.0" NGD="3.0" NIO="3.0" NKLA="3.0" NLY="3.0" NRZ="3.0" NSLPQ="3.0" NTGR="3.0" NTNX="3.0" NVAX="3.0" NVCR="3.0" NVDA="3.0" NVEE="3.0" NWL="3.0" ONEM="3.0" ORTX="3.0" OSTK="3.0" PAAC="3.0" PACB="3.0" PANW="3.0" PBF="3.0" PBR="3.0" PENN="3.0" PFE="3.0" PIXY="3.0" PLAY="3.0" PLCE="3.0" PLNHF="3.0" PLNT="3.0" POR="3.0" PPD="3.0" PRTY="3.0" PULM="3.0" QGEN="3.0" QQQ="3.0" R="3.0" RCL="3.0" REED="3.0" RIG="3.0" RLFTF="3.0" ROKO="3.0" ROKU="3.0" RRC="3.0" RT="3.0" RTX="3.0" S="3.0" SABR="3.0" SAVE="3.0" SCGIX="3.0" SESN="3.0" SFET="3.0" SGLB="3.0" SHLL="3.0" SHOP="3.0" SINT="3.0" SLF="3.0" SLGG="3.0" SM="3.0" SNOW="3.0" SOL="3.0" SPPI="3.0" SPT="3.0" SPX="3.0" SPY="3.0" SQ="3.0" SRC="3.0" SRNE="3.0" SRPT="3.0" SSRM="3.0" SUMO="3.0" SURF="3.0" SWBI="3.0" SWCH="3.0" SWKS="3.0" T="3.0" TCEHY="3.0" TGT="3.0" TIF="3.0" TLRY="3.0" TMUS="3.0" TNXP="3.0" TPR="3.0" TRIL="3.0" TRQ="3.0" TSLA="3.0" TSM="3.0" TUP="3.0" TWTR="3.0" UA="3.0" UAL="3.0" UBER="3.0" UGAZ="3.0" UIS="3.0" UONE="3.0" UPS="3.0" USO="3.0" VALE="3.0" VER="3.0" VET="3.0" VICI="3.0" VIPS="3.0" VIX="3.0" VNET="3.0" VNO="3.0" VSLR="3.0" VTIQ="3.0" VYNE="3.0" VZ="3.0" WBA="3.0" WKHS="3.0" WMB="3.0" WORK="3.0" WPRT="3.0" X="3.0" XELB="3.0" XLNX="3.0" YELP="3.0" YEXT="3.0" ZBH="3.0" ZM="3.0" ZUO="3.0" ZYME="3.0"/>
                </TRG_0>
                <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-3.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AAL="-3.0" AAPL="-3.0" ABB="-3.0" ABBV="-3.0" ABIO="-3.0" ABR="-3.0" ABUS="-3.0" ACRX="-3.0" ADBE="-3.0" ADM="-3.0" ADMA="-3.0" ADPT="-3.0" AEL="-3.0" AES="-3.0" AGNC="-3.0" AGRX="-3.0" AIG="-3.0" ALK="-3.0" ALKS="-3.0" ALL="-3.0" ALLO="-3.0" AMAR="-3.0" AMD="-3.0" AMGN="-3.0" AMRS="-3.0" AMX="-3.0" AMZN="-3.0" APA="-3.0" APG="-3.0" APHA="-3.0" APPL="-3.0" APT="-3.0" ARCO="-3.0" ARLO="-3.0" ARM="-3.0" ARMK="-3.0" ARR="-3.0" ASNA="-3.0" ATVI="-3.0" AU="-3.0" AUY="-3.0" AVH="-3.0" AXGT="-3.0" AXIM="-3.0" AXP="-3.0" AYX="-3.0" AZN="-3.0" BA="-3.0" BABA="-3.0" BB="-3.0" BBBY="-3.0" BBD="-3.0" BBVA="-3.0" BBY="-3.0" BC="-3.0" BCOV="-3.0" BE="-3.0" BF="-3.0" BF.B="-3.0" BKR="-3.0" BLDR="-3.0" BOXL="-3.0" BP="-3.0" BRFS="-3.0" BRQS="-3.0" BTG="-3.0" CAKE="-3.0" CAN="-3.0" CARR="-3.0" CAT="-3.0" CCAN="-3.0" CCL="-3.0" CDE="-3.0" CGC="-3.0" CGIX="-3.0" CIDM="-3.0" CLDR="-3.0" CLVS="-3.0" CNK="-3.0" CNSP="-3.0" COMP="-3.0" CPE="-3.0" CRDF="-3.0" CRM="-3.0" CRON="-3.0" CSCO="-3.0" CTVA="-3.0" CVS="-3.0" CWH="-3.0" CYCC="-3.0" CYDY="-3.0" DAL="-3.0" DBVT="-3.0" DBX="-3.0" DDD="-3.0" DDOG="-3.0" DE="-3.0" DHT="-3.0" DLAKF="-3.0" DRAD="-3.0" DT="-3.0" DUK="-3.0" DVAX="-3.0" E="-3.0" EAT="-3.0" EBAY="-3.0" ECL="-3.0" EL="-3.0" ELAN="-3.0" ENIA="-3.0" ENLC="-3.0" ENTX="-3.0" EOG="-3.0" EPD="-3.0" EPZM="-3.0" EQNR="-3.0" EQT="-3.0" ET="-3.0" ETSY="-3.0" EVRG="-3.0" EXK="-3.0" EXPE="-3.0" FAST="-3.0" FB="-3.0" FCX="-3.0" FDX="-3.0" FISV="-3.0" FIT="-3.0" FIZZ="-3.0" FL="-3.0" FSLY="-3.0" FSM="-3.0" FTCH="-3.0" FTNT="-3.0" FTSI="-3.0" GAB="-3.0" GAU="-3.0" GE="-3.0" GFI="-3.0" GGO="-3.0" GH="-3.0" GILD="-3.0" GLPI="-3.0" GLUU="-3.0" GMED="-3.0" GOLD="-3.0" GPRO="-3.0" GRNQ="-3.0" GSK="-3.0" GSV="-3.0" HAL="-3.0" HL="-3.0" HLX="-3.0" HMY="-3.0" HP="-3.0" HPE="-3.0" HRB="-3.0" HTA="-3.0" HTHT="-3.0" HTZ="-3.0" HUYA="-3.0" HYRE="-3.0" HZNP="-3.0" IAC="-3.0" IAG="-3.0" IBIO="-3.0" IBM="-3.0" ICAGY="-3.0" ICL="-3.0" ILMN="-3.0" ING="-3.0" INO="-3.0" INSG="-3.0" INTC="-3.0" ITCI="-3.0" JBLU="-3.0" JETS="-3.0" JKS="-3.0" KDMN="-3.0" KGC="-3.0" KHC="-3.0" KMI="-3.0" KODK="-3.0" KPCPF="-3.0" KURA="-3.0" LAC="-3.0" LAKE="-3.0" LLY="-3.0" LODE="-3.0" LTM="-3.0" LUV="-3.0" LVS="-3.0" LYFT="-3.0" MBT="-3.0" MFA="-3.0" MGY="-3.0" MNKD="-3.0" MNLO="-3.0" MPW="-3.0" MRNA="-3.0" MRO="-3.0" MSFT="-3.0" MUX="-3.0" MVIS="-3.0" NAK="-3.0" NAT="-3.0" NCV="-3.0" NDX="-3.0" NET="-3.0" NEXT="-3.0" NFLX="-3.0" NGD="-3.0" NIO="-3.0" NKLA="-3.0" NLY="-3.0" NRZ="-3.0" NSLPQ="-3.0" NTGR="-3.0" NTNX="-3.0" NVAX="-3.0" NVCR="-3.0" NVDA="-3.0" NVEE="-3.0" NWL="-3.0" ONEM="-3.0" ORTX="-3.0" OSTK="-3.0" PAAC="-3.0" PACB="-3.0" PANW="-3.0" PBF="-3.0" PBR="-3.0" PENN="-3.0" PFE="-3.0" PIXY="-3.0" PLAY="-3.0" PLCE="-3.0" PLNHF="-3.0" PLNT="-3.0" POR="-3.0" PPD="-3.0" PRTY="-3.0" PULM="-3.0" QGEN="-3.0" QQQ="-3.0" R="-3.0" RCL="-3.0" REED="-3.0" RIG="-3.0" RLFTF="-3.0" ROKO="-3.0" ROKU="-3.0" RRC="-3.0" RT="-3.0" RTX="-3.0" S="-3.0" SABR="-3.0" SAVE="-3.0" SCGIX="-3.0" SESN="-3.0" SFET="-3.0" SGLB="-3.0" SHLL="-3.0" SHOP="-3.0" SINT="-3.0" SLF="-3.0" SLGG="-3.0" SM="-3.0" SNOW="-3.0" SOL="-3.0" SPPI="-3.0" SPT="-3.0" SPX="-3.0" SPY="-3.0" SQ="-3.0" SRC="-3.0" SRNE="-3.0" SRPT="-3.0" SSRM="-3.0" SUMO="-3.0" SURF="-3.0" SWBI="-3.0" SWCH="-3.0" SWKS="-3.0" T="-3.0" TCEHY="-3.0" TGT="-3.0" TIF="-3.0" TLRY="-3.0" TMUS="-3.0" TNXP="-3.0" TPR="-3.0" TRIL="-3.0" TRQ="-3.0" TSLA="-3.0" TSM="-3.0" TUP="-3.0" TWTR="-3.0" UA="-3.0" UAL="-3.0" UBER="-3.0" UGAZ="-3.0" UIS="-3.0" UONE="-3.0" UPS="-3.0" USO="-3.0" VALE="-3.0" VER="-3.0" VET="-3.0" VICI="-3.0" VIPS="-3.0" VIX="-3.0" VNET="-3.0" VNO="-3.0" VSLR="-3.0" VTIQ="-3.0" VYNE="-3.0" VZ="-3.0" WBA="-3.0" WKHS="-3.0" WMB="-3.0" WORK="-3.0" WPRT="-3.0" X="-3.0" XELB="-3.0" XLNX="-3.0" YELP="-3.0" YEXT="-3.0" ZBH="-3.0" ZM="-3.0" ZUO="-3.0" ZYME="-3.0"/>
                </TRG_1>
              </_3>
            </TRADE>
          </ACT_TRD_CELL0>
          <ACT_TRD_CELL1 ROWSPANELWEIGHT="1.0" ROWWEIGHT0="1.0" ROWWEIGHT1="1.0" SELECTED_TYPE="CHART" SIDEBAR_IS_ACTIVE="true" SYMBOL="EVRG" SYMBOL_GROUP="1" TRADE_BUTTONS_MIGRATED="true">
            <ACTIVETRADER CELL_IDS="POSITION_BREAKDOWN;NET_POSITION;AVERAGE_PRICE;PL_OPEN;PL_DAY" COLUMNS="TRADE_AMOUNT:100:,BUY_ORDER:150:,BIDSIZE:60:,PRICE:100:,ASKSIZE:60:,SELL_ORDER:150:" ENABLED="true" SHOW_STUDY_MARKERS="false" SYMBOL="AAL" SYMBOL_GROUP="1" VERTICAL="false" VISIBLE="false" WEIGHT="2.0" ZOOMING_STEPS="1">
              <TRADE_BUTTONS_CONFIG CONFIGURATION_NAME="SINGLE" ORDER_RULES_SET="STOCK" ORDER_TYPE="LIMIT" OS_AUTO="false" OS_EXPANDED="false" OS_TIF="DAY" QTY="100.0" TEMPLATE="SINGLE" TRADE_BUTTONS="BUY_MKT;SELL_MKT;MULTI_CANCEL;REVERSE;FLAT;SECOND_LINE;QUANTITY_WITH_BUTTONS;ORDER_TEMPLATE;AUTO_SEND;ORDER_SETUP">
                <OCO_STOP>
                  <TRG_0 TRG_ENBL="true" TRG_LINK="ASK_BID" TRG_OFFSET_MODE="TICK" TRG_OT="STOP" TRG_SETUP="10.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL AAL="10.0" AAPL="10.0" FDX="10.0" UAL="10.0"/>
                  </TRG_0>
                </OCO_STOP>
                <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="1.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AAL="1.0" AAPL="1.0" FDX="1.0" UAL="1.0"/>
                </TRG_0>
                <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-1.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AAL="-1.0" AAPL="-1.0" FDX="-1.0" UAL="-1.0"/>
                </TRG_1>
                <_2>
                  <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="2.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL AAL="2.0" AAPL="2.0" FDX="2.0" UAL="2.0"/>
                  </TRG_0>
                  <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-2.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL AAL="-2.0" AAPL="-2.0" FDX="-2.0" UAL="-2.0"/>
                  </TRG_1>
                </_2>
                <_3>
                  <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="3.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL AAL="3.0" AAPL="3.0" FDX="3.0" UAL="3.0"/>
                  </TRG_0>
                  <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-3.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL AAL="-3.0" AAPL="-3.0" FDX="-3.0" UAL="-3.0"/>
                  </TRG_1>
                </_3>
              </TRADE_BUTTONS_CONFIG>
            </ACTIVETRADER>
            <BIG_BUTTONS VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <CHART CONFIGURATION="@v8@%0:com.devexperts.toschart.model,1:com.devexperts.tos.chartdata,2:com.devexperts.tos.thinkscript.data,3:java.awt,4:com.devexperts.toschart.control.subgraph,5:com.devexperts.toschart.elstudies,6:com.devexperts.toschart.script%owner{chartAggregationPeriods:ChartAggregationPeriodArray0{17::ChartAggregationPeriod0,14::ChartAggregationPeriod1},chartAggregationPeriods=@ChartAggregationPeriodArray0}#com.devexperts.toschart.core.ChartModel{encodedMixinsState=&quot;{\&quot;common\&quot;:{\&quot;DRAWING_SETS\&quot;:\&quot;{}\&quot;},\&quot;state_props\&quot;:{\&quot;state_type\&quot;:\&quot;REGULAR\&quot;},\&quot;monkey_bars_exp\&quot;:{\&quot;LikefolioMixin\&quot;:\&quot;{\\\&quot;paintingSettings\\\&quot;:{\\\&quot;neutralSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;positiveSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;negativeSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;sentimentSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true}},\\\&quot;shownDivisions\\\&quot;:[],\\\&quot;allDivisions\\\&quot;:[]}\&quot;},\&quot;monkey_bars\&quot;:{},\&quot;seasonality\&quot;:{},\&quot;regular\&quot;:{\&quot;DescriberMixin\&quot;:\&quot;{\\\&quot;visibility\\\&quot;:\\\&quot;HIDE_PANEL\\\&quot;,\\\&quot;studiesMode\\\&quot;:\\\&quot;HIDE_STUDIES\\\&quot;}\&quot;,\&quot;LikefolioMixin\&quot;:\&quot;{\\\&quot;paintingSettings\\\&quot;:{\\\&quot;neutralSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;positiveSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;negativeSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;sentimentSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true}},\\\&quot;shownDivisions\\\&quot;:[],\\\&quot;allDivisions\\\&quot;:[]}\&quot;}}&quot;,groupId=&quot;default&quot;,styleSettings{chartAggregationSettings{monkeyChartsAggSettings=!%0.TimeFrameAggregationSettings.createTickOrTimeAggregation(!%1.ChartRange.findByCode(&quot;DAY3&quot;),@ChartAggregationPeriod0),timeAggregationSettings=!%0.TimeFrameAggregationSettings.createTickOrTimeAggregation(!%1.ChartRange.findByCode(&quot;DAY5&quot;),@ChartAggregationPeriod1)},commonStyleSettings{colorSettings{backgroundColor=#%2.CustomColor(#%3.Color(0,0,0,255)),monkeyProfileTypeColors.defaultRowHeight=&lt;F,mpExpandedTypeColors.defaultRowHeight=&lt;F,volumeColor=#%2.CustomColor(#%3.Color(0,0,0,255))},expansion.right=115,fitOrdersToScreen=&lt;T,keepPriceZoom=&lt;T,leftAxisRegulator{maxValue=805926.78632479d,minValue=-33029.78632479d},manualAxisRegulator{maxValue=54.34830688d,minValue=47.9437037d},previousRightExpansion=115,shortCuts{^(&quot;Time Zone&quot;,&lt;F),^(&quot;Show Expiration Friday &quot;,&lt;F),^(&quot;Keep Price Zoom&quot;,&lt;F),^(&quot;enableLeftAxis&quot;,&lt;F),!get:Boolean0(&quot;Chart mode&quot;),^(&quot;Fit expected price ranges&quot;,@Boolean0),^(&quot;emphasizeDigitMPExpanded&quot;,&lt;F),^(&quot;showWicksCandleTrend&quot;,&lt;F),^(&quot;highlightEarnings&quot;,&lt;F),^(&quot;synchronizeCrosshair&quot;,&lt;F),^(&quot;myToolsMode&quot;,&lt;F),^(&quot;seasonalityStyle&quot;,&lt;F),^(&quot;Show Price Subgraph&quot;,&lt;F),^(&quot;closePriceLevel&quot;,&lt;F),^(&quot;Color Volume As Symbol Ticks&quot;,&lt;F),^(&quot;highlightPhantomRBars&quot;,&lt;F),^(&quot;Cross type &quot;,&lt;F),^(&quot;Fit Studies to Screen&quot;,@Boolean0),^(&quot;Chart type &quot;,&lt;F),^(&quot;Fit Orders&quot;,&lt;F),^(&quot;Bubbles as Percentage&quot;,&lt;F),^(&quot;hideStatusString&quot;,&lt;F),^(&quot;Show Studies &quot;,&lt;F),^(&quot;showWicksHeikinAshi&quot;,&lt;F),^(&quot;Alerts&quot;,&lt;F),^(&quot;Chart scale&quot;,&lt;F),^(&quot;Fit High/Low&quot;,&lt;F),^(&quot;Orders&quot;,&lt;F),^(&quot;Use Log Scale &quot;,&lt;F),^(&quot;Fit Study Markers to Screen&quot;,@Boolean0),^(&quot;Fit Alerts&quot;,&lt;F),^(&quot;Fit patterns&quot;,&lt;F),^(&quot;Percentage View&quot;,&lt;F),^(&quot;Make Auto Zoom &quot;,&lt;F),^(&quot;Show Year Marking Line&quot;,&lt;F),^(&quot;Show Rollover Line&quot;,&lt;F),^(&quot;Show High/Low Bubbles &quot;,&lt;F),^(&quot;Snap mode&quot;,&lt;F),^(&quot;highlightStudies&quot;,&lt;F),^(&quot;Overlapped Volume&quot;,&lt;F),^(&quot;Show Symbol Logo&quot;,&lt;F),^(&quot;Show Last Price Bubble &quot;,&lt;F),^(&quot;emphasizeDigitMP&quot;,&lt;F),^(&quot;Show grid&quot;,@Boolean0),^(&quot;showWicksCandle&quot;,&lt;F),^(&quot;Show trades&quot;,&lt;F),^(&quot;highlightSeasons&quot;,&lt;F),^(&quot;Extend Order/Alert Line to Left&quot;,&lt;F)},showGrid=&lt;F,showTradeExecution=&lt;T,step=3.225806451612903d},forexStyleSettings.shortCuts.^(&quot;Show Volume Subgraph&quot;,&lt;F),futuresStyleSettings{highlightExtendedHours=&lt;T,shortCuts{^(&quot;adjustForContractChanges&quot;,&lt;F),^(&quot;Show Open Interest&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,&lt;F),^(&quot;showContractChangeEvents&quot;,&lt;F),^(&quot;futures_daily_close_price&quot;,&lt;F),^(&quot;Show Options&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,&lt;F),^(&quot;startAtMarketOpen&quot;,&lt;F)},tradingHoursOnly=&lt;T},optionsStyleSettings{shortCuts{^(&quot;Show Open Interest&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,&lt;F),^(&quot;Show Theo Price&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,&lt;F),^(&quot;startAtMarketOpen&quot;,&lt;F)},startAggregationAtMarketOpen=&lt;F},otherStyleSettings{shortCuts{^(&quot;Show Social Sentiment&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,@Boolean0),^(&quot;Show Options&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,&lt;F),^(&quot;Show Corporate Actions&quot;,&lt;F),^(&quot;Show CNBC Video&quot;,&lt;F),^(&quot;startAtMarketOpen&quot;,@Boolean0),^(&quot;adjustForDividends&quot;,&lt;F)},startAggregationAtMarketOpen=&lt;F,tradingHoursOnly=&lt;T},setsIdentifiers.styleSetName=&quot;Style name&quot;},subgraphModels{!get(#%4.SubgraphId(&quot;Symbol&quot;)){height=491,storableIndicators{+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;input averageType = AverageType.SIMPLE;\ninput showMovingAvgLable =Yes;\ninput price = close;\ninput length1 = 10;\ninput length2 = 20;\ninput length3 = 50;\ninput length4 = 200;\ninput displace = 0;\ninput showAvg3 = yes;\n\ninput showAvg4 = yes;\n\ninput showBreakoutSignals = no;\n\n\n\n\n#def AvgExp = ExpAverage(price[-displace], length);\nplot Avg1 = MovingAverage(averageType, price[-displace], length1);\nplot Avg2 = MovingAverage(averageType, price[-displace], length2);\nplot Avg3 = MovingAverage(averageType, price[-displace], length3);\nplot Avg4 = MovingAverage(averageType, price[-displace], length4);\n\nAvg3.setHiding(!showAvg3);\nAvg4.setHiding(!showAvg4);\n\n\n#plot SMA ( Average(price[-displace], length);\nplot UpSignal = price crosses above Avg1;\nplot DownSignal = price crosses below Avg1;\n#Add Label\n\nAddLabel(showMovingAvgLable, \&quot;  \&quot;+ length1+ \&quot;MAvg\&quot; ,Avg1.TakeValueColor ());\nAddLabel(showMovingAvgLable,  astext(Avg1), if Avg1&lt; close then Color.LIGHT_GREEN else if Avg1&gt; close then color.light_red else Color.Light_GRAY);\n\n\nAddLabel(showMovingAvgLable, \&quot;  \&quot;+ length2+ \&quot;MAvg\&quot; ,Avg2.TakeValueColor ());\nAddLabel(showMovingAvgLable,  astext(Avg2), if Avg2&lt; close then Color.LIGHT_GREEN else if Avg2&gt; close then color.light_red else Color.Light_GRAY);\n\nAddLabel(showMovingAvgLable, \&quot;  \&quot;+ length3+ \&quot;MAvg\&quot; ,Avg3.TakeValueColor ());\nAddLabel(showMovingAvgLable,  astext(Avg3), if Avg3&lt; close then Color.LIGHT_GREEN else if Avg3&gt; close then color.light_red else Color.Light_GRAY);\n\n\nAddLabel(showMovingAvgLable, \&quot;  \&quot;+ length4+ \&quot;MAvg\&quot; ,Avg4.TakeValueColor ());\nAddLabel(showMovingAvgLable,  astext(Avg4), if Avg4&lt; close then Color.LIGHT_GREEN else if Avg4&gt; close then color.light_red else Color.Light_GRAY);\n\n\n# Avg1.TakeValueColor ()\n#AddLabel(showMovingAvgLable,  length1+ \&quot;MAvg \&quot; +astext(Avg1) ,Avg1.TakeValueColor ());\n#AddLabel(showMovingAvgLable, astext(Avg1), if Avg1&lt; close then Color.GREEN else if Avg1&gt; close then color.light_red else Color.Light_GRAY);\n\n\n\n#AddLabel(showMovingAvgLable,  length2+ \&quot;MAvg \&quot;+ astext(Avg2) ,Avg2.TakeValueColor ());\n#AddLabel(showMovingAvgLable,  astext(Avg2), if Avg2&lt; close then Color.GREEN else if Avg2&gt; close then color.light_red else Color.Light_GRAY);\n#AddLabel(showMovingAvgLable,  length3+ \&quot;MAvg \&quot; +astext(Avg3),Avg3.TakeValueColor ());\n#AddLabel(showMovingAvgLable, astext(Avg3), if Avg3&lt; close then Color.GREEN else if Avg3&gt; close then color.light_red else Color.Light_GRAY);\n#AddLabel(showMovingAvgLable,  length4+ \&quot;MAvg \&quot; +astext(Avg4),Avg4.TakeValueColor ());\n#AddLabel(showMovingAvgLable, astext(Avg4), if Avg4&lt; close then Color.GREEN else if Avg4&gt; close then color.light_red else Color.Light_GRAY);\ndef bub;\nif !IsNaN(close[-1])\nthen {\n\n    bub = no;#Double.NaN;\n    \n} else {\nbub = yes;\n    \n}\ndef bubb = if  BarNumber() == 20  then yes else no;\n\ninput Show_Mavg_Key=no;\n\n#AddChartBubble(bub, Avg1, \&quot;MAvg\&quot;+ length1+ \&quot;= \&quot; + astext(Avg1), Color.LIGHT_ORANGE, no);\nAddChartBubble(bub and Show_Mavg_Key, Avg1, \&quot;MAvg\&quot;+ length1+ \&quot;= \&quot; + astext(Avg1), Avg1.TakeValueColor (), yes);\nAddChartBubble(bub and Show_Mavg_Key, Avg2, \&quot;MAvg\&quot;+ length2+ \&quot;= \&quot; + astext(Avg2), Avg2.TakeValueColor (), yes);\nAddChartBubble(bub and Show_Mavg_Key, Avg3, \&quot;MAvg\&quot;+ length3+ \&quot;= \&quot; + astext(Avg3), Avg3.TakeValueColor (), yes);\nAddChartBubble(bub and Show_Mavg_Key, Avg4, \&quot;MAvg\&quot;+ length4+ \&quot;= \&quot; + astext(Avg4), Avg4.TakeValueColor (), yes);\n\n#Vwap\ninput vwapTimeFrame = {default DAY, WEEK, MONTH};\ninput numDevDn = -2.0;\ninput numDevUp = 2.0;\n\n\ndef cap = getAggregationPeriod();\ndef errorInAggregation =\n    vwapTimeFrame == vwapTimeFrame.DAY and cap &gt;= AggregationPeriod.WEEK or\n    vwapTimeFrame == vwapTimeFrame.WEEK and cap &gt;= AggregationPeriod.MONTH;\nassert(!errorInAggregation, \&quot;timeFrame should be not less than current chart aggregation period\&quot;);\n\ndef yyyyMmDd = getYyyyMmDd();\ndef periodIndx;\nswitch (vwapTimeFrame) {\ncase DAY:\n    periodIndx = yyyyMmDd;\ncase WEEK:\n    periodIndx = Floor((daysFromDate(first(yyyyMmDd)) + getDayOfWeek(first(yyyyMmDd))) / 7);\ncase MONTH:\n    periodIndx = roundDown(yyyyMmDd / 100, 0);\n}\ndef isPeriodRolled = compoundValue(1, periodIndx != periodIndx[1], yes);\n\ndef volumeSum;\ndef volumeVwapSum;\ndef volumeVwap2Sum;\n\nif (isPeriodRolled) {\n    volumeSum = volume;\n    volumeVwapSum = volume * vwap;\n    volumeVwap2Sum = volume * Sqr(vwap);\n} else {\n    volumeSum = compoundValue(1, volumeSum[1] + volume, volume);\n    volumeVwapSum = compoundValue(1, volumeVwapSum[1] + volume * vwap, volume * vwap);\n    volumeVwap2Sum = compoundValue(1, volumeVwap2Sum[1] + volume * Sqr(vwap), volume * Sqr(vwap));\n}\ndef VWprice = volumeVwapSum / volumeSum;\ndef deviation = Sqrt(Max(volumeVwap2Sum / volumeSum - Sqr(VWprice), 0));\n\nplot VWAP = VWprice;\nplot UpperBand = VWprice + numDevUp * deviation;\nplot LowerBand = VWprice + numDevDn * deviation;\n\nVWAP.setDefaultColor(getColor(0));\nUpperBand.setDefaultColor(getColor(0));\nLowerBand.setDefaultColor(getColor(0));\n\nUpperBand.SetStyle(Curve.MEDIUM_DASH);\nLowerBand.SetStyle(Curve.MEDIUM_DASH);\n\n\n\nUpperBand.hide();\nLowerBand.hide();\n\n#vwap\n\nAddLabel(yes, \&quot;VWAP= \&quot; + astext(VWAP), if VWAP&lt; close then Color.LIGHT_GREEN else if VWAP&gt; close then color.LIGHT_red else Color.GRAY);\n#AddLabel(yes, \&quot;VWAP= \&quot; + astext(VWAP), Color.White);\ndef vwDif= close- VWAP;\nAddLabel(yes, \&quot; \&quot;+astext(vwDif), if vwDif&gt; 0 then Color.LIGHT_GREEN else if vwDif&lt; 0 then color.LIGHT_red else Color.GRAY);\n\n#RSI\ninput overBoughtRsi = 70;\ninput overSoldRsi = 30;\ninput rsiLength = 14;\ninput rsiPrice = close;\ndef rsi_val = reference RSI(length = rsiLength, price = rsiPrice );\n####\n\n\n\nAddLabel(yes, \&quot;RSI = \&quot; + astext(rsi_val) , if rsi_val &gt; overBoughtRsi  then Color.RED else if rsi_val &lt; overSoldRsi then  Color.GREEN else Color.light_GRAY);\n\n\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\nAvg1.SetDefaultColor(color.white);\nAvg2.SetDefaultColor(color.cyan);\nAvg3.SetDefaultColor(color.light_red);\nAvg4.SetDefaultColor(color.pink);\n#avg3.SetStyle(Curve.MEDIUM_DASH);\n#avg4.SetStyle(Curve.MEDIUM_DASH);\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);\n&quot;,name=&quot;_686a0d47_2dc7_4466_91d6_64cf4907bd2a&quot;})),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# Upper study of Buy the Dip indicator\n# Assembled by BenTen at UseThinkScript.com\n# Version 1.0\n# &lt;INSTRUCTION&gt;\n# Get support at: https://usethinkscript.com/forums/buy-the-dip.32/\n# &lt;NOTES&gt;\n#Start\n#hint:&lt;b&gt;Buy The Dip&lt;/b&gt;\n# Based on the concept of \&quot;Synethetic VIX\&quot; by Larry Williams\n# This software is licensed for individual use only.\n# NOT FOR REDISTRIBUTION *PRIVATE/CONFIDENTIAL*\n# Copyright (c) 2020 useThinkScript LLC\n# Include MTF moving average that you can find here: https://usethinkscript.com/threads/multi-timeframe-mtf-moving-average-indicator-for-thinkorswim.135/\ninput aggregationPeriod1 = AggregationPeriod.THIRTY_MIN;\ninput aggregationPeriod2 = AggregationPeriod.HOUR;\ninput aggregationPeriod3 = AggregationPeriod.FOUR_HOURS;\ninput lenBTD = 22;\ninput mAvgPeriod = AggregationPeriod.DAY;\ninput AvgType = AverageType.SIMPLE;\ninput price = FundamentalType.CLOSE;#{default CLOSE, open};\ninput useCloseForBTD = yes;\ndef showMmovingAverage = no;\ninput bubbles = yes;\ninput showMeter = yes;\ninput showMtfMeter = yes;\ninput AutoHideMtfMeter = Yes;\n\ninput showMovAvgLabels = yes;\n\ninput short_len = 50;\ninput long_len = 200;\ninput z = 0.1;\ndef Zeroline = z;\n\n\n\n\n\n# MTFindicator\n# MTF 1\ndef h = high;\ndef c = if useCloseForBTD then close else price;\n\n\n# MTF 2\ndef h2 = high(period = aggregationPeriod1);\ndef c2 = if useCloseForBTD then  close(period = aggregationPeriod1) else open(period = aggregationPeriod1);\n\n# MTF 3\n\ndef h3 = high(period = aggregationPeriod2);\ndef c3 = if useCloseForBTD then  close(period = aggregationPeriod2) else open(period = aggregationPeriod2);\n\n# MTF 4\n\ndef h4 = high(period = aggregationPeriod3);\ndef c4 = if useCloseForBTD then  close(period = aggregationPeriod2) else open(period = aggregationPeriod3);\n\n# indicator\ndef BTD = ((h - Lowest(close[1], lenBTD)) / Lowest(c[1], lenBTD)) * 100;\ndef BTD2 = ((h2 - Lowest(c2[1], lenBTD)) / Lowest(c2[1], lenBTD)) * 100;\ndef BTD3 = ((h3 - Lowest(c3[1], lenBTD)) / Lowest(c3[1], lenBTD)) * 100;\ndef BTD4 = ((h4 - Lowest(c4[1], lenBTD)) / Lowest(c4[1], lenBTD)) * 100;\n\n\n\n\n#\n#RSI\n#RSI\n\ninput overBoughtRsi = 70;\ninput overSoldRsi = 35;\ninput rsiLength = 14;\ninput rsiCondition = yes;\n#input rsiPrice = close;\ndef rsi1 = reference RSI(length = rsiLength, price = c );\ndef rsi2 = reference RSI(length = rsiLength, price = c2 );\ndef rsi3 = reference RSI(length = rsiLength, price = c3 );\ndef rsi4 = reference RSI(length = rsiLength, price = c4 );\n####\n\n\ndef rsiLogic1 = if (rsiCondition) then rsi1 &lt;= overSoldRsi else yes;\ndef rsiLogic2 = if (rsiCondition) then rsi2 &lt;= overSoldRsi else yes;\ndef rsiLogic3 = if (rsiCondition) then rsi3 &lt;= overSoldRsi else yes;\ndef rsiLogic4 = if (rsiCondition) then rsi4 &lt;= overSoldRsi else yes;\n\n\n\n#moving Average\n\n\ndef AVG1 = MovingAverage(AvgType, close(period = mAvgPeriod), short_len);\ndef AVG2 = MovingAverage(AvgType, close(period = mAvgPeriod), long_len);\ndef EMA_condition = close &gt; AVG1 or close &gt; AVG2;\nplot average1 = if showMmovingAverage then AVG1 else Double.NaN;\nplot average2 = if showMmovingAverage then AVG2 else Double.NaN;\n\n\n#signal\ndef BTDsignal = BTD crosses below Zeroline and rsiLogic1 and EMA_condition;\ndef BTDsignal2 = BTD2 crosses below Zeroline and rsiLogic2 and EMA_condition;\ndef BTDsignal3 = BTD3 crosses below Zeroline and rsiLogic3 and EMA_condition;\ndef BTDsignal4 = BTD4 crosses below Zeroline and rsiLogic4 and EMA_condition;\n\n\n# Plot indicator\n#def buythedip = BTD;\n#def Zeroline = z;\n\n#plot signal2_above = buythedip crosses above Zeroline;\n\n# Customize higher timeframe moving averages\naverage1.AssignValueColor(Color.CYAN);\naverage2.AssignValueColor(Color.PINK);\n\nAddLabel(showMeter   , Concat(\&quot;BTD = \&quot;, AsText( BTD)), Color.WHITE);\nAddLabel(showMtfMeter and (!AutoHideMtfMeter or BTD2 &lt; 1 ), Concat(\&quot;BTD2 = \&quot;, AsText( BTD2)), Color.LIGHT_GREEN);\nAddLabel(showMtfMeter  and (!AutoHideMtfMeter or BTD3 &lt; 1), Concat(\&quot;BTD3 = \&quot;, AsText( BTD3)), Color.ORANGE);\nAddLabel(showMtfMeter  and (!AutoHideMtfMeter or BTD4 &lt; 1), Concat(\&quot;BTD4 = \&quot;, AsText( BTD4)), Color.LIGHT_GREEN);\nAddLabel(showMovAvgLabels and yes, Concat(\&quot;50MA= \&quot;, AsText( AVG1)), Color.CYAN);\nAddLabel(showMovAvgLabels and yes, Concat(\&quot;200MA= \&quot;, AsText( AVG2)), Color.PINK);\n\nAddChartBubble(bubbles and BTDsignal and EMA_condition, low, \&quot;BTD1^ \&quot; + AsText(close) + \&quot; rsi=\&quot; + AsText(rsi1), Color.LIGHT_GREEN, no);#Buy the Dip\n\nAddChartBubble(bubbles and BTDsignal2 and EMA_condition, low, \&quot;BTD2^ \&quot; + AsText(close) + \&quot; rsi=\&quot; + AsText(rsi2), Color.GREEN, no);#Buy the Dip\nAddChartBubble(bubbles and BTDsignal3 and EMA_condition, low, \&quot;BTD3^ \&quot; + AsText(close) + \&quot; rsi=\&quot; + AsText(rsi3), Color.LIGHT_ORANGE, no);#Buy the Dip\nAddChartBubble(bubbles and BTDsignal4 and EMA_condition, low, \&quot;BTD4^ \&quot; + AsText(close) + \&quot;  rsi=\&quot; + AsText(rsi4), Color.YELLOW, no);#Buy the Dip\n\ndef timeFrame = GetAggregationPeriod();\n#end&quot;,name=&quot;_1919350f_52d9_4911_8a8e_c23a6cc398a3&quot;}))}},!get(#%4.SubgraphId(&quot;Volume&quot;)){height=80},^(#%4.SubgraphId(&quot;Subgraph1&quot;),#%4.SubgraphStorableModel{height=285,storableIndicators.+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# RSI-Laguerre Self Adjusting With Fractal Energy Gaussian Price Filter\n# Mobius\n# V01.12.2016\n# Both Fractal Energy and RSI are plotted. RSI in cyan and FE in yellow. Look for trend exhaustion in the FE and a reversal of RSI or Price compression in FE and an RSI reversal.\n\ndeclare lower;\n\n#Inputs: \ninput nFE = 8;#hint nFE: length for Fractal Energy calculation. \ninput AlertOn = no;\ninput Glength  = 13;\ninput betaDev =  8;\ninput data = close;\n\ndef w = (2 * Double.Pi / Glength);\ndef beta = (1 - Cos(w)) / (Power(1.414, 2.0 / betaDev) - 1 );\ndef alpha = (-beta + Sqrt(beta * beta + 2 * beta));\ndef Go = Power(alpha, 4) * open + \n             4 * (1 – alpha) * Go[1] – 6 * Power( 1 - alpha, 2 ) * Go[2] + \n             4 * Power( 1 - alpha, 3 ) * Go[3] - Power( 1 - alpha, 4 ) * Go[4];\ndef Gh = Power(alpha, 4) * high + \n             4 * (1 – alpha) * Gh[1] – 6 * Power( 1 - alpha, 2 ) * Gh[2] + \n             4 * Power( 1 - alpha, 3 ) * Gh[3] - Power( 1 - alpha, 4 ) * Gh[4];\ndef Gl = Power(alpha, 4) * low + \n             4 * (1 – alpha) * Gl[1] – 6 * Power( 1 - alpha, 2 ) * Gl[2] + \n             4 * Power( 1 - alpha, 3 ) * Gl[3] - Power( 1 - alpha, 4 ) * Gl[4];\ndef Gc = Power(alpha, 4) * data + \n             4 * (1 – alpha) * Gc[1] – 6 * Power( 1 - alpha, 2 ) * Gc[2] + \n             4 * Power( 1 - alpha, 3 ) * Gc[3] - Power( 1 - alpha, 4 ) * Gc[4];\n# Variables:\ndef o;\ndef h;\ndef l;\ndef c;\ndef CU1;\ndef CU2;\ndef CU;\ndef CD1;\ndef CD2;\ndef CD;\ndef L0;\ndef L1;\ndef L2;\ndef L3;\nplot RSI;\nplot OS;\nplot OB;\nplot M;\n\n# Calculations\no = (Go + Gc[1]) / 2;\nh = Max(Gh, Gc[1]);\nl = Min(Gl, Gc[1]);\nc = (o + h + l + Gc) / 4;\nplot gamma = Log(Sum((Max(Gh, Gc[1]) - Min(Gl, Gc[1])), nFE) / \n        (Highest(gh, nFE) - Lowest(Gl, nFE)))\n            / Log(nFE);\ngamma.SetDefaultColor(Color.Yellow);\nL0 = (1 – gamma) * Gc + gamma * L0[1];\nL1 = -gamma * L0 + L0[1] + gamma * L1[1];\nL2 = -gamma * L1 + L1[1] + gamma * L2[1];\nL3 = -gamma * L2 + L2[1] + gamma * L3[1];\nif L0 &gt;= L1\nthen {\n    CU1 = L0 - L1;\n    CD1 = 0;\n} else {\n    CD1 = L1 - L0;\n    CU1 = 0;\n}\nif L1 &gt;= L2\nthen {\n    CU2 = CU1 + L1 - L2;\n    CD2 = CD1;\n} else {\n    CD2 = CD1 + L2 - L1;\n    CU2 = CU1;\n}\nif L2 &gt;= L3\nthen {\n    CU = CU2 + L2 - L3;\n    CD = CD2;\n} else {\n    CU = CU2;\n    CD = CD2 + L3 - L2;\n}\n\nRSI = if CU + CD &lt;&gt; 0 then CU / (CU + CD) else 0;\nRSI.SetDefaultColor(Color.Cyan);\nOS = if IsNaN(c) then Double.NaN else 0.2;\nOS.SetDefaultColor(Color.RED);\nOS.HideBubble();\nOS.HideTitle();\nOB = if IsNaN(c) then Double.NaN else 0.8;\nOB.SetDefaultColor(Color.GREEN);\nOB.HideBubble();\nOB.HideTitle();\nM = if IsNaN(c) then Double.NaN else 0.5;\nM.SetStyle(Curve.long_dash);\nM.SetDefaultColor(Color.Gray);\nM.HideBubble();\nM.HideTitle();\nplot FEh = if isNaN(c) then double.nan else .618;\nFEh.SetStyle(Curve.short_DASH);\nFEh.HideBubble();\nFEh.SetDefaultColor(Color.GRAY);\nFEh.HideTitle();\nplot FEl = if isNaN(c) then double.nan else .382;\nFEl.SetStyle(Curve.short_DASH);\nFEl.SetDefaultColor(Color.GRAY);\nFEl.HideBubble();\nFEl.HideTitle();\nAddCloud(0, OS, Color.RED, Color.RED);\nAddCloud(OB, 1, Color.Green, Color.Green);\nAlert(AlertOn and RSI crosses below .8, \&quot;\&quot;, Alert.BAR, Sound.Bell);\nAlert(AlertOn and RSI crosses above .2, \&quot;\&quot;, Alert.BAR, Sound.Bell);\n\n# End Code RSI_Laguerre Self Adjusting with Fractal Energy\n\n&quot;,name=&quot;_1bcebf6d_e1e3_39b0_b6f6_9d12427299d9&quot;}){alerts:LocalAlertArray0,alerts=@LocalAlertArray0,hidden=&lt;T,inputsMap:TreeMap0{^(&quot;data&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap0})}),^(#%4.SubgraphId(&quot;Subgraph3&quot;),#%4.SubgraphStorableModel{height=177,storableIndicators.+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# TheoTrade RSI in Laguerre Time Self Adjusting With Fractal Energy\n# Mobius\n# V03.06.15.2016\n# Both Fractal Energy and RSI are plotted. RSI in cyan and FE in yellow. Look for trend exhaustion in the FE and a reversal of RSI or Price compression in FE and an RSI reversal.\n\ndeclare lower;\n\n#Inputs: \ninput aggregationPeriod1 = AggregationPeriod.THIRTY_MIN;\n\ninput useOpen =yes;\ndef price = if (useOpen) then   open(period = aggregationPeriod1) else close(period = aggregationPeriod1) ;\n\ninput nFE = 13;#hint nFE: length for Fractal Energy calculation. \n\n# Variables:\ndef o;\ndef h;\ndef l;\ndef c;\ndef CU1;\ndef CU2;\ndef CU;\ndef CD1;\ndef CD2;\ndef CD;\ndef L0;\ndef L1;\ndef L2;\ndef L3;\nplot RSI;\nplot OS;\nplot OB;\n\n# Calculations\no = (open(period = aggregationPeriod1) + close(period = aggregationPeriod1)[1]) / 2;\nh = Max(high(period = aggregationPeriod1), close(period = aggregationPeriod1)[1]);\nl = Min(low(period = aggregationPeriod1), close(period = aggregationPeriod1)[1]);\nc = (o + h + l + close(period = aggregationPeriod1)) / 4;\nplot gamma = Log(Sum((Max(high(period = aggregationPeriod1), close(period = aggregationPeriod1)[1]) - Min(low(period = aggregationPeriod1), close(period = aggregationPeriod1)[1])), nFE) / \n        (Highest(high(period = aggregationPeriod1), nFE) - Lowest(low(period = aggregationPeriod1), nFE)))\n            / Log(nFE);\ngamma.SetDefaultColor(Color.Yellow);\nL0 = (1 – gamma) * c + gamma * L0[1];\nL1 = -gamma * L0 + L0[1] + gamma * L1[1];\nL2 = -gamma * L1 + L1[1] + gamma * L2[1];\nL3 = -gamma * L2 + L2[1] + gamma * L3[1];\nif L0 &gt;= L1\nthen {\n    CU1 = L0 - L1;\n    CD1 = 0;\n} else {\n    CD1 = L1 - L0;\n    CU1 = 0;\n}\nif L1 &gt;= L2\nthen {\n    CU2 = CU1 + L1 - L2;\n    CD2 = CD1;\n} else {\n    CD2 = CD1 + L2 - L1;\n    CU2 = CU1;\n}\nif L2 &gt;= L3\nthen {\n    CU = CU2 + L2 - L3;\n    CD = CD2;\n} else {\n    CU = CU2;\n    CD = CD2 + L3 - L2;\n}\n\nRSI = if CU + CD &lt;&gt; 0 then CU / (CU + CD) else 0;\nRSI.SetDefaultColor(Color.Cyan);\nOS = if IsNaN(close(period = aggregationPeriod1)) then Double.NaN else 0.2;\nOS.SetDefaultColor(Color.Gray);\nOS.HideBubble();\nOS.HideTitle();\nOB = if IsNaN(close(period = aggregationPeriod1)) then Double.NaN else 0.8;\nOB.SetDefaultColor(Color.Gray);\nOB.HideBubble();\nOB.HideTitle();\nplot FEh = if isNaN(close(period = aggregationPeriod1)) then double.nan else .618;\nFEh.SetStyle(Curve.Long_Dash);\nFEh.HideBubble();\nFEh.SetDefaultColor(Color.Dark_Gray);\nFEh.HideTitle();\nplot FEl = if isNaN(close(period = aggregationPeriod1)) then double.nan else .382;\nFEl.SetStyle(Curve.Long_Dash);\nFEl.SetDefaultColor(Color.Dark_Gray);\nFEl.HideBubble();\nFEl.HideTitle();\nAddCloud(0, OS, Color.Green, Color.Green);\nAddCloud(OB, 1, Color.Red, Color.Red);\nAlert(RSI crosses below .9, \&quot;\&quot;, Alert.BAR, Sound.Bell);\nAlert(RSI crosses above .1, \&quot;\&quot;, Alert.BAR, Sound.Bell);\n\n# End Code RSI_Laguerre Self Adjusting with Fractal Energy&quot;,name=&quot;_d17145e8_5004_3ac1_8e21_8466363fd097&quot;}){alerts:LocalAlertArray1,alerts=@LocalAlertArray1,inputsMap:TreeMap1{^(&quot;aggregationPeriod1&quot;,&quot;HOUR&quot;)},inputsMap=@TreeMap1})}),^(#%4.SubgraphId(&quot;Subgraph5&quot;),#%4.SubgraphStorableModel{height=177,storableIndicators.+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# TheoTrade RSI in Laguerre Time Self Adjusting With Fractal Energy\n# Mobius\n# V03.06.15.2016\n# Both Fractal Energy and RSI are plotted. RSI in cyan and FE in yellow. Look for trend exhaustion in the FE and a reversal of RSI or Price compression in FE and an RSI reversal.\n\ndeclare lower;\n\n#Inputs: \ninput nFE = 13;#hint nFE: length for Fractal Energy calculation. \n\n# Variables:\ndef o;\ndef h;\ndef l;\ndef c;\ndef CU1;\ndef CU2;\ndef CU;\ndef CD1;\ndef CD2;\ndef CD;\ndef L0;\ndef L1;\ndef L2;\ndef L3;\nplot RSI;\nplot OS;\nplot OB;\n\n# Calculations\no = (open + close[1]) / 2;\nh = Max(high, close[1]);\nl = Min(low, close[1]);\nc = (o + h + l + close) / 4;\nplot gamma = Log(Sum((Max(high, close[1]) - Min(low, close[1])), nFE) / \n        (Highest(high, nFE) - Lowest(low, nFE)))\n            / Log(nFE);\ngamma.SetDefaultColor(Color.Yellow);\nL0 = (1 – gamma) * c + gamma * L0[1];\nL1 = -gamma * L0 + L0[1] + gamma * L1[1];\nL2 = -gamma * L1 + L1[1] + gamma * L2[1];\nL3 = -gamma * L2 + L2[1] + gamma * L3[1];\nif L0 &gt;= L1\nthen {\n    CU1 = L0 - L1;\n    CD1 = 0;\n} else {\n    CD1 = L1 - L0;\n    CU1 = 0;\n}\nif L1 &gt;= L2\nthen {\n    CU2 = CU1 + L1 - L2;\n    CD2 = CD1;\n} else {\n    CD2 = CD1 + L2 - L1;\n    CU2 = CU1;\n}\nif L2 &gt;= L3\nthen {\n    CU = CU2 + L2 - L3;\n    CD = CD2;\n} else {\n    CU = CU2;\n    CD = CD2 + L3 - L2;\n}\n\nRSI = if CU + CD &lt;&gt; 0 then CU / (CU + CD) else 0;\nRSI.SetDefaultColor(Color.Cyan);\nOS = if IsNaN(close) then Double.NaN else 0.2;\nOS.SetDefaultColor(Color.Gray);\nOS.HideBubble();\nOS.HideTitle();\nOB = if IsNaN(close) then Double.NaN else 0.8;\nOB.SetDefaultColor(Color.Gray);\nOB.HideBubble();\nOB.HideTitle();\nplot FEh = if isNaN(close) then double.nan else .618;\nFEh.SetStyle(Curve.Long_Dash);\nFEh.HideBubble();\nFEh.SetDefaultColor(Color.Dark_Gray);\nFEh.HideTitle();\nplot FEl = if isNaN(close) then double.nan else .382;\nFEl.SetStyle(Curve.Long_Dash);\nFEl.SetDefaultColor(Color.Dark_Gray);\nFEl.HideBubble();\nFEl.HideTitle();\nAddCloud(0, OS, Color.Green, Color.Green);\nAddCloud(OB, 1, Color.Red, Color.Red);\nAlert(RSI crosses below .9, \&quot;\&quot;, Alert.BAR, Sound.Bell);\nAlert(RSI crosses above .1, \&quot;\&quot;, Alert.BAR, Sound.Bell);\n\n# End Code RSI_Laguerre Self Adjusting with Fractal Energy&quot;,name=&quot;_31a475af_ca9a_3990_9a81_9098babc9d60&quot;}){alerts:LocalAlertArray2,alerts=@LocalAlertArray2})})}}" SYMBOL="EVRG" SYMBOL_GROUP="1" VERTICAL="false" VISIBLE="true" WEIGHT="1.0"/>
            <CHART_2 VERTICAL="false" VISIBLE="false" WEIGHT="3.0"/>
            <CHART_3 VERTICAL="false" VISIBLE="false" WEIGHT="3.0"/>
            <DASHBOARD VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <LEVEL_II VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <LIVE_NEWS VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <PHASE_SCORES VERTICAL="false" VISIBLE="false" WEIGHT="2.0"/>
            <TIME_SALES VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <TRADE CONFIGURATION_NAME="SINGLE" ORDER_RULES_SET="STOCK" ORDER_TYPE="LIMIT" OS_AUTO="false" OS_EXPANDED="false" OS_TIF="DAY" QTY="100.0" TEMPLATE="SINGLE" TRADE_BUTTONS="BUY_MKT;SELL_MKT;MULTI_CANCEL;REVERSE;FLAT;SECOND_LINE;QUANTITY;AUTO_SEND;ORDER_SETUP" VISIBLE="false">
              <OCO_STOP>
                <TRG_0 TRG_ENBL="true" TRG_LINK="ASK_BID" TRG_OFFSET_MODE="TICK" TRG_OT="STOP" TRG_SETUP="10.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AAL="10.0" AAPL="10.0" EVRG="10.0" FDX="10.0" TGT="10.0" UAL="10.0"/>
                </TRG_0>
              </OCO_STOP>
              <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="1.0" TRG_TIF="DAY">
                <OFFSET_PER_SYMBOL AAL="1.0" AAPL="1.0" EVRG="1.0" FDX="1.0" TGT="1.0" UAL="1.0"/>
              </TRG_0>
              <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-1.0" TRG_TIF="DAY">
                <OFFSET_PER_SYMBOL AAL="-1.0" AAPL="-1.0" EVRG="-1.0" FDX="-1.0" TGT="-1.0" UAL="-1.0"/>
              </TRG_1>
              <_2>
                <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="2.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AAL="2.0" AAPL="2.0" EVRG="2.0" FDX="2.0" TGT="2.0" UAL="2.0"/>
                </TRG_0>
                <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-2.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AAL="-2.0" AAPL="-2.0" EVRG="-2.0" FDX="-2.0" TGT="-2.0" UAL="-2.0"/>
                </TRG_1>
              </_2>
              <_3>
                <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="3.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AAL="3.0" AAPL="3.0" EVRG="3.0" FDX="3.0" TGT="3.0" UAL="3.0"/>
                </TRG_0>
                <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-3.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AAL="-3.0" AAPL="-3.0" EVRG="-3.0" FDX="-3.0" TGT="-3.0" UAL="-3.0"/>
                </TRG_1>
              </_3>
            </TRADE>
          </ACT_TRD_CELL1>
          <ACT_TRD_CELL2 ROWSPANELWEIGHT="1.0" ROWWEIGHT0="1.0" ROWWEIGHT1="1.0" SELECTED_TYPE="CHART" SIDEBAR_IS_ACTIVE="true" SYMBOL="AAPL+AMZN+FB+GOOG+MSFT" SYMBOL_GROUP="3" TRADE_BUTTONS_MIGRATED="true">
            <ACTIVETRADER VERTICAL="false" VISIBLE="false" WEIGHT="2.0"/>
            <BIG_BUTTONS VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <CHART CONFIGURATION="@v8@%0:com.devexperts.tos.thinkscript.data,1:java.awt,2:com.devexperts.toschart.control.subgraph,3:com.devexperts.toschart.elstudies,4:com.devexperts.toschart.script%owner{chartAggregationPeriods:ChartAggregationPeriodArray0,chartAggregationPeriods=@ChartAggregationPeriodArray0}#com.devexperts.toschart.core.ChartModel{encodedMixinsState=&quot;{\&quot;common\&quot;:{\&quot;DRAWING_SETS\&quot;:\&quot;{}\&quot;},\&quot;state_props\&quot;:{\&quot;state_type\&quot;:\&quot;REGULAR\&quot;},\&quot;monkey_bars_exp\&quot;:{\&quot;LikefolioMixin\&quot;:\&quot;{\\\&quot;paintingSettings\\\&quot;:{\\\&quot;neutralSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;positiveSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;negativeSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;sentimentSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true}},\\\&quot;shownDivisions\\\&quot;:[],\\\&quot;allDivisions\\\&quot;:[]}\&quot;},\&quot;monkey_bars\&quot;:{},\&quot;seasonality\&quot;:{},\&quot;regular\&quot;:{\&quot;DescriberMixin\&quot;:\&quot;{\\\&quot;visibility\\\&quot;:\\\&quot;HIDE_PANEL\\\&quot;,\\\&quot;studiesMode\\\&quot;:\\\&quot;HIDE_STUDIES\\\&quot;}\&quot;,\&quot;LikefolioMixin\&quot;:\&quot;{\\\&quot;paintingSettings\\\&quot;:{\\\&quot;neutralSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;positiveSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;negativeSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;sentimentSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true}},\\\&quot;shownDivisions\\\&quot;:[],\\\&quot;allDivisions\\\&quot;:[]}\&quot;}}&quot;,encodedPatternsModel=&quot;{\&quot;showPatterns\&quot;:true,\&quot;models\&quot;:[],\&quot;fibModels\&quot;:[]}&quot;,groupId=&quot;default&quot;,styleSettings{commonStyleSettings{colorSettings{backgroundColor=#%0.CustomColor(#%1.Color(0,0,0,255)),monkeyProfileTypeColors.defaultRowHeight=&lt;F,mpExpandedTypeColors.defaultRowHeight=&lt;F,volumeColor=#%0.CustomColor(#%1.Color(0,0,0,255))},expansion.right=115,fitOrdersToScreen=&lt;T,keepPriceZoom=&lt;T,leftAxisRegulator{maxValue=805926.78632479d,minValue=-33029.78632479d},manualAxisRegulator{maxValue=6463.83653129d,minValue=2628.56504912d},previousRightExpansion=115,shortCuts{^(&quot;Time Zone&quot;,&lt;F),^(&quot;Show Expiration Friday &quot;,&lt;F),^(&quot;Keep Price Zoom&quot;,&lt;F),^(&quot;enableLeftAxis&quot;,&lt;F),!get:Boolean0(&quot;Chart mode&quot;),^(&quot;Fit expected price ranges&quot;,@Boolean0),^(&quot;emphasizeDigitMPExpanded&quot;,&lt;F),^(&quot;showWicksCandleTrend&quot;,&lt;F),^(&quot;highlightEarnings&quot;,&lt;F),^(&quot;synchronizeCrosshair&quot;,&lt;F),^(&quot;myToolsMode&quot;,&lt;F),^(&quot;seasonalityStyle&quot;,&lt;F),^(&quot;Show Price Subgraph&quot;,&lt;F),^(&quot;closePriceLevel&quot;,&lt;F),^(&quot;Color Volume As Symbol Ticks&quot;,&lt;F),^(&quot;highlightPhantomRBars&quot;,&lt;F),^(&quot;Cross type &quot;,&lt;F),^(&quot;Fit Studies to Screen&quot;,@Boolean0),^(&quot;Chart type &quot;,&lt;F),^(&quot;Fit Orders&quot;,&lt;F),^(&quot;Bubbles as Percentage&quot;,&lt;F),^(&quot;hideStatusString&quot;,&lt;F),^(&quot;Show Studies &quot;,&lt;F),^(&quot;showWicksHeikinAshi&quot;,&lt;F),^(&quot;Alerts&quot;,&lt;F),^(&quot;Chart scale&quot;,&lt;F),^(&quot;Fit High/Low&quot;,&lt;F),^(&quot;Orders&quot;,&lt;F),^(&quot;Use Log Scale &quot;,&lt;F),^(&quot;Fit Study Markers to Screen&quot;,@Boolean0),^(&quot;Fit Alerts&quot;,&lt;F),^(&quot;Fit patterns&quot;,&lt;F),^(&quot;Percentage View&quot;,&lt;F),^(&quot;Make Auto Zoom &quot;,&lt;F),^(&quot;Show Year Marking Line&quot;,&lt;F),^(&quot;Show Rollover Line&quot;,&lt;F),^(&quot;Show High/Low Bubbles &quot;,&lt;F),^(&quot;Snap mode&quot;,&lt;F),^(&quot;highlightStudies&quot;,&lt;F),^(&quot;Overlapped Volume&quot;,&lt;F),^(&quot;Show Symbol Logo&quot;,&lt;F),^(&quot;Show Last Price Bubble &quot;,&lt;F),^(&quot;emphasizeDigitMP&quot;,&lt;F),^(&quot;Show grid&quot;,@Boolean0),^(&quot;showWicksCandle&quot;,&lt;F),^(&quot;Show trades&quot;,&lt;F),^(&quot;highlightSeasons&quot;,&lt;F),^(&quot;Extend Order/Alert Line to Left&quot;,&lt;F)},showGrid=&lt;F,showTradeExecution=&lt;T,step=2.73224043715847d},forexStyleSettings.shortCuts.^(&quot;Show Volume Subgraph&quot;,&lt;F),futuresStyleSettings{highlightExtendedHours=&lt;T,shortCuts{^(&quot;adjustForContractChanges&quot;,&lt;F),^(&quot;Show Open Interest&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,&lt;F),^(&quot;showContractChangeEvents&quot;,&lt;F),^(&quot;futures_daily_close_price&quot;,&lt;F),^(&quot;Show Options&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,&lt;F),^(&quot;startAtMarketOpen&quot;,&lt;F)},tradingHoursOnly=&lt;T},optionsStyleSettings{shortCuts{^(&quot;Show Open Interest&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,&lt;F),^(&quot;Show Theo Price&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,&lt;F),^(&quot;startAtMarketOpen&quot;,&lt;F)},startAggregationAtMarketOpen=&lt;F},otherStyleSettings{shortCuts{^(&quot;Show Social Sentiment&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,@Boolean0),^(&quot;Show Options&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,&lt;F),^(&quot;Show Corporate Actions&quot;,&lt;F),^(&quot;Show CNBC Video&quot;,&lt;F),^(&quot;startAtMarketOpen&quot;,@Boolean0),^(&quot;adjustForDividends&quot;,&lt;F)},startAggregationAtMarketOpen=&lt;F,tradingHoursOnly=&lt;T},setsIdentifiers.styleSetName=&quot;DEF_X_STYLE&quot;},subgraphModels{!get(#%2.SubgraphId(&quot;Symbol&quot;)){height=469,storableIndicators.+(!%3.CompiledStudy.resolveStudy(#%4.ScriptEssence{body=&quot;input averageType = AverageType.SIMPLE;\ninput showMovingAvgLable =Yes;\ninput price = close;\ninput length1 = 10;\ninput length2 = 20;\ninput length3 = 50;\ninput length4 = 200;\ninput displace = 0;\ninput showAvg3 = yes;\n\ninput showAvg4 = yes;\n\ninput showBreakoutSignals = no;\n\n\n\n\n#def AvgExp = ExpAverage(price[-displace], length);\nplot Avg1 = MovingAverage(averageType, price[-displace], length1);\nplot Avg2 = MovingAverage(averageType, price[-displace], length2);\nplot Avg3 = MovingAverage(averageType, price[-displace], length3);\nplot Avg4 = MovingAverage(averageType, price[-displace], length4);\n\nAvg3.setHiding(!showAvg3);\nAvg4.setHiding(!showAvg4);\n\n\n#plot SMA ( Average(price[-displace], length);\nplot UpSignal = price crosses above Avg1;\nplot DownSignal = price crosses below Avg1;\n#Add Label\n\nAddLabel(showMovingAvgLable, \&quot;  \&quot;+ length1+ \&quot;MAvg\&quot; ,Avg1.TakeValueColor ());\nAddLabel(showMovingAvgLable,  astext(Avg1), if Avg1&lt; close then Color.LIGHT_GREEN else if Avg1&gt; close then color.light_red else Color.Light_GRAY);\n\n\nAddLabel(showMovingAvgLable, \&quot;  \&quot;+ length2+ \&quot;MAvg\&quot; ,Avg2.TakeValueColor ());\nAddLabel(showMovingAvgLable,  astext(Avg2), if Avg2&lt; close then Color.LIGHT_GREEN else if Avg2&gt; close then color.light_red else Color.Light_GRAY);\n\nAddLabel(showMovingAvgLable, \&quot;  \&quot;+ length3+ \&quot;MAvg\&quot; ,Avg3.TakeValueColor ());\nAddLabel(showMovingAvgLable,  astext(Avg3), if Avg3&lt; close then Color.LIGHT_GREEN else if Avg3&gt; close then color.light_red else Color.Light_GRAY);\n\n\nAddLabel(showMovingAvgLable, \&quot;  \&quot;+ length4+ \&quot;MAvg\&quot; ,Avg4.TakeValueColor ());\nAddLabel(showMovingAvgLable,  astext(Avg4), if Avg4&lt; close then Color.LIGHT_GREEN else if Avg4&gt; close then color.light_red else Color.Light_GRAY);\n\n\n# Avg1.TakeValueColor ()\n#AddLabel(showMovingAvgLable,  length1+ \&quot;MAvg \&quot; +astext(Avg1) ,Avg1.TakeValueColor ());\n#AddLabel(showMovingAvgLable, astext(Avg1), if Avg1&lt; close then Color.GREEN else if Avg1&gt; close then color.light_red else Color.Light_GRAY);\n\n\n\n#AddLabel(showMovingAvgLable,  length2+ \&quot;MAvg \&quot;+ astext(Avg2) ,Avg2.TakeValueColor ());\n#AddLabel(showMovingAvgLable,  astext(Avg2), if Avg2&lt; close then Color.GREEN else if Avg2&gt; close then color.light_red else Color.Light_GRAY);\n#AddLabel(showMovingAvgLable,  length3+ \&quot;MAvg \&quot; +astext(Avg3),Avg3.TakeValueColor ());\n#AddLabel(showMovingAvgLable, astext(Avg3), if Avg3&lt; close then Color.GREEN else if Avg3&gt; close then color.light_red else Color.Light_GRAY);\n#AddLabel(showMovingAvgLable,  length4+ \&quot;MAvg \&quot; +astext(Avg4),Avg4.TakeValueColor ());\n#AddLabel(showMovingAvgLable, astext(Avg4), if Avg4&lt; close then Color.GREEN else if Avg4&gt; close then color.light_red else Color.Light_GRAY);\ndef bub;\nif !IsNaN(close[-1])\nthen {\n\n    bub = no;#Double.NaN;\n    \n} else {\nbub = yes;\n    \n}\ndef bubb = if  BarNumber() == 20  then yes else no;\n\ninput Show_Mavg_Key=no;\n\n#AddChartBubble(bub, Avg1, \&quot;MAvg\&quot;+ length1+ \&quot;= \&quot; + astext(Avg1), Color.LIGHT_ORANGE, no);\nAddChartBubble(bub and Show_Mavg_Key, Avg1, \&quot;MAvg\&quot;+ length1+ \&quot;= \&quot; + astext(Avg1), Avg1.TakeValueColor (), yes);\nAddChartBubble(bub and Show_Mavg_Key, Avg2, \&quot;MAvg\&quot;+ length2+ \&quot;= \&quot; + astext(Avg2), Avg2.TakeValueColor (), yes);\nAddChartBubble(bub and Show_Mavg_Key, Avg3, \&quot;MAvg\&quot;+ length3+ \&quot;= \&quot; + astext(Avg3), Avg3.TakeValueColor (), yes);\nAddChartBubble(bub and Show_Mavg_Key, Avg4, \&quot;MAvg\&quot;+ length4+ \&quot;= \&quot; + astext(Avg4), Avg4.TakeValueColor (), yes);\n\n#Vwap\ninput vwapTimeFrame = {default DAY, WEEK, MONTH};\ninput numDevDn = -2.0;\ninput numDevUp = 2.0;\n\n\ndef cap = getAggregationPeriod();\ndef errorInAggregation =\n    vwapTimeFrame == vwapTimeFrame.DAY and cap &gt;= AggregationPeriod.WEEK or\n    vwapTimeFrame == vwapTimeFrame.WEEK and cap &gt;= AggregationPeriod.MONTH;\nassert(!errorInAggregation, \&quot;timeFrame should be not less than current chart aggregation period\&quot;);\n\ndef yyyyMmDd = getYyyyMmDd();\ndef periodIndx;\nswitch (vwapTimeFrame) {\ncase DAY:\n    periodIndx = yyyyMmDd;\ncase WEEK:\n    periodIndx = Floor((daysFromDate(first(yyyyMmDd)) + getDayOfWeek(first(yyyyMmDd))) / 7);\ncase MONTH:\n    periodIndx = roundDown(yyyyMmDd / 100, 0);\n}\ndef isPeriodRolled = compoundValue(1, periodIndx != periodIndx[1], yes);\n\ndef volumeSum;\ndef volumeVwapSum;\ndef volumeVwap2Sum;\n\nif (isPeriodRolled) {\n    volumeSum = volume;\n    volumeVwapSum = volume * vwap;\n    volumeVwap2Sum = volume * Sqr(vwap);\n} else {\n    volumeSum = compoundValue(1, volumeSum[1] + volume, volume);\n    volumeVwapSum = compoundValue(1, volumeVwapSum[1] + volume * vwap, volume * vwap);\n    volumeVwap2Sum = compoundValue(1, volumeVwap2Sum[1] + volume * Sqr(vwap), volume * Sqr(vwap));\n}\ndef VWprice = volumeVwapSum / volumeSum;\ndef deviation = Sqrt(Max(volumeVwap2Sum / volumeSum - Sqr(VWprice), 0));\n\nplot VWAP = VWprice;\nplot UpperBand = VWprice + numDevUp * deviation;\nplot LowerBand = VWprice + numDevDn * deviation;\n\nVWAP.setDefaultColor(getColor(0));\nUpperBand.setDefaultColor(getColor(0));\nLowerBand.setDefaultColor(getColor(0));\n\nUpperBand.SetStyle(Curve.MEDIUM_DASH);\nLowerBand.SetStyle(Curve.MEDIUM_DASH);\n\n\n\nUpperBand.hide();\nLowerBand.hide();\n\n#vwap\n\nAddLabel(yes, \&quot;VWAP= \&quot; + astext(VWAP), if VWAP&lt; close then Color.LIGHT_GREEN else if VWAP&gt; close then color.LIGHT_red else Color.GRAY);\n#AddLabel(yes, \&quot;VWAP= \&quot; + astext(VWAP), Color.White);\ndef vwDif= close- VWAP;\nAddLabel(yes, \&quot; \&quot;+astext(vwDif), if vwDif&gt; 0 then Color.LIGHT_GREEN else if vwDif&lt; 0 then color.LIGHT_red else Color.GRAY);\n\n#RSI\ninput overBoughtRsi = 70;\ninput overSoldRsi = 30;\ninput rsiLength = 14;\ninput rsiPrice = close;\ndef rsi_val = reference RSI(length = rsiLength, price = rsiPrice );\n####\n\n\n\nAddLabel(yes, \&quot;RSI = \&quot; + astext(rsi_val) , if rsi_val &gt; overBoughtRsi  then Color.RED else if rsi_val &lt; overSoldRsi then  Color.GREEN else Color.light_GRAY);\n\n\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\nAvg1.SetDefaultColor(color.white);\nAvg2.SetDefaultColor(color.cyan);\nAvg3.SetDefaultColor(color.light_red);\nAvg4.SetDefaultColor(color.pink);\n#avg3.SetStyle(Curve.MEDIUM_DASH);\n#avg4.SetStyle(Curve.MEDIUM_DASH);\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);\n&quot;,name=&quot;_686a0d47_2dc7_4466_91d6_64cf4907bd2a&quot;}))},!get(#%2.SubgraphId(&quot;Volume&quot;)){height=80,storableIndicators.+(!%3.CompiledStudy.resolveStudy(#%4.ScriptEssence{body=&quot;# Modified by Mahi\n# Second Mod by Ramon DV\n\ndeclare on_volume;\n#v2\n#Inputs\n\ninput ShowDayAvg = yes;\ninput AvgDayVolLength = 30;\ninput ShowTodayVolume = yes;\ninput ShowTodayVolumeProjection = yes;\ninput ShowPercentOfDayAvg = yes;\ninput UnusualVolumePercent = 200;\ninput ShowBarAvg = yes;\ninput AvgBarVolLength = 30;\ninput ShowCurrentBar = yes;\ninput ShowPercentOfBarAvg = yes;\ninput ShowSellVolumePercent = yes;\ninput ShowBuyVolumePercent = yes;\ninput AvgType = AverageType.SIMPLE;\n\ndef O = open;\ndef H = high;\ndef C = close;\ndef L = low;\ndef V = volume;\n\n#def buying =  V * (C - L) / (H - L);\n#def selling = V * (H - C) / (H - L);\n\ndef buying =   V * (H - O) / (H - L) ;\ndef selling =  V * (O - L) / (H - L) ;\n\ndef O_day = open(period = AggregationPeriod.DAY);\ndef H_day = high(period = AggregationPeriod.DAY);\ndef C_day = close(period = AggregationPeriod.DAY);\ndef L_day = low(period = AggregationPeriod.DAY);\ndef V_day = volume(period = AggregationPeriod.DAY);\n#def selling_day = V_day * (H_day - C_day) / (H_day - L_day);\n#def buying_day = V_day * (C_day - L_day) / (H_day - L_day);\ndef selling_day = V_day * (H_day - O_day) / (H_day - L_day);\ndef buying_day = V_day * (O_day - L_day) / (H_day - L_day);\n# Selling Volume pressure\n\nplot SellVol = selling;\nSellVol.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);\nSellVol.SetDefaultColor(Color.RED);\nSellVol.HideTitle();\nSellVol.HideBubble();\nSellVol.SetLineWeight(5);\n\n# Total Volume\n# Buying Volume pressure\n\nplot BuyVol = buying + selling; # plot in the background of selling volume\nBuyVol.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);\nBuyVol.SetDefaultColor(Color.DARK_GREEN);\nBuyVol.HideTitle();\nBuyVol.HideBubble();\nBuyVol.SetLineWeight(5);\n\n#Volume Data\n\ndef DayVol = volume(period = “DAY”);\ndef AvgDayVol = MovingAverage(AvgType, DayVol[1], AvgDayVolLength);\ndef percentOfDay = Round((DayVol / AvgDayVol) * 100, 0);\n\n\ndef AvgBarVol = MovingAverage(AvgType, volume[1], AvgBarVolLength);\ndef percentOfBar = Round((volume / AvgBarVol) * 100, 0);\ndef SellVolPercent = Round((selling / volume) * 100, 0);\ndef BuyVolPercent = 100 - SellVolPercent;\n\ndef SellVolPercent_day = Round((selling_day / V_day) * 100, 0);\ndef BuyVolPercent_day = 100 - SellVolPercent_day;\n\n# Labels\n\nAddLabel(ShowDayAvg, \&quot;Avg “ + AvgDayVolLength + “ Days: \&quot; + Round(AvgDayVol, 0), Color.LIGHT_GRAY);\n\nAddLabel(ShowTodayVolume, \&quot;Today: \&quot; + DayVol, (if percentOfDay &gt;= UnusualVolumePercent then Color.GREEN else if percentOfDay &gt;= 100 then Color.ORANGE else Color.LIGHT_GRAY));\n\nAddLabel(ShowPercentOfDayAvg, percentOfDay + \&quot;%\&quot;, (if percentOfDay &gt;= UnusualVolumePercent then Color.GREEN else if percentOfDay &gt;= 100 then Color.ORANGE else Color.WHITE) );\n\nAddLabel(ShowBarAvg, \&quot;Avg “ + AvgBarVolLength + ” Bars: \&quot; + Round(AvgBarVol, 0), Color.LIGHT_GRAY);\n\nAddLabel(ShowCurrentBar, \&quot;Cur Bar: \&quot; + volume, (if percentOfBar &gt;= UnusualVolumePercent then Color.GREEN else if percentOfBar &gt;= 100 then Color.ORANGE else Color.LIGHT_GRAY));\n\nAddLabel(ShowPercentOfBarAvg, percentOfBar + \&quot;%\&quot;, (if percentOfBar &gt;= UnusualVolumePercent then Color.GREEN else if percentOfBar &gt;= 100 then Color.ORANGE else Color.WHITE) );\n\n\nAddLabel(ShowSellVolumePercent and (SellVolPercent &gt; BuyVolPercent) , \&quot;Cur Bar Sell %: \&quot; + SellVolPercent, if SellVolPercent &gt; BuyVolPercent then Color.RED else Color.GRAY);\nAddLabel(ShowBuyVolumePercent and (SellVolPercent &lt;= BuyVolPercent), \&quot;Cur Bar Buy %: \&quot; + BuyVolPercent, if BuyVolPercent &gt; SellVolPercent then Color.GREEN else Color.GRAY);\n\n\n# PriceOpen.Hide();\ninput length = 50;\n\nplot Vol = volume;\nplot VolAvg = Average(volume, length);\n\nVol.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);\nVol.SetLineWeight(3);\nVol.DefineColor(\&quot;Up\&quot;, Color.UPTICK);\nVol.DefineColor(\&quot;Down\&quot;, Color.DOWNTICK);\nVol.AssignValueColor(if close &gt; close[1] then Vol.Color(\&quot;Up\&quot;) else if close &lt; close[1] then Vol.Color(\&quot;Down\&quot;) else GetColor(1));\nVolAvg.SetDefaultColor(GetColor(8));\n\n\n#########################################################\n\n#def rth = (RegularTradingEnd(GetYYYYMMDD()) - RegularTradingStart(GetYYYYMMDD())) / AggregationPeriod.HOUR;\ndef rth = (RegularTradingEnd(GetYYYYMMDD()) - RegularTradingStart(GetYYYYMMDD())) / AggregationPeriod.MIN;\ndef MarketNotClosed = GetTime() &lt;= RegularTradingEnd (GetYYYYMMDD());\n# def eod = ((  RegularTradingEnd (GetYYYYMMDD()) - GetTime() ) / AggregationPeriod.MIN);\ndef eod = if MarketNotClosed then ((  RegularTradingEnd (GetYYYYMMDD()) - GetTime() ) / AggregationPeriod.MIN) else ((  RegularTradingEnd (GetYYYYMMDD())  ) / AggregationPeriod.MIN);\n\ndef DayVol_Projetion = volume(period = “DAY”) * rth / (rth - eod);\ndef percentOfDayProjection = Round((DayVol_Projetion / AvgDayVol) * 100, 0);\nAddLabel(ShowBuyVolumePercent, \&quot;Day Buy %: \&quot; + BuyVolPercent_day, if BuyVolPercent_day &gt; SellVolPercent_day then Color.GREEN else Color.GRAY);\n\nAddLabel(ShowTodayVolumeProjection, \&quot;Est. Vol: \&quot; + Round(DayVol_Projetion, 0) , if DayVol_Projetion &gt; AvgDayVol * 1.5  then Color.GREEN else Color.GRAY);\n\nAddLabel(ShowTodayVolumeProjection,  percentOfDayProjection  + \&quot;%\&quot;, if DayVol_Projetion &gt; AvgDayVol * 1.5  then Color.GREEN else Color.GRAY);\n\ndef y = GetTime() / AggregationPeriod.MIN;\n#eod =2;\n#AddLabel(yes, \&quot;RTH duration (min): \&quot; + rth);\n#AddLabel(yes, \&quot;EOD duration (min): \&quot; + eod);\n#AddLabel(yes, \&quot;Market Not closed: \&quot; + y);\n\n#######&quot;,name=&quot;_5261aedd_9830_4f97_bb0c_d3f9282e8428&quot;}))},^(#%2.SubgraphId(&quot;Subgraph1&quot;),#%2.SubgraphStorableModel{height=188,storableIndicators.+(!%3.CompiledStudy.resolveStudy(#%4.ScriptEssence{body=&quot;declare lower;\ninput aggregationPeriod1 = AggregationPeriod.THIRTY_MIN;\n\ninput useOpen =yes;\ndef price = if (useOpen) then   open(period = aggregationPeriod1) else close(period = aggregationPeriod1) ;\n\ninput over_bought = 40.0;\ninput over_sold = -40.0;\ninput percentDLength = 3;\ninput percentKLength = 5;\n\ndef min_low = Lowest(low (period = aggregationPeriod1), percentKLength);\ndef max_high = Highest(high (period = aggregationPeriod1), percentKLength);\ndef rel_diff = price - (max_high + min_low) / 2;\ndef diff = max_high - min_low;\n\ndef avgrel = ExpAverage(ExpAverage(rel_diff, percentDLength), percentDLength);\ndef avgdiff = ExpAverage(ExpAverage(diff, percentDLength), percentDLength);\n\nplot SMI = if avgdiff != 0 then avgrel / (avgdiff / 2) * 100 else 0;\nSMI.SetDefaultColor(GetColor(1));\n\nplot AvgSMI = ExpAverage(SMI, percentDLength);\nAvgSMI.SetDefaultColor(GetColor(5));\n\nplot overbought = over_bought;\noverbought.SetDefaultColor(GetColor(5));\n\nplot oversold = over_sold;\noversold.SetDefaultColor(GetColor(5));\n\n\n\n#RSI\ninput overBoughtRsi = 70;\ninput overSoldRsi = 30;\ninput rsiLength = 14;\ninput  rsiPrice = close;\nplot rsi_val = reference RSI(length = rsiLength, price = rsiPrice );\n####\n\n\n\nAddLabel(yes, \&quot;RSI = \&quot; + rsi_val , if rsi_val &gt; overBoughtRsi  then Color.RED else if rsi_val &lt; overSoldRsi then  Color.GREEN else Color.GRAY);\n\n\n\n#trend reversal\ndef y = rsi_val ;\ninput riReversLength = 2;\ninput lookBack = 2;\n\n\ndef rsi_expAvg = ExpAverage(rsi_val, riReversLength);\n\n#trend reversal\ndef overBoughtReversal = if ((rsi_expAvg &gt; overBoughtRsi)within 2 bar) and  (rsi_expAvg crosses above rsi_val) then price else 0;# if (rsi_expAvg &gt; OverBought and  rsi_expAvg crosses above rsi_val  within 3 bar ) then 40 else 0;\ndef oversoldRevesal = if ((rsi_expAvg &lt; overSoldRsi)within 2 bar) and  (rsi_expAvg crosses below rsi_val within 2 bar) then price else 0;\n\n##############\n########!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n#vwap vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\n#input numDevUp = 2.0;\ninput vwapTimeFrame = {default DAY, WEEK, MONTH};\n\ndef cap = GetAggregationPeriod();\ndef errorInAggregation =\n    vwapTimeFrame == vwapTimeFrame.DAY and cap &gt;= AggregationPeriod.WEEK or\n    vwapTimeFrame == vwapTimeFrame.WEEK and cap &gt;= AggregationPeriod.MONTH;\nAssert(!errorInAggregation, \&quot;timeFrame should be not less than current chart aggregation period\&quot;);\n\ndef yyyyMmDd = GetYYYYMMDD();\ndef periodIndx;\nswitch (vwapTimeFrame) {\ncase DAY:\n    periodIndx = yyyyMmDd;\ncase WEEK:\n    periodIndx = Floor((DaysFromDate(First(yyyyMmDd)) + GetDayOfWeek(First(yyyyMmDd))) / 7);\ncase MONTH:\n    periodIndx = RoundDown(yyyyMmDd / 100, 0);\n}\ndef isPeriodRolled = CompoundValue(1, periodIndx != periodIndx[1], yes);\n\ndef volumeSum;\ndef volumeVwapSum;\ndef volumeVwap2Sum;\n\nif (isPeriodRolled) {\n    volumeSum = volume;\n    volumeVwapSum = volume * vwap;\n    volumeVwap2Sum = volume * Sqr(vwap);\n} else {\n    volumeSum = CompoundValue(1, volumeSum[1] + volume, volume);\n    volumeVwapSum = CompoundValue(1, volumeVwapSum[1] + volume * vwap, volume * vwap);\n    volumeVwap2Sum = CompoundValue(1, volumeVwap2Sum[1] + volume * Sqr(vwap), volume * Sqr(vwap));\n}\ndef vWapprice = volumeVwapSum / volumeSum;\ndef deviation = Sqrt(Max(volumeVwap2Sum / volumeSum - Sqr(vWapprice), 0));\n\ndef VWAP = vWapprice;\ninput numDevUp = 2.0;\ninput numDevDn = -2.0;\n\ndef vwap_UpperBand = price + numDevUp * deviation;\ndef vwap_LowerBand = price + numDevDn * deviation;\n\ninput vwapCondition = no;\n#input vp=close;\ndef conVwapBuy = if  vwapCondition then  close &gt;= VWAP else 1;\n\n#####^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n#MACD\n\ninput fastLength = 12;\ninput slowLength = 26;\ninput MACDLength = 9;\ninput displace = 0;\ndef fastAvg = Sum(volume * price, fastLength) / Sum(volume, fastLength);\ndef slowAvg = Sum(volume * price, slowLength) / Sum(volume, slowLength);\ndef Value = fastAvg - slowAvg;\ndef Avg = ExpAverage(Value, MACDLength);\ndef MACD_Diff  = Value - Avg;\n#def ZeroLine = 0;\n\ninput def_cond = no;\ndef MACD_cond_logic = if (def_cond) then MACD_Diff &lt;= 0 else yes;\n\n\n#MACD Pivot reversal\n#input FilterLength=3;\n######################\n#def MACDV_Diff_expAvg = ExpAverage(MACD_Diff, FilterLength);\n#plot oversoldRevesalMACDV =if ((Diff_MACDV &lt; MacdZeroLine)within lookBack bar) and  ( Diff_MACDV crosses above   MACDV_Diff_expAvg within lookBack bar)and Diff_MACDV &gt; Diff_MACDV[1] then 1 else 0;# if (MACDV_Diff_expAvg &gt; OverBought and  MACDV_Diff_expAvg crosses above rsi_val  within 3 bar ) then 40 else 0;\n#plot overBoughtReversalMACDV = if ((Diff_MACDV &gt; MacdZeroLine)within lookBack bar) and  (MACDV_Diff_expAvg crosses above  Diff_MACDV  within lookBack bar)  and Diff_MACDV &lt; Diff_MACDV[1] and Diff_MACDV&gt;0 then 1 else 0;\n\n\n#trend Pivot reversal\ndef twoBarPivotMACD_Buy =  MACD_Diff &gt; MACD_Diff[1] and MACD_Diff[1] &gt; MACD_Diff[2] and MACD_Diff[2] &lt; MACD_Diff[3] and MACD_Diff[3] &lt; MACD_Diff [4];\ndef twoBarPivotMACD_Sell = MACD_Diff &lt; MACD_Diff[1] and MACD_Diff[1] &lt; MACD_Diff[2] and MACD_Diff[2] &gt; MACD_Diff[3] and MACD_Diff[3] &gt; MACD_Diff [4];\n###################\n\n\ndef uptrend = if price &gt; price[1] and price[1] &gt;= price[2] then 1 else 0;\n\n#####################################-----------------\n\ninput aggPeriod = AggregationPeriod.DAY;\ninput AvgType = AverageType.SIMPLE;\ninput short_len = 10;\ninput mid_len = 21;\ninput long_len = 50;\ninput moving_average = no;\ndef AVG1 = MovingAverage(AvgType, close(period = aggPeriod), short_len);\ndef AVG2 = MovingAverage(AvgType, close(period = aggPeriod), mid_len);\ndef AVG3 = MovingAverage(AvgType, close(period = aggPeriod), long_len);\n#def EMA_condition = if moving_average then (close &gt; AVG1 or close &gt; AVG2 or  close &gt; AVG3) else yes;\ndef EMA_condition = if moving_average then (close &gt; AVG1 ) else yes;\n\nAddLabel( yes, Concat(short_len + \&quot;MA = \&quot;, AVG1), Color.CYAN);\nAddLabel( yes, Concat(mid_len + \&quot;MA = \&quot;, AVG2), Color.LIGHT_ORANGE);\nAddLabel( yes, Concat(long_len + \&quot;MA = \&quot;, AVG3), Color.PINK);\n\n\n\n##############################################\n#@@@@\n#ADX\ninput adxLength = 14;\ninput adxAverageType = AverageType.WILDERS;\n\ndef ADX = DMI(adxLength, adxAverageType).ADX;\n#ADX.setDefaultColor(GetColor(5));\n\ninput length = 7;\ninput signalLength = 10;\ninput averageType = AverageType.WEIGHTED;\ninput averageTypeSignal = AverageType.EXPONENTIAL;\n\n\n\ndef Ref = ADX;# reference OnBalanceVolume();\nplot RefMoving = MovingAverage(averageType, Ref, length);\nplot Signal = MovingAverage(averageTypeSignal, RefMoving, signalLength);\nplot dif =  Ref - RefMoving;\n#Ref.SetDefaultColor(GetColor(4));\nRefMoving.SetDefaultColor(GetColor(8));\nSignal.SetDefaultColor(GetColor(2));\ndif.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);\ndif.SetLineWeight(3);\n\n\ndif.DefineColor(\&quot;Positive and Up\&quot;, Color.CYAN);\ndif.DefineColor(\&quot;Positive and Down\&quot;, Color.BLUE);\ndif.DefineColor(\&quot;Negative and Down\&quot;, Color.RED);\ndif.DefineColor(\&quot;Negative and Up\&quot;, Color.YELLOW);\ndif.AssignValueColor(if dif &gt;= 0 then if dif &gt; dif[1] then dif.Color(\&quot;Positive and Up\&quot;) else dif.Color(\&quot;Positive and Down\&quot;) else if dif &lt; dif[1] then dif.Color(\&quot;Negative and Down\&quot;) else dif.Color(\&quot;Negative and Up\&quot;));\n\n\n#@@@@@\n###################################\ndef SMI_ADX_Buy_Signal;\nif GetAggregationPeriod() &lt; AggregationPeriod.FIFTEEN_MIN\nthen\n{\n    SMI_ADX_Buy_Signal = if ( (SMI crosses above AvgSMI  within lookBack bar) and (Ref crosses above RefMoving within lookBack bar) and dif &gt;= 0 and (rsi_val &gt; overSoldRsi and rsi_val &lt; 60 ) and MACD_cond_logic and  EMA_condition) and Ref &gt; Ref[2] then 1 else 0;\n\n}\nelse {\n    SMI_ADX_Buy_Signal = 0;\n}\nplot buy6 = SMI_ADX_Buy_Signal;\n\n\ndef SMI_Buy_Signal = if ( (SMI crosses above overbought  within lookBack bar) and SMI &gt;  AvgSMI and (rsi_val &gt; overSoldRsi and rsi_val &lt; overBoughtRsi + 10 ) and MACD_cond_logic and  EMA_condition) and  (uptrend) then 1 else 0;\nplot buy2 = SMI_Buy_Signal;\n\n#def  buySvix_Signal = if ( MACD_cond_logic  and  EMA_condition and  oversoldRevesal  and buySvix &lt; Zeroline - 10 ) then 1 else 0;\n#plot buy3 = buySvix_Signal;\n\n\n\n\n\n\ndef SMI_Sell_Signal = if ( (SMI crosses below AvgSMI within lookBack bar) and (overBoughtReversal)) then 1 else 0;\n#def sellSignal2 = if ((rsi_val  &gt; overBoughtRsi within 3 bar) and (smi crosses below AvgSMI within 3 bar)) then 1 else 0;\n\n\nplot sell2 = SMI_Sell_Signal;\n\n#######\n\n#def FVE_buySignal = conVwapBuy and oversoldRevesal and pFVE_Bull  and MACD_cond_logic ;# and Diff &gt;= 0;\n#def sig_buy = pFVE_Bull and Diff &gt;= 0;\n#plot buy4 = FVE_buySignal ;\n\n\n#def FVE_sellSignal = overBoughtReversal and pFVE_Bear ;\n#plot sell4 = FVE_sellSignal;\nplot buy5 = twoBarPivotMACD_Buy and oversoldRevesal;\nplot sell5 = twoBarPivotMACD_Sell and overBoughtReversal;\n\n####\n#def buySignal2 = if (oversoldRevesal  and buythedip2 &lt; Zeroline ) then 1 else 0;\n\n#def buySignal3 = if ( oversoldRevesal  and buythedip3 &lt; Zeroline - 10 ) then 1 else 0;\n#plot buy3 = buySignal3;\n\nAddChartBubble(buy2 == 1, buy2, \&quot;B2SMI= \&quot; +  low[1] + \&quot; rsi \&quot; + rsi_val + \&quot; w \&quot; + VWAP[1], Color.LIGHT_ORANGE, no);\n#AddChartBubble(buy3 == 1, buy3,  \&quot;B3Svix= \&quot; + price + \&quot; rsi \&quot; + rsi_val, Color.LIGHT_GRAY, no);\n#AddChartBubble(buy4 == 1, buy4,  \&quot;B4FVE= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.YELLOW, no);\nAddChartBubble(buy5 == 1, buy5,  \&quot;B5Macd= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.CYAN, no);\nAddChartBubble(buy6 == 1, buy6,  \&quot;B5AdxSMI= \&quot; + price + \&quot; \\nrsi \&quot; + rsi_val[lookBack] + \&quot; \\nAdx \&quot; + Ref[lookBack], Color.GREEN, no);\n\n#AddChartBubble(sell1 == 1, sell1, \&quot;S1STR= \&quot; + price + \&quot; rsi \&quot; + rsi_val, Color.LIGHT_RED, no);#Buy the Dip\n\nAddChartBubble(sell2 == 1, sell2, \&quot;S2SMI= \&quot; + price + \&quot; rsi \&quot; + rsi_val, Color.PINK, no);#Buy the Dip\n#AddChartBubble(sell4 == 1, sell4, \&quot;S4FVE= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.VIOLET, no);#Buy the Dip\nAddChartBubble(sell5 == 1, sell5, \&quot;S5Macd= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.BLUE, no);#Buy the Dip\n#AddChartBubble(oversoldRevesal , close, rsi_val, Color.blue, no);#Buy the Dip\nplot scan = buy2;&quot;,name=&quot;_895e3e9a_2bdf_4c37_bc8e_713002a58848&quot;}){inputsMap:TreeMap0{^(&quot;aggregationPeriod1&quot;,&quot;WEEK&quot;),^(&quot;rsiPrice&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap0,plots{4:{hiding=&lt;T},5:{hiding=&lt;T},6:{hiding=&lt;T},7:{hiding=&lt;T}}})}),^(#%2.SubgraphId(&quot;Subgraph7&quot;),#%2.SubgraphStorableModel{height=188,storableIndicators.+(!%3.CompiledStudy.resolveStudy(#%4.ScriptEssence{body=&quot;declare lower;\n\ninput price = close;\n\ninput over_bought = 40.0;\ninput over_sold = -40.0;\ninput percentDLength = 3;\ninput percentKLength = 5;\n\ndef min_low = Lowest(low, percentKLength);\ndef max_high = Highest(high, percentKLength);\ndef rel_diff = price - (max_high + min_low) / 2;\ndef diff = max_high - min_low;\n\ndef avgrel = ExpAverage(ExpAverage(rel_diff, percentDLength), percentDLength);\ndef avgdiff = ExpAverage(ExpAverage(diff, percentDLength), percentDLength);\n\nplot SMI = if avgdiff != 0 then avgrel / (avgdiff / 2) * 100 else 0;\nSMI.SetDefaultColor(GetColor(1));\n\nplot AvgSMI = ExpAverage(SMI, percentDLength);\nAvgSMI.SetDefaultColor(GetColor(5));\n\nplot overbought = over_bought;\noverbought.SetDefaultColor(GetColor(5));\n\nplot oversold = over_sold;\noversold.SetDefaultColor(GetColor(5));\n\n\n\n#RSI\ninput overBoughtRsi = 70;\ninput overSoldRsi = 30;\ninput rsiLength = 14;\ninput rsiPrice = close;\ndef rsi_val = reference RSI(length = rsiLength, price = rsiPrice );\n####\n\n\n\nAddLabel(yes, \&quot;RSI = \&quot; + rsi_val , if rsi_val &gt; overBoughtRsi  then Color.RED else if rsi_val &lt; overSoldRsi then  Color.GREEN else Color.GRAY);\n\n\n\n#trend reversal\ndef y = rsi_val ;\ninput riReversLength = 2;\ninput lookBack = 2;\n\n\ndef rsi_expAvg = ExpAverage(rsi_val, riReversLength);\n\n#trend reversal\ndef overBoughtReversal = if ((rsi_expAvg &gt; overBoughtRsi)within 2 bar) and  (rsi_expAvg crosses above rsi_val) then price else 0;# if (rsi_expAvg &gt; OverBought and  rsi_expAvg crosses above rsi_val  within 3 bar ) then 40 else 0;\ndef oversoldRevesal = if ((rsi_expAvg &lt; overSoldRsi)within 2 bar) and  (rsi_expAvg crosses below rsi_val within 2 bar) then price else 0;\n\n##############\n########!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n#vwap vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\n#input numDevUp = 2.0;\ninput vwapTimeFrame = {default DAY, WEEK, MONTH};\n\ndef cap = GetAggregationPeriod();\ndef errorInAggregation =\n    vwapTimeFrame == vwapTimeFrame.DAY and cap &gt;= AggregationPeriod.WEEK or\n    vwapTimeFrame == vwapTimeFrame.WEEK and cap &gt;= AggregationPeriod.MONTH;\nAssert(!errorInAggregation, \&quot;timeFrame should be not less than current chart aggregation period\&quot;);\n\ndef yyyyMmDd = GetYYYYMMDD();\ndef periodIndx;\nswitch (vwapTimeFrame) {\ncase DAY:\n    periodIndx = yyyyMmDd;\ncase WEEK:\n    periodIndx = Floor((DaysFromDate(First(yyyyMmDd)) + GetDayOfWeek(First(yyyyMmDd))) / 7);\ncase MONTH:\n    periodIndx = RoundDown(yyyyMmDd / 100, 0);\n}\ndef isPeriodRolled = CompoundValue(1, periodIndx != periodIndx[1], yes);\n\ndef volumeSum;\ndef volumeVwapSum;\ndef volumeVwap2Sum;\n\nif (isPeriodRolled) {\n    volumeSum = volume;\n    volumeVwapSum = volume * vwap;\n    volumeVwap2Sum = volume * Sqr(vwap);\n} else {\n    volumeSum = CompoundValue(1, volumeSum[1] + volume, volume);\n    volumeVwapSum = CompoundValue(1, volumeVwapSum[1] + volume * vwap, volume * vwap);\n    volumeVwap2Sum = CompoundValue(1, volumeVwap2Sum[1] + volume * Sqr(vwap), volume * Sqr(vwap));\n}\ndef vWapprice = volumeVwapSum / volumeSum;\ndef deviation = Sqrt(Max(volumeVwap2Sum / volumeSum - Sqr(vWapprice), 0));\n\ndef VWAP = vWapprice;\ninput numDevUp = 2.0;\ninput numDevDn = -2.0;\n\ndef vwap_UpperBand = price + numDevUp * deviation;\ndef vwap_LowerBand = price + numDevDn * deviation;\n\ninput vwapCondition = no;\n#input vp=close;\ndef conVwapBuy = if  vwapCondition then  close &gt;= VWAP else 1;\n\n#####^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n#MACD\n\ninput fastLength = 12;\ninput slowLength = 26;\ninput MACDLength = 9;\ninput displace = 0;\ndef fastAvg = Sum(volume * price, fastLength) / Sum(volume, fastLength);\ndef slowAvg = Sum(volume * price, slowLength) / Sum(volume, slowLength);\ndef Value = fastAvg - slowAvg;\ndef Avg = ExpAverage(Value, MACDLength);\ndef MACD_Diff  = Value - Avg;\n#def ZeroLine = 0;\n\ninput def_cond = no;\ndef MACD_cond_logic = if (def_cond) then MACD_Diff &lt;= 0 else yes;\n\n\n#MACD Pivot reversal\n#input FilterLength=3;\n######################\n#def MACDV_Diff_expAvg = ExpAverage(MACD_Diff, FilterLength);\n#plot oversoldRevesalMACDV =if ((Diff_MACDV &lt; MacdZeroLine)within lookBack bar) and  ( Diff_MACDV crosses above   MACDV_Diff_expAvg within lookBack bar)and Diff_MACDV &gt; Diff_MACDV[1] then 1 else 0;# if (MACDV_Diff_expAvg &gt; OverBought and  MACDV_Diff_expAvg crosses above rsi_val  within 3 bar ) then 40 else 0;\n#plot overBoughtReversalMACDV = if ((Diff_MACDV &gt; MacdZeroLine)within lookBack bar) and  (MACDV_Diff_expAvg crosses above  Diff_MACDV  within lookBack bar)  and Diff_MACDV &lt; Diff_MACDV[1] and Diff_MACDV&gt;0 then 1 else 0;\n\n\n#trend Pivot reversal\ndef twoBarPivotMACD_Buy =  MACD_Diff &gt; MACD_Diff[1] and MACD_Diff[1] &gt; MACD_Diff[2] and MACD_Diff[2] &lt; MACD_Diff[3] and MACD_Diff[3] &lt; MACD_Diff [4];\ndef twoBarPivotMACD_Sell = MACD_Diff &lt; MACD_Diff[1] and MACD_Diff[1] &lt; MACD_Diff[2] and MACD_Diff[2] &gt; MACD_Diff[3] and MACD_Diff[3] &gt; MACD_Diff [4];\n###################\n\n\ndef uptrend = if price &gt; price[1] and price[1] &gt;= price[2] then 1 else 0;\n\n#####################################-----------------\n\ninput aggPeriod = AggregationPeriod.DAY;\ninput AvgType = AverageType.SIMPLE;\ninput short_len = 10;\ninput mid_len = 21;\ninput long_len = 50;\ninput moving_average = no;\ndef AVG1 = MovingAverage(AvgType, close(period = aggPeriod), short_len);\ndef AVG2 = MovingAverage(AvgType, close(period = aggPeriod), mid_len);\ndef AVG3 = MovingAverage(AvgType, close(period = aggPeriod), long_len);\n#def EMA_condition = if moving_average then (close &gt; AVG1 or close &gt; AVG2 or  close &gt; AVG3) else yes;\ndef EMA_condition = if moving_average then (close &gt; AVG1 ) else yes;\n\nAddLabel( yes, Concat(short_len + \&quot;MA = \&quot;, AVG1), Color.CYAN);\nAddLabel( yes, Concat(mid_len + \&quot;MA = \&quot;, AVG2), Color.LIGHT_ORANGE);\nAddLabel( yes, Concat(long_len + \&quot;MA = \&quot;, AVG3), Color.PINK);\n\n\n\n##############################################\n#@@@@\n#ADX\ninput adxLength = 14;\ninput adxAverageType = AverageType.WILDERS;\n\ndef ADX = DMI(adxLength, adxAverageType).ADX;\n#ADX.setDefaultColor(GetColor(5));\n\ninput length = 7;\ninput signalLength = 10;\ninput averageType = AverageType.WEIGHTED;\ninput averageTypeSignal = AverageType.EXPONENTIAL;\n\n\n\ndef Ref = ADX;# reference OnBalanceVolume();\nplot RefMoving = MovingAverage(averageType, Ref, length);\nplot Signal = MovingAverage(averageTypeSignal, RefMoving, signalLength);\nplot dif =  Ref - RefMoving;\n#Ref.SetDefaultColor(GetColor(4));\nRefMoving.SetDefaultColor(GetColor(8));\nSignal.SetDefaultColor(GetColor(2));\ndif.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);\ndif.SetLineWeight(3);\n\n\ndif.DefineColor(\&quot;Positive and Up\&quot;, Color.CYAN);\ndif.DefineColor(\&quot;Positive and Down\&quot;, Color.BLUE);\ndif.DefineColor(\&quot;Negative and Down\&quot;, Color.RED);\ndif.DefineColor(\&quot;Negative and Up\&quot;, Color.YELLOW);\ndif.AssignValueColor(if dif &gt;= 0 then if dif &gt; dif[1] then dif.Color(\&quot;Positive and Up\&quot;) else dif.Color(\&quot;Positive and Down\&quot;) else if dif &lt; dif[1] then dif.Color(\&quot;Negative and Down\&quot;) else dif.Color(\&quot;Negative and Up\&quot;));\n\n\n#@@@@@\n###################################\ndef SMI_ADX_Buy_Signal;\nif GetAggregationPeriod() &lt; AggregationPeriod.FIFTEEN_MIN\nthen\n{\n    SMI_ADX_Buy_Signal = if ( (SMI crosses above AvgSMI  within lookBack bar) and (Ref crosses above RefMoving within lookBack bar) and dif &gt;= 0 and (rsi_val &gt; overSoldRsi and rsi_val &lt; 60 ) and MACD_cond_logic and  EMA_condition) and Ref &gt; Ref[2] then 1 else 0;\n\n}\nelse {\n    SMI_ADX_Buy_Signal = 0;\n}\nplot buy6 = SMI_ADX_Buy_Signal;\n\n\ndef SMI_Buy_Signal = if ( (AvgSMI crosses above overbought  within lookBack bar) and SMI &gt;  AvgSMI and (rsi_val &gt; overSoldRsi and rsi_val &lt; overBoughtRsi + 10 ) and MACD_cond_logic and  EMA_condition) and (close[1] &gt;= VWAP[1] and close &gt;= vwap_UpperBand[1]) and (uptrend) then 1 else 0;\nplot buy2 = SMI_Buy_Signal;\n\n#def  buySvix_Signal = if ( MACD_cond_logic  and  EMA_condition and  oversoldRevesal  and buySvix &lt; Zeroline - 10 ) then 1 else 0;\n#plot buy3 = buySvix_Signal;\n\n\n\n\n\n\ndef SMI_Sell_Signal = if ( (SMI crosses below AvgSMI within lookBack bar) and (overBoughtReversal)) then 1 else 0;\n#def sellSignal2 = if ((rsi_val  &gt; overBoughtRsi within 3 bar) and (smi crosses below AvgSMI within 3 bar)) then 1 else 0;\n\n\nplot sell2 = SMI_Sell_Signal;\n\n#######\n\n#def FVE_buySignal = conVwapBuy and oversoldRevesal and pFVE_Bull  and MACD_cond_logic ;# and Diff &gt;= 0;\n#def sig_buy = pFVE_Bull and Diff &gt;= 0;\n#plot buy4 = FVE_buySignal ;\n\n\n#def FVE_sellSignal = overBoughtReversal and pFVE_Bear ;\n#plot sell4 = FVE_sellSignal;\nplot buy5 = twoBarPivotMACD_Buy and oversoldRevesal;\nplot sell5 = twoBarPivotMACD_Sell and overBoughtReversal;\n\n####\n#def buySignal2 = if (oversoldRevesal  and buythedip2 &lt; Zeroline ) then 1 else 0;\n\n#def buySignal3 = if ( oversoldRevesal  and buythedip3 &lt; Zeroline - 10 ) then 1 else 0;\n#plot buy3 = buySignal3;\n\nAddChartBubble(buy2 == 1, buy2, \&quot;B2SMI= \&quot; +  low[1] + \&quot; rsi \&quot; + rsi_val + \&quot; w \&quot; + VWAP[1], Color.LIGHT_ORANGE, no);\n#AddChartBubble(buy3 == 1, buy3,  \&quot;B3Svix= \&quot; + price + \&quot; rsi \&quot; + rsi_val, Color.LIGHT_GRAY, no);\n#AddChartBubble(buy4 == 1, buy4,  \&quot;B4FVE= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.YELLOW, no);\nAddChartBubble(buy5 == 1, buy5,  \&quot;B5Macd= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.CYAN, no);\nAddChartBubble(buy6 == 1, buy6,  \&quot;B5AdxSMI= \&quot; + price + \&quot; \\nrsi \&quot; + rsi_val[lookBack] + \&quot; \\nAdx \&quot; + Ref[lookBack], Color.GREEN, no);\n\n#AddChartBubble(sell1 == 1, sell1, \&quot;S1STR= \&quot; + price + \&quot; rsi \&quot; + rsi_val, Color.LIGHT_RED, no);#Buy the Dip\n\nAddChartBubble(sell2 == 1, sell2, \&quot;S2SMI= \&quot; + price + \&quot; rsi \&quot; + rsi_val, Color.PINK, no);#Buy the Dip\n#AddChartBubble(sell4 == 1, sell4, \&quot;S4FVE= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.VIOLET, no);#Buy the Dip\nAddChartBubble(sell5 == 1, sell5, \&quot;S5Macd= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.BLUE, no);#Buy the Dip\n#AddChartBubble(oversoldRevesal , close, rsi_val, Color.blue, no);#Buy the Dip\nplot scan = buy2;&quot;,name=&quot;_d344cec2_79a9_43f5_8e27_7e658f475446&quot;}))})}}" SYMBOL="AAPL+AMZN+FB+GOOG+MSFT" SYMBOL_GROUP="3" VERTICAL="false" VISIBLE="true" WEIGHT="1.0"/>
            <CHART_2 VERTICAL="false" VISIBLE="false" WEIGHT="3.0"/>
            <CHART_3 VERTICAL="false" VISIBLE="false" WEIGHT="3.0"/>
            <DASHBOARD VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <LEVEL_II VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <LIVE_NEWS VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <PHASE_SCORES VERTICAL="false" VISIBLE="false" WEIGHT="2.0"/>
            <TIME_SALES VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <TRADE CONFIGURATION_NAME="SINGLE" ORDER_RULES_SET="STOCK" ORDER_TYPE="LIMIT" OS_AUTO="false" OS_EXPANDED="false" OS_TIF="DAY" QTY="100.0" TEMPLATE="SINGLE" TRADE_BUTTONS="BUY_MKT;SELL_MKT;MULTI_CANCEL;REVERSE;FLAT;SECOND_LINE;QUANTITY;AUTO_SEND;ORDER_SETUP" VISIBLE="false">
              <OCO_STOP>
                <TRG_0 TRG_ENBL="true" TRG_LINK="ASK_BID" TRG_OFFSET_MODE="TICK" TRG_OT="STOP" TRG_SETUP="10.0" TRG_TIF="DAY"/>
              </OCO_STOP>
              <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="1.0" TRG_TIF="DAY"/>
              <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-1.0" TRG_TIF="DAY"/>
              <_2>
                <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="2.0" TRG_TIF="DAY"/>
                <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-2.0" TRG_TIF="DAY"/>
              </_2>
              <_3>
                <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="3.0" TRG_TIF="DAY"/>
                <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-3.0" TRG_TIF="DAY"/>
              </_3>
            </TRADE>
          </ACT_TRD_CELL2>
          <ACT_TRD_CELL3 ROWSPANELWEIGHT="1.0" ROWWEIGHT0="1.0" ROWWEIGHT1="1.0" SELECTED_TYPE="CHART" SIDEBAR_IS_ACTIVE="true" SYMBOL="INTC" SYMBOL_GROUP="-1" TRADE_BUTTONS_MIGRATED="true">
            <ACTIVETRADER VERTICAL="false" VISIBLE="false" WEIGHT="2.0"/>
            <BIG_BUTTONS VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <CHART CONFIGURATION="@v8@%0:com.devexperts.tos.thinkscript.data,1:java.awt,2:com.devexperts.toschart.control.subgraph,3:com.devexperts.toschart.elstudies,4:com.devexperts.toschart.script%owner{chartAggregationPeriods:ChartAggregationPeriodArray0,chartAggregationPeriods=@ChartAggregationPeriodArray0}#com.devexperts.toschart.core.ChartModel{encodedMixinsState=&quot;{\&quot;common\&quot;:{\&quot;DRAWING_SETS\&quot;:\&quot;{}\&quot;},\&quot;state_props\&quot;:{\&quot;state_type\&quot;:\&quot;REGULAR\&quot;},\&quot;monkey_bars_exp\&quot;:{\&quot;LikefolioMixin\&quot;:\&quot;{\\\&quot;paintingSettings\\\&quot;:{\\\&quot;neutralSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;positiveSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;negativeSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;sentimentSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true}},\\\&quot;shownDivisions\\\&quot;:[],\\\&quot;allDivisions\\\&quot;:[]}\&quot;},\&quot;monkey_bars\&quot;:{},\&quot;seasonality\&quot;:{},\&quot;regular\&quot;:{\&quot;DescriberMixin\&quot;:\&quot;{\\\&quot;visibility\\\&quot;:\\\&quot;HIDE_PANEL\\\&quot;,\\\&quot;studiesMode\\\&quot;:\\\&quot;HIDE_STUDIES\\\&quot;}\&quot;,\&quot;LikefolioMixin\&quot;:\&quot;{\\\&quot;paintingSettings\\\&quot;:{\\\&quot;neutralSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;positiveSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;negativeSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;sentimentSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true}},\\\&quot;shownDivisions\\\&quot;:[],\\\&quot;allDivisions\\\&quot;:[]}\&quot;}}&quot;,encodedPatternsModel=&quot;{\&quot;showPatterns\&quot;:true,\&quot;models\&quot;:[],\&quot;fibModels\&quot;:[]}&quot;,groupId=&quot;default&quot;,styleSettings{commonStyleSettings{colorSettings{backgroundColor=#%0.CustomColor(#%1.Color(0,0,0,255)),monkeyProfileTypeColors.defaultRowHeight=&lt;F,mpExpandedTypeColors.defaultRowHeight=&lt;F,volumeColor=#%0.CustomColor(#%1.Color(0,0,0,255))},expansion.right=115,fitOrdersToScreen=&lt;T,keepPriceZoom=&lt;T,leftAxisRegulator{maxValue=805926.78632479d,minValue=-33029.78632479d},manualAxisRegulator{maxValue=73.46063361d,minValue=40.16625344d},previousRightExpansion=115,shortCuts{^(&quot;Time Zone&quot;,&lt;F),^(&quot;Show Expiration Friday &quot;,&lt;F),^(&quot;Keep Price Zoom&quot;,&lt;F),^(&quot;enableLeftAxis&quot;,&lt;F),!get:Boolean0(&quot;Chart mode&quot;),^(&quot;Fit expected price ranges&quot;,@Boolean0),^(&quot;emphasizeDigitMPExpanded&quot;,&lt;F),^(&quot;showWicksCandleTrend&quot;,&lt;F),^(&quot;highlightEarnings&quot;,&lt;F),^(&quot;synchronizeCrosshair&quot;,&lt;F),^(&quot;myToolsMode&quot;,&lt;F),^(&quot;seasonalityStyle&quot;,&lt;F),^(&quot;Show Price Subgraph&quot;,&lt;F),^(&quot;closePriceLevel&quot;,&lt;F),^(&quot;Color Volume As Symbol Ticks&quot;,&lt;F),^(&quot;highlightPhantomRBars&quot;,&lt;F),^(&quot;Cross type &quot;,&lt;F),^(&quot;Fit Studies to Screen&quot;,@Boolean0),^(&quot;Chart type &quot;,&lt;F),^(&quot;Fit Orders&quot;,&lt;F),^(&quot;Bubbles as Percentage&quot;,&lt;F),^(&quot;hideStatusString&quot;,&lt;F),^(&quot;Show Studies &quot;,&lt;F),^(&quot;showWicksHeikinAshi&quot;,&lt;F),^(&quot;Alerts&quot;,&lt;F),^(&quot;Chart scale&quot;,&lt;F),^(&quot;Fit High/Low&quot;,&lt;F),^(&quot;Orders&quot;,&lt;F),^(&quot;Use Log Scale &quot;,&lt;F),^(&quot;Fit Study Markers to Screen&quot;,@Boolean0),^(&quot;Fit Alerts&quot;,&lt;F),^(&quot;Fit patterns&quot;,&lt;F),^(&quot;Percentage View&quot;,&lt;F),^(&quot;Make Auto Zoom &quot;,&lt;F),^(&quot;Show Year Marking Line&quot;,&lt;F),^(&quot;Show Rollover Line&quot;,&lt;F),^(&quot;Show High/Low Bubbles &quot;,&lt;F),^(&quot;Snap mode&quot;,&lt;F),^(&quot;highlightStudies&quot;,&lt;F),^(&quot;Overlapped Volume&quot;,&lt;F),^(&quot;Show Symbol Logo&quot;,&lt;F),^(&quot;Show Last Price Bubble &quot;,&lt;F),^(&quot;emphasizeDigitMP&quot;,&lt;F),^(&quot;Show grid&quot;,@Boolean0),^(&quot;showWicksCandle&quot;,&lt;F),^(&quot;Show trades&quot;,&lt;F),^(&quot;highlightSeasons&quot;,&lt;F),^(&quot;Extend Order/Alert Line to Left&quot;,&lt;F)},showGrid=&lt;F,showTradeExecution=&lt;T,step=2.73224043715847d},forexStyleSettings.shortCuts.^(&quot;Show Volume Subgraph&quot;,&lt;F),futuresStyleSettings{highlightExtendedHours=&lt;T,shortCuts{^(&quot;adjustForContractChanges&quot;,&lt;F),^(&quot;Show Open Interest&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,&lt;F),^(&quot;showContractChangeEvents&quot;,&lt;F),^(&quot;futures_daily_close_price&quot;,&lt;F),^(&quot;Show Options&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,&lt;F),^(&quot;startAtMarketOpen&quot;,&lt;F)},tradingHoursOnly=&lt;T},optionsStyleSettings{shortCuts{^(&quot;Show Open Interest&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,&lt;F),^(&quot;Show Theo Price&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,&lt;F),^(&quot;startAtMarketOpen&quot;,&lt;F)},startAggregationAtMarketOpen=&lt;F},otherStyleSettings{shortCuts{^(&quot;Show Social Sentiment&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,@Boolean0),^(&quot;Show Options&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,&lt;F),^(&quot;Show Corporate Actions&quot;,&lt;F),^(&quot;Show CNBC Video&quot;,&lt;F),^(&quot;startAtMarketOpen&quot;,@Boolean0),^(&quot;adjustForDividends&quot;,&lt;F)},startAggregationAtMarketOpen=&lt;F,tradingHoursOnly=&lt;T},setsIdentifiers.styleSetName=&quot;DEF_X_STYLE&quot;},subgraphModels{!get(#%2.SubgraphId(&quot;Symbol&quot;)){height=491,storableIndicators.+(!%3.CompiledStudy.resolveStudy(#%4.ScriptEssence{body=&quot;input averageType = AverageType.SIMPLE;\ninput showMovingAvgLable =Yes;\ninput price = close;\ninput length1 = 10;\ninput length2 = 20;\ninput length3 = 50;\ninput length4 = 200;\ninput displace = 0;\ninput showAvg3 = yes;\n\ninput showAvg4 = yes;\n\ninput showBreakoutSignals = no;\n\n\n\n\n#def AvgExp = ExpAverage(price[-displace], length);\nplot Avg1 = MovingAverage(averageType, price[-displace], length1);\nplot Avg2 = MovingAverage(averageType, price[-displace], length2);\nplot Avg3 = MovingAverage(averageType, price[-displace], length3);\nplot Avg4 = MovingAverage(averageType, price[-displace], length4);\n\nAvg3.setHiding(!showAvg3);\nAvg4.setHiding(!showAvg4);\n\n\n#plot SMA ( Average(price[-displace], length);\nplot UpSignal = price crosses above Avg1;\nplot DownSignal = price crosses below Avg1;\n#Add Label\n\nAddLabel(showMovingAvgLable, \&quot;  \&quot;+ length1+ \&quot;MAvg\&quot; ,Avg1.TakeValueColor ());\nAddLabel(showMovingAvgLable,  astext(Avg1), if Avg1&lt; close then Color.LIGHT_GREEN else if Avg1&gt; close then color.light_red else Color.Light_GRAY);\n\n\nAddLabel(showMovingAvgLable, \&quot;  \&quot;+ length2+ \&quot;MAvg\&quot; ,Avg2.TakeValueColor ());\nAddLabel(showMovingAvgLable,  astext(Avg2), if Avg2&lt; close then Color.LIGHT_GREEN else if Avg2&gt; close then color.light_red else Color.Light_GRAY);\n\nAddLabel(showMovingAvgLable, \&quot;  \&quot;+ length3+ \&quot;MAvg\&quot; ,Avg3.TakeValueColor ());\nAddLabel(showMovingAvgLable,  astext(Avg3), if Avg3&lt; close then Color.LIGHT_GREEN else if Avg3&gt; close then color.light_red else Color.Light_GRAY);\n\n\nAddLabel(showMovingAvgLable, \&quot;  \&quot;+ length4+ \&quot;MAvg\&quot; ,Avg4.TakeValueColor ());\nAddLabel(showMovingAvgLable,  astext(Avg4), if Avg4&lt; close then Color.LIGHT_GREEN else if Avg4&gt; close then color.light_red else Color.Light_GRAY);\n\n\n# Avg1.TakeValueColor ()\n#AddLabel(showMovingAvgLable,  length1+ \&quot;MAvg \&quot; +astext(Avg1) ,Avg1.TakeValueColor ());\n#AddLabel(showMovingAvgLable, astext(Avg1), if Avg1&lt; close then Color.GREEN else if Avg1&gt; close then color.light_red else Color.Light_GRAY);\n\n\n\n#AddLabel(showMovingAvgLable,  length2+ \&quot;MAvg \&quot;+ astext(Avg2) ,Avg2.TakeValueColor ());\n#AddLabel(showMovingAvgLable,  astext(Avg2), if Avg2&lt; close then Color.GREEN else if Avg2&gt; close then color.light_red else Color.Light_GRAY);\n#AddLabel(showMovingAvgLable,  length3+ \&quot;MAvg \&quot; +astext(Avg3),Avg3.TakeValueColor ());\n#AddLabel(showMovingAvgLable, astext(Avg3), if Avg3&lt; close then Color.GREEN else if Avg3&gt; close then color.light_red else Color.Light_GRAY);\n#AddLabel(showMovingAvgLable,  length4+ \&quot;MAvg \&quot; +astext(Avg4),Avg4.TakeValueColor ());\n#AddLabel(showMovingAvgLable, astext(Avg4), if Avg4&lt; close then Color.GREEN else if Avg4&gt; close then color.light_red else Color.Light_GRAY);\ndef bub;\nif !IsNaN(close[-1])\nthen {\n\n    bub = no;#Double.NaN;\n    \n} else {\nbub = yes;\n    \n}\ndef bubb = if  BarNumber() == 20  then yes else no;\n\ninput Show_Mavg_Key=no;\n\n#AddChartBubble(bub, Avg1, \&quot;MAvg\&quot;+ length1+ \&quot;= \&quot; + astext(Avg1), Color.LIGHT_ORANGE, no);\nAddChartBubble(bub and Show_Mavg_Key, Avg1, \&quot;MAvg\&quot;+ length1+ \&quot;= \&quot; + astext(Avg1), Avg1.TakeValueColor (), yes);\nAddChartBubble(bub and Show_Mavg_Key, Avg2, \&quot;MAvg\&quot;+ length2+ \&quot;= \&quot; + astext(Avg2), Avg2.TakeValueColor (), yes);\nAddChartBubble(bub and Show_Mavg_Key, Avg3, \&quot;MAvg\&quot;+ length3+ \&quot;= \&quot; + astext(Avg3), Avg3.TakeValueColor (), yes);\nAddChartBubble(bub and Show_Mavg_Key, Avg4, \&quot;MAvg\&quot;+ length4+ \&quot;= \&quot; + astext(Avg4), Avg4.TakeValueColor (), yes);\n\n#Vwap\ninput vwapTimeFrame = {default DAY, WEEK, MONTH};\ninput numDevDn = -2.0;\ninput numDevUp = 2.0;\n\n\ndef cap = getAggregationPeriod();\ndef errorInAggregation =\n    vwapTimeFrame == vwapTimeFrame.DAY and cap &gt;= AggregationPeriod.WEEK or\n    vwapTimeFrame == vwapTimeFrame.WEEK and cap &gt;= AggregationPeriod.MONTH;\nassert(!errorInAggregation, \&quot;timeFrame should be not less than current chart aggregation period\&quot;);\n\ndef yyyyMmDd = getYyyyMmDd();\ndef periodIndx;\nswitch (vwapTimeFrame) {\ncase DAY:\n    periodIndx = yyyyMmDd;\ncase WEEK:\n    periodIndx = Floor((daysFromDate(first(yyyyMmDd)) + getDayOfWeek(first(yyyyMmDd))) / 7);\ncase MONTH:\n    periodIndx = roundDown(yyyyMmDd / 100, 0);\n}\ndef isPeriodRolled = compoundValue(1, periodIndx != periodIndx[1], yes);\n\ndef volumeSum;\ndef volumeVwapSum;\ndef volumeVwap2Sum;\n\nif (isPeriodRolled) {\n    volumeSum = volume;\n    volumeVwapSum = volume * vwap;\n    volumeVwap2Sum = volume * Sqr(vwap);\n} else {\n    volumeSum = compoundValue(1, volumeSum[1] + volume, volume);\n    volumeVwapSum = compoundValue(1, volumeVwapSum[1] + volume * vwap, volume * vwap);\n    volumeVwap2Sum = compoundValue(1, volumeVwap2Sum[1] + volume * Sqr(vwap), volume * Sqr(vwap));\n}\ndef VWprice = volumeVwapSum / volumeSum;\ndef deviation = Sqrt(Max(volumeVwap2Sum / volumeSum - Sqr(VWprice), 0));\n\nplot VWAP = VWprice;\nplot UpperBand = VWprice + numDevUp * deviation;\nplot LowerBand = VWprice + numDevDn * deviation;\n\nVWAP.setDefaultColor(getColor(0));\nUpperBand.setDefaultColor(getColor(0));\nLowerBand.setDefaultColor(getColor(0));\n\nUpperBand.SetStyle(Curve.MEDIUM_DASH);\nLowerBand.SetStyle(Curve.MEDIUM_DASH);\n\n\n\nUpperBand.hide();\nLowerBand.hide();\n\n#vwap\n\nAddLabel(yes, \&quot;VWAP= \&quot; + astext(VWAP), if VWAP&lt; close then Color.LIGHT_GREEN else if VWAP&gt; close then color.LIGHT_red else Color.GRAY);\n#AddLabel(yes, \&quot;VWAP= \&quot; + astext(VWAP), Color.White);\ndef vwDif= close- VWAP;\nAddLabel(yes, \&quot; \&quot;+astext(vwDif), if vwDif&gt; 0 then Color.LIGHT_GREEN else if vwDif&lt; 0 then color.LIGHT_red else Color.GRAY);\n\n#RSI\ninput overBoughtRsi = 70;\ninput overSoldRsi = 30;\ninput rsiLength = 14;\ninput rsiPrice = close;\ndef rsi_val = reference RSI(length = rsiLength, price = rsiPrice );\n####\n\n\n\nAddLabel(yes, \&quot;RSI = \&quot; + astext(rsi_val) , if rsi_val &gt; overBoughtRsi  then Color.RED else if rsi_val &lt; overSoldRsi then  Color.GREEN else Color.light_GRAY);\n\n\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\nAvg1.SetDefaultColor(color.white);\nAvg2.SetDefaultColor(color.cyan);\nAvg3.SetDefaultColor(color.light_red);\nAvg4.SetDefaultColor(color.pink);\n#avg3.SetStyle(Curve.MEDIUM_DASH);\n#avg4.SetStyle(Curve.MEDIUM_DASH);\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);\n&quot;,name=&quot;_686a0d47_2dc7_4466_91d6_64cf4907bd2a&quot;}))},!get(#%2.SubgraphId(&quot;Volume&quot;)){height=80,storableIndicators.+(!%3.CompiledStudy.resolveStudy(#%4.ScriptEssence{body=&quot;# Modified by Mahi\n# Second Mod by Ramon DV\n\ndeclare on_volume;\n#v2\n#Inputs\n\ninput ShowDayAvg = yes;\ninput AvgDayVolLength = 30;\ninput ShowTodayVolume = yes;\ninput ShowTodayVolumeProjection = yes;\ninput ShowPercentOfDayAvg = yes;\ninput UnusualVolumePercent = 200;\ninput ShowBarAvg = yes;\ninput AvgBarVolLength = 30;\ninput ShowCurrentBar = yes;\ninput ShowPercentOfBarAvg = yes;\ninput ShowSellVolumePercent = yes;\ninput ShowBuyVolumePercent = yes;\ninput AvgType = AverageType.SIMPLE;\n\ndef O = open;\ndef H = high;\ndef C = close;\ndef L = low;\ndef V = volume;\n\n#def buying =  V * (C - L) / (H - L);\n#def selling = V * (H - C) / (H - L);\n\ndef buying =   V * (H - O) / (H - L) ;\ndef selling =  V * (O - L) / (H - L) ;\n\ndef O_day = open(period = AggregationPeriod.DAY);\ndef H_day = high(period = AggregationPeriod.DAY);\ndef C_day = close(period = AggregationPeriod.DAY);\ndef L_day = low(period = AggregationPeriod.DAY);\ndef V_day = volume(period = AggregationPeriod.DAY);\n#def selling_day = V_day * (H_day - C_day) / (H_day - L_day);\n#def buying_day = V_day * (C_day - L_day) / (H_day - L_day);\ndef selling_day = V_day * (H_day - O_day) / (H_day - L_day);\ndef buying_day = V_day * (O_day - L_day) / (H_day - L_day);\n# Selling Volume pressure\n\nplot SellVol = selling;\nSellVol.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);\nSellVol.SetDefaultColor(Color.RED);\nSellVol.HideTitle();\nSellVol.HideBubble();\nSellVol.SetLineWeight(5);\n\n# Total Volume\n# Buying Volume pressure\n\nplot BuyVol = buying + selling; # plot in the background of selling volume\nBuyVol.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);\nBuyVol.SetDefaultColor(Color.DARK_GREEN);\nBuyVol.HideTitle();\nBuyVol.HideBubble();\nBuyVol.SetLineWeight(5);\n\n#Volume Data\n\ndef DayVol = volume(period = “DAY”);\ndef AvgDayVol = MovingAverage(AvgType, DayVol[1], AvgDayVolLength);\ndef percentOfDay = Round((DayVol / AvgDayVol) * 100, 0);\n\n\ndef AvgBarVol = MovingAverage(AvgType, volume[1], AvgBarVolLength);\ndef percentOfBar = Round((volume / AvgBarVol) * 100, 0);\ndef SellVolPercent = Round((selling / volume) * 100, 0);\ndef BuyVolPercent = 100 - SellVolPercent;\n\ndef SellVolPercent_day = Round((selling_day / V_day) * 100, 0);\ndef BuyVolPercent_day = 100 - SellVolPercent_day;\n\n# Labels\n\nAddLabel(ShowDayAvg, \&quot;Avg “ + AvgDayVolLength + “ Days: \&quot; + Round(AvgDayVol, 0), Color.LIGHT_GRAY);\n\nAddLabel(ShowTodayVolume, \&quot;Today: \&quot; + DayVol, (if percentOfDay &gt;= UnusualVolumePercent then Color.GREEN else if percentOfDay &gt;= 100 then Color.ORANGE else Color.LIGHT_GRAY));\n\nAddLabel(ShowPercentOfDayAvg, percentOfDay + \&quot;%\&quot;, (if percentOfDay &gt;= UnusualVolumePercent then Color.GREEN else if percentOfDay &gt;= 100 then Color.ORANGE else Color.WHITE) );\n\nAddLabel(ShowBarAvg, \&quot;Avg “ + AvgBarVolLength + ” Bars: \&quot; + Round(AvgBarVol, 0), Color.LIGHT_GRAY);\n\nAddLabel(ShowCurrentBar, \&quot;Cur Bar: \&quot; + volume, (if percentOfBar &gt;= UnusualVolumePercent then Color.GREEN else if percentOfBar &gt;= 100 then Color.ORANGE else Color.LIGHT_GRAY));\n\nAddLabel(ShowPercentOfBarAvg, percentOfBar + \&quot;%\&quot;, (if percentOfBar &gt;= UnusualVolumePercent then Color.GREEN else if percentOfBar &gt;= 100 then Color.ORANGE else Color.WHITE) );\n\n\nAddLabel(ShowSellVolumePercent and (SellVolPercent &gt; BuyVolPercent) , \&quot;Cur Bar Sell %: \&quot; + SellVolPercent, if SellVolPercent &gt; BuyVolPercent then Color.RED else Color.GRAY);\nAddLabel(ShowBuyVolumePercent and (SellVolPercent &lt;= BuyVolPercent), \&quot;Cur Bar Buy %: \&quot; + BuyVolPercent, if BuyVolPercent &gt; SellVolPercent then Color.GREEN else Color.GRAY);\n\n\n# PriceOpen.Hide();\ninput length = 50;\n\nplot Vol = volume;\nplot VolAvg = Average(volume, length);\n\nVol.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);\nVol.SetLineWeight(3);\nVol.DefineColor(\&quot;Up\&quot;, Color.UPTICK);\nVol.DefineColor(\&quot;Down\&quot;, Color.DOWNTICK);\nVol.AssignValueColor(if close &gt; close[1] then Vol.Color(\&quot;Up\&quot;) else if close &lt; close[1] then Vol.Color(\&quot;Down\&quot;) else GetColor(1));\nVolAvg.SetDefaultColor(GetColor(8));\n\n\n#########################################################\n\n#def rth = (RegularTradingEnd(GetYYYYMMDD()) - RegularTradingStart(GetYYYYMMDD())) / AggregationPeriod.HOUR;\ndef rth = (RegularTradingEnd(GetYYYYMMDD()) - RegularTradingStart(GetYYYYMMDD())) / AggregationPeriod.MIN;\ndef MarketNotClosed = GetTime() &lt;= RegularTradingEnd (GetYYYYMMDD());\n# def eod = ((  RegularTradingEnd (GetYYYYMMDD()) - GetTime() ) / AggregationPeriod.MIN);\ndef eod = if MarketNotClosed then ((  RegularTradingEnd (GetYYYYMMDD()) - GetTime() ) / AggregationPeriod.MIN) else ((  RegularTradingEnd (GetYYYYMMDD())  ) / AggregationPeriod.MIN);\n\ndef DayVol_Projetion = volume(period = “DAY”) * rth / (rth - eod);\ndef percentOfDayProjection = Round((DayVol_Projetion / AvgDayVol) * 100, 0);\nAddLabel(ShowBuyVolumePercent, \&quot;Day Buy %: \&quot; + BuyVolPercent_day, if BuyVolPercent_day &gt; SellVolPercent_day then Color.GREEN else Color.GRAY);\n\nAddLabel(ShowTodayVolumeProjection, \&quot;Est. Vol: \&quot; + Round(DayVol_Projetion, 0) , if DayVol_Projetion &gt; AvgDayVol * 1.5  then Color.GREEN else Color.GRAY);\n\nAddLabel(ShowTodayVolumeProjection,  percentOfDayProjection  + \&quot;%\&quot;, if DayVol_Projetion &gt; AvgDayVol * 1.5  then Color.GREEN else Color.GRAY);\n\ndef y = GetTime() / AggregationPeriod.MIN;\n#eod =2;\n#AddLabel(yes, \&quot;RTH duration (min): \&quot; + rth);\n#AddLabel(yes, \&quot;EOD duration (min): \&quot; + eod);\n#AddLabel(yes, \&quot;Market Not closed: \&quot; + y);\n\n#######&quot;,name=&quot;_5261aedd_9830_4f97_bb0c_d3f9282e8428&quot;}))},^(#%2.SubgraphId(&quot;Subgraph1&quot;),#%2.SubgraphStorableModel{height=177,storableIndicators.+(!%3.CompiledStudy.resolveStudy(#%4.ScriptEssence{body=&quot;declare lower;\ninput aggregationPeriod1 = AggregationPeriod.THIRTY_MIN;\n\ninput useOpen =yes;\ndef price = if (useOpen) then   open(period = aggregationPeriod1) else close(period = aggregationPeriod1) ;\n\ninput over_bought = 40.0;\ninput over_sold = -40.0;\ninput percentDLength = 3;\ninput percentKLength = 5;\n\ndef min_low = Lowest(low (period = aggregationPeriod1), percentKLength);\ndef max_high = Highest(high (period = aggregationPeriod1), percentKLength);\ndef rel_diff = price - (max_high + min_low) / 2;\ndef diff = max_high - min_low;\n\ndef avgrel = ExpAverage(ExpAverage(rel_diff, percentDLength), percentDLength);\ndef avgdiff = ExpAverage(ExpAverage(diff, percentDLength), percentDLength);\n\nplot SMI = if avgdiff != 0 then avgrel / (avgdiff / 2) * 100 else 0;\nSMI.SetDefaultColor(GetColor(1));\n\nplot AvgSMI = ExpAverage(SMI, percentDLength);\nAvgSMI.SetDefaultColor(GetColor(5));\n\nplot overbought = over_bought;\noverbought.SetDefaultColor(GetColor(5));\n\nplot oversold = over_sold;\noversold.SetDefaultColor(GetColor(5));\n\n\n\n#RSI\ninput overBoughtRsi = 70;\ninput overSoldRsi = 30;\ninput rsiLength = 14;\ninput  rsiPrice = close;\nplot rsi_val = reference RSI(length = rsiLength, price = rsiPrice );\n####\n\n\n\nAddLabel(yes, \&quot;RSI = \&quot; + rsi_val , if rsi_val &gt; overBoughtRsi  then Color.RED else if rsi_val &lt; overSoldRsi then  Color.GREEN else Color.GRAY);\n\n\n\n#trend reversal\ndef y = rsi_val ;\ninput riReversLength = 2;\ninput lookBack = 2;\n\n\ndef rsi_expAvg = ExpAverage(rsi_val, riReversLength);\n\n#trend reversal\ndef overBoughtReversal = if ((rsi_expAvg &gt; overBoughtRsi)within 2 bar) and  (rsi_expAvg crosses above rsi_val) then price else 0;# if (rsi_expAvg &gt; OverBought and  rsi_expAvg crosses above rsi_val  within 3 bar ) then 40 else 0;\ndef oversoldRevesal = if ((rsi_expAvg &lt; overSoldRsi)within 2 bar) and  (rsi_expAvg crosses below rsi_val within 2 bar) then price else 0;\n\n##############\n########!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n#vwap vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\n#input numDevUp = 2.0;\ninput vwapTimeFrame = {default DAY, WEEK, MONTH};\n\ndef cap = GetAggregationPeriod();\ndef errorInAggregation =\n    vwapTimeFrame == vwapTimeFrame.DAY and cap &gt;= AggregationPeriod.WEEK or\n    vwapTimeFrame == vwapTimeFrame.WEEK and cap &gt;= AggregationPeriod.MONTH;\nAssert(!errorInAggregation, \&quot;timeFrame should be not less than current chart aggregation period\&quot;);\n\ndef yyyyMmDd = GetYYYYMMDD();\ndef periodIndx;\nswitch (vwapTimeFrame) {\ncase DAY:\n    periodIndx = yyyyMmDd;\ncase WEEK:\n    periodIndx = Floor((DaysFromDate(First(yyyyMmDd)) + GetDayOfWeek(First(yyyyMmDd))) / 7);\ncase MONTH:\n    periodIndx = RoundDown(yyyyMmDd / 100, 0);\n}\ndef isPeriodRolled = CompoundValue(1, periodIndx != periodIndx[1], yes);\n\ndef volumeSum;\ndef volumeVwapSum;\ndef volumeVwap2Sum;\n\nif (isPeriodRolled) {\n    volumeSum = volume;\n    volumeVwapSum = volume * vwap;\n    volumeVwap2Sum = volume * Sqr(vwap);\n} else {\n    volumeSum = CompoundValue(1, volumeSum[1] + volume, volume);\n    volumeVwapSum = CompoundValue(1, volumeVwapSum[1] + volume * vwap, volume * vwap);\n    volumeVwap2Sum = CompoundValue(1, volumeVwap2Sum[1] + volume * Sqr(vwap), volume * Sqr(vwap));\n}\ndef vWapprice = volumeVwapSum / volumeSum;\ndef deviation = Sqrt(Max(volumeVwap2Sum / volumeSum - Sqr(vWapprice), 0));\n\ndef VWAP = vWapprice;\ninput numDevUp = 2.0;\ninput numDevDn = -2.0;\n\ndef vwap_UpperBand = price + numDevUp * deviation;\ndef vwap_LowerBand = price + numDevDn * deviation;\n\ninput vwapCondition = no;\n#input vp=close;\ndef conVwapBuy = if  vwapCondition then  close &gt;= VWAP else 1;\n\n#####^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n#MACD\n\ninput fastLength = 12;\ninput slowLength = 26;\ninput MACDLength = 9;\ninput displace = 0;\ndef fastAvg = Sum(volume * price, fastLength) / Sum(volume, fastLength);\ndef slowAvg = Sum(volume * price, slowLength) / Sum(volume, slowLength);\ndef Value = fastAvg - slowAvg;\ndef Avg = ExpAverage(Value, MACDLength);\ndef MACD_Diff  = Value - Avg;\n#def ZeroLine = 0;\n\ninput def_cond = no;\ndef MACD_cond_logic = if (def_cond) then MACD_Diff &lt;= 0 else yes;\n\n\n#MACD Pivot reversal\n#input FilterLength=3;\n######################\n#def MACDV_Diff_expAvg = ExpAverage(MACD_Diff, FilterLength);\n#plot oversoldRevesalMACDV =if ((Diff_MACDV &lt; MacdZeroLine)within lookBack bar) and  ( Diff_MACDV crosses above   MACDV_Diff_expAvg within lookBack bar)and Diff_MACDV &gt; Diff_MACDV[1] then 1 else 0;# if (MACDV_Diff_expAvg &gt; OverBought and  MACDV_Diff_expAvg crosses above rsi_val  within 3 bar ) then 40 else 0;\n#plot overBoughtReversalMACDV = if ((Diff_MACDV &gt; MacdZeroLine)within lookBack bar) and  (MACDV_Diff_expAvg crosses above  Diff_MACDV  within lookBack bar)  and Diff_MACDV &lt; Diff_MACDV[1] and Diff_MACDV&gt;0 then 1 else 0;\n\n\n#trend Pivot reversal\ndef twoBarPivotMACD_Buy =  MACD_Diff &gt; MACD_Diff[1] and MACD_Diff[1] &gt; MACD_Diff[2] and MACD_Diff[2] &lt; MACD_Diff[3] and MACD_Diff[3] &lt; MACD_Diff [4];\ndef twoBarPivotMACD_Sell = MACD_Diff &lt; MACD_Diff[1] and MACD_Diff[1] &lt; MACD_Diff[2] and MACD_Diff[2] &gt; MACD_Diff[3] and MACD_Diff[3] &gt; MACD_Diff [4];\n###################\n\n\ndef uptrend = if price &gt; price[1] and price[1] &gt;= price[2] then 1 else 0;\n\n#####################################-----------------\n\ninput aggPeriod = AggregationPeriod.DAY;\ninput AvgType = AverageType.SIMPLE;\ninput short_len = 10;\ninput mid_len = 21;\ninput long_len = 50;\ninput moving_average = no;\ndef AVG1 = MovingAverage(AvgType, close(period = aggPeriod), short_len);\ndef AVG2 = MovingAverage(AvgType, close(period = aggPeriod), mid_len);\ndef AVG3 = MovingAverage(AvgType, close(period = aggPeriod), long_len);\n#def EMA_condition = if moving_average then (close &gt; AVG1 or close &gt; AVG2 or  close &gt; AVG3) else yes;\ndef EMA_condition = if moving_average then (close &gt; AVG1 ) else yes;\n\nAddLabel( yes, Concat(short_len + \&quot;MA = \&quot;, AVG1), Color.CYAN);\nAddLabel( yes, Concat(mid_len + \&quot;MA = \&quot;, AVG2), Color.LIGHT_ORANGE);\nAddLabel( yes, Concat(long_len + \&quot;MA = \&quot;, AVG3), Color.PINK);\n\n\n\n##############################################\n#@@@@\n#ADX\ninput adxLength = 14;\ninput adxAverageType = AverageType.WILDERS;\n\ndef ADX = DMI(adxLength, adxAverageType).ADX;\n#ADX.setDefaultColor(GetColor(5));\n\ninput length = 7;\ninput signalLength = 10;\ninput averageType = AverageType.WEIGHTED;\ninput averageTypeSignal = AverageType.EXPONENTIAL;\n\n\n\ndef Ref = ADX;# reference OnBalanceVolume();\nplot RefMoving = MovingAverage(averageType, Ref, length);\nplot Signal = MovingAverage(averageTypeSignal, RefMoving, signalLength);\nplot dif =  Ref - RefMoving;\n#Ref.SetDefaultColor(GetColor(4));\nRefMoving.SetDefaultColor(GetColor(8));\nSignal.SetDefaultColor(GetColor(2));\ndif.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);\ndif.SetLineWeight(3);\n\n\ndif.DefineColor(\&quot;Positive and Up\&quot;, Color.CYAN);\ndif.DefineColor(\&quot;Positive and Down\&quot;, Color.BLUE);\ndif.DefineColor(\&quot;Negative and Down\&quot;, Color.RED);\ndif.DefineColor(\&quot;Negative and Up\&quot;, Color.YELLOW);\ndif.AssignValueColor(if dif &gt;= 0 then if dif &gt; dif[1] then dif.Color(\&quot;Positive and Up\&quot;) else dif.Color(\&quot;Positive and Down\&quot;) else if dif &lt; dif[1] then dif.Color(\&quot;Negative and Down\&quot;) else dif.Color(\&quot;Negative and Up\&quot;));\n\n\n#@@@@@\n###################################\ndef SMI_ADX_Buy_Signal;\nif GetAggregationPeriod() &lt; AggregationPeriod.FIFTEEN_MIN\nthen\n{\n    SMI_ADX_Buy_Signal = if ( (SMI crosses above AvgSMI  within lookBack bar) and (Ref crosses above RefMoving within lookBack bar) and dif &gt;= 0 and (rsi_val &gt; overSoldRsi and rsi_val &lt; 60 ) and MACD_cond_logic and  EMA_condition) and Ref &gt; Ref[2] then 1 else 0;\n\n}\nelse {\n    SMI_ADX_Buy_Signal = 0;\n}\nplot buy6 = SMI_ADX_Buy_Signal;\n\n\ndef SMI_Buy_Signal = if ( (SMI crosses above overbought  within lookBack bar) and SMI &gt;  AvgSMI and (rsi_val &gt; overSoldRsi and rsi_val &lt; overBoughtRsi + 10 ) and MACD_cond_logic and  EMA_condition) and  (uptrend) then 1 else 0;\nplot buy2 = SMI_Buy_Signal;\n\n#def  buySvix_Signal = if ( MACD_cond_logic  and  EMA_condition and  oversoldRevesal  and buySvix &lt; Zeroline - 10 ) then 1 else 0;\n#plot buy3 = buySvix_Signal;\n\n\n\n\n\n\ndef SMI_Sell_Signal = if ( (SMI crosses below AvgSMI within lookBack bar) and (overBoughtReversal)) then 1 else 0;\n#def sellSignal2 = if ((rsi_val  &gt; overBoughtRsi within 3 bar) and (smi crosses below AvgSMI within 3 bar)) then 1 else 0;\n\n\nplot sell2 = SMI_Sell_Signal;\n\n#######\n\n#def FVE_buySignal = conVwapBuy and oversoldRevesal and pFVE_Bull  and MACD_cond_logic ;# and Diff &gt;= 0;\n#def sig_buy = pFVE_Bull and Diff &gt;= 0;\n#plot buy4 = FVE_buySignal ;\n\n\n#def FVE_sellSignal = overBoughtReversal and pFVE_Bear ;\n#plot sell4 = FVE_sellSignal;\nplot buy5 = twoBarPivotMACD_Buy and oversoldRevesal;\nplot sell5 = twoBarPivotMACD_Sell and overBoughtReversal;\n\n####\n#def buySignal2 = if (oversoldRevesal  and buythedip2 &lt; Zeroline ) then 1 else 0;\n\n#def buySignal3 = if ( oversoldRevesal  and buythedip3 &lt; Zeroline - 10 ) then 1 else 0;\n#plot buy3 = buySignal3;\n\nAddChartBubble(buy2 == 1, buy2, \&quot;B2SMI= \&quot; +  low[1] + \&quot; rsi \&quot; + rsi_val + \&quot; w \&quot; + VWAP[1], Color.LIGHT_ORANGE, no);\n#AddChartBubble(buy3 == 1, buy3,  \&quot;B3Svix= \&quot; + price + \&quot; rsi \&quot; + rsi_val, Color.LIGHT_GRAY, no);\n#AddChartBubble(buy4 == 1, buy4,  \&quot;B4FVE= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.YELLOW, no);\nAddChartBubble(buy5 == 1, buy5,  \&quot;B5Macd= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.CYAN, no);\nAddChartBubble(buy6 == 1, buy6,  \&quot;B5AdxSMI= \&quot; + price + \&quot; \\nrsi \&quot; + rsi_val[lookBack] + \&quot; \\nAdx \&quot; + Ref[lookBack], Color.GREEN, no);\n\n#AddChartBubble(sell1 == 1, sell1, \&quot;S1STR= \&quot; + price + \&quot; rsi \&quot; + rsi_val, Color.LIGHT_RED, no);#Buy the Dip\n\nAddChartBubble(sell2 == 1, sell2, \&quot;S2SMI= \&quot; + price + \&quot; rsi \&quot; + rsi_val, Color.PINK, no);#Buy the Dip\n#AddChartBubble(sell4 == 1, sell4, \&quot;S4FVE= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.VIOLET, no);#Buy the Dip\nAddChartBubble(sell5 == 1, sell5, \&quot;S5Macd= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.BLUE, no);#Buy the Dip\n#AddChartBubble(oversoldRevesal , close, rsi_val, Color.blue, no);#Buy the Dip\nplot scan = buy2;&quot;,name=&quot;_895e3e9a_2bdf_4c37_bc8e_713002a58848&quot;}){inputsMap:TreeMap0{^(&quot;aggregationPeriod1&quot;,&quot;WEEK&quot;),^(&quot;rsiPrice&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap0,plots{4:{hiding=&lt;T},5:{hiding=&lt;T},6:{hiding=&lt;T},7:{hiding=&lt;T}}})}),^(#%2.SubgraphId(&quot;Subgraph7&quot;),#%2.SubgraphStorableModel{height=177,storableIndicators.+(!%3.CompiledStudy.resolveStudy(#%4.ScriptEssence{body=&quot;declare lower;\n\ninput price = close;\n\ninput over_bought = 40.0;\ninput over_sold = -40.0;\ninput percentDLength = 3;\ninput percentKLength = 5;\n\ndef min_low = Lowest(low, percentKLength);\ndef max_high = Highest(high, percentKLength);\ndef rel_diff = price - (max_high + min_low) / 2;\ndef diff = max_high - min_low;\n\ndef avgrel = ExpAverage(ExpAverage(rel_diff, percentDLength), percentDLength);\ndef avgdiff = ExpAverage(ExpAverage(diff, percentDLength), percentDLength);\n\nplot SMI = if avgdiff != 0 then avgrel / (avgdiff / 2) * 100 else 0;\nSMI.SetDefaultColor(GetColor(1));\n\nplot AvgSMI = ExpAverage(SMI, percentDLength);\nAvgSMI.SetDefaultColor(GetColor(5));\n\nplot overbought = over_bought;\noverbought.SetDefaultColor(GetColor(5));\n\nplot oversold = over_sold;\noversold.SetDefaultColor(GetColor(5));\n\n\n\n#RSI\ninput overBoughtRsi = 70;\ninput overSoldRsi = 30;\ninput rsiLength = 14;\ninput rsiPrice = close;\ndef rsi_val = reference RSI(length = rsiLength, price = rsiPrice );\n####\n\n\n\nAddLabel(yes, \&quot;RSI = \&quot; + rsi_val , if rsi_val &gt; overBoughtRsi  then Color.RED else if rsi_val &lt; overSoldRsi then  Color.GREEN else Color.GRAY);\n\n\n\n#trend reversal\ndef y = rsi_val ;\ninput riReversLength = 2;\ninput lookBack = 2;\n\n\ndef rsi_expAvg = ExpAverage(rsi_val, riReversLength);\n\n#trend reversal\ndef overBoughtReversal = if ((rsi_expAvg &gt; overBoughtRsi)within 2 bar) and  (rsi_expAvg crosses above rsi_val) then price else 0;# if (rsi_expAvg &gt; OverBought and  rsi_expAvg crosses above rsi_val  within 3 bar ) then 40 else 0;\ndef oversoldRevesal = if ((rsi_expAvg &lt; overSoldRsi)within 2 bar) and  (rsi_expAvg crosses below rsi_val within 2 bar) then price else 0;\n\n##############\n########!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n#vwap vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\n#input numDevUp = 2.0;\ninput vwapTimeFrame = {default DAY, WEEK, MONTH};\n\ndef cap = GetAggregationPeriod();\ndef errorInAggregation =\n    vwapTimeFrame == vwapTimeFrame.DAY and cap &gt;= AggregationPeriod.WEEK or\n    vwapTimeFrame == vwapTimeFrame.WEEK and cap &gt;= AggregationPeriod.MONTH;\nAssert(!errorInAggregation, \&quot;timeFrame should be not less than current chart aggregation period\&quot;);\n\ndef yyyyMmDd = GetYYYYMMDD();\ndef periodIndx;\nswitch (vwapTimeFrame) {\ncase DAY:\n    periodIndx = yyyyMmDd;\ncase WEEK:\n    periodIndx = Floor((DaysFromDate(First(yyyyMmDd)) + GetDayOfWeek(First(yyyyMmDd))) / 7);\ncase MONTH:\n    periodIndx = RoundDown(yyyyMmDd / 100, 0);\n}\ndef isPeriodRolled = CompoundValue(1, periodIndx != periodIndx[1], yes);\n\ndef volumeSum;\ndef volumeVwapSum;\ndef volumeVwap2Sum;\n\nif (isPeriodRolled) {\n    volumeSum = volume;\n    volumeVwapSum = volume * vwap;\n    volumeVwap2Sum = volume * Sqr(vwap);\n} else {\n    volumeSum = CompoundValue(1, volumeSum[1] + volume, volume);\n    volumeVwapSum = CompoundValue(1, volumeVwapSum[1] + volume * vwap, volume * vwap);\n    volumeVwap2Sum = CompoundValue(1, volumeVwap2Sum[1] + volume * Sqr(vwap), volume * Sqr(vwap));\n}\ndef vWapprice = volumeVwapSum / volumeSum;\ndef deviation = Sqrt(Max(volumeVwap2Sum / volumeSum - Sqr(vWapprice), 0));\n\ndef VWAP = vWapprice;\ninput numDevUp = 2.0;\ninput numDevDn = -2.0;\n\ndef vwap_UpperBand = price + numDevUp * deviation;\ndef vwap_LowerBand = price + numDevDn * deviation;\n\ninput vwapCondition = no;\n#input vp=close;\ndef conVwapBuy = if  vwapCondition then  close &gt;= VWAP else 1;\n\n#####^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n#MACD\n\ninput fastLength = 12;\ninput slowLength = 26;\ninput MACDLength = 9;\ninput displace = 0;\ndef fastAvg = Sum(volume * price, fastLength) / Sum(volume, fastLength);\ndef slowAvg = Sum(volume * price, slowLength) / Sum(volume, slowLength);\ndef Value = fastAvg - slowAvg;\ndef Avg = ExpAverage(Value, MACDLength);\ndef MACD_Diff  = Value - Avg;\n#def ZeroLine = 0;\n\ninput def_cond = no;\ndef MACD_cond_logic = if (def_cond) then MACD_Diff &lt;= 0 else yes;\n\n\n#MACD Pivot reversal\n#input FilterLength=3;\n######################\n#def MACDV_Diff_expAvg = ExpAverage(MACD_Diff, FilterLength);\n#plot oversoldRevesalMACDV =if ((Diff_MACDV &lt; MacdZeroLine)within lookBack bar) and  ( Diff_MACDV crosses above   MACDV_Diff_expAvg within lookBack bar)and Diff_MACDV &gt; Diff_MACDV[1] then 1 else 0;# if (MACDV_Diff_expAvg &gt; OverBought and  MACDV_Diff_expAvg crosses above rsi_val  within 3 bar ) then 40 else 0;\n#plot overBoughtReversalMACDV = if ((Diff_MACDV &gt; MacdZeroLine)within lookBack bar) and  (MACDV_Diff_expAvg crosses above  Diff_MACDV  within lookBack bar)  and Diff_MACDV &lt; Diff_MACDV[1] and Diff_MACDV&gt;0 then 1 else 0;\n\n\n#trend Pivot reversal\ndef twoBarPivotMACD_Buy =  MACD_Diff &gt; MACD_Diff[1] and MACD_Diff[1] &gt; MACD_Diff[2] and MACD_Diff[2] &lt; MACD_Diff[3] and MACD_Diff[3] &lt; MACD_Diff [4];\ndef twoBarPivotMACD_Sell = MACD_Diff &lt; MACD_Diff[1] and MACD_Diff[1] &lt; MACD_Diff[2] and MACD_Diff[2] &gt; MACD_Diff[3] and MACD_Diff[3] &gt; MACD_Diff [4];\n###################\n\n\ndef uptrend = if price &gt; price[1] and price[1] &gt;= price[2] then 1 else 0;\n\n#####################################-----------------\n\ninput aggPeriod = AggregationPeriod.DAY;\ninput AvgType = AverageType.SIMPLE;\ninput short_len = 10;\ninput mid_len = 21;\ninput long_len = 50;\ninput moving_average = no;\ndef AVG1 = MovingAverage(AvgType, close(period = aggPeriod), short_len);\ndef AVG2 = MovingAverage(AvgType, close(period = aggPeriod), mid_len);\ndef AVG3 = MovingAverage(AvgType, close(period = aggPeriod), long_len);\n#def EMA_condition = if moving_average then (close &gt; AVG1 or close &gt; AVG2 or  close &gt; AVG3) else yes;\ndef EMA_condition = if moving_average then (close &gt; AVG1 ) else yes;\n\nAddLabel( yes, Concat(short_len + \&quot;MA = \&quot;, AVG1), Color.CYAN);\nAddLabel( yes, Concat(mid_len + \&quot;MA = \&quot;, AVG2), Color.LIGHT_ORANGE);\nAddLabel( yes, Concat(long_len + \&quot;MA = \&quot;, AVG3), Color.PINK);\n\n\n\n##############################################\n#@@@@\n#ADX\ninput adxLength = 14;\ninput adxAverageType = AverageType.WILDERS;\n\ndef ADX = DMI(adxLength, adxAverageType).ADX;\n#ADX.setDefaultColor(GetColor(5));\n\ninput length = 7;\ninput signalLength = 10;\ninput averageType = AverageType.WEIGHTED;\ninput averageTypeSignal = AverageType.EXPONENTIAL;\n\n\n\ndef Ref = ADX;# reference OnBalanceVolume();\nplot RefMoving = MovingAverage(averageType, Ref, length);\nplot Signal = MovingAverage(averageTypeSignal, RefMoving, signalLength);\nplot dif =  Ref - RefMoving;\n#Ref.SetDefaultColor(GetColor(4));\nRefMoving.SetDefaultColor(GetColor(8));\nSignal.SetDefaultColor(GetColor(2));\ndif.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);\ndif.SetLineWeight(3);\n\n\ndif.DefineColor(\&quot;Positive and Up\&quot;, Color.CYAN);\ndif.DefineColor(\&quot;Positive and Down\&quot;, Color.BLUE);\ndif.DefineColor(\&quot;Negative and Down\&quot;, Color.RED);\ndif.DefineColor(\&quot;Negative and Up\&quot;, Color.YELLOW);\ndif.AssignValueColor(if dif &gt;= 0 then if dif &gt; dif[1] then dif.Color(\&quot;Positive and Up\&quot;) else dif.Color(\&quot;Positive and Down\&quot;) else if dif &lt; dif[1] then dif.Color(\&quot;Negative and Down\&quot;) else dif.Color(\&quot;Negative and Up\&quot;));\n\n\n#@@@@@\n###################################\ndef SMI_ADX_Buy_Signal;\nif GetAggregationPeriod() &lt; AggregationPeriod.FIFTEEN_MIN\nthen\n{\n    SMI_ADX_Buy_Signal = if ( (SMI crosses above AvgSMI  within lookBack bar) and (Ref crosses above RefMoving within lookBack bar) and dif &gt;= 0 and (rsi_val &gt; overSoldRsi and rsi_val &lt; 60 ) and MACD_cond_logic and  EMA_condition) and Ref &gt; Ref[2] then 1 else 0;\n\n}\nelse {\n    SMI_ADX_Buy_Signal = 0;\n}\nplot buy6 = SMI_ADX_Buy_Signal;\n\n\ndef SMI_Buy_Signal = if ( (AvgSMI crosses above overbought  within lookBack bar) and SMI &gt;  AvgSMI and (rsi_val &gt; overSoldRsi and rsi_val &lt; overBoughtRsi + 10 ) and MACD_cond_logic and  EMA_condition) and (close[1] &gt;= VWAP[1] and close &gt;= vwap_UpperBand[1]) and (uptrend) then 1 else 0;\nplot buy2 = SMI_Buy_Signal;\n\n#def  buySvix_Signal = if ( MACD_cond_logic  and  EMA_condition and  oversoldRevesal  and buySvix &lt; Zeroline - 10 ) then 1 else 0;\n#plot buy3 = buySvix_Signal;\n\n\n\n\n\n\ndef SMI_Sell_Signal = if ( (SMI crosses below AvgSMI within lookBack bar) and (overBoughtReversal)) then 1 else 0;\n#def sellSignal2 = if ((rsi_val  &gt; overBoughtRsi within 3 bar) and (smi crosses below AvgSMI within 3 bar)) then 1 else 0;\n\n\nplot sell2 = SMI_Sell_Signal;\n\n#######\n\n#def FVE_buySignal = conVwapBuy and oversoldRevesal and pFVE_Bull  and MACD_cond_logic ;# and Diff &gt;= 0;\n#def sig_buy = pFVE_Bull and Diff &gt;= 0;\n#plot buy4 = FVE_buySignal ;\n\n\n#def FVE_sellSignal = overBoughtReversal and pFVE_Bear ;\n#plot sell4 = FVE_sellSignal;\nplot buy5 = twoBarPivotMACD_Buy and oversoldRevesal;\nplot sell5 = twoBarPivotMACD_Sell and overBoughtReversal;\n\n####\n#def buySignal2 = if (oversoldRevesal  and buythedip2 &lt; Zeroline ) then 1 else 0;\n\n#def buySignal3 = if ( oversoldRevesal  and buythedip3 &lt; Zeroline - 10 ) then 1 else 0;\n#plot buy3 = buySignal3;\n\nAddChartBubble(buy2 == 1, buy2, \&quot;B2SMI= \&quot; +  low[1] + \&quot; rsi \&quot; + rsi_val + \&quot; w \&quot; + VWAP[1], Color.LIGHT_ORANGE, no);\n#AddChartBubble(buy3 == 1, buy3,  \&quot;B3Svix= \&quot; + price + \&quot; rsi \&quot; + rsi_val, Color.LIGHT_GRAY, no);\n#AddChartBubble(buy4 == 1, buy4,  \&quot;B4FVE= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.YELLOW, no);\nAddChartBubble(buy5 == 1, buy5,  \&quot;B5Macd= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.CYAN, no);\nAddChartBubble(buy6 == 1, buy6,  \&quot;B5AdxSMI= \&quot; + price + \&quot; \\nrsi \&quot; + rsi_val[lookBack] + \&quot; \\nAdx \&quot; + Ref[lookBack], Color.GREEN, no);\n\n#AddChartBubble(sell1 == 1, sell1, \&quot;S1STR= \&quot; + price + \&quot; rsi \&quot; + rsi_val, Color.LIGHT_RED, no);#Buy the Dip\n\nAddChartBubble(sell2 == 1, sell2, \&quot;S2SMI= \&quot; + price + \&quot; rsi \&quot; + rsi_val, Color.PINK, no);#Buy the Dip\n#AddChartBubble(sell4 == 1, sell4, \&quot;S4FVE= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.VIOLET, no);#Buy the Dip\nAddChartBubble(sell5 == 1, sell5, \&quot;S5Macd= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.BLUE, no);#Buy the Dip\n#AddChartBubble(oversoldRevesal , close, rsi_val, Color.blue, no);#Buy the Dip\nplot scan = buy2;&quot;,name=&quot;_d344cec2_79a9_43f5_8e27_7e658f475446&quot;}))})}}" SYMBOL="INTC" SYMBOL_GROUP="-1" VERTICAL="false" VISIBLE="true" WEIGHT="1.0"/>
            <CHART_2 VERTICAL="false" VISIBLE="false" WEIGHT="3.0"/>
            <CHART_3 VERTICAL="false" VISIBLE="false" WEIGHT="3.0"/>
            <DASHBOARD VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <LEVEL_II VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <LIVE_NEWS VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <PHASE_SCORES VERTICAL="false" VISIBLE="false" WEIGHT="2.0"/>
            <TIME_SALES VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <TRADE CONFIGURATION_NAME="SINGLE" ORDER_RULES_SET="STOCK" ORDER_TYPE="LIMIT" OS_AUTO="false" OS_EXPANDED="false" OS_TIF="DAY" QTY="100.0" TEMPLATE="SINGLE" TRADE_BUTTONS="BUY_MKT;SELL_MKT;MULTI_CANCEL;REVERSE;FLAT;SECOND_LINE;QUANTITY;AUTO_SEND;ORDER_SETUP" VISIBLE="false">
              <OCO_STOP>
                <TRG_0 TRG_ENBL="true" TRG_LINK="ASK_BID" TRG_OFFSET_MODE="TICK" TRG_OT="STOP" TRG_SETUP="10.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL INTC="10.0"/>
                </TRG_0>
              </OCO_STOP>
              <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="1.0" TRG_TIF="DAY">
                <OFFSET_PER_SYMBOL INTC="1.0"/>
              </TRG_0>
              <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-1.0" TRG_TIF="DAY">
                <OFFSET_PER_SYMBOL INTC="-1.0"/>
              </TRG_1>
              <_2>
                <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="2.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL INTC="2.0"/>
                </TRG_0>
                <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-2.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL INTC="-2.0"/>
                </TRG_1>
              </_2>
              <_3>
                <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="3.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL INTC="3.0"/>
                </TRG_0>
                <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-3.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL INTC="-3.0"/>
                </TRG_1>
              </_3>
            </TRADE>
          </ACT_TRD_CELL3>
          <ACT_TRD_CELL4 ROWSPANELWEIGHT="1.0" ROWWEIGHT0="1.0" ROWWEIGHT1="1.0" SELECTED_TYPE="CHART" SIDEBAR_IS_ACTIVE="true" SYMBOL="AAPL" SYMBOL_GROUP="5" TRADE_BUTTONS_MIGRATED="true">
            <ACTIVETRADER VERTICAL="false" VISIBLE="false" WEIGHT="2.0"/>
            <BIG_BUTTONS VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <CHART CONFIGURATION="@v8@%0:com.devexperts.toschart.model,1:com.devexperts.tos.chartdata,2:com.devexperts.tos.thinkscript.data,3:java.awt,4:com.devexperts.toschart.control.subgraph,5:com.devexperts.toschart.elstudies,6:com.devexperts.toschart.script%owner{chartAggregationPeriods:ChartAggregationPeriodArray0{17::ChartAggregationPeriod0,15::ChartAggregationPeriod1},chartAggregationPeriods=@ChartAggregationPeriodArray0}#com.devexperts.toschart.core.ChartModel{encodedMixinsState=&quot;{\&quot;common\&quot;:{\&quot;DRAWING_SETS\&quot;:\&quot;{}\&quot;},\&quot;state_props\&quot;:{\&quot;state_type\&quot;:\&quot;REGULAR\&quot;},\&quot;monkey_bars_exp\&quot;:{\&quot;LikefolioMixin\&quot;:\&quot;{\\\&quot;paintingSettings\\\&quot;:{\\\&quot;neutralSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;positiveSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;negativeSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;sentimentSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true}},\\\&quot;shownDivisions\\\&quot;:[],\\\&quot;allDivisions\\\&quot;:[]}\&quot;},\&quot;monkey_bars\&quot;:{},\&quot;seasonality\&quot;:{},\&quot;regular\&quot;:{\&quot;DescriberMixin\&quot;:\&quot;{\\\&quot;visibility\\\&quot;:\\\&quot;HIDE_PANEL\\\&quot;,\\\&quot;studiesMode\\\&quot;:\\\&quot;HIDE_STUDIES\\\&quot;}\&quot;,\&quot;LikefolioMixin\&quot;:\&quot;{\\\&quot;paintingSettings\\\&quot;:{\\\&quot;neutralSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;positiveSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;negativeSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;sentimentSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true}},\\\&quot;shownDivisions\\\&quot;:[],\\\&quot;allDivisions\\\&quot;:[]}\&quot;}}&quot;,encodedPatternsModel=&quot;{\&quot;showPatterns\&quot;:true,\&quot;models\&quot;:[],\&quot;fibModels\&quot;:[]}&quot;,groupId=&quot;default&quot;,styleSettings{chartAggregationSettings{monkeyChartsAggSettings=!%0.TimeFrameAggregationSettings.createTickOrTimeAggregation(!%1.ChartRange.findByCode(&quot;DAY3&quot;),@ChartAggregationPeriod0),timeAggregationSettings=!%0.TimeFrameAggregationSettings.createTickOrTimeAggregation(!%1.ChartRange.findByCode(&quot;DAY10&quot;),@ChartAggregationPeriod1)},commonStyleSettings{colorSettings{backgroundColor=#%2.CustomColor(#%3.Color(0,0,0,255)),monkeyProfileTypeColors.defaultRowHeight=&lt;F,mpExpandedTypeColors.defaultRowHeight=&lt;F,volumeColor=#%2.CustomColor(#%3.Color(0,0,0,255))},expansion.right=115,fitOrdersToScreen=&lt;T,keepPriceZoom=&lt;T,leftAxisRegulator{maxValue=805926.78632479d,minValue=-33029.78632479d},manualAxisRegulator{maxValue=115.99990588d,minValue=104.56291765d},previousRightExpansion=115,shortCuts{^(&quot;Time Zone&quot;,&lt;F),^(&quot;Show Expiration Friday &quot;,&lt;F),^(&quot;Keep Price Zoom&quot;,&lt;F),^(&quot;enableLeftAxis&quot;,&lt;F),!get:Boolean0(&quot;Chart mode&quot;),^(&quot;Fit expected price ranges&quot;,@Boolean0),^(&quot;emphasizeDigitMPExpanded&quot;,&lt;F),^(&quot;showWicksCandleTrend&quot;,&lt;F),^(&quot;highlightEarnings&quot;,&lt;F),^(&quot;synchronizeCrosshair&quot;,&lt;F),^(&quot;myToolsMode&quot;,&lt;F),^(&quot;seasonalityStyle&quot;,&lt;F),^(&quot;Show Price Subgraph&quot;,&lt;F),^(&quot;closePriceLevel&quot;,&lt;F),^(&quot;Color Volume As Symbol Ticks&quot;,&lt;F),^(&quot;highlightPhantomRBars&quot;,&lt;F),^(&quot;Cross type &quot;,&lt;F),^(&quot;Fit Studies to Screen&quot;,@Boolean0),^(&quot;Chart type &quot;,&lt;F),^(&quot;Fit Orders&quot;,&lt;F),^(&quot;Bubbles as Percentage&quot;,&lt;F),^(&quot;hideStatusString&quot;,&lt;F),^(&quot;Show Studies &quot;,&lt;F),^(&quot;showWicksHeikinAshi&quot;,&lt;F),^(&quot;Alerts&quot;,&lt;F),^(&quot;Chart scale&quot;,&lt;F),^(&quot;Fit High/Low&quot;,&lt;F),^(&quot;Orders&quot;,&lt;F),^(&quot;Use Log Scale &quot;,&lt;F),^(&quot;Fit Study Markers to Screen&quot;,@Boolean0),^(&quot;Fit Alerts&quot;,&lt;F),^(&quot;Fit patterns&quot;,&lt;F),^(&quot;Percentage View&quot;,&lt;F),^(&quot;Make Auto Zoom &quot;,&lt;F),^(&quot;Show Year Marking Line&quot;,&lt;F),^(&quot;Show Rollover Line&quot;,&lt;F),^(&quot;Show High/Low Bubbles &quot;,&lt;F),^(&quot;Snap mode&quot;,&lt;F),^(&quot;highlightStudies&quot;,&lt;F),^(&quot;Overlapped Volume&quot;,&lt;F),^(&quot;Show Symbol Logo&quot;,&lt;F),^(&quot;Show Last Price Bubble &quot;,&lt;F),^(&quot;emphasizeDigitMP&quot;,&lt;F),^(&quot;Show grid&quot;,@Boolean0),^(&quot;showWicksCandle&quot;,&lt;F),^(&quot;Show trades&quot;,&lt;F),^(&quot;highlightSeasons&quot;,&lt;F),^(&quot;Extend Order/Alert Line to Left&quot;,&lt;F)},showGrid=&lt;F,showTradeExecution=&lt;T,step=5.347593582887701d},forexStyleSettings.shortCuts.^(&quot;Show Volume Subgraph&quot;,&lt;F),futuresStyleSettings{highlightExtendedHours=&lt;T,shortCuts{^(&quot;adjustForContractChanges&quot;,&lt;F),^(&quot;Show Open Interest&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,&lt;F),^(&quot;showContractChangeEvents&quot;,&lt;F),^(&quot;futures_daily_close_price&quot;,&lt;F),^(&quot;Show Options&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,&lt;F),^(&quot;startAtMarketOpen&quot;,&lt;F)},tradingHoursOnly=&lt;T},optionsStyleSettings{shortCuts{^(&quot;Show Open Interest&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,&lt;F),^(&quot;Show Theo Price&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,&lt;F),^(&quot;startAtMarketOpen&quot;,&lt;F)},startAggregationAtMarketOpen=&lt;F},otherStyleSettings{shortCuts{^(&quot;Show Social Sentiment&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,@Boolean0),^(&quot;Show Options&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,&lt;F),^(&quot;Show Corporate Actions&quot;,&lt;F),^(&quot;Show CNBC Video&quot;,&lt;F),^(&quot;startAtMarketOpen&quot;,@Boolean0),^(&quot;adjustForDividends&quot;,&lt;F)},startAggregationAtMarketOpen=&lt;F,tradingHoursOnly=&lt;T},setsIdentifiers.styleSetName=&quot;DEF_X_STYLE&quot;},subgraphModels{!get(#%4.SubgraphId(&quot;Symbol&quot;)){height=491,storableIndicators.+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;input averageType = AverageType.SIMPLE;\ninput showMovingAvgLable =Yes;\ninput price = close;\ninput length1 = 10;\ninput length2 = 20;\ninput length3 = 50;\ninput length4 = 200;\ninput displace = 0;\ninput showAvg3 = yes;\n\ninput showAvg4 = yes;\n\ninput showBreakoutSignals = no;\n\n\n\n\n#def AvgExp = ExpAverage(price[-displace], length);\nplot Avg1 = MovingAverage(averageType, price[-displace], length1);\nplot Avg2 = MovingAverage(averageType, price[-displace], length2);\nplot Avg3 = MovingAverage(averageType, price[-displace], length3);\nplot Avg4 = MovingAverage(averageType, price[-displace], length4);\n\nAvg3.setHiding(!showAvg3);\nAvg4.setHiding(!showAvg4);\n\n\n#plot SMA ( Average(price[-displace], length);\nplot UpSignal = price crosses above Avg1;\nplot DownSignal = price crosses below Avg1;\n#Add Label\n\nAddLabel(showMovingAvgLable, \&quot;  \&quot;+ length1+ \&quot;MAvg\&quot; ,Avg1.TakeValueColor ());\nAddLabel(showMovingAvgLable,  astext(Avg1), if Avg1&lt; close then Color.LIGHT_GREEN else if Avg1&gt; close then color.light_red else Color.Light_GRAY);\n\n\nAddLabel(showMovingAvgLable, \&quot;  \&quot;+ length2+ \&quot;MAvg\&quot; ,Avg2.TakeValueColor ());\nAddLabel(showMovingAvgLable,  astext(Avg2), if Avg2&lt; close then Color.LIGHT_GREEN else if Avg2&gt; close then color.light_red else Color.Light_GRAY);\n\nAddLabel(showMovingAvgLable, \&quot;  \&quot;+ length3+ \&quot;MAvg\&quot; ,Avg3.TakeValueColor ());\nAddLabel(showMovingAvgLable,  astext(Avg3), if Avg3&lt; close then Color.LIGHT_GREEN else if Avg3&gt; close then color.light_red else Color.Light_GRAY);\n\n\nAddLabel(showMovingAvgLable, \&quot;  \&quot;+ length4+ \&quot;MAvg\&quot; ,Avg4.TakeValueColor ());\nAddLabel(showMovingAvgLable,  astext(Avg4), if Avg4&lt; close then Color.LIGHT_GREEN else if Avg4&gt; close then color.light_red else Color.Light_GRAY);\n\n\n# Avg1.TakeValueColor ()\n#AddLabel(showMovingAvgLable,  length1+ \&quot;MAvg \&quot; +astext(Avg1) ,Avg1.TakeValueColor ());\n#AddLabel(showMovingAvgLable, astext(Avg1), if Avg1&lt; close then Color.GREEN else if Avg1&gt; close then color.light_red else Color.Light_GRAY);\n\n\n\n#AddLabel(showMovingAvgLable,  length2+ \&quot;MAvg \&quot;+ astext(Avg2) ,Avg2.TakeValueColor ());\n#AddLabel(showMovingAvgLable,  astext(Avg2), if Avg2&lt; close then Color.GREEN else if Avg2&gt; close then color.light_red else Color.Light_GRAY);\n#AddLabel(showMovingAvgLable,  length3+ \&quot;MAvg \&quot; +astext(Avg3),Avg3.TakeValueColor ());\n#AddLabel(showMovingAvgLable, astext(Avg3), if Avg3&lt; close then Color.GREEN else if Avg3&gt; close then color.light_red else Color.Light_GRAY);\n#AddLabel(showMovingAvgLable,  length4+ \&quot;MAvg \&quot; +astext(Avg4),Avg4.TakeValueColor ());\n#AddLabel(showMovingAvgLable, astext(Avg4), if Avg4&lt; close then Color.GREEN else if Avg4&gt; close then color.light_red else Color.Light_GRAY);\ndef bub;\nif !IsNaN(close[-1])\nthen {\n\n    bub = no;#Double.NaN;\n    \n} else {\nbub = yes;\n    \n}\ndef bubb = if  BarNumber() == 20  then yes else no;\n\ninput Show_Mavg_Key=no;\n\n#AddChartBubble(bub, Avg1, \&quot;MAvg\&quot;+ length1+ \&quot;= \&quot; + astext(Avg1), Color.LIGHT_ORANGE, no);\nAddChartBubble(bub and Show_Mavg_Key, Avg1, \&quot;MAvg\&quot;+ length1+ \&quot;= \&quot; + astext(Avg1), Avg1.TakeValueColor (), yes);\nAddChartBubble(bub and Show_Mavg_Key, Avg2, \&quot;MAvg\&quot;+ length2+ \&quot;= \&quot; + astext(Avg2), Avg2.TakeValueColor (), yes);\nAddChartBubble(bub and Show_Mavg_Key, Avg3, \&quot;MAvg\&quot;+ length3+ \&quot;= \&quot; + astext(Avg3), Avg3.TakeValueColor (), yes);\nAddChartBubble(bub and Show_Mavg_Key, Avg4, \&quot;MAvg\&quot;+ length4+ \&quot;= \&quot; + astext(Avg4), Avg4.TakeValueColor (), yes);\n\n#Vwap\ninput vwapTimeFrame = {default DAY, WEEK, MONTH};\ninput numDevDn = -2.0;\ninput numDevUp = 2.0;\n\n\ndef cap = getAggregationPeriod();\ndef errorInAggregation =\n    vwapTimeFrame == vwapTimeFrame.DAY and cap &gt;= AggregationPeriod.WEEK or\n    vwapTimeFrame == vwapTimeFrame.WEEK and cap &gt;= AggregationPeriod.MONTH;\nassert(!errorInAggregation, \&quot;timeFrame should be not less than current chart aggregation period\&quot;);\n\ndef yyyyMmDd = getYyyyMmDd();\ndef periodIndx;\nswitch (vwapTimeFrame) {\ncase DAY:\n    periodIndx = yyyyMmDd;\ncase WEEK:\n    periodIndx = Floor((daysFromDate(first(yyyyMmDd)) + getDayOfWeek(first(yyyyMmDd))) / 7);\ncase MONTH:\n    periodIndx = roundDown(yyyyMmDd / 100, 0);\n}\ndef isPeriodRolled = compoundValue(1, periodIndx != periodIndx[1], yes);\n\ndef volumeSum;\ndef volumeVwapSum;\ndef volumeVwap2Sum;\n\nif (isPeriodRolled) {\n    volumeSum = volume;\n    volumeVwapSum = volume * vwap;\n    volumeVwap2Sum = volume * Sqr(vwap);\n} else {\n    volumeSum = compoundValue(1, volumeSum[1] + volume, volume);\n    volumeVwapSum = compoundValue(1, volumeVwapSum[1] + volume * vwap, volume * vwap);\n    volumeVwap2Sum = compoundValue(1, volumeVwap2Sum[1] + volume * Sqr(vwap), volume * Sqr(vwap));\n}\ndef VWprice = volumeVwapSum / volumeSum;\ndef deviation = Sqrt(Max(volumeVwap2Sum / volumeSum - Sqr(VWprice), 0));\n\nplot VWAP = VWprice;\nplot UpperBand = VWprice + numDevUp * deviation;\nplot LowerBand = VWprice + numDevDn * deviation;\n\nVWAP.setDefaultColor(getColor(0));\nUpperBand.setDefaultColor(getColor(0));\nLowerBand.setDefaultColor(getColor(0));\n\nUpperBand.SetStyle(Curve.MEDIUM_DASH);\nLowerBand.SetStyle(Curve.MEDIUM_DASH);\n\n\n\nUpperBand.hide();\nLowerBand.hide();\n\n#vwap\n\nAddLabel(yes, \&quot;VWAP= \&quot; + astext(VWAP), if VWAP&lt; close then Color.LIGHT_GREEN else if VWAP&gt; close then color.LIGHT_red else Color.GRAY);\n#AddLabel(yes, \&quot;VWAP= \&quot; + astext(VWAP), Color.White);\ndef vwDif= close- VWAP;\nAddLabel(yes, \&quot; \&quot;+astext(vwDif), if vwDif&gt; 0 then Color.LIGHT_GREEN else if vwDif&lt; 0 then color.LIGHT_red else Color.GRAY);\n\n#RSI\ninput overBoughtRsi = 70;\ninput overSoldRsi = 30;\ninput rsiLength = 14;\ninput rsiPrice = close;\ndef rsi_val = reference RSI(length = rsiLength, price = rsiPrice );\n####\n\n\n\nAddLabel(yes, \&quot;RSI = \&quot; + astext(rsi_val) , if rsi_val &gt; overBoughtRsi  then Color.RED else if rsi_val &lt; overSoldRsi then  Color.GREEN else Color.light_GRAY);\n\n\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\nAvg1.SetDefaultColor(color.white);\nAvg2.SetDefaultColor(color.cyan);\nAvg3.SetDefaultColor(color.light_red);\nAvg4.SetDefaultColor(color.pink);\n#avg3.SetStyle(Curve.MEDIUM_DASH);\n#avg4.SetStyle(Curve.MEDIUM_DASH);\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);\n&quot;,name=&quot;_686a0d47_2dc7_4466_91d6_64cf4907bd2a&quot;}))},!get(#%4.SubgraphId(&quot;Volume&quot;)){height=80,storableIndicators.+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# Modified by Mahi\n# Second Mod by Ramon DV\n\ndeclare on_volume;\n#v2\n#Inputs\n\ninput ShowDayAvg = yes;\ninput AvgDayVolLength = 30;\ninput ShowTodayVolume = yes;\ninput ShowTodayVolumeProjection = yes;\ninput ShowPercentOfDayAvg = yes;\ninput UnusualVolumePercent = 200;\ninput ShowBarAvg = yes;\ninput AvgBarVolLength = 30;\ninput ShowCurrentBar = yes;\ninput ShowPercentOfBarAvg = yes;\ninput ShowSellVolumePercent = yes;\ninput ShowBuyVolumePercent = yes;\ninput AvgType = AverageType.SIMPLE;\n\ndef O = open;\ndef H = high;\ndef C = close;\ndef L = low;\ndef V = volume;\n\n#def buying =  V * (C - L) / (H - L);\n#def selling = V * (H - C) / (H - L);\n\ndef buying =   V * (H - O) / (H - L) ;\ndef selling =  V * (O - L) / (H - L) ;\n\ndef O_day = open(period = AggregationPeriod.DAY);\ndef H_day = high(period = AggregationPeriod.DAY);\ndef C_day = close(period = AggregationPeriod.DAY);\ndef L_day = low(period = AggregationPeriod.DAY);\ndef V_day = volume(period = AggregationPeriod.DAY);\n#def selling_day = V_day * (H_day - C_day) / (H_day - L_day);\n#def buying_day = V_day * (C_day - L_day) / (H_day - L_day);\ndef selling_day = V_day * (H_day - O_day) / (H_day - L_day);\ndef buying_day = V_day * (O_day - L_day) / (H_day - L_day);\n# Selling Volume pressure\n\nplot SellVol = selling;\nSellVol.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);\nSellVol.SetDefaultColor(Color.RED);\nSellVol.HideTitle();\nSellVol.HideBubble();\nSellVol.SetLineWeight(5);\n\n# Total Volume\n# Buying Volume pressure\n\nplot BuyVol = buying + selling; # plot in the background of selling volume\nBuyVol.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);\nBuyVol.SetDefaultColor(Color.DARK_GREEN);\nBuyVol.HideTitle();\nBuyVol.HideBubble();\nBuyVol.SetLineWeight(5);\n\n#Volume Data\n\ndef DayVol = volume(period = “DAY”);\ndef AvgDayVol = MovingAverage(AvgType, DayVol[1], AvgDayVolLength);\ndef percentOfDay = Round((DayVol / AvgDayVol) * 100, 0);\n\n\ndef AvgBarVol = MovingAverage(AvgType, volume[1], AvgBarVolLength);\ndef percentOfBar = Round((volume / AvgBarVol) * 100, 0);\ndef SellVolPercent = Round((selling / volume) * 100, 0);\ndef BuyVolPercent = 100 - SellVolPercent;\n\ndef SellVolPercent_day = Round((selling_day / V_day) * 100, 0);\ndef BuyVolPercent_day = 100 - SellVolPercent_day;\n\n# Labels\n\nAddLabel(ShowDayAvg, \&quot;Avg “ + AvgDayVolLength + “ Days: \&quot; + Round(AvgDayVol, 0), Color.LIGHT_GRAY);\n\nAddLabel(ShowTodayVolume, \&quot;Today: \&quot; + DayVol, (if percentOfDay &gt;= UnusualVolumePercent then Color.GREEN else if percentOfDay &gt;= 100 then Color.ORANGE else Color.LIGHT_GRAY));\n\nAddLabel(ShowPercentOfDayAvg, percentOfDay + \&quot;%\&quot;, (if percentOfDay &gt;= UnusualVolumePercent then Color.GREEN else if percentOfDay &gt;= 100 then Color.ORANGE else Color.WHITE) );\n\nAddLabel(ShowBarAvg, \&quot;Avg “ + AvgBarVolLength + ” Bars: \&quot; + Round(AvgBarVol, 0), Color.LIGHT_GRAY);\n\nAddLabel(ShowCurrentBar, \&quot;Cur Bar: \&quot; + volume, (if percentOfBar &gt;= UnusualVolumePercent then Color.GREEN else if percentOfBar &gt;= 100 then Color.ORANGE else Color.LIGHT_GRAY));\n\nAddLabel(ShowPercentOfBarAvg, percentOfBar + \&quot;%\&quot;, (if percentOfBar &gt;= UnusualVolumePercent then Color.GREEN else if percentOfBar &gt;= 100 then Color.ORANGE else Color.WHITE) );\n\n\nAddLabel(ShowSellVolumePercent and (SellVolPercent &gt; BuyVolPercent) , \&quot;Cur Bar Sell %: \&quot; + SellVolPercent, if SellVolPercent &gt; BuyVolPercent then Color.RED else Color.GRAY);\nAddLabel(ShowBuyVolumePercent and (SellVolPercent &lt;= BuyVolPercent), \&quot;Cur Bar Buy %: \&quot; + BuyVolPercent, if BuyVolPercent &gt; SellVolPercent then Color.GREEN else Color.GRAY);\n\n\n# PriceOpen.Hide();\ninput length = 50;\n\nplot Vol = volume;\nplot VolAvg = Average(volume, length);\n\nVol.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);\nVol.SetLineWeight(3);\nVol.DefineColor(\&quot;Up\&quot;, Color.UPTICK);\nVol.DefineColor(\&quot;Down\&quot;, Color.DOWNTICK);\nVol.AssignValueColor(if close &gt; close[1] then Vol.Color(\&quot;Up\&quot;) else if close &lt; close[1] then Vol.Color(\&quot;Down\&quot;) else GetColor(1));\nVolAvg.SetDefaultColor(GetColor(8));\n\n\n#########################################################\n\n#def rth = (RegularTradingEnd(GetYYYYMMDD()) - RegularTradingStart(GetYYYYMMDD())) / AggregationPeriod.HOUR;\ndef rth = (RegularTradingEnd(GetYYYYMMDD()) - RegularTradingStart(GetYYYYMMDD())) / AggregationPeriod.MIN;\ndef MarketNotClosed = GetTime() &lt;= RegularTradingEnd (GetYYYYMMDD());\n# def eod = ((  RegularTradingEnd (GetYYYYMMDD()) - GetTime() ) / AggregationPeriod.MIN);\ndef eod = if MarketNotClosed then ((  RegularTradingEnd (GetYYYYMMDD()) - GetTime() ) / AggregationPeriod.MIN) else ((  RegularTradingEnd (GetYYYYMMDD())  ) / AggregationPeriod.MIN);\n\ndef DayVol_Projetion = volume(period = “DAY”) * rth / (rth - eod);\ndef percentOfDayProjection = Round((DayVol_Projetion / AvgDayVol) * 100, 0);\nAddLabel(ShowBuyVolumePercent, \&quot;Day Buy %: \&quot; + BuyVolPercent_day, if BuyVolPercent_day &gt; SellVolPercent_day then Color.GREEN else Color.GRAY);\n\nAddLabel(ShowTodayVolumeProjection, \&quot;Est. Vol: \&quot; + Round(DayVol_Projetion, 0) , if DayVol_Projetion &gt; AvgDayVol * 1.5  then Color.GREEN else Color.GRAY);\n\nAddLabel(ShowTodayVolumeProjection,  percentOfDayProjection  + \&quot;%\&quot;, if DayVol_Projetion &gt; AvgDayVol * 1.5  then Color.GREEN else Color.GRAY);\n\ndef y = GetTime() / AggregationPeriod.MIN;\n#eod =2;\n#AddLabel(yes, \&quot;RTH duration (min): \&quot; + rth);\n#AddLabel(yes, \&quot;EOD duration (min): \&quot; + eod);\n#AddLabel(yes, \&quot;Market Not closed: \&quot; + y);\n\n#######&quot;,name=&quot;_5261aedd_9830_4f97_bb0c_d3f9282e8428&quot;}))},^(#%4.SubgraphId(&quot;Subgraph1&quot;),#%4.SubgraphStorableModel{height=177,storableIndicators.+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;declare lower;\ninput aggregationPeriod1 = AggregationPeriod.THIRTY_MIN;\n\ninput useOpen =yes;\ndef price = if (useOpen) then   open(period = aggregationPeriod1) else close(period = aggregationPeriod1) ;\n\ninput over_bought = 40.0;\ninput over_sold = -40.0;\ninput percentDLength = 3;\ninput percentKLength = 5;\n\ndef min_low = Lowest(low (period = aggregationPeriod1), percentKLength);\ndef max_high = Highest(high (period = aggregationPeriod1), percentKLength);\ndef rel_diff = price - (max_high + min_low) / 2;\ndef diff = max_high - min_low;\n\ndef avgrel = ExpAverage(ExpAverage(rel_diff, percentDLength), percentDLength);\ndef avgdiff = ExpAverage(ExpAverage(diff, percentDLength), percentDLength);\n\nplot SMI = if avgdiff != 0 then avgrel / (avgdiff / 2) * 100 else 0;\nSMI.SetDefaultColor(GetColor(1));\n\nplot AvgSMI = ExpAverage(SMI, percentDLength);\nAvgSMI.SetDefaultColor(GetColor(5));\n\nplot overbought = over_bought;\noverbought.SetDefaultColor(GetColor(5));\n\nplot oversold = over_sold;\noversold.SetDefaultColor(GetColor(5));\n\n\n\n#RSI\ninput overBoughtRsi = 70;\ninput overSoldRsi = 30;\ninput rsiLength = 14;\ninput  rsiPrice = close;\nplot rsi_val = reference RSI(length = rsiLength, price = rsiPrice );\n####\n\n\n\nAddLabel(yes, \&quot;RSI = \&quot; + rsi_val , if rsi_val &gt; overBoughtRsi  then Color.RED else if rsi_val &lt; overSoldRsi then  Color.GREEN else Color.GRAY);\n\n\n\n#trend reversal\ndef y = rsi_val ;\ninput riReversLength = 2;\ninput lookBack = 2;\n\n\ndef rsi_expAvg = ExpAverage(rsi_val, riReversLength);\n\n#trend reversal\ndef overBoughtReversal = if ((rsi_expAvg &gt; overBoughtRsi)within 2 bar) and  (rsi_expAvg crosses above rsi_val) then price else 0;# if (rsi_expAvg &gt; OverBought and  rsi_expAvg crosses above rsi_val  within 3 bar ) then 40 else 0;\ndef oversoldRevesal = if ((rsi_expAvg &lt; overSoldRsi)within 2 bar) and  (rsi_expAvg crosses below rsi_val within 2 bar) then price else 0;\n\n##############\n########!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n#vwap vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\n#input numDevUp = 2.0;\ninput vwapTimeFrame = {default DAY, WEEK, MONTH};\n\ndef cap = GetAggregationPeriod();\ndef errorInAggregation =\n    vwapTimeFrame == vwapTimeFrame.DAY and cap &gt;= AggregationPeriod.WEEK or\n    vwapTimeFrame == vwapTimeFrame.WEEK and cap &gt;= AggregationPeriod.MONTH;\nAssert(!errorInAggregation, \&quot;timeFrame should be not less than current chart aggregation period\&quot;);\n\ndef yyyyMmDd = GetYYYYMMDD();\ndef periodIndx;\nswitch (vwapTimeFrame) {\ncase DAY:\n    periodIndx = yyyyMmDd;\ncase WEEK:\n    periodIndx = Floor((DaysFromDate(First(yyyyMmDd)) + GetDayOfWeek(First(yyyyMmDd))) / 7);\ncase MONTH:\n    periodIndx = RoundDown(yyyyMmDd / 100, 0);\n}\ndef isPeriodRolled = CompoundValue(1, periodIndx != periodIndx[1], yes);\n\ndef volumeSum;\ndef volumeVwapSum;\ndef volumeVwap2Sum;\n\nif (isPeriodRolled) {\n    volumeSum = volume;\n    volumeVwapSum = volume * vwap;\n    volumeVwap2Sum = volume * Sqr(vwap);\n} else {\n    volumeSum = CompoundValue(1, volumeSum[1] + volume, volume);\n    volumeVwapSum = CompoundValue(1, volumeVwapSum[1] + volume * vwap, volume * vwap);\n    volumeVwap2Sum = CompoundValue(1, volumeVwap2Sum[1] + volume * Sqr(vwap), volume * Sqr(vwap));\n}\ndef vWapprice = volumeVwapSum / volumeSum;\ndef deviation = Sqrt(Max(volumeVwap2Sum / volumeSum - Sqr(vWapprice), 0));\n\ndef VWAP = vWapprice;\ninput numDevUp = 2.0;\ninput numDevDn = -2.0;\n\ndef vwap_UpperBand = price + numDevUp * deviation;\ndef vwap_LowerBand = price + numDevDn * deviation;\n\ninput vwapCondition = no;\n#input vp=close;\ndef conVwapBuy = if  vwapCondition then  close &gt;= VWAP else 1;\n\n#####^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n#MACD\n\ninput fastLength = 12;\ninput slowLength = 26;\ninput MACDLength = 9;\ninput displace = 0;\ndef fastAvg = Sum(volume * price, fastLength) / Sum(volume, fastLength);\ndef slowAvg = Sum(volume * price, slowLength) / Sum(volume, slowLength);\ndef Value = fastAvg - slowAvg;\ndef Avg = ExpAverage(Value, MACDLength);\ndef MACD_Diff  = Value - Avg;\n#def ZeroLine = 0;\n\ninput def_cond = no;\ndef MACD_cond_logic = if (def_cond) then MACD_Diff &lt;= 0 else yes;\n\n\n#MACD Pivot reversal\n#input FilterLength=3;\n######################\n#def MACDV_Diff_expAvg = ExpAverage(MACD_Diff, FilterLength);\n#plot oversoldRevesalMACDV =if ((Diff_MACDV &lt; MacdZeroLine)within lookBack bar) and  ( Diff_MACDV crosses above   MACDV_Diff_expAvg within lookBack bar)and Diff_MACDV &gt; Diff_MACDV[1] then 1 else 0;# if (MACDV_Diff_expAvg &gt; OverBought and  MACDV_Diff_expAvg crosses above rsi_val  within 3 bar ) then 40 else 0;\n#plot overBoughtReversalMACDV = if ((Diff_MACDV &gt; MacdZeroLine)within lookBack bar) and  (MACDV_Diff_expAvg crosses above  Diff_MACDV  within lookBack bar)  and Diff_MACDV &lt; Diff_MACDV[1] and Diff_MACDV&gt;0 then 1 else 0;\n\n\n#trend Pivot reversal\ndef twoBarPivotMACD_Buy =  MACD_Diff &gt; MACD_Diff[1] and MACD_Diff[1] &gt; MACD_Diff[2] and MACD_Diff[2] &lt; MACD_Diff[3] and MACD_Diff[3] &lt; MACD_Diff [4];\ndef twoBarPivotMACD_Sell = MACD_Diff &lt; MACD_Diff[1] and MACD_Diff[1] &lt; MACD_Diff[2] and MACD_Diff[2] &gt; MACD_Diff[3] and MACD_Diff[3] &gt; MACD_Diff [4];\n###################\n\n\ndef uptrend = if price &gt; price[1] and price[1] &gt;= price[2] then 1 else 0;\n\n#####################################-----------------\n\ninput aggPeriod = AggregationPeriod.DAY;\ninput AvgType = AverageType.SIMPLE;\ninput short_len = 10;\ninput mid_len = 21;\ninput long_len = 50;\ninput moving_average = no;\ndef AVG1 = MovingAverage(AvgType, close(period = aggPeriod), short_len);\ndef AVG2 = MovingAverage(AvgType, close(period = aggPeriod), mid_len);\ndef AVG3 = MovingAverage(AvgType, close(period = aggPeriod), long_len);\n#def EMA_condition = if moving_average then (close &gt; AVG1 or close &gt; AVG2 or  close &gt; AVG3) else yes;\ndef EMA_condition = if moving_average then (close &gt; AVG1 ) else yes;\n\nAddLabel( yes, Concat(short_len + \&quot;MA = \&quot;, AVG1), Color.CYAN);\nAddLabel( yes, Concat(mid_len + \&quot;MA = \&quot;, AVG2), Color.LIGHT_ORANGE);\nAddLabel( yes, Concat(long_len + \&quot;MA = \&quot;, AVG3), Color.PINK);\n\n\n\n##############################################\n#@@@@\n#ADX\ninput adxLength = 14;\ninput adxAverageType = AverageType.WILDERS;\n\ndef ADX = DMI(adxLength, adxAverageType).ADX;\n#ADX.setDefaultColor(GetColor(5));\n\ninput length = 7;\ninput signalLength = 10;\ninput averageType = AverageType.WEIGHTED;\ninput averageTypeSignal = AverageType.EXPONENTIAL;\n\n\n\ndef Ref = ADX;# reference OnBalanceVolume();\nplot RefMoving = MovingAverage(averageType, Ref, length);\nplot Signal = MovingAverage(averageTypeSignal, RefMoving, signalLength);\nplot dif =  Ref - RefMoving;\n#Ref.SetDefaultColor(GetColor(4));\nRefMoving.SetDefaultColor(GetColor(8));\nSignal.SetDefaultColor(GetColor(2));\ndif.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);\ndif.SetLineWeight(3);\n\n\ndif.DefineColor(\&quot;Positive and Up\&quot;, Color.CYAN);\ndif.DefineColor(\&quot;Positive and Down\&quot;, Color.BLUE);\ndif.DefineColor(\&quot;Negative and Down\&quot;, Color.RED);\ndif.DefineColor(\&quot;Negative and Up\&quot;, Color.YELLOW);\ndif.AssignValueColor(if dif &gt;= 0 then if dif &gt; dif[1] then dif.Color(\&quot;Positive and Up\&quot;) else dif.Color(\&quot;Positive and Down\&quot;) else if dif &lt; dif[1] then dif.Color(\&quot;Negative and Down\&quot;) else dif.Color(\&quot;Negative and Up\&quot;));\n\n\n#@@@@@\n###################################\ndef SMI_ADX_Buy_Signal;\nif GetAggregationPeriod() &lt; AggregationPeriod.FIFTEEN_MIN\nthen\n{\n    SMI_ADX_Buy_Signal = if ( (SMI crosses above AvgSMI  within lookBack bar) and (Ref crosses above RefMoving within lookBack bar) and dif &gt;= 0 and (rsi_val &gt; overSoldRsi and rsi_val &lt; 60 ) and MACD_cond_logic and  EMA_condition) and Ref &gt; Ref[2] then 1 else 0;\n\n}\nelse {\n    SMI_ADX_Buy_Signal = 0;\n}\nplot buy6 = SMI_ADX_Buy_Signal;\n\n\ndef SMI_Buy_Signal = if ( (SMI crosses above overbought  within lookBack bar) and SMI &gt;  AvgSMI and (rsi_val &gt; overSoldRsi and rsi_val &lt; overBoughtRsi + 10 ) and MACD_cond_logic and  EMA_condition) and  (uptrend) then 1 else 0;\nplot buy2 = SMI_Buy_Signal;\n\n#def  buySvix_Signal = if ( MACD_cond_logic  and  EMA_condition and  oversoldRevesal  and buySvix &lt; Zeroline - 10 ) then 1 else 0;\n#plot buy3 = buySvix_Signal;\n\n\n\n\n\n\ndef SMI_Sell_Signal = if ( (SMI crosses below AvgSMI within lookBack bar) and (overBoughtReversal)) then 1 else 0;\n#def sellSignal2 = if ((rsi_val  &gt; overBoughtRsi within 3 bar) and (smi crosses below AvgSMI within 3 bar)) then 1 else 0;\n\n\nplot sell2 = SMI_Sell_Signal;\n\n#######\n\n#def FVE_buySignal = conVwapBuy and oversoldRevesal and pFVE_Bull  and MACD_cond_logic ;# and Diff &gt;= 0;\n#def sig_buy = pFVE_Bull and Diff &gt;= 0;\n#plot buy4 = FVE_buySignal ;\n\n\n#def FVE_sellSignal = overBoughtReversal and pFVE_Bear ;\n#plot sell4 = FVE_sellSignal;\nplot buy5 = twoBarPivotMACD_Buy and oversoldRevesal;\nplot sell5 = twoBarPivotMACD_Sell and overBoughtReversal;\n\n####\n#def buySignal2 = if (oversoldRevesal  and buythedip2 &lt; Zeroline ) then 1 else 0;\n\n#def buySignal3 = if ( oversoldRevesal  and buythedip3 &lt; Zeroline - 10 ) then 1 else 0;\n#plot buy3 = buySignal3;\n\nAddChartBubble(buy2 == 1, buy2, \&quot;B2SMI= \&quot; +  low[1] + \&quot; rsi \&quot; + rsi_val + \&quot; w \&quot; + VWAP[1], Color.LIGHT_ORANGE, no);\n#AddChartBubble(buy3 == 1, buy3,  \&quot;B3Svix= \&quot; + price + \&quot; rsi \&quot; + rsi_val, Color.LIGHT_GRAY, no);\n#AddChartBubble(buy4 == 1, buy4,  \&quot;B4FVE= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.YELLOW, no);\nAddChartBubble(buy5 == 1, buy5,  \&quot;B5Macd= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.CYAN, no);\nAddChartBubble(buy6 == 1, buy6,  \&quot;B5AdxSMI= \&quot; + price + \&quot; \\nrsi \&quot; + rsi_val[lookBack] + \&quot; \\nAdx \&quot; + Ref[lookBack], Color.GREEN, no);\n\n#AddChartBubble(sell1 == 1, sell1, \&quot;S1STR= \&quot; + price + \&quot; rsi \&quot; + rsi_val, Color.LIGHT_RED, no);#Buy the Dip\n\nAddChartBubble(sell2 == 1, sell2, \&quot;S2SMI= \&quot; + price + \&quot; rsi \&quot; + rsi_val, Color.PINK, no);#Buy the Dip\n#AddChartBubble(sell4 == 1, sell4, \&quot;S4FVE= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.VIOLET, no);#Buy the Dip\nAddChartBubble(sell5 == 1, sell5, \&quot;S5Macd= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.BLUE, no);#Buy the Dip\n#AddChartBubble(oversoldRevesal , close, rsi_val, Color.blue, no);#Buy the Dip\nplot scan = buy2;&quot;,name=&quot;_895e3e9a_2bdf_4c37_bc8e_713002a58848&quot;}){inputsMap:TreeMap0{^(&quot;aggregationPeriod1&quot;,&quot;TWO_HOURS&quot;),^(&quot;rsiPrice&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap0,plots{4:{hiding=&lt;T},5:{hiding=&lt;T},6:{hiding=&lt;T},7:{hiding=&lt;T}}})}),^(#%4.SubgraphId(&quot;Subgraph7&quot;),#%4.SubgraphStorableModel{height=177,storableIndicators.+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;declare lower;\n\ninput price = close;\n\ninput over_bought = 40.0;\ninput over_sold = -40.0;\ninput percentDLength = 3;\ninput percentKLength = 5;\n\ndef min_low = Lowest(low, percentKLength);\ndef max_high = Highest(high, percentKLength);\ndef rel_diff = price - (max_high + min_low) / 2;\ndef diff = max_high - min_low;\n\ndef avgrel = ExpAverage(ExpAverage(rel_diff, percentDLength), percentDLength);\ndef avgdiff = ExpAverage(ExpAverage(diff, percentDLength), percentDLength);\n\nplot SMI = if avgdiff != 0 then avgrel / (avgdiff / 2) * 100 else 0;\nSMI.SetDefaultColor(GetColor(1));\n\nplot AvgSMI = ExpAverage(SMI, percentDLength);\nAvgSMI.SetDefaultColor(GetColor(5));\n\nplot overbought = over_bought;\noverbought.SetDefaultColor(GetColor(5));\n\nplot oversold = over_sold;\noversold.SetDefaultColor(GetColor(5));\n\n\n\n#RSI\ninput overBoughtRsi = 70;\ninput overSoldRsi = 30;\ninput rsiLength = 14;\ninput rsiPrice = close;\ndef rsi_val = reference RSI(length = rsiLength, price = rsiPrice );\n####\n\n\n\nAddLabel(yes, \&quot;RSI = \&quot; + rsi_val , if rsi_val &gt; overBoughtRsi  then Color.RED else if rsi_val &lt; overSoldRsi then  Color.GREEN else Color.GRAY);\n\n\n\n#trend reversal\ndef y = rsi_val ;\ninput riReversLength = 2;\ninput lookBack = 2;\n\n\ndef rsi_expAvg = ExpAverage(rsi_val, riReversLength);\n\n#trend reversal\ndef overBoughtReversal = if ((rsi_expAvg &gt; overBoughtRsi)within 2 bar) and  (rsi_expAvg crosses above rsi_val) then price else 0;# if (rsi_expAvg &gt; OverBought and  rsi_expAvg crosses above rsi_val  within 3 bar ) then 40 else 0;\ndef oversoldRevesal = if ((rsi_expAvg &lt; overSoldRsi)within 2 bar) and  (rsi_expAvg crosses below rsi_val within 2 bar) then price else 0;\n\n##############\n########!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n#vwap vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\n#input numDevUp = 2.0;\ninput vwapTimeFrame = {default DAY, WEEK, MONTH};\n\ndef cap = GetAggregationPeriod();\ndef errorInAggregation =\n    vwapTimeFrame == vwapTimeFrame.DAY and cap &gt;= AggregationPeriod.WEEK or\n    vwapTimeFrame == vwapTimeFrame.WEEK and cap &gt;= AggregationPeriod.MONTH;\nAssert(!errorInAggregation, \&quot;timeFrame should be not less than current chart aggregation period\&quot;);\n\ndef yyyyMmDd = GetYYYYMMDD();\ndef periodIndx;\nswitch (vwapTimeFrame) {\ncase DAY:\n    periodIndx = yyyyMmDd;\ncase WEEK:\n    periodIndx = Floor((DaysFromDate(First(yyyyMmDd)) + GetDayOfWeek(First(yyyyMmDd))) / 7);\ncase MONTH:\n    periodIndx = RoundDown(yyyyMmDd / 100, 0);\n}\ndef isPeriodRolled = CompoundValue(1, periodIndx != periodIndx[1], yes);\n\ndef volumeSum;\ndef volumeVwapSum;\ndef volumeVwap2Sum;\n\nif (isPeriodRolled) {\n    volumeSum = volume;\n    volumeVwapSum = volume * vwap;\n    volumeVwap2Sum = volume * Sqr(vwap);\n} else {\n    volumeSum = CompoundValue(1, volumeSum[1] + volume, volume);\n    volumeVwapSum = CompoundValue(1, volumeVwapSum[1] + volume * vwap, volume * vwap);\n    volumeVwap2Sum = CompoundValue(1, volumeVwap2Sum[1] + volume * Sqr(vwap), volume * Sqr(vwap));\n}\ndef vWapprice = volumeVwapSum / volumeSum;\ndef deviation = Sqrt(Max(volumeVwap2Sum / volumeSum - Sqr(vWapprice), 0));\n\ndef VWAP = vWapprice;\ninput numDevUp = 2.0;\ninput numDevDn = -2.0;\n\ndef vwap_UpperBand = price + numDevUp * deviation;\ndef vwap_LowerBand = price + numDevDn * deviation;\n\ninput vwapCondition = no;\n#input vp=close;\ndef conVwapBuy = if  vwapCondition then  close &gt;= VWAP else 1;\n\n#####^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n#MACD\n\ninput fastLength = 12;\ninput slowLength = 26;\ninput MACDLength = 9;\ninput displace = 0;\ndef fastAvg = Sum(volume * price, fastLength) / Sum(volume, fastLength);\ndef slowAvg = Sum(volume * price, slowLength) / Sum(volume, slowLength);\ndef Value = fastAvg - slowAvg;\ndef Avg = ExpAverage(Value, MACDLength);\ndef MACD_Diff  = Value - Avg;\n#def ZeroLine = 0;\n\ninput def_cond = no;\ndef MACD_cond_logic = if (def_cond) then MACD_Diff &lt;= 0 else yes;\n\n\n#MACD Pivot reversal\n#input FilterLength=3;\n######################\n#def MACDV_Diff_expAvg = ExpAverage(MACD_Diff, FilterLength);\n#plot oversoldRevesalMACDV =if ((Diff_MACDV &lt; MacdZeroLine)within lookBack bar) and  ( Diff_MACDV crosses above   MACDV_Diff_expAvg within lookBack bar)and Diff_MACDV &gt; Diff_MACDV[1] then 1 else 0;# if (MACDV_Diff_expAvg &gt; OverBought and  MACDV_Diff_expAvg crosses above rsi_val  within 3 bar ) then 40 else 0;\n#plot overBoughtReversalMACDV = if ((Diff_MACDV &gt; MacdZeroLine)within lookBack bar) and  (MACDV_Diff_expAvg crosses above  Diff_MACDV  within lookBack bar)  and Diff_MACDV &lt; Diff_MACDV[1] and Diff_MACDV&gt;0 then 1 else 0;\n\n\n#trend Pivot reversal\ndef twoBarPivotMACD_Buy =  MACD_Diff &gt; MACD_Diff[1] and MACD_Diff[1] &gt; MACD_Diff[2] and MACD_Diff[2] &lt; MACD_Diff[3] and MACD_Diff[3] &lt; MACD_Diff [4];\ndef twoBarPivotMACD_Sell = MACD_Diff &lt; MACD_Diff[1] and MACD_Diff[1] &lt; MACD_Diff[2] and MACD_Diff[2] &gt; MACD_Diff[3] and MACD_Diff[3] &gt; MACD_Diff [4];\n###################\n\n\ndef uptrend = if price &gt; price[1] and price[1] &gt;= price[2] then 1 else 0;\n\n#####################################-----------------\n\ninput aggPeriod = AggregationPeriod.DAY;\ninput AvgType = AverageType.SIMPLE;\ninput short_len = 10;\ninput mid_len = 21;\ninput long_len = 50;\ninput moving_average = no;\ndef AVG1 = MovingAverage(AvgType, close(period = aggPeriod), short_len);\ndef AVG2 = MovingAverage(AvgType, close(period = aggPeriod), mid_len);\ndef AVG3 = MovingAverage(AvgType, close(period = aggPeriod), long_len);\n#def EMA_condition = if moving_average then (close &gt; AVG1 or close &gt; AVG2 or  close &gt; AVG3) else yes;\ndef EMA_condition = if moving_average then (close &gt; AVG1 ) else yes;\n\nAddLabel( yes, Concat(short_len + \&quot;MA = \&quot;, AVG1), Color.CYAN);\nAddLabel( yes, Concat(mid_len + \&quot;MA = \&quot;, AVG2), Color.LIGHT_ORANGE);\nAddLabel( yes, Concat(long_len + \&quot;MA = \&quot;, AVG3), Color.PINK);\n\n\n\n##############################################\n#@@@@\n#ADX\ninput adxLength = 14;\ninput adxAverageType = AverageType.WILDERS;\n\ndef ADX = DMI(adxLength, adxAverageType).ADX;\n#ADX.setDefaultColor(GetColor(5));\n\ninput length = 7;\ninput signalLength = 10;\ninput averageType = AverageType.WEIGHTED;\ninput averageTypeSignal = AverageType.EXPONENTIAL;\n\n\n\ndef Ref = ADX;# reference OnBalanceVolume();\nplot RefMoving = MovingAverage(averageType, Ref, length);\nplot Signal = MovingAverage(averageTypeSignal, RefMoving, signalLength);\nplot dif =  Ref - RefMoving;\n#Ref.SetDefaultColor(GetColor(4));\nRefMoving.SetDefaultColor(GetColor(8));\nSignal.SetDefaultColor(GetColor(2));\ndif.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);\ndif.SetLineWeight(3);\n\n\ndif.DefineColor(\&quot;Positive and Up\&quot;, Color.CYAN);\ndif.DefineColor(\&quot;Positive and Down\&quot;, Color.BLUE);\ndif.DefineColor(\&quot;Negative and Down\&quot;, Color.RED);\ndif.DefineColor(\&quot;Negative and Up\&quot;, Color.YELLOW);\ndif.AssignValueColor(if dif &gt;= 0 then if dif &gt; dif[1] then dif.Color(\&quot;Positive and Up\&quot;) else dif.Color(\&quot;Positive and Down\&quot;) else if dif &lt; dif[1] then dif.Color(\&quot;Negative and Down\&quot;) else dif.Color(\&quot;Negative and Up\&quot;));\n\n\n#@@@@@\n###################################\ndef SMI_ADX_Buy_Signal;\nif GetAggregationPeriod() &lt; AggregationPeriod.FIFTEEN_MIN\nthen\n{\n    SMI_ADX_Buy_Signal = if ( (SMI crosses above AvgSMI  within lookBack bar) and (Ref crosses above RefMoving within lookBack bar) and dif &gt;= 0 and (rsi_val &gt; overSoldRsi and rsi_val &lt; 60 ) and MACD_cond_logic and  EMA_condition) and Ref &gt; Ref[2] then 1 else 0;\n\n}\nelse {\n    SMI_ADX_Buy_Signal = 0;\n}\nplot buy6 = SMI_ADX_Buy_Signal;\n\n\ndef SMI_Buy_Signal = if ( (AvgSMI crosses above overbought  within lookBack bar) and SMI &gt;  AvgSMI and (rsi_val &gt; overSoldRsi and rsi_val &lt; overBoughtRsi + 10 ) and MACD_cond_logic and  EMA_condition) and (close[1] &gt;= VWAP[1] and close &gt;= vwap_UpperBand[1]) and (uptrend) then 1 else 0;\nplot buy2 = SMI_Buy_Signal;\n\n#def  buySvix_Signal = if ( MACD_cond_logic  and  EMA_condition and  oversoldRevesal  and buySvix &lt; Zeroline - 10 ) then 1 else 0;\n#plot buy3 = buySvix_Signal;\n\n\n\n\n\n\ndef SMI_Sell_Signal = if ( (SMI crosses below AvgSMI within lookBack bar) and (overBoughtReversal)) then 1 else 0;\n#def sellSignal2 = if ((rsi_val  &gt; overBoughtRsi within 3 bar) and (smi crosses below AvgSMI within 3 bar)) then 1 else 0;\n\n\nplot sell2 = SMI_Sell_Signal;\n\n#######\n\n#def FVE_buySignal = conVwapBuy and oversoldRevesal and pFVE_Bull  and MACD_cond_logic ;# and Diff &gt;= 0;\n#def sig_buy = pFVE_Bull and Diff &gt;= 0;\n#plot buy4 = FVE_buySignal ;\n\n\n#def FVE_sellSignal = overBoughtReversal and pFVE_Bear ;\n#plot sell4 = FVE_sellSignal;\nplot buy5 = twoBarPivotMACD_Buy and oversoldRevesal;\nplot sell5 = twoBarPivotMACD_Sell and overBoughtReversal;\n\n####\n#def buySignal2 = if (oversoldRevesal  and buythedip2 &lt; Zeroline ) then 1 else 0;\n\n#def buySignal3 = if ( oversoldRevesal  and buythedip3 &lt; Zeroline - 10 ) then 1 else 0;\n#plot buy3 = buySignal3;\n\nAddChartBubble(buy2 == 1, buy2, \&quot;B2SMI= \&quot; +  low[1] + \&quot; rsi \&quot; + rsi_val + \&quot; w \&quot; + VWAP[1], Color.LIGHT_ORANGE, no);\n#AddChartBubble(buy3 == 1, buy3,  \&quot;B3Svix= \&quot; + price + \&quot; rsi \&quot; + rsi_val, Color.LIGHT_GRAY, no);\n#AddChartBubble(buy4 == 1, buy4,  \&quot;B4FVE= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.YELLOW, no);\nAddChartBubble(buy5 == 1, buy5,  \&quot;B5Macd= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.CYAN, no);\nAddChartBubble(buy6 == 1, buy6,  \&quot;B5AdxSMI= \&quot; + price + \&quot; \\nrsi \&quot; + rsi_val[lookBack] + \&quot; \\nAdx \&quot; + Ref[lookBack], Color.GREEN, no);\n\n#AddChartBubble(sell1 == 1, sell1, \&quot;S1STR= \&quot; + price + \&quot; rsi \&quot; + rsi_val, Color.LIGHT_RED, no);#Buy the Dip\n\nAddChartBubble(sell2 == 1, sell2, \&quot;S2SMI= \&quot; + price + \&quot; rsi \&quot; + rsi_val, Color.PINK, no);#Buy the Dip\n#AddChartBubble(sell4 == 1, sell4, \&quot;S4FVE= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.VIOLET, no);#Buy the Dip\nAddChartBubble(sell5 == 1, sell5, \&quot;S5Macd= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.BLUE, no);#Buy the Dip\n#AddChartBubble(oversoldRevesal , close, rsi_val, Color.blue, no);#Buy the Dip\nplot scan = buy2;&quot;,name=&quot;_d344cec2_79a9_43f5_8e27_7e658f475446&quot;}))})}}" SYMBOL="AAPL" SYMBOL_GROUP="5" VERTICAL="false" VISIBLE="true" WEIGHT="1.0"/>
            <CHART_2 VERTICAL="false" VISIBLE="false" WEIGHT="3.0"/>
            <CHART_3 VERTICAL="false" VISIBLE="false" WEIGHT="3.0"/>
            <DASHBOARD VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <LEVEL_II VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <LIVE_NEWS VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <PHASE_SCORES VERTICAL="false" VISIBLE="false" WEIGHT="2.0"/>
            <TIME_SALES VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <TRADE CONFIGURATION_NAME="SINGLE" ORDER_RULES_SET="STOCK" ORDER_TYPE="LIMIT" OS_AUTO="false" OS_EXPANDED="false" OS_TIF="DAY" QTY="100.0" TEMPLATE="SINGLE" TRADE_BUTTONS="BUY_MKT;SELL_MKT;MULTI_CANCEL;REVERSE;FLAT;SECOND_LINE;QUANTITY;AUTO_SEND;ORDER_SETUP" VISIBLE="false">
              <OCO_STOP>
                <TRG_0 TRG_ENBL="true" TRG_LINK="ASK_BID" TRG_OFFSET_MODE="TICK" TRG_OT="STOP" TRG_SETUP="10.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AAPL="10.0" ZM="10.0"/>
                </TRG_0>
              </OCO_STOP>
              <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="1.0" TRG_TIF="DAY">
                <OFFSET_PER_SYMBOL AAPL="1.0" ZM="1.0"/>
              </TRG_0>
              <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-1.0" TRG_TIF="DAY">
                <OFFSET_PER_SYMBOL AAPL="-1.0" ZM="-1.0"/>
              </TRG_1>
              <_2>
                <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="2.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AAPL="2.0" ZM="2.0"/>
                </TRG_0>
                <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-2.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AAPL="-2.0" ZM="-2.0"/>
                </TRG_1>
              </_2>
              <_3>
                <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="3.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AAPL="3.0" ZM="3.0"/>
                </TRG_0>
                <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-3.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AAPL="-3.0" ZM="-3.0"/>
                </TRG_1>
              </_3>
            </TRADE>
          </ACT_TRD_CELL4>
          <ACT_TRD_CELL5 ROWSPANELWEIGHT="1.0" ROWWEIGHT0="1.0" ROWWEIGHT1="1.0" SELECTED_TYPE="CHART" SIDEBAR_IS_ACTIVE="true" SYMBOL="AAPL" SYMBOL_GROUP="5" TRADE_BUTTONS_MIGRATED="true">
            <ACTIVETRADER VERTICAL="false" VISIBLE="false" WEIGHT="2.0"/>
            <BIG_BUTTONS VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <CHART CONFIGURATION="@v9@%0:com.devexperts.tos.chartdata,1:com.devexperts.tos.thinkscript.data,2:java.awt,3:com.devexperts.toschart.control.subgraph,4:com.devexperts.toschart.elstudies,5:com.devexperts.toschart.script%owner{chartAggregationPeriods:ChartAggregationPeriodArray0{15::ChartAggregationPeriod0},chartAggregationPeriods=@ChartAggregationPeriodArray0,colors{1::CustomColor0,6::CustomColor1}}#com.devexperts.toschart.core.ChartModel{encodedMixinsState=&quot;{\&quot;common\&quot;:{\&quot;DRAWING_SETS\&quot;:\&quot;{}\&quot;},\&quot;state_props\&quot;:{\&quot;state_type\&quot;:\&quot;REGULAR\&quot;},\&quot;monkey_bars_exp\&quot;:{\&quot;LikefolioMixin\&quot;:\&quot;{\\\&quot;paintingSettings\\\&quot;:{\\\&quot;neutralSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;positiveSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;negativeSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;sentimentSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true}},\\\&quot;shownDivisions\\\&quot;:[],\\\&quot;allDivisions\\\&quot;:[]}\&quot;},\&quot;monkey_bars\&quot;:{},\&quot;seasonality\&quot;:{},\&quot;regular\&quot;:{\&quot;DescriberMixin\&quot;:\&quot;{\\\&quot;visibility\\\&quot;:\\\&quot;HIDE_PANEL\\\&quot;,\\\&quot;studiesMode\\\&quot;:\\\&quot;HIDE_STUDIES\\\&quot;}\&quot;,\&quot;LikefolioMixin\&quot;:\&quot;{\\\&quot;paintingSettings\\\&quot;:{\\\&quot;neutralSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;positiveSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;negativeSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;sentimentSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true}},\\\&quot;shownDivisions\\\&quot;:[],\\\&quot;allDivisions\\\&quot;:[]}\&quot;}}&quot;,encodedPatternsModel=&quot;{\&quot;showPatterns\&quot;:true,\&quot;models\&quot;:[],\&quot;fibModels\&quot;:[]}&quot;,groupId=&quot;default&quot;,styleSettings{chartAggregationSettings.timeAggregationSettings=!com.devexperts.toschart.model.TimeFrameAggregationSettings.createTickOrTimeAggregation(!%0.ChartRange.findByCode(&quot;DAY10&quot;),@ChartAggregationPeriod0),commonStyleSettings{colorSettings{backgroundColor=#%1.CustomColor(#%2.Color(0,0,0,255)),monkeyProfileTypeColors.defaultRowHeight=&lt;F,mpExpandedTypeColors.defaultRowHeight=&lt;F,volumeColor=#%1.CustomColor(#%2.Color(0,0,0,255))},expansion.right=115,fitOrdersToScreen=&lt;T,keepPriceZoom=&lt;T,leftAxisRegulator{maxValue=805926.78632479d,minValue=-33029.78632479d},manualAxisRegulator{maxValue=125.16082355d,minValue=114.94426702d},previousRightExpansion=115,shortCuts{^(&quot;Time Zone&quot;,&lt;F),^(&quot;Show Expiration Friday &quot;,&lt;F),^(&quot;Keep Price Zoom&quot;,&lt;F),^(&quot;enableLeftAxis&quot;,&lt;F),!get:Boolean0(&quot;Chart mode&quot;),^(&quot;Fit expected price ranges&quot;,@Boolean0),^(&quot;emphasizeDigitMPExpanded&quot;,&lt;F),^(&quot;showWicksCandleTrend&quot;,&lt;F),^(&quot;highlightEarnings&quot;,&lt;F),^(&quot;synchronizeCrosshair&quot;,&lt;F),^(&quot;myToolsMode&quot;,&lt;F),^(&quot;seasonalityStyle&quot;,&lt;F),^(&quot;Show Price Subgraph&quot;,&lt;F),^(&quot;closePriceLevel&quot;,&lt;F),^(&quot;Color Volume As Symbol Ticks&quot;,&lt;F),^(&quot;highlightPhantomRBars&quot;,&lt;F),^(&quot;Cross type &quot;,&lt;F),^(&quot;Fit Studies to Screen&quot;,@Boolean0),^(&quot;Chart type &quot;,&lt;F),^(&quot;Fit Orders&quot;,&lt;F),^(&quot;Bubbles as Percentage&quot;,&lt;F),^(&quot;hideStatusString&quot;,&lt;F),^(&quot;Show Studies &quot;,&lt;F),^(&quot;showWicksHeikinAshi&quot;,&lt;F),^(&quot;Alerts&quot;,&lt;F),^(&quot;Chart scale&quot;,&lt;F),^(&quot;Fit High/Low&quot;,&lt;F),^(&quot;Orders&quot;,&lt;F),^(&quot;Use Log Scale &quot;,&lt;F),^(&quot;Fit Study Markers to Screen&quot;,@Boolean0),^(&quot;Fit Alerts&quot;,&lt;F),^(&quot;Fit patterns&quot;,&lt;F),^(&quot;Percentage View&quot;,&lt;F),^(&quot;Make Auto Zoom &quot;,&lt;F),^(&quot;Show Year Marking Line&quot;,&lt;F),^(&quot;Show Rollover Line&quot;,&lt;F),^(&quot;Show High/Low Bubbles &quot;,&lt;F),^(&quot;Snap mode&quot;,&lt;F),^(&quot;highlightStudies&quot;,&lt;F),^(&quot;Overlapped Volume&quot;,&lt;F),^(&quot;Show Symbol Logo&quot;,&lt;F),^(&quot;Show Last Price Bubble &quot;,&lt;F),^(&quot;emphasizeDigitMP&quot;,&lt;F),^(&quot;Show grid&quot;,@Boolean0),^(&quot;showWicksCandle&quot;,&lt;F),^(&quot;Show trades&quot;,&lt;F),^(&quot;highlightSeasons&quot;,&lt;F),^(&quot;Extend Order/Alert Line to Left&quot;,&lt;F)},showGrid=&lt;F,showTradeExecution=&lt;T,step=10.526315789473685d,volumeColorByTicks=&lt;T},forexStyleSettings.shortCuts.^(&quot;Show Volume Subgraph&quot;,&lt;F),futuresStyleSettings{highlightExtendedHours=&lt;T,shortCuts{^(&quot;adjustForContractChanges&quot;,&lt;F),^(&quot;Show Open Interest&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,&lt;F),^(&quot;showContractChangeEvents&quot;,&lt;F),^(&quot;futures_daily_close_price&quot;,&lt;F),^(&quot;Show Options&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,&lt;F),^(&quot;startAtMarketOpen&quot;,&lt;F)},tradingHoursOnly=&lt;T},optionsStyleSettings{shortCuts{^(&quot;Show Open Interest&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,&lt;F),^(&quot;Show Theo Price&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,&lt;F),^(&quot;startAtMarketOpen&quot;,&lt;F)},startAggregationAtMarketOpen=&lt;F},otherStyleSettings{shortCuts{^(&quot;Show Social Sentiment&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,@Boolean0),^(&quot;Show Options&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,&lt;F),^(&quot;Show Corporate Actions&quot;,&lt;F),^(&quot;Show CNBC Video&quot;,&lt;F),^(&quot;startAtMarketOpen&quot;,@Boolean0),^(&quot;adjustForDividends&quot;,&lt;F)},startAggregationAtMarketOpen=&lt;F,tradingHoursOnly=&lt;T},setsIdentifiers.styleSetName=&quot;DEF_X_STYLE&quot;},subgraphModels{!get(#%3.SubgraphId(&quot;Symbol&quot;)){height=514,storableIndicators{+(!%4.CompiledStudy.resolveStudy(#%5.ScriptEssence{body=&quot;# xiuyu plot last price line\n\nplot dynamicLine = HighestAll(if IsNaN(close[-1]) then close else Double.NaN);\n\ndynamicLine.SetPaintingStrategy(PaintingStrategy.LINE);\ndynamicLine.SetDefaultColor(Color.RED);&quot;,name=&quot;_b3ecaf9f_448e_37d8_8feb_148e97a78acc&quot;}){plots{0:{color=#%1.CustomColor(#%2.Color(204,0,255,255))}}}),+(!%4.CompiledStudy.resolveStudy(#%5.ScriptEssence{body=&quot;### xiuyu vwap cross signal with abnormal volume\n\n#declare hide_on_daily;\n\n####\n#MTF\ndef tFrame = GetAggregationPeriod();\ninput timeFrame = {default DAY, WEEK, MONTH};\ninput aggregationPeriod = AggregationPeriod.HOUR;\ninput useAutoAggegate = yes;\n\n\n\n# Variables:\n#def  =if (useAutoAggegate) then open(period = aggregationPeriod1) else open;\n\ndef AutoAGG = if tFrame &lt;  AggregationPeriod.DAY then AggregationPeriod.DAY\n             else if  tFrame &lt; AggregationPeriod.WEEK then AggregationPeriod.WEEK\n                  else AggregationPeriod.MONTH;\ndef AGG = if (!useAutoAggegate) then aggregationPeriod else AutoAGG;\n\ndef testTimeFrames = if tFrame &lt; AGG  then yes else no;\n\n#AddLabel(useAutoAggegate, if testTimeFrames  then \&quot;Time Frames Are Correct\&quot; else \&quot;Time Frames Are \n\ninput length = 10; #average volume lenght\ninput volMinimum = 50000;\ninput showPriceColor = yes;\ninput factor = 1.50; #show what factors to avgvolume \ninput nDevUp = 2.0;\ninput nDevDn = -2.0;\n\ndef avgvolume = Average(volume, length) * factor;\n\n\n#plot vwap = reference VWAP( AGG);\n#######\n\n\ndef cap = GetAggregationPeriod();\ndef errorInAggregation =\n    timeFrame == timeFrame.DAY and cap &gt;= AggregationPeriod.WEEK or\n    timeFrame == timeFrame.WEEK and cap &gt;= AggregationPeriod.MONTH;\nAssert(!errorInAggregation, \&quot;timeFrame should be not less than current chart aggregation period\&quot;);\n\ndef yyyyMmDd = GetYYYYMMDD();\ndef periodIndx;\nswitch (timeFrame) {\ncase DAY:\n    periodIndx = yyyyMmDd;\ncase WEEK:\n    periodIndx = Floor((DaysFromDate(First(yyyyMmDd)) + GetDayOfWeek(First(yyyyMmDd))) / 7);\ncase MONTH:\n    periodIndx = RoundDown(yyyyMmDd / 100, 0);\n}\ndef isPeriodRolled = CompoundValue(1, periodIndx != periodIndx[1], yes);\n\ndef volumeSum;\ndef volumeVwapSum;\ndef volumeVwap2Sum;\n\nif (isPeriodRolled) {\n    volumeSum = volume;\n    volumeVwapSum = volume * vwap;\n    volumeVwap2Sum = volume * Sqr(vwap);\n} else {\n    volumeSum = CompoundValue(1, volumeSum[1] + volume, volume);\n    volumeVwapSum = CompoundValue(1, volumeVwapSum[1] + volume * vwap, volume * vwap);\n    volumeVwap2Sum = CompoundValue(1, volumeVwap2Sum[1] + volume * Sqr(vwap), volume * Sqr(vwap));\n}\ndef price = volumeVwapSum / volumeSum;\ndef deviation = Sqrt(Max(volumeVwap2Sum / volumeSum - Sqr(price), 0));\n\nplot VWAP = price;\nplot UpperBand = price + nDevUp * deviation;\nplot LowerBand = price + nDevDn * deviation;\nplot UpperBand2 = price + (1+nDevUp) * deviation;\nplot LowerBand2 = price +(-1+ nDevDn) * deviation;\ndef sdvP1=  price + deviation;\ndef sdvN1=  price - deviation;\n#####\n\n\nplot SD1up =close[1] crosses above sdvp1 and ( open&lt; close) and low&gt;sdvp1;\nSD1up.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nSD1up.SetDefaultColor(Color.graY);\nSD1up.SetLineWeight(2);\nAssignPriceColor(if SD1up and showPriceColor and open&lt; close then Color.violet else Color.CURRENT);\n\nAddLabel(yes, \&quot;VWAP= \&quot; + astext(VWAP), if VWAP&lt; close then Color.LIGHT_GREEN else if VWAP&gt; close then color.LIGHT_red else Color.GRAY);\n#AddLabel(yes, \&quot;VWAP= \&quot; + astext(VWAP), Color.White);\ndef vwDif= close- VWAP;\n#AddLabel(yes, \&quot; \&quot;+astext(vwDif), if vwDif&gt; 0 then Color.LIGHT_GREEN else if vwDif&lt; 0 then color.LIGHT_red else Color.GRAY);\nAddLabel(yes and vwDif&gt;0, \&quot; +\&quot;+astext(vwDif),  Color.LIGHT_GREEN );\nAddLabel(yes and vwDif&lt;=0, \&quot; \&quot;+astext(vwDif),  if vwDif&lt; 0 then color.LIGHT_red else Color.LIGHT_GRAY);\n\ninput vwapLableAll =yes;\nAddLabel(vwapLableAll, \&quot;VWAP +1= \&quot; + astext(sdvP1), if sdvP1&lt; close then Color.LIGHT_GREEN else if sdvP1&gt; close then color.LIGHT_red else Color.GRAY);\n\nAddLabel(vwapLableAll, \&quot;VWAP +2= \&quot; + astext(UpperBand), if UpperBand&lt; close then Color.LIGHT_GREEN else if UpperBand&gt; close then color.LIGHT_red else Color.GRAY);\nAddLabel(vwapLableAll, \&quot;VWAP +3= \&quot; + astext(UpperBand2), if UpperBand2&lt; close then Color.LIGHT_GREEN else if UpperBand2&gt; close then color.LIGHT_red else Color.GRAY);\n\nAddLabel(vwapLableAll, \&quot;VWAP -1= \&quot; + astext(sdvN1), if sdvN1&lt; close then Color.LIGHT_GREEN else if sdvN1&gt; close then color.LIGHT_red else Color.GRAY);\nAddLabel(vwapLableAll, \&quot;VWAP -2= \&quot; + astext(LowerBand), if LowerBand&lt; close then Color.LIGHT_GREEN else if LowerBand&gt; close then color.LIGHT_red else Color.GRAY);\nAddLabel(vwapLableAll, \&quot;VWAP -3= \&quot; + astext(LowerBand2), if LowerBand2&lt; close then Color.LIGHT_GREEN else if LowerBand2&gt; close then color.LIGHT_red else Color.GRAY);\n\n#AddLabel(vwapLableAll, \&quot;VWAP R= \&quot; + astext(upperBand/sdvN1 -1)+\&quot;  \&quot;+astext(upperBand/lowerBand -1)+\&quot;  \&quot;+astext(upperBand2/lowerBand2 -1), if LowerBand&lt; close then Color.LIGHT_GREEN else if LowerBand&gt; close then color.LIGHT_red else Color.GRAY);\n\nAddLabel(vwapLableAll, \&quot;VWAP R= \&quot; + astext(upperBand/sdvN1 -1)+\&quot;  \&quot;+astext(upperBand/lowerBand -1)+\&quot;  \&quot;+astext(upperBand2/lowerBand2 -1), if LowerBand&lt; close then Color.LIGHT_GREEN else if LowerBand&gt; close then color.LIGHT_red else Color.GRAY);\n\n\n\ndef volCheck = volume &gt;= avgvolume &amp;&amp; volume &gt;= volMinimum &amp;&amp; volume &gt;= volume[1];\ndef isCross =  close crosses VWAP;\ndef abnormalSignal = isCross and volCheck;\n\n\nVWAP.SetDefaultColor(color.white);#(GetColor(0));\nplot signalup = if abnormalSignal and close &gt; VWAP then low else Double.NaN;\nsignalup.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nsignalup.SetDefaultColor(Color.CYAN);\nsignalup.SetLineWeight(2);\n\nplot signaldown =  if abnormalSignal and close &lt; VWAP then high else Double.NaN;\nsignaldown.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);\nsignaldown.SetDefaultColor(Color.CYAN);\nsignaldown.SetLineWeight(2);\n\nAssignPriceColor(if abnormalSignal and showPriceColor then Color.CYAN else Color.CURRENT);\n\n\n#####\nvwap.SetStyle(Curve.POINTS);\nUpperBand.SetDefaultColor(GetColor(0));\nLowerBand.SetDefaultColor(GetColor(0));\n\nUpperBand.SetStyle(Curve.POINTS);\nLowerBand.SetStyle(Curve.POINTS);\n\nUpperBand2.SetDefaultColor(Color.YELLOW);\nLowerBand2.SetDefaultColor(Color.YELLOW);\n\nUpperBand2.SetStyle(Curve.SHORT_DASH);\nLowerBand2.SetStyle(Curve.SHORT_DASH);\n#input AutoHide=yes;\n#def hideLower = if AutoHide then close &gt;vwap  else 0;;\n#def hideUpper = if AutoHide then  close &lt;vwap  else 0;#- deviation\n#addLabel(yes, \&quot;hide U\&quot;+hideUpper +\&quot; L\&quot;+hideLower);\n#UpperBand.setHiding(hideUpper);\n#LowerBand.setHiding(hideLower);\n#UpperBand.Hide();\n#LowerBand.Hide();\n#UpperBand2.Hide();\n#LowerBand2.Hide();&quot;,name=&quot;_740dc265_6e6e_38a5_ba0e_c0a058a5d552&quot;}){inputsMap:TreeMap0{^(&quot;volMinimum&quot;,500000)},inputsMap=@TreeMap0,plots{0:{paintingStrategy=2}}}),+(!%4.CompiledStudy.resolveStudy(#%5.ScriptEssence{body=&quot;# @new\n# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2010-2021\n#\n\ninput pricePerRowHeightMode = {default AUTOMATIC, TICKSIZE, CUSTOM};\ninput customRowHeight = 1.0;\ninput timePerProfile = {default CHART, MINUTE, HOUR, DAY, WEEK, MONTH, \&quot;OPT EXP\&quot;, BAR};\ninput multiplier = 1;\ninput onExpansion = yes;\ninput profiles = 1000;\ninput showPointOfControl = yes;\ninput showValueArea = yes;\ninput valueAreaPercent = 70;\ninput opacity = 50;\n\ndef period;\ndef yyyymmdd = getYyyyMmDd();\ndef seconds = secondsFromTime(0);\ndef month = getYear() * 12 + getMonth();\ndef day_number = daysFromDate(first(yyyymmdd)) + getDayOfWeek(first(yyyymmdd));\ndef dom = getDayOfMonth(yyyymmdd);\ndef dow = getDayOfWeek(yyyymmdd - dom + 1);\ndef expthismonth = (if dow &gt; 5 then 27 else 20) - dow;\ndef exp_opt = month + (dom &gt; expthismonth);\nswitch (timePerProfile) {\ncase CHART:\n    period = 0;\ncase MINUTE:\n    period = floor(seconds / 60 + day_number * 24 * 60);\ncase HOUR:\n    period = floor(seconds / 3600 + day_number * 24);\ncase DAY:\n    period = countTradingDays(min(first(yyyymmdd), yyyymmdd), yyyymmdd) - 1;\ncase WEEK:\n    period = floor(day_number / 7);\ncase MONTH:\n    period = floor(month - first(month));\ncase \&quot;OPT EXP\&quot;:\n    period = exp_opt - first(exp_opt);\ncase BAR:\n    period = barNumber() - 1;\n}\n\ndef count = CompoundValue(1, if period != period[1] then (count[1] + period - period[1]) % multiplier else count[1], 0);\ndef cond = count &lt; count[1] + period - period[1];\ndef height;\nswitch (pricePerRowHeightMode) {\ncase AUTOMATIC:\n    height = PricePerRow.AUTOMATIC;\ncase TICKSIZE:\n    height = PricePerRow.TICKSIZE;\ncase CUSTOM:\n    height = customRowHeight;\n}\n\nprofile vol = volumeProfile(\&quot;startNewProfile\&quot; = cond, \&quot;onExpansion\&quot; = onExpansion, \&quot;numberOfProfiles\&quot; = profiles, \&quot;pricePerRow\&quot; = height, \&quot;value area percent\&quot; = valueAreaPercent);\ndef con = compoundValue(1, onExpansion, no);\ndef pc = if IsNaN(vol.getPointOfControl()) and con then pc[1] else vol.getPointOfControl();\ndef hVA = if IsNaN(vol.getHighestValueArea()) and con then hVA[1] else vol.getHighestValueArea();\ndef lVA = if IsNaN(vol.getLowestValueArea()) and con then lVA[1] else vol.getLowestValueArea();\n\ndef hProfile = if IsNaN(vol.getHighest()) and con then hProfile[1] else vol.getHighest();\ndef lProfile = if IsNaN(vol.getLowest()) and con then lProfile[1] else vol.getLowest();\ndef plotsDomain = IsNaN(close) == onExpansion;\n\nplot POC = if plotsDomain then pc else Double.NaN;\nplot ProfileHigh = if plotsDomain then hProfile else Double.NaN;\nplot ProfileLow = if plotsDomain then lProfile else Double.NaN;\nplot VAHigh = if plotsDomain then hVA else Double.NaN;\nplot VALow = if plotsDomain then lVA else Double.NaN;\n\nDefineGlobalColor(\&quot;Profile\&quot;, GetColor(1));\nDefineGlobalColor(\&quot;Point Of Control\&quot;, GetColor(5));\nDefineGlobalColor(\&quot;Value Area\&quot;, GetColor(8));\n\nvol.show(globalColor(\&quot;Profile\&quot;), if showPointOfControl then globalColor(\&quot;Point Of Control\&quot;) else color.current, if showValueArea then globalColor(\&quot;Value Area\&quot;) else color.current, opacity);\nPOC.SetDefaultColor(globalColor(\&quot;Point Of Control\&quot;));\nPOC.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nVAHigh.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nVALow.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nVAHigh.SetDefaultColor(globalColor(\&quot;Value Area\&quot;));\nVALow.SetDefaultColor(globalColor(\&quot;Value Area\&quot;));\nProfileHigh.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nProfileLow.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nProfileHigh.SetDefaultColor(GetColor(3));\nProfileLow.SetDefaultColor(GetColor(3));\nProfileHigh.hide();\nProfileLow.hide();&quot;,name=&quot;VolumeProfile&quot;}){hidden=&lt;T,inputsMap:TreeMap1{^(&quot;onExpansion&quot;,&lt;F),^(&quot;opacity&quot;,30),^(&quot;timePerProfile&quot;,&quot;DAY&quot;)},inputsMap=@TreeMap1,plots{0:{color=@CustomColor0},1:{color=@CustomColor1},2:{color=#%1.CustomColor(#%2.Color(255,0,0,255))},3:{color=@CustomColor1,paintingStrategy=11},4:{color=#%1.CustomColor(#%2.Color(255,0,0,255)),paintingStrategy=11}}}),+(!%4.CompiledStudy.resolveStudy(#%5.ScriptEssence{body=&quot;input PR_Target1 = 3219;\r\ninput PR_Target2= 3186;\r\ninput PR_Target3= 3175;\r\ninput PR_Target4= 3136;\ninput PR_Target5 = 3117;\r\ninput PR_Target6 = 3092;\r\ninput PR_Target7 = 3070;\r\ninput PR_Target8 = 3057;\r\ninput PR_Target9 = 3032;\r\ninput PR_Target10 = 3006;\r\ninput PR_Target11 = 2992;\r\ninput PR_Target12 = 2970;\r\ninput PR_Target13 = 2944;\r\ninput PR_Target14 = 2932;\ninput PR_Target15 = 2910;\r\ninput PR_Target16 = 2886;\r\ninput PR_Target17 = 2858;\ninput PR_Target18 = 3206;\n\nplot Target1 = PR_Target1;\r\nplot Target2 = PR_Target2;\nplot Target3 = PR_Target3;\nplot Target4 = PR_Target4;\nplot Target5 = PR_Target5;\nplot Target6 = PR_Target6;\nplot Target7 = PR_Target7;\nplot Target8 = PR_Target8;\nplot Target9 = PR_Target9;\nplot Target10 = PR_Target10;\nplot Target11 = PR_Target11;\nplot Target12 = PR_Target12;\nplot Target13 = PR_Target13;\nplot Target14 = PR_Target14;\nplot Target15 = PR_Target15;\r\nplot Target16 = PR_Target16;\nplot Target17 = PR_Target17;\nplot Target18 = PR_Target18;\n\nTarget1.setstyle(curve.short_DASH);\nTarget2.setstyle(curve.short_DASH);\nTarget3.setstyle(curve.short_DASH);\nTarget4.setstyle(curve.short_DASH);\nTarget5.setstyle(curve.short_DASH);\nTarget6.setstyle(curve.short_DASH);\nTarget7.setstyle(curve.short_DASH);\nTarget8.setstyle(curve.short_DASH);\nTarget9.setstyle(curve.short_DASH);\nTarget10.setstyle(curve.short_DASH);\nTarget11.setstyle(curve.short_DASH);\nTarget12.setstyle(curve.short_DASH);\nTarget13.setstyle(curve.short_DASH);\nTarget14.setstyle(curve.short_DASH);\nTarget15.setstyle(curve.short_DASH);\nTarget16.setstyle(curve.short_DASH);\nTarget17.setstyle(curve.short_DASH);\nTarget18.setstyle(curve.short_DASH);\n\n\r\ntarget1.setdefaultcolor(GetColor(0));\ntarget2.setdefaultcolor(GetColor(0));\ntarget3.setdefaultcolor(GetColor(0));\ntarget4.setdefaultcolor(GetColor(0));\ntarget5.setdefaultcolor(GetColor(0));\ntarget6.setdefaultcolor(GetColor(0));\ntarget7.setdefaultcolor(GetColor(0));\ntarget8.setdefaultcolor(GetColor(0));\ntarget9.setdefaultcolor(GetColor(0));\ntarget10.setdefaultcolor(GetColor(0));\ntarget11.setdefaultcolor(GetColor(0));\ntarget12.setdefaultcolor(GetColor(0));\ntarget13.setdefaultcolor(GetColor(0));\ntarget14.setdefaultcolor(GetColor(0));\ntarget15.setdefaultcolor(GetColor(0));\ntarget16.setdefaultcolor(GetColor(0));\ntarget17.setdefaultcolor(GetColor(0));\ntarget18.setdefaultcolor(GetColor(0));\n\r\n\nTarget1.hideTitle();\nTarget2.hideTitle();\nTarget3.hideTitle();\nTarget4.hideTitle();\nTarget5.hideTitle();\nTarget6.hideTitle();\nTarget7.hideTitle();\nTarget8.hideTitle();\nTarget9.hideTitle();\nTarget10.hideTitle();\nTarget11.hideTitle();\nTarget12.hideTitle();\nTarget13.hideTitle();\nTarget14.hideTitle();\nTarget15.hideTitle();\nTarget16.hideTitle();\nTarget17.hideTitle();\nTarget18.hideTitle();\n\nTarget1.hidebubble();\nTarget2.hidebubble();\nTarget3.hidebubble();\nTarget4.hidebubble();\nTarget5.hidebubble();\nTarget6.hidebubble();\nTarget7.hidebubble();\nTarget8.hidebubble();\nTarget9.hidebubble();\nTarget10.hidebubble();\nTarget11.hidebubble();\nTarget12.hidebubble();\nTarget13.hidebubble();\nTarget14.hidebubble();\nTarget15.hidebubble();\nTarget16.hidebubble();\nTarget17.hidebubble();\nTarget18.hidebubble();\n\n\n\n\n&quot;,name=&quot;_aeaa7103_ce8a_3533_9e24_b4800ad42a47&quot;}){hidden=&lt;T}),+(!%4.CompiledStudy.resolveStudy(#%5.ScriptEssence{body=&quot;#hint: yakBro daily ATR 2020\n#yakbro.com\n\ndeclare upper;\n\ninput atrLength =5;\ninput averageType = AverageType.WILDERS;\ninput Period = AggregationPeriod.DAY;\ninput atrLength2 =5;\n\ninput Period2 = AggregationPeriod.HOUR;\ninput offset = 0;\ninput prctOfDr = 50;\ninput showATR = yes;\ninput showTodayRS = yes; #show strength to today\'s range\n\ndef ATR = MovingAverage(averageType, TrueRange(high(period= Period), close(period = Period), low(period = Period)), ATRlength)[offset];\ndef ATR2 = MovingAverage(averageType, TrueRange(high(period= Period2), close(period = Period2), low(period = Period2)), ATRlength2)[offset];\ndef todayHigh = high(period = Period);\ndef todayLow = low(period = Period);\ndef DR = todayHigh - todayLow;#current range\ndef a = todayLow + DR * prctOfDr/100;#.5; #50% of DR price\ndef b = close(period=Period) - todayLow; #last close price to DR\ndef x = b / DR * 100; #current DR range\ndef rangeDiff = roundUp(ATR - DR); #Range left\n\n#labels\nAddLabel(showATR, \&quot;ATR: \&quot;+Round(DR,2)+ \&quot;/ ATR(\&quot;+atrLength+\&quot;):\&quot;+Round(ATR,2), (if DR &gt; ATR then Color.downtick else Color.LIGHT_GRAY));\n\nAddLabel(showATR, \&quot;Diff:\&quot; +absValue(rangeDiff),if rangeDiff &lt; 0 then Color.downtick else color.green);\nAddLabel(showATR, \&quot;/ ATR2(\&quot;+atrLength2+\&quot;):\&quot;+Round(ATR2,2), (if DR &gt; ATR2 then Color.downtick else Color.LIGHT_GRAY));\nAddLabel(showTodayRS,\&quot;RS: \&quot;+round(x,2) + \&quot;%\&quot;,if x &gt;70 then Color.GREEN else if x&gt;60 then color.LIGHT_GREEN else if x&gt;40 then color.orange else color.red);\n\n&quot;,name=&quot;_843536f6_4cec_345a_b9ad_7b0f7d848b54&quot;})),+(!%4.CompiledStudy.resolveStudy(#%5.ScriptEssence{body=&quot;input averageType = AverageType.expONENTIAL;\ninput showMovingAvgLable =NO;\ninput useMTF =No;\ninput aggregationPeriod1 =AggregationPeriod.Five_MIN;\n\n\ndef c =close(period = aggregationPeriod1);\ninput price = close;\ninput length1 = 10;\ninput length2 = 20;\ninput length3 = 50;\ninput length4 = 200;\ninput displace = 0;\ninput showAvg3 = no;\ndef priceV = if (!useMTF) then price else close(period = aggregationPeriod1);#(period = aggregationPeriod1));\ninput showAvg4 = no;\n\ninput showBreakoutSignals = no;\n\n\n\n\n#def AvgExp = ExpAverage(price[-displace], length);\nplot Avg1 = MovingAverage(averageType, price[-displace], length1);\nplot Avg2 = MovingAverage(averageType, price[-displace], length2);\nplot Avg3 = MovingAverage(averageType, price[-displace], length3);\nplot Avg4 = MovingAverage(averageType, price[-displace], length4);\n\nAvg3.setHiding(!showAvg3);\nAvg4.setHiding(!showAvg4);\n\ndef uptrend = open &gt;close[1] and close[1]&gt;close[2] ;\ndef downtrend =price &lt; AVg3;\n#plot SMA ( Average(price[-displace], length);\nplot UpSignal = Avg1 crosses above Avg2 and uptrend;\nplot DownSignal = Avg1 crosses below Avg2 and downtrend;\n#Add Label\n\nAddLabel(showMovingAvgLable, \&quot;  \&quot;+ length1+ \&quot;MAvg\&quot; ,Avg1.TakeValueColor ());\nAddLabel(showMovingAvgLable,  astext(Avg1), if Avg1&lt; close then Color.LIGHT_GREEN else if Avg1&gt; close then color.light_red else Color.Light_GRAY);\n\n\nAddLabel(showMovingAvgLable, \&quot;  \&quot;+ length2+ \&quot;MAvg\&quot; ,Avg2.TakeValueColor ());\nAddLabel(showMovingAvgLable,  astext(Avg2), if Avg2&lt; close then Color.LIGHT_GREEN else if Avg2&gt; close then color.light_red else Color.Light_GRAY);\n\nAddLabel(showMovingAvgLable, \&quot;  \&quot;+ length3+ \&quot;MAvg\&quot; ,Avg3.TakeValueColor ());\nAddLabel(showMovingAvgLable,  astext(Avg3), if Avg3&lt; close then Color.LIGHT_GREEN else if Avg3&gt; close then color.light_red else Color.Light_GRAY);\n\n\nAddLabel(showMovingAvgLable, \&quot;  \&quot;+ length4+ \&quot;MAvg\&quot; ,Avg4.TakeValueColor ());\nAddLabel(showMovingAvgLable,  astext(Avg4), if Avg4&lt; close then Color.LIGHT_GREEN else if Avg4&gt; close then color.light_red else Color.Light_GRAY);\n\n\n# Avg1.TakeValueColor ()\n#AddLabel(showMovingAvgLable,  length1+ \&quot;MAvg \&quot; +astext(Avg1) ,Avg1.TakeValueColor ());\n#AddLabel(showMovingAvgLable, astext(Avg1), if Avg1&lt; close then Color.GREEN else if Avg1&gt; close then color.light_red else Color.Light_GRAY);\n\n\n\n#AddLabel(showMovingAvgLable,  length2+ \&quot;MAvg \&quot;+ astext(Avg2) ,Avg2.TakeValueColor ());\n#AddLabel(showMovingAvgLable,  astext(Avg2), if Avg2&lt; close then Color.GREEN else if Avg2&gt; close then color.light_red else Color.Light_GRAY);\n#AddLabel(showMovingAvgLable,  length3+ \&quot;MAvg \&quot; +astext(Avg3),Avg3.TakeValueColor ());\n#AddLabel(showMovingAvgLable, astext(Avg3), if Avg3&lt; close then Color.GREEN else if Avg3&gt; close then color.light_red else Color.Light_GRAY);\n#AddLabel(showMovingAvgLable,  length4+ \&quot;MAvg \&quot; +astext(Avg4),Avg4.TakeValueColor ());\n#AddLabel(showMovingAvgLable, astext(Avg4), if Avg4&lt; close then Color.GREEN else if Avg4&gt; close then color.light_red else Color.Light_GRAY);\ndef bub;\nif !IsNaN(close[-1])\nthen {\n\n    bub = no;#Double.NaN;\n    \n} else {\nbub = yes;\n    \n}\ndef bubb = if  BarNumber() == 20  then yes else no;\n\ninput Show_Mavg_Key=no;\n\n#AddChartBubble(bub, Avg1, \&quot;MAvg\&quot;+ length1+ \&quot;= \&quot; + astext(Avg1), Color.LIGHT_ORANGE, no);\nAddChartBubble(bub and Show_Mavg_Key, Avg1, \&quot;MAvg\&quot;+ length1+ \&quot;= \&quot; + astext(Avg1), Avg1.TakeValueColor (), yes);\nAddChartBubble(bub and Show_Mavg_Key, Avg2, \&quot;MAvg\&quot;+ length2+ \&quot;= \&quot; + astext(Avg2), Avg2.TakeValueColor (), yes);\nAddChartBubble(bub and Show_Mavg_Key, Avg3, \&quot;MAvg\&quot;+ length3+ \&quot;= \&quot; + astext(Avg3), Avg3.TakeValueColor (), yes);\nAddChartBubble(bub and Show_Mavg_Key, Avg4, \&quot;MAvg\&quot;+ length4+ \&quot;= \&quot; + astext(Avg4), Avg4.TakeValueColor (), yes);\n\n#Vwap\ninput vwapTimeFrame = {default DAY, WEEK, MONTH};\ninput numDevDn = -1.5;\ninput numDevUp = 1.5;\ninput vwapLable =no;\n\n\ndef cap = getAggregationPeriod();\ndef errorInAggregation =\n    vwapTimeFrame == vwapTimeFrame.DAY and cap &gt;= AggregationPeriod.WEEK or\n    vwapTimeFrame == vwapTimeFrame.WEEK and cap &gt;= AggregationPeriod.MONTH;\nassert(!errorInAggregation, \&quot;timeFrame should be not less than current chart aggregation period\&quot;);\n\ndef yyyyMmDd = getYyyyMmDd();\ndef periodIndx;\nswitch (vwapTimeFrame) {\ncase DAY:\n    periodIndx = yyyyMmDd;\ncase WEEK:\n    periodIndx = Floor((daysFromDate(first(yyyyMmDd)) + getDayOfWeek(first(yyyyMmDd))) / 7);\ncase MONTH:\n    periodIndx = roundDown(yyyyMmDd / 100, 0);\n}\ndef isPeriodRolled = compoundValue(1, periodIndx != periodIndx[1], yes);\n\ndef volumeSum;\ndef volumeVwapSum;\ndef volumeVwap2Sum;\n\nif (isPeriodRolled) {\n    volumeSum = volume;\n    volumeVwapSum = volume * vwap;\n    volumeVwap2Sum = volume * Sqr(vwap);\n} else {\n    volumeSum = compoundValue(1, volumeSum[1] + volume, volume);\n    volumeVwapSum = compoundValue(1, volumeVwapSum[1] + volume * vwap, volume * vwap);\n    volumeVwap2Sum = compoundValue(1, volumeVwap2Sum[1] + volume * Sqr(vwap), volume * Sqr(vwap));\n}\ndef VWprice = volumeVwapSum / volumeSum;\ndef deviation = Sqrt(Max(volumeVwap2Sum / volumeSum - Sqr(VWprice), 0));\n\nplot VWAP = VWprice;\nplot UpperBand = VWprice + numDevUp * deviation;\nplot LowerBand = VWprice + numDevDn * deviation;\n\nVWAP.setDefaultColor(getColor(0));\nUpperBand.setDefaultColor(getColor(0));\nLowerBand.setDefaultColor(getColor(0));\n\nUpperBand.SetStyle(Curve.MEDIUM_DASH);\nLowerBand.SetStyle(Curve.MEDIUM_DASH);\n\n\nvwap.hide();\n#UpperBand.hide();\n#LowerBand.hide();\n\n#vwap\n\nAddLabel(vwapLable, \&quot;VWAP= \&quot; + astext(VWAP), if VWAP&lt; close then Color.LIGHT_GREEN else if VWAP&gt; close then color.LIGHT_red else Color.GRAY);\n#AddLabel(vwapLable, \&quot;VWAP= \&quot; + astext(VWAP), Color.White);\ndef vwDif= close- VWAP;\n#AddLabel(yes, \&quot; \&quot;+astext(vwDif), if vwDif&gt; 0 then Color.LIGHT_GREEN else if vwDif&lt; 0 then color.LIGHT_red else Color.GRAY);\nAddLabel(vwapLable and vwDif&gt;0, \&quot; +\&quot;+astext(vwDif),  Color.LIGHT_GREEN );\nAddLabel(vwapLable and vwDif&lt;=0, \&quot; \&quot;+astext(vwDif),  if vwDif&lt; 0 then color.LIGHT_red else Color.LIGHT_GRAY);\n#RSI\ninput overBoughtRsi = 70;\ninput overSoldRsi = 30;\ninput rsiLength = 14;\ninput rsiPrice = close;\ndef rsi_val = reference RSI(length = rsiLength, price = rsiPrice );\n####\n\n\n\nAddLabel(yes, \&quot;RSI = \&quot; + astext(rsi_val) , if rsi_val &gt; overBoughtRsi  then Color.RED else if rsi_val &lt; overSoldRsi then  Color.GREEN else Color.light_GRAY);\n\n\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\nAvg1.SetDefaultColor(color.white);\nAvg2.SetDefaultColor(color.cyan);\nAvg3.SetDefaultColor(color.light_red);\nAvg4.SetDefaultColor(color.pink);\n#avg3.SetStyle(Curve.MEDIUM_DASH);\n#avg4.SetStyle(Curve.MEDIUM_DASH);\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);\n&quot;,name=&quot;_686a0d47_2dc7_4466_91d6_64cf4907bd2a&quot;}){inputsMap:TreeMap2{^(&quot;price&quot;,&quot;CLOSE&quot;),^(&quot;rsiPrice&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap2,plots{6:{paintingStrategy=2}}})}},!get(#%3.SubgraphId(&quot;Volume&quot;)){height=88,storableIndicators.+(!%4.CompiledStudy.resolveStudy(#%5.ScriptEssence{body=&quot;#xiuyu 2020\n##volume datas\n\ndeclare on_volume;\n\n#Inputs datas\n\ninput LengthForSecond = 10;\ninput rVOLhigh = 2; #if avg rovl is 2 times\n\ninput show30dayData = yes;\ninput showEnteredLengthRvol = yes;\ninput ShowTodayVolume =  yes;\ninput ShowAvgVolume = yes;\ninput ShowEnteredRVOL = yes;\ninput ShowCurrentBar = yes;\n\n\n\n#Volume Data\ndef ADVol30 = Average(volume(period = AggregationPeriod.DAY), 30)[1];\ndef ADVolEntered = Average(volume(period = AggregationPeriod.DAY), LengthForSecond)[1];\ndef today = volume(period = aggregationPeriod.DAY);\ndef Rvol30 = round(today/Average(volume(period = AggregationPeriod.DAY), 30)[1],2);\ndef RvolEntered = round(today/Average(volume(period = AggregationPeriod.DAY), LengthForSecond)[1],2);\n\n# Labels\n\n#shows 30days data ADV n Rvol\nAddLabel(Show30dayData, \&quot;30 dADV: \&quot; + Round(ADVol30, 0), Color.LIGHT_GRAY);\nAddLabel(Show30dayData,\&quot;30rVol:\&quot; + Rvol30, (if Rvol30 &gt;= rVolhigh then Color.RED else if Rvol30 &gt;= 1 then Color.ORANGE else Color.WHITE) );\n\n#shows user entered datas\nAddLabel(ShowEnteredLengthRvol, LengthForSecond +\&quot; dADV: \&quot; + Round(ADVolEntered, 0), Color.LIGHT_GRAY);\nAddLabel(ShowEnteredRVOL,LengthForSecond + \&quot;rVol:\&quot; + RvolEntered ,(if RvolEntered &gt;= rVOLhigh then Color.RED else if RvolEntered &gt;= 1 then Color.ORANGE else Color.light_GRAY));\n\n#shows todays volume\nAddLabel(ShowTodayVolume, \&quot;Today: \&quot; + today, (if Rvol30 &gt;= rVolhigh then Color.reD else if Rvol30 &gt;= 1 then Color.ORANGE else Color.LIGHT_GRAY));\n\n\n#shows current bar\'s volume\nAddLabel(ShowCurrentBar, \&quot;Cur Bar: \&quot; + volume,color.light_GRAY);\n\n\n&quot;,name=&quot;_7350e5e2_721c_35be_a787_608a2d7c1672&quot;}))},^(#%3.SubgraphId(&quot;Subgraph1&quot;),#%3.SubgraphStorableModel{height=149,storableIndicators.+(!%4.CompiledStudy.resolveStudy(#%5.ScriptEssence{body=&quot;# TheoTrade RSI in Laguerre Time Self Adjusting With Fractal Energy\n# Mobius\n# V03.06.15.2016\n# Both Fractal Energy and RSI are plotted. RSI in cyan and FE in yellow. Look for trend exhaustion in the FE and a reversal of RSI or Price compression in FE and an RSI reversal.\n\ndeclare lower;\n\n#Inputs: \ninput aggregationPeriod1 =AggregationPeriod.THIRTY_MIN;\n\n#input useOpen =no;\n#def price = if (useOpen) then   open(period = aggregationPeriod1) else close(period = aggregationPeriod1) ;\n\ninput nFE = 13;#hint nFE: length for Fractal Energy calculation. \n\n# Variables:\ndef o;\ndef h;\ndef l;\ndef c;\ndef CU1;\ndef CU2;\ndef CU;\ndef CD1;\ndef CD2;\ndef CD;\ndef L0;\ndef L1;\ndef L2;\ndef L3;\nplot RSI;\nplot OS;\nplot OB;\n\n# Calculations\no = (open(period = aggregationPeriod1) + close(period = aggregationPeriod1)[1]) / 2;\nh = Max(high(period = aggregationPeriod1), close(period = aggregationPeriod1)[1]);\nl = Min(low(period = aggregationPeriod1), close(period = aggregationPeriod1)[1]);\nc = (o + h + l + close(period = aggregationPeriod1)) / 4;\nplot gamma = Log(Sum((Max(high(period = aggregationPeriod1), close(period = aggregationPeriod1)[1]) - Min(low(period = aggregationPeriod1), close(period = aggregationPeriod1)[1])), nFE) / \n        (Highest(high(period = aggregationPeriod1), nFE) - Lowest(low(period = aggregationPeriod1), nFE)))\n            / Log(nFE);\ngamma.SetDefaultColor(Color.Yellow);\nL0 = (1 – gamma) * c + gamma * L0[1];\nL1 = -gamma * L0 + L0[1] + gamma * L1[1];\nL2 = -gamma * L1 + L1[1] + gamma * L2[1];\nL3 = -gamma * L2 + L2[1] + gamma * L3[1];\nif L0 &gt;= L1\nthen {\n    CU1 = L0 - L1;\n    CD1 = 0;\n} else {\n    CD1 = L1 - L0;\n    CU1 = 0;\n}\nif L1 &gt;= L2\nthen {\n    CU2 = CU1 + L1 - L2;\n    CD2 = CD1;\n} else {\n    CD2 = CD1 + L2 - L1;\n    CU2 = CU1;\n}\nif L2 &gt;= L3\nthen {\n    CU = CU2 + L2 - L3;\n    CD = CD2;\n} else {\n    CU = CU2;\n    CD = CD2 + L3 - L2;\n}\n\nRSI = if CU + CD &lt;&gt; 0 then CU / (CU + CD) else 0;\nRSI.SetDefaultColor(Color.Cyan);\nOS = if IsNaN(close(period = aggregationPeriod1)) then Double.NaN else 0.2;\nOS.SetDefaultColor(Color.Gray);\nOS.HideBubble();\nOS.HideTitle();\nOB = if IsNaN(close(period = aggregationPeriod1)) then Double.NaN else 0.8;\nOB.SetDefaultColor(Color.Gray);\nOB.HideBubble();\nOB.HideTitle();\nplot FEh = if isNaN(close(period = aggregationPeriod1)) then double.nan else .618;\nFEh.SetStyle(Curve.Long_Dash);\nFEh.HideBubble();\nFEh.SetDefaultColor(Color.Dark_Gray);\nFEh.HideTitle();\nplot FEl = if isNaN(close(period = aggregationPeriod1)) then double.nan else .382;\nFEl.SetStyle(Curve.Long_Dash);\nFEl.SetDefaultColor(Color.Dark_Gray);\nFEl.HideBubble();\nFEl.HideTitle();\nAddCloud(0, OS, Color.Green, Color.Green);\nAddCloud(OB, 1, Color.Red, Color.Red);\nAlert(RSI crosses below .9, \&quot;\&quot;, Alert.BAR, Sound.Bell);\nAlert(RSI crosses above .1, \&quot;\&quot;, Alert.BAR, Sound.Bell);\n\n# End Code RSI_Laguerre Self Adjusting with Fractal Energy&quot;,name=&quot;_d17145e8_5004_3ac1_8e21_8466363fd097&quot;}){alerts:LocalAlertArray0,alerts=@LocalAlertArray0})}),^(#%3.SubgraphId(&quot;Subgraph3&quot;),#%3.SubgraphStorableModel{height=144,storableIndicators.+(!%4.CompiledStudy.resolveStudy(#%5.ScriptEssence{body=&quot;# TheoTrade RSI in Laguerre Time Self Adjusting With Fractal Energy\n# Mobius\n# V03.06.15.2016\n# Both Fractal Energy and RSI are plotted. RSI in cyan and FE in yellow. Look for trend exhaustion in the FE and a reversal of RSI or Price compression in FE and an RSI reversal.\n\ndeclare lower;\n\n#Inputs: \ninput nFE = 13;#hint nFE: length for Fractal Energy calculation. \n\n# Variables:\ndef o;\ndef h;\ndef l;\ndef c;\ndef CU1;\ndef CU2;\ndef CU;\ndef CD1;\ndef CD2;\ndef CD;\ndef L0;\ndef L1;\ndef L2;\ndef L3;\nplot RSI;\nplot OS;\nplot OB;\n\n# Calculations\no = (open + close[1]) / 2;\nh = Max(high, close[1]);\nl = Min(low, close[1]);\nc = (o + h + l + close) / 4;\nplot gamma = Log(Sum((Max(high, close[1]) - Min(low, close[1])), nFE) / \n        (Highest(high, nFE) - Lowest(low, nFE)))\n            / Log(nFE);\ngamma.SetDefaultColor(Color.Yellow);\nL0 = (1 – gamma) * c + gamma * L0[1];\nL1 = -gamma * L0 + L0[1] + gamma * L1[1];\nL2 = -gamma * L1 + L1[1] + gamma * L2[1];\nL3 = -gamma * L2 + L2[1] + gamma * L3[1];\nif L0 &gt;= L1\nthen {\n    CU1 = L0 - L1;\n    CD1 = 0;\n} else {\n    CD1 = L1 - L0;\n    CU1 = 0;\n}\nif L1 &gt;= L2\nthen {\n    CU2 = CU1 + L1 - L2;\n    CD2 = CD1;\n} else {\n    CD2 = CD1 + L2 - L1;\n    CU2 = CU1;\n}\nif L2 &gt;= L3\nthen {\n    CU = CU2 + L2 - L3;\n    CD = CD2;\n} else {\n    CU = CU2;\n    CD = CD2 + L3 - L2;\n}\n\nRSI = if CU + CD &lt;&gt; 0 then CU / (CU + CD) else 0;\nRSI.SetDefaultColor(Color.Cyan);\nOS = if IsNaN(close) then Double.NaN else 0.2;\nOS.SetDefaultColor(Color.Gray);\nOS.HideBubble();\nOS.HideTitle();\nOB = if IsNaN(close) then Double.NaN else 0.8;\nOB.SetDefaultColor(Color.Gray);\nOB.HideBubble();\nOB.HideTitle();\nplot FEh = if isNaN(close) then double.nan else .618;\nFEh.SetStyle(Curve.Long_Dash);\nFEh.HideBubble();\nFEh.SetDefaultColor(Color.Dark_Gray);\nFEh.HideTitle();\nplot FEl = if isNaN(close) then double.nan else .382;\nFEl.SetStyle(Curve.Long_Dash);\nFEl.SetDefaultColor(Color.Dark_Gray);\nFEl.HideBubble();\nFEl.HideTitle();\nAddCloud(0, OS, Color.Green, Color.Green);\nAddCloud(OB, 1, Color.Red, Color.Red);\nAlert(RSI crosses below .9, \&quot;\&quot;, Alert.BAR, Sound.Bell);\nAlert(RSI crosses above .1, \&quot;\&quot;, Alert.BAR, Sound.Bell);\n\n# End Code RSI_Laguerre Self Adjusting with Fractal Energy&quot;,name=&quot;_31a475af_ca9a_3990_9a81_9098babc9d60&quot;}){alerts:LocalAlertArray1,alerts=@LocalAlertArray1})})}}" SYMBOL="AAPL" SYMBOL_GROUP="5" VERTICAL="false" VISIBLE="true" WEIGHT="1.0"/>
            <CHART_2 VERTICAL="false" VISIBLE="false" WEIGHT="3.0"/>
            <CHART_3 VERTICAL="false" VISIBLE="false" WEIGHT="3.0"/>
            <DASHBOARD VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <LEVEL_II VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <LIVE_NEWS VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <PHASE_SCORES VERTICAL="false" VISIBLE="false" WEIGHT="2.0"/>
            <TIME_SALES VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <TRADE CONFIGURATION_NAME="SINGLE" ORDER_RULES_SET="STOCK" ORDER_TYPE="LIMIT" OS_AUTO="false" OS_EXPANDED="false" OS_TIF="DAY" QTY="100.0" TEMPLATE="SINGLE" TRADE_BUTTONS="BUY_MKT;SELL_MKT;MULTI_CANCEL;REVERSE;FLAT;SECOND_LINE;QUANTITY;AUTO_SEND;ORDER_SETUP" VISIBLE="false">
              <OCO_STOP>
                <TRG_0 TRG_ENBL="true" TRG_LINK="ASK_BID" TRG_OFFSET_MODE="TICK" TRG_OT="STOP" TRG_SETUP="10.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AAPL="10.0" EVRG="10.0"/>
                </TRG_0>
              </OCO_STOP>
              <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="1.0" TRG_TIF="DAY">
                <OFFSET_PER_SYMBOL AAPL="1.0" EVRG="1.0"/>
              </TRG_0>
              <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-1.0" TRG_TIF="DAY">
                <OFFSET_PER_SYMBOL AAPL="-1.0" EVRG="-1.0"/>
              </TRG_1>
              <_2>
                <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="2.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AAPL="2.0" EVRG="2.0"/>
                </TRG_0>
                <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-2.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AAPL="-2.0" EVRG="-2.0"/>
                </TRG_1>
              </_2>
              <_3>
                <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="3.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AAPL="3.0" EVRG="3.0"/>
                </TRG_0>
                <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-3.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AAPL="-3.0" EVRG="-3.0"/>
                </TRG_1>
              </_3>
            </TRADE>
          </ACT_TRD_CELL5>
          <ACT_TRD_CELL6 ROWSPANELWEIGHT="1.0" ROWWEIGHT0="1.0" ROWWEIGHT1="1.0" SELECTED_TYPE="CHART" SIDEBAR_IS_ACTIVE="true" SYMBOL="AAL" SYMBOL_GROUP="7" TRADE_BUTTONS_MIGRATED="true">
            <ACTIVETRADER VERTICAL="false" VISIBLE="false" WEIGHT="2.0"/>
            <BIG_BUTTONS VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <CHART CONFIGURATION="@v8@%0:com.devexperts.tos.thinkscript.data,1:java.awt,2:com.devexperts.toschart.control.subgraph,3:com.devexperts.toschart.elstudies,4:com.devexperts.toschart.script%owner{chartAggregationPeriods:ChartAggregationPeriodArray0,chartAggregationPeriods=@ChartAggregationPeriodArray0}#com.devexperts.toschart.core.ChartModel{encodedMixinsState=&quot;{\&quot;common\&quot;:{\&quot;DRAWING_SETS\&quot;:\&quot;{}\&quot;},\&quot;state_props\&quot;:{\&quot;state_type\&quot;:\&quot;REGULAR\&quot;},\&quot;monkey_bars_exp\&quot;:{\&quot;LikefolioMixin\&quot;:\&quot;{\\\&quot;paintingSettings\\\&quot;:{\\\&quot;neutralSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;positiveSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;negativeSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;sentimentSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true}},\\\&quot;shownDivisions\\\&quot;:[],\\\&quot;allDivisions\\\&quot;:[]}\&quot;},\&quot;monkey_bars\&quot;:{},\&quot;seasonality\&quot;:{},\&quot;regular\&quot;:{\&quot;DescriberMixin\&quot;:\&quot;{\\\&quot;visibility\\\&quot;:\\\&quot;HIDE_PANEL\\\&quot;,\\\&quot;studiesMode\\\&quot;:\\\&quot;HIDE_STUDIES\\\&quot;}\&quot;,\&quot;LikefolioMixin\&quot;:\&quot;{\\\&quot;paintingSettings\\\&quot;:{\\\&quot;neutralSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;positiveSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;negativeSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;sentimentSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true}},\\\&quot;shownDivisions\\\&quot;:[],\\\&quot;allDivisions\\\&quot;:[]}\&quot;}}&quot;,encodedPatternsModel=&quot;{\&quot;showPatterns\&quot;:true,\&quot;models\&quot;:[],\&quot;fibModels\&quot;:[]}&quot;,groupId=&quot;default&quot;,styleSettings{commonStyleSettings{colorSettings{backgroundColor=#%0.CustomColor(#%1.Color(0,0,0,255)),monkeyProfileTypeColors.defaultRowHeight=&lt;F,mpExpandedTypeColors.defaultRowHeight=&lt;F,volumeColor=#%0.CustomColor(#%1.Color(0,0,0,255))},expansion.right=115,fitOrdersToScreen=&lt;T,keepPriceZoom=&lt;T,leftAxisRegulator{maxValue=805926.78632479d,minValue=-33029.78632479d},manualAxisRegulator{maxValue=35.7102924d,minValue=4.96298246d},previousRightExpansion=115,shortCuts{^(&quot;Time Zone&quot;,&lt;F),^(&quot;Show Expiration Friday &quot;,&lt;F),^(&quot;Keep Price Zoom&quot;,&lt;F),^(&quot;enableLeftAxis&quot;,&lt;F),!get:Boolean0(&quot;Chart mode&quot;),^(&quot;Fit expected price ranges&quot;,@Boolean0),^(&quot;emphasizeDigitMPExpanded&quot;,&lt;F),^(&quot;showWicksCandleTrend&quot;,&lt;F),^(&quot;highlightEarnings&quot;,&lt;F),^(&quot;synchronizeCrosshair&quot;,&lt;F),^(&quot;myToolsMode&quot;,&lt;F),^(&quot;seasonalityStyle&quot;,&lt;F),^(&quot;Show Price Subgraph&quot;,&lt;F),^(&quot;closePriceLevel&quot;,&lt;F),^(&quot;Color Volume As Symbol Ticks&quot;,&lt;F),^(&quot;highlightPhantomRBars&quot;,&lt;F),^(&quot;Cross type &quot;,&lt;F),^(&quot;Fit Studies to Screen&quot;,@Boolean0),^(&quot;Chart type &quot;,&lt;F),^(&quot;Fit Orders&quot;,&lt;F),^(&quot;Bubbles as Percentage&quot;,&lt;F),^(&quot;hideStatusString&quot;,&lt;F),^(&quot;Show Studies &quot;,&lt;F),^(&quot;showWicksHeikinAshi&quot;,&lt;F),^(&quot;Alerts&quot;,&lt;F),^(&quot;Chart scale&quot;,&lt;F),^(&quot;Fit High/Low&quot;,&lt;F),^(&quot;Orders&quot;,&lt;F),^(&quot;Use Log Scale &quot;,&lt;F),^(&quot;Fit Study Markers to Screen&quot;,@Boolean0),^(&quot;Fit Alerts&quot;,&lt;F),^(&quot;Fit patterns&quot;,&lt;F),^(&quot;Percentage View&quot;,&lt;F),^(&quot;Make Auto Zoom &quot;,&lt;F),^(&quot;Show Year Marking Line&quot;,&lt;F),^(&quot;Show Rollover Line&quot;,&lt;F),^(&quot;Show High/Low Bubbles &quot;,&lt;F),^(&quot;Snap mode&quot;,&lt;F),^(&quot;highlightStudies&quot;,&lt;F),^(&quot;Overlapped Volume&quot;,&lt;F),^(&quot;Show Symbol Logo&quot;,&lt;F),^(&quot;Show Last Price Bubble &quot;,&lt;F),^(&quot;emphasizeDigitMP&quot;,&lt;F),^(&quot;Show grid&quot;,@Boolean0),^(&quot;showWicksCandle&quot;,&lt;F),^(&quot;Show trades&quot;,&lt;F),^(&quot;highlightSeasons&quot;,&lt;F),^(&quot;Extend Order/Alert Line to Left&quot;,&lt;F)},showGrid=&lt;F,showTradeExecution=&lt;T,step=2.73224043715847d},forexStyleSettings.shortCuts.^(&quot;Show Volume Subgraph&quot;,&lt;F),futuresStyleSettings{highlightExtendedHours=&lt;T,shortCuts{^(&quot;adjustForContractChanges&quot;,&lt;F),^(&quot;Show Open Interest&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,&lt;F),^(&quot;showContractChangeEvents&quot;,&lt;F),^(&quot;futures_daily_close_price&quot;,&lt;F),^(&quot;Show Options&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,&lt;F),^(&quot;startAtMarketOpen&quot;,&lt;F)},tradingHoursOnly=&lt;T},optionsStyleSettings{shortCuts{^(&quot;Show Open Interest&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,&lt;F),^(&quot;Show Theo Price&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,&lt;F),^(&quot;startAtMarketOpen&quot;,&lt;F)},startAggregationAtMarketOpen=&lt;F},otherStyleSettings{shortCuts{^(&quot;Show Social Sentiment&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,@Boolean0),^(&quot;Show Options&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,&lt;F),^(&quot;Show Corporate Actions&quot;,&lt;F),^(&quot;Show CNBC Video&quot;,&lt;F),^(&quot;startAtMarketOpen&quot;,@Boolean0),^(&quot;adjustForDividends&quot;,&lt;F)},startAggregationAtMarketOpen=&lt;F,tradingHoursOnly=&lt;T},setsIdentifiers.styleSetName=&quot;DEF_X_STYLE&quot;},subgraphModels{!get(#%2.SubgraphId(&quot;Symbol&quot;)){height=469,storableIndicators.+(!%3.CompiledStudy.resolveStudy(#%4.ScriptEssence{body=&quot;input averageType = AverageType.SIMPLE;\ninput showMovingAvgLable =Yes;\ninput price = close;\ninput length1 = 10;\ninput length2 = 20;\ninput length3 = 50;\ninput length4 = 200;\ninput displace = 0;\ninput showAvg3 = yes;\n\ninput showAvg4 = yes;\n\ninput showBreakoutSignals = no;\n\n\n\n\n#def AvgExp = ExpAverage(price[-displace], length);\nplot Avg1 = MovingAverage(averageType, price[-displace], length1);\nplot Avg2 = MovingAverage(averageType, price[-displace], length2);\nplot Avg3 = MovingAverage(averageType, price[-displace], length3);\nplot Avg4 = MovingAverage(averageType, price[-displace], length4);\n\nAvg3.setHiding(!showAvg3);\nAvg4.setHiding(!showAvg4);\n\n\n#plot SMA ( Average(price[-displace], length);\nplot UpSignal = price crosses above Avg1;\nplot DownSignal = price crosses below Avg1;\n#Add Label\n\nAddLabel(showMovingAvgLable, \&quot;  \&quot;+ length1+ \&quot;MAvg\&quot; ,Avg1.TakeValueColor ());\nAddLabel(showMovingAvgLable,  astext(Avg1), if Avg1&lt; close then Color.LIGHT_GREEN else if Avg1&gt; close then color.light_red else Color.Light_GRAY);\n\n\nAddLabel(showMovingAvgLable, \&quot;  \&quot;+ length2+ \&quot;MAvg\&quot; ,Avg2.TakeValueColor ());\nAddLabel(showMovingAvgLable,  astext(Avg2), if Avg2&lt; close then Color.LIGHT_GREEN else if Avg2&gt; close then color.light_red else Color.Light_GRAY);\n\nAddLabel(showMovingAvgLable, \&quot;  \&quot;+ length3+ \&quot;MAvg\&quot; ,Avg3.TakeValueColor ());\nAddLabel(showMovingAvgLable,  astext(Avg3), if Avg3&lt; close then Color.LIGHT_GREEN else if Avg3&gt; close then color.light_red else Color.Light_GRAY);\n\n\nAddLabel(showMovingAvgLable, \&quot;  \&quot;+ length4+ \&quot;MAvg\&quot; ,Avg4.TakeValueColor ());\nAddLabel(showMovingAvgLable,  astext(Avg4), if Avg4&lt; close then Color.LIGHT_GREEN else if Avg4&gt; close then color.light_red else Color.Light_GRAY);\n\n\n# Avg1.TakeValueColor ()\n#AddLabel(showMovingAvgLable,  length1+ \&quot;MAvg \&quot; +astext(Avg1) ,Avg1.TakeValueColor ());\n#AddLabel(showMovingAvgLable, astext(Avg1), if Avg1&lt; close then Color.GREEN else if Avg1&gt; close then color.light_red else Color.Light_GRAY);\n\n\n\n#AddLabel(showMovingAvgLable,  length2+ \&quot;MAvg \&quot;+ astext(Avg2) ,Avg2.TakeValueColor ());\n#AddLabel(showMovingAvgLable,  astext(Avg2), if Avg2&lt; close then Color.GREEN else if Avg2&gt; close then color.light_red else Color.Light_GRAY);\n#AddLabel(showMovingAvgLable,  length3+ \&quot;MAvg \&quot; +astext(Avg3),Avg3.TakeValueColor ());\n#AddLabel(showMovingAvgLable, astext(Avg3), if Avg3&lt; close then Color.GREEN else if Avg3&gt; close then color.light_red else Color.Light_GRAY);\n#AddLabel(showMovingAvgLable,  length4+ \&quot;MAvg \&quot; +astext(Avg4),Avg4.TakeValueColor ());\n#AddLabel(showMovingAvgLable, astext(Avg4), if Avg4&lt; close then Color.GREEN else if Avg4&gt; close then color.light_red else Color.Light_GRAY);\ndef bub;\nif !IsNaN(close[-1])\nthen {\n\n    bub = no;#Double.NaN;\n    \n} else {\nbub = yes;\n    \n}\ndef bubb = if  BarNumber() == 20  then yes else no;\n\ninput Show_Mavg_Key=no;\n\n#AddChartBubble(bub, Avg1, \&quot;MAvg\&quot;+ length1+ \&quot;= \&quot; + astext(Avg1), Color.LIGHT_ORANGE, no);\nAddChartBubble(bub and Show_Mavg_Key, Avg1, \&quot;MAvg\&quot;+ length1+ \&quot;= \&quot; + astext(Avg1), Avg1.TakeValueColor (), yes);\nAddChartBubble(bub and Show_Mavg_Key, Avg2, \&quot;MAvg\&quot;+ length2+ \&quot;= \&quot; + astext(Avg2), Avg2.TakeValueColor (), yes);\nAddChartBubble(bub and Show_Mavg_Key, Avg3, \&quot;MAvg\&quot;+ length3+ \&quot;= \&quot; + astext(Avg3), Avg3.TakeValueColor (), yes);\nAddChartBubble(bub and Show_Mavg_Key, Avg4, \&quot;MAvg\&quot;+ length4+ \&quot;= \&quot; + astext(Avg4), Avg4.TakeValueColor (), yes);\n\n#Vwap\ninput vwapTimeFrame = {default DAY, WEEK, MONTH};\ninput numDevDn = -2.0;\ninput numDevUp = 2.0;\n\n\ndef cap = getAggregationPeriod();\ndef errorInAggregation =\n    vwapTimeFrame == vwapTimeFrame.DAY and cap &gt;= AggregationPeriod.WEEK or\n    vwapTimeFrame == vwapTimeFrame.WEEK and cap &gt;= AggregationPeriod.MONTH;\nassert(!errorInAggregation, \&quot;timeFrame should be not less than current chart aggregation period\&quot;);\n\ndef yyyyMmDd = getYyyyMmDd();\ndef periodIndx;\nswitch (vwapTimeFrame) {\ncase DAY:\n    periodIndx = yyyyMmDd;\ncase WEEK:\n    periodIndx = Floor((daysFromDate(first(yyyyMmDd)) + getDayOfWeek(first(yyyyMmDd))) / 7);\ncase MONTH:\n    periodIndx = roundDown(yyyyMmDd / 100, 0);\n}\ndef isPeriodRolled = compoundValue(1, periodIndx != periodIndx[1], yes);\n\ndef volumeSum;\ndef volumeVwapSum;\ndef volumeVwap2Sum;\n\nif (isPeriodRolled) {\n    volumeSum = volume;\n    volumeVwapSum = volume * vwap;\n    volumeVwap2Sum = volume * Sqr(vwap);\n} else {\n    volumeSum = compoundValue(1, volumeSum[1] + volume, volume);\n    volumeVwapSum = compoundValue(1, volumeVwapSum[1] + volume * vwap, volume * vwap);\n    volumeVwap2Sum = compoundValue(1, volumeVwap2Sum[1] + volume * Sqr(vwap), volume * Sqr(vwap));\n}\ndef VWprice = volumeVwapSum / volumeSum;\ndef deviation = Sqrt(Max(volumeVwap2Sum / volumeSum - Sqr(VWprice), 0));\n\nplot VWAP = VWprice;\nplot UpperBand = VWprice + numDevUp * deviation;\nplot LowerBand = VWprice + numDevDn * deviation;\n\nVWAP.setDefaultColor(getColor(0));\nUpperBand.setDefaultColor(getColor(0));\nLowerBand.setDefaultColor(getColor(0));\n\nUpperBand.SetStyle(Curve.MEDIUM_DASH);\nLowerBand.SetStyle(Curve.MEDIUM_DASH);\n\n\n\nUpperBand.hide();\nLowerBand.hide();\n\n#vwap\n\nAddLabel(yes, \&quot;VWAP= \&quot; + astext(VWAP), if VWAP&lt; close then Color.LIGHT_GREEN else if VWAP&gt; close then color.LIGHT_red else Color.GRAY);\n#AddLabel(yes, \&quot;VWAP= \&quot; + astext(VWAP), Color.White);\ndef vwDif= close- VWAP;\nAddLabel(yes, \&quot; \&quot;+astext(vwDif), if vwDif&gt; 0 then Color.LIGHT_GREEN else if vwDif&lt; 0 then color.LIGHT_red else Color.GRAY);\n\n#RSI\ninput overBoughtRsi = 70;\ninput overSoldRsi = 30;\ninput rsiLength = 14;\ninput rsiPrice = close;\ndef rsi_val = reference RSI(length = rsiLength, price = rsiPrice );\n####\n\n\n\nAddLabel(yes, \&quot;RSI = \&quot; + astext(rsi_val) , if rsi_val &gt; overBoughtRsi  then Color.RED else if rsi_val &lt; overSoldRsi then  Color.GREEN else Color.light_GRAY);\n\n\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\nAvg1.SetDefaultColor(color.white);\nAvg2.SetDefaultColor(color.cyan);\nAvg3.SetDefaultColor(color.light_red);\nAvg4.SetDefaultColor(color.pink);\n#avg3.SetStyle(Curve.MEDIUM_DASH);\n#avg4.SetStyle(Curve.MEDIUM_DASH);\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);\n&quot;,name=&quot;_686a0d47_2dc7_4466_91d6_64cf4907bd2a&quot;}))},!get(#%2.SubgraphId(&quot;Volume&quot;)){height=80,storableIndicators.+(!%3.CompiledStudy.resolveStudy(#%4.ScriptEssence{body=&quot;# Modified by Mahi\n# Second Mod by Ramon DV\n\ndeclare on_volume;\n#v2\n#Inputs\n\ninput ShowDayAvg = yes;\ninput AvgDayVolLength = 30;\ninput ShowTodayVolume = yes;\ninput ShowTodayVolumeProjection = yes;\ninput ShowPercentOfDayAvg = yes;\ninput UnusualVolumePercent = 200;\ninput ShowBarAvg = yes;\ninput AvgBarVolLength = 30;\ninput ShowCurrentBar = yes;\ninput ShowPercentOfBarAvg = yes;\ninput ShowSellVolumePercent = yes;\ninput ShowBuyVolumePercent = yes;\ninput AvgType = AverageType.SIMPLE;\n\ndef O = open;\ndef H = high;\ndef C = close;\ndef L = low;\ndef V = volume;\n\n#def buying =  V * (C - L) / (H - L);\n#def selling = V * (H - C) / (H - L);\n\ndef buying =   V * (H - O) / (H - L) ;\ndef selling =  V * (O - L) / (H - L) ;\n\ndef O_day = open(period = AggregationPeriod.DAY);\ndef H_day = high(period = AggregationPeriod.DAY);\ndef C_day = close(period = AggregationPeriod.DAY);\ndef L_day = low(period = AggregationPeriod.DAY);\ndef V_day = volume(period = AggregationPeriod.DAY);\n#def selling_day = V_day * (H_day - C_day) / (H_day - L_day);\n#def buying_day = V_day * (C_day - L_day) / (H_day - L_day);\ndef selling_day = V_day * (H_day - O_day) / (H_day - L_day);\ndef buying_day = V_day * (O_day - L_day) / (H_day - L_day);\n# Selling Volume pressure\n\nplot SellVol = selling;\nSellVol.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);\nSellVol.SetDefaultColor(Color.RED);\nSellVol.HideTitle();\nSellVol.HideBubble();\nSellVol.SetLineWeight(5);\n\n# Total Volume\n# Buying Volume pressure\n\nplot BuyVol = buying + selling; # plot in the background of selling volume\nBuyVol.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);\nBuyVol.SetDefaultColor(Color.DARK_GREEN);\nBuyVol.HideTitle();\nBuyVol.HideBubble();\nBuyVol.SetLineWeight(5);\n\n#Volume Data\n\ndef DayVol = volume(period = “DAY”);\ndef AvgDayVol = MovingAverage(AvgType, DayVol[1], AvgDayVolLength);\ndef percentOfDay = Round((DayVol / AvgDayVol) * 100, 0);\n\n\ndef AvgBarVol = MovingAverage(AvgType, volume[1], AvgBarVolLength);\ndef percentOfBar = Round((volume / AvgBarVol) * 100, 0);\ndef SellVolPercent = Round((selling / volume) * 100, 0);\ndef BuyVolPercent = 100 - SellVolPercent;\n\ndef SellVolPercent_day = Round((selling_day / V_day) * 100, 0);\ndef BuyVolPercent_day = 100 - SellVolPercent_day;\n\n# Labels\n\nAddLabel(ShowDayAvg, \&quot;Avg “ + AvgDayVolLength + “ Days: \&quot; + Round(AvgDayVol, 0), Color.LIGHT_GRAY);\n\nAddLabel(ShowTodayVolume, \&quot;Today: \&quot; + DayVol, (if percentOfDay &gt;= UnusualVolumePercent then Color.GREEN else if percentOfDay &gt;= 100 then Color.ORANGE else Color.LIGHT_GRAY));\n\nAddLabel(ShowPercentOfDayAvg, percentOfDay + \&quot;%\&quot;, (if percentOfDay &gt;= UnusualVolumePercent then Color.GREEN else if percentOfDay &gt;= 100 then Color.ORANGE else Color.WHITE) );\n\nAddLabel(ShowBarAvg, \&quot;Avg “ + AvgBarVolLength + ” Bars: \&quot; + Round(AvgBarVol, 0), Color.LIGHT_GRAY);\n\nAddLabel(ShowCurrentBar, \&quot;Cur Bar: \&quot; + volume, (if percentOfBar &gt;= UnusualVolumePercent then Color.GREEN else if percentOfBar &gt;= 100 then Color.ORANGE else Color.LIGHT_GRAY));\n\nAddLabel(ShowPercentOfBarAvg, percentOfBar + \&quot;%\&quot;, (if percentOfBar &gt;= UnusualVolumePercent then Color.GREEN else if percentOfBar &gt;= 100 then Color.ORANGE else Color.WHITE) );\n\n\nAddLabel(ShowSellVolumePercent and (SellVolPercent &gt; BuyVolPercent) , \&quot;Cur Bar Sell %: \&quot; + SellVolPercent, if SellVolPercent &gt; BuyVolPercent then Color.RED else Color.GRAY);\nAddLabel(ShowBuyVolumePercent and (SellVolPercent &lt;= BuyVolPercent), \&quot;Cur Bar Buy %: \&quot; + BuyVolPercent, if BuyVolPercent &gt; SellVolPercent then Color.GREEN else Color.GRAY);\n\n\n# PriceOpen.Hide();\ninput length = 50;\n\nplot Vol = volume;\nplot VolAvg = Average(volume, length);\n\nVol.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);\nVol.SetLineWeight(3);\nVol.DefineColor(\&quot;Up\&quot;, Color.UPTICK);\nVol.DefineColor(\&quot;Down\&quot;, Color.DOWNTICK);\nVol.AssignValueColor(if close &gt; close[1] then Vol.Color(\&quot;Up\&quot;) else if close &lt; close[1] then Vol.Color(\&quot;Down\&quot;) else GetColor(1));\nVolAvg.SetDefaultColor(GetColor(8));\n\n\n#########################################################\n\n#def rth = (RegularTradingEnd(GetYYYYMMDD()) - RegularTradingStart(GetYYYYMMDD())) / AggregationPeriod.HOUR;\ndef rth = (RegularTradingEnd(GetYYYYMMDD()) - RegularTradingStart(GetYYYYMMDD())) / AggregationPeriod.MIN;\ndef MarketNotClosed = GetTime() &lt;= RegularTradingEnd (GetYYYYMMDD());\n# def eod = ((  RegularTradingEnd (GetYYYYMMDD()) - GetTime() ) / AggregationPeriod.MIN);\ndef eod = if MarketNotClosed then ((  RegularTradingEnd (GetYYYYMMDD()) - GetTime() ) / AggregationPeriod.MIN) else ((  RegularTradingEnd (GetYYYYMMDD())  ) / AggregationPeriod.MIN);\n\ndef DayVol_Projetion = volume(period = “DAY”) * rth / (rth - eod);\ndef percentOfDayProjection = Round((DayVol_Projetion / AvgDayVol) * 100, 0);\nAddLabel(ShowBuyVolumePercent, \&quot;Day Buy %: \&quot; + BuyVolPercent_day, if BuyVolPercent_day &gt; SellVolPercent_day then Color.GREEN else Color.GRAY);\n\nAddLabel(ShowTodayVolumeProjection, \&quot;Est. Vol: \&quot; + Round(DayVol_Projetion, 0) , if DayVol_Projetion &gt; AvgDayVol * 1.5  then Color.GREEN else Color.GRAY);\n\nAddLabel(ShowTodayVolumeProjection,  percentOfDayProjection  + \&quot;%\&quot;, if DayVol_Projetion &gt; AvgDayVol * 1.5  then Color.GREEN else Color.GRAY);\n\ndef y = GetTime() / AggregationPeriod.MIN;\n#eod =2;\n#AddLabel(yes, \&quot;RTH duration (min): \&quot; + rth);\n#AddLabel(yes, \&quot;EOD duration (min): \&quot; + eod);\n#AddLabel(yes, \&quot;Market Not closed: \&quot; + y);\n\n#######&quot;,name=&quot;_5261aedd_9830_4f97_bb0c_d3f9282e8428&quot;}))},^(#%2.SubgraphId(&quot;Subgraph1&quot;),#%2.SubgraphStorableModel{height=188,storableIndicators.+(!%3.CompiledStudy.resolveStudy(#%4.ScriptEssence{body=&quot;declare lower;\ninput aggregationPeriod1 = AggregationPeriod.THIRTY_MIN;\n\ninput useOpen =yes;\ndef price = if (useOpen) then   open(period = aggregationPeriod1) else close(period = aggregationPeriod1) ;\n\ninput over_bought = 40.0;\ninput over_sold = -40.0;\ninput percentDLength = 3;\ninput percentKLength = 5;\n\ndef min_low = Lowest(low (period = aggregationPeriod1), percentKLength);\ndef max_high = Highest(high (period = aggregationPeriod1), percentKLength);\ndef rel_diff = price - (max_high + min_low) / 2;\ndef diff = max_high - min_low;\n\ndef avgrel = ExpAverage(ExpAverage(rel_diff, percentDLength), percentDLength);\ndef avgdiff = ExpAverage(ExpAverage(diff, percentDLength), percentDLength);\n\nplot SMI = if avgdiff != 0 then avgrel / (avgdiff / 2) * 100 else 0;\nSMI.SetDefaultColor(GetColor(1));\n\nplot AvgSMI = ExpAverage(SMI, percentDLength);\nAvgSMI.SetDefaultColor(GetColor(5));\n\nplot overbought = over_bought;\noverbought.SetDefaultColor(GetColor(5));\n\nplot oversold = over_sold;\noversold.SetDefaultColor(GetColor(5));\n\n\n\n#RSI\ninput overBoughtRsi = 70;\ninput overSoldRsi = 30;\ninput rsiLength = 14;\ninput  rsiPrice = close;\nplot rsi_val = reference RSI(length = rsiLength, price = rsiPrice );\n####\n\n\n\nAddLabel(yes, \&quot;RSI = \&quot; + rsi_val , if rsi_val &gt; overBoughtRsi  then Color.RED else if rsi_val &lt; overSoldRsi then  Color.GREEN else Color.GRAY);\n\n\n\n#trend reversal\ndef y = rsi_val ;\ninput riReversLength = 2;\ninput lookBack = 2;\n\n\ndef rsi_expAvg = ExpAverage(rsi_val, riReversLength);\n\n#trend reversal\ndef overBoughtReversal = if ((rsi_expAvg &gt; overBoughtRsi)within 2 bar) and  (rsi_expAvg crosses above rsi_val) then price else 0;# if (rsi_expAvg &gt; OverBought and  rsi_expAvg crosses above rsi_val  within 3 bar ) then 40 else 0;\ndef oversoldRevesal = if ((rsi_expAvg &lt; overSoldRsi)within 2 bar) and  (rsi_expAvg crosses below rsi_val within 2 bar) then price else 0;\n\n##############\n########!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n#vwap vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\n#input numDevUp = 2.0;\ninput vwapTimeFrame = {default DAY, WEEK, MONTH};\n\ndef cap = GetAggregationPeriod();\ndef errorInAggregation =\n    vwapTimeFrame == vwapTimeFrame.DAY and cap &gt;= AggregationPeriod.WEEK or\n    vwapTimeFrame == vwapTimeFrame.WEEK and cap &gt;= AggregationPeriod.MONTH;\nAssert(!errorInAggregation, \&quot;timeFrame should be not less than current chart aggregation period\&quot;);\n\ndef yyyyMmDd = GetYYYYMMDD();\ndef periodIndx;\nswitch (vwapTimeFrame) {\ncase DAY:\n    periodIndx = yyyyMmDd;\ncase WEEK:\n    periodIndx = Floor((DaysFromDate(First(yyyyMmDd)) + GetDayOfWeek(First(yyyyMmDd))) / 7);\ncase MONTH:\n    periodIndx = RoundDown(yyyyMmDd / 100, 0);\n}\ndef isPeriodRolled = CompoundValue(1, periodIndx != periodIndx[1], yes);\n\ndef volumeSum;\ndef volumeVwapSum;\ndef volumeVwap2Sum;\n\nif (isPeriodRolled) {\n    volumeSum = volume;\n    volumeVwapSum = volume * vwap;\n    volumeVwap2Sum = volume * Sqr(vwap);\n} else {\n    volumeSum = CompoundValue(1, volumeSum[1] + volume, volume);\n    volumeVwapSum = CompoundValue(1, volumeVwapSum[1] + volume * vwap, volume * vwap);\n    volumeVwap2Sum = CompoundValue(1, volumeVwap2Sum[1] + volume * Sqr(vwap), volume * Sqr(vwap));\n}\ndef vWapprice = volumeVwapSum / volumeSum;\ndef deviation = Sqrt(Max(volumeVwap2Sum / volumeSum - Sqr(vWapprice), 0));\n\ndef VWAP = vWapprice;\ninput numDevUp = 2.0;\ninput numDevDn = -2.0;\n\ndef vwap_UpperBand = price + numDevUp * deviation;\ndef vwap_LowerBand = price + numDevDn * deviation;\n\ninput vwapCondition = no;\n#input vp=close;\ndef conVwapBuy = if  vwapCondition then  close &gt;= VWAP else 1;\n\n#####^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n#MACD\n\ninput fastLength = 12;\ninput slowLength = 26;\ninput MACDLength = 9;\ninput displace = 0;\ndef fastAvg = Sum(volume * price, fastLength) / Sum(volume, fastLength);\ndef slowAvg = Sum(volume * price, slowLength) / Sum(volume, slowLength);\ndef Value = fastAvg - slowAvg;\ndef Avg = ExpAverage(Value, MACDLength);\ndef MACD_Diff  = Value - Avg;\n#def ZeroLine = 0;\n\ninput def_cond = no;\ndef MACD_cond_logic = if (def_cond) then MACD_Diff &lt;= 0 else yes;\n\n\n#MACD Pivot reversal\n#input FilterLength=3;\n######################\n#def MACDV_Diff_expAvg = ExpAverage(MACD_Diff, FilterLength);\n#plot oversoldRevesalMACDV =if ((Diff_MACDV &lt; MacdZeroLine)within lookBack bar) and  ( Diff_MACDV crosses above   MACDV_Diff_expAvg within lookBack bar)and Diff_MACDV &gt; Diff_MACDV[1] then 1 else 0;# if (MACDV_Diff_expAvg &gt; OverBought and  MACDV_Diff_expAvg crosses above rsi_val  within 3 bar ) then 40 else 0;\n#plot overBoughtReversalMACDV = if ((Diff_MACDV &gt; MacdZeroLine)within lookBack bar) and  (MACDV_Diff_expAvg crosses above  Diff_MACDV  within lookBack bar)  and Diff_MACDV &lt; Diff_MACDV[1] and Diff_MACDV&gt;0 then 1 else 0;\n\n\n#trend Pivot reversal\ndef twoBarPivotMACD_Buy =  MACD_Diff &gt; MACD_Diff[1] and MACD_Diff[1] &gt; MACD_Diff[2] and MACD_Diff[2] &lt; MACD_Diff[3] and MACD_Diff[3] &lt; MACD_Diff [4];\ndef twoBarPivotMACD_Sell = MACD_Diff &lt; MACD_Diff[1] and MACD_Diff[1] &lt; MACD_Diff[2] and MACD_Diff[2] &gt; MACD_Diff[3] and MACD_Diff[3] &gt; MACD_Diff [4];\n###################\n\n\ndef uptrend = if price &gt; price[1] and price[1] &gt;= price[2] then 1 else 0;\n\n#####################################-----------------\n\ninput aggPeriod = AggregationPeriod.DAY;\ninput AvgType = AverageType.SIMPLE;\ninput short_len = 10;\ninput mid_len = 21;\ninput long_len = 50;\ninput moving_average = no;\ndef AVG1 = MovingAverage(AvgType, close(period = aggPeriod), short_len);\ndef AVG2 = MovingAverage(AvgType, close(period = aggPeriod), mid_len);\ndef AVG3 = MovingAverage(AvgType, close(period = aggPeriod), long_len);\n#def EMA_condition = if moving_average then (close &gt; AVG1 or close &gt; AVG2 or  close &gt; AVG3) else yes;\ndef EMA_condition = if moving_average then (close &gt; AVG1 ) else yes;\n\nAddLabel( yes, Concat(short_len + \&quot;MA = \&quot;, AVG1), Color.CYAN);\nAddLabel( yes, Concat(mid_len + \&quot;MA = \&quot;, AVG2), Color.LIGHT_ORANGE);\nAddLabel( yes, Concat(long_len + \&quot;MA = \&quot;, AVG3), Color.PINK);\n\n\n\n##############################################\n#@@@@\n#ADX\ninput adxLength = 14;\ninput adxAverageType = AverageType.WILDERS;\n\ndef ADX = DMI(adxLength, adxAverageType).ADX;\n#ADX.setDefaultColor(GetColor(5));\n\ninput length = 7;\ninput signalLength = 10;\ninput averageType = AverageType.WEIGHTED;\ninput averageTypeSignal = AverageType.EXPONENTIAL;\n\n\n\ndef Ref = ADX;# reference OnBalanceVolume();\nplot RefMoving = MovingAverage(averageType, Ref, length);\nplot Signal = MovingAverage(averageTypeSignal, RefMoving, signalLength);\nplot dif =  Ref - RefMoving;\n#Ref.SetDefaultColor(GetColor(4));\nRefMoving.SetDefaultColor(GetColor(8));\nSignal.SetDefaultColor(GetColor(2));\ndif.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);\ndif.SetLineWeight(3);\n\n\ndif.DefineColor(\&quot;Positive and Up\&quot;, Color.CYAN);\ndif.DefineColor(\&quot;Positive and Down\&quot;, Color.BLUE);\ndif.DefineColor(\&quot;Negative and Down\&quot;, Color.RED);\ndif.DefineColor(\&quot;Negative and Up\&quot;, Color.YELLOW);\ndif.AssignValueColor(if dif &gt;= 0 then if dif &gt; dif[1] then dif.Color(\&quot;Positive and Up\&quot;) else dif.Color(\&quot;Positive and Down\&quot;) else if dif &lt; dif[1] then dif.Color(\&quot;Negative and Down\&quot;) else dif.Color(\&quot;Negative and Up\&quot;));\n\n\n#@@@@@\n###################################\ndef SMI_ADX_Buy_Signal;\nif GetAggregationPeriod() &lt; AggregationPeriod.FIFTEEN_MIN\nthen\n{\n    SMI_ADX_Buy_Signal = if ( (SMI crosses above AvgSMI  within lookBack bar) and (Ref crosses above RefMoving within lookBack bar) and dif &gt;= 0 and (rsi_val &gt; overSoldRsi and rsi_val &lt; 60 ) and MACD_cond_logic and  EMA_condition) and Ref &gt; Ref[2] then 1 else 0;\n\n}\nelse {\n    SMI_ADX_Buy_Signal = 0;\n}\nplot buy6 = SMI_ADX_Buy_Signal;\n\n\ndef SMI_Buy_Signal = if ( (SMI crosses above overbought  within lookBack bar) and SMI &gt;  AvgSMI and (rsi_val &gt; overSoldRsi and rsi_val &lt; overBoughtRsi + 10 ) and MACD_cond_logic and  EMA_condition) and  (uptrend) then 1 else 0;\nplot buy2 = SMI_Buy_Signal;\n\n#def  buySvix_Signal = if ( MACD_cond_logic  and  EMA_condition and  oversoldRevesal  and buySvix &lt; Zeroline - 10 ) then 1 else 0;\n#plot buy3 = buySvix_Signal;\n\n\n\n\n\n\ndef SMI_Sell_Signal = if ( (SMI crosses below AvgSMI within lookBack bar) and (overBoughtReversal)) then 1 else 0;\n#def sellSignal2 = if ((rsi_val  &gt; overBoughtRsi within 3 bar) and (smi crosses below AvgSMI within 3 bar)) then 1 else 0;\n\n\nplot sell2 = SMI_Sell_Signal;\n\n#######\n\n#def FVE_buySignal = conVwapBuy and oversoldRevesal and pFVE_Bull  and MACD_cond_logic ;# and Diff &gt;= 0;\n#def sig_buy = pFVE_Bull and Diff &gt;= 0;\n#plot buy4 = FVE_buySignal ;\n\n\n#def FVE_sellSignal = overBoughtReversal and pFVE_Bear ;\n#plot sell4 = FVE_sellSignal;\nplot buy5 = twoBarPivotMACD_Buy and oversoldRevesal;\nplot sell5 = twoBarPivotMACD_Sell and overBoughtReversal;\n\n####\n#def buySignal2 = if (oversoldRevesal  and buythedip2 &lt; Zeroline ) then 1 else 0;\n\n#def buySignal3 = if ( oversoldRevesal  and buythedip3 &lt; Zeroline - 10 ) then 1 else 0;\n#plot buy3 = buySignal3;\n\nAddChartBubble(buy2 == 1, buy2, \&quot;B2SMI= \&quot; +  low[1] + \&quot; rsi \&quot; + rsi_val + \&quot; w \&quot; + VWAP[1], Color.LIGHT_ORANGE, no);\n#AddChartBubble(buy3 == 1, buy3,  \&quot;B3Svix= \&quot; + price + \&quot; rsi \&quot; + rsi_val, Color.LIGHT_GRAY, no);\n#AddChartBubble(buy4 == 1, buy4,  \&quot;B4FVE= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.YELLOW, no);\nAddChartBubble(buy5 == 1, buy5,  \&quot;B5Macd= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.CYAN, no);\nAddChartBubble(buy6 == 1, buy6,  \&quot;B5AdxSMI= \&quot; + price + \&quot; \\nrsi \&quot; + rsi_val[lookBack] + \&quot; \\nAdx \&quot; + Ref[lookBack], Color.GREEN, no);\n\n#AddChartBubble(sell1 == 1, sell1, \&quot;S1STR= \&quot; + price + \&quot; rsi \&quot; + rsi_val, Color.LIGHT_RED, no);#Buy the Dip\n\nAddChartBubble(sell2 == 1, sell2, \&quot;S2SMI= \&quot; + price + \&quot; rsi \&quot; + rsi_val, Color.PINK, no);#Buy the Dip\n#AddChartBubble(sell4 == 1, sell4, \&quot;S4FVE= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.VIOLET, no);#Buy the Dip\nAddChartBubble(sell5 == 1, sell5, \&quot;S5Macd= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.BLUE, no);#Buy the Dip\n#AddChartBubble(oversoldRevesal , close, rsi_val, Color.blue, no);#Buy the Dip\nplot scan = buy2;&quot;,name=&quot;_895e3e9a_2bdf_4c37_bc8e_713002a58848&quot;}){inputsMap:TreeMap0{^(&quot;aggregationPeriod1&quot;,&quot;WEEK&quot;),^(&quot;rsiPrice&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap0,plots{4:{hiding=&lt;T},5:{hiding=&lt;T},6:{hiding=&lt;T},7:{hiding=&lt;T}}})}),^(#%2.SubgraphId(&quot;Subgraph7&quot;),#%2.SubgraphStorableModel{height=188,storableIndicators.+(!%3.CompiledStudy.resolveStudy(#%4.ScriptEssence{body=&quot;declare lower;\n\ninput price = close;\n\ninput over_bought = 40.0;\ninput over_sold = -40.0;\ninput percentDLength = 3;\ninput percentKLength = 5;\n\ndef min_low = Lowest(low, percentKLength);\ndef max_high = Highest(high, percentKLength);\ndef rel_diff = price - (max_high + min_low) / 2;\ndef diff = max_high - min_low;\n\ndef avgrel = ExpAverage(ExpAverage(rel_diff, percentDLength), percentDLength);\ndef avgdiff = ExpAverage(ExpAverage(diff, percentDLength), percentDLength);\n\nplot SMI = if avgdiff != 0 then avgrel / (avgdiff / 2) * 100 else 0;\nSMI.SetDefaultColor(GetColor(1));\n\nplot AvgSMI = ExpAverage(SMI, percentDLength);\nAvgSMI.SetDefaultColor(GetColor(5));\n\nplot overbought = over_bought;\noverbought.SetDefaultColor(GetColor(5));\n\nplot oversold = over_sold;\noversold.SetDefaultColor(GetColor(5));\n\n\n\n#RSI\ninput overBoughtRsi = 70;\ninput overSoldRsi = 30;\ninput rsiLength = 14;\ninput rsiPrice = close;\ndef rsi_val = reference RSI(length = rsiLength, price = rsiPrice );\n####\n\n\n\nAddLabel(yes, \&quot;RSI = \&quot; + rsi_val , if rsi_val &gt; overBoughtRsi  then Color.RED else if rsi_val &lt; overSoldRsi then  Color.GREEN else Color.GRAY);\n\n\n\n#trend reversal\ndef y = rsi_val ;\ninput riReversLength = 2;\ninput lookBack = 2;\n\n\ndef rsi_expAvg = ExpAverage(rsi_val, riReversLength);\n\n#trend reversal\ndef overBoughtReversal = if ((rsi_expAvg &gt; overBoughtRsi)within 2 bar) and  (rsi_expAvg crosses above rsi_val) then price else 0;# if (rsi_expAvg &gt; OverBought and  rsi_expAvg crosses above rsi_val  within 3 bar ) then 40 else 0;\ndef oversoldRevesal = if ((rsi_expAvg &lt; overSoldRsi)within 2 bar) and  (rsi_expAvg crosses below rsi_val within 2 bar) then price else 0;\n\n##############\n########!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n#vwap vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\n#input numDevUp = 2.0;\ninput vwapTimeFrame = {default DAY, WEEK, MONTH};\n\ndef cap = GetAggregationPeriod();\ndef errorInAggregation =\n    vwapTimeFrame == vwapTimeFrame.DAY and cap &gt;= AggregationPeriod.WEEK or\n    vwapTimeFrame == vwapTimeFrame.WEEK and cap &gt;= AggregationPeriod.MONTH;\nAssert(!errorInAggregation, \&quot;timeFrame should be not less than current chart aggregation period\&quot;);\n\ndef yyyyMmDd = GetYYYYMMDD();\ndef periodIndx;\nswitch (vwapTimeFrame) {\ncase DAY:\n    periodIndx = yyyyMmDd;\ncase WEEK:\n    periodIndx = Floor((DaysFromDate(First(yyyyMmDd)) + GetDayOfWeek(First(yyyyMmDd))) / 7);\ncase MONTH:\n    periodIndx = RoundDown(yyyyMmDd / 100, 0);\n}\ndef isPeriodRolled = CompoundValue(1, periodIndx != periodIndx[1], yes);\n\ndef volumeSum;\ndef volumeVwapSum;\ndef volumeVwap2Sum;\n\nif (isPeriodRolled) {\n    volumeSum = volume;\n    volumeVwapSum = volume * vwap;\n    volumeVwap2Sum = volume * Sqr(vwap);\n} else {\n    volumeSum = CompoundValue(1, volumeSum[1] + volume, volume);\n    volumeVwapSum = CompoundValue(1, volumeVwapSum[1] + volume * vwap, volume * vwap);\n    volumeVwap2Sum = CompoundValue(1, volumeVwap2Sum[1] + volume * Sqr(vwap), volume * Sqr(vwap));\n}\ndef vWapprice = volumeVwapSum / volumeSum;\ndef deviation = Sqrt(Max(volumeVwap2Sum / volumeSum - Sqr(vWapprice), 0));\n\ndef VWAP = vWapprice;\ninput numDevUp = 2.0;\ninput numDevDn = -2.0;\n\ndef vwap_UpperBand = price + numDevUp * deviation;\ndef vwap_LowerBand = price + numDevDn * deviation;\n\ninput vwapCondition = no;\n#input vp=close;\ndef conVwapBuy = if  vwapCondition then  close &gt;= VWAP else 1;\n\n#####^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n#MACD\n\ninput fastLength = 12;\ninput slowLength = 26;\ninput MACDLength = 9;\ninput displace = 0;\ndef fastAvg = Sum(volume * price, fastLength) / Sum(volume, fastLength);\ndef slowAvg = Sum(volume * price, slowLength) / Sum(volume, slowLength);\ndef Value = fastAvg - slowAvg;\ndef Avg = ExpAverage(Value, MACDLength);\ndef MACD_Diff  = Value - Avg;\n#def ZeroLine = 0;\n\ninput def_cond = no;\ndef MACD_cond_logic = if (def_cond) then MACD_Diff &lt;= 0 else yes;\n\n\n#MACD Pivot reversal\n#input FilterLength=3;\n######################\n#def MACDV_Diff_expAvg = ExpAverage(MACD_Diff, FilterLength);\n#plot oversoldRevesalMACDV =if ((Diff_MACDV &lt; MacdZeroLine)within lookBack bar) and  ( Diff_MACDV crosses above   MACDV_Diff_expAvg within lookBack bar)and Diff_MACDV &gt; Diff_MACDV[1] then 1 else 0;# if (MACDV_Diff_expAvg &gt; OverBought and  MACDV_Diff_expAvg crosses above rsi_val  within 3 bar ) then 40 else 0;\n#plot overBoughtReversalMACDV = if ((Diff_MACDV &gt; MacdZeroLine)within lookBack bar) and  (MACDV_Diff_expAvg crosses above  Diff_MACDV  within lookBack bar)  and Diff_MACDV &lt; Diff_MACDV[1] and Diff_MACDV&gt;0 then 1 else 0;\n\n\n#trend Pivot reversal\ndef twoBarPivotMACD_Buy =  MACD_Diff &gt; MACD_Diff[1] and MACD_Diff[1] &gt; MACD_Diff[2] and MACD_Diff[2] &lt; MACD_Diff[3] and MACD_Diff[3] &lt; MACD_Diff [4];\ndef twoBarPivotMACD_Sell = MACD_Diff &lt; MACD_Diff[1] and MACD_Diff[1] &lt; MACD_Diff[2] and MACD_Diff[2] &gt; MACD_Diff[3] and MACD_Diff[3] &gt; MACD_Diff [4];\n###################\n\n\ndef uptrend = if price &gt; price[1] and price[1] &gt;= price[2] then 1 else 0;\n\n#####################################-----------------\n\ninput aggPeriod = AggregationPeriod.DAY;\ninput AvgType = AverageType.SIMPLE;\ninput short_len = 10;\ninput mid_len = 21;\ninput long_len = 50;\ninput moving_average = no;\ndef AVG1 = MovingAverage(AvgType, close(period = aggPeriod), short_len);\ndef AVG2 = MovingAverage(AvgType, close(period = aggPeriod), mid_len);\ndef AVG3 = MovingAverage(AvgType, close(period = aggPeriod), long_len);\n#def EMA_condition = if moving_average then (close &gt; AVG1 or close &gt; AVG2 or  close &gt; AVG3) else yes;\ndef EMA_condition = if moving_average then (close &gt; AVG1 ) else yes;\n\nAddLabel( yes, Concat(short_len + \&quot;MA = \&quot;, AVG1), Color.CYAN);\nAddLabel( yes, Concat(mid_len + \&quot;MA = \&quot;, AVG2), Color.LIGHT_ORANGE);\nAddLabel( yes, Concat(long_len + \&quot;MA = \&quot;, AVG3), Color.PINK);\n\n\n\n##############################################\n#@@@@\n#ADX\ninput adxLength = 14;\ninput adxAverageType = AverageType.WILDERS;\n\ndef ADX = DMI(adxLength, adxAverageType).ADX;\n#ADX.setDefaultColor(GetColor(5));\n\ninput length = 7;\ninput signalLength = 10;\ninput averageType = AverageType.WEIGHTED;\ninput averageTypeSignal = AverageType.EXPONENTIAL;\n\n\n\ndef Ref = ADX;# reference OnBalanceVolume();\nplot RefMoving = MovingAverage(averageType, Ref, length);\nplot Signal = MovingAverage(averageTypeSignal, RefMoving, signalLength);\nplot dif =  Ref - RefMoving;\n#Ref.SetDefaultColor(GetColor(4));\nRefMoving.SetDefaultColor(GetColor(8));\nSignal.SetDefaultColor(GetColor(2));\ndif.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);\ndif.SetLineWeight(3);\n\n\ndif.DefineColor(\&quot;Positive and Up\&quot;, Color.CYAN);\ndif.DefineColor(\&quot;Positive and Down\&quot;, Color.BLUE);\ndif.DefineColor(\&quot;Negative and Down\&quot;, Color.RED);\ndif.DefineColor(\&quot;Negative and Up\&quot;, Color.YELLOW);\ndif.AssignValueColor(if dif &gt;= 0 then if dif &gt; dif[1] then dif.Color(\&quot;Positive and Up\&quot;) else dif.Color(\&quot;Positive and Down\&quot;) else if dif &lt; dif[1] then dif.Color(\&quot;Negative and Down\&quot;) else dif.Color(\&quot;Negative and Up\&quot;));\n\n\n#@@@@@\n###################################\ndef SMI_ADX_Buy_Signal;\nif GetAggregationPeriod() &lt; AggregationPeriod.FIFTEEN_MIN\nthen\n{\n    SMI_ADX_Buy_Signal = if ( (SMI crosses above AvgSMI  within lookBack bar) and (Ref crosses above RefMoving within lookBack bar) and dif &gt;= 0 and (rsi_val &gt; overSoldRsi and rsi_val &lt; 60 ) and MACD_cond_logic and  EMA_condition) and Ref &gt; Ref[2] then 1 else 0;\n\n}\nelse {\n    SMI_ADX_Buy_Signal = 0;\n}\nplot buy6 = SMI_ADX_Buy_Signal;\n\n\ndef SMI_Buy_Signal = if ( (AvgSMI crosses above overbought  within lookBack bar) and SMI &gt;  AvgSMI and (rsi_val &gt; overSoldRsi and rsi_val &lt; overBoughtRsi + 10 ) and MACD_cond_logic and  EMA_condition) and (close[1] &gt;= VWAP[1] and close &gt;= vwap_UpperBand[1]) and (uptrend) then 1 else 0;\nplot buy2 = SMI_Buy_Signal;\n\n#def  buySvix_Signal = if ( MACD_cond_logic  and  EMA_condition and  oversoldRevesal  and buySvix &lt; Zeroline - 10 ) then 1 else 0;\n#plot buy3 = buySvix_Signal;\n\n\n\n\n\n\ndef SMI_Sell_Signal = if ( (SMI crosses below AvgSMI within lookBack bar) and (overBoughtReversal)) then 1 else 0;\n#def sellSignal2 = if ((rsi_val  &gt; overBoughtRsi within 3 bar) and (smi crosses below AvgSMI within 3 bar)) then 1 else 0;\n\n\nplot sell2 = SMI_Sell_Signal;\n\n#######\n\n#def FVE_buySignal = conVwapBuy and oversoldRevesal and pFVE_Bull  and MACD_cond_logic ;# and Diff &gt;= 0;\n#def sig_buy = pFVE_Bull and Diff &gt;= 0;\n#plot buy4 = FVE_buySignal ;\n\n\n#def FVE_sellSignal = overBoughtReversal and pFVE_Bear ;\n#plot sell4 = FVE_sellSignal;\nplot buy5 = twoBarPivotMACD_Buy and oversoldRevesal;\nplot sell5 = twoBarPivotMACD_Sell and overBoughtReversal;\n\n####\n#def buySignal2 = if (oversoldRevesal  and buythedip2 &lt; Zeroline ) then 1 else 0;\n\n#def buySignal3 = if ( oversoldRevesal  and buythedip3 &lt; Zeroline - 10 ) then 1 else 0;\n#plot buy3 = buySignal3;\n\nAddChartBubble(buy2 == 1, buy2, \&quot;B2SMI= \&quot; +  low[1] + \&quot; rsi \&quot; + rsi_val + \&quot; w \&quot; + VWAP[1], Color.LIGHT_ORANGE, no);\n#AddChartBubble(buy3 == 1, buy3,  \&quot;B3Svix= \&quot; + price + \&quot; rsi \&quot; + rsi_val, Color.LIGHT_GRAY, no);\n#AddChartBubble(buy4 == 1, buy4,  \&quot;B4FVE= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.YELLOW, no);\nAddChartBubble(buy5 == 1, buy5,  \&quot;B5Macd= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.CYAN, no);\nAddChartBubble(buy6 == 1, buy6,  \&quot;B5AdxSMI= \&quot; + price + \&quot; \\nrsi \&quot; + rsi_val[lookBack] + \&quot; \\nAdx \&quot; + Ref[lookBack], Color.GREEN, no);\n\n#AddChartBubble(sell1 == 1, sell1, \&quot;S1STR= \&quot; + price + \&quot; rsi \&quot; + rsi_val, Color.LIGHT_RED, no);#Buy the Dip\n\nAddChartBubble(sell2 == 1, sell2, \&quot;S2SMI= \&quot; + price + \&quot; rsi \&quot; + rsi_val, Color.PINK, no);#Buy the Dip\n#AddChartBubble(sell4 == 1, sell4, \&quot;S4FVE= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.VIOLET, no);#Buy the Dip\nAddChartBubble(sell5 == 1, sell5, \&quot;S5Macd= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.BLUE, no);#Buy the Dip\n#AddChartBubble(oversoldRevesal , close, rsi_val, Color.blue, no);#Buy the Dip\nplot scan = buy2;&quot;,name=&quot;_d344cec2_79a9_43f5_8e27_7e658f475446&quot;}))})}}" SYMBOL="AAL" SYMBOL_GROUP="7" VERTICAL="false" VISIBLE="true" WEIGHT="1.0"/>
            <CHART_2 VERTICAL="false" VISIBLE="false" WEIGHT="3.0"/>
            <CHART_3 VERTICAL="false" VISIBLE="false" WEIGHT="3.0"/>
            <DASHBOARD VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <LEVEL_II VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <LIVE_NEWS VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <PHASE_SCORES VERTICAL="false" VISIBLE="false" WEIGHT="2.0"/>
            <TIME_SALES VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <TRADE CONFIGURATION_NAME="SINGLE" ORDER_RULES_SET="STOCK" ORDER_TYPE="LIMIT" OS_AUTO="false" OS_EXPANDED="false" OS_TIF="DAY" QTY="100.0" TEMPLATE="SINGLE" TRADE_BUTTONS="BUY_MKT;SELL_MKT;MULTI_CANCEL;REVERSE;FLAT;SECOND_LINE;QUANTITY;AUTO_SEND;ORDER_SETUP" VISIBLE="false">
              <OCO_STOP>
                <TRG_0 TRG_ENBL="true" TRG_LINK="ASK_BID" TRG_OFFSET_MODE="TICK" TRG_OT="STOP" TRG_SETUP="10.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AAL="10.0"/>
                </TRG_0>
              </OCO_STOP>
              <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="1.0" TRG_TIF="DAY">
                <OFFSET_PER_SYMBOL AAL="1.0"/>
              </TRG_0>
              <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-1.0" TRG_TIF="DAY">
                <OFFSET_PER_SYMBOL AAL="-1.0"/>
              </TRG_1>
              <_2>
                <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="2.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AAL="2.0"/>
                </TRG_0>
                <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-2.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AAL="-2.0"/>
                </TRG_1>
              </_2>
              <_3>
                <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="3.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AAL="3.0"/>
                </TRG_0>
                <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-3.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AAL="-3.0"/>
                </TRG_1>
              </_3>
            </TRADE>
          </ACT_TRD_CELL6>
          <ACT_TRD_CELL7 ROWSPANELWEIGHT="1.0" ROWWEIGHT0="1.0" ROWWEIGHT1="1.0" SELECTED_TYPE="CHART" SIDEBAR_IS_ACTIVE="true" SYMBOL="AAPL" SYMBOL_GROUP="8" TRADE_BUTTONS_MIGRATED="true">
            <ACTIVETRADER VERTICAL="false" VISIBLE="false" WEIGHT="2.0"/>
            <BIG_BUTTONS VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <CHART CONFIGURATION="@v8@%0:com.devexperts.tos.thinkscript.data,1:java.awt,2:com.devexperts.toschart.control.subgraph,3:com.devexperts.toschart.elstudies,4:com.devexperts.toschart.script%owner{chartAggregationPeriods:ChartAggregationPeriodArray0,chartAggregationPeriods=@ChartAggregationPeriodArray0}#com.devexperts.toschart.core.ChartModel{encodedMixinsState=&quot;{\&quot;common\&quot;:{\&quot;DRAWING_SETS\&quot;:\&quot;{}\&quot;},\&quot;state_props\&quot;:{\&quot;state_type\&quot;:\&quot;REGULAR\&quot;},\&quot;monkey_bars_exp\&quot;:{\&quot;LikefolioMixin\&quot;:\&quot;{\\\&quot;paintingSettings\\\&quot;:{\\\&quot;neutralSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;positiveSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;negativeSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;sentimentSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true}},\\\&quot;shownDivisions\\\&quot;:[],\\\&quot;allDivisions\\\&quot;:[]}\&quot;},\&quot;monkey_bars\&quot;:{},\&quot;seasonality\&quot;:{},\&quot;regular\&quot;:{\&quot;DescriberMixin\&quot;:\&quot;{\\\&quot;visibility\\\&quot;:\\\&quot;HIDE_PANEL\\\&quot;,\\\&quot;studiesMode\\\&quot;:\\\&quot;HIDE_STUDIES\\\&quot;}\&quot;,\&quot;LikefolioMixin\&quot;:\&quot;{\\\&quot;paintingSettings\\\&quot;:{\\\&quot;neutralSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;positiveSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;negativeSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;sentimentSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true}},\\\&quot;shownDivisions\\\&quot;:[],\\\&quot;allDivisions\\\&quot;:[]}\&quot;}}&quot;,encodedPatternsModel=&quot;{\&quot;showPatterns\&quot;:true,\&quot;models\&quot;:[],\&quot;fibModels\&quot;:[]}&quot;,groupId=&quot;default&quot;,styleSettings{commonStyleSettings{colorSettings{backgroundColor=#%0.CustomColor(#%1.Color(0,0,0,255)),monkeyProfileTypeColors.defaultRowHeight=&lt;F,mpExpandedTypeColors.defaultRowHeight=&lt;F,volumeColor=#%0.CustomColor(#%1.Color(0,0,0,255))},expansion.right=115,fitOrdersToScreen=&lt;T,keepPriceZoom=&lt;T,leftAxisRegulator{maxValue=805926.78632479d,minValue=-33029.78632479d},manualAxisRegulator{maxValue=152.61398392d,minValue=41.24688596d},previousRightExpansion=115,shortCuts{^(&quot;Time Zone&quot;,&lt;F),^(&quot;Show Expiration Friday &quot;,&lt;F),^(&quot;Keep Price Zoom&quot;,&lt;F),^(&quot;enableLeftAxis&quot;,&lt;F),!get:Boolean0(&quot;Chart mode&quot;),^(&quot;Fit expected price ranges&quot;,@Boolean0),^(&quot;emphasizeDigitMPExpanded&quot;,&lt;F),^(&quot;showWicksCandleTrend&quot;,&lt;F),^(&quot;highlightEarnings&quot;,&lt;F),^(&quot;synchronizeCrosshair&quot;,&lt;F),^(&quot;myToolsMode&quot;,&lt;F),^(&quot;seasonalityStyle&quot;,&lt;F),^(&quot;Show Price Subgraph&quot;,&lt;F),^(&quot;closePriceLevel&quot;,&lt;F),^(&quot;Color Volume As Symbol Ticks&quot;,&lt;F),^(&quot;highlightPhantomRBars&quot;,&lt;F),^(&quot;Cross type &quot;,&lt;F),^(&quot;Fit Studies to Screen&quot;,@Boolean0),^(&quot;Chart type &quot;,&lt;F),^(&quot;Fit Orders&quot;,&lt;F),^(&quot;Bubbles as Percentage&quot;,&lt;F),^(&quot;hideStatusString&quot;,&lt;F),^(&quot;Show Studies &quot;,&lt;F),^(&quot;showWicksHeikinAshi&quot;,&lt;F),^(&quot;Alerts&quot;,&lt;F),^(&quot;Chart scale&quot;,&lt;F),^(&quot;Fit High/Low&quot;,&lt;F),^(&quot;Orders&quot;,&lt;F),^(&quot;Use Log Scale &quot;,&lt;F),^(&quot;Fit Study Markers to Screen&quot;,@Boolean0),^(&quot;Fit Alerts&quot;,&lt;F),^(&quot;Fit patterns&quot;,&lt;F),^(&quot;Percentage View&quot;,&lt;F),^(&quot;Make Auto Zoom &quot;,&lt;F),^(&quot;Show Year Marking Line&quot;,&lt;F),^(&quot;Show Rollover Line&quot;,&lt;F),^(&quot;Show High/Low Bubbles &quot;,&lt;F),^(&quot;Snap mode&quot;,&lt;F),^(&quot;highlightStudies&quot;,&lt;F),^(&quot;Overlapped Volume&quot;,&lt;F),^(&quot;Show Symbol Logo&quot;,&lt;F),^(&quot;Show Last Price Bubble &quot;,&lt;F),^(&quot;emphasizeDigitMP&quot;,&lt;F),^(&quot;Show grid&quot;,@Boolean0),^(&quot;showWicksCandle&quot;,&lt;F),^(&quot;Show trades&quot;,&lt;F),^(&quot;highlightSeasons&quot;,&lt;F),^(&quot;Extend Order/Alert Line to Left&quot;,&lt;F)},showGrid=&lt;F,showTradeExecution=&lt;T,step=2.73224043715847d},forexStyleSettings.shortCuts.^(&quot;Show Volume Subgraph&quot;,&lt;F),futuresStyleSettings{highlightExtendedHours=&lt;T,shortCuts{^(&quot;adjustForContractChanges&quot;,&lt;F),^(&quot;Show Open Interest&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,&lt;F),^(&quot;showContractChangeEvents&quot;,&lt;F),^(&quot;futures_daily_close_price&quot;,&lt;F),^(&quot;Show Options&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,&lt;F),^(&quot;startAtMarketOpen&quot;,&lt;F)},tradingHoursOnly=&lt;T},optionsStyleSettings{shortCuts{^(&quot;Show Open Interest&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,&lt;F),^(&quot;Show Theo Price&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,&lt;F),^(&quot;startAtMarketOpen&quot;,&lt;F)},startAggregationAtMarketOpen=&lt;F},otherStyleSettings{shortCuts{^(&quot;Show Social Sentiment&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,@Boolean0),^(&quot;Show Options&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,&lt;F),^(&quot;Show Corporate Actions&quot;,&lt;F),^(&quot;Show CNBC Video&quot;,&lt;F),^(&quot;startAtMarketOpen&quot;,@Boolean0),^(&quot;adjustForDividends&quot;,&lt;F)},startAggregationAtMarketOpen=&lt;F,tradingHoursOnly=&lt;T},setsIdentifiers.styleSetName=&quot;DEF_X_STYLE&quot;},subgraphModels{!get(#%2.SubgraphId(&quot;Symbol&quot;)){height=469,storableIndicators.+(!%3.CompiledStudy.resolveStudy(#%4.ScriptEssence{body=&quot;input averageType = AverageType.SIMPLE;\ninput showMovingAvgLable =Yes;\ninput price = close;\ninput length1 = 10;\ninput length2 = 20;\ninput length3 = 50;\ninput length4 = 200;\ninput displace = 0;\ninput showAvg3 = yes;\n\ninput showAvg4 = yes;\n\ninput showBreakoutSignals = no;\n\n\n\n\n#def AvgExp = ExpAverage(price[-displace], length);\nplot Avg1 = MovingAverage(averageType, price[-displace], length1);\nplot Avg2 = MovingAverage(averageType, price[-displace], length2);\nplot Avg3 = MovingAverage(averageType, price[-displace], length3);\nplot Avg4 = MovingAverage(averageType, price[-displace], length4);\n\nAvg3.setHiding(!showAvg3);\nAvg4.setHiding(!showAvg4);\n\n\n#plot SMA ( Average(price[-displace], length);\nplot UpSignal = price crosses above Avg1;\nplot DownSignal = price crosses below Avg1;\n#Add Label\n\nAddLabel(showMovingAvgLable, \&quot;  \&quot;+ length1+ \&quot;MAvg\&quot; ,Avg1.TakeValueColor ());\nAddLabel(showMovingAvgLable,  astext(Avg1), if Avg1&lt; close then Color.LIGHT_GREEN else if Avg1&gt; close then color.light_red else Color.Light_GRAY);\n\n\nAddLabel(showMovingAvgLable, \&quot;  \&quot;+ length2+ \&quot;MAvg\&quot; ,Avg2.TakeValueColor ());\nAddLabel(showMovingAvgLable,  astext(Avg2), if Avg2&lt; close then Color.LIGHT_GREEN else if Avg2&gt; close then color.light_red else Color.Light_GRAY);\n\nAddLabel(showMovingAvgLable, \&quot;  \&quot;+ length3+ \&quot;MAvg\&quot; ,Avg3.TakeValueColor ());\nAddLabel(showMovingAvgLable,  astext(Avg3), if Avg3&lt; close then Color.LIGHT_GREEN else if Avg3&gt; close then color.light_red else Color.Light_GRAY);\n\n\nAddLabel(showMovingAvgLable, \&quot;  \&quot;+ length4+ \&quot;MAvg\&quot; ,Avg4.TakeValueColor ());\nAddLabel(showMovingAvgLable,  astext(Avg4), if Avg4&lt; close then Color.LIGHT_GREEN else if Avg4&gt; close then color.light_red else Color.Light_GRAY);\n\n\n# Avg1.TakeValueColor ()\n#AddLabel(showMovingAvgLable,  length1+ \&quot;MAvg \&quot; +astext(Avg1) ,Avg1.TakeValueColor ());\n#AddLabel(showMovingAvgLable, astext(Avg1), if Avg1&lt; close then Color.GREEN else if Avg1&gt; close then color.light_red else Color.Light_GRAY);\n\n\n\n#AddLabel(showMovingAvgLable,  length2+ \&quot;MAvg \&quot;+ astext(Avg2) ,Avg2.TakeValueColor ());\n#AddLabel(showMovingAvgLable,  astext(Avg2), if Avg2&lt; close then Color.GREEN else if Avg2&gt; close then color.light_red else Color.Light_GRAY);\n#AddLabel(showMovingAvgLable,  length3+ \&quot;MAvg \&quot; +astext(Avg3),Avg3.TakeValueColor ());\n#AddLabel(showMovingAvgLable, astext(Avg3), if Avg3&lt; close then Color.GREEN else if Avg3&gt; close then color.light_red else Color.Light_GRAY);\n#AddLabel(showMovingAvgLable,  length4+ \&quot;MAvg \&quot; +astext(Avg4),Avg4.TakeValueColor ());\n#AddLabel(showMovingAvgLable, astext(Avg4), if Avg4&lt; close then Color.GREEN else if Avg4&gt; close then color.light_red else Color.Light_GRAY);\ndef bub;\nif !IsNaN(close[-1])\nthen {\n\n    bub = no;#Double.NaN;\n    \n} else {\nbub = yes;\n    \n}\ndef bubb = if  BarNumber() == 20  then yes else no;\n\ninput Show_Mavg_Key=no;\n\n#AddChartBubble(bub, Avg1, \&quot;MAvg\&quot;+ length1+ \&quot;= \&quot; + astext(Avg1), Color.LIGHT_ORANGE, no);\nAddChartBubble(bub and Show_Mavg_Key, Avg1, \&quot;MAvg\&quot;+ length1+ \&quot;= \&quot; + astext(Avg1), Avg1.TakeValueColor (), yes);\nAddChartBubble(bub and Show_Mavg_Key, Avg2, \&quot;MAvg\&quot;+ length2+ \&quot;= \&quot; + astext(Avg2), Avg2.TakeValueColor (), yes);\nAddChartBubble(bub and Show_Mavg_Key, Avg3, \&quot;MAvg\&quot;+ length3+ \&quot;= \&quot; + astext(Avg3), Avg3.TakeValueColor (), yes);\nAddChartBubble(bub and Show_Mavg_Key, Avg4, \&quot;MAvg\&quot;+ length4+ \&quot;= \&quot; + astext(Avg4), Avg4.TakeValueColor (), yes);\n\n#Vwap\ninput vwapTimeFrame = {default DAY, WEEK, MONTH};\ninput numDevDn = -2.0;\ninput numDevUp = 2.0;\n\n\ndef cap = getAggregationPeriod();\ndef errorInAggregation =\n    vwapTimeFrame == vwapTimeFrame.DAY and cap &gt;= AggregationPeriod.WEEK or\n    vwapTimeFrame == vwapTimeFrame.WEEK and cap &gt;= AggregationPeriod.MONTH;\nassert(!errorInAggregation, \&quot;timeFrame should be not less than current chart aggregation period\&quot;);\n\ndef yyyyMmDd = getYyyyMmDd();\ndef periodIndx;\nswitch (vwapTimeFrame) {\ncase DAY:\n    periodIndx = yyyyMmDd;\ncase WEEK:\n    periodIndx = Floor((daysFromDate(first(yyyyMmDd)) + getDayOfWeek(first(yyyyMmDd))) / 7);\ncase MONTH:\n    periodIndx = roundDown(yyyyMmDd / 100, 0);\n}\ndef isPeriodRolled = compoundValue(1, periodIndx != periodIndx[1], yes);\n\ndef volumeSum;\ndef volumeVwapSum;\ndef volumeVwap2Sum;\n\nif (isPeriodRolled) {\n    volumeSum = volume;\n    volumeVwapSum = volume * vwap;\n    volumeVwap2Sum = volume * Sqr(vwap);\n} else {\n    volumeSum = compoundValue(1, volumeSum[1] + volume, volume);\n    volumeVwapSum = compoundValue(1, volumeVwapSum[1] + volume * vwap, volume * vwap);\n    volumeVwap2Sum = compoundValue(1, volumeVwap2Sum[1] + volume * Sqr(vwap), volume * Sqr(vwap));\n}\ndef VWprice = volumeVwapSum / volumeSum;\ndef deviation = Sqrt(Max(volumeVwap2Sum / volumeSum - Sqr(VWprice), 0));\n\nplot VWAP = VWprice;\nplot UpperBand = VWprice + numDevUp * deviation;\nplot LowerBand = VWprice + numDevDn * deviation;\n\nVWAP.setDefaultColor(getColor(0));\nUpperBand.setDefaultColor(getColor(0));\nLowerBand.setDefaultColor(getColor(0));\n\nUpperBand.SetStyle(Curve.MEDIUM_DASH);\nLowerBand.SetStyle(Curve.MEDIUM_DASH);\n\n\n\nUpperBand.hide();\nLowerBand.hide();\n\n#vwap\n\nAddLabel(yes, \&quot;VWAP= \&quot; + astext(VWAP), if VWAP&lt; close then Color.LIGHT_GREEN else if VWAP&gt; close then color.LIGHT_red else Color.GRAY);\n#AddLabel(yes, \&quot;VWAP= \&quot; + astext(VWAP), Color.White);\ndef vwDif= close- VWAP;\nAddLabel(yes, \&quot; \&quot;+astext(vwDif), if vwDif&gt; 0 then Color.LIGHT_GREEN else if vwDif&lt; 0 then color.LIGHT_red else Color.GRAY);\n\n#RSI\ninput overBoughtRsi = 70;\ninput overSoldRsi = 30;\ninput rsiLength = 14;\ninput rsiPrice = close;\ndef rsi_val = reference RSI(length = rsiLength, price = rsiPrice );\n####\n\n\n\nAddLabel(yes, \&quot;RSI = \&quot; + astext(rsi_val) , if rsi_val &gt; overBoughtRsi  then Color.RED else if rsi_val &lt; overSoldRsi then  Color.GREEN else Color.light_GRAY);\n\n\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\nAvg1.SetDefaultColor(color.white);\nAvg2.SetDefaultColor(color.cyan);\nAvg3.SetDefaultColor(color.light_red);\nAvg4.SetDefaultColor(color.pink);\n#avg3.SetStyle(Curve.MEDIUM_DASH);\n#avg4.SetStyle(Curve.MEDIUM_DASH);\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);\n&quot;,name=&quot;_686a0d47_2dc7_4466_91d6_64cf4907bd2a&quot;}))},!get(#%2.SubgraphId(&quot;Volume&quot;)){height=80,storableIndicators.+(!%3.CompiledStudy.resolveStudy(#%4.ScriptEssence{body=&quot;# Modified by Mahi\n# Second Mod by Ramon DV\n\ndeclare on_volume;\n#v2\n#Inputs\n\ninput ShowDayAvg = yes;\ninput AvgDayVolLength = 30;\ninput ShowTodayVolume = yes;\ninput ShowTodayVolumeProjection = yes;\ninput ShowPercentOfDayAvg = yes;\ninput UnusualVolumePercent = 200;\ninput ShowBarAvg = yes;\ninput AvgBarVolLength = 30;\ninput ShowCurrentBar = yes;\ninput ShowPercentOfBarAvg = yes;\ninput ShowSellVolumePercent = yes;\ninput ShowBuyVolumePercent = yes;\ninput AvgType = AverageType.SIMPLE;\n\ndef O = open;\ndef H = high;\ndef C = close;\ndef L = low;\ndef V = volume;\n\n#def buying =  V * (C - L) / (H - L);\n#def selling = V * (H - C) / (H - L);\n\ndef buying =   V * (H - O) / (H - L) ;\ndef selling =  V * (O - L) / (H - L) ;\n\ndef O_day = open(period = AggregationPeriod.DAY);\ndef H_day = high(period = AggregationPeriod.DAY);\ndef C_day = close(period = AggregationPeriod.DAY);\ndef L_day = low(period = AggregationPeriod.DAY);\ndef V_day = volume(period = AggregationPeriod.DAY);\n#def selling_day = V_day * (H_day - C_day) / (H_day - L_day);\n#def buying_day = V_day * (C_day - L_day) / (H_day - L_day);\ndef selling_day = V_day * (H_day - O_day) / (H_day - L_day);\ndef buying_day = V_day * (O_day - L_day) / (H_day - L_day);\n# Selling Volume pressure\n\nplot SellVol = selling;\nSellVol.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);\nSellVol.SetDefaultColor(Color.RED);\nSellVol.HideTitle();\nSellVol.HideBubble();\nSellVol.SetLineWeight(5);\n\n# Total Volume\n# Buying Volume pressure\n\nplot BuyVol = buying + selling; # plot in the background of selling volume\nBuyVol.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);\nBuyVol.SetDefaultColor(Color.DARK_GREEN);\nBuyVol.HideTitle();\nBuyVol.HideBubble();\nBuyVol.SetLineWeight(5);\n\n#Volume Data\n\ndef DayVol = volume(period = “DAY”);\ndef AvgDayVol = MovingAverage(AvgType, DayVol[1], AvgDayVolLength);\ndef percentOfDay = Round((DayVol / AvgDayVol) * 100, 0);\n\n\ndef AvgBarVol = MovingAverage(AvgType, volume[1], AvgBarVolLength);\ndef percentOfBar = Round((volume / AvgBarVol) * 100, 0);\ndef SellVolPercent = Round((selling / volume) * 100, 0);\ndef BuyVolPercent = 100 - SellVolPercent;\n\ndef SellVolPercent_day = Round((selling_day / V_day) * 100, 0);\ndef BuyVolPercent_day = 100 - SellVolPercent_day;\n\n# Labels\n\nAddLabel(ShowDayAvg, \&quot;Avg “ + AvgDayVolLength + “ Days: \&quot; + Round(AvgDayVol, 0), Color.LIGHT_GRAY);\n\nAddLabel(ShowTodayVolume, \&quot;Today: \&quot; + DayVol, (if percentOfDay &gt;= UnusualVolumePercent then Color.GREEN else if percentOfDay &gt;= 100 then Color.ORANGE else Color.LIGHT_GRAY));\n\nAddLabel(ShowPercentOfDayAvg, percentOfDay + \&quot;%\&quot;, (if percentOfDay &gt;= UnusualVolumePercent then Color.GREEN else if percentOfDay &gt;= 100 then Color.ORANGE else Color.WHITE) );\n\nAddLabel(ShowBarAvg, \&quot;Avg “ + AvgBarVolLength + ” Bars: \&quot; + Round(AvgBarVol, 0), Color.LIGHT_GRAY);\n\nAddLabel(ShowCurrentBar, \&quot;Cur Bar: \&quot; + volume, (if percentOfBar &gt;= UnusualVolumePercent then Color.GREEN else if percentOfBar &gt;= 100 then Color.ORANGE else Color.LIGHT_GRAY));\n\nAddLabel(ShowPercentOfBarAvg, percentOfBar + \&quot;%\&quot;, (if percentOfBar &gt;= UnusualVolumePercent then Color.GREEN else if percentOfBar &gt;= 100 then Color.ORANGE else Color.WHITE) );\n\n\nAddLabel(ShowSellVolumePercent and (SellVolPercent &gt; BuyVolPercent) , \&quot;Cur Bar Sell %: \&quot; + SellVolPercent, if SellVolPercent &gt; BuyVolPercent then Color.RED else Color.GRAY);\nAddLabel(ShowBuyVolumePercent and (SellVolPercent &lt;= BuyVolPercent), \&quot;Cur Bar Buy %: \&quot; + BuyVolPercent, if BuyVolPercent &gt; SellVolPercent then Color.GREEN else Color.GRAY);\n\n\n# PriceOpen.Hide();\ninput length = 50;\n\nplot Vol = volume;\nplot VolAvg = Average(volume, length);\n\nVol.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);\nVol.SetLineWeight(3);\nVol.DefineColor(\&quot;Up\&quot;, Color.UPTICK);\nVol.DefineColor(\&quot;Down\&quot;, Color.DOWNTICK);\nVol.AssignValueColor(if close &gt; close[1] then Vol.Color(\&quot;Up\&quot;) else if close &lt; close[1] then Vol.Color(\&quot;Down\&quot;) else GetColor(1));\nVolAvg.SetDefaultColor(GetColor(8));\n\n\n#########################################################\n\n#def rth = (RegularTradingEnd(GetYYYYMMDD()) - RegularTradingStart(GetYYYYMMDD())) / AggregationPeriod.HOUR;\ndef rth = (RegularTradingEnd(GetYYYYMMDD()) - RegularTradingStart(GetYYYYMMDD())) / AggregationPeriod.MIN;\ndef MarketNotClosed = GetTime() &lt;= RegularTradingEnd (GetYYYYMMDD());\n# def eod = ((  RegularTradingEnd (GetYYYYMMDD()) - GetTime() ) / AggregationPeriod.MIN);\ndef eod = if MarketNotClosed then ((  RegularTradingEnd (GetYYYYMMDD()) - GetTime() ) / AggregationPeriod.MIN) else ((  RegularTradingEnd (GetYYYYMMDD())  ) / AggregationPeriod.MIN);\n\ndef DayVol_Projetion = volume(period = “DAY”) * rth / (rth - eod);\ndef percentOfDayProjection = Round((DayVol_Projetion / AvgDayVol) * 100, 0);\nAddLabel(ShowBuyVolumePercent, \&quot;Day Buy %: \&quot; + BuyVolPercent_day, if BuyVolPercent_day &gt; SellVolPercent_day then Color.GREEN else Color.GRAY);\n\nAddLabel(ShowTodayVolumeProjection, \&quot;Est. Vol: \&quot; + Round(DayVol_Projetion, 0) , if DayVol_Projetion &gt; AvgDayVol * 1.5  then Color.GREEN else Color.GRAY);\n\nAddLabel(ShowTodayVolumeProjection,  percentOfDayProjection  + \&quot;%\&quot;, if DayVol_Projetion &gt; AvgDayVol * 1.5  then Color.GREEN else Color.GRAY);\n\ndef y = GetTime() / AggregationPeriod.MIN;\n#eod =2;\n#AddLabel(yes, \&quot;RTH duration (min): \&quot; + rth);\n#AddLabel(yes, \&quot;EOD duration (min): \&quot; + eod);\n#AddLabel(yes, \&quot;Market Not closed: \&quot; + y);\n\n#######&quot;,name=&quot;_5261aedd_9830_4f97_bb0c_d3f9282e8428&quot;}))},^(#%2.SubgraphId(&quot;Subgraph1&quot;),#%2.SubgraphStorableModel{height=188,storableIndicators.+(!%3.CompiledStudy.resolveStudy(#%4.ScriptEssence{body=&quot;declare lower;\ninput aggregationPeriod1 = AggregationPeriod.THIRTY_MIN;\n\ninput useOpen =yes;\ndef price = if (useOpen) then   open(period = aggregationPeriod1) else close(period = aggregationPeriod1) ;\n\ninput over_bought = 40.0;\ninput over_sold = -40.0;\ninput percentDLength = 3;\ninput percentKLength = 5;\n\ndef min_low = Lowest(low (period = aggregationPeriod1), percentKLength);\ndef max_high = Highest(high (period = aggregationPeriod1), percentKLength);\ndef rel_diff = price - (max_high + min_low) / 2;\ndef diff = max_high - min_low;\n\ndef avgrel = ExpAverage(ExpAverage(rel_diff, percentDLength), percentDLength);\ndef avgdiff = ExpAverage(ExpAverage(diff, percentDLength), percentDLength);\n\nplot SMI = if avgdiff != 0 then avgrel / (avgdiff / 2) * 100 else 0;\nSMI.SetDefaultColor(GetColor(1));\n\nplot AvgSMI = ExpAverage(SMI, percentDLength);\nAvgSMI.SetDefaultColor(GetColor(5));\n\nplot overbought = over_bought;\noverbought.SetDefaultColor(GetColor(5));\n\nplot oversold = over_sold;\noversold.SetDefaultColor(GetColor(5));\n\n\n\n#RSI\ninput overBoughtRsi = 70;\ninput overSoldRsi = 30;\ninput rsiLength = 14;\ninput  rsiPrice = close;\nplot rsi_val = reference RSI(length = rsiLength, price = rsiPrice );\n####\n\n\n\nAddLabel(yes, \&quot;RSI = \&quot; + rsi_val , if rsi_val &gt; overBoughtRsi  then Color.RED else if rsi_val &lt; overSoldRsi then  Color.GREEN else Color.GRAY);\n\n\n\n#trend reversal\ndef y = rsi_val ;\ninput riReversLength = 2;\ninput lookBack = 2;\n\n\ndef rsi_expAvg = ExpAverage(rsi_val, riReversLength);\n\n#trend reversal\ndef overBoughtReversal = if ((rsi_expAvg &gt; overBoughtRsi)within 2 bar) and  (rsi_expAvg crosses above rsi_val) then price else 0;# if (rsi_expAvg &gt; OverBought and  rsi_expAvg crosses above rsi_val  within 3 bar ) then 40 else 0;\ndef oversoldRevesal = if ((rsi_expAvg &lt; overSoldRsi)within 2 bar) and  (rsi_expAvg crosses below rsi_val within 2 bar) then price else 0;\n\n##############\n########!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n#vwap vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\n#input numDevUp = 2.0;\ninput vwapTimeFrame = {default DAY, WEEK, MONTH};\n\ndef cap = GetAggregationPeriod();\ndef errorInAggregation =\n    vwapTimeFrame == vwapTimeFrame.DAY and cap &gt;= AggregationPeriod.WEEK or\n    vwapTimeFrame == vwapTimeFrame.WEEK and cap &gt;= AggregationPeriod.MONTH;\nAssert(!errorInAggregation, \&quot;timeFrame should be not less than current chart aggregation period\&quot;);\n\ndef yyyyMmDd = GetYYYYMMDD();\ndef periodIndx;\nswitch (vwapTimeFrame) {\ncase DAY:\n    periodIndx = yyyyMmDd;\ncase WEEK:\n    periodIndx = Floor((DaysFromDate(First(yyyyMmDd)) + GetDayOfWeek(First(yyyyMmDd))) / 7);\ncase MONTH:\n    periodIndx = RoundDown(yyyyMmDd / 100, 0);\n}\ndef isPeriodRolled = CompoundValue(1, periodIndx != periodIndx[1], yes);\n\ndef volumeSum;\ndef volumeVwapSum;\ndef volumeVwap2Sum;\n\nif (isPeriodRolled) {\n    volumeSum = volume;\n    volumeVwapSum = volume * vwap;\n    volumeVwap2Sum = volume * Sqr(vwap);\n} else {\n    volumeSum = CompoundValue(1, volumeSum[1] + volume, volume);\n    volumeVwapSum = CompoundValue(1, volumeVwapSum[1] + volume * vwap, volume * vwap);\n    volumeVwap2Sum = CompoundValue(1, volumeVwap2Sum[1] + volume * Sqr(vwap), volume * Sqr(vwap));\n}\ndef vWapprice = volumeVwapSum / volumeSum;\ndef deviation = Sqrt(Max(volumeVwap2Sum / volumeSum - Sqr(vWapprice), 0));\n\ndef VWAP = vWapprice;\ninput numDevUp = 2.0;\ninput numDevDn = -2.0;\n\ndef vwap_UpperBand = price + numDevUp * deviation;\ndef vwap_LowerBand = price + numDevDn * deviation;\n\ninput vwapCondition = no;\n#input vp=close;\ndef conVwapBuy = if  vwapCondition then  close &gt;= VWAP else 1;\n\n#####^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n#MACD\n\ninput fastLength = 12;\ninput slowLength = 26;\ninput MACDLength = 9;\ninput displace = 0;\ndef fastAvg = Sum(volume * price, fastLength) / Sum(volume, fastLength);\ndef slowAvg = Sum(volume * price, slowLength) / Sum(volume, slowLength);\ndef Value = fastAvg - slowAvg;\ndef Avg = ExpAverage(Value, MACDLength);\ndef MACD_Diff  = Value - Avg;\n#def ZeroLine = 0;\n\ninput def_cond = no;\ndef MACD_cond_logic = if (def_cond) then MACD_Diff &lt;= 0 else yes;\n\n\n#MACD Pivot reversal\n#input FilterLength=3;\n######################\n#def MACDV_Diff_expAvg = ExpAverage(MACD_Diff, FilterLength);\n#plot oversoldRevesalMACDV =if ((Diff_MACDV &lt; MacdZeroLine)within lookBack bar) and  ( Diff_MACDV crosses above   MACDV_Diff_expAvg within lookBack bar)and Diff_MACDV &gt; Diff_MACDV[1] then 1 else 0;# if (MACDV_Diff_expAvg &gt; OverBought and  MACDV_Diff_expAvg crosses above rsi_val  within 3 bar ) then 40 else 0;\n#plot overBoughtReversalMACDV = if ((Diff_MACDV &gt; MacdZeroLine)within lookBack bar) and  (MACDV_Diff_expAvg crosses above  Diff_MACDV  within lookBack bar)  and Diff_MACDV &lt; Diff_MACDV[1] and Diff_MACDV&gt;0 then 1 else 0;\n\n\n#trend Pivot reversal\ndef twoBarPivotMACD_Buy =  MACD_Diff &gt; MACD_Diff[1] and MACD_Diff[1] &gt; MACD_Diff[2] and MACD_Diff[2] &lt; MACD_Diff[3] and MACD_Diff[3] &lt; MACD_Diff [4];\ndef twoBarPivotMACD_Sell = MACD_Diff &lt; MACD_Diff[1] and MACD_Diff[1] &lt; MACD_Diff[2] and MACD_Diff[2] &gt; MACD_Diff[3] and MACD_Diff[3] &gt; MACD_Diff [4];\n###################\n\n\ndef uptrend = if price &gt; price[1] and price[1] &gt;= price[2] then 1 else 0;\n\n#####################################-----------------\n\ninput aggPeriod = AggregationPeriod.DAY;\ninput AvgType = AverageType.SIMPLE;\ninput short_len = 10;\ninput mid_len = 21;\ninput long_len = 50;\ninput moving_average = no;\ndef AVG1 = MovingAverage(AvgType, close(period = aggPeriod), short_len);\ndef AVG2 = MovingAverage(AvgType, close(period = aggPeriod), mid_len);\ndef AVG3 = MovingAverage(AvgType, close(period = aggPeriod), long_len);\n#def EMA_condition = if moving_average then (close &gt; AVG1 or close &gt; AVG2 or  close &gt; AVG3) else yes;\ndef EMA_condition = if moving_average then (close &gt; AVG1 ) else yes;\n\nAddLabel( yes, Concat(short_len + \&quot;MA = \&quot;, AVG1), Color.CYAN);\nAddLabel( yes, Concat(mid_len + \&quot;MA = \&quot;, AVG2), Color.LIGHT_ORANGE);\nAddLabel( yes, Concat(long_len + \&quot;MA = \&quot;, AVG3), Color.PINK);\n\n\n\n##############################################\n#@@@@\n#ADX\ninput adxLength = 14;\ninput adxAverageType = AverageType.WILDERS;\n\ndef ADX = DMI(adxLength, adxAverageType).ADX;\n#ADX.setDefaultColor(GetColor(5));\n\ninput length = 7;\ninput signalLength = 10;\ninput averageType = AverageType.WEIGHTED;\ninput averageTypeSignal = AverageType.EXPONENTIAL;\n\n\n\ndef Ref = ADX;# reference OnBalanceVolume();\nplot RefMoving = MovingAverage(averageType, Ref, length);\nplot Signal = MovingAverage(averageTypeSignal, RefMoving, signalLength);\nplot dif =  Ref - RefMoving;\n#Ref.SetDefaultColor(GetColor(4));\nRefMoving.SetDefaultColor(GetColor(8));\nSignal.SetDefaultColor(GetColor(2));\ndif.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);\ndif.SetLineWeight(3);\n\n\ndif.DefineColor(\&quot;Positive and Up\&quot;, Color.CYAN);\ndif.DefineColor(\&quot;Positive and Down\&quot;, Color.BLUE);\ndif.DefineColor(\&quot;Negative and Down\&quot;, Color.RED);\ndif.DefineColor(\&quot;Negative and Up\&quot;, Color.YELLOW);\ndif.AssignValueColor(if dif &gt;= 0 then if dif &gt; dif[1] then dif.Color(\&quot;Positive and Up\&quot;) else dif.Color(\&quot;Positive and Down\&quot;) else if dif &lt; dif[1] then dif.Color(\&quot;Negative and Down\&quot;) else dif.Color(\&quot;Negative and Up\&quot;));\n\n\n#@@@@@\n###################################\ndef SMI_ADX_Buy_Signal;\nif GetAggregationPeriod() &lt; AggregationPeriod.FIFTEEN_MIN\nthen\n{\n    SMI_ADX_Buy_Signal = if ( (SMI crosses above AvgSMI  within lookBack bar) and (Ref crosses above RefMoving within lookBack bar) and dif &gt;= 0 and (rsi_val &gt; overSoldRsi and rsi_val &lt; 60 ) and MACD_cond_logic and  EMA_condition) and Ref &gt; Ref[2] then 1 else 0;\n\n}\nelse {\n    SMI_ADX_Buy_Signal = 0;\n}\nplot buy6 = SMI_ADX_Buy_Signal;\n\n\ndef SMI_Buy_Signal = if ( (SMI crosses above overbought  within lookBack bar) and SMI &gt;  AvgSMI and (rsi_val &gt; overSoldRsi and rsi_val &lt; overBoughtRsi + 10 ) and MACD_cond_logic and  EMA_condition) and  (uptrend) then 1 else 0;\nplot buy2 = SMI_Buy_Signal;\n\n#def  buySvix_Signal = if ( MACD_cond_logic  and  EMA_condition and  oversoldRevesal  and buySvix &lt; Zeroline - 10 ) then 1 else 0;\n#plot buy3 = buySvix_Signal;\n\n\n\n\n\n\ndef SMI_Sell_Signal = if ( (SMI crosses below AvgSMI within lookBack bar) and (overBoughtReversal)) then 1 else 0;\n#def sellSignal2 = if ((rsi_val  &gt; overBoughtRsi within 3 bar) and (smi crosses below AvgSMI within 3 bar)) then 1 else 0;\n\n\nplot sell2 = SMI_Sell_Signal;\n\n#######\n\n#def FVE_buySignal = conVwapBuy and oversoldRevesal and pFVE_Bull  and MACD_cond_logic ;# and Diff &gt;= 0;\n#def sig_buy = pFVE_Bull and Diff &gt;= 0;\n#plot buy4 = FVE_buySignal ;\n\n\n#def FVE_sellSignal = overBoughtReversal and pFVE_Bear ;\n#plot sell4 = FVE_sellSignal;\nplot buy5 = twoBarPivotMACD_Buy and oversoldRevesal;\nplot sell5 = twoBarPivotMACD_Sell and overBoughtReversal;\n\n####\n#def buySignal2 = if (oversoldRevesal  and buythedip2 &lt; Zeroline ) then 1 else 0;\n\n#def buySignal3 = if ( oversoldRevesal  and buythedip3 &lt; Zeroline - 10 ) then 1 else 0;\n#plot buy3 = buySignal3;\n\nAddChartBubble(buy2 == 1, buy2, \&quot;B2SMI= \&quot; +  low[1] + \&quot; rsi \&quot; + rsi_val + \&quot; w \&quot; + VWAP[1], Color.LIGHT_ORANGE, no);\n#AddChartBubble(buy3 == 1, buy3,  \&quot;B3Svix= \&quot; + price + \&quot; rsi \&quot; + rsi_val, Color.LIGHT_GRAY, no);\n#AddChartBubble(buy4 == 1, buy4,  \&quot;B4FVE= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.YELLOW, no);\nAddChartBubble(buy5 == 1, buy5,  \&quot;B5Macd= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.CYAN, no);\nAddChartBubble(buy6 == 1, buy6,  \&quot;B5AdxSMI= \&quot; + price + \&quot; \\nrsi \&quot; + rsi_val[lookBack] + \&quot; \\nAdx \&quot; + Ref[lookBack], Color.GREEN, no);\n\n#AddChartBubble(sell1 == 1, sell1, \&quot;S1STR= \&quot; + price + \&quot; rsi \&quot; + rsi_val, Color.LIGHT_RED, no);#Buy the Dip\n\nAddChartBubble(sell2 == 1, sell2, \&quot;S2SMI= \&quot; + price + \&quot; rsi \&quot; + rsi_val, Color.PINK, no);#Buy the Dip\n#AddChartBubble(sell4 == 1, sell4, \&quot;S4FVE= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.VIOLET, no);#Buy the Dip\nAddChartBubble(sell5 == 1, sell5, \&quot;S5Macd= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.BLUE, no);#Buy the Dip\n#AddChartBubble(oversoldRevesal , close, rsi_val, Color.blue, no);#Buy the Dip\nplot scan = buy2;&quot;,name=&quot;_895e3e9a_2bdf_4c37_bc8e_713002a58848&quot;}){inputsMap:TreeMap0{^(&quot;aggregationPeriod1&quot;,&quot;WEEK&quot;),^(&quot;rsiPrice&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap0,plots{4:{hiding=&lt;T},5:{hiding=&lt;T},6:{hiding=&lt;T},7:{hiding=&lt;T}}})}),^(#%2.SubgraphId(&quot;Subgraph7&quot;),#%2.SubgraphStorableModel{height=188,storableIndicators.+(!%3.CompiledStudy.resolveStudy(#%4.ScriptEssence{body=&quot;declare lower;\n\ninput price = close;\n\ninput over_bought = 40.0;\ninput over_sold = -40.0;\ninput percentDLength = 3;\ninput percentKLength = 5;\n\ndef min_low = Lowest(low, percentKLength);\ndef max_high = Highest(high, percentKLength);\ndef rel_diff = price - (max_high + min_low) / 2;\ndef diff = max_high - min_low;\n\ndef avgrel = ExpAverage(ExpAverage(rel_diff, percentDLength), percentDLength);\ndef avgdiff = ExpAverage(ExpAverage(diff, percentDLength), percentDLength);\n\nplot SMI = if avgdiff != 0 then avgrel / (avgdiff / 2) * 100 else 0;\nSMI.SetDefaultColor(GetColor(1));\n\nplot AvgSMI = ExpAverage(SMI, percentDLength);\nAvgSMI.SetDefaultColor(GetColor(5));\n\nplot overbought = over_bought;\noverbought.SetDefaultColor(GetColor(5));\n\nplot oversold = over_sold;\noversold.SetDefaultColor(GetColor(5));\n\n\n\n#RSI\ninput overBoughtRsi = 70;\ninput overSoldRsi = 30;\ninput rsiLength = 14;\ninput rsiPrice = close;\ndef rsi_val = reference RSI(length = rsiLength, price = rsiPrice );\n####\n\n\n\nAddLabel(yes, \&quot;RSI = \&quot; + rsi_val , if rsi_val &gt; overBoughtRsi  then Color.RED else if rsi_val &lt; overSoldRsi then  Color.GREEN else Color.GRAY);\n\n\n\n#trend reversal\ndef y = rsi_val ;\ninput riReversLength = 2;\ninput lookBack = 2;\n\n\ndef rsi_expAvg = ExpAverage(rsi_val, riReversLength);\n\n#trend reversal\ndef overBoughtReversal = if ((rsi_expAvg &gt; overBoughtRsi)within 2 bar) and  (rsi_expAvg crosses above rsi_val) then price else 0;# if (rsi_expAvg &gt; OverBought and  rsi_expAvg crosses above rsi_val  within 3 bar ) then 40 else 0;\ndef oversoldRevesal = if ((rsi_expAvg &lt; overSoldRsi)within 2 bar) and  (rsi_expAvg crosses below rsi_val within 2 bar) then price else 0;\n\n##############\n########!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n#vwap vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\n#input numDevUp = 2.0;\ninput vwapTimeFrame = {default DAY, WEEK, MONTH};\n\ndef cap = GetAggregationPeriod();\ndef errorInAggregation =\n    vwapTimeFrame == vwapTimeFrame.DAY and cap &gt;= AggregationPeriod.WEEK or\n    vwapTimeFrame == vwapTimeFrame.WEEK and cap &gt;= AggregationPeriod.MONTH;\nAssert(!errorInAggregation, \&quot;timeFrame should be not less than current chart aggregation period\&quot;);\n\ndef yyyyMmDd = GetYYYYMMDD();\ndef periodIndx;\nswitch (vwapTimeFrame) {\ncase DAY:\n    periodIndx = yyyyMmDd;\ncase WEEK:\n    periodIndx = Floor((DaysFromDate(First(yyyyMmDd)) + GetDayOfWeek(First(yyyyMmDd))) / 7);\ncase MONTH:\n    periodIndx = RoundDown(yyyyMmDd / 100, 0);\n}\ndef isPeriodRolled = CompoundValue(1, periodIndx != periodIndx[1], yes);\n\ndef volumeSum;\ndef volumeVwapSum;\ndef volumeVwap2Sum;\n\nif (isPeriodRolled) {\n    volumeSum = volume;\n    volumeVwapSum = volume * vwap;\n    volumeVwap2Sum = volume * Sqr(vwap);\n} else {\n    volumeSum = CompoundValue(1, volumeSum[1] + volume, volume);\n    volumeVwapSum = CompoundValue(1, volumeVwapSum[1] + volume * vwap, volume * vwap);\n    volumeVwap2Sum = CompoundValue(1, volumeVwap2Sum[1] + volume * Sqr(vwap), volume * Sqr(vwap));\n}\ndef vWapprice = volumeVwapSum / volumeSum;\ndef deviation = Sqrt(Max(volumeVwap2Sum / volumeSum - Sqr(vWapprice), 0));\n\ndef VWAP = vWapprice;\ninput numDevUp = 2.0;\ninput numDevDn = -2.0;\n\ndef vwap_UpperBand = price + numDevUp * deviation;\ndef vwap_LowerBand = price + numDevDn * deviation;\n\ninput vwapCondition = no;\n#input vp=close;\ndef conVwapBuy = if  vwapCondition then  close &gt;= VWAP else 1;\n\n#####^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n#MACD\n\ninput fastLength = 12;\ninput slowLength = 26;\ninput MACDLength = 9;\ninput displace = 0;\ndef fastAvg = Sum(volume * price, fastLength) / Sum(volume, fastLength);\ndef slowAvg = Sum(volume * price, slowLength) / Sum(volume, slowLength);\ndef Value = fastAvg - slowAvg;\ndef Avg = ExpAverage(Value, MACDLength);\ndef MACD_Diff  = Value - Avg;\n#def ZeroLine = 0;\n\ninput def_cond = no;\ndef MACD_cond_logic = if (def_cond) then MACD_Diff &lt;= 0 else yes;\n\n\n#MACD Pivot reversal\n#input FilterLength=3;\n######################\n#def MACDV_Diff_expAvg = ExpAverage(MACD_Diff, FilterLength);\n#plot oversoldRevesalMACDV =if ((Diff_MACDV &lt; MacdZeroLine)within lookBack bar) and  ( Diff_MACDV crosses above   MACDV_Diff_expAvg within lookBack bar)and Diff_MACDV &gt; Diff_MACDV[1] then 1 else 0;# if (MACDV_Diff_expAvg &gt; OverBought and  MACDV_Diff_expAvg crosses above rsi_val  within 3 bar ) then 40 else 0;\n#plot overBoughtReversalMACDV = if ((Diff_MACDV &gt; MacdZeroLine)within lookBack bar) and  (MACDV_Diff_expAvg crosses above  Diff_MACDV  within lookBack bar)  and Diff_MACDV &lt; Diff_MACDV[1] and Diff_MACDV&gt;0 then 1 else 0;\n\n\n#trend Pivot reversal\ndef twoBarPivotMACD_Buy =  MACD_Diff &gt; MACD_Diff[1] and MACD_Diff[1] &gt; MACD_Diff[2] and MACD_Diff[2] &lt; MACD_Diff[3] and MACD_Diff[3] &lt; MACD_Diff [4];\ndef twoBarPivotMACD_Sell = MACD_Diff &lt; MACD_Diff[1] and MACD_Diff[1] &lt; MACD_Diff[2] and MACD_Diff[2] &gt; MACD_Diff[3] and MACD_Diff[3] &gt; MACD_Diff [4];\n###################\n\n\ndef uptrend = if price &gt; price[1] and price[1] &gt;= price[2] then 1 else 0;\n\n#####################################-----------------\n\ninput aggPeriod = AggregationPeriod.DAY;\ninput AvgType = AverageType.SIMPLE;\ninput short_len = 10;\ninput mid_len = 21;\ninput long_len = 50;\ninput moving_average = no;\ndef AVG1 = MovingAverage(AvgType, close(period = aggPeriod), short_len);\ndef AVG2 = MovingAverage(AvgType, close(period = aggPeriod), mid_len);\ndef AVG3 = MovingAverage(AvgType, close(period = aggPeriod), long_len);\n#def EMA_condition = if moving_average then (close &gt; AVG1 or close &gt; AVG2 or  close &gt; AVG3) else yes;\ndef EMA_condition = if moving_average then (close &gt; AVG1 ) else yes;\n\nAddLabel( yes, Concat(short_len + \&quot;MA = \&quot;, AVG1), Color.CYAN);\nAddLabel( yes, Concat(mid_len + \&quot;MA = \&quot;, AVG2), Color.LIGHT_ORANGE);\nAddLabel( yes, Concat(long_len + \&quot;MA = \&quot;, AVG3), Color.PINK);\n\n\n\n##############################################\n#@@@@\n#ADX\ninput adxLength = 14;\ninput adxAverageType = AverageType.WILDERS;\n\ndef ADX = DMI(adxLength, adxAverageType).ADX;\n#ADX.setDefaultColor(GetColor(5));\n\ninput length = 7;\ninput signalLength = 10;\ninput averageType = AverageType.WEIGHTED;\ninput averageTypeSignal = AverageType.EXPONENTIAL;\n\n\n\ndef Ref = ADX;# reference OnBalanceVolume();\nplot RefMoving = MovingAverage(averageType, Ref, length);\nplot Signal = MovingAverage(averageTypeSignal, RefMoving, signalLength);\nplot dif =  Ref - RefMoving;\n#Ref.SetDefaultColor(GetColor(4));\nRefMoving.SetDefaultColor(GetColor(8));\nSignal.SetDefaultColor(GetColor(2));\ndif.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);\ndif.SetLineWeight(3);\n\n\ndif.DefineColor(\&quot;Positive and Up\&quot;, Color.CYAN);\ndif.DefineColor(\&quot;Positive and Down\&quot;, Color.BLUE);\ndif.DefineColor(\&quot;Negative and Down\&quot;, Color.RED);\ndif.DefineColor(\&quot;Negative and Up\&quot;, Color.YELLOW);\ndif.AssignValueColor(if dif &gt;= 0 then if dif &gt; dif[1] then dif.Color(\&quot;Positive and Up\&quot;) else dif.Color(\&quot;Positive and Down\&quot;) else if dif &lt; dif[1] then dif.Color(\&quot;Negative and Down\&quot;) else dif.Color(\&quot;Negative and Up\&quot;));\n\n\n#@@@@@\n###################################\ndef SMI_ADX_Buy_Signal;\nif GetAggregationPeriod() &lt; AggregationPeriod.FIFTEEN_MIN\nthen\n{\n    SMI_ADX_Buy_Signal = if ( (SMI crosses above AvgSMI  within lookBack bar) and (Ref crosses above RefMoving within lookBack bar) and dif &gt;= 0 and (rsi_val &gt; overSoldRsi and rsi_val &lt; 60 ) and MACD_cond_logic and  EMA_condition) and Ref &gt; Ref[2] then 1 else 0;\n\n}\nelse {\n    SMI_ADX_Buy_Signal = 0;\n}\nplot buy6 = SMI_ADX_Buy_Signal;\n\n\ndef SMI_Buy_Signal = if ( (AvgSMI crosses above overbought  within lookBack bar) and SMI &gt;  AvgSMI and (rsi_val &gt; overSoldRsi and rsi_val &lt; overBoughtRsi + 10 ) and MACD_cond_logic and  EMA_condition) and (close[1] &gt;= VWAP[1] and close &gt;= vwap_UpperBand[1]) and (uptrend) then 1 else 0;\nplot buy2 = SMI_Buy_Signal;\n\n#def  buySvix_Signal = if ( MACD_cond_logic  and  EMA_condition and  oversoldRevesal  and buySvix &lt; Zeroline - 10 ) then 1 else 0;\n#plot buy3 = buySvix_Signal;\n\n\n\n\n\n\ndef SMI_Sell_Signal = if ( (SMI crosses below AvgSMI within lookBack bar) and (overBoughtReversal)) then 1 else 0;\n#def sellSignal2 = if ((rsi_val  &gt; overBoughtRsi within 3 bar) and (smi crosses below AvgSMI within 3 bar)) then 1 else 0;\n\n\nplot sell2 = SMI_Sell_Signal;\n\n#######\n\n#def FVE_buySignal = conVwapBuy and oversoldRevesal and pFVE_Bull  and MACD_cond_logic ;# and Diff &gt;= 0;\n#def sig_buy = pFVE_Bull and Diff &gt;= 0;\n#plot buy4 = FVE_buySignal ;\n\n\n#def FVE_sellSignal = overBoughtReversal and pFVE_Bear ;\n#plot sell4 = FVE_sellSignal;\nplot buy5 = twoBarPivotMACD_Buy and oversoldRevesal;\nplot sell5 = twoBarPivotMACD_Sell and overBoughtReversal;\n\n####\n#def buySignal2 = if (oversoldRevesal  and buythedip2 &lt; Zeroline ) then 1 else 0;\n\n#def buySignal3 = if ( oversoldRevesal  and buythedip3 &lt; Zeroline - 10 ) then 1 else 0;\n#plot buy3 = buySignal3;\n\nAddChartBubble(buy2 == 1, buy2, \&quot;B2SMI= \&quot; +  low[1] + \&quot; rsi \&quot; + rsi_val + \&quot; w \&quot; + VWAP[1], Color.LIGHT_ORANGE, no);\n#AddChartBubble(buy3 == 1, buy3,  \&quot;B3Svix= \&quot; + price + \&quot; rsi \&quot; + rsi_val, Color.LIGHT_GRAY, no);\n#AddChartBubble(buy4 == 1, buy4,  \&quot;B4FVE= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.YELLOW, no);\nAddChartBubble(buy5 == 1, buy5,  \&quot;B5Macd= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.CYAN, no);\nAddChartBubble(buy6 == 1, buy6,  \&quot;B5AdxSMI= \&quot; + price + \&quot; \\nrsi \&quot; + rsi_val[lookBack] + \&quot; \\nAdx \&quot; + Ref[lookBack], Color.GREEN, no);\n\n#AddChartBubble(sell1 == 1, sell1, \&quot;S1STR= \&quot; + price + \&quot; rsi \&quot; + rsi_val, Color.LIGHT_RED, no);#Buy the Dip\n\nAddChartBubble(sell2 == 1, sell2, \&quot;S2SMI= \&quot; + price + \&quot; rsi \&quot; + rsi_val, Color.PINK, no);#Buy the Dip\n#AddChartBubble(sell4 == 1, sell4, \&quot;S4FVE= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.VIOLET, no);#Buy the Dip\nAddChartBubble(sell5 == 1, sell5, \&quot;S5Macd= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.BLUE, no);#Buy the Dip\n#AddChartBubble(oversoldRevesal , close, rsi_val, Color.blue, no);#Buy the Dip\nplot scan = buy2;&quot;,name=&quot;_d344cec2_79a9_43f5_8e27_7e658f475446&quot;}))})}}" SYMBOL="AAPL" SYMBOL_GROUP="8" VERTICAL="false" VISIBLE="true" WEIGHT="1.0"/>
            <CHART_2 VERTICAL="false" VISIBLE="false" WEIGHT="3.0"/>
            <CHART_3 VERTICAL="false" VISIBLE="false" WEIGHT="3.0"/>
            <DASHBOARD VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <LEVEL_II VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <LIVE_NEWS VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <PHASE_SCORES VERTICAL="false" VISIBLE="false" WEIGHT="2.0"/>
            <TIME_SALES VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <TRADE CONFIGURATION_NAME="SINGLE" ORDER_RULES_SET="STOCK" ORDER_TYPE="LIMIT" OS_AUTO="false" OS_EXPANDED="false" OS_TIF="DAY" QTY="100.0" TEMPLATE="SINGLE" TRADE_BUTTONS="BUY_MKT;SELL_MKT;MULTI_CANCEL;REVERSE;FLAT;SECOND_LINE;QUANTITY;AUTO_SEND;ORDER_SETUP" VISIBLE="false">
              <OCO_STOP>
                <TRG_0 TRG_ENBL="true" TRG_LINK="ASK_BID" TRG_OFFSET_MODE="TICK" TRG_OT="STOP" TRG_SETUP="10.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AAPL="10.0"/>
                </TRG_0>
              </OCO_STOP>
              <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="1.0" TRG_TIF="DAY">
                <OFFSET_PER_SYMBOL AAPL="1.0"/>
              </TRG_0>
              <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-1.0" TRG_TIF="DAY">
                <OFFSET_PER_SYMBOL AAPL="-1.0"/>
              </TRG_1>
              <_2>
                <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="2.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AAPL="2.0"/>
                </TRG_0>
                <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-2.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AAPL="-2.0"/>
                </TRG_1>
              </_2>
              <_3>
                <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="3.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AAPL="3.0"/>
                </TRG_0>
                <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-3.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AAPL="-3.0"/>
                </TRG_1>
              </_3>
            </TRADE>
          </ACT_TRD_CELL7>
          <ACT_TRD_CELL8 ROWSPANELWEIGHT="1.0" ROWWEIGHT0="1.0" ROWWEIGHT1="1.0" SELECTED_TYPE="CHART" SIDEBAR_IS_ACTIVE="true" SYMBOL=".AAPL200918C117.5" SYMBOL_GROUP="9" TRADE_BUTTONS_MIGRATED="true">
            <ACTIVETRADER VERTICAL="false" VISIBLE="false" WEIGHT="2.0"/>
            <BIG_BUTTONS VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <CHART CONFIGURATION="@v8@%0:com.devexperts.tos.thinkscript.data,1:java.awt,2:com.devexperts.toschart.control.subgraph,3:com.devexperts.toschart.elstudies,4:com.devexperts.toschart.script%owner{chartAggregationPeriods:ChartAggregationPeriodArray0,chartAggregationPeriods=@ChartAggregationPeriodArray0}#com.devexperts.toschart.core.ChartModel{encodedMixinsState=&quot;{\&quot;common\&quot;:{\&quot;DRAWING_SETS\&quot;:\&quot;{}\&quot;},\&quot;state_props\&quot;:{\&quot;state_type\&quot;:\&quot;REGULAR\&quot;},\&quot;monkey_bars_exp\&quot;:{\&quot;LikefolioMixin\&quot;:\&quot;{\\\&quot;paintingSettings\\\&quot;:{\\\&quot;neutralSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;positiveSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;negativeSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;sentimentSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true}},\\\&quot;shownDivisions\\\&quot;:[],\\\&quot;allDivisions\\\&quot;:[]}\&quot;},\&quot;monkey_bars\&quot;:{},\&quot;seasonality\&quot;:{},\&quot;regular\&quot;:{\&quot;DescriberMixin\&quot;:\&quot;{\\\&quot;visibility\\\&quot;:\\\&quot;HIDE_PANEL\\\&quot;,\\\&quot;studiesMode\\\&quot;:\\\&quot;HIDE_STUDIES\\\&quot;}\&quot;,\&quot;LikefolioMixin\&quot;:\&quot;{\\\&quot;paintingSettings\\\&quot;:{\\\&quot;neutralSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;positiveSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;negativeSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;sentimentSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true}},\\\&quot;shownDivisions\\\&quot;:[],\\\&quot;allDivisions\\\&quot;:[]}\&quot;}}&quot;,encodedPatternsModel=&quot;{\&quot;showPatterns\&quot;:true,\&quot;models\&quot;:[],\&quot;fibModels\&quot;:[]}&quot;,groupId=&quot;default&quot;,styleSettings{commonStyleSettings{colorSettings{backgroundColor=#%0.CustomColor(#%1.Color(0,0,0,255)),monkeyProfileTypeColors.defaultRowHeight=&lt;F,mpExpandedTypeColors.defaultRowHeight=&lt;F,volumeColor=#%0.CustomColor(#%1.Color(0,0,0,255))},expansion.right=115,fitOrdersToScreen=&lt;T,keepPriceZoom=&lt;T,leftAxisRegulator{maxValue=805926.78632479d,minValue=-33029.78632479d},manualAxisRegulator{maxValue=22.27605263d,minValue=-2.65526316d},previousRightExpansion=115,shortCuts{^(&quot;Time Zone&quot;,&lt;F),^(&quot;Show Expiration Friday &quot;,&lt;F),^(&quot;Keep Price Zoom&quot;,&lt;F),^(&quot;enableLeftAxis&quot;,&lt;F),!get:Boolean0(&quot;Chart mode&quot;),^(&quot;Fit expected price ranges&quot;,@Boolean0),^(&quot;emphasizeDigitMPExpanded&quot;,&lt;F),^(&quot;showWicksCandleTrend&quot;,&lt;F),^(&quot;highlightEarnings&quot;,&lt;F),^(&quot;synchronizeCrosshair&quot;,&lt;F),^(&quot;myToolsMode&quot;,&lt;F),^(&quot;seasonalityStyle&quot;,&lt;F),^(&quot;Show Price Subgraph&quot;,&lt;F),^(&quot;closePriceLevel&quot;,&lt;F),^(&quot;Color Volume As Symbol Ticks&quot;,&lt;F),^(&quot;highlightPhantomRBars&quot;,&lt;F),^(&quot;Cross type &quot;,&lt;F),^(&quot;Fit Studies to Screen&quot;,@Boolean0),^(&quot;Chart type &quot;,&lt;F),^(&quot;Fit Orders&quot;,&lt;F),^(&quot;Bubbles as Percentage&quot;,&lt;F),^(&quot;hideStatusString&quot;,&lt;F),^(&quot;Show Studies &quot;,&lt;F),^(&quot;showWicksHeikinAshi&quot;,&lt;F),^(&quot;Alerts&quot;,&lt;F),^(&quot;Chart scale&quot;,&lt;F),^(&quot;Fit High/Low&quot;,&lt;F),^(&quot;Orders&quot;,&lt;F),^(&quot;Use Log Scale &quot;,&lt;F),^(&quot;Fit Study Markers to Screen&quot;,@Boolean0),^(&quot;Fit Alerts&quot;,&lt;F),^(&quot;Fit patterns&quot;,&lt;F),^(&quot;Percentage View&quot;,&lt;F),^(&quot;Make Auto Zoom &quot;,&lt;F),^(&quot;Show Year Marking Line&quot;,&lt;F),^(&quot;Show Rollover Line&quot;,&lt;F),^(&quot;Show High/Low Bubbles &quot;,&lt;F),^(&quot;Snap mode&quot;,&lt;F),^(&quot;highlightStudies&quot;,&lt;F),^(&quot;Overlapped Volume&quot;,&lt;F),^(&quot;Show Symbol Logo&quot;,&lt;F),^(&quot;Show Last Price Bubble &quot;,&lt;F),^(&quot;emphasizeDigitMP&quot;,&lt;F),^(&quot;Show grid&quot;,@Boolean0),^(&quot;showWicksCandle&quot;,&lt;F),^(&quot;Show trades&quot;,&lt;F),^(&quot;highlightSeasons&quot;,&lt;F),^(&quot;Extend Order/Alert Line to Left&quot;,&lt;F)},showGrid=&lt;F,showTradeExecution=&lt;T,step=7.751937984496124d},forexStyleSettings.shortCuts.^(&quot;Show Volume Subgraph&quot;,&lt;F),futuresStyleSettings{highlightExtendedHours=&lt;T,shortCuts{^(&quot;adjustForContractChanges&quot;,&lt;F),^(&quot;Show Open Interest&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,&lt;F),^(&quot;showContractChangeEvents&quot;,&lt;F),^(&quot;futures_daily_close_price&quot;,&lt;F),^(&quot;Show Options&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,&lt;F),^(&quot;startAtMarketOpen&quot;,&lt;F)},tradingHoursOnly=&lt;T},optionsStyleSettings{shortCuts{^(&quot;Show Open Interest&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,&lt;F),^(&quot;Show Theo Price&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,&lt;F),^(&quot;startAtMarketOpen&quot;,&lt;F)},startAggregationAtMarketOpen=&lt;F},otherStyleSettings{shortCuts{^(&quot;Show Social Sentiment&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,@Boolean0),^(&quot;Show Options&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,&lt;F),^(&quot;Show Corporate Actions&quot;,&lt;F),^(&quot;Show CNBC Video&quot;,&lt;F),^(&quot;startAtMarketOpen&quot;,@Boolean0),^(&quot;adjustForDividends&quot;,&lt;F)},startAggregationAtMarketOpen=&lt;F,tradingHoursOnly=&lt;T},setsIdentifiers.styleSetName=&quot;DEF_X_STYLE&quot;},subgraphModels{!get(#%2.SubgraphId(&quot;Symbol&quot;)){height=469,storableIndicators{+(!%3.CompiledStudy.resolveStudy(#%4.ScriptEssence{body=&quot;input averageType = AverageType.SIMPLE;\ninput showMovingAvgLable =Yes;\ninput price = close;\ninput length1 = 10;\ninput length2 = 20;\ninput length3 = 50;\ninput length4 = 200;\ninput displace = 0;\ninput showAvg3 = yes;\n\ninput showAvg4 = yes;\n\ninput showBreakoutSignals = no;\n\n\n\n\n#def AvgExp = ExpAverage(price[-displace], length);\nplot Avg1 = MovingAverage(averageType, price[-displace], length1);\nplot Avg2 = MovingAverage(averageType, price[-displace], length2);\nplot Avg3 = MovingAverage(averageType, price[-displace], length3);\nplot Avg4 = MovingAverage(averageType, price[-displace], length4);\n\nAvg3.setHiding(!showAvg3);\nAvg4.setHiding(!showAvg4);\n\n\n#plot SMA ( Average(price[-displace], length);\nplot UpSignal = price crosses above Avg1;\nplot DownSignal = price crosses below Avg1;\n#Add Label\n\nAddLabel(showMovingAvgLable, \&quot;  \&quot;+ length1+ \&quot;MAvg\&quot; ,Avg1.TakeValueColor ());\nAddLabel(showMovingAvgLable,  astext(Avg1), if Avg1&lt; close then Color.LIGHT_GREEN else if Avg1&gt; close then color.light_red else Color.Light_GRAY);\n\n\nAddLabel(showMovingAvgLable, \&quot;  \&quot;+ length2+ \&quot;MAvg\&quot; ,Avg2.TakeValueColor ());\nAddLabel(showMovingAvgLable,  astext(Avg2), if Avg2&lt; close then Color.LIGHT_GREEN else if Avg2&gt; close then color.light_red else Color.Light_GRAY);\n\nAddLabel(showMovingAvgLable, \&quot;  \&quot;+ length3+ \&quot;MAvg\&quot; ,Avg3.TakeValueColor ());\nAddLabel(showMovingAvgLable,  astext(Avg3), if Avg3&lt; close then Color.LIGHT_GREEN else if Avg3&gt; close then color.light_red else Color.Light_GRAY);\n\n\nAddLabel(showMovingAvgLable, \&quot;  \&quot;+ length4+ \&quot;MAvg\&quot; ,Avg4.TakeValueColor ());\nAddLabel(showMovingAvgLable,  astext(Avg4), if Avg4&lt; close then Color.LIGHT_GREEN else if Avg4&gt; close then color.light_red else Color.Light_GRAY);\n\n\n# Avg1.TakeValueColor ()\n#AddLabel(showMovingAvgLable,  length1+ \&quot;MAvg \&quot; +astext(Avg1) ,Avg1.TakeValueColor ());\n#AddLabel(showMovingAvgLable, astext(Avg1), if Avg1&lt; close then Color.GREEN else if Avg1&gt; close then color.light_red else Color.Light_GRAY);\n\n\n\n#AddLabel(showMovingAvgLable,  length2+ \&quot;MAvg \&quot;+ astext(Avg2) ,Avg2.TakeValueColor ());\n#AddLabel(showMovingAvgLable,  astext(Avg2), if Avg2&lt; close then Color.GREEN else if Avg2&gt; close then color.light_red else Color.Light_GRAY);\n#AddLabel(showMovingAvgLable,  length3+ \&quot;MAvg \&quot; +astext(Avg3),Avg3.TakeValueColor ());\n#AddLabel(showMovingAvgLable, astext(Avg3), if Avg3&lt; close then Color.GREEN else if Avg3&gt; close then color.light_red else Color.Light_GRAY);\n#AddLabel(showMovingAvgLable,  length4+ \&quot;MAvg \&quot; +astext(Avg4),Avg4.TakeValueColor ());\n#AddLabel(showMovingAvgLable, astext(Avg4), if Avg4&lt; close then Color.GREEN else if Avg4&gt; close then color.light_red else Color.Light_GRAY);\ndef bub;\nif !IsNaN(close[-1])\nthen {\n\n    bub = no;#Double.NaN;\n    \n} else {\nbub = yes;\n    \n}\ndef bubb = if  BarNumber() == 20  then yes else no;\n\ninput Show_Mavg_Key=no;\n\n#AddChartBubble(bub, Avg1, \&quot;MAvg\&quot;+ length1+ \&quot;= \&quot; + astext(Avg1), Color.LIGHT_ORANGE, no);\nAddChartBubble(bub and Show_Mavg_Key, Avg1, \&quot;MAvg\&quot;+ length1+ \&quot;= \&quot; + astext(Avg1), Avg1.TakeValueColor (), yes);\nAddChartBubble(bub and Show_Mavg_Key, Avg2, \&quot;MAvg\&quot;+ length2+ \&quot;= \&quot; + astext(Avg2), Avg2.TakeValueColor (), yes);\nAddChartBubble(bub and Show_Mavg_Key, Avg3, \&quot;MAvg\&quot;+ length3+ \&quot;= \&quot; + astext(Avg3), Avg3.TakeValueColor (), yes);\nAddChartBubble(bub and Show_Mavg_Key, Avg4, \&quot;MAvg\&quot;+ length4+ \&quot;= \&quot; + astext(Avg4), Avg4.TakeValueColor (), yes);\n\n#Vwap\ninput vwapTimeFrame = {default DAY, WEEK, MONTH};\ninput numDevDn = -2.0;\ninput numDevUp = 2.0;\n\n\ndef cap = getAggregationPeriod();\ndef errorInAggregation =\n    vwapTimeFrame == vwapTimeFrame.DAY and cap &gt;= AggregationPeriod.WEEK or\n    vwapTimeFrame == vwapTimeFrame.WEEK and cap &gt;= AggregationPeriod.MONTH;\nassert(!errorInAggregation, \&quot;timeFrame should be not less than current chart aggregation period\&quot;);\n\ndef yyyyMmDd = getYyyyMmDd();\ndef periodIndx;\nswitch (vwapTimeFrame) {\ncase DAY:\n    periodIndx = yyyyMmDd;\ncase WEEK:\n    periodIndx = Floor((daysFromDate(first(yyyyMmDd)) + getDayOfWeek(first(yyyyMmDd))) / 7);\ncase MONTH:\n    periodIndx = roundDown(yyyyMmDd / 100, 0);\n}\ndef isPeriodRolled = compoundValue(1, periodIndx != periodIndx[1], yes);\n\ndef volumeSum;\ndef volumeVwapSum;\ndef volumeVwap2Sum;\n\nif (isPeriodRolled) {\n    volumeSum = volume;\n    volumeVwapSum = volume * vwap;\n    volumeVwap2Sum = volume * Sqr(vwap);\n} else {\n    volumeSum = compoundValue(1, volumeSum[1] + volume, volume);\n    volumeVwapSum = compoundValue(1, volumeVwapSum[1] + volume * vwap, volume * vwap);\n    volumeVwap2Sum = compoundValue(1, volumeVwap2Sum[1] + volume * Sqr(vwap), volume * Sqr(vwap));\n}\ndef VWprice = volumeVwapSum / volumeSum;\ndef deviation = Sqrt(Max(volumeVwap2Sum / volumeSum - Sqr(VWprice), 0));\n\nplot VWAP = VWprice;\nplot UpperBand = VWprice + numDevUp * deviation;\nplot LowerBand = VWprice + numDevDn * deviation;\n\nVWAP.setDefaultColor(getColor(0));\nUpperBand.setDefaultColor(getColor(0));\nLowerBand.setDefaultColor(getColor(0));\n\nUpperBand.SetStyle(Curve.MEDIUM_DASH);\nLowerBand.SetStyle(Curve.MEDIUM_DASH);\n\n\n\nUpperBand.hide();\nLowerBand.hide();\n\n#vwap\n\nAddLabel(yes, \&quot;VWAP= \&quot; + astext(VWAP), if VWAP&lt; close then Color.LIGHT_GREEN else if VWAP&gt; close then color.LIGHT_red else Color.GRAY);\n#AddLabel(yes, \&quot;VWAP= \&quot; + astext(VWAP), Color.White);\ndef vwDif= close- VWAP;\nAddLabel(yes, \&quot; \&quot;+astext(vwDif), if vwDif&gt; 0 then Color.LIGHT_GREEN else if vwDif&lt; 0 then color.LIGHT_red else Color.GRAY);\n\n#RSI\ninput overBoughtRsi = 70;\ninput overSoldRsi = 30;\ninput rsiLength = 14;\ninput rsiPrice = close;\ndef rsi_val = reference RSI(length = rsiLength, price = rsiPrice );\n####\n\n\n\nAddLabel(yes, \&quot;RSI = \&quot; + astext(rsi_val) , if rsi_val &gt; overBoughtRsi  then Color.RED else if rsi_val &lt; overSoldRsi then  Color.GREEN else Color.light_GRAY);\n\n\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\nAvg1.SetDefaultColor(color.white);\nAvg2.SetDefaultColor(color.cyan);\nAvg3.SetDefaultColor(color.light_red);\nAvg4.SetDefaultColor(color.pink);\n#avg3.SetStyle(Curve.MEDIUM_DASH);\n#avg4.SetStyle(Curve.MEDIUM_DASH);\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);\n&quot;,name=&quot;_686a0d47_2dc7_4466_91d6_64cf4907bd2a&quot;})),+(!%3.CompiledStudy.resolveStudy(#%4.ScriptEssence{body=&quot;# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2009-2020\n#\n\nplot theo = optionPrice();\ntheo.SetDefaultColor(GetColor(0));&quot;,name=&quot;TheoreticalOptionPrice&quot;}))}},!get(#%2.SubgraphId(&quot;Volume&quot;)){height=80,storableIndicators{+(!%3.CompiledStudy.resolveStudy(#%4.ScriptEssence{body=&quot;# Modified by Mahi\n# Second Mod by Ramon DV\n\ndeclare on_volume;\n#v2\n#Inputs\n\ninput ShowDayAvg = yes;\ninput AvgDayVolLength = 30;\ninput ShowTodayVolume = yes;\ninput ShowTodayVolumeProjection = yes;\ninput ShowPercentOfDayAvg = yes;\ninput UnusualVolumePercent = 200;\ninput ShowBarAvg = yes;\ninput AvgBarVolLength = 30;\ninput ShowCurrentBar = yes;\ninput ShowPercentOfBarAvg = yes;\ninput ShowSellVolumePercent = yes;\ninput ShowBuyVolumePercent = yes;\ninput AvgType = AverageType.SIMPLE;\n\ndef O = open;\ndef H = high;\ndef C = close;\ndef L = low;\ndef V = volume;\n\n#def buying =  V * (C - L) / (H - L);\n#def selling = V * (H - C) / (H - L);\n\ndef buying =   V * (H - O) / (H - L) ;\ndef selling =  V * (O - L) / (H - L) ;\n\ndef O_day = open(period = AggregationPeriod.DAY);\ndef H_day = high(period = AggregationPeriod.DAY);\ndef C_day = close(period = AggregationPeriod.DAY);\ndef L_day = low(period = AggregationPeriod.DAY);\ndef V_day = volume(period = AggregationPeriod.DAY);\n#def selling_day = V_day * (H_day - C_day) / (H_day - L_day);\n#def buying_day = V_day * (C_day - L_day) / (H_day - L_day);\ndef selling_day = V_day * (H_day - O_day) / (H_day - L_day);\ndef buying_day = V_day * (O_day - L_day) / (H_day - L_day);\n# Selling Volume pressure\n\nplot SellVol = selling;\nSellVol.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);\nSellVol.SetDefaultColor(Color.RED);\nSellVol.HideTitle();\nSellVol.HideBubble();\nSellVol.SetLineWeight(5);\n\n# Total Volume\n# Buying Volume pressure\n\nplot BuyVol = buying + selling; # plot in the background of selling volume\nBuyVol.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);\nBuyVol.SetDefaultColor(Color.DARK_GREEN);\nBuyVol.HideTitle();\nBuyVol.HideBubble();\nBuyVol.SetLineWeight(5);\n\n#Volume Data\n\ndef DayVol = volume(period = “DAY”);\ndef AvgDayVol = MovingAverage(AvgType, DayVol[1], AvgDayVolLength);\ndef percentOfDay = Round((DayVol / AvgDayVol) * 100, 0);\n\n\ndef AvgBarVol = MovingAverage(AvgType, volume[1], AvgBarVolLength);\ndef percentOfBar = Round((volume / AvgBarVol) * 100, 0);\ndef SellVolPercent = Round((selling / volume) * 100, 0);\ndef BuyVolPercent = 100 - SellVolPercent;\n\ndef SellVolPercent_day = Round((selling_day / V_day) * 100, 0);\ndef BuyVolPercent_day = 100 - SellVolPercent_day;\n\n# Labels\n\nAddLabel(ShowDayAvg, \&quot;Avg “ + AvgDayVolLength + “ Days: \&quot; + Round(AvgDayVol, 0), Color.LIGHT_GRAY);\n\nAddLabel(ShowTodayVolume, \&quot;Today: \&quot; + DayVol, (if percentOfDay &gt;= UnusualVolumePercent then Color.GREEN else if percentOfDay &gt;= 100 then Color.ORANGE else Color.LIGHT_GRAY));\n\nAddLabel(ShowPercentOfDayAvg, percentOfDay + \&quot;%\&quot;, (if percentOfDay &gt;= UnusualVolumePercent then Color.GREEN else if percentOfDay &gt;= 100 then Color.ORANGE else Color.WHITE) );\n\nAddLabel(ShowBarAvg, \&quot;Avg “ + AvgBarVolLength + ” Bars: \&quot; + Round(AvgBarVol, 0), Color.LIGHT_GRAY);\n\nAddLabel(ShowCurrentBar, \&quot;Cur Bar: \&quot; + volume, (if percentOfBar &gt;= UnusualVolumePercent then Color.GREEN else if percentOfBar &gt;= 100 then Color.ORANGE else Color.LIGHT_GRAY));\n\nAddLabel(ShowPercentOfBarAvg, percentOfBar + \&quot;%\&quot;, (if percentOfBar &gt;= UnusualVolumePercent then Color.GREEN else if percentOfBar &gt;= 100 then Color.ORANGE else Color.WHITE) );\n\n\nAddLabel(ShowSellVolumePercent and (SellVolPercent &gt; BuyVolPercent) , \&quot;Cur Bar Sell %: \&quot; + SellVolPercent, if SellVolPercent &gt; BuyVolPercent then Color.RED else Color.GRAY);\nAddLabel(ShowBuyVolumePercent and (SellVolPercent &lt;= BuyVolPercent), \&quot;Cur Bar Buy %: \&quot; + BuyVolPercent, if BuyVolPercent &gt; SellVolPercent then Color.GREEN else Color.GRAY);\n\n\n# PriceOpen.Hide();\ninput length = 50;\n\nplot Vol = volume;\nplot VolAvg = Average(volume, length);\n\nVol.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);\nVol.SetLineWeight(3);\nVol.DefineColor(\&quot;Up\&quot;, Color.UPTICK);\nVol.DefineColor(\&quot;Down\&quot;, Color.DOWNTICK);\nVol.AssignValueColor(if close &gt; close[1] then Vol.Color(\&quot;Up\&quot;) else if close &lt; close[1] then Vol.Color(\&quot;Down\&quot;) else GetColor(1));\nVolAvg.SetDefaultColor(GetColor(8));\n\n\n#########################################################\n\n#def rth = (RegularTradingEnd(GetYYYYMMDD()) - RegularTradingStart(GetYYYYMMDD())) / AggregationPeriod.HOUR;\ndef rth = (RegularTradingEnd(GetYYYYMMDD()) - RegularTradingStart(GetYYYYMMDD())) / AggregationPeriod.MIN;\ndef MarketNotClosed = GetTime() &lt;= RegularTradingEnd (GetYYYYMMDD());\n# def eod = ((  RegularTradingEnd (GetYYYYMMDD()) - GetTime() ) / AggregationPeriod.MIN);\ndef eod = if MarketNotClosed then ((  RegularTradingEnd (GetYYYYMMDD()) - GetTime() ) / AggregationPeriod.MIN) else ((  RegularTradingEnd (GetYYYYMMDD())  ) / AggregationPeriod.MIN);\n\ndef DayVol_Projetion = volume(period = “DAY”) * rth / (rth - eod);\ndef percentOfDayProjection = Round((DayVol_Projetion / AvgDayVol) * 100, 0);\nAddLabel(ShowBuyVolumePercent, \&quot;Day Buy %: \&quot; + BuyVolPercent_day, if BuyVolPercent_day &gt; SellVolPercent_day then Color.GREEN else Color.GRAY);\n\nAddLabel(ShowTodayVolumeProjection, \&quot;Est. Vol: \&quot; + Round(DayVol_Projetion, 0) , if DayVol_Projetion &gt; AvgDayVol * 1.5  then Color.GREEN else Color.GRAY);\n\nAddLabel(ShowTodayVolumeProjection,  percentOfDayProjection  + \&quot;%\&quot;, if DayVol_Projetion &gt; AvgDayVol * 1.5  then Color.GREEN else Color.GRAY);\n\ndef y = GetTime() / AggregationPeriod.MIN;\n#eod =2;\n#AddLabel(yes, \&quot;RTH duration (min): \&quot; + rth);\n#AddLabel(yes, \&quot;EOD duration (min): \&quot; + eod);\n#AddLabel(yes, \&quot;Market Not closed: \&quot; + y);\n\n#######&quot;,name=&quot;_5261aedd_9830_4f97_bb0c_d3f9282e8428&quot;})),+(!%3.CompiledStudy.resolveStudy(#%4.ScriptEssence{body=&quot;# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2008-2020\n#\n\ndeclare real_size;\ndeclare on_volume;\ndeclare hide_on_intraday;\n\nplot Data = open_interest();&quot;,name=&quot;OpenInterest&quot;}))}},^(#%2.SubgraphId(&quot;Subgraph1&quot;),#%2.SubgraphStorableModel{height=188,storableIndicators.+(!%3.CompiledStudy.resolveStudy(#%4.ScriptEssence{body=&quot;declare lower;\ninput aggregationPeriod1 = AggregationPeriod.THIRTY_MIN;\n\ninput useOpen =yes;\ndef price = if (useOpen) then   open(period = aggregationPeriod1) else close(period = aggregationPeriod1) ;\n\ninput over_bought = 40.0;\ninput over_sold = -40.0;\ninput percentDLength = 3;\ninput percentKLength = 5;\n\ndef min_low = Lowest(low (period = aggregationPeriod1), percentKLength);\ndef max_high = Highest(high (period = aggregationPeriod1), percentKLength);\ndef rel_diff = price - (max_high + min_low) / 2;\ndef diff = max_high - min_low;\n\ndef avgrel = ExpAverage(ExpAverage(rel_diff, percentDLength), percentDLength);\ndef avgdiff = ExpAverage(ExpAverage(diff, percentDLength), percentDLength);\n\nplot SMI = if avgdiff != 0 then avgrel / (avgdiff / 2) * 100 else 0;\nSMI.SetDefaultColor(GetColor(1));\n\nplot AvgSMI = ExpAverage(SMI, percentDLength);\nAvgSMI.SetDefaultColor(GetColor(5));\n\nplot overbought = over_bought;\noverbought.SetDefaultColor(GetColor(5));\n\nplot oversold = over_sold;\noversold.SetDefaultColor(GetColor(5));\n\n\n\n#RSI\ninput overBoughtRsi = 70;\ninput overSoldRsi = 30;\ninput rsiLength = 14;\ninput  rsiPrice = close;\nplot rsi_val = reference RSI(length = rsiLength, price = rsiPrice );\n####\n\n\n\nAddLabel(yes, \&quot;RSI = \&quot; + rsi_val , if rsi_val &gt; overBoughtRsi  then Color.RED else if rsi_val &lt; overSoldRsi then  Color.GREEN else Color.GRAY);\n\n\n\n#trend reversal\ndef y = rsi_val ;\ninput riReversLength = 2;\ninput lookBack = 2;\n\n\ndef rsi_expAvg = ExpAverage(rsi_val, riReversLength);\n\n#trend reversal\ndef overBoughtReversal = if ((rsi_expAvg &gt; overBoughtRsi)within 2 bar) and  (rsi_expAvg crosses above rsi_val) then price else 0;# if (rsi_expAvg &gt; OverBought and  rsi_expAvg crosses above rsi_val  within 3 bar ) then 40 else 0;\ndef oversoldRevesal = if ((rsi_expAvg &lt; overSoldRsi)within 2 bar) and  (rsi_expAvg crosses below rsi_val within 2 bar) then price else 0;\n\n##############\n########!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n#vwap vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\n#input numDevUp = 2.0;\ninput vwapTimeFrame = {default DAY, WEEK, MONTH};\n\ndef cap = GetAggregationPeriod();\ndef errorInAggregation =\n    vwapTimeFrame == vwapTimeFrame.DAY and cap &gt;= AggregationPeriod.WEEK or\n    vwapTimeFrame == vwapTimeFrame.WEEK and cap &gt;= AggregationPeriod.MONTH;\nAssert(!errorInAggregation, \&quot;timeFrame should be not less than current chart aggregation period\&quot;);\n\ndef yyyyMmDd = GetYYYYMMDD();\ndef periodIndx;\nswitch (vwapTimeFrame) {\ncase DAY:\n    periodIndx = yyyyMmDd;\ncase WEEK:\n    periodIndx = Floor((DaysFromDate(First(yyyyMmDd)) + GetDayOfWeek(First(yyyyMmDd))) / 7);\ncase MONTH:\n    periodIndx = RoundDown(yyyyMmDd / 100, 0);\n}\ndef isPeriodRolled = CompoundValue(1, periodIndx != periodIndx[1], yes);\n\ndef volumeSum;\ndef volumeVwapSum;\ndef volumeVwap2Sum;\n\nif (isPeriodRolled) {\n    volumeSum = volume;\n    volumeVwapSum = volume * vwap;\n    volumeVwap2Sum = volume * Sqr(vwap);\n} else {\n    volumeSum = CompoundValue(1, volumeSum[1] + volume, volume);\n    volumeVwapSum = CompoundValue(1, volumeVwapSum[1] + volume * vwap, volume * vwap);\n    volumeVwap2Sum = CompoundValue(1, volumeVwap2Sum[1] + volume * Sqr(vwap), volume * Sqr(vwap));\n}\ndef vWapprice = volumeVwapSum / volumeSum;\ndef deviation = Sqrt(Max(volumeVwap2Sum / volumeSum - Sqr(vWapprice), 0));\n\ndef VWAP = vWapprice;\ninput numDevUp = 2.0;\ninput numDevDn = -2.0;\n\ndef vwap_UpperBand = price + numDevUp * deviation;\ndef vwap_LowerBand = price + numDevDn * deviation;\n\ninput vwapCondition = no;\n#input vp=close;\ndef conVwapBuy = if  vwapCondition then  close &gt;= VWAP else 1;\n\n#####^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n#MACD\n\ninput fastLength = 12;\ninput slowLength = 26;\ninput MACDLength = 9;\ninput displace = 0;\ndef fastAvg = Sum(volume * price, fastLength) / Sum(volume, fastLength);\ndef slowAvg = Sum(volume * price, slowLength) / Sum(volume, slowLength);\ndef Value = fastAvg - slowAvg;\ndef Avg = ExpAverage(Value, MACDLength);\ndef MACD_Diff  = Value - Avg;\n#def ZeroLine = 0;\n\ninput def_cond = no;\ndef MACD_cond_logic = if (def_cond) then MACD_Diff &lt;= 0 else yes;\n\n\n#MACD Pivot reversal\n#input FilterLength=3;\n######################\n#def MACDV_Diff_expAvg = ExpAverage(MACD_Diff, FilterLength);\n#plot oversoldRevesalMACDV =if ((Diff_MACDV &lt; MacdZeroLine)within lookBack bar) and  ( Diff_MACDV crosses above   MACDV_Diff_expAvg within lookBack bar)and Diff_MACDV &gt; Diff_MACDV[1] then 1 else 0;# if (MACDV_Diff_expAvg &gt; OverBought and  MACDV_Diff_expAvg crosses above rsi_val  within 3 bar ) then 40 else 0;\n#plot overBoughtReversalMACDV = if ((Diff_MACDV &gt; MacdZeroLine)within lookBack bar) and  (MACDV_Diff_expAvg crosses above  Diff_MACDV  within lookBack bar)  and Diff_MACDV &lt; Diff_MACDV[1] and Diff_MACDV&gt;0 then 1 else 0;\n\n\n#trend Pivot reversal\ndef twoBarPivotMACD_Buy =  MACD_Diff &gt; MACD_Diff[1] and MACD_Diff[1] &gt; MACD_Diff[2] and MACD_Diff[2] &lt; MACD_Diff[3] and MACD_Diff[3] &lt; MACD_Diff [4];\ndef twoBarPivotMACD_Sell = MACD_Diff &lt; MACD_Diff[1] and MACD_Diff[1] &lt; MACD_Diff[2] and MACD_Diff[2] &gt; MACD_Diff[3] and MACD_Diff[3] &gt; MACD_Diff [4];\n###################\n\n\ndef uptrend = if price &gt; price[1] and price[1] &gt;= price[2] then 1 else 0;\n\n#####################################-----------------\n\ninput aggPeriod = AggregationPeriod.DAY;\ninput AvgType = AverageType.SIMPLE;\ninput short_len = 10;\ninput mid_len = 21;\ninput long_len = 50;\ninput moving_average = no;\ndef AVG1 = MovingAverage(AvgType, close(period = aggPeriod), short_len);\ndef AVG2 = MovingAverage(AvgType, close(period = aggPeriod), mid_len);\ndef AVG3 = MovingAverage(AvgType, close(period = aggPeriod), long_len);\n#def EMA_condition = if moving_average then (close &gt; AVG1 or close &gt; AVG2 or  close &gt; AVG3) else yes;\ndef EMA_condition = if moving_average then (close &gt; AVG1 ) else yes;\n\nAddLabel( yes, Concat(short_len + \&quot;MA = \&quot;, AVG1), Color.CYAN);\nAddLabel( yes, Concat(mid_len + \&quot;MA = \&quot;, AVG2), Color.LIGHT_ORANGE);\nAddLabel( yes, Concat(long_len + \&quot;MA = \&quot;, AVG3), Color.PINK);\n\n\n\n##############################################\n#@@@@\n#ADX\ninput adxLength = 14;\ninput adxAverageType = AverageType.WILDERS;\n\ndef ADX = DMI(adxLength, adxAverageType).ADX;\n#ADX.setDefaultColor(GetColor(5));\n\ninput length = 7;\ninput signalLength = 10;\ninput averageType = AverageType.WEIGHTED;\ninput averageTypeSignal = AverageType.EXPONENTIAL;\n\n\n\ndef Ref = ADX;# reference OnBalanceVolume();\nplot RefMoving = MovingAverage(averageType, Ref, length);\nplot Signal = MovingAverage(averageTypeSignal, RefMoving, signalLength);\nplot dif =  Ref - RefMoving;\n#Ref.SetDefaultColor(GetColor(4));\nRefMoving.SetDefaultColor(GetColor(8));\nSignal.SetDefaultColor(GetColor(2));\ndif.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);\ndif.SetLineWeight(3);\n\n\ndif.DefineColor(\&quot;Positive and Up\&quot;, Color.CYAN);\ndif.DefineColor(\&quot;Positive and Down\&quot;, Color.BLUE);\ndif.DefineColor(\&quot;Negative and Down\&quot;, Color.RED);\ndif.DefineColor(\&quot;Negative and Up\&quot;, Color.YELLOW);\ndif.AssignValueColor(if dif &gt;= 0 then if dif &gt; dif[1] then dif.Color(\&quot;Positive and Up\&quot;) else dif.Color(\&quot;Positive and Down\&quot;) else if dif &lt; dif[1] then dif.Color(\&quot;Negative and Down\&quot;) else dif.Color(\&quot;Negative and Up\&quot;));\n\n\n#@@@@@\n###################################\ndef SMI_ADX_Buy_Signal;\nif GetAggregationPeriod() &lt; AggregationPeriod.FIFTEEN_MIN\nthen\n{\n    SMI_ADX_Buy_Signal = if ( (SMI crosses above AvgSMI  within lookBack bar) and (Ref crosses above RefMoving within lookBack bar) and dif &gt;= 0 and (rsi_val &gt; overSoldRsi and rsi_val &lt; 60 ) and MACD_cond_logic and  EMA_condition) and Ref &gt; Ref[2] then 1 else 0;\n\n}\nelse {\n    SMI_ADX_Buy_Signal = 0;\n}\nplot buy6 = SMI_ADX_Buy_Signal;\n\n\ndef SMI_Buy_Signal = if ( (SMI crosses above overbought  within lookBack bar) and SMI &gt;  AvgSMI and (rsi_val &gt; overSoldRsi and rsi_val &lt; overBoughtRsi + 10 ) and MACD_cond_logic and  EMA_condition) and  (uptrend) then 1 else 0;\nplot buy2 = SMI_Buy_Signal;\n\n#def  buySvix_Signal = if ( MACD_cond_logic  and  EMA_condition and  oversoldRevesal  and buySvix &lt; Zeroline - 10 ) then 1 else 0;\n#plot buy3 = buySvix_Signal;\n\n\n\n\n\n\ndef SMI_Sell_Signal = if ( (SMI crosses below AvgSMI within lookBack bar) and (overBoughtReversal)) then 1 else 0;\n#def sellSignal2 = if ((rsi_val  &gt; overBoughtRsi within 3 bar) and (smi crosses below AvgSMI within 3 bar)) then 1 else 0;\n\n\nplot sell2 = SMI_Sell_Signal;\n\n#######\n\n#def FVE_buySignal = conVwapBuy and oversoldRevesal and pFVE_Bull  and MACD_cond_logic ;# and Diff &gt;= 0;\n#def sig_buy = pFVE_Bull and Diff &gt;= 0;\n#plot buy4 = FVE_buySignal ;\n\n\n#def FVE_sellSignal = overBoughtReversal and pFVE_Bear ;\n#plot sell4 = FVE_sellSignal;\nplot buy5 = twoBarPivotMACD_Buy and oversoldRevesal;\nplot sell5 = twoBarPivotMACD_Sell and overBoughtReversal;\n\n####\n#def buySignal2 = if (oversoldRevesal  and buythedip2 &lt; Zeroline ) then 1 else 0;\n\n#def buySignal3 = if ( oversoldRevesal  and buythedip3 &lt; Zeroline - 10 ) then 1 else 0;\n#plot buy3 = buySignal3;\n\nAddChartBubble(buy2 == 1, buy2, \&quot;B2SMI= \&quot; +  low[1] + \&quot; rsi \&quot; + rsi_val + \&quot; w \&quot; + VWAP[1], Color.LIGHT_ORANGE, no);\n#AddChartBubble(buy3 == 1, buy3,  \&quot;B3Svix= \&quot; + price + \&quot; rsi \&quot; + rsi_val, Color.LIGHT_GRAY, no);\n#AddChartBubble(buy4 == 1, buy4,  \&quot;B4FVE= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.YELLOW, no);\nAddChartBubble(buy5 == 1, buy5,  \&quot;B5Macd= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.CYAN, no);\nAddChartBubble(buy6 == 1, buy6,  \&quot;B5AdxSMI= \&quot; + price + \&quot; \\nrsi \&quot; + rsi_val[lookBack] + \&quot; \\nAdx \&quot; + Ref[lookBack], Color.GREEN, no);\n\n#AddChartBubble(sell1 == 1, sell1, \&quot;S1STR= \&quot; + price + \&quot; rsi \&quot; + rsi_val, Color.LIGHT_RED, no);#Buy the Dip\n\nAddChartBubble(sell2 == 1, sell2, \&quot;S2SMI= \&quot; + price + \&quot; rsi \&quot; + rsi_val, Color.PINK, no);#Buy the Dip\n#AddChartBubble(sell4 == 1, sell4, \&quot;S4FVE= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.VIOLET, no);#Buy the Dip\nAddChartBubble(sell5 == 1, sell5, \&quot;S5Macd= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.BLUE, no);#Buy the Dip\n#AddChartBubble(oversoldRevesal , close, rsi_val, Color.blue, no);#Buy the Dip\nplot scan = buy2;&quot;,name=&quot;_895e3e9a_2bdf_4c37_bc8e_713002a58848&quot;}){inputsMap:TreeMap0{^(&quot;aggregationPeriod1&quot;,&quot;WEEK&quot;),^(&quot;rsiPrice&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap0,plots{4:{hiding=&lt;T},5:{hiding=&lt;T},6:{hiding=&lt;T},7:{hiding=&lt;T}}})}),^(#%2.SubgraphId(&quot;Subgraph7&quot;),#%2.SubgraphStorableModel{height=188,storableIndicators.+(!%3.CompiledStudy.resolveStudy(#%4.ScriptEssence{body=&quot;declare lower;\n\ninput price = close;\n\ninput over_bought = 40.0;\ninput over_sold = -40.0;\ninput percentDLength = 3;\ninput percentKLength = 5;\n\ndef min_low = Lowest(low, percentKLength);\ndef max_high = Highest(high, percentKLength);\ndef rel_diff = price - (max_high + min_low) / 2;\ndef diff = max_high - min_low;\n\ndef avgrel = ExpAverage(ExpAverage(rel_diff, percentDLength), percentDLength);\ndef avgdiff = ExpAverage(ExpAverage(diff, percentDLength), percentDLength);\n\nplot SMI = if avgdiff != 0 then avgrel / (avgdiff / 2) * 100 else 0;\nSMI.SetDefaultColor(GetColor(1));\n\nplot AvgSMI = ExpAverage(SMI, percentDLength);\nAvgSMI.SetDefaultColor(GetColor(5));\n\nplot overbought = over_bought;\noverbought.SetDefaultColor(GetColor(5));\n\nplot oversold = over_sold;\noversold.SetDefaultColor(GetColor(5));\n\n\n\n#RSI\ninput overBoughtRsi = 70;\ninput overSoldRsi = 30;\ninput rsiLength = 14;\ninput rsiPrice = close;\ndef rsi_val = reference RSI(length = rsiLength, price = rsiPrice );\n####\n\n\n\nAddLabel(yes, \&quot;RSI = \&quot; + rsi_val , if rsi_val &gt; overBoughtRsi  then Color.RED else if rsi_val &lt; overSoldRsi then  Color.GREEN else Color.GRAY);\n\n\n\n#trend reversal\ndef y = rsi_val ;\ninput riReversLength = 2;\ninput lookBack = 2;\n\n\ndef rsi_expAvg = ExpAverage(rsi_val, riReversLength);\n\n#trend reversal\ndef overBoughtReversal = if ((rsi_expAvg &gt; overBoughtRsi)within 2 bar) and  (rsi_expAvg crosses above rsi_val) then price else 0;# if (rsi_expAvg &gt; OverBought and  rsi_expAvg crosses above rsi_val  within 3 bar ) then 40 else 0;\ndef oversoldRevesal = if ((rsi_expAvg &lt; overSoldRsi)within 2 bar) and  (rsi_expAvg crosses below rsi_val within 2 bar) then price else 0;\n\n##############\n########!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n#vwap vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\n#input numDevUp = 2.0;\ninput vwapTimeFrame = {default DAY, WEEK, MONTH};\n\ndef cap = GetAggregationPeriod();\ndef errorInAggregation =\n    vwapTimeFrame == vwapTimeFrame.DAY and cap &gt;= AggregationPeriod.WEEK or\n    vwapTimeFrame == vwapTimeFrame.WEEK and cap &gt;= AggregationPeriod.MONTH;\nAssert(!errorInAggregation, \&quot;timeFrame should be not less than current chart aggregation period\&quot;);\n\ndef yyyyMmDd = GetYYYYMMDD();\ndef periodIndx;\nswitch (vwapTimeFrame) {\ncase DAY:\n    periodIndx = yyyyMmDd;\ncase WEEK:\n    periodIndx = Floor((DaysFromDate(First(yyyyMmDd)) + GetDayOfWeek(First(yyyyMmDd))) / 7);\ncase MONTH:\n    periodIndx = RoundDown(yyyyMmDd / 100, 0);\n}\ndef isPeriodRolled = CompoundValue(1, periodIndx != periodIndx[1], yes);\n\ndef volumeSum;\ndef volumeVwapSum;\ndef volumeVwap2Sum;\n\nif (isPeriodRolled) {\n    volumeSum = volume;\n    volumeVwapSum = volume * vwap;\n    volumeVwap2Sum = volume * Sqr(vwap);\n} else {\n    volumeSum = CompoundValue(1, volumeSum[1] + volume, volume);\n    volumeVwapSum = CompoundValue(1, volumeVwapSum[1] + volume * vwap, volume * vwap);\n    volumeVwap2Sum = CompoundValue(1, volumeVwap2Sum[1] + volume * Sqr(vwap), volume * Sqr(vwap));\n}\ndef vWapprice = volumeVwapSum / volumeSum;\ndef deviation = Sqrt(Max(volumeVwap2Sum / volumeSum - Sqr(vWapprice), 0));\n\ndef VWAP = vWapprice;\ninput numDevUp = 2.0;\ninput numDevDn = -2.0;\n\ndef vwap_UpperBand = price + numDevUp * deviation;\ndef vwap_LowerBand = price + numDevDn * deviation;\n\ninput vwapCondition = no;\n#input vp=close;\ndef conVwapBuy = if  vwapCondition then  close &gt;= VWAP else 1;\n\n#####^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n#MACD\n\ninput fastLength = 12;\ninput slowLength = 26;\ninput MACDLength = 9;\ninput displace = 0;\ndef fastAvg = Sum(volume * price, fastLength) / Sum(volume, fastLength);\ndef slowAvg = Sum(volume * price, slowLength) / Sum(volume, slowLength);\ndef Value = fastAvg - slowAvg;\ndef Avg = ExpAverage(Value, MACDLength);\ndef MACD_Diff  = Value - Avg;\n#def ZeroLine = 0;\n\ninput def_cond = no;\ndef MACD_cond_logic = if (def_cond) then MACD_Diff &lt;= 0 else yes;\n\n\n#MACD Pivot reversal\n#input FilterLength=3;\n######################\n#def MACDV_Diff_expAvg = ExpAverage(MACD_Diff, FilterLength);\n#plot oversoldRevesalMACDV =if ((Diff_MACDV &lt; MacdZeroLine)within lookBack bar) and  ( Diff_MACDV crosses above   MACDV_Diff_expAvg within lookBack bar)and Diff_MACDV &gt; Diff_MACDV[1] then 1 else 0;# if (MACDV_Diff_expAvg &gt; OverBought and  MACDV_Diff_expAvg crosses above rsi_val  within 3 bar ) then 40 else 0;\n#plot overBoughtReversalMACDV = if ((Diff_MACDV &gt; MacdZeroLine)within lookBack bar) and  (MACDV_Diff_expAvg crosses above  Diff_MACDV  within lookBack bar)  and Diff_MACDV &lt; Diff_MACDV[1] and Diff_MACDV&gt;0 then 1 else 0;\n\n\n#trend Pivot reversal\ndef twoBarPivotMACD_Buy =  MACD_Diff &gt; MACD_Diff[1] and MACD_Diff[1] &gt; MACD_Diff[2] and MACD_Diff[2] &lt; MACD_Diff[3] and MACD_Diff[3] &lt; MACD_Diff [4];\ndef twoBarPivotMACD_Sell = MACD_Diff &lt; MACD_Diff[1] and MACD_Diff[1] &lt; MACD_Diff[2] and MACD_Diff[2] &gt; MACD_Diff[3] and MACD_Diff[3] &gt; MACD_Diff [4];\n###################\n\n\ndef uptrend = if price &gt; price[1] and price[1] &gt;= price[2] then 1 else 0;\n\n#####################################-----------------\n\ninput aggPeriod = AggregationPeriod.DAY;\ninput AvgType = AverageType.SIMPLE;\ninput short_len = 10;\ninput mid_len = 21;\ninput long_len = 50;\ninput moving_average = no;\ndef AVG1 = MovingAverage(AvgType, close(period = aggPeriod), short_len);\ndef AVG2 = MovingAverage(AvgType, close(period = aggPeriod), mid_len);\ndef AVG3 = MovingAverage(AvgType, close(period = aggPeriod), long_len);\n#def EMA_condition = if moving_average then (close &gt; AVG1 or close &gt; AVG2 or  close &gt; AVG3) else yes;\ndef EMA_condition = if moving_average then (close &gt; AVG1 ) else yes;\n\nAddLabel( yes, Concat(short_len + \&quot;MA = \&quot;, AVG1), Color.CYAN);\nAddLabel( yes, Concat(mid_len + \&quot;MA = \&quot;, AVG2), Color.LIGHT_ORANGE);\nAddLabel( yes, Concat(long_len + \&quot;MA = \&quot;, AVG3), Color.PINK);\n\n\n\n##############################################\n#@@@@\n#ADX\ninput adxLength = 14;\ninput adxAverageType = AverageType.WILDERS;\n\ndef ADX = DMI(adxLength, adxAverageType).ADX;\n#ADX.setDefaultColor(GetColor(5));\n\ninput length = 7;\ninput signalLength = 10;\ninput averageType = AverageType.WEIGHTED;\ninput averageTypeSignal = AverageType.EXPONENTIAL;\n\n\n\ndef Ref = ADX;# reference OnBalanceVolume();\nplot RefMoving = MovingAverage(averageType, Ref, length);\nplot Signal = MovingAverage(averageTypeSignal, RefMoving, signalLength);\nplot dif =  Ref - RefMoving;\n#Ref.SetDefaultColor(GetColor(4));\nRefMoving.SetDefaultColor(GetColor(8));\nSignal.SetDefaultColor(GetColor(2));\ndif.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);\ndif.SetLineWeight(3);\n\n\ndif.DefineColor(\&quot;Positive and Up\&quot;, Color.CYAN);\ndif.DefineColor(\&quot;Positive and Down\&quot;, Color.BLUE);\ndif.DefineColor(\&quot;Negative and Down\&quot;, Color.RED);\ndif.DefineColor(\&quot;Negative and Up\&quot;, Color.YELLOW);\ndif.AssignValueColor(if dif &gt;= 0 then if dif &gt; dif[1] then dif.Color(\&quot;Positive and Up\&quot;) else dif.Color(\&quot;Positive and Down\&quot;) else if dif &lt; dif[1] then dif.Color(\&quot;Negative and Down\&quot;) else dif.Color(\&quot;Negative and Up\&quot;));\n\n\n#@@@@@\n###################################\ndef SMI_ADX_Buy_Signal;\nif GetAggregationPeriod() &lt; AggregationPeriod.FIFTEEN_MIN\nthen\n{\n    SMI_ADX_Buy_Signal = if ( (SMI crosses above AvgSMI  within lookBack bar) and (Ref crosses above RefMoving within lookBack bar) and dif &gt;= 0 and (rsi_val &gt; overSoldRsi and rsi_val &lt; 60 ) and MACD_cond_logic and  EMA_condition) and Ref &gt; Ref[2] then 1 else 0;\n\n}\nelse {\n    SMI_ADX_Buy_Signal = 0;\n}\nplot buy6 = SMI_ADX_Buy_Signal;\n\n\ndef SMI_Buy_Signal = if ( (AvgSMI crosses above overbought  within lookBack bar) and SMI &gt;  AvgSMI and (rsi_val &gt; overSoldRsi and rsi_val &lt; overBoughtRsi + 10 ) and MACD_cond_logic and  EMA_condition) and (close[1] &gt;= VWAP[1] and close &gt;= vwap_UpperBand[1]) and (uptrend) then 1 else 0;\nplot buy2 = SMI_Buy_Signal;\n\n#def  buySvix_Signal = if ( MACD_cond_logic  and  EMA_condition and  oversoldRevesal  and buySvix &lt; Zeroline - 10 ) then 1 else 0;\n#plot buy3 = buySvix_Signal;\n\n\n\n\n\n\ndef SMI_Sell_Signal = if ( (SMI crosses below AvgSMI within lookBack bar) and (overBoughtReversal)) then 1 else 0;\n#def sellSignal2 = if ((rsi_val  &gt; overBoughtRsi within 3 bar) and (smi crosses below AvgSMI within 3 bar)) then 1 else 0;\n\n\nplot sell2 = SMI_Sell_Signal;\n\n#######\n\n#def FVE_buySignal = conVwapBuy and oversoldRevesal and pFVE_Bull  and MACD_cond_logic ;# and Diff &gt;= 0;\n#def sig_buy = pFVE_Bull and Diff &gt;= 0;\n#plot buy4 = FVE_buySignal ;\n\n\n#def FVE_sellSignal = overBoughtReversal and pFVE_Bear ;\n#plot sell4 = FVE_sellSignal;\nplot buy5 = twoBarPivotMACD_Buy and oversoldRevesal;\nplot sell5 = twoBarPivotMACD_Sell and overBoughtReversal;\n\n####\n#def buySignal2 = if (oversoldRevesal  and buythedip2 &lt; Zeroline ) then 1 else 0;\n\n#def buySignal3 = if ( oversoldRevesal  and buythedip3 &lt; Zeroline - 10 ) then 1 else 0;\n#plot buy3 = buySignal3;\n\nAddChartBubble(buy2 == 1, buy2, \&quot;B2SMI= \&quot; +  low[1] + \&quot; rsi \&quot; + rsi_val + \&quot; w \&quot; + VWAP[1], Color.LIGHT_ORANGE, no);\n#AddChartBubble(buy3 == 1, buy3,  \&quot;B3Svix= \&quot; + price + \&quot; rsi \&quot; + rsi_val, Color.LIGHT_GRAY, no);\n#AddChartBubble(buy4 == 1, buy4,  \&quot;B4FVE= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.YELLOW, no);\nAddChartBubble(buy5 == 1, buy5,  \&quot;B5Macd= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.CYAN, no);\nAddChartBubble(buy6 == 1, buy6,  \&quot;B5AdxSMI= \&quot; + price + \&quot; \\nrsi \&quot; + rsi_val[lookBack] + \&quot; \\nAdx \&quot; + Ref[lookBack], Color.GREEN, no);\n\n#AddChartBubble(sell1 == 1, sell1, \&quot;S1STR= \&quot; + price + \&quot; rsi \&quot; + rsi_val, Color.LIGHT_RED, no);#Buy the Dip\n\nAddChartBubble(sell2 == 1, sell2, \&quot;S2SMI= \&quot; + price + \&quot; rsi \&quot; + rsi_val, Color.PINK, no);#Buy the Dip\n#AddChartBubble(sell4 == 1, sell4, \&quot;S4FVE= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.VIOLET, no);#Buy the Dip\nAddChartBubble(sell5 == 1, sell5, \&quot;S5Macd= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.BLUE, no);#Buy the Dip\n#AddChartBubble(oversoldRevesal , close, rsi_val, Color.blue, no);#Buy the Dip\nplot scan = buy2;&quot;,name=&quot;_d344cec2_79a9_43f5_8e27_7e658f475446&quot;}))})}}" SYMBOL=".AAPL200918C117.5" SYMBOL_GROUP="9" VERTICAL="false" VISIBLE="true" WEIGHT="1.0"/>
            <CHART_2 VERTICAL="false" VISIBLE="false" WEIGHT="3.0"/>
            <CHART_3 VERTICAL="false" VISIBLE="false" WEIGHT="3.0"/>
            <DASHBOARD VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <LEVEL_II VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <LIVE_NEWS VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <PHASE_SCORES VERTICAL="false" VISIBLE="false" WEIGHT="2.0"/>
            <TIME_SALES VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <TRADE CONFIGURATION_NAME="SINGLE" ORDER_RULES_SET="OPTION" ORDER_TYPE="LIMIT" OS_AUTO="false" OS_EXPANDED="false" OS_TIF="DAY" QTY="4.0" QTY_STEP="1.0" TEMPLATE="SINGLE" TRADE_BUTTONS="BUY_MKT;SELL_MKT;MULTI_CANCEL;REVERSE;FLAT;SECOND_LINE;QUANTITY;AUTO_SEND;ORDER_SETUP" VISIBLE="false">
              <OCO_STOP>
                <TRG_0 TRG_ENBL="true" TRG_LINK="ASK_BID" TRG_OFFSET_MODE="TICK" TRG_OT="STOP" TRG_SETUP="10.0" TRG_TIF="DAY"/>
              </OCO_STOP>
              <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="1.0" TRG_TIF="DAY"/>
              <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-1.0" TRG_TIF="DAY"/>
              <_2>
                <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="2.0" TRG_TIF="DAY"/>
                <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-2.0" TRG_TIF="DAY"/>
              </_2>
              <_3>
                <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="3.0" TRG_TIF="DAY"/>
                <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-3.0" TRG_TIF="DAY"/>
              </_3>
            </TRADE>
          </ACT_TRD_CELL8>
          <GROUPING_POS_STMT_SIZE_MODEL COMMON_COLUMN_RATIOS="0.3333333333333333;0.3333333333333333;0.3333333333333333" SECTION_RATIOS="0.15151515151515152;0.5252525252525253;0.32323232323232326">
            <MIDDLE_COLUMN_RATIOS>
              <ACCEPTOR_AAD6FAA6418DDE8FA0EFFC532C01A6B3001F63CF10B07158E0BD8955FE0C7178 RATIOS="0.15730337078651685;0.16853932584269662;0.2247191011235955;0.2247191011235955;0.2247191011235955"/>
            </MIDDLE_COLUMN_RATIOS>
          </GROUPING_POS_STMT_SIZE_MODEL>
          <MODELNODE0 COUNT="3" ROWLAYOUT="false" TYPE="SPLIT" WEIGHT="0.0">
            <MODELNODE0 COUNT="3" ROWLAYOUT="true" TYPE="SPLIT" WEIGHT="0.3333333333333333">
              <MODELNODE0 COMPOSITENAME="ACT_TRD_CELL0" NAME="0" TYPE="LEAF" WEIGHT="0.3333333333333333"/>
              <MODELNODE1 COMPOSITENAME="ACT_TRD_CELL1" NAME="1" TYPE="LEAF" WEIGHT="0.3333333333333333"/>
              <MODELNODE2 COMPOSITENAME="ACT_TRD_CELL2" NAME="2" TYPE="LEAF" WEIGHT="0.3333333333333333"/>
            </MODELNODE0>
            <MODELNODE1 COUNT="3" ROWLAYOUT="true" TYPE="SPLIT" WEIGHT="0.3333333333333333">
              <MODELNODE0 COMPOSITENAME="ACT_TRD_CELL3" NAME="3" TYPE="LEAF" WEIGHT="0.3333333333333333"/>
              <MODELNODE1 COMPOSITENAME="ACT_TRD_CELL4" NAME="4" TYPE="LEAF" WEIGHT="0.3333333333333333"/>
              <MODELNODE2 NAME="5" TYPE="LEAF" WEIGHT="0.3333333333333333"/>
            </MODELNODE1>
            <MODELNODE2 COUNT="3" ROWLAYOUT="true" TYPE="SPLIT" WEIGHT="0.3333333333333333">
              <MODELNODE0 COMPOSITENAME="ACT_TRD_CELL6" NAME="6" TYPE="LEAF" WEIGHT="0.3333333333333333"/>
              <MODELNODE1 COMPOSITENAME="ACT_TRD_CELL7" NAME="7" TYPE="LEAF" WEIGHT="0.3333333333333333"/>
              <MODELNODE2 COMPOSITENAME="ACT_TRD_CELL8" NAME="8" TYPE="LEAF" WEIGHT="0.3333333333333333"/>
            </MODELNODE2>
          </MODELNODE0>
          <POSITION3 EXPANDED="true"/>
          <POSITION_TABLE POSITION_TABLE="QTY,DAYS,TRADE_PRICE,MARK_PRICE,MARK_CHANGE"/>
        </ACTIVE_TRADER>
        <ALERTS CUSTOM_ALERTS_MOST_RECENT="VolumeAvg();D|BollingerBandsSMA().MidLine;D|SimpleMovingAvg();D" FX_PRICE_TYPE="last" ORDER_ENTRY_EXPANDED="false" SYMBOL_GROUP="-1">
          <ALERT_BOOK EXPANDED="true"/>
          <DROPDOWN EXPANDED="false"/>
          <FUTURES EXPANDED="true"/>
          <OPTIONS_CHART_PANEL DELTA_SUBGRAPH="false" HIGHLIGHT_TICKS="false" LOCK_TIME_AXIS="false" PALETTE="ff66ff,ffff,3f002f,d4d4d4,ebea00,ff3600,bf00,666666,c5a000,ffffff,ed7400,c0bfff,f3c500,659fc2,ea88ff,f3c500" PERCENT_AXIS="false" PRODUCT_DEPTH_MODE="OPTIONS">
            <COMBO_CHECK_BOX COLORS="" SELECTION=""/>
            <FUTURES_CURVES CURVES_COUNT="0"/>
            <OPTIONS_CHART_CONTROLS STRIKE_COUNT="All" VALUE="IMPL_VOL" VALUE2="IMPL_VOL" VIEW="ALL"/>
          </OPTIONS_CHART_PANEL>
          <OPTIONS_STATISTIC EXPANDED="false"/>
          <OPTIONS_TIME_AND_SALES ALL_CONDITIONS="true" ALL_EXCHANGES="true" ALL_PRICE="true" ALL_QUANTITIES="true" ALL_SERIES="true" ALL_STRIKES="true" EXPANDED="false" SELECTED_CONDITIONS="" SELECTED_EXCHANGES="" SELECTED_SERIES="" SELECTED_SIDE="BOTH"/>
          <OPTION_CHAIN EXPANDED="true"/>
          <PRODUCT_DEPTH EXPANDED="false"/>
          <QSHEETPANEL QSHEET_CONFIGURATION_COLUMNS="LASTX,NET_CHANGE" STRIKE_QTY="4">
            <ALLPRODUCTSPANELSMODEL>
              <OPTION_CHAIN ORDERING="2" SWITCHED_ON="true"/>
              <OPTION_STATISTICS ORDERING="3" SWITCHED_ON="true"/>
              <OPTION_TIME_AND_SALES ORDERING="4" SWITCHED_ON="true"/>
              <TRADE_GRID ORDERING="1" SWITCHED_ON="true"/>
              <UNDERLYING ORDERING="0" SWITCHED_ON="true"/>
              <WIDGET_360 ORDERING="5" SWITCHED_ON="true"/>
            </ALLPRODUCTSPANELSMODEL>
            <OPTIONS_SELECT TEMPLATE_FILTER_NAME="Single">
              <FUTURES_FILTER_NAME ALL_DELIVERABLES="true" ALL_EXCHANGES="true" ALL_EXPIRATION_DAYS="true" ALL_EXPIRATION_TYPES="true" ALL_SIDES="true" ALL_STRIKES="true" SELECTED_DELIVERABLES="REGULAR" SELECTED_EXCHANGES="COMPOSITE" SELECTED_EXPIRATION_TYPES="REGULAR" SELECTED_SIDE="BOTH" THEO_ADJ_TYPE="DOLLAR" THEO_DATE="18531" THEO_VOL_ADJ="0.0">
                <THEO_ADJ_VALUES_NAME DOLLAR="0.0" PERCENT="0.0" SIGMA="0.0"/>
              </FUTURES_FILTER_NAME>
              <STOCK_FILTER_NAME ALL_DELIVERABLES="true" ALL_EXCHANGES="true" ALL_EXPIRATION_DAYS="true" ALL_EXPIRATION_TYPES="true" ALL_SIDES="true" ALL_STRIKES="true" SELECTED_DELIVERABLES="REGULAR" SELECTED_EXCHANGES="COMPOSITE" SELECTED_EXPIRATION_TYPES="REGULAR" SELECTED_SIDE="BOTH" THEO_ADJ_TYPE="DOLLAR" THEO_DATE="18703" THEO_VOL_ADJ="0.0">
                <THEO_ADJ_VALUES_NAME DOLLAR="0.0" PERCENT="0.0" SIGMA="0.0"/>
              </STOCK_FILTER_NAME>
            </OPTIONS_SELECT>
          </QSHEETPANEL>
          <SORTING6 COLUMN="EXPIRATION" ORDER="1"/>
          <TRADE_GRID COLUMN_COUNT="3" DEFAULT_TYPE="LEVEL_II" EXPANDED="false" ROW_COUNT="1">
            <CELL0 ROWSPANELWEIGHT="1.0" ROWWEIGHT0="1.0" ROWWEIGHT1="1.0" SELECTED_TYPE="LEVEL_II" SIDEBAR_IS_ACTIVE="true" SYMBOL_GROUP="-1" TRADE_BUTTONS_MIGRATED="true">
              <ACTIVETRADER VERTICAL="false" VISIBLE="false" WEIGHT="2.0"/>
              <BIG_BUTTONS VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
              <CHART VERTICAL="false" VISIBLE="false" WEIGHT="3.0"/>
              <DASHBOARD VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
              <LEVEL_II SYMBOL_GROUP="-1" VERTICAL="false" VISIBLE="true" WEIGHT="1.0">
                <SORTING COLUMN="BID" ORDER="-1"/>
                <SORTING1 COLUMN="ASK" ORDER="1"/>
              </LEVEL_II>
              <LIVE_NEWS VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
              <PHASE_SCORES VERTICAL="false" VISIBLE="false" WEIGHT="2.0"/>
              <TIME_SALES VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
              <TRADE CONFIGURATION_NAME="SINGLE" OS_AUTO="false" OS_EXPANDED="false" OS_TIF="DAY" TEMPLATE="SINGLE" TRADE_BUTTONS="BUY_MKT;SELL_MKT;MULTI_CANCEL;REVERSE;FLAT;SECOND_LINE;QUANTITY;AUTO_SEND;ORDER_SETUP" VISIBLE="false">
                <OCO_STOP>
                  <TRG_0 TRG_ENBL="true" TRG_LINK="ASK_BID" TRG_OFFSET_MODE="TICK" TRG_OT="STOP" TRG_SETUP="10.0" TRG_TIF="DAY"/>
                </OCO_STOP>
                <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="1.0" TRG_TIF="DAY"/>
                <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-1.0" TRG_TIF="DAY"/>
                <_2>
                  <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="2.0" TRG_TIF="DAY"/>
                  <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-2.0" TRG_TIF="DAY"/>
                </_2>
                <_3>
                  <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="3.0" TRG_TIF="DAY"/>
                  <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-3.0" TRG_TIF="DAY"/>
                </_3>
              </TRADE>
            </CELL0>
            <CELL1 ROWSPANELWEIGHT="1.0" ROWWEIGHT0="1.0" ROWWEIGHT1="1.0" SELECTED_TYPE="LEVEL_II" SIDEBAR_IS_ACTIVE="true" SYMBOL_GROUP="-1" TRADE_BUTTONS_MIGRATED="true">
              <ACTIVETRADER VERTICAL="false" VISIBLE="false" WEIGHT="2.0"/>
              <BIG_BUTTONS VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
              <CHART VERTICAL="false" VISIBLE="false" WEIGHT="3.0"/>
              <DASHBOARD VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
              <LEVEL_II SYMBOL_GROUP="-1" VERTICAL="false" VISIBLE="true" WEIGHT="1.0">
                <SORTING COLUMN="BID" ORDER="-1"/>
                <SORTING1 COLUMN="ASK" ORDER="1"/>
              </LEVEL_II>
              <LIVE_NEWS VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
              <PHASE_SCORES VERTICAL="false" VISIBLE="false" WEIGHT="2.0"/>
              <TIME_SALES VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
              <TRADE CONFIGURATION_NAME="SINGLE" OS_AUTO="false" OS_EXPANDED="false" OS_TIF="DAY" TEMPLATE="SINGLE" TRADE_BUTTONS="BUY_MKT;SELL_MKT;MULTI_CANCEL;REVERSE;FLAT;SECOND_LINE;QUANTITY;AUTO_SEND;ORDER_SETUP" VISIBLE="false">
                <OCO_STOP>
                  <TRG_0 TRG_ENBL="true" TRG_LINK="ASK_BID" TRG_OFFSET_MODE="TICK" TRG_OT="STOP" TRG_SETUP="10.0" TRG_TIF="DAY"/>
                </OCO_STOP>
                <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="1.0" TRG_TIF="DAY"/>
                <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-1.0" TRG_TIF="DAY"/>
                <_2>
                  <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="2.0" TRG_TIF="DAY"/>
                  <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-2.0" TRG_TIF="DAY"/>
                </_2>
                <_3>
                  <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="3.0" TRG_TIF="DAY"/>
                  <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-3.0" TRG_TIF="DAY"/>
                </_3>
              </TRADE>
            </CELL1>
            <CELL2 ROWSPANELWEIGHT="1.0" ROWWEIGHT0="1.0" ROWWEIGHT1="1.0" SELECTED_TYPE="LEVEL_II" SIDEBAR_IS_ACTIVE="true" SYMBOL_GROUP="-1" TRADE_BUTTONS_MIGRATED="true">
              <ACTIVETRADER VERTICAL="false" VISIBLE="false" WEIGHT="2.0"/>
              <BIG_BUTTONS VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
              <CHART VERTICAL="false" VISIBLE="false" WEIGHT="3.0"/>
              <DASHBOARD VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
              <LEVEL_II SYMBOL_GROUP="-1" VERTICAL="false" VISIBLE="true" WEIGHT="1.0">
                <SORTING COLUMN="BID" ORDER="-1"/>
                <SORTING1 COLUMN="ASK" ORDER="1"/>
              </LEVEL_II>
              <LIVE_NEWS VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
              <PHASE_SCORES VERTICAL="false" VISIBLE="false" WEIGHT="2.0"/>
              <TIME_SALES VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
              <TRADE CONFIGURATION_NAME="SINGLE" OS_AUTO="false" OS_EXPANDED="false" OS_TIF="DAY" TEMPLATE="SINGLE" TRADE_BUTTONS="BUY_MKT;SELL_MKT;MULTI_CANCEL;REVERSE;FLAT;SECOND_LINE;QUANTITY;AUTO_SEND;ORDER_SETUP" VISIBLE="false">
                <OCO_STOP>
                  <TRG_0 TRG_ENBL="true" TRG_LINK="ASK_BID" TRG_OFFSET_MODE="TICK" TRG_OT="STOP" TRG_SETUP="10.0" TRG_TIF="DAY"/>
                </OCO_STOP>
                <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="1.0" TRG_TIF="DAY"/>
                <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-1.0" TRG_TIF="DAY"/>
                <_2>
                  <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="2.0" TRG_TIF="DAY"/>
                  <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-2.0" TRG_TIF="DAY"/>
                </_2>
                <_3>
                  <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="3.0" TRG_TIF="DAY"/>
                  <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-3.0" TRG_TIF="DAY"/>
                </_3>
              </TRADE>
            </CELL2>
            <MODELNODE0 COUNT="3" ROWLAYOUT="true" TYPE="SPLIT" WEIGHT="0.0">
              <MODELNODE0 COMPOSITENAME="CELL0" NAME="0" TYPE="LEAF" WEIGHT="0.3333333333333333"/>
              <MODELNODE1 COMPOSITENAME="CELL1" NAME="1" TYPE="LEAF" WEIGHT="0.3333333333333333"/>
              <MODELNODE2 COMPOSITENAME="CELL2" NAME="2" TYPE="LEAF" WEIGHT="0.3333333333333333"/>
            </MODELNODE0>
          </TRADE_GRID>
          <UNDERLYING1 EXPANDED="true"/>
          <UNDERLYING_PANEL FUTURES_DISPLAYING_MODE="ACTIVE ONLY"/>
        </ALERTS>
        <ALLOCATION QUANTITIES=""/>
        <ANALYZE_GROUP ORDER_ENTRY_EXPANDED="false" PALETTE="ff66ff,ffff,3f002f,d4d4d4,ebea00,ff3600,bf00,666666,c5a000,ffffff,ed7400,c0bfff,f3c500,659fc2,ea88ff,f3c500" SELECTED_LAYOUT="PROBABILITY_ANALYSIS" SYMBOL_GROUP="1">
          <ADD_SIMULATED_TRADES ORDER_ENTRY_EXPANDED="false"/>
          <DROPDOWN EXPANDED="true"/>
          <DROPDOWN1 EXPANDED="false"/>
          <FUTURES EXPANDED="true"/>
          <OPTIONS_CHART_PANEL DELTA_SUBGRAPH="false" HIGHLIGHT_TICKS="false" LOCK_TIME_AXIS="false" PALETTE="ff66ff,ffff,3f002f,d4d4d4,ebea00,ff3600,bf00,666666,c5a000,ffffff,ed7400,c0bfff,f3c500,659fc2,ea88ff,f3c500" PERCENT_AXIS="false" PRODUCT_DEPTH_MODE="OPTIONS">
            <COMBO_CHECK_BOX COLORS="" SELECTION=""/>
            <FUTURES_CURVES CURVES_COUNT="1">
              <CURVE_0 COLOR="-65536" DATE="-1" IS_HIDDEN="false" PRICE_TYPE="mark" SYMBOL="/ES:XCME"/>
            </FUTURES_CURVES>
            <OPTIONS_CHART/>
            <OPTIONS_CHART_CONTROLS STRIKE_COUNT="All" VALUE="IMPL_VOL" VALUE2="IMPL_VOL" VIEW="ALL"/>
          </OPTIONS_CHART_PANEL>
          <OPTIONS_STATISTIC EXPANDED="false"/>
          <OPTIONS_TIME_AND_SALES ALL_CONDITIONS="true" ALL_EXCHANGES="true" ALL_PRICE="true" ALL_QUANTITIES="true" ALL_SERIES="true" ALL_STRIKES="true" EXPANDED="false" SELECTED_CONDITIONS="" SELECTED_EXCHANGES="" SELECTED_SERIES="" SELECTED_SIDE="BOTH"/>
          <OPTION_CHAIN EXPANDED="true"/>
          <PROBABILITY_ANALYSIS ORDER_ENTRY_EXPANDED="false"/>
          <PRODUCT_DEPTH EXPANDED="false"/>
          <QSHEETPANEL QSHEET_CONFIGURATION_COLUMNS="LASTX,NET_CHANGE" STRIKE_QTY="4">
            <ALLPRODUCTSPANELSMODEL>
              <OPTION_CHAIN ORDERING="2" SWITCHED_ON="true"/>
              <OPTION_STATISTICS ORDERING="3" SWITCHED_ON="true"/>
              <OPTION_TIME_AND_SALES ORDERING="4" SWITCHED_ON="true"/>
              <TRADE_GRID ORDERING="1" SWITCHED_ON="true"/>
              <UNDERLYING ORDERING="0" SWITCHED_ON="true"/>
              <WIDGET_360 ORDERING="5" SWITCHED_ON="true"/>
            </ALLPRODUCTSPANELSMODEL>
            <OPTIONSLISTPANEL/>
            <OPTIONS_SELECT TEMPLATE_FILTER_NAME="Single">
              <FUTURES_FILTER_NAME ALL_DELIVERABLES="true" ALL_EXCHANGES="true" ALL_EXPIRATION_DAYS="true" ALL_EXPIRATION_TYPES="true" ALL_SIDES="true" ALL_STRIKES="true" SELECTED_DELIVERABLES="REGULAR" SELECTED_EXCHANGES="COMPOSITE" SELECTED_EXPIRATION_TYPES="REGULAR" SELECTED_SIDE="BOTH" THEO_ADJ_TYPE="DOLLAR" THEO_DATE="18390" THEO_VOL_ADJ="0.0">
                <THEO_ADJ_VALUES_NAME DOLLAR="0.0" PERCENT="0.0" SIGMA="0.0"/>
              </FUTURES_FILTER_NAME>
              <STOCK_FILTER_NAME ALL_DELIVERABLES="true" ALL_EXCHANGES="true" ALL_EXPIRATION_DAYS="true" ALL_EXPIRATION_TYPES="true" ALL_SIDES="true" ALL_STRIKES="true" SELECTED_DELIVERABLES="REGULAR" SELECTED_EXCHANGES="COMPOSITE" SELECTED_EXPIRATION_TYPES="REGULAR" SELECTED_SIDE="BOTH" THEO_ADJ_TYPE="DOLLAR" THEO_DATE="18713" THEO_VOL_ADJ="0.0">
                <THEO_ADJ_VALUES_NAME DOLLAR="0.0" PERCENT="0.0" SIGMA="0.0"/>
              </STOCK_FILTER_NAME>
            </OPTIONS_SELECT>
          </QSHEETPANEL>
          <RISK_PROFILE>
            <CHART_PANEL>
              <AAL OFFSET="0.0" RATIO="1.0"/>
              <AAPL OFFSET="0.0" RATIO="1.0"/>
              <CSCO OFFSET="0.0" RATIO="1.0"/>
              <EPZM OFFSET="0.0" RATIO="1.0"/>
              <EVRG OFFSET="0.0" RATIO="1.0"/>
              <INTC OFFSET="0.0" RATIO="1.0"/>
              <KODK OFFSET="0.0" RATIO="1.0"/>
              <T OFFSET="0.0" RATIO="1.0"/>
              <TSLA OFFSET="0.0" RATIO="1.0"/>
              <UAL OFFSET="0.0" RATIO="1.0"/>
              <WBA OFFSET="0.0" RATIO="1.0"/>
            </CHART_PANEL>
          </RISK_PROFILE>
          <SIMULATION_PANEL SLICE_EXPAND="false" TRADES_EXPANDED="UAL;AAPL;CSCO;SUMO;GPRO;KODK;.CSCO200904C42;TXN;AAL;LUV;TSLA;ZM;INTC;EPZM;PLTR">
            <BALANCES UNSELECTED=""/>
            <TRADES>
              <ORDER_0 DRAW_COLOR="0" DRAW_SELECTED="false" ORDER="BUY +2 EPZM 100 21 AUG 20 10 CALL @2.55 LMT" PRICE_FIXED="true" SELECTED="true"/>
              <ORDER_1 DRAW_COLOR="0" DRAW_SELECTED="false" ORDER="BUY +4 INTC 100 (Weeklys) 7 AUG 20 48 CALL @.04 LMT" PRICE_FIXED="false" SELECTED="true"/>
              <ORDER_2 DRAW_COLOR="0" DRAW_SELECTED="false" ORDER="BUY +4 BUTTERFLY TSLA 100 (Weeklys) 4 SEP 20 580/600/680 CALL @-.79 LMT" PRICE_FIXED="true" SELECTED="true"/>
              <ORDER_3 DRAW_COLOR="0" DRAW_SELECTED="false" ORDER="BUY +4 AAPL 100 (Weeklys) 25 SEP 20 115 CALL @.69 LMT" PRICE_FIXED="true" SELECTED="true"/>
              <ORDER_4 DRAW_COLOR="0" DRAW_SELECTED="false" ORDER="BUY +100 AAPL @116.04 LMT" PRICE_FIXED="true" SELECTED="true"/>
              <PRICE_SLICES/>
            </TRADES>
          </SIMULATION_PANEL>
          <SORTING/>
          <SORTING1/>
          <SORTING10/>
          <SORTING11/>
          <SORTING12/>
          <SORTING13/>
          <SORTING14/>
          <SORTING15/>
          <SORTING16/>
          <SORTING17/>
          <SORTING18/>
          <SORTING19/>
          <SORTING2/>
          <SORTING20/>
          <SORTING21/>
          <SORTING22/>
          <SORTING23/>
          <SORTING24/>
          <SORTING25/>
          <SORTING26/>
          <SORTING27/>
          <SORTING28/>
          <SORTING29/>
          <SORTING3/>
          <SORTING30/>
          <SORTING31/>
          <SORTING32/>
          <SORTING33/>
          <SORTING34/>
          <SORTING35/>
          <SORTING36/>
          <SORTING37/>
          <SORTING38/>
          <SORTING39/>
          <SORTING4/>
          <SORTING40/>
          <SORTING41/>
          <SORTING42/>
          <SORTING43/>
          <SORTING44/>
          <SORTING45/>
          <SORTING46/>
          <SORTING47/>
          <SORTING48/>
          <SORTING49/>
          <SORTING5/>
          <SORTING6 COLUMN="EXPIRATION" ORDER="1"/>
          <SORTING7/>
          <SORTING8/>
          <SORTING9/>
          <TRADE_GRID COLUMN_COUNT="3" DEFAULT_TYPE="LEVEL_II" EXPANDED="false" ROW_COUNT="1">
            <CELL0 ROWSPANELWEIGHT="1.0" ROWWEIGHT0="1.0" ROWWEIGHT1="1.0" SELECTED_TYPE="LEVEL_II" SIDEBAR_IS_ACTIVE="true" SYMBOL_GROUP="-1" TRADE_BUTTONS_MIGRATED="true">
              <ACTIVETRADER VERTICAL="false" VISIBLE="false" WEIGHT="2.0"/>
              <BIG_BUTTONS VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
              <CHART VERTICAL="false" VISIBLE="false" WEIGHT="3.0"/>
              <DASHBOARD VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
              <LEVEL_II SYMBOL_GROUP="-1" VERTICAL="false" VISIBLE="true" WEIGHT="1.0">
                <SORTING COLUMN="BID" ORDER="-1"/>
                <SORTING1 COLUMN="ASK" ORDER="1"/>
              </LEVEL_II>
              <LIVE_NEWS VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
              <PHASE_SCORES VERTICAL="false" VISIBLE="false" WEIGHT="2.0"/>
              <TIME_SALES VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
              <TRADE CONFIGURATION_NAME="SINGLE" OS_AUTO="false" OS_EXPANDED="false" OS_TIF="DAY" TEMPLATE="SINGLE" TRADE_BUTTONS="BUY_MKT;SELL_MKT;MULTI_CANCEL;REVERSE;FLAT;SECOND_LINE;QUANTITY;AUTO_SEND;ORDER_SETUP" VISIBLE="false">
                <OCO_STOP>
                  <TRG_0 TRG_ENBL="true" TRG_LINK="ASK_BID" TRG_OFFSET_MODE="TICK" TRG_OT="STOP" TRG_SETUP="10.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL/>
                  </TRG_0>
                </OCO_STOP>
                <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="1.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL/>
                </TRG_0>
                <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-1.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL/>
                </TRG_1>
                <_2>
                  <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="2.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL/>
                  </TRG_0>
                  <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-2.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL/>
                  </TRG_1>
                </_2>
                <_3>
                  <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="3.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL/>
                  </TRG_0>
                  <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-3.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL/>
                  </TRG_1>
                </_3>
              </TRADE>
            </CELL0>
            <CELL1 ROWSPANELWEIGHT="1.0" ROWWEIGHT0="1.0" ROWWEIGHT1="1.0" SELECTED_TYPE="LEVEL_II" SIDEBAR_IS_ACTIVE="true" SYMBOL_GROUP="-1" TRADE_BUTTONS_MIGRATED="true">
              <ACTIVETRADER VERTICAL="false" VISIBLE="false" WEIGHT="2.0"/>
              <BIG_BUTTONS VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
              <CHART VERTICAL="false" VISIBLE="false" WEIGHT="3.0"/>
              <DASHBOARD VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
              <LEVEL_II SYMBOL_GROUP="-1" VERTICAL="false" VISIBLE="true" WEIGHT="1.0">
                <SORTING COLUMN="BID" ORDER="-1"/>
                <SORTING1 COLUMN="ASK" ORDER="1"/>
              </LEVEL_II>
              <LIVE_NEWS VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
              <PHASE_SCORES VERTICAL="false" VISIBLE="false" WEIGHT="2.0"/>
              <TIME_SALES VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
              <TRADE CONFIGURATION_NAME="SINGLE" OS_AUTO="false" OS_EXPANDED="false" OS_TIF="DAY" TEMPLATE="SINGLE" TRADE_BUTTONS="BUY_MKT;SELL_MKT;MULTI_CANCEL;REVERSE;FLAT;SECOND_LINE;QUANTITY;AUTO_SEND;ORDER_SETUP" VISIBLE="false">
                <OCO_STOP>
                  <TRG_0 TRG_ENBL="true" TRG_LINK="ASK_BID" TRG_OFFSET_MODE="TICK" TRG_OT="STOP" TRG_SETUP="10.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL/>
                  </TRG_0>
                </OCO_STOP>
                <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="1.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL/>
                </TRG_0>
                <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-1.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL/>
                </TRG_1>
                <_2>
                  <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="2.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL/>
                  </TRG_0>
                  <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-2.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL/>
                  </TRG_1>
                </_2>
                <_3>
                  <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="3.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL/>
                  </TRG_0>
                  <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-3.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL/>
                  </TRG_1>
                </_3>
              </TRADE>
            </CELL1>
            <CELL2 ROWSPANELWEIGHT="1.0" ROWWEIGHT0="1.0" ROWWEIGHT1="1.0" SELECTED_TYPE="LEVEL_II" SIDEBAR_IS_ACTIVE="true" SYMBOL_GROUP="-1" TRADE_BUTTONS_MIGRATED="true">
              <ACTIVETRADER VERTICAL="false" VISIBLE="false" WEIGHT="2.0"/>
              <BIG_BUTTONS VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
              <CHART VERTICAL="false" VISIBLE="false" WEIGHT="3.0"/>
              <DASHBOARD VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
              <LEVEL_II SYMBOL_GROUP="-1" VERTICAL="false" VISIBLE="true" WEIGHT="1.0">
                <SORTING COLUMN="BID" ORDER="-1"/>
                <SORTING1 COLUMN="ASK" ORDER="1"/>
              </LEVEL_II>
              <LIVE_NEWS VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
              <PHASE_SCORES VERTICAL="false" VISIBLE="false" WEIGHT="2.0"/>
              <TIME_SALES VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
              <TRADE CONFIGURATION_NAME="SINGLE" OS_AUTO="false" OS_EXPANDED="false" OS_TIF="DAY" TEMPLATE="SINGLE" TRADE_BUTTONS="BUY_MKT;SELL_MKT;MULTI_CANCEL;REVERSE;FLAT;SECOND_LINE;QUANTITY;AUTO_SEND;ORDER_SETUP" VISIBLE="false">
                <OCO_STOP>
                  <TRG_0 TRG_ENBL="true" TRG_LINK="ASK_BID" TRG_OFFSET_MODE="TICK" TRG_OT="STOP" TRG_SETUP="10.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL/>
                  </TRG_0>
                </OCO_STOP>
                <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="1.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL/>
                </TRG_0>
                <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-1.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL/>
                </TRG_1>
                <_2>
                  <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="2.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL/>
                  </TRG_0>
                  <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-2.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL/>
                  </TRG_1>
                </_2>
                <_3>
                  <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="3.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL/>
                  </TRG_0>
                  <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-3.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL/>
                  </TRG_1>
                </_3>
              </TRADE>
            </CELL2>
            <MODELNODE0 COUNT="3" ROWLAYOUT="true" TYPE="SPLIT" WEIGHT="0.0">
              <MODELNODE0 COMPOSITENAME="CELL0" NAME="0" TYPE="LEAF" WEIGHT="0.3333333333333333"/>
              <MODELNODE1 COMPOSITENAME="CELL1" NAME="1" TYPE="LEAF" WEIGHT="0.3333333333333333"/>
              <MODELNODE2 COMPOSITENAME="CELL2" NAME="2" TYPE="LEAF" WEIGHT="0.3333333333333333"/>
            </MODELNODE0>
          </TRADE_GRID>
          <UNDERLYING1 EXPANDED="true"/>
          <UNDERLYING_PANEL FUTURES_DISPLAYING_MODE="ALL"/>
        </ANALYZE_GROUP>
        <CALENDAR CATEGORY="DIVIDENDS;EARNINGS;CONF_CALLS;SPLITS;101;201;301" ORDER_ENTRY_EXPANDED="false" RANGE="WEEK" SHOW_ALL="false" SYMBOL_FILTER_WATCHLIST="0" SYMBOL_GROUP="-1"/>
        <CAPTIONS ENABLED="false"/>
        <CHARTING CHART_GROUP_MANAGER="@v9@%0:com.devexperts.toschart.facade.persistence,1:java.util,2:com.devexperts.toschart.model%owner{chartAggregationPeriods:ChartAggregationPeriodArray0,chartAggregationPeriods=@ChartAggregationPeriodArray0}#%0.ChartGroupManagerPersistence{encodedMyToolsModel=&quot;{\&quot;items\&quot;:[{\&quot;tool\&quot;:\&quot;TRENDLINE\&quot;,\&quot;name\&quot;:\&quot;\&quot;},{\&quot;tool\&quot;:\&quot;TEXT_NOTE\&quot;,\&quot;name\&quot;:\&quot;\&quot;},{\&quot;loadedName\&quot;:\&quot;SimpleMovingAvg\&quot;,\&quot;type\&quot;:\&quot;STUDY\&quot;,\&quot;name\&quot;:\&quot;SimpleMovingAvg\&quot;},{\&quot;loadedName\&quot;:\&quot;mah_MovingAvg_Multi_4_Period_with_VWAP\&quot;,\&quot;type\&quot;:\&quot;STUDY\&quot;,\&quot;name\&quot;:\&quot;Mov4\&quot;},{\&quot;loadedName\&quot;:\&quot;Style name\&quot;,\&quot;type\&quot;:\&quot;STYLE_SET\&quot;,\&quot;name\&quot;:\&quot;Style name\&quot;},{\&quot;tool\&quot;:\&quot;FIBONNACCI_RETRACEMENTS\&quot;,\&quot;name\&quot;:\&quot;\&quot;},{\&quot;tool\&quot;:\&quot;FIBONACCI_PROJECTIONS\&quot;,\&quot;name\&quot;:\&quot;\&quot;}],\&quot;toggledItemIndex\&quot;:-1,\&quot;mode\&quot;:\&quot;GRID\&quot;,\&quot;viewMode\&quot;:\&quot;OFF\&quot;}&quot;,generalProperties=#%1.HashMap{^(&quot;showUnsavedDrawingsNotifications&quot;,&lt;T),^(&quot;showLogo&quot;,&lt;T),^(&quot;quickTimeFrames&quot;,&quot;[1d:m, 2d:2m, 3d:3m, 2d:4m, 5d:5m, 5d:15m, 10d:30m, 90d:65m, 20d:h, 180d:4h, 1y:d, 3y:w, 5d:2m, 360d:4h, 20d:5m, 20d:30m, 3d:m, 20d:15m, 10y:mo, 2y:d, 10y:w]&quot;),^(&quot;majorTimeZoneIds&quot;,#java.lang.String[10]{0=&quot;America/Los_Angeles&quot;,1=&quot;America/Denver&quot;,2=&quot;America/Chicago&quot;,3=&quot;America/New_York&quot;,4=&quot;Europe/London&quot;,5=&quot;Europe/Berlin&quot;,6=&quot;Europe/Moscow&quot;,7=&quot;Asia/Hong_Kong&quot;,8=&quot;Asia/Tokyo&quot;,9=&quot;Australia/Sydney&quot;}),^(&quot;timezone&quot;,&quot;America/New_York&quot;)},groups=#%1.ArrayList{+(#%0.ChartGroupPersistence{groupId=&quot;isolated&quot;,properties=#%1.HashMap{^(&quot;hideStatusString&quot;,&lt;T),^(&quot;databoxPin&quot;,&lt;T),^(&quot;databoxMode&quot;,!java.lang.Enum.valueOf(*%2.DataBoxMode.class,&quot;NONE&quot;))}}),+(#%0.ChartGroupPersistence{groupId=&quot;default&quot;,properties=#%1.HashMap{^(&quot;hideStatusString&quot;,&lt;F),^(&quot;databoxBounds&quot;,&quot;[-2637, 905, 359, 986]&quot;),^(&quot;synchronizeCrosshair&quot;,&lt;T),^(&quot;databoxPin&quot;,&lt;T),^(&quot;databoxMode&quot;,!java.lang.Enum.valueOf(*%2.DataBoxMode.class,&quot;FIXED&quot;))}})}}" CORRECTIONS="" DISABLED_MESSAGES=""/>
        <CHARTS_GROUP ORDER_ENTRY_EXPANDED="false" SELECTED_LAYOUT="TOS CHARTS"/>
        <CHAT>
          <HIDDEN_USERS/>
        </CHAT>
        <COM.DEVEXPERTS.TOS.UI.USER.TFACE.GADGETSIDEBARSPLITPANE DIVIDER_LAST_LOCATION="31.818182" DIVIDER_LOCATION="35.18182"/>
        <CONFIG PRIVACY_MODE="false"/>
        <CONFIGURABLE_TAB SLIDER_PINNED="false"/>
        <DISCLOSURES/>
        <DUMMY/>
        <EARNINGS_LAYOUT CURRENT_VIEW="FIT_ALL" ORDER_ENTRY_EXPANDED="false" SYMBOL_GROUP="-1">
          <EARNING_SETTINGS>
            <COMPARE_MODE_MODEL_KEY>
              <CHART_SELECTION_KEY ITEMS=""/>
              <QUARTERS_SELECTION_KEY ITEMS=""/>
            </COMPARE_MODE_MODEL_KEY>
            <FIT_ALL_SETTINGS RELEASECOLOR="-1589760" WALL_STREETCOLOR="-16726735">
              <EST_SETTINGS_KEY ITEMS=""/>
              <EST_SRC_KEY ITEMS=""/>
              <VOL_OPT_KEY ITEMS=""/>
            </FIT_ALL_SETTINGS>
          </EARNING_SETTINGS>
        </EARNINGS_LAYOUT>
        <EDUCATION_GROUP ORDER_ENTRY_EXPANDED="false" SELECTED_LAYOUT="LEARNING_CENTER"/>
        <ERROR_REPORT AUTO_SEND_REPORT="false"/>
        <FLEX CURRENT_GRID_NAME="Cashie_v16_mah1" ORDER_ENTRY_EXPANDED="false">
          <MODELNODE0 COUNT="2" ROWLAYOUT="false" TYPE="SPLIT" WEIGHT="0.0">
            <MODELNODE0 COUNT="2" ROWLAYOUT="true" TYPE="SPLIT" WEIGHT="0.5020449897750511">
              <MODELNODE0 COMPOSITENAME="COMPOSITE_1559449443662" NAME="1559449443597" TYPE="LEAF" WEIGHT="0.6555352241537054">
                <GADGET ROWSPANELWEIGHT="1.0" ROWWEIGHT0="1.5926680244399185" ROWWEIGHT1="0.4073319755600815" SELECTED_TYPE="CHART" SIDEBAR_IS_ACTIVE="true" SYMBOL="FEDU" SYMBOL_GROUP="8" TRADE_BUTTONS_MIGRATED="true">
                  <ACTIVETRADER CELL_IDS="POSITION_BREAKDOWN;NET_POSITION;AVERAGE_PRICE;PL_OPEN;PL_DAY" COLUMNS="TRADE_AMOUNT:68:,BUY_ORDER:81:,BIDSIZE:46:,PRICE:89:,ASKSIZE:65:,SELL_ORDER:72:" ENABLED="true" SHOW_STUDY_MARKERS="false" SYMBOL="FEDU" SYMBOL_GROUP="8" SYNC_AT_AND_CHART_CROSSHAIR="true" VERTICAL="false" VISIBLE="true" WEIGHT="1.9591836734693873" ZOOMING_STEPS="1">
                    <TRADE_BUTTONS_CONFIG CONFIGURATION_NAME="SINGLE" ORDER_RULES_SET="STOCK" ORDER_TYPE="LIMIT" OS_AUTO="false" OS_EXPANDED="false" OS_TIF="DAY" QTY="100.0" QTY_STEP="1.0" TEMPLATE="SINGLE" TRADE_BUTTONS="FIRST_LINE;BUY_ASK;SELL_ASK;MULTI_CANCEL;ORDER_TEMPLATE;QUANTITY_WITH_BUTTONS;REVERSE;FLAT;SECOND_LINE;AUTO_SEND;ORDER_SETUP">
                      <OCO_STOP>
                        <TRG_0 TRG_ENBL="true" TRG_LINK="ASK_BID" TRG_OFFSET_MODE="TICK" TRG_OT="STOP" TRG_SETUP="10.0" TRG_TIF="DAY">
                          <OFFSET_PER_SYMBOL AAL="10.0" AAN="10.0" AAPL="10.0" ACN="10.0" ADSK="10.0" AIG="10.0" AL="10.0" AMD="10.0" AMGN="10.0" ANET="10.0" ATH="10.0" AZN="10.0" B="10.0" BA="10.0" BABA="10.0" BAC="10.0" BBBY="10.0" BBY="10.0" BMA="10.0" BMY="10.0" BUD="10.0" BURL="10.0" C="10.0" CAR="10.0" CCL="10.0" CGC="10.0" CHGG="10.0" CHWY="10.0" CLEU="10.0" CNQ="10.0" COUP="10.0" CRM="10.0" CRSP="10.0" CRWD="10.0" CSCO="10.0" CWT="10.0" CXO="10.0" DBX="10.0" DGX="10.0" DOCU="10.0" EBAY="10.0" EDTK="10.0" EIDX="10.0" EOG="10.0" ESS="10.0" ETFC="10.0" ETSY="10.0" FARO="10.0" FEDU="10.0" FIVN="10.0" G="10.0" GKOS="10.0" GLPG="10.0" GS="10.0" ICPT="10.0" INTC="10.0" JBLU="10.0" JCI="10.0" JNUG="10.0" JWN="10.0" KL="10.0" KO="10.0" KOD="10.0" KWEB="10.0" LHX="10.0" LITE="10.0" LYFT="10.0" MCD="10.0" MEDP="10.0" MHK="10.0" MRNA="10.0" MRTN="10.0" MTN="10.0" MU="10.0" NCLH="10.0" NKLA="10.0" NTNX="10.0" NTRS="10.0" NVAX="10.0" NVDA="10.0" OSTK="10.0" OTTR="10.0" PANW="10.0" PDD="10.0" PENN="10.0" PFE="10.0" PHI="10.0" PLNT="10.0" PTON="10.0" QCOM="10.0" RCL="10.0" ROKU="10.0" SHAK="10.0" SNAP="10.0" SPX="10.0" SPXL="10.0" SQ="10.0" STZ="10.0" SYK="10.0" TLRY="10.0" TNDM="10.0" TRGP="10.0" TSLA="10.0" TWTR="10.0" UAL="10.0" ULTA="10.0" V="10.0" VEC="10.0" VEEV="10.0" VIX="10.0" VRSN="10.0" VZ="10.0" W="10.0" WAFU="10.0" WFC="10.0" WYNN="10.0" YETI="10.0" Z="10.0" ZBRA="10.0" ZM="10.0"/>
                        </TRG_0>
                      </OCO_STOP>
                      <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="1.0" TRG_TIF="DAY">
                        <OFFSET_PER_SYMBOL AAL="1.0" AAN="1.0" AAPL="1.0" ACN="1.0" ADSK="1.0" AIG="1.0" AL="1.0" AMD="1.0" AMGN="1.0" ANET="1.0" ATH="1.0" AZN="1.0" B="1.0" BA="1.0" BABA="1.0" BAC="1.0" BBBY="1.0" BBY="1.0" BMA="1.0" BMY="1.0" BUD="1.0" BURL="1.0" C="1.0" CAR="1.0" CCL="1.0" CGC="1.0" CHGG="1.0" CHWY="1.0" CLEU="1.0" CNQ="1.0" COUP="1.0" CRM="1.0" CRSP="1.0" CRWD="1.0" CSCO="1.0" CWT="1.0" CXO="1.0" DBX="1.0" DGX="1.0" DOCU="1.0" EBAY="1.0" EDTK="1.0" EIDX="1.0" EOG="1.0" ESS="1.0" ETFC="1.0" ETSY="1.0" FARO="1.0" FEDU="1.0" FIVN="1.0" G="1.0" GKOS="1.0" GLPG="1.0" GS="1.0" ICPT="1.0" INTC="1.0" JBLU="1.0" JCI="1.0" JNUG="1.0" JWN="1.0" KL="1.0" KO="1.0" KOD="1.0" KWEB="1.0" LHX="1.0" LITE="1.0" LYFT="1.0" MCD="1.0" MEDP="1.0" MHK="1.0" MRNA="1.0" MRTN="1.0" MTN="1.0" MU="1.0" NCLH="1.0" NKLA="1.0" NTNX="1.0" NTRS="1.0" NVAX="1.0" NVDA="1.0" OSTK="1.0" OTTR="1.0" PANW="1.0" PDD="1.0" PENN="1.0" PFE="1.0" PHI="1.0" PLNT="1.0" PTON="1.0" QCOM="1.0" RCL="1.0" ROKU="1.0" SHAK="1.0" SNAP="1.0" SPX="1.0" SPXL="1.0" SQ="1.0" STZ="1.0" SYK="1.0" TLRY="1.0" TNDM="1.0" TRGP="1.0" TSLA="1.0" TWTR="1.0" UAL="1.0" ULTA="1.0" V="1.0" VEC="1.0" VEEV="1.0" VIX="1.0" VRSN="1.0" VZ="1.0" W="1.0" WAFU="1.0" WFC="1.0" WYNN="1.0" YETI="1.0" Z="1.0" ZBRA="1.0" ZM="1.0"/>
                      </TRG_0>
                      <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-1.0" TRG_TIF="DAY">
                        <OFFSET_PER_SYMBOL AAL="-1.0" AAN="-1.0" AAPL="-1.0" ACN="-1.0" ADSK="-1.0" AIG="-1.0" AL="-1.0" AMD="-1.0" AMGN="-1.0" ANET="-1.0" ATH="-1.0" AZN="-1.0" B="-1.0" BA="-1.0" BABA="-1.0" BAC="-1.0" BBBY="-1.0" BBY="-1.0" BMA="-1.0" BMY="-1.0" BUD="-1.0" BURL="-1.0" C="-1.0" CAR="-1.0" CCL="-1.0" CGC="-1.0" CHGG="-1.0" CHWY="-1.0" CLEU="-1.0" CNQ="-1.0" COUP="-1.0" CRM="-1.0" CRSP="-1.0" CRWD="-1.0" CSCO="-1.0" CWT="-1.0" CXO="-1.0" DBX="-1.0" DGX="-1.0" DOCU="-1.0" EBAY="-1.0" EDTK="-1.0" EIDX="-1.0" EOG="-1.0" ESS="-1.0" ETFC="-1.0" ETSY="-1.0" FARO="-1.0" FEDU="-1.0" FIVN="-1.0" G="-1.0" GKOS="-1.0" GLPG="-1.0" GS="-1.0" ICPT="-1.0" INTC="-1.0" JBLU="-1.0" JCI="-1.0" JNUG="-1.0" JWN="-1.0" KL="-1.0" KO="-1.0" KOD="-1.0" KWEB="-1.0" LHX="-1.0" LITE="-1.0" LYFT="-1.0" MCD="-1.0" MEDP="-1.0" MHK="-1.0" MRNA="-1.0" MRTN="-1.0" MTN="-1.0" MU="-1.0" NCLH="-1.0" NKLA="-1.0" NTNX="-1.0" NTRS="-1.0" NVAX="-1.0" NVDA="-1.0" OSTK="-1.0" OTTR="-1.0" PANW="-1.0" PDD="-1.0" PENN="-1.0" PFE="-1.0" PHI="-1.0" PLNT="-1.0" PTON="-1.0" QCOM="-1.0" RCL="-1.0" ROKU="-1.0" SHAK="-1.0" SNAP="-1.0" SPX="-1.0" SPXL="-1.0" SQ="-1.0" STZ="-1.0" SYK="-1.0" TLRY="-1.0" TNDM="-1.0" TRGP="-1.0" TSLA="-1.0" TWTR="-1.0" UAL="-1.0" ULTA="-1.0" V="-1.0" VEC="-1.0" VEEV="-1.0" VIX="-1.0" VRSN="-1.0" VZ="-1.0" W="-1.0" WAFU="-1.0" WFC="-1.0" WYNN="-1.0" YETI="-1.0" Z="-1.0" ZBRA="-1.0" ZM="-1.0"/>
                      </TRG_1>
                      <_2>
                        <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="2.0" TRG_TIF="DAY">
                          <OFFSET_PER_SYMBOL AAL="2.0" AAN="2.0" AAPL="2.0" ACN="2.0" ADSK="2.0" AIG="2.0" AL="2.0" AMD="2.0" AMGN="2.0" ANET="2.0" ATH="2.0" AZN="2.0" B="2.0" BA="2.0" BABA="2.0" BAC="2.0" BBBY="2.0" BBY="2.0" BMA="2.0" BMY="2.0" BUD="2.0" BURL="2.0" C="2.0" CAR="2.0" CCL="2.0" CGC="2.0" CHGG="2.0" CHWY="2.0" CLEU="2.0" CNQ="2.0" COUP="2.0" CRM="2.0" CRSP="2.0" CRWD="2.0" CSCO="2.0" CWT="2.0" CXO="2.0" DBX="2.0" DGX="2.0" DOCU="2.0" EBAY="2.0" EDTK="2.0" EIDX="2.0" EOG="2.0" ESS="2.0" ETFC="2.0" ETSY="2.0" FARO="2.0" FEDU="2.0" FIVN="2.0" G="2.0" GKOS="2.0" GLPG="2.0" GS="2.0" ICPT="2.0" INTC="2.0" JBLU="2.0" JCI="2.0" JNUG="2.0" JWN="2.0" KL="2.0" KO="2.0" KOD="2.0" KWEB="2.0" LHX="2.0" LITE="2.0" LYFT="2.0" MCD="2.0" MEDP="2.0" MHK="2.0" MRNA="2.0" MRTN="2.0" MTN="2.0" MU="2.0" NCLH="2.0" NKLA="2.0" NTNX="2.0" NTRS="2.0" NVAX="2.0" NVDA="2.0" OSTK="2.0" OTTR="2.0" PANW="2.0" PDD="2.0" PENN="2.0" PFE="2.0" PHI="2.0" PLNT="2.0" PTON="2.0" QCOM="2.0" RCL="2.0" ROKU="2.0" SHAK="2.0" SNAP="2.0" SPX="2.0" SPXL="2.0" SQ="2.0" STZ="2.0" SYK="2.0" TLRY="2.0" TNDM="2.0" TRGP="2.0" TSLA="2.0" TWTR="2.0" UAL="2.0" ULTA="2.0" V="2.0" VEC="2.0" VEEV="2.0" VIX="2.0" VRSN="2.0" VZ="2.0" W="2.0" WAFU="2.0" WFC="2.0" WYNN="2.0" YETI="2.0" Z="2.0" ZBRA="2.0" ZM="2.0"/>
                        </TRG_0>
                        <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-2.0" TRG_TIF="DAY">
                          <OFFSET_PER_SYMBOL AAL="-2.0" AAN="-2.0" AAPL="-2.0" ACN="-2.0" ADSK="-2.0" AIG="-2.0" AL="-2.0" AMD="-2.0" AMGN="-2.0" ANET="-2.0" ATH="-2.0" AZN="-2.0" B="-2.0" BA="-2.0" BABA="-2.0" BAC="-2.0" BBBY="-2.0" BBY="-2.0" BMA="-2.0" BMY="-2.0" BUD="-2.0" BURL="-2.0" C="-2.0" CAR="-2.0" CCL="-2.0" CGC="-2.0" CHGG="-2.0" CHWY="-2.0" CLEU="-2.0" CNQ="-2.0" COUP="-2.0" CRM="-2.0" CRSP="-2.0" CRWD="-2.0" CSCO="-2.0" CWT="-2.0" CXO="-2.0" DBX="-2.0" DGX="-2.0" DOCU="-2.0" EBAY="-2.0" EDTK="-2.0" EIDX="-2.0" EOG="-2.0" ESS="-2.0" ETFC="-2.0" ETSY="-2.0" FARO="-2.0" FEDU="-2.0" FIVN="-2.0" G="-2.0" GKOS="-2.0" GLPG="-2.0" GS="-2.0" ICPT="-2.0" INTC="-2.0" JBLU="-2.0" JCI="-2.0" JNUG="-2.0" JWN="-2.0" KL="-2.0" KO="-2.0" KOD="-2.0" KWEB="-2.0" LHX="-2.0" LITE="-2.0" LYFT="-2.0" MCD="-2.0" MEDP="-2.0" MHK="-2.0" MRNA="-2.0" MRTN="-2.0" MTN="-2.0" MU="-2.0" NCLH="-2.0" NKLA="-2.0" NTNX="-2.0" NTRS="-2.0" NVAX="-2.0" NVDA="-2.0" OSTK="-2.0" OTTR="-2.0" PANW="-2.0" PDD="-2.0" PENN="-2.0" PFE="-2.0" PHI="-2.0" PLNT="-2.0" PTON="-2.0" QCOM="-2.0" RCL="-2.0" ROKU="-2.0" SHAK="-2.0" SNAP="-2.0" SPX="-2.0" SPXL="-2.0" SQ="-2.0" STZ="-2.0" SYK="-2.0" TLRY="-2.0" TNDM="-2.0" TRGP="-2.0" TSLA="-2.0" TWTR="-2.0" UAL="-2.0" ULTA="-2.0" V="-2.0" VEC="-2.0" VEEV="-2.0" VIX="-2.0" VRSN="-2.0" VZ="-2.0" W="-2.0" WAFU="-2.0" WFC="-2.0" WYNN="-2.0" YETI="-2.0" Z="-2.0" ZBRA="-2.0" ZM="-2.0"/>
                        </TRG_1>
                      </_2>
                      <_3>
                        <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="3.0" TRG_TIF="DAY">
                          <OFFSET_PER_SYMBOL AAL="3.0" AAN="3.0" AAPL="3.0" ACN="3.0" ADSK="3.0" AIG="3.0" AL="3.0" AMD="3.0" AMGN="3.0" ANET="3.0" ATH="3.0" AZN="3.0" B="3.0" BA="3.0" BABA="3.0" BAC="3.0" BBBY="3.0" BBY="3.0" BMA="3.0" BMY="3.0" BUD="3.0" BURL="3.0" C="3.0" CAR="3.0" CCL="3.0" CGC="3.0" CHGG="3.0" CHWY="3.0" CLEU="3.0" CNQ="3.0" COUP="3.0" CRM="3.0" CRSP="3.0" CRWD="3.0" CSCO="3.0" CWT="3.0" CXO="3.0" DBX="3.0" DGX="3.0" DOCU="3.0" EBAY="3.0" EDTK="3.0" EIDX="3.0" EOG="3.0" ESS="3.0" ETFC="3.0" ETSY="3.0" FARO="3.0" FEDU="3.0" FIVN="3.0" G="3.0" GKOS="3.0" GLPG="3.0" GS="3.0" ICPT="3.0" INTC="3.0" JBLU="3.0" JCI="3.0" JNUG="3.0" JWN="3.0" KL="3.0" KO="3.0" KOD="3.0" KWEB="3.0" LHX="3.0" LITE="3.0" LYFT="3.0" MCD="3.0" MEDP="3.0" MHK="3.0" MRNA="3.0" MRTN="3.0" MTN="3.0" MU="3.0" NCLH="3.0" NKLA="3.0" NTNX="3.0" NTRS="3.0" NVAX="3.0" NVDA="3.0" OSTK="3.0" OTTR="3.0" PANW="3.0" PDD="3.0" PENN="3.0" PFE="3.0" PHI="3.0" PLNT="3.0" PTON="3.0" QCOM="3.0" RCL="3.0" ROKU="3.0" SHAK="3.0" SNAP="3.0" SPX="3.0" SPXL="3.0" SQ="3.0" STZ="3.0" SYK="3.0" TLRY="3.0" TNDM="3.0" TRGP="3.0" TSLA="3.0" TWTR="3.0" UAL="3.0" ULTA="3.0" V="3.0" VEC="3.0" VEEV="3.0" VIX="3.0" VRSN="3.0" VZ="3.0" W="3.0" WAFU="3.0" WFC="3.0" WYNN="3.0" YETI="3.0" Z="3.0" ZBRA="3.0" ZM="3.0"/>
                        </TRG_0>
                        <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-3.0" TRG_TIF="DAY">
                          <OFFSET_PER_SYMBOL AAL="-3.0" AAN="-3.0" AAPL="-3.0" ACN="-3.0" ADSK="-3.0" AIG="-3.0" AL="-3.0" AMD="-3.0" AMGN="-3.0" ANET="-3.0" ATH="-3.0" AZN="-3.0" B="-3.0" BA="-3.0" BABA="-3.0" BAC="-3.0" BBBY="-3.0" BBY="-3.0" BMA="-3.0" BMY="-3.0" BUD="-3.0" BURL="-3.0" C="-3.0" CAR="-3.0" CCL="-3.0" CGC="-3.0" CHGG="-3.0" CHWY="-3.0" CLEU="-3.0" CNQ="-3.0" COUP="-3.0" CRM="-3.0" CRSP="-3.0" CRWD="-3.0" CSCO="-3.0" CWT="-3.0" CXO="-3.0" DBX="-3.0" DGX="-3.0" DOCU="-3.0" EBAY="-3.0" EDTK="-3.0" EIDX="-3.0" EOG="-3.0" ESS="-3.0" ETFC="-3.0" ETSY="-3.0" FARO="-3.0" FEDU="-3.0" FIVN="-3.0" G="-3.0" GKOS="-3.0" GLPG="-3.0" GS="-3.0" ICPT="-3.0" INTC="-3.0" JBLU="-3.0" JCI="-3.0" JNUG="-3.0" JWN="-3.0" KL="-3.0" KO="-3.0" KOD="-3.0" KWEB="-3.0" LHX="-3.0" LITE="-3.0" LYFT="-3.0" MCD="-3.0" MEDP="-3.0" MHK="-3.0" MRNA="-3.0" MRTN="-3.0" MTN="-3.0" MU="-3.0" NCLH="-3.0" NKLA="-3.0" NTNX="-3.0" NTRS="-3.0" NVAX="-3.0" NVDA="-3.0" OSTK="-3.0" OTTR="-3.0" PANW="-3.0" PDD="-3.0" PENN="-3.0" PFE="-3.0" PHI="-3.0" PLNT="-3.0" PTON="-3.0" QCOM="-3.0" RCL="-3.0" ROKU="-3.0" SHAK="-3.0" SNAP="-3.0" SPX="-3.0" SPXL="-3.0" SQ="-3.0" STZ="-3.0" SYK="-3.0" TLRY="-3.0" TNDM="-3.0" TRGP="-3.0" TSLA="-3.0" TWTR="-3.0" UAL="-3.0" ULTA="-3.0" V="-3.0" VEC="-3.0" VEEV="-3.0" VIX="-3.0" VRSN="-3.0" VZ="-3.0" W="-3.0" WAFU="-3.0" WFC="-3.0" WYNN="-3.0" YETI="-3.0" Z="-3.0" ZBRA="-3.0" ZM="-3.0"/>
                        </TRG_1>
                      </_3>
                    </TRADE_BUTTONS_CONFIG>
                  </ACTIVETRADER>
                  <BIG_BUTTONS VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
                  <CHART CONFIGURATION="@v9@%0:com.devexperts.tos.chartdata,1:com.devexperts.tos.thinkscript.constants,2:com.devexperts.tos.thinkscript.data,3:java.awt,4:com.devexperts.toschart.control.subgraph,5:com.devexperts.toschart.elstudies,6:com.devexperts.toschart.script%owner{chartAggregationPeriods:ChartAggregationPeriodArray0{12::ChartAggregationPeriod0},chartAggregationPeriods=@ChartAggregationPeriodArray0,colors{5::CustomColor0,7::CustomColor1,6::CustomColor2,9::CustomColor3,1::CustomColor4,0::CustomColor5,3::CustomColor6,4::CustomColor7}}#com.devexperts.toschart.core.ChartModel{encodedMixinsState=&quot;{\&quot;common\&quot;:{\&quot;DRAWING_SETS\&quot;:\&quot;{}\&quot;},\&quot;state_props\&quot;:{\&quot;state_type\&quot;:\&quot;REGULAR\&quot;},\&quot;monkey_bars_exp\&quot;:{\&quot;LikefolioMixin\&quot;:\&quot;{\\\&quot;paintingSettings\\\&quot;:{\\\&quot;neutralSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;positiveSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;negativeSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;sentimentSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true}},\\\&quot;shownDivisions\\\&quot;:[],\\\&quot;allDivisions\\\&quot;:[]}\&quot;},\&quot;monkey_bars\&quot;:{},\&quot;seasonality\&quot;:{},\&quot;regular\&quot;:{\&quot;DescriberMixin\&quot;:\&quot;{\\\&quot;visibility\\\&quot;:\\\&quot;HIDE_PANEL\\\&quot;,\\\&quot;studiesMode\\\&quot;:\\\&quot;HIDE_STUDIES\\\&quot;}\&quot;,\&quot;LikefolioMixin\&quot;:\&quot;{\\\&quot;paintingSettings\\\&quot;:{\\\&quot;neutralSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;positiveSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;negativeSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;sentimentSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true}},\\\&quot;shownDivisions\\\&quot;:[],\\\&quot;allDivisions\\\&quot;:[]}\&quot;}}&quot;,encodedPatternsModel=&quot;{\&quot;showPatterns\&quot;:true,\&quot;models\&quot;:[],\&quot;fibModels\&quot;:[]}&quot;,groupId=&quot;default&quot;,styleSettings{chartAggregationSettings.timeAggregationSettings=!com.devexperts.toschart.model.TimeFrameAggregationSettings.createTickOrTimeAggregation(!%0.ChartRange.findByCode(&quot;DAY5&quot;),@ChartAggregationPeriod0),commonStyleSettings{autoCorpActionsExpansion=&lt;T,chartModeName:ChartModeName0,chartModes.!get(@ChartModeName0){chartPaintingType=!java.lang.Enum.valueOf(*%1.ChartPaintingType.class,&quot;BAR&quot;)},colorSettings{backgroundColor=#%2.CustomColor(#%3.Color(20,20,20,255)),barTypeColors{downColor=@CustomColor0,neutralColor=@CustomColor1,upColor=@CustomColor2},candleTrendTypeColors{fillUpColor=#%2.CustomColor(#%3.Color(0,204,204,255)),upColor=#%2.CustomColor(#%3.Color(0,204,204,255))},candleTypeColors.upColor=#%2.CustomColor(#%3.Color(0,204,204,195)),monkeyProfileTypeColors.defaultRowHeight=&lt;F,mpExpandedTypeColors.defaultRowHeight=&lt;F,volumeColor=#%2.CustomColor(#%3.Color(0,101,153,127))},expansion{right=15,up=10},fitArrowsToScreen=&lt;F,fitStudiesToScreen=&lt;F,leftAxisEnabled=&lt;F,leftAxisRegulator{maxValue=7.94365781d,minValue=0.0d},manualAxisRegulator{maxValue=1.63319149d,minValue=1.28851064d},overlappedVolume=&lt;T,previousRightExpansion=15,shortCuts{^(&quot;Time Zone&quot;,&lt;F),^(&quot;Show Expiration Friday &quot;,&lt;F),^(&quot;Keep Price Zoom&quot;,&lt;F),^(&quot;enableLeftAxis&quot;,&lt;F),^(&quot;Fit expected price ranges&quot;,&lt;F),^(&quot;emphasizeDigitMPExpanded&quot;,&lt;F),^(&quot;showWicksCandleTrend&quot;,&lt;F),^(&quot;highlightEarnings&quot;,&lt;F),^(&quot;synchronizeCrosshair&quot;,&lt;F),^(&quot;myToolsMode&quot;,&lt;F),^(&quot;seasonalityStyle&quot;,&lt;F),^(&quot;Show Price Subgraph&quot;,&lt;F),^(&quot;closePriceLevel&quot;,&lt;F),^(&quot;Color Volume As Symbol Ticks&quot;,&lt;F),^(&quot;highlightPhantomRBars&quot;,&lt;F),^(&quot;Cross type &quot;,&lt;F),^(&quot;Fit Studies to Screen&quot;,&lt;F),^(&quot;Fit Orders&quot;,&lt;F),^(&quot;Bubbles as Percentage&quot;,&lt;F),^(&quot;hideStatusString&quot;,&lt;F),^(&quot;Show Studies &quot;,&lt;F),^(&quot;showWicksHeikinAshi&quot;,&lt;F),^(&quot;Alerts&quot;,&lt;F),^(&quot;Chart scale&quot;,&lt;F),^(&quot;Fit High/Low&quot;,&lt;F),^(&quot;Orders&quot;,&lt;F),^(&quot;Use Log Scale &quot;,&lt;F),^(&quot;Fit Study Markers to Screen&quot;,&lt;F),^(&quot;Fit Alerts&quot;,&lt;F),^(&quot;Fit patterns&quot;,&lt;F),^(&quot;Percentage View&quot;,&lt;F),^(&quot;Make Auto Zoom &quot;,&lt;F),^(&quot;Show Year Marking Line&quot;,&lt;F),^(&quot;Show Rollover Line&quot;,&lt;F),^(&quot;Show High/Low Bubbles &quot;,&lt;F),^(&quot;Snap mode&quot;,&lt;F),^(&quot;highlightStudies&quot;,&lt;F),^(&quot;Overlapped Volume&quot;,&lt;F),^(&quot;Show Symbol Logo&quot;,&lt;F),^(&quot;Show Last Price Bubble &quot;,&lt;F),^(&quot;emphasizeDigitMP&quot;,&lt;F),^(&quot;Snap crosshairs to&quot;,&lt;F),^(&quot;Show grid&quot;,&lt;F),^(&quot;showWicksCandle&quot;,&lt;F),^(&quot;Show trades&quot;,&lt;F),^(&quot;highlightSeasons&quot;,&lt;F),^(&quot;Snap drawings to&quot;,&lt;F),^(&quot;Extend Order/Alert Line to Left&quot;,&lt;F)},showBubbles=&lt;F,showGrid=&lt;F,showTradeExecution=&lt;T,step=6.097560975609756d,suppressAutoZoom=&lt;T},forexStyleSettings.shortCuts.^(&quot;Show Volume Subgraph&quot;,&lt;F),futuresStyleSettings{adjustForContractChanges=&lt;T,highlightExtendedHours=&lt;T,shortCuts{^(&quot;adjustForContractChanges&quot;,&lt;F),^(&quot;Show Open Interest&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,&lt;F),^(&quot;showContractChangeEvents&quot;,&lt;F),^(&quot;futures_daily_close_price&quot;,&lt;F),^(&quot;Show Options&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,&lt;F),^(&quot;startAtMarketOpen&quot;,&lt;F)},showOptions=&lt;T},optionsStyleSettings.shortCuts{^(&quot;Show Open Interest&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,&lt;F),^(&quot;Show Theo Price&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,&lt;F),^(&quot;startAtMarketOpen&quot;,&lt;F)},otherStyleSettings{shortCuts{^(&quot;Show Social Sentiment&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,&lt;F),^(&quot;Show Options&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,&lt;F),^(&quot;Show Corporate Actions&quot;,&lt;F),^(&quot;Show CNBC Video&quot;,&lt;F),^(&quot;startAtMarketOpen&quot;,&lt;F),^(&quot;adjustForDividends&quot;,&lt;F)},showVolume=&lt;F}},subgraphModels{!get(#%4.SubgraphId(&quot;Symbol&quot;)){height=236,storableIndicators{+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2017-2021\n#\n\ninput price = close;\ninput length = 9;\ninput displace = 0;\ninput showBreakoutSignals = no;\n\nplot AvgExp = ExpAverage(price[-displace], length);\nplot UpSignal = price crosses above AvgExp;\nplot DownSignal = price crosses below AvgExp;\n\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\nAvgExp.SetDefaultColor(GetColor(1));\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);&quot;,name=&quot;MovAvgExponential&quot;}){hidden=&lt;T,inputsMap:TreeMap0{^(&quot;length&quot;,20),^(&quot;price&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap0,plots{0:{color=!%2.CustomColor.findByIndex(&quot;12&quot;)}}}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2017-2021\n#\n\ninput price = close;\ninput length = 9;\ninput displace = 0;\ninput showBreakoutSignals = no;\n\nplot SMA = Average(price[-displace], length);\nplot UpSignal = price crosses above SMA;\nplot DownSignal = price crosses below SMA;\n\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\nSMA.SetDefaultColor(GetColor(1));\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);&quot;,name=&quot;SimpleMovingAvg&quot;}){inputsMap:TreeMap1{^(&quot;length&quot;,200),^(&quot;price&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap1,plots{0:{color=!%2.CustomColor.findByIndex(&quot;13&quot;)}}}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# @new\n# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2011-2021\n#\n\ninput numDevDn = -2.0;\ninput numDevUp = 2.0;\ninput timeFrame = {default DAY, WEEK, MONTH};\n\ndef cap = getAggregationPeriod();\ndef errorInAggregation =\n    timeFrame == timeFrame.DAY and cap &gt;= AggregationPeriod.WEEK or\n    timeFrame == timeFrame.WEEK and cap &gt;= AggregationPeriod.MONTH;\nassert(!errorInAggregation, \&quot;timeFrame should be not less than current chart aggregation period\&quot;);\n\ndef yyyyMmDd = getYyyyMmDd();\ndef periodIndx;\nswitch (timeFrame) {\ncase DAY:\n    periodIndx = yyyyMmDd;\ncase WEEK:\n    periodIndx = Floor((daysFromDate(first(yyyyMmDd)) + getDayOfWeek(first(yyyyMmDd))) / 7);\ncase MONTH:\n    periodIndx = roundDown(yyyyMmDd / 100, 0);\n}\ndef isPeriodRolled = compoundValue(1, periodIndx != periodIndx[1], yes);\n\ndef volumeSum;\ndef volumeVwapSum;\ndef volumeVwap2Sum;\n\nif (isPeriodRolled) {\n    volumeSum = volume;\n    volumeVwapSum = volume * vwap;\n    volumeVwap2Sum = volume * Sqr(vwap);\n} else {\n    volumeSum = compoundValue(1, volumeSum[1] + volume, volume);\n    volumeVwapSum = compoundValue(1, volumeVwapSum[1] + volume * vwap, volume * vwap);\n    volumeVwap2Sum = compoundValue(1, volumeVwap2Sum[1] + volume * Sqr(vwap), volume * Sqr(vwap));\n}\ndef price = volumeVwapSum / volumeSum;\ndef deviation = Sqrt(Max(volumeVwap2Sum / volumeSum - Sqr(price), 0));\n\nplot VWAP = price;\nplot UpperBand = price + numDevUp * deviation;\nplot LowerBand = price + numDevDn * deviation;\n\nVWAP.setDefaultColor(getColor(0));\nUpperBand.setDefaultColor(getColor(2));\nLowerBand.setDefaultColor(getColor(4));&quot;,name=&quot;VWAP&quot;}){plots{0:{color=@CustomColor3,lineStyle=2,lineWeight=2},1:{hiding=&lt;T},2:{hiding=&lt;T}}}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2017-2021\n#\n\ninput price = close;\ninput length = 9;\ninput displace = 0;\ninput showBreakoutSignals = no;\n\nplot AvgExp = ExpAverage(price[-displace], length);\nplot UpSignal = price crosses above AvgExp;\nplot DownSignal = price crosses below AvgExp;\n\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\nAvgExp.SetDefaultColor(GetColor(1));\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);&quot;,name=&quot;MovAvgExponential&quot;}){hidden=&lt;T,inputsMap:TreeMap2{^(&quot;price&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap2}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2017-2021\n#\n\ninput price = close;\ninput length = 9;\ninput displace = 0;\ninput showBreakoutSignals = no;\n\nplot SMA = Average(price[-displace], length);\nplot UpSignal = price crosses above SMA;\nplot DownSignal = price crosses below SMA;\n\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\nSMA.SetDefaultColor(GetColor(1));\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);&quot;,name=&quot;SimpleMovingAvg&quot;}){inputsMap:TreeMap3{^(&quot;length&quot;,20),^(&quot;price&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap3,plots{0:{color=#%2.CustomColor(#%3.Color(255,153,102,255))}}}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# Buythedip + Selltherip Indicator (Upper)\n# Assembled by BenTen at UseThinkScript.com\n# Modified by BoarTrades #Boar6916 on discord\n# &lt;NOTES&gt;\n# Based on the concept of \&quot;Synethetic VIX\&quot; by Larry Williams\n# This software is licensed for individual use only.\n# NOT FOR REDISTRIBUTION PRIVATE/CONFIDENTIAL\n# Copyright (c) 2020 useThinkScript LLC\n\ninput length = 22;\ninput BTD_meter = yes;\ninput STR_meter = yes;\ninput arrows = yes;\ninput color_change = yes;\n\n# BTD Plot indicator\ndef BTD_value = ((high - Lowest(close[1], length)) / Lowest(close[1], length)) * 100;\ndef buythedip = BTD_value;\ndef Zeroline = 0;\ndef BTD_condition = buythedip crosses above Zeroline;\n\n# STR Plot indicator\ndef STR_value = ((low - highest(close[1], length)) / highest(close[1], length)) * 100;\ndef selltherip = STR_value;\ndef STR_condition = selltherip crosses below Zeroline;\n\nAddLabel(BTD_meter and yes, Concat(\&quot;BTD = \&quot;, buythedip), color.CYAN);\nAddLabel(STR_meter and yes, Concat(\&quot;STR = \&quot;, selltherip), color.MAGENTA);\n\n# BTD Plot arrows\nplot UpSignal = if arrows and BTD_condition then buythedip else Double.NaN;\nUpSignal.SetDefaultColor(Color.Orange);\nUpSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\n\n# STR Plot arrows\nplot DnSignal = if arrows and STR_condition then selltherip else Double.NaN;\nDnSignal.SetDefaultColor(Color.RED);\nDnSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);&quot;,name=&quot;_acdb191b_7565_36d8_9406_cd07ae712c77&quot;}){plots{0:{color=@CustomColor4,lineWeight=3},1:{color=@CustomColor5,lineWeight=3}}}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2017-2021\n#\n\ninput price = close;\ninput length = 9;\ninput displace = 0;\ninput showBreakoutSignals = no;\n\nplot AvgExp = ExpAverage(price[-displace], length);\nplot UpSignal = price crosses above AvgExp;\nplot DownSignal = price crosses below AvgExp;\n\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\nAvgExp.SetDefaultColor(GetColor(1));\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);&quot;,name=&quot;MovAvgExponential&quot;})),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;\n# Custom Pre-Market Levels ThinkScript by 3RG Coding for #PBP\n# edited 4/1/19\n\n# Inputs\n\ninput PlotPreMktLinesHrsPastOpen = 0;\n\ninput PlotRegMktLinesHrsPastOpen = 0;\n\ninput PlotYesterdayMktLinesHrsPastOpen = 0;\n\ninput PlotActiveRegMktLinesOnPrevDays = 0;\n\ninput DisplayPreMarketPriceBubbles = yes;\n\ninput DisplayCurrentDayPriceBubbles = yes;\n\ninput DisplayPreviousDayPriceBubbles = yes;\n\n# Pre market / Regular market definitions\n\ndef ExtPMOut = PlotPreMktLinesHrsPastOpen * 3610000;\n\ndef ExtRMOut = PlotRegMktLinesHrsPastOpen * 3610000;\n\ndef ExtYMOut = PlotYesterdayMktLinesHrsPastOpen * 3610000;\n\ndef MktPlot = GetLastDay() - PlotActiveRegMktLinesOnPrevDays &lt;= GetDay() and GetLastYear() - 0 &lt;= GetYear();\n\ndef PMhrs = RegularTradingStart (GetYYYYMMDD()) &gt; GetTime();\n\ndef RMhrs = RegularTradingStart (GetYYYYMMDD()) &lt; GetTime();\n\ndef PMplots = RegularTradingStart (GetYYYYMMDD()) &gt; GetTime() - ExtPMOut;\n\ndef RMplots = RegularTradingStart (GetYYYYMMDD()) &gt; GetTime() - ExtRMOut;\n\ndef YMplots = RegularTradingStart (GetYYYYMMDD()) &gt; GetTime() - ExtYMOut;\n\ndef PMStart = RMhrs[1] and PMhrs;\n\ndef RMStart = PMhrs[1] and RMhrs;\n\ndef PMHigh = CompoundValue(1, if PMStart then high else if PMhrs then Max(high, PMHigh[1]) else PMHigh[1], 0);\n\ndef PMLow = CompoundValue (1, if PMStart then low else if PMhrs then Min(low, PMLow[1]) else PMLow[1], 0);\n\ndef bar = BarNumber();\n\ndef highBar = if PMhrs and high == PMHigh then bar else Double.NaN;\n\ndef lowBar = if PMhrs and low == PMLow then bar else Double.NaN;\n\n# Current price line tracker code\n\nplot PriceLine = HighestAll (if IsNaN(close[-1]) and !IsNaN(close) then close else Double.NaN);\n\nPriceLine.SetDefaultColor (Color.GRAY);\nPriceLine.SetStyle (Curve.SHORT_DASH);\n\n# Pre market open code\n\ndef HidePMO = if GetAggregationPeriod() &lt;= AggregationPeriod.FIFTEEN_MIN then yes else no;\n\ndef day = GetDay();\n\ndef PMopenBar = day != day[1];\n\ndef PMOpen = if PMopenBar then open else PMOpen[1];\n\nplot PMO = if HidePMO and MktPlot and PMplots then PMOpen else Double.NaN;\n\nPMO.SetDefaultColor (CreateColor (234, 136, 255));\n\n# Pre market high code\n\ndef HidePMH = if GetAggregationPeriod() &lt;= AggregationPeriod.FIFTEEN_MIN then yes else no;\n\ndef PMHighBar = if bar == HighestAll(highBar) then PMHigh else PMHighBar[1];\n\nplot PMH = if HidePMH and PMplots and PMHighBar &gt; 0 then PMHighBar else Double.NaN;\n\nPMH.SetDefaultColor (CreateColor (116, 189, 232));\n\n# Pre market low code\n\ndef HidePML = if GetAggregationPeriod() &lt;= AggregationPeriod.FIFTEEN_MIN then yes else no;\n\ndef PMLowBar = if bar == HighestAll(lowBar) then PMLow else PMLowBar[1];\n\nplot PML = if HidePML and PMplots and PMLowBar &gt; 0 then PMLowBar else Double.NaN;\n\nPML.SetDefaultColor (CreateColor (116, 189, 232));\n\n# Current day open code\n\ndef HideCDO = if GetAggregationPeriod() &lt;= AggregationPeriod.FIFTEEN_MIN then yes else no;\n\ndef CDOpen = if !day then Double.NaN else open (period = \&quot;day\&quot;);\n\nplot CDO = if HideCDO and MktPlot and RMplots then CDOpen else Double.NaN;\n\nCDO.SetDefaultColor (Color.WHITE);\nCDO.SetStyle (Curve.SHORT_DASH);\n\n#Current day high code\n\ndef HideCDH = if GetAggregationPeriod() &lt;= AggregationPeriod.FIFTEEN_MIN then yes else no;\n\ndef CDHigh = if !day then Double.NaN else high (period = \&quot;day\&quot;);\n\nplot CDH = if HideCDH and MktPlot and RMplots then CDHigh else Double.NaN;\n\nCDH.SetDefaultColor (Color.GREEN);\nCDH.SetStyle (Curve.SHORT_DASH);\n\n#Current day low code\n\ndef HideCDL = if GetAggregationPeriod() &lt;= AggregationPeriod.FIFTEEN_MIN then yes else no;\n\ndef CDLow = if !day then Double.NaN else low (period = \&quot;day\&quot;);\n\nplot CDL = if HideCDL and MktPlot and RMplots then CDLow else Double.NaN;\n\nCDL.SetDefaultColor (Color.RED);\nCDL.SetStyle (Curve.SHORT_DASH);\n\n#Previous day high code\n\ndef HidePDH = if GetAggregationPeriod() &lt;= AggregationPeriod.FIFTEEN_MIN then yes else no;\n\ndef PDHigh = if !day then Double.NaN else high (period = \&quot;day\&quot;)[1];\n\nplot PDH = if HidePDH and MktPlot and YMplots then PDHigh else Double.NaN;\n\nPDH.SetDefaultColor (CreateColor (153, 255, 153));\nPDH.SetStyle (Curve.SHORT_DASH);\n\n#Previous day low code\n\ndef HidePDL = if GetAggregationPeriod() &lt;= AggregationPeriod.FIFTEEN_MIN then yes else no;\n\ndef PDLow = if !day then Double.NaN else low (period = \&quot;day\&quot;)[1];\n\nplot PDL = if HidePDL and MktPlot and YMplots then PDLow else Double.NaN;\n\nPDL.SetDefaultColor (CreateColor (255, 126, 156));\nPDL.SetStyle (Curve.SHORT_DASH);\n\n#Previous day close code\n\ndef HidePDC = if GetAggregationPeriod() &lt;= AggregationPeriod.FIFTEEN_MIN then yes else no;\n\ndef PDClose = if !day then Double.NaN else close (period = \&quot;day\&quot;)[1];\n\nplot PDC = if HidePDC and MktPlot and YMplots then PDClose else Double.NaN;\n\nPDC.SetDefaultColor (CreateColor (231, 190, 0));\nPDC.SetStyle (Curve.SHORT_DASH);\n\n#Pre market bubbles code\n\ndef PMBubbles = if GetAggregationPeriod() &lt;= AggregationPeriod.FIFTEEN_MIN then DisplayPreMarketPriceBubbles else no;\n\nAddChartBubble (PMopenBar and PMBubbles, PMO, (\&quot;PMO:\&quot;) + PMO,\nCreateColor (204, 204, 255));\n\nAddChartBubble (highBar and PMBubbles, PMH, (\&quot;PMH:\&quot;) + PMH, \nCreateColor (204, 204, 255));\n\nAddChartBubble (lowBar and PMBubbles, PML, (\&quot;PML:\&quot;) + PML, \nCreateColor (204, 204, 255), no);\n\n#Current day bubbles code\n\ndef CDBubbles = if GetAggregationPeriod() &lt;= AggregationPeriod.FIFTEEN_MIN then DisplayCurrentDayPriceBubbles else no;\n\ndef CDFirstBar = SecondsFromTime (0800) &gt;= 0 and SecondsFromTime (0800) &lt; 60;\n\nAddChartBubble (CDFirstBar and CDBubbles, CDO, (\&quot;CDO:\&quot;) + CDO, \nCreateColor (204, 204, 255));\n\nAddChartBubble (CDFirstBar and CDBubbles, CDH, (\&quot;CDH:\&quot;) + CDH, \nCreateColor (204, 204, 255));\n\nAddChartBubble (CDFirstBar and CDBubbles, CDL, (\&quot;CDL:\&quot;) + CDL, \nCreateColor (204, 204, 255), no);\n\n#Previous day bubbles code\n\ndef PDBubbles = if GetAggregationPeriod() &lt;= AggregationPeriod.FIFTEEN_MIN then DisplayPreviousDayPriceBubbles else no;\n\ndef PDFirstBar = SecondsFromTime (0700) &gt;= 0 and SecondsFromTime (0700) &lt; 60;\n\nAddChartBubble (PDFirstBar and PDBubbles, PDH, (\&quot;PDH:\&quot;) + PDH, \nCreateColor (204, 204, 255));\n\nAddChartBubble (PDFirstBar and PDBubbles, PDL, (\&quot;PDL:\&quot;) + PDL, \nCreateColor (204, 204, 255), no);\n\nAddChartBubble (PDFirstBar and PDBubbles, PDC, (\&quot;PDC:\&quot;) + PDC, \nCreateColor (204, 204, 255));\n\n\n&quot;,name=&quot;_df68278a_cb03_38d8_89d9_fa1dd6e19a1d&quot;}){inputsMap:TreeMap4{^(&quot;DisplayCurrentDayPriceBubbles&quot;,&lt;F),^(&quot;DisplayPreMarketPriceBubbles&quot;,&lt;F),^(&quot;DisplayPreviousDayPriceBubbles&quot;,&lt;F),^(&quot;PlotPreMktLinesHrsPastOpen&quot;,1)},inputsMap=@TreeMap4,plots{0:{color=#%2.CustomColor(#%3.Color(0,255,0,255))},1:{color=@CustomColor6,lineStyle=2},2:{color=#%2.CustomColor(#%3.Color(0,51,204,255)),lineWeight=2},3:{color=!%2.CustomColor.findByIndex(&quot;15&quot;),lineWeight=2},7:{lineStyle=2,lineWeight=3},8:{lineStyle=2,lineWeight=3},9:{color=#%2.CustomColor(#%3.Color(0,0,0,255)),lineStyle=2,lineWeight=3}}}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence:ScriptEssence0{body=&quot;# blackFLAG FTS SwingArms\n# StudyName: blackFLAG_Futures_SwingArm_ATRTrail\n# My preferred setting is 28 / 5 FOR ALL TIMEFRAMES\n# Edited by: Jose Azcarate\n# blackFLAG Futures Trading - FOR EDUCATIONAL PURPOSES ONLY\n# TWITTER: @blackflagfuture\n\n# SwingArm Watchlist by [USER=278]@fishstick1229[/USER]\n# * Updated code below is to be used for custom watchlist column only **\n\n#Updated text display by [USER=4199]@Fishbed[/USER]\n\n# Combined Watchlist code to produce in chart label.\n\n# 6/25/20 Updated by Scott K @sirrous\n# Added overlapping swingarm timeframe notifications and alerts\n\n# Set the aggperiod to the timeframe you want the zone to monitor for an overlap.  When the defined aggperiod\'s swingarm overlaps with the chart and price moves into that then overlap you will be notified.\n# Labels only display for higher time periods (ie 15m aggperiod on a 10 min chart.\n# Add the study multiple times and set them to different aggperoids to montior multiple times.\n\n\ninput high_aggperiod = AggregationPeriod.MIN;\ninput Enable_Zone_Overlap_Notifications = no;\ninput current_period_trigger_zone = {default \&quot;Zone 4\&quot;, \&quot;Zone 3\&quot;, \&quot;Zone 2\&quot;};\ninput trailType = {default modified, unmodified};\ninput ATRPeriod = 28;\ninput ATRFactor = 5;\ninput firstTrade = {default long, short};\ninput averageType = AverageType.WILDERS;\n\ninput fib1Level = 61.8;\ninput fib2Level = 78.6;\ninput fib3Level = 88.6;\n\nAssert(ATRFactor &gt; 0, \&quot;\'atr factor\' must be positive: \&quot; + ATRFactor);\n\n## Current Chart Agg Period\n\ndef HiLo = Min(high - low, 1.5 * Average(high - low, ATRPeriod));\ndef HRef = if low &lt;= high[1]\n    then high - close[1]\n    else (high - close[1]) - 0.5 * (low - high[1]);\ndef LRef = if high &gt;= low[1]\n    then close[1] - low\n    else (close[1] - low) - 0.5 * (low[1] - high);\n\ndef trueRange;\nswitch (trailType) {\ncase modified:\n    trueRange = Max(HiLo, Max(HRef, LRef));\ncase unmodified:\n    trueRange = TrueRange(high, close, low);\n}\ndef loss = ATRFactor * MovingAverage(averageType, trueRange, ATRPeriod);\n\ndef state = {default init, long, short};\ndef trail;\nswitch (state[1]) {\ncase init:\n    if (!IsNaN(loss)) {\n        switch (firstTrade) {\n        case long:\n            state = state.long;\n            trail = close - loss;\n        case short:\n            state = state.short;\n            trail = close + loss;\n    }\n    } else {\n        state = state.init;\n        trail = Double.NaN;\n    }\ncase long:\n    if (close &gt; trail[1]) {\n        state = state.long;\n        trail = Max(trail[1], close - loss);\n    } else {\n        state = state.short;\n        trail = close + loss;\n    }\ncase short:\n    if (close &lt; trail[1]) {\n        state = state.short;\n        trail = Min(trail[1], close + loss);\n    } else {\n        state = state.long;\n        trail = close - loss;\n    }\n}\n\ndef BuySignal = Crosses(state == state.long, 0, CrossingDirection.ABOVE);\ndef SellSignal = Crosses(state == state.short, 0, CrossingDirection.ABOVE);\n\ndef ex = if BuySignal then high else if SellSignal then low else if state == state.long then Max(ex[1], high) else if state == state.short then Min(ex[1], low) else ex[1];\n\ndef TrailingStop = trail;\ndef f1 = ex + (trail - ex) * fib1Level / 100;\ndef f2 = ex + (trail - ex) * fib2Level / 100;\ndef f3 = ex + (trail - ex) * fib3Level / 100;\ndef l100 = trail + 0;\ndef Fib1 = f1;\ndef Fib2 = f2;\ndef Fib3 = f3;\n\ndef bullAboveZone = state == state.long and close &gt; Fib1;\ndef bullZone2 = state == state.long and close &lt;= Fib1 and close &gt; Fib2;\ndef bullZone3 = state == state.long and close &lt;= Fib2 and close &gt; Fib3;\ndef bullZone4 = state == state.long and close &lt;= Fib3 and close &gt; TrailingStop;\n\ndef bearZone2 = state == state.short and close &gt;= Fib1 and close &lt; Fib2;\ndef bearZone3 = state == state.short and close &gt;= Fib2 and close &lt; Fib3;\ndef bearZone4 = state == state.short and close &gt;= Fib3 and close &lt; TrailingStop;\n\n## High Agg Period\n\ndef highagg_high = high(period = high_aggperiod);\ndef highagg_low = low(period = high_aggperiod);\ndef highagg_close = close(period = high_aggperiod);\n\ndef highagg_HiLo = Min(highagg_high - highagg_low, 1.5 * Average(highagg_high - highagg_low, ATRPeriod));\ndef highagg_HRef = if highagg_low &lt;= highagg_high[1]\n    then highagg_high - highagg_close[1]\n    else (highagg_high - highagg_close[1]) - 0.5 * (highagg_low - highagg_high[1]);\ndef highagg_LRef = if highagg_high &gt;= highagg_low[1]\n    then highagg_close[1] - highagg_low\n    else (highagg_close[1] - highagg_low) - 0.5 * (highagg_low[1] - highagg_high);\n\ndef highagg_trueRange;\nswitch (trailType) {\ncase modified:\n    highagg_trueRange = Max(highagg_HiLo, Max(highagg_HRef, highagg_LRef));\ncase unmodified:\n    highagg_trueRange = TrueRange(highagg_high, highagg_close, highagg_low);\n}\ndef highagg_loss = ATRFactor * MovingAverage(averageType, highagg_trueRange, ATRPeriod);\n\ndef highagg_state = {default init, long, short};\ndef highagg_trail;\nswitch (highagg_state[1]) {\ncase init:\n    if (!IsNaN(highagg_loss)) {\n        switch (firstTrade) {\n        case long:\n            highagg_state = highagg_state.long;\n            highagg_trail = highagg_close - highagg_loss;\n        case short:\n            highagg_state = highagg_state.short;\n            highagg_trail = highagg_close + highagg_loss;\n    }\n    } else {\n        highagg_state = highagg_state.init;\n        highagg_trail = Double.NaN;\n    }\ncase long:\n    if (highagg_close &gt; highagg_trail[1]) {\n        highagg_state = highagg_state.long;\n        highagg_trail = Max(highagg_trail[1], highagg_close - highagg_loss);\n    } else {\n        highagg_state = highagg_state.short;\n        highagg_trail = highagg_close + highagg_loss;\n    }\ncase short:\n    if (highagg_close &lt; highagg_trail[1]) {\n        highagg_state = highagg_state.short;\n        highagg_trail = Min(highagg_trail[1], highagg_close + highagg_loss);\n    } else {\n        highagg_state = highagg_state.long;\n        highagg_trail = highagg_close - highagg_loss;\n    }\n}\n\ndef highagg_BuySignal = Crosses(highagg_state == highagg_state.long, 0, CrossingDirection.ABOVE);\ndef highagg_SellSignal = Crosses(highagg_state == highagg_state.short, 0, CrossingDirection.ABOVE);\n\ndef highagg_ex = if highagg_BuySignal then highagg_high else if highagg_SellSignal then highagg_low else if highagg_state == highagg_state.long then Max(highagg_ex[1], highagg_high) else if highagg_state == highagg_state.short then Min(highagg_ex[1], highagg_low) else highagg_ex[1];\n\ndef highagg_TrailingStop = highagg_trail;\ndef highagg_f1 = highagg_ex + (highagg_trail - highagg_ex) * fib1Level / 100;\ndef highagg_f2 = highagg_ex + (highagg_trail - highagg_ex) * fib2Level / 100;\ndef highagg_f3 = highagg_ex + (highagg_trail - highagg_ex) * fib3Level / 100;\ndef highagg_l100 = highagg_trail + 0;\ndef highagg_Fib1 = highagg_f1;\ndef highagg_Fib2 = highagg_f2;\ndef highagg_Fib3 = highagg_f3;\n\ndef highagg_bullAboveZone = highagg_state == highagg_state.long and highagg_close &gt; highagg_Fib1;\ndef highagg_bullZone2 = highagg_state == highagg_state.long and highagg_close &lt;= highagg_Fib1 and highagg_close &gt; highagg_Fib2;\ndef highagg_bullZone3 = highagg_state == highagg_state.long and highagg_close &lt;= highagg_Fib2 and highagg_close &gt; highagg_Fib3;\ndef highagg_bullZone4 = highagg_state == highagg_state.long and highagg_close &lt;= highagg_Fib3 and highagg_close &gt; highagg_TrailingStop;\n\ndef highagg_bearZone2 = highagg_state == highagg_state.short and highagg_close &gt;= highagg_Fib1 and highagg_close &lt; highagg_Fib2;\ndef highagg_bearZone3 = highagg_state == highagg_state.short and highagg_close &gt;= highagg_Fib2 and highagg_close &lt; highagg_Fib3;\ndef highagg_bearZone4 = highagg_state == highagg_state.short and highagg_close &gt;= highagg_Fib3 and highagg_close &lt; highagg_TrailingStop;\n\nAddLabel(yes, Concat(if high_aggperiod &lt; 3600000 then high_aggperiod / 60000 + \&quot;m\&quot; else if high_aggperiod &lt; 86400000 then high_aggperiod / 3600000 + \&quot;h\&quot; else if high_aggperiod &lt; 604800000 then high_aggperiod / 86400000 + \&quot;D\&quot; else if high_aggperiod &lt; 2592000000 then high_aggperiod / 604800000 + \&quot;Wk\&quot; else if high_aggperiod &lt; 31536000000 then high_aggperiod / 2592000000 + \&quot;Mo\&quot; else high_aggperiod / 31536000000 + \&quot;Yr\&quot;, if highagg_bullZone2 then \&quot;: ZONE 2\&quot;  else if highagg_bullZone3 then \&quot;: ZONE 3\&quot;  else if highagg_bullZone4 then \&quot;: ZONE 4\&quot; else if highagg_bearZone2 then \&quot;: ZONE 2\&quot;  else if highagg_bearZone3 then \&quot;: ZONE 3\&quot;  else if highagg_bearZone4 then \&quot;: ZONE 4\&quot; else \&quot;\&quot;), if highagg_state == highagg_state.long then Color.GREEN else Color.RED);\n\ndef action_confirmed;\n\nswitch (current_period_trigger_zone) {\ncase \&quot;Zone 4\&quot;:\n    if (state == state.long and highagg_state == highagg_state.long) {\n        if (bullZone4 and (highagg_bullZone2 or highagg_bullZone3 or highagg_bullZone4)) {\n            action_confirmed = 4;\n        } else {\n            action_confirmed = 0;\n        }\n    } else if (state == state.short and highagg_state == highagg_state.short) {\n        if (bearZone4 and (highagg_bearZone2 or highagg_bearZone3 or highagg_bearZone4)) {\n            action_confirmed = -4;\n        } else {\n            action_confirmed = 0;\n        }\n\n    } else {\n        action_confirmed = 0;\n    }\ncase \&quot;Zone 3\&quot;:\n    if (state == state.long and highagg_state == highagg_state.long) {\n        if ((bullZone3 or bullZone4) and (highagg_bullZone2 or highagg_bullZone3 or highagg_bullZone4)) {\n            action_confirmed = 3;\n        } else {\n            action_confirmed = 0;\n        }\n    } else if (state == state.short and highagg_state == highagg_state.short) {\n        if ((bearZone3 or bearZone4) and (highagg_bearZone2 or highagg_bearZone3 or highagg_bearZone4)) {\n            action_confirmed = -3;\n        } else {\n            action_confirmed = 0;\n        }\n\n    } else {\n        action_confirmed = 0;\n    }\ncase \&quot;Zone 2\&quot;:\n    if (state == state.long and highagg_state == highagg_state.long) {\n        if ((bullZone2 or (bullZone3 or bullZone4)) and (highagg_bullZone2 or highagg_bullZone3 or highagg_bullZone4)) {\n            action_confirmed = 2;\n        } else {\n            action_confirmed = 0;\n        }\n    } else if (state == state.short and highagg_state == highagg_state.short) {\n        if ((bearZone2 or (bearZone3 or bearZone4)) and (highagg_bearZone2 or highagg_bearZone3 or highagg_bearZone4)) {\n            action_confirmed = -2;\n        } else {\n            action_confirmed = 0;\n        }\n\n    } else {\n        action_confirmed = 0;\n    }\n}\n\nAddLabel((action_confirmed and Enable_Zone_Overlap_Notifications), if action_confirmed &lt; -1 then \&quot;SELL CONDITION CONFIRMED - Price entered overlapping zones!\&quot; else if action_confirmed &gt; 1 then \&quot;BUY CONDITION CONFIRMED - Price entered overlapping zones!\&quot; else \&quot;Waiting\&quot;, if action_confirmed &gt; 1 then Color.GREEN else if action_confirmed &lt; -1 then Color.RED else Color.WHITE);\n#Debug Label\n#AddLabel((action_confirmed or always_show_label), action_confirmed, Color.White);\n\n#add plot for scanner\nplot sell_confirm = if (action_confirmed &lt; -1) then high else Double.NaN;\nsell_confirm.SetDefaultColor(Color.WHITE);\nsell_confirm.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);\nsell_confirm.SetLineWeight(1);\nsell_confirm.Hide();\n\nplot buy_confirm = if (action_confirmed &gt; 1) then low else Double.NaN;\nbuy_confirm.SetDefaultColor(Color.WHITE);\nbuy_confirm.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nbuy_confirm.SetLineWeight(1);\nbuy_confirm.Hide();\n\n#add alert\nAlert(sell_confirm and Enable_Zone_Overlap_Notifications, \&quot;SELL CONDITION CONFIRMED - Price entered overlapping zones!\&quot;, Alert.Once, Sound.Ring);\nAlert(buy_confirm and Enable_Zone_Overlap_Notifications, \&quot;BUY CONDITION CONFIRMED - Price entered overlapping zones!\&quot;, Alert.Once, Sound.Ring);&quot;,name=&quot;_0d9d3fe3_219f_35fe_9e38_3ef74c9aaec4&quot;}){alerts:LocalAlertArray0,alerts=@LocalAlertArray0}),+(!%5.CompiledStudy.resolveStudy(@ScriptEssence0){alerts:LocalAlertArray1,alerts=@LocalAlertArray1,inputsMap:TreeMap5{^(&quot;high_aggperiod&quot;,&quot;TWO_MIN&quot;)},inputsMap=@TreeMap5}),+(!%5.CompiledStudy.resolveStudy(@ScriptEssence0){alerts:LocalAlertArray2,alerts=@LocalAlertArray2,inputsMap:TreeMap6{^(&quot;high_aggperiod&quot;,&quot;THREE_MIN&quot;)},inputsMap=@TreeMap6}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;#Lower Volume with RSI by CashPrince\n\ndeclare on_volume;\n\n#Inputs \n\ninput Show30DayAvg = yes;\ninput ShowTodayVolume =  yes;\ninput ShowPercentOf30DayAvg = yes;\ninput UnusualVolumePercent = 200;\ninput Show30BarAvg = yes;\ninput ShowCurrentBar = yes;\ninput ShowPercentOf30BarAvg = yes;\ninput ShowSellVolumePercent = yes;\n\ndef O = open;\ndef H = high;\ndef C = close;\ndef L = low; \ndef V = volume;\ndef buying = V*(C-L)/(H-L);\ndef selling = V*(H-C)/(H-L);\n\n# Selling Volume\n\nPlot SellVol = selling; \nSellVol.setPaintingStrategy(PaintingStrategy.Histogram);\nSellVol.SetDefaultColor(Color.Red);\nSellVol.HideTitle();\nSellVol.HideBubble();\nSellVol.SetLineWeight(5);\n\n# Total Volume\n\nPlot BuyVol =  volume; \nBuyVol.setPaintingStrategy(PaintingStrategy.Histogram);\nBuyVol.SetDefaultColor(Color.Dark_Green);\nBuyVol.HideTitle();\nBuyVol.HideBubble();\nBuyVol.SetLineWeight(5);\n\n#Volume Data\n\ndef volLast30DayAvg = (volume(period = \&quot;DAY\&quot;)[1] + volume(period = \&quot;DAY\&quot;)[2] + volume(period = \&quot;DAY\&quot;)[3] + volume(period = \&quot;DAY\&quot;)[4] + volume(period = \&quot;DAY\&quot;)[5] + volume(period = \&quot;DAY\&quot;)[6] + volume(period = \&quot;DAY\&quot;)[7] + volume(period = \&quot;DAY\&quot;)[8] + volume(period = \&quot;DAY\&quot;)[9] + volume(period = \&quot;DAY\&quot;)[10] + volume(period = \&quot;DAY\&quot;)[11] + volume(period = \&quot;DAY\&quot;)[12] + volume(period = \&quot;DAY\&quot;)[13] + volume(period = \&quot;DAY\&quot;)[14] + volume(period = \&quot;DAY\&quot;)[15] + volume(period = \&quot;DAY\&quot;)[16] + volume(period = \&quot;DAY\&quot;)[17] + volume(period = \&quot;DAY\&quot;)[18] + volume(period = \&quot;DAY\&quot;)[19] + volume(period = \&quot;DAY\&quot;)[20] + volume(period = \&quot;DAY\&quot;)[21] + volume(period = \&quot;DAY\&quot;)[22] + volume(period = \&quot;DAY\&quot;)[23] + volume(period = \&quot;DAY\&quot;)[24] + volume(period = \&quot;DAY\&quot;)[25] + volume(period = \&quot;DAY\&quot;)[26] + volume(period = \&quot;DAY\&quot;)[27] + volume(period = \&quot;DAY\&quot;)[28] + volume(period = \&quot;DAY\&quot;)[29] + volume(period = \&quot;DAY\&quot;)[30]) / 30;\ndef today = volume(period = \&quot;DAY\&quot;);\ndef percentOf30Day = Round((today / volLast30DayAvg) * 100, 0);\ndef avg30Bars = (volume[1] + volume[2] + volume[3] + volume[4] + volume[5] + volume[6] + volume[7] + volume[8] + volume[9] + volume[10] + volume[11] + volume[12] + volume[13] + volume[14] + volume[15] + volume[16] + volume[17] + volume[18] + volume[19] + volume[20] + volume[21] + volume[22] + volume[23] + volume[24] + volume[25] + volume[26] + volume[27] + volume[28] + volume[29] + volume[30]) / 30;\ndef curVolume = volume;\ndef percentOf30Bar = Round((curVolume / avg30Bars) * 100, 0);\ndef SellVolPercent = Round((Selling / Volume) * 100, 0);\n\n# Labels\n\nAddLabel(Show30DayAvg, \&quot;Avg 30 Days: \&quot; + Round(volLast30DayAvg, 0), Color.LIGHT_GRAY);\n\nAddLabel(ShowTodayVolume, \&quot;Today: \&quot; + today, (if percentOf30Day &gt;= UnusualVolumePercent then Color.GREEN else if percentOf30Day &gt;= 100 then Color.ORANGE else Color.LIGHT_GRAY));\n\nAddLabel(ShowPercentOf30DayAvg, percentOf30Day + \&quot;%\&quot;, (if percentOf30Day &gt;= UnusualVolumePercent then Color.GREEN else if percentOf30Day &gt;= 100 then Color.ORANGE else Color.WHITE) );\n\nAddLabel(Show30BarAvg, \&quot;Avg 30 Bars: \&quot; + Round(avg30Bars, 0), Color.LIGHT_GRAY);\n\nAddLabel(ShowCurrentBar, \&quot;Cur Bar: \&quot; + curVolume, (if percentOf30Bar &gt;= UnusualVolumePercent then Color.GREEN else if PercentOf30Bar &gt;= 100 then Color.ORANGE else Color.LIGHT_GRAY));\n\nAddLabel(ShowPercentOf30BarAvg, PercentOf30Bar + \&quot;%\&quot;, (if PercentOf30Bar &gt;= UnusualVolumePercent then Color.GREEN else if PercentOf30Bar &gt;= 100 then Color.ORANGE else Color.WHITE) );\n\nAddLabel(ShowSellVolumePercent, \&quot;Cur Bar Sell %: \&quot; + SellVolPercent, (if SellVolPercent &gt; 51 then Color.RED else if SellVolPercent &lt; 49 then Color.GREEN else Color.ORANGE));\n\ninput length = 50;\n\nplot Vol = volume;\nplot VolAvg = Average(volume, length);\n\nVol.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);\nVol.SetLineWeight(3);\nVol.DefineColor(\&quot;Up\&quot;, Color.UPTICK);\nVol.DefineColor(\&quot;Down\&quot;, Color.DOWNTICK);\nVol.AssignValueColor(if close &gt; close[1] then Vol.color(\&quot;Up\&quot;) else if close &lt; close[1] then Vol.color(\&quot;Down\&quot;) else GetColor(1));\nVolAvg.SetDefaultColor(GetColor(8));\n\n&quot;,name=&quot;_2e3e1548_bf82_3aff_b1f4_8d65d211db90&quot;}){inputsMap:TreeMap7{^(&quot;Show30BarAvg&quot;,&lt;F),^(&quot;Show30DayAvg&quot;,&lt;F),^(&quot;ShowCurrentBar&quot;,&lt;F),^(&quot;ShowTodayVolume&quot;,&lt;F)},inputsMap=@TreeMap7,plots{0:{color=#%2.CustomColor(#%3.Color(255,0,0,76)),hiding=&lt;T},1:{color=#%2.CustomColor(#%3.Color(0,100,0,76)),hiding=&lt;T},2:{hiding=&lt;T},3:{hiding=&lt;T}}}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;### xiuyu vwap cross signal with abnormal volume\n\n#declare hide_on_daily;\n\n####\n#MTF\ndef tFrame = GetAggregationPeriod();\ninput timeFrame = {default DAY, WEEK, MONTH};\ninput aggregationPeriod = AggregationPeriod.HOUR;\ninput useAutoAggegate = yes;\n\n\n\n# Variables:\n#def  =if (useAutoAggegate) then open(period = aggregationPeriod1) else open;\n\ndef AutoAGG = if tFrame &lt;  AggregationPeriod.DAY then AggregationPeriod.DAY\n             else if  tFrame &lt; AggregationPeriod.WEEK then AggregationPeriod.WEEK\n                  else AggregationPeriod.MONTH;\ndef AGG = if (!useAutoAggegate) then aggregationPeriod else AutoAGG;\n\ndef testTimeFrames = if tFrame &lt; AGG  then yes else no;\n\n#AddLabel(useAutoAggegate, if testTimeFrames  then \&quot;Time Frames Are Correct\&quot; else \&quot;Time Frames Are \n\ninput length = 10; #average volume lenght\ninput volMinimum = 50000;\ninput showPriceColor = yes;\ninput factor = 1.50; #show what factors to avgvolume \ninput nDevUp = 2.0;\ninput nDevDn = -2.0;\n\ndef avgvolume = Average(volume, length) * factor;\n\n\n#plot vwap = reference VWAP( AGG);\n#######\n\n\ndef cap = GetAggregationPeriod();\ndef errorInAggregation =\n    timeFrame == timeFrame.DAY and cap &gt;= AggregationPeriod.WEEK or\n    timeFrame == timeFrame.WEEK and cap &gt;= AggregationPeriod.MONTH;\nAssert(!errorInAggregation, \&quot;timeFrame should be not less than current chart aggregation period\&quot;);\n\ndef yyyyMmDd = GetYYYYMMDD();\ndef periodIndx;\nswitch (timeFrame) {\ncase DAY:\n    periodIndx = yyyyMmDd;\ncase WEEK:\n    periodIndx = Floor((DaysFromDate(First(yyyyMmDd)) + GetDayOfWeek(First(yyyyMmDd))) / 7);\ncase MONTH:\n    periodIndx = RoundDown(yyyyMmDd / 100, 0);\n}\ndef isPeriodRolled = CompoundValue(1, periodIndx != periodIndx[1], yes);\n\ndef volumeSum;\ndef volumeVwapSum;\ndef volumeVwap2Sum;\n\nif (isPeriodRolled) {\n    volumeSum = volume;\n    volumeVwapSum = volume * vwap;\n    volumeVwap2Sum = volume * Sqr(vwap);\n} else {\n    volumeSum = CompoundValue(1, volumeSum[1] + volume, volume);\n    volumeVwapSum = CompoundValue(1, volumeVwapSum[1] + volume * vwap, volume * vwap);\n    volumeVwap2Sum = CompoundValue(1, volumeVwap2Sum[1] + volume * Sqr(vwap), volume * Sqr(vwap));\n}\ndef price = volumeVwapSum / volumeSum;\ndef deviation = Sqrt(Max(volumeVwap2Sum / volumeSum - Sqr(price), 0));\n\nplot VWAP = price;\nplot UpperBand = price + nDevUp * deviation;\nplot LowerBand = price + nDevDn * deviation;\nplot UpperBand2 = price + (1+nDevUp) * deviation;\nplot LowerBand2 = price +(-1+ nDevDn) * deviation;\ndef sdvP1=  price + deviation;\ndef sdvN1=  price - deviation;\n#####\n\n\nplot SD1up =close[1] crosses above sdvp1 and ( open&lt; close) and low&gt;sdvp1;\nSD1up.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nSD1up.SetDefaultColor(Color.graY);\nSD1up.SetLineWeight(2);\nAssignPriceColor(if SD1up and showPriceColor and open&lt; close then Color.violet else Color.CURRENT);\n\nAddLabel(yes, \&quot;VWAP= \&quot; + astext(VWAP), if VWAP&lt; close then Color.LIGHT_GREEN else if VWAP&gt; close then color.LIGHT_red else Color.GRAY);\n#AddLabel(yes, \&quot;VWAP= \&quot; + astext(VWAP), Color.White);\ndef vwDif= close- VWAP;\n#AddLabel(yes, \&quot; \&quot;+astext(vwDif), if vwDif&gt; 0 then Color.LIGHT_GREEN else if vwDif&lt; 0 then color.LIGHT_red else Color.GRAY);\nAddLabel(yes and vwDif&gt;0, \&quot; +\&quot;+astext(vwDif),  Color.LIGHT_GREEN );\nAddLabel(yes and vwDif&lt;=0, \&quot; \&quot;+astext(vwDif),  if vwDif&lt; 0 then color.LIGHT_red else Color.LIGHT_GRAY);\n\ninput vwapLableAll =yes;\nAddLabel(vwapLableAll, \&quot;VWAP +1= \&quot; + astext(sdvP1), if sdvP1&lt; close then Color.LIGHT_GREEN else if sdvP1&gt; close then color.LIGHT_red else Color.GRAY);\n\nAddLabel(vwapLableAll, \&quot;VWAP +2= \&quot; + astext(UpperBand), if UpperBand&lt; close then Color.LIGHT_GREEN else if UpperBand&gt; close then color.LIGHT_red else Color.GRAY);\nAddLabel(vwapLableAll, \&quot;VWAP +3= \&quot; + astext(UpperBand2), if UpperBand2&lt; close then Color.LIGHT_GREEN else if UpperBand2&gt; close then color.LIGHT_red else Color.GRAY);\n\nAddLabel(vwapLableAll, \&quot;VWAP -1= \&quot; + astext(sdvN1), if sdvN1&lt; close then Color.LIGHT_GREEN else if sdvN1&gt; close then color.LIGHT_red else Color.GRAY);\nAddLabel(vwapLableAll, \&quot;VWAP -2= \&quot; + astext(LowerBand), if LowerBand&lt; close then Color.LIGHT_GREEN else if LowerBand&gt; close then color.LIGHT_red else Color.GRAY);\nAddLabel(vwapLableAll, \&quot;VWAP -3= \&quot; + astext(LowerBand2), if LowerBand2&lt; close then Color.LIGHT_GREEN else if LowerBand2&gt; close then color.LIGHT_red else Color.GRAY);\n\n#AddLabel(vwapLableAll, \&quot;VWAP R= \&quot; + astext(upperBand/sdvN1 -1)+\&quot;  \&quot;+astext(upperBand/lowerBand -1)+\&quot;  \&quot;+astext(upperBand2/lowerBand2 -1), if LowerBand&lt; close then Color.LIGHT_GREEN else if LowerBand&gt; close then color.LIGHT_red else Color.GRAY);\n\nAddLabel(vwapLableAll, \&quot;VWAP R= \&quot; + astext(upperBand/sdvN1 -1)+\&quot;  \&quot;+astext(upperBand/lowerBand -1)+\&quot;  \&quot;+astext(upperBand2/lowerBand2 -1), if LowerBand&lt; close then Color.LIGHT_GREEN else if LowerBand&gt; close then color.LIGHT_red else Color.GRAY);\n\n\n\ndef volCheck = volume &gt;= avgvolume &amp;&amp; volume &gt;= volMinimum &amp;&amp; volume &gt;= volume[1];\ndef isCross =  close crosses VWAP;\ndef abnormalSignal = isCross and volCheck;\n\n\nVWAP.SetDefaultColor(color.white);#(GetColor(0));\nplot signalup = if abnormalSignal and close &gt; VWAP then low else Double.NaN;\nsignalup.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nsignalup.SetDefaultColor(Color.CYAN);\nsignalup.SetLineWeight(2);\n\nplot signaldown =  if abnormalSignal and close &lt; VWAP then high else Double.NaN;\nsignaldown.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);\nsignaldown.SetDefaultColor(Color.CYAN);\nsignaldown.SetLineWeight(2);\n\nAssignPriceColor(if abnormalSignal and showPriceColor then Color.CYAN else Color.CURRENT);\n\n\n#####\nvwap.SetStyle(Curve.POINTS);\nUpperBand.SetDefaultColor(GetColor(0));\nLowerBand.SetDefaultColor(GetColor(0));\n\nUpperBand.SetStyle(Curve.POINTS);\nLowerBand.SetStyle(Curve.POINTS);\n\nUpperBand2.SetDefaultColor(Color.YELLOW);\nLowerBand2.SetDefaultColor(Color.YELLOW);\n\nUpperBand2.SetStyle(Curve.SHORT_DASH);\nLowerBand2.SetStyle(Curve.SHORT_DASH);\n#input AutoHide=yes;\n#def hideLower = if AutoHide then close &gt;vwap  else 0;;\n#def hideUpper = if AutoHide then  close &lt;vwap  else 0;#- deviation\n#addLabel(yes, \&quot;hide U\&quot;+hideUpper +\&quot; L\&quot;+hideLower);\n#UpperBand.setHiding(hideUpper);\n#LowerBand.setHiding(hideLower);\n#UpperBand.Hide();\n#LowerBand.Hide();\n#UpperBand2.Hide();\n#LowerBand2.Hide();&quot;,name=&quot;_740dc265_6e6e_38a5_ba0e_c0a058a5d552&quot;}){inputsMap:TreeMap8{^(&quot;vwapLableAll&quot;,&lt;F)},inputsMap=@TreeMap8}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# OvernightHiLowLines_mobius_jq\n# GlobeX or Overnight High / Low without Fibonacci Values \n# Based on code by Mobius # V01.2012 \n# cosmetic alterations by Johnny Quotron\n#    1. removal of fib lines\n#    2. paint ONL bubble below the line\n#    3. addition of other comments\n#    4. addition of bubbles in the expansion area if desired\n#\n# Restrictions:  Hi / Low lines are not drawn for non-traded indicies such as VIX or TNX..JQ\n\ndeclare hide_on_daily;\ninput PlotOverNightExtremes = yes;\ninput DisplayPriceBubbleOnHiLowBar = yes;\ninput DisplayPriceBubbleOnRightEdge = yes;  #Haven\'t figured this out yet..JQ\n\ndef o = open;\ndef h = high;\ndef l = low;\ndef c = close;\ndef v = volume;\ndef bar = BarNumber();\ndef GlobeX = GetTime() &lt; RegularTradingStart(GetYYYYMMDD());\n\ndef vol = if GlobeX and !GlobeX[1]\nthen v\nelse if GlobeX\nthen vol[1] + v\nelse Double.NaN;\n\ndef GlobeX_Volume = vol;\n\ndef ONhigh = if GlobeX and !GlobeX[1]\nthen h\nelse if GlobeX and\nh &gt; ONhigh[1]\nthen h\nelse ONhigh[1];\n\ndef ONhighBar = if GlobeX and h == ONhigh\nthen bar\nelse Double.NaN;\n\ndef ONlow = if GlobeX and !GlobeX[1]\nthen l\nelse if GlobeX and\nl &lt; ONlow[1]\nthen l\nelse ONlow[1];\n\ndef ONlowBar = if GlobeX and l == ONlow\nthen bar\nelse Double.NaN;\n\ndef OverNightHigh = if BarNumber() == HighestAll(ONhighBar)\nthen ONhigh\nelse OverNightHigh[1];\n\ndef OverNightLow = if BarNumber() == HighestAll(ONlowBar)\nthen ONlow\nelse OverNightLow[1];\n\n\n#\nplot ONH = if OverNightHigh &gt; 0\nthen OverNightHigh\nelse Double.NaN;\n\nONH.SetHiding(!PlotOverNightExtremes);\nONH.SetPaintingStrategy(PaintingStrategy.SQUARES);\nONH.SetDefaultColor(Color.BLUE);\nONH.HideBubble();\nONH.HideTitle();\n\n#\nplot ONL = if OverNightLow &gt; 0 \nthen OverNightLow\nelse Double.NaN;\n\nONL.SetHiding(!PlotOverNightExtremes);\nONL.SetPaintingStrategy(PaintingStrategy.SQUARES);\nONL.SetDefaultColor(Color.LIGHT_GRAY);\nONL.HideBubble();\nONL.HideTitle();\n\n\n# Bubble code\n#AddChartBubble(bar == ONhighBar and PlotOverNightExtremes and DisplayPriceBubbleOnHiLowBar, ONH, \&quot;ONH: \&quot; + ONH, createColor(204,204,255));\n#AddChartBubble(bar == ONlowBar and PlotOverNightExtremes and DisplayPriceBubbleOnHiLowBar, ONL, \&quot;ONL: \&quot; + ONL, createColor(204,204,255),no);  #designated that the bubble be painted below the ONL line.  2018-04-07 JQ \n\n\nAddChartBubble(barNumber() == highestAll(barnumber()) and  PlotOverNightExtremes and DisplayPriceBubbleOnRightEdge, ONH, \&quot;ONH: \&quot; + ONH, createColor(204,204,255));\nAddChartBubble(barNumber() == highestAll(barnumber()) and PlotOverNightExtremes and DisplayPriceBubbleOnRightEdge, ONL, \&quot;ONL: \&quot; + ONL, createColor(204,204,255),no); \ninput showLable =yes;\nAddLabel(showLable, \&quot;ONL= \&quot; + astext(ONL), if ONL&lt; close then Color.LIGHT_GREEN else if ONL&gt; close then color.LIGHT_red else Color.GRAY);\nAddLabel(showLable, \&quot;ONH= \&quot; + astext(ONH), if ONH&lt; close then Color.LIGHT_GREEN else if ONH&gt; close then color.LIGHT_red else Color.GRAY);\n# End Code GlobeX or Overnight High / Low without Fibonacci Values &quot;,name=&quot;_2b139ce2_bb93_4663_acef_0fb6255d8008&quot;}){plots{0:{lineStyle=3,paintingStrategy=0},1:{color=#%2.CustomColor(#%3.Color(0,0,255,255)),lineStyle=3,paintingStrategy=0}}}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;#ShadowTrader_VA_Pivots\n#ShadowTrader (Copyright ShadowTrader), a division of ShadowTrader Technologies, LLC. 2017. All rights reserved. This ShadowTrader Script is for educational purposes only.  ShadowTrader is not responsible for the use,  functionality or the performance of this Script. This work is copyrighted by ShadowTrader and all rights of this work under the license are reserved. Use of the ShadowTrader licensed code is for private use only and any other use are prohibited. By exercising any of the rights herein, you are accepting the terms of this license. You have a non-exclusive right to use or alter the ShadowTrader code. Use of this ShadowTrader Script other than as provided for in this license is prohibited. Any redistribution is strictly prohibited and will be enforced.\n\n# A big ShadowTrader thank you to Justin Lane Williams for initially creating this script for us.\n#08/31/11: Total redesign, added automated Pivot values, proximity plotting, new features.\n#09/12/11: Added “ShowLevel4” option due to recent volitility. Will plot S4 &amp; R4.\n#12/11/11: Added “AfterHours” option to turn off plot after hours.\n#12/21/11: Bug fixes due to TOS upgrades. Removed “AfterHours”, not workin correctly.\n#01/25/12: Enter daily inputs as 4 digits and script will interpret.\n# -added rounding to make the pivots appear as they do on the show.\n#01/26/12: Removed ability to truncate inputs due to it only being accurate 99% of time.\n#02/02/12: Small update to make sure \&quot;Auto Pivots\&quot; menu option functioned properly.\n#06/07/12: Added (6)VPOC inputs, should be manually entered/deleted, displays when applicable.\n#06/25/12: Removed some code and fixed a few bugs.\n#07/09/12: Fixed one small but important bug.\n#07/13/12: Added value bubbles, removed proximity plot function.\n#08/13/12: Removed a lot of superfluous code plus a few upgrades.\n#08/15/12: Fixed a bug that was giving false numbers.\n#08/30/12: Fixed a bug that wasn\'t plotting the NQ profile.\n#09/02/12: Reordered inputs and removed \&quot;LabelESonly\&quot; input.\n#12/28/12: Made the plot hide on daily charts and updated code to current standards.\n#01/04/13: Fixed a rare bug that hides labels if using tick charts.\n#01/28/13: Added ability to hide each individual level.\n\n# Pivot values will be off the day following market holidays and possibly the day after rollover.\n# On these days make \&quot;AutoPivots=No\&quot; and manually draw pivots. Change back to \&quot;AutoPivots=Yes\&quot; the day after.\n\n#Inputs\n#def VAH ;#  = 2170.75;#Hint VAH: Must be manually entered daily, tinyurl.com/3lbmu4o\n#def POC ;#  = 2166.75;#Hint POC: Must be manually entered daily, tinyurl.com/3lbmu4o\n#def VAL ;#;  = 2161.75;#Hint VAL: Must be manually entered daily, tinyurl.com/3lbmu4o\ndef Pivot = hlc3(period = AggregationPeriod.DAY)[1];# = 2164.75;#Hint Pivot: Must be manually entered daily, tinyurl.com/3lbmu4o\ninput AutoPivots = yes;#Hint AutoPivots: Turns off pivot lines, value area stays on.\ninput showVAH =no;\ninput Labels = {default \&quot;Proximity\&quot;, \&quot;Off\&quot;, \&quot;All\&quot;, \&quot;ValueAreaOnly\&quot;};#Hint Labels: Labels at top of chart.\ninput ShowPivotPoint = no;#Hint ShowPivotPoint: Hides Pivot Point plot.\ninput ShowLevel4 = no;#Hint ShowLevel4: Will display S4 and R4 for days with large moves.\ninput ShowLevel5 = no;#Hint ShowLevel4: Will display S4 and R4 for days with large moves.\ninput ShowLevel6 = no;#Hint ShowLevel4: Will display S4 and R4 for days with large moves.\ninput ShowLevel7 = no;#Hint ShowLevel4: Will display S4 and R4 for days with large moves.\ninput ShowLevel8 = no;#Hint ShowLevel4: Will display S4 and R4 for days with large moves.\ninput PivotBubbles  = no;#yes;#Hint PivotBubbles: Shows bubbles on pivot plot lines.\ninput ValueBubbles  = no;#yes;#Hint ValueBubbles: Shows bubbles on value plot lines.\ninput PlotStartTime = 0930;#Hint PlotStartTime: Move to earlier time to shift bubbles to the left.\ninput ShowCloud  = yes;#Hint ShowCloud: Shows the value area as a cloud.\ninput CloudOpenOnly = yes;#Hint CloudOpenOnly: Will only cloud open candles.\ninput HideAfterHoursLabel = no;#Hint HideAfterHoursLabel: Hides \&quot;NoShadowPlotAfterHours\&quot; label.\ninput VpocBubbles  = no;#yes;#Hint VpocBubbles: Shows bubbles on VPOC plot lines.\n\ninput ShowS1 = yes;#yes;#Hint ShowS1: Hide/Show S1.\ninput ShowS2 = yes;#Hint ShowS2: Hide/Show S2.\ninput ShowS3 = yes;#yes;#Hint ShowS3: Hide/Show S3.\ninput ShowR1 = yes;#yes;#Hint ShowR1: Hide/Show R1.\ninput ShowR2 = yes;#Hint ShowR2: Hide/Show R2.\ninput ShowR3 = yes;#yes;#Hint ShowR3: Hide/Show R3.\ninput ShowORB = no;#Hint ShowORB: Displays 2 small, dashed lines at the top/bottom of opening range.\ninput OrbTime = 30;#Hint OrbTime: Defines the time range in minutes for the ORB.\n\ndef Na = Double.NaN;\n#declare hide_on_daily;\n\ninput marketThreshold = 0.0025;\ninput timeFrame = {default DAY, \&quot;2 DAYS\&quot;, \&quot;3 DAYS\&quot;, \&quot;4 DAYS\&quot;, WEEK, MONTH, \&quot;OPT EXP\&quot;, QUARTER, YEAR};\ninput showOnlyToday = yes;\ninput applyPersonsLevelsFilter = yes;\n\nassert(marketThreshold &gt;= 0, \&quot;\'market threshold\' must not be negative: \&quot; + marketThreshold);\n\ndef marketType = {default DISABLED, NEUTRAL, BEARISH, BULLISH};\n\ndef PP2 = high(period = timeFrame)[2] + low(period = timeFrame)[2] + close(period = timeFrame)[2];\n\nmarketType = if !applyPersonsLevelsFilter then marketType.DISABLED else\nif PP2[-1] &gt; (PP2[-1] + PP2 + PP2[1]) / 3 + marketThreshold then marketType.BULLISH else\nif PP2[-1] &lt; (PP2[-1] + PP2 + PP2[1]) / 3 - marketThreshold then marketType.BEARISH else marketType.NEUTRAL;\n\n#Previous Day Functions\ndef Day   = GetDayOfWeek(GetYYYYMMDD());\ndef CloseTime = SecondsTillTime(1545) &gt;= 0;\ndef OpenTime = SecondsFromTime(0930) &gt;= 0;\ndef RegHrs = CloseTime and OpenTime;\ndef PLow  =  CompoundValue(1, If(Day == Day[1] and RegHrs and low &lt; PLow[1], low, If(SecondsFromTime(0930) &lt;= 0 and RegHrs, low, PLow[1])), low);\ndef PHigh = CompoundValue(1, If(Day == Day[1] and RegHrs and high &gt; PHigh[1], high, If(SecondsFromTime(0930) &lt;= 0 and RegHrs, high, PHigh[1])), high);\ndef PrevLow  = If(Day != Day[1], PLow[1], PrevLow[1]);\ndef PrevHigh = If(Day != Day[1], PHigh[1], PrevHigh[1]);\n##################\n#Prior Day Profile - counting formula by functionform\nrec count1 = CompoundValue(1, if !(GetDay() != GetDay()[1]) then count1[1] + 1 else 1, 1);\ndef priorperiod = if IsNaN(count1[1]) then 1 else Max(count1, count1[1]);\nprofile vol1 = VolumeProfile(\&quot;startNewProfile\&quot; = GetDay() != GetDay()[1], \&quot;onExpansion\&quot; = no);\nprofile vol = VolumeProfile(\&quot;startNewProfile\&quot; = GetDay() != GetDay(), \&quot;onExpansion\&quot; = no);\ndef vahprior = vol1.GetHighestValueArea();\ndef pocprior = vol1.GetPointOfControl();\ndef valprior = vol1.GetLowestValueArea();\n\ndef vahprev = GetValue(vahprior, priorperiod);\ndef pocprev = GetValue(pocprior, priorperiod);\ndef valprev = GetValue(valprior, priorperiod);\n\n#if showProfile then\ndef  showProfile = no;\ndef showPointOfControl = no;\ndef opacity = 50;\n#vol.Show(if showProfile then GlobalColor(\&quot;Profile\&quot;) else Color.CURRENT, if showPointOfControl then GlobalColor(\&quot;Point Of Control\&quot;) else Color.CURRENT, if showValueArea then GlobalColor(\&quot;Value Area\&quot;) else Color.CURRENT, opacity);\n#profile vol = VolumeProfile(\&quot;startNewProfile\&quot; = cond, \&quot;onExpansion\&quot; = no);\n#vol.Show(if showProfile then GlobalColor(\&quot;Profile\&quot;) else Color.CURRENT, if showPointOfControl then GlobalColor(\&quot;Point Of Control\&quot;) else Color.CURRENT, if showValueArea then GlobalColor(\&quot;Value Area\&quot;) else Color.CURRENT, opacity);\ndef VAH = vahprev;\ndef VAL = valprev;\ndef POC = pocprev;\ndef POC_Devp =vol.GetPointOfControl();\n\n\n############\n#Value Area Functions\ndef PPoint = If(Pivot &gt; 0, Pivot, Na);\ndef VArea  = Between(close, VAL, VAH);\ndef VAreaabove  = close &gt; VAH;\ndef VAreabelow  = close &lt; VAL;\n\n\n#Time Functions\ndef CloseTime2 = SecondsTillTime(1600) &gt;= 0;\ndef OpenTime2 = SecondsFromTime(PlotStartTime) &gt;= 0;\ndef MarketOpen = OpenTime2 and CloseTime2;\ndef NewDay = IsNaN(close(period = “Day”)[-1]);\ndef Chart  = if showOnlyToday then MarketOpen and NewDay else 1 ;\n\n#Pivot Functions\ndef Res1  = (2 * PPoint) - PrevLow;\ndef Supp1 = (2 * PPoint) - PrevHigh;\ndef Res2  = PPoint + (Res1 - Supp1); # def Res2  = PPoint + (Res1 - Supp1);\ndef Supp2 = PPoint - (Res1 - Supp1);\ndef Res3  =PPoint + 2*(PrevHigh - PrevLow);# def Res3  = PrevHigh + 2 * (PPoint - PrevLow);\ndef Supp3 = PPoint - 2*(PrevHigh - PrevLow);\ndef Res4  =PPoint + 3*(PrevHigh - PrevLow);#\ndef Supp4 = PPoint - 3*(PrevHigh - PrevLow);\ndef Res5  =PPoint + 4*(PrevHigh - PrevLow);#\ndef Supp5 = PPoint - 4*(PrevHigh - PrevLow);\ndef Res6  =PPoint + 5*(PrevHigh - PrevLow);#\ndef Supp6 = PPoint - 5*(PrevHigh - PrevLow);\ndef Res7  =PPoint + 6*(PrevHigh - PrevLow);#\ndef Supp7 = PPoint - 6*(PrevHigh - PrevLow);\n\ndef Res8  =PPoint + 7*(PrevHigh - PrevLow);#\ndef Supp8 = PPoint - 7*(PrevHigh - PrevLow);\n\n\n\n\n#def Res4  = PrevHigh + 3 * (PPoint - PrevLow);\n#def Supp4 = PrevLow - 3 * (PrevHigh - PPoint);\n#def Res5  = PrevHigh + 4 * (PPoint - PrevLow);\n#def Supp5 = PrevLow - 4 * (PrevHigh - PPoint);\n#def Res6  = PrevHigh + 5 * (PPoint - PrevLow);\n#def Supp6 = PrevLow - 5 * (PrevHigh - PPoint);\n#def Res7  = PrevHigh + 6 * (PPoint - PrevLow);\n#def Supp7 = PrevLow - 6 * (PrevHigh - PPoint);\n#def Res8  = PrevHigh + 7 * (PPoint - PrevLow);\n#def Supp8 = PrevLow - 7 * (PrevHigh - PPoint);\n\n#Rounding Functions\ndef RI   = RoundDown(Res1, 0) - ((Round(((RoundDown(Res1, 0) - Res1) / 0.25), 0)) * 0.25);\ndef SI   = RoundDown(Supp1, 0) - ((Round(((RoundDown(Supp1, 0) - Supp1) / 0.25), 0)) * 0.25);\ndef RII  = RoundDown(Res2, 0) - ((Round(((RoundDown(Res2, 0) - Res2) / 0.25), 0)) * 0.25);\ndef SII  = RoundDown(Supp2, 0) - ((Round(((RoundDown(Supp2, 0) - Supp2) / 0.25), 0)) * 0.25);\ndef RIII = RoundDown(Res3, 0) - ((Round(((RoundDown(Res3, 0) - Res3) / 0.25), 0)) * 0.25);\ndef SIII = RoundDown(Supp3, 0) - ((Round(((RoundDown(Supp3, 0) - Supp3) / 0.25), 0)) * 0.25);\ndef RIV  = RoundDown(Res4, 0) - ((Round(((RoundDown(Res4, 0) - Res4) / 0.25), 0)) * 0.25);\ndef SIV  = RoundDown(Supp4, 0) - ((Round(((RoundDown(Supp4, 0) - Supp4) / 0.25), 0)) * 0.25);\ndef PivP = RoundDown(PPoint, 0) - ((Round(((RoundDown(PPoint, 0) - PPoint) / 0.25), 0)) * 0.25);\ndef RV  = RoundDown(Res5, 0) - ((Round(((RoundDown(Res5, 0) - Res5) / 0.25), 0)) * 0.25);\ndef SV  = RoundDown(Supp5, 0) - ((Round(((RoundDown(Supp5, 0) - Supp5) / 0.25), 0)) * 0.25);\ndef RVI  = RoundDown(Res6, 0) - ((Round(((RoundDown(Res6, 0) - Res6) / 0.25), 0)) * 0.25);\ndef SVI  = RoundDown(Supp6, 0) - ((Round(((RoundDown(Supp6, 0) - Supp6) / 0.25), 0)) * 0.25);\ndef RVII  = RoundDown(Res7, 0) - ((Round(((RoundDown(Res7, 0) - Res7) / 0.25), 0)) * 0.25);\ndef SVII  = RoundDown(Supp7, 0) - ((Round(((RoundDown(Supp7, 0) - Supp7) / 0.25), 0)) * 0.25);\ndef RVIII  = RoundDown(Res8, 0) - ((Round(((RoundDown(Res8, 0) - Res8) / 0.25), 0)) * 0.25);\ndef SVIII  = RoundDown(Supp8, 0) - ((Round(((RoundDown(Supp8, 0) - Supp8) / 0.25), 0)) * 0.25);\n\n\n\n\n#Plots\nplot VH  = If(Chart and VAH &gt; 0, VAH, Na);\nplot PC  = If(Chart and POC &gt; 0, POC, Na);\nplot VL  = If(Chart and VAL &gt; 0, VAL, Na);\n\n##\ndef R1_auto_show = (Between(RI, VL, VH) and close &gt; VL);\ndef S1_auto_show = (close &lt; VL or (Between(SI, VL, VH) and close &lt; VH));\n\ndef R2_auto_show = close &gt; VH;\ndef S2_auto_show = close &lt; VL;\n\ndef R3_auto_show = close &gt; (RI + ((RII - RI) / 2));\ndef S3_auto_show = close &lt; (SI - ((SI - SII) / 2));\n\ndef R4_auto_show = close &gt; (RII + ((RIII - RII) / 2));\ndef S4_auto_show =  close &lt; (SII - ((SII - SIII) / 2));\n\ndef R5_auto_show =  close &gt; (RIII + ((RIV - RIII) / 2));\ndef S5_auto_show =  close &lt; (SIII - ((SIII - SIV) / 2));\n\ndef R6_auto_show =  close &gt; (RIV + ((RV - RIV) / 2));\ndef S6_auto_show =  close &lt; (SIV - ((SVI - SV) / 2));\n\ndef R7_auto_show =  close &gt; (RV + ((RVI - RV) / 2));\ndef S7_auto_show =  close &lt; (SV- ((SV - SVI) / 2));\n\ndef R8_auto_show =  close &gt; (RVI + ((RVII - RVI) / 2));\ndef S8_auto_show =  close &lt; (SVI - ((SVI - SVII) / 2));\n#input showHigherLevel =yes;\n##\n\nplot R4  = If(Chart and AutoPivots and ShowLevel4 and  R4_auto_show  and RIV &gt; 0, RIV, Na);\nplot R3  = If(Chart and AutoPivots and ShowR3  and  R3_auto_show and RIII &gt; 0, RIII, Na);\nplot R2  = If(Chart and AutoPivots and ShowR2  and  R2_auto_show and RII &gt; 0, RII, Na);\nplot R1  = If(Chart and AutoPivots and ShowR1  and  R1_auto_show and RI &gt; 0, RI, Na);\nplot PP  = If(Chart and AutoPivots and ShowPivotPoint and PPoint &gt; 0, PivP, Na);\nplot S1  = If(Chart and AutoPivots and ShowS1 and  S1_auto_show  and SI &gt; 0, SI, Na);\nplot S2  = If(Chart and AutoPivots and ShowS2 and  S2_auto_show  and SII &gt; 0, SII, Na);\nplot S3  = If(Chart and AutoPivots and ShowS3 and  S3_auto_show and SIII &gt; 0, SIII, Na);\nplot S4  = If(Chart and AutoPivots and ShowLevel4 and  S4_auto_show and SIV &gt; 0, SIV, Na);\n\n\n#######\n\nplot R5  = If(Chart and AutoPivots and ShowLevel4 and  R5_auto_show  and RV &gt; 0, RV, Na);\nplot R6  = If(Chart and AutoPivots and ShowLevel4 and  R6_auto_show  and RVI &gt; 0, RVI, Na);\nplot R7  = If(Chart and AutoPivots and ShowLevel4 and  R7_auto_show  and RVII &gt; 0, RVII, Na);\nplot R8  = If(Chart and AutoPivots and ShowLevel4 and  R8_auto_show  and RVIII &gt; 0, RVIII, Na);\n\n####\n\n\ninput closeTimeC = 1615;\n#Value Area Cloud\n#def CloudClose = SecondsTillTime(1615) &gt; 0;\ndef CloudClose = SecondsTillTime(closeTimeC) &gt; 0;\ndef Cloud      = OpenTime and CloudClose;\ndef ChartCloud = Cloud and Chart;\ndef CloudTest  = If(CloudOpenOnly, ChartCloud, Chart);\nplot cloudhigh = If(CloudTest and ShowCloud, VAH, Na);\nplot cloudlow  = If(CloudTest and ShowCloud, VAL, Na);\nAddCloud(cloudhigh, cloudlow, Color.GRAY, Color.GRAY);\ndef AfterHours = OpenTime2 and CloudClose;\n\n#Chart Labels\ndef Futures = Between(close, close(\&quot;/es\&quot;) - 15, close(\&quot;/es\&quot;) + 15) or Between(close, close(\&quot;/nq\&quot;) - 15, close(\&quot;/nq\&quot;) + 15);\ndef Label = Chart;# and Futures;\ndef ZeroTest = VAH &gt; 0 and VAL &gt; 0;\ndef PNotZero = PPoint &gt; 0;\ndef ChartLabels;\nswitch (Labels) {\ncase \&quot;Proximity\&quot;:\n    ChartLabels = 1;\ncase \&quot;Off\&quot;:\n    ChartLabels = 0;\ncase \&quot;All\&quot;:\n    ChartLabels = 2;\ncase \&quot;ValueAreaOnly\&quot;:\n    ChartLabels = 3;\n}\n\n\nAddLabel(ChartLabels == 1 and Label and AutoPivots and VArea and ZeroTest, “InsideValue”, Color.WHITE);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and VAreaabove and ZeroTest, “AboveValue”, Color.GREEN);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and VAreabelow and ZeroTest, “BelowValue”, Color.RED);\nAddLabel(ChartLabels == 1 and Label and !AutoPivots and VArea and ZeroTest, “InsideValueArea”, Color.WHITE);\nAddLabel(ChartLabels == 1 and Label and !AutoPivots and VAreaabove and ZeroTest, “AboveValueArea”, Color.GREEN);\nAddLabel(ChartLabels == 1 and Label and !AutoPivots and VAreabelow and ZeroTest, “BelowValueArea”, Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and Between(close, VL, (RI + ((RII - RI) / 2))), \&quot;VH=\&quot; + AsText(VH), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and Between(close, VL, VH), \&quot;POC=\&quot; + AsText(PC), Color.YELLOW);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and Between(close, (SI - ((SI - SII) / 2)), VH), \&quot;VL=\&quot; + AsText(VL), Color.GREEN);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and (close &gt; VH or (Between(RI, VL, VH) and close &gt; VL)), \&quot;R1=\&quot; + AsText(RI), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots , \&quot;POC_D=\&quot; + AsText(POC_Devp), Color.YELLOW);\ndef pocDif= POC_Devp-PC;\n\n#AddLabel(yes, \&quot; \&quot;+astext(vwDif), if vwDif&gt; 0 then Color.LIGHT_GREEN else if vwDif&lt; 0 then color.LIGHT_red else Color.GRAY);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and pocDif&gt;0, \&quot; +\&quot;+astext(pocDif),  Color.LIGHT_GREEN );\nAddLabel(ChartLabels == 1 and Label and AutoPivots and pocDif&lt;=0, \&quot; \&quot;+astext(pocDif),  if pocDif&lt; 0 then color.LIGHT_red else Color.LIGHT_GRAY);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and close &gt; VH, \&quot;R2=\&quot; + AsText(RII), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and close &gt; (RI + ((RII - RI) / 2)), \&quot;R3=\&quot; + AsText(RIII), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and ShowLevel4 and close &gt; (RII + ((RIII - RII) / 2)), \&quot;R4=\&quot; + AsText(RIV), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and ShowLevel5 and close &gt; (RIII + ((RIV - RIII) / 2)), \&quot;R5=\&quot; + AsText(RV), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and ShowLevel6 and close &gt; (RII + ((RV- RIV) / 2)), \&quot;R6=\&quot; + AsText(RVI), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and ShowLevel7 and close &gt; (RII + ((RVI - RV) / 2)), \&quot;R7=\&quot; + AsText(RVII), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and ShowLevel8 and close &gt; (RII + ((RVII - RVI) / 2)), \&quot;R8=\&quot; + AsText(RVIII), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and ShowPivotPoint and close &gt; SI and close &lt; RI, \&quot;PP=\&quot; + AsText(PP), Color.WHITE);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and (close &lt; VL or (Between(SI, VL, VH) and close &lt; VH)), \&quot;S1=\&quot; + AsText(SI), Color.GREEN);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and close &lt; VL, \&quot;S2=\&quot; + AsText(SII), Color.GREEN);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and close &lt; (SI - ((SI - SII) / 2)), \&quot;S3=\&quot; + AsText(SIII), Color.GREEN);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and ShowLevel4 and close &lt; (SII - ((SII - SIII) / 2)), \&quot;S4=\&quot; + AsText(SIV), Color.GREEN);\n\nAddLabel(ChartLabels == 2 and Label and ZeroTest, \&quot;VH=\&quot; + AsText(VH), Color.RED);\nAddLabel(ChartLabels == 2 and Label and ZeroTest, \&quot;POC=\&quot; + AsText(PC), Color.YELLOW);\nAddLabel(ChartLabels == 2 and Label and ZeroTest, \&quot;VL=\&quot; + AsText(VL), Color.GREEN);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero, \&quot;R1=\&quot; + AsText(RI), Color.RED);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero, \&quot;R2=\&quot; + AsText(RII), Color.RED);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero, \&quot;R3=\&quot; + AsText(RIII), Color.RED);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero and ShowLevel4, \&quot;R4=\&quot; + AsText(RIV), Color.RED);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero and ShowPivotPoint, \&quot;PP=\&quot; + AsText(PP), Color.WHITE);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero, \&quot;S1=\&quot; + AsText(SI), Color.GREEN);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero, \&quot;S2=\&quot; + AsText(SII), Color.GREEN);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero, \&quot;S3=\&quot; + AsText(SIII), Color.GREEN);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero and ShowLevel4, \&quot;S4=\&quot; + AsText(SIV), Color.GREEN);\n\nAddLabel(ChartLabels == 3 and Label and VArea and ZeroTest, “InsideValueArea”, Color.WHITE);\nAddLabel(ChartLabels == 3 and Label and VAreaabove and ZeroTest, “AboveValueArea”, Color.GREEN);\nAddLabel(ChartLabels == 3 and Label and VAreabelow and ZeroTest, \&quot;BelowValueArea”, Color.RED);\nAddLabel(!AfterHours and !Chart and !HideAfterHoursLabel, \&quot;NoShadowPlotAfterHours\&quot;, Color.ORANGE);\n\n#Chart Bubbles\ninput BubbleLeftSide =yes;\ndef  leftLoc =  if BubbleLeftSide then 1 else -1;#\nAddChartBubble(IsNaN(VH[leftLoc]) and ValueBubbles, VH, VH, Color.RED, no);\nAddChartBubble(IsNaN(PC[leftLoc]) and ValueBubbles, PC, PC, Color.YELLOW, no);\nAddChartBubble(IsNaN(VL[leftLoc]) and ValueBubbles, VL, VL, Color.GREEN, no);\nAddChartBubble(IsNaN(S1[leftLoc]) and PivotBubbles, S1, “S1”, Color.WHITE, no);\nAddChartBubble(IsNaN(S2[leftLoc]) and PivotBubbles, S2, “S2”, Color.WHITE, no);\nAddChartBubble(IsNaN(S3[leftLoc]) and PivotBubbles, S3, “S3”, Color.WHITE, no);\nAddChartBubble(IsNaN(S4[leftLoc]) and PivotBubbles and ShowLevel4 and S4_auto_show, S4, “S4”, Color.WHITE, no);\nAddChartBubble(IsNaN(PP[leftLoc]) and ShowPivotPoint and PivotBubbles, PP, “PP”, Color.WHITE, no);\nAddChartBubble(IsNaN(R1[leftLoc]) and PivotBubbles, R1, “R1”, Color.WHITE, no);\nAddChartBubble(IsNaN(R2[leftLoc]) and PivotBubbles, R2, “R2”, Color.WHITE, no);\nAddChartBubble(IsNaN(R3[leftLoc]) and PivotBubbles, R3, “R3”, Color.WHITE, no);\nAddChartBubble(IsNaN(R4[leftLoc]) and PivotBubbles and ShowLevel4, R4, “R4”, Color.WHITE, no);\n\n\n#Opening Range Breakout Functions\ndef ORBopen = SecondsTillTime(945) &lt;= 0;\ndef IsMarketOpen = ORBopen and CloseTime2;\ndef FirstBar = If(GetDay()[1] != GetDay(), GetDay() - 1, 0);\ndef OpenRange = SecondsFromTime(945);\ndef PastOpeningRange = OpenRange &gt;= (OrbTime - 15) * 60;\ndef DisplayedHigh = If(high &gt; DisplayedHigh[1] and IsMarketOpen and ShowORB, high, If(IsMarketOpen and !FirstBar, DisplayedHigh[1], high));\ndef DisplayedLow = If(low &lt; DisplayedLow[1] and IsMarketOpen and ShowORB, low, If(IsMarketOpen and !FirstBar, DisplayedLow[1], low));\ndef ORBHi = If(PastOpeningRange, ORBHi[1], DisplayedHigh);\ndef ORBLo  = If(PastOpeningRange, ORBLo[1], DisplayedLow);\nplot ORBHigh = If(Chart and PastOpeningRange and IsMarketOpen and ShowORB, ORBHi, Na);\nplot ORBLow  = If(Chart and PastOpeningRange and IsMarketOpen and ShowORB, ORBLo, Na);\n\n#Plot Criteria\nORBHigh.SetDefaultColor(Color.MAGENTA);\nORBHigh.SetStyle(Curve.SHORT_DASH);\nORBHigh.HideBubble();\nORBLow.SetDefaultColor(Color.MAGENTA);\nORBLow.SetStyle(Curve.SHORT_DASH);\nORBLow.HideBubble();\nVH.SetDefaultColor(Color.RED);\nPC.SetDefaultColor(Color.YELLOW);\nPC.SetStyle(Curve.LONG_DASH);\nVL.SetDefaultColor(Color.GREEN);\nR4.SetDefaultColor(Color.WHITE);\nR3.SetDefaultColor(Color.WHITE);\nR2.SetDefaultColor(Color.WHITE);\nR1.SetDefaultColor(Color.WHITE);\nPP.SetDefaultColor(Color.WHITE);\nS4.SetDefaultColor(Color.WHITE);\nS3.SetDefaultColor(Color.WHITE);\nS2.SetDefaultColor(Color.WHITE);\nS1.SetDefaultColor(Color.WHITE);\n\ncloudhigh.SetDefaultColor(Color.RED);\ncloudlow.SetDefaultColor(Color.GREEN);\nAddLabel(showVAH , \&quot;vah= \&quot; + AsText(vah), Color.pink);\nAddLabel(showVAH , \&quot;val= \&quot; + AsText(val), Color.light_green);\nAddLabel(showVAH , \&quot;poc= \&quot; + AsText(poc), Color.light_orANGE);\nAddLabel(showVAH , \&quot;pivot= \&quot; + AsText(pivot), Color.pink);\nVH.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nPC.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nVL.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\ncloudhigh.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\ncloudlow.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nPP.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nR1.SetStyle(Curve.SHORT_DASH);\nR1.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nR2.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nR3.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nR4.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nS1.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nS2.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nS3.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nS4.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\n\n\nR1.SetHiding(R1_auto_show);\nR2.SetHiding(R2_auto_show);\nR3.SetHiding(R3_auto_show);\nR4.SetHiding(R4_auto_show);\nS1.SetHiding(S1_auto_show);\nS2.SetHiding(S2_auto_show);\nS3.SetHiding(S3_auto_show);\nS4.SetHiding(!S4_auto_show);\n#S5.SetHiding(!S5_auto_show);\n#AddLabel(yes , \&quot;R44= \&quot; + (S5_auto_show), Color.pink);\n#AddLabel(yes , \&quot;R5= \&quot; + ((RIII + ((RIV - SIII) / 2))), Color.pink);\n\n\n#Vwap\ninput vwapTimeFrame = {default DAY, WEEK, MONTH};\ninput vwapLable =yes;\n\n\ndef cap = getAggregationPeriod();\ndef errorInAggregation =\n    vwapTimeFrame == vwapTimeFrame.DAY and cap &gt;= AggregationPeriod.WEEK or\n    vwapTimeFrame == vwapTimeFrame.WEEK and cap &gt;= AggregationPeriod.MONTH;\nassert(!errorInAggregation, \&quot;timeFrame should be not less than current chart aggregation period\&quot;);\n\ndef yyyyMmDd = getYyyyMmDd();\ndef periodIndx;\nswitch (vwapTimeFrame) {\ncase DAY:\n    periodIndx = yyyyMmDd;\ncase WEEK:\n    periodIndx = Floor((daysFromDate(first(yyyyMmDd)) + getDayOfWeek(first(yyyyMmDd))) / 7);\ncase MONTH:\n    periodIndx = roundDown(yyyyMmDd / 100, 0);\n}\ndef isPeriodRolled = compoundValue(1, periodIndx != periodIndx[1], yes);\n\ndef volumeSum;\ndef volumeVwapSum;\ndef volumeVwap2Sum;\n\nif (isPeriodRolled) {\n    volumeSum = volume;\n    volumeVwapSum = volume * vwap;\n    volumeVwap2Sum = volume * Sqr(vwap);\n} else {\n    volumeSum = compoundValue(1, volumeSum[1] + volume, volume);\n    volumeVwapSum = compoundValue(1, volumeVwapSum[1] + volume * vwap, volume * vwap);\n    volumeVwap2Sum = compoundValue(1, volumeVwap2Sum[1] + volume * Sqr(vwap), volume * Sqr(vwap));\n}\ndef VWprice = volumeVwapSum / volumeSum;\n\n\ndef VWAP = VWprice;\n#vwap\n\nAddLabel(vwapLable, \&quot;VWAP= \&quot; + astext(VWAP), if VWAP&lt; close then Color.LIGHT_GREEN else if VWAP&gt; close then color.LIGHT_red else Color.GRAY);\n#AddLabel(vwapLable, \&quot;VWAP= \&quot; + astext(VWAP), Color.White);\ndef vwDif= close- VWAP;\n\n#AddLabel(yes, \&quot; \&quot;+astext(vwDif), if vwDif&gt; 0 then Color.LIGHT_GREEN else if vwDif&lt; 0 then color.LIGHT_red else Color.GRAY);\nAddLabel(vwapLable and vwDif&gt;0, \&quot; +\&quot;+astext(vwDif),  Color.LIGHT_GREEN );\nAddLabel(vwapLable and vwDif&lt;=0, \&quot; \&quot;+astext(vwDif),  if vwDif&lt; 0 then color.LIGHT_red else Color.LIGHT_GRAY);\n\n\n\n&quot;,name=&quot;_8530afbb_30ff_4431_88c9_cca8caf1d61d&quot;}))}},!get(#%4.SubgraphId(&quot;Volume&quot;)){height=80},^(#%4.SubgraphId(&quot;Subgraph4&quot;),#%4.SubgraphStorableModel{height=93,storableIndicators{+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# TMO ((T)rue (M)omentum (O)scilator)\n# Mobius\n# V01.05.2018\n# hint: TMO calculates momentum using the delta of price. Giving a much better picture of trend, tend reversals and divergence than momentum oscillators using price.\n\ndeclare Lower;\n\ninput length = 14;\ninput calcLength = 5;\ninput smoothLength = 3;\n\ndef o = open;\ndef c = close;\ndef data = fold i = 0 to length\n           with s\n           do s + (if c &gt; getValue(o, i)\n                   then 1\n                   else if c &lt; getValue(o, i)\n                        then - 1\n                        else 0);\ndef EMA5 = ExpAverage(data, calcLength);\nplot Main = ExpAverage(EMA5, smoothLength);\nplot Signal = ExpAverage(Main, smoothLength);\n     Main.AssignValueColor(if Main &gt; Signal\n                           then color.green\n                           else color.red);\n     Signal.AssignValueColor(if Main &gt; Signal\n                             then color.green\n                             else color.red);\n     Signal.HideBubble();\n     Signal.HideTitle();\naddCloud(Main, Signal, color.green, color.red);\nplot zero = if isNaN(c) then double.nan else 0;\n     zero.SetDefaultColor(Color.gray);\n     zero.hideBubble();\n     zero.hideTitle();\nplot ob = if isNaN(c) then double.nan else round(length * .7);\n     ob.SetDefaultColor(Color.gray);\n     ob.HideBubble();\n     ob.HideTitle();\nplot os = if isNaN(c) then double.nan else -round(length * .7);\n     os.SetDefaultColor(Color.gray);\n     os.HideBubble();\n     os.HideTitle();\naddCloud(ob, length, color.light_red, color.light_red, no);\naddCloud(-length, os, color.light_green, color.light_green);\n# End Code TMO&quot;,name=&quot;_e764f5bb_0b2a_3136_ab0c_1a950d75f144&quot;})),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# Standard version of Buy the Dip indicator\n# Assembled by BenTen at UseThinkScript.com\n# Version 1.0\n# &lt;INSTRUCTION&gt;\n# Get support at: https://usethinkscript.com/forums/buy-the-dip.32/\n# &lt;NOTES&gt;\n# Based on the concept of \&quot;Synethetic VIX\&quot; by Larry Williams\n# This software is licensed for individual use only.\n# NOT FOR REDISTRIBUTION PRIVATE/CONFIDENTIAL\n# Copyright (c) 2020 useThinkScript LLC\n\ndeclare lower;\n\ninput length = 22;\ninput meter = yes;\n\n# Plot indicator\ndef value = ((high - Lowest(close[1], length)) / Lowest(close[1], length)) * 100;\nplot buythedip = value;\nplot Zeroline = 0;\n\nbuythedip.AssignValueColor(if buythedip &gt; Zeroline then color.green else color.red);\nZeroline.AssignValueColor(color.white);\n\nAddLabel(meter and yes, Concat(\&quot;Meter = \&quot;, buythedip), color.orange);\n\nplot UpSignal = if buythedip crosses above 0 then 0 else Double.NaN;\n\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.ARROW_UP);&quot;,name=&quot;_7afae4ee_cb63_308c_abcd_570cc5861907&quot;})),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# @new\n# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2014-2021\n#\n\ndeclare lower;\ndeclare zerobase;\n\ninput length = 60;\ninput numDev = 2.0;\ninput allowNegativeValues = no;\n\ndef rawRelVol = (volume - Average(volume, length)) / StDev(volume, length);\nplot RelVol = if allowNegativeValues then rawRelVol else Max(0, rawRelVol);\nplot StDevLevel = numDev;\n\nRelVol.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);\nRelVol.SetLineWeight(3);\nRelVol.DefineColor(\&quot;Above\&quot;, GetColor(0));\nRelVol.DefineColor(\&quot;Below\&quot;, GetColor(2));\nRelVol.AssignValueColor(if RelVol &gt;= numDev then RelVol.Color(\&quot;Above\&quot;) else RelVol.Color(\&quot;Below\&quot;));\nStDevLevel.SetDefaultColor(GetColor(7));\nStDevLevel.SetStyle(Curve.SHORT_DASH);&quot;,name=&quot;RelativeVolumeStDev&quot;}){plots{0:{lineWeight=5,paintingStrategy=17,palette{^(&quot;Above&quot;,@CustomColor7),^(&quot;Below&quot;,@CustomColor1)}}}})}}),^(#%4.SubgraphId(&quot;Subgraph6&quot;),#%4.SubgraphStorableModel{height=149,storableIndicators.+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;declare lower;\n#MTF\ndef timeFrame = getAggregationPeriod();\ninput aggregationPeriod1 =AggregationPeriod.Four_MIN;\ninput useAggegateForP1 =yes;\ninput aggregationPeriod2 =AggregationPeriod.Fifteen_MIN;\n\n\n# Variables:\ndef o1 =if (useAggegateForP1) then open(period = aggregationPeriod1) else open;\ndef c1 =if (useAggegateForP1) then close(period = aggregationPeriod1)else close;\ndef l1 =if (useAggegateForP1) then low(period = aggregationPeriod1) else low;\ndef h1 =if (useAggegateForP1) then high(period = aggregationPeriod1) else high;\n\ndef o2 =open(period = aggregationPeriod2);\ndef c2 =close(period = aggregationPeriod2);\ndef l2 =low(period = aggregationPeriod2);\ndef h2 =high(period = aggregationPeriod2);\n\n\ninput over_bought = 40.0;\ninput over_sold = -40.0;\ninput percentDLength = 3;\ninput percentKLength = 5;\n\n\n\ndef min_low1 = lowest(l1, percentKLength);\ndef max_high1 = highest(h1, percentKLength);\ndef rel_diff = c1 - (max_high1 + min_low1)/2;\ndef diff = max_high1 - min_low1;\n\ndef avgrel = expaverage(expaverage(rel_diff, percentDLength), percentDLength);\ndef avgdiff1 = expaverage(expaverage(diff, percentDLength), percentDLength);\n\nplot SMI1 = if avgdiff1 != 0 then avgrel / (avgdiff1 / 2) * 100 else 0;\nsmi1.setDefaultColor(getColor(1));\n\nplot AvgSMI1 = expaverage(smi1, percentDLength);\navgsmi1.setDefaultColor(getcolor(5));\n\n\nplot overbought = over_bought;\noverbought.setDefaultColor(getcolor(5));\nplot z=0;\n\nplot oversold = over_sold;\noversold.setDefaultColor(getcolor(5));\n##\n\n#dif\nplot d1=  SMI1-avgSMI1  ;\nd1.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);\nd1.SetLineWeight(3);\n\n\nd1.DefineColor(\&quot;Positive and Up\&quot;, Color.uptick);\nd1.DefineColor(\&quot;Positive and Down\&quot;, Color.cyan);\nd1.DefineColor(\&quot;Negative and Down\&quot;,  Color.MAGENTA);\nd1.DefineColor(\&quot;Negative and Up\&quot;, Color.orange);\nd1.AssignValueColor(if d1 &gt;= 0 then if d1 &gt; d1[1] then d1.Color(\&quot;Positive and Up\&quot;) else d1.Color(\&quot;Positive and Down\&quot;) else if d1 &lt; d1[1] then d1.Color(\&quot;Negative and Down\&quot;) else d1.Color(\&quot;Negative and Up\&quot;));\n\n\n\n#SMI2\n\ndef min_low2 = lowest(l2, percentKLength);\ndef max_high2 = highest(h2, percentKLength);\ndef rel_diff2 = c2 - (max_high2 + min_low2)/2;\ndef diff2 = max_high2 - min_low2;\n\ndef avgrel2 = expaverage(expaverage(rel_diff2, percentDLength), percentDLength);\ndef avgdiff2 = expaverage(expaverage(diff2, percentDLength), percentDLength);\n\nplot SMI2 = if avgdiff2 != 0 then avgrel2 / (avgdiff2 / 2) * 100 else 0;\nsmi2.setDefaultColor(getColor(1));\n\nplot AvgSMI2 = expaverage(smi2, percentDLength);\navgsmi2.setDefaultColor(getcolor(5));\n\n\n\n#dif\nplot d2=  SMI2-avgSMI2 ;\nd2.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);\nd2.SetLineWeight(3);\n\n\nd2.DefineColor(\&quot;Positive and Up\&quot;, Color.uptick);\nd2.DefineColor(\&quot;Positive and Down\&quot;, Color.cyan);\nd2.DefineColor(\&quot;Negative and Down\&quot;,  Color.MAGENTA);\nd2.DefineColor(\&quot;Negative and Up\&quot;, Color.orange);\nd2.AssignValueColor(if d2&gt;= 0 then if d2 &gt; d2[1] then d2.Color(\&quot;Positive and Up\&quot;) else d2.Color(\&quot;Positive and Down\&quot;) else if d2 &lt; d2[1] then d2.Color(\&quot;Negative and Down\&quot;) else d2.Color(\&quot;Negative and Up\&quot;));\n&quot;,name=&quot;_1fea2483_27b6_461c_8c3e_3f104a346e99&quot;}){inputsMap:TreeMap9{^(&quot;aggregationPeriod2&quot;,&quot;FIVE_MIN&quot;),^(&quot;useAggegateForP1&quot;,&lt;F)},inputsMap=@TreeMap9,plots{0:{hiding=&lt;T},1:{hiding=&lt;T},5:{hiding=&lt;T}}})}),^(#%4.SubgraphId(&quot;Subgraph8&quot;),#%4.SubgraphStorableModel{height=148,storableIndicators.+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;declare lower;\n\ninput fastLength = 23;\ninput slowLength = 50;\ninput KPeriod = 10;\ninput DPeriod = 3;\ninput over_bought = 75;\ninput over_sold = 25;\ninput averageType = AverageType.EXPONENTIAL;\ndef price1= open;\ninput rsi_th=42;\ndef length1 =22;\n\ndef macdRsi =   reference MomentumSMA();\n# ((low - Highest(price1[1], length1)) / Highest(price1[1], length1)) * 100;\n#((price1 - Lowest(low[1], length1)) / (Highest(high[1], length1) - Lowest(low[1], length1)));\n#reference RSI(length = 14, price = close );\ndef fastK1rsi = FastKCustom(macdRsi, KPeriod);\ndef fastD1Rsi = MovingAverage(averageType, fastK1rsi, DPeriod);\ndef fastK2rsi = FastKCustom(fastD1Rsi, KPeriod);\n#plot RSIm = fastD1Rsi;#MovingAverage(averageType, fastK2rsi, DPeriod);\n\ninput priceSch =close;\n\ndef macd = MovingAverage(averageType, priceSch, fastLength) - MovingAverage(averageType, priceSch, slowLength);\ndef fastK1 = FastKCustom(macd, KPeriod);\ndef fastD1 = MovingAverage(averageType, fastK1, DPeriod);\ndef fastK2 = FastKCustom(fastD1, KPeriod);\nplot STC = MovingAverage(averageType, fastK2, DPeriod);\n\nplot OverBought = over_bought;\nplot OverSold = over_sold;\n\nSTC.SetDefaultColor(GetColor(8));\nOverBought.SetDefaultColor(GetColor(7));\nOverSold.SetDefaultColor(GetColor(7));\ndef cldH= if STC &gt; OverBought then STC else OverBought;\nAddCloud(cldH,OverBought, Color.Green, Color.Green);\n\ndef cldL= if STC &lt; OverSold then STC else OverSold;\nAddCloud(cldL,OverSold, Color.RED, Color.RED);\nSTC.setlineWeight(3);\nOverBought.setStyle(curve.short_dash);\noversold.setStyle(curve.short_dash);\n####$$$$$$$$\n\n\ninput priceSlm = close;\n\ninput superFastLength = 8;\n\ninput fastLengthSlm = 13;\n\ninput slowLengthSlm = 21;\n\ninput displace = 0;\n\n\ninput averageTypeSlm = AverageType.EXPONENTIAL;\n\ndef mov_avg8 = MovingAverage(averageTypeSlm, priceSlm[-displace], superFastLength);\n\ndef mov_avg13 = MovingAverage(averageTypeSlm, priceSlm[-displace], fastLengthSlm);\n\ndef mov_avg21 = MovingAverage(averageTypeSlm, priceSlm[-displace], slowLengthSlm);\n \n#moving averages\n\ndef Superfast = mov_avg8;\n\ndef Fast = mov_avg13;\n\ndef Slow = mov_avg21;\n\n\ndef buy = mov_avg8 &gt; mov_avg13 and mov_avg13 &gt; mov_avg21 and low &gt; mov_avg8;\n\ndef stopbuy = mov_avg8 &lt;= mov_avg13;\n\ndef buynow = !buy[1] and buy;\n\ndef buysignal = CompoundValue(1, if buynow and !stopbuy then 1 else if buysignal[1] == 1 and stopbuy then 0 else buysignal[1], 0);\n\n\ndef Buy_Signal = buysignal[1] == 0 and buysignal == 1;\n\ndef Momentum_Down = buysignal[1] == 1 and buysignal == 0;\n\n\ndef sell = mov_avg8 &lt; mov_avg13 and mov_avg13 &lt; mov_avg21 and high &lt; mov_avg8;\n\ndef stopsell = mov_avg8 &gt;= mov_avg13;\n\ndef sellnow = !sell[1] and sell;\n\ndef sellsignal = CompoundValue(1, if sellnow and !stopsell then 1 else if sellsignal[1] == 1 and stopsell then 0 else sellsignal[1], 0);\n\n\ndef Sell_Signal = sellsignal[1] == 0 and sellsignal;\n\ndef Momentum_Up = sellsignal[1] == 1 and sellsignal == 0;\n \n# when using this as a custom scan, change the word plot to def\n# then remove the \'#\' from in front of one of the \&quot;plot Scan\&quot; statements below\ndef Colorbars = if buysignal == 1 then 1 else if sellsignal == 1 then -1 else if buysignal == 0 or sellsignal == 0 then 0 else 0;\n\n# use this first Scan plot for SLM Ribbon Momentum UP\n#plot Scan = if Colorbars == 1 then yes else no;\n\n# use this second Scan plot for SLM Ribbon Momentum DOWN\n#plot Scan = if Colorbars == -1 then yes else no;\n\n\n\n\n\n\n###############\n\ndef Colorbars1 = if buysignal == 1 then 1 else if sellsignal == 1 then 2 else if buysignal == 0 or sellsignal == 0 then 3 else 0;\n\n\n\nSTC.definecolor(\&quot;Buy_Signal_Bars\&quot;, color.dark_green);\n\nSTC.definecolor(\&quot;Sell_Signal_Bars\&quot;, color.red);\n\nSTC.definecolor(\&quot;NeutralUp\&quot;, color.plum);\n\nSTC.definecolor(\&quot;NeutralDown\&quot;, color.orange);\n\nSTC.AssignValueColor(if Colorbars1 ==1 then STC.color(\&quot;buy_signal_bars\&quot;) else if colorbars1 ==2 then STC.color(\&quot;Sell_Signal_bars\&quot;) else if Momentum_Up then  STC.color(\&quot;neutralUp\&quot;) else STC.color(\&quot;neutralDown\&quot;) );\n\n\nplot UpSignal = if (buysignal and STC crosses above over_sold) then STC else Double.NaN;\nplot DownSignal = if (sellsignal and STC crosses below over_bought) then STC else Double.NaN;\ninput showBreakoutSignals =yes;\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\n\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\n\n\n\n\n\n\n\n\n\n\n######$$$$\n\n#########################RSI\n\n\ninput length = 14;\ninput over_BoughtRsi = 70;\ninput over_SoldRSI = 30;\ninput priceRsi = close;\ninput priceRsi2 = vwap;\n\n\n\ninput averageTypeRSI = AverageType.WILDERS;\ninput averageTypeRSI2 = AverageType.simple;\n#input showBreakoutSignals = no;\n\ninput showlable = yes;\n\ndef NetChgAvg = MovingAverage(averageTypeRSI, priceRsi - priceRsi[1], length);\ndef TotChgAvg = MovingAverage(averageTypeRSI, AbsValue(priceRsi - priceRsi[1]), length);\ndef ChgRatio = if TotChgAvg != 0 then NetChgAvg / TotChgAvg else 0;\n\nplot RSI = 50 * (ChgRatio + 1);\n\n\ndef NetChgAvg2 = MovingAverage(averageTypeRSI2, priceRsi2 - priceRsi2[1], length+5);\ndef TotChgAvg2 = MovingAverage(averageTypeRSI2, AbsValue(priceRsi2 - priceRsi2[1]), length+5);\ndef ChgRatio2= if TotChgAvg2 != 0 then NetChgAvg2 / TotChgAvg2 else 0;\n\nplot RSI2 = 50 * (ChgRatio2 + 1);\n\n\n\n\n\n\nplot OverSoldR = over_SoldRSI;\nplot OverBoughtR = over_BoughtRsi;\n#plot UpSignal = if RSI crosses above OverSold then OverSold else Double.NaN;\n#plot DownSignal = if RSI crosses below OverBought then OverBought else Double.NaN;\nplot MID = 50;\n\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\nRSI.DefineColor(\&quot;OverBought\&quot;, Color.LIGHT_RED);\nRSI.DefineColor(\&quot;Normal\&quot;, GetColor(7));\nRSI.DefineColor(\&quot;OverSold\&quot;, Color.LIGHT_GREEN);\nRSI.DefineColor(\&quot;Below50\&quot;, Color.CYAN);\nRSI.DefineColor(\&quot;Above50\&quot;, Color.PINK);\n\nRSI.AssignValueColor(if RSI &gt;= over_Bought then RSI.Color(\&quot;OverBought\&quot;) else if RSI &lt;= over_Sold then RSI.Color(\&quot;OverSold\&quot;) else if (RSI &gt; over_Sold and RSI &lt; rsi_th) then RSI.Color(\&quot;Below50\&quot;) else if (RSI &lt; over_Bought and RSI &gt;rsi_th) then RSI.Color(\&quot;Above50\&quot;) else  RSI.Color(\&quot;Normal\&quot;)) ;\nOverSoldR.SetDefaultColor(GetColor(8));\nOverBoughtR.SetDefaultColor(GetColor(8));\n#UpSignal.SetDefaultColor(Color.UPTICK);\n#UpSignal.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\n#DownSignal.SetDefaultColor(Color.DOWNTICK);\n#DownSignal.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\nOverSoldR.hide();\nOverBoughtR.hide();\nmid.hide();\n\nAddLabel(showlable, \&quot;RSI = \&quot; + RSI , if RSI &gt; over_Bought  then Color.RED else if RSI &lt; over_Sold then  Color.GREEN else Color.GRAY);\ndef cldRSIL= if RSI &lt; OverSoldR then RSI else OverSoldR;\nAddCloud(cldRSIL,OverSoldR,  Color.Green, Color.Green);\n\ndef cldRsiH= if RSI &gt; OverBought then RSI else OverBoughtR;\nAddCloud(cldRsiH,OverBoughtR,Color.RED, Color.RED);\n\n\n\ndef ImpVol = imp_volatility();\n\nAddLabel(showlable, \&quot;iV= \&quot; + ImpVol, Color.GRAY);\nMID.DefineColor(\&quot;Mid\&quot;, Color.GREEN);\n\n\n## momentum\n\ndef CloseOpenDiff = if close &gt; open then close - open else 0;\ndef OpenCloseDiff = if close &lt; open then open - close else 0;\ndef avgCloseOpen = Average(CloseOpenDiff, length);\ndef avgOpenClose = Average(OpenCloseDiff, length);\n\n#plot IMI = avgCloseOpen / (avgCloseOpen + avgOpenClose) * 100;\n#IMI.SetDefaultColor(GetColor(8));\n##############################\n\n\n\n#\n# TD Ameritrade IP Company, Inc. (c) 2018-2020\n#\n\n\n\ninput vfiLength = 130;\ninput averageLength = 100;\ninput trendQualityLength = 63;\ninput maxStiffness = 7;\ninput marketIndex = \&quot;SPY\&quot;;\ninput weightForMoneyFlow = 1.0;\ninput weightForTradingAboveAverage = 1.0;\ninput weightForUptrend = 1.0;\ninput weightForTrendQuality = 1.0;\ninput weightForMarketDirection = 2.0;\ninput showLabel = No;\n\ndef vfi = reference VolumeFlowIndicator(length = vfiLength, \&quot;max volume cut off\&quot; = 2.5);\ndef sma = Average(close, averageLength);\ndef ema = ExpAverage(close(marketIndex), averageLength);\ndef stiffness = Sum(close &lt; sma, trendQualityLength);\n\ndef Score;\ndef MoneyFlow = vfi &gt; 0;\ndef TradingAboveAverage = close &gt; sma;\ndef Uptrend = sma &gt; sma[4];\ndef TrendQuality = stiffness &lt;= maxStiffness;\ndef MarketDirection = ema &gt;= ema[2];\n\nScore = weightForMoneyFlow * MoneyFlow + weightForTradingAboveAverage * TradingAboveAverage + weightForUptrend * Uptrend + weightForTrendQuality * TrendQuality + weightForMarketDirection * MarketDirection;\n\n\nAddLabel(showLabel and MoneyFlow, \&quot;Money flow\&quot;, GetColor(2));\nAddLabel(showLabel and TradingAboveAverage, \&quot;Trading above average\&quot;, GetColor(3));\nAddLabel(showLabel and Uptrend, \&quot;Uptrend\&quot;, GetColor(4));\nAddLabel(showLabel and TrendQuality, \&quot;Trend quality\&quot;,GetColor(5));\nAddLabel(showLabel and TrendQuality, \&quot;Trend quality\&quot;,GetColor(5));\nAddLabel(showLabel and MarketDirection, \&quot;Market direction\&quot;,GetColor(6));\nAddLabel(showLabel , \&quot;Market score \&quot;+ score,GetColor(7));&quot;,name=&quot;_ef7ee43b_ddba_4881_809e_96703a28d1ce&quot;}))})}}" SHARED_USER_SCRIPTS="@v8@owner{chartAggregationPeriods:ChartAggregationPeriodArray0,chartAggregationPeriods=@ChartAggregationPeriodArray0}#java.util.HashMap{^(&quot;_4cca65a0_1dac_42a7_ae81_02a4a7bf6cc6&quot;,&quot;CT_BTD_v1_Lower_w_Signal_by_BT&quot;),^(&quot;_06c891ec_d069_40f3_9b66_d05649d4a1f7&quot;,&quot;CT_TMO_Lower&quot;),^(&quot;_ddde497d_34a8_4fc7_8aea_92b14b694cba&quot;,&quot;CT_Voume_w_Buyers_vs_Sellers_by_CashPrince&quot;),^(&quot;_8073e821_ac50_4d0f_b860_40679520bdf5&quot;,&quot;CT_BTD_STR_Upper_by_UTS&quot;),^(&quot;_0363eeee_7d8b_3a12_a9f1_f2006497c7d2&quot;,&quot;CT_BFLG_SA_Zone_Monitor_Label_w_Alerts_062520&quot;),^(&quot;_0877d845_51da_46c6_a700_5326ac641083&quot;,&quot;CT_PreMarketLevels&quot;)}" SYMBOL="FEDU" SYMBOL_GROUP="8" VERTICAL="false" VISIBLE="true" WEIGHT="3.3673469387755093"/>
                  <DASHBOARD VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
                  <LEVEL_II SYMBOL="FEDU" SYMBOL_GROUP="8" VERTICAL="false" VISIBLE="true" WEIGHT="1.0"/>
                  <LIVE_NEWS VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
                  <PHASE_SCORES VERTICAL="false" VISIBLE="false" WEIGHT="2.0"/>
                  <TIME_SALES MIN_QTY_FUTURE="2.0" MIN_QTY_INDEX="5000.0" MIN_QTY_STOCK="5000.0" SYMBOL="FEDU" SYMBOL_GROUP="8" TIME_SALES_COLUMN="TIME:30:F:F,PRICE:20:,SIZE:20:" VERTICAL="false" VISIBLE="true" WEIGHT="0.6734693877551019"/>
                  <TRADE CONFIGURATION_NAME="SINGLE" ORDER_RULES_SET="STOCK" ORDER_TYPE="LIMIT" OS_AUTO="false" OS_EXPANDED="false" OS_TIF="DAY" QTY="100.0" QTY_STEP="1.0" TEMPLATE="SINGLE" TRADE_BUTTONS="BUY_MKT;SELL_MKT;MULTI_CANCEL;REVERSE;FLAT;SECOND_LINE;QUANTITY;AUTO_SEND;ORDER_SETUP" VISIBLE="false">
                    <OCO_STOP>
                      <TRG_0 TRG_ENBL="true" TRG_LINK="ASK_BID" TRG_OFFSET_MODE="TICK" TRG_OT="STOP" TRG_SETUP="10.0" TRG_TIF="DAY">
                        <OFFSET_PER_SYMBOL AAL="10.0" AAN="10.0" AAPL="10.0" ACN="10.0" ADSK="10.0" AIG="10.0" AL="10.0" AMD="10.0" AMGN="10.0" ANET="10.0" ATH="10.0" AZN="10.0" B="10.0" BA="10.0" BABA="10.0" BAC="10.0" BBBY="10.0" BBY="10.0" BMA="10.0" BMY="10.0" BUD="10.0" BURL="10.0" C="10.0" CAR="10.0" CCL="10.0" CGC="10.0" CHGG="10.0" CHWY="10.0" CLEU="10.0" CNQ="10.0" COUP="10.0" CRM="10.0" CRSP="10.0" CRWD="10.0" CSCO="10.0" CWT="10.0" CXO="10.0" DBX="10.0" DGX="10.0" DOCU="10.0" EBAY="10.0" EDTK="10.0" EIDX="10.0" EOG="10.0" ESS="10.0" ETFC="10.0" ETSY="10.0" FARO="10.0" FEDU="10.0" FIVN="10.0" G="10.0" GKOS="10.0" GLPG="10.0" GS="10.0" ICPT="10.0" INTC="10.0" JBLU="10.0" JCI="10.0" JNUG="10.0" JWN="10.0" KL="10.0" KO="10.0" KOD="10.0" KWEB="10.0" LHX="10.0" LITE="10.0" LYFT="10.0" MCD="10.0" MEDP="10.0" MHK="10.0" MRNA="10.0" MRTN="10.0" MTN="10.0" MU="10.0" NCLH="10.0" NKLA="10.0" NTNX="10.0" NTRS="10.0" NVAX="10.0" NVDA="10.0" OSTK="10.0" OTTR="10.0" PANW="10.0" PDD="10.0" PENN="10.0" PFE="10.0" PHI="10.0" PLNT="10.0" PTON="10.0" QCOM="10.0" RCL="10.0" ROKU="10.0" SHAK="10.0" SNAP="10.0" SPX="10.0" SPXL="10.0" SQ="10.0" STZ="10.0" SYK="10.0" TLRY="10.0" TNDM="10.0" TRGP="10.0" TSLA="10.0" TWTR="10.0" UAL="10.0" ULTA="10.0" V="10.0" VEC="10.0" VEEV="10.0" VIX="10.0" VRSN="10.0" VZ="10.0" W="10.0" WAFU="10.0" WFC="10.0" WYNN="10.0" YETI="10.0" Z="10.0" ZBRA="10.0" ZM="10.0"/>
                      </TRG_0>
                    </OCO_STOP>
                    <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="1.0" TRG_TIF="DAY">
                      <OFFSET_PER_SYMBOL AAL="1.0" AAN="1.0" AAPL="1.0" ACN="1.0" ADSK="1.0" AIG="1.0" AL="1.0" AMD="1.0" AMGN="1.0" ANET="1.0" ATH="1.0" AZN="1.0" B="1.0" BA="1.0" BABA="1.0" BAC="1.0" BBBY="1.0" BBY="1.0" BMA="1.0" BMY="1.0" BUD="1.0" BURL="1.0" C="1.0" CAR="1.0" CCL="1.0" CGC="1.0" CHGG="1.0" CHWY="1.0" CLEU="1.0" CNQ="1.0" COUP="1.0" CRM="1.0" CRSP="1.0" CRWD="1.0" CSCO="1.0" CWT="1.0" CXO="1.0" DBX="1.0" DGX="1.0" DOCU="1.0" EBAY="1.0" EDTK="1.0" EIDX="1.0" EOG="1.0" ESS="1.0" ETFC="1.0" ETSY="1.0" FARO="1.0" FEDU="1.0" FIVN="1.0" G="1.0" GKOS="1.0" GLPG="1.0" GS="1.0" ICPT="1.0" INTC="1.0" JBLU="1.0" JCI="1.0" JNUG="1.0" JWN="1.0" KL="1.0" KO="1.0" KOD="1.0" KWEB="1.0" LHX="1.0" LITE="1.0" LYFT="1.0" MCD="1.0" MEDP="1.0" MHK="1.0" MRNA="1.0" MRTN="1.0" MTN="1.0" MU="1.0" NCLH="1.0" NKLA="1.0" NTNX="1.0" NTRS="1.0" NVAX="1.0" NVDA="1.0" OSTK="1.0" OTTR="1.0" PANW="1.0" PDD="1.0" PENN="1.0" PFE="1.0" PHI="1.0" PLNT="1.0" PTON="1.0" QCOM="1.0" RCL="1.0" ROKU="1.0" SHAK="1.0" SNAP="1.0" SPX="1.0" SPXL="1.0" SQ="1.0" STZ="1.0" SYK="1.0" TLRY="1.0" TNDM="1.0" TRGP="1.0" TSLA="1.0" TWTR="1.0" UAL="1.0" ULTA="1.0" V="1.0" VEC="1.0" VEEV="1.0" VIX="1.0" VRSN="1.0" VZ="1.0" W="1.0" WAFU="1.0" WFC="1.0" WYNN="1.0" YETI="1.0" Z="1.0" ZBRA="1.0" ZM="1.0"/>
                    </TRG_0>
                    <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-1.0" TRG_TIF="DAY">
                      <OFFSET_PER_SYMBOL AAL="-1.0" AAN="-1.0" AAPL="-1.0" ACN="-1.0" ADSK="-1.0" AIG="-1.0" AL="-1.0" AMD="-1.0" AMGN="-1.0" ANET="-1.0" ATH="-1.0" AZN="-1.0" B="-1.0" BA="-1.0" BABA="-1.0" BAC="-1.0" BBBY="-1.0" BBY="-1.0" BMA="-1.0" BMY="-1.0" BUD="-1.0" BURL="-1.0" C="-1.0" CAR="-1.0" CCL="-1.0" CGC="-1.0" CHGG="-1.0" CHWY="-1.0" CLEU="-1.0" CNQ="-1.0" COUP="-1.0" CRM="-1.0" CRSP="-1.0" CRWD="-1.0" CSCO="-1.0" CWT="-1.0" CXO="-1.0" DBX="-1.0" DGX="-1.0" DOCU="-1.0" EBAY="-1.0" EDTK="-1.0" EIDX="-1.0" EOG="-1.0" ESS="-1.0" ETFC="-1.0" ETSY="-1.0" FARO="-1.0" FEDU="-1.0" FIVN="-1.0" G="-1.0" GKOS="-1.0" GLPG="-1.0" GS="-1.0" ICPT="-1.0" INTC="-1.0" JBLU="-1.0" JCI="-1.0" JNUG="-1.0" JWN="-1.0" KL="-1.0" KO="-1.0" KOD="-1.0" KWEB="-1.0" LHX="-1.0" LITE="-1.0" LYFT="-1.0" MCD="-1.0" MEDP="-1.0" MHK="-1.0" MRNA="-1.0" MRTN="-1.0" MTN="-1.0" MU="-1.0" NCLH="-1.0" NKLA="-1.0" NTNX="-1.0" NTRS="-1.0" NVAX="-1.0" NVDA="-1.0" OSTK="-1.0" OTTR="-1.0" PANW="-1.0" PDD="-1.0" PENN="-1.0" PFE="-1.0" PHI="-1.0" PLNT="-1.0" PTON="-1.0" QCOM="-1.0" RCL="-1.0" ROKU="-1.0" SHAK="-1.0" SNAP="-1.0" SPX="-1.0" SPXL="-1.0" SQ="-1.0" STZ="-1.0" SYK="-1.0" TLRY="-1.0" TNDM="-1.0" TRGP="-1.0" TSLA="-1.0" TWTR="-1.0" UAL="-1.0" ULTA="-1.0" V="-1.0" VEC="-1.0" VEEV="-1.0" VIX="-1.0" VRSN="-1.0" VZ="-1.0" W="-1.0" WAFU="-1.0" WFC="-1.0" WYNN="-1.0" YETI="-1.0" Z="-1.0" ZBRA="-1.0" ZM="-1.0"/>
                    </TRG_1>
                    <_2>
                      <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="2.0" TRG_TIF="DAY">
                        <OFFSET_PER_SYMBOL AAL="2.0" AAN="2.0" AAPL="2.0" ACN="2.0" ADSK="2.0" AIG="2.0" AL="2.0" AMD="2.0" AMGN="2.0" ANET="2.0" ATH="2.0" AZN="2.0" B="2.0" BA="2.0" BABA="2.0" BAC="2.0" BBBY="2.0" BBY="2.0" BMA="2.0" BMY="2.0" BUD="2.0" BURL="2.0" C="2.0" CAR="2.0" CCL="2.0" CGC="2.0" CHGG="2.0" CHWY="2.0" CLEU="2.0" CNQ="2.0" COUP="2.0" CRM="2.0" CRSP="2.0" CRWD="2.0" CSCO="2.0" CWT="2.0" CXO="2.0" DBX="2.0" DGX="2.0" DOCU="2.0" EBAY="2.0" EDTK="2.0" EIDX="2.0" EOG="2.0" ESS="2.0" ETFC="2.0" ETSY="2.0" FARO="2.0" FEDU="2.0" FIVN="2.0" G="2.0" GKOS="2.0" GLPG="2.0" GS="2.0" ICPT="2.0" INTC="2.0" JBLU="2.0" JCI="2.0" JNUG="2.0" JWN="2.0" KL="2.0" KO="2.0" KOD="2.0" KWEB="2.0" LHX="2.0" LITE="2.0" LYFT="2.0" MCD="2.0" MEDP="2.0" MHK="2.0" MRNA="2.0" MRTN="2.0" MTN="2.0" MU="2.0" NCLH="2.0" NKLA="2.0" NTNX="2.0" NTRS="2.0" NVAX="2.0" NVDA="2.0" OSTK="2.0" OTTR="2.0" PANW="2.0" PDD="2.0" PENN="2.0" PFE="2.0" PHI="2.0" PLNT="2.0" PTON="2.0" QCOM="2.0" RCL="2.0" ROKU="2.0" SHAK="2.0" SNAP="2.0" SPX="2.0" SPXL="2.0" SQ="2.0" STZ="2.0" SYK="2.0" TLRY="2.0" TNDM="2.0" TRGP="2.0" TSLA="2.0" TWTR="2.0" UAL="2.0" ULTA="2.0" V="2.0" VEC="2.0" VEEV="2.0" VIX="2.0" VRSN="2.0" VZ="2.0" W="2.0" WAFU="2.0" WFC="2.0" WYNN="2.0" YETI="2.0" Z="2.0" ZBRA="2.0" ZM="2.0"/>
                      </TRG_0>
                      <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-2.0" TRG_TIF="DAY">
                        <OFFSET_PER_SYMBOL AAL="-2.0" AAN="-2.0" AAPL="-2.0" ACN="-2.0" ADSK="-2.0" AIG="-2.0" AL="-2.0" AMD="-2.0" AMGN="-2.0" ANET="-2.0" ATH="-2.0" AZN="-2.0" B="-2.0" BA="-2.0" BABA="-2.0" BAC="-2.0" BBBY="-2.0" BBY="-2.0" BMA="-2.0" BMY="-2.0" BUD="-2.0" BURL="-2.0" C="-2.0" CAR="-2.0" CCL="-2.0" CGC="-2.0" CHGG="-2.0" CHWY="-2.0" CLEU="-2.0" CNQ="-2.0" COUP="-2.0" CRM="-2.0" CRSP="-2.0" CRWD="-2.0" CSCO="-2.0" CWT="-2.0" CXO="-2.0" DBX="-2.0" DGX="-2.0" DOCU="-2.0" EBAY="-2.0" EDTK="-2.0" EIDX="-2.0" EOG="-2.0" ESS="-2.0" ETFC="-2.0" ETSY="-2.0" FARO="-2.0" FEDU="-2.0" FIVN="-2.0" G="-2.0" GKOS="-2.0" GLPG="-2.0" GS="-2.0" ICPT="-2.0" INTC="-2.0" JBLU="-2.0" JCI="-2.0" JNUG="-2.0" JWN="-2.0" KL="-2.0" KO="-2.0" KOD="-2.0" KWEB="-2.0" LHX="-2.0" LITE="-2.0" LYFT="-2.0" MCD="-2.0" MEDP="-2.0" MHK="-2.0" MRNA="-2.0" MRTN="-2.0" MTN="-2.0" MU="-2.0" NCLH="-2.0" NKLA="-2.0" NTNX="-2.0" NTRS="-2.0" NVAX="-2.0" NVDA="-2.0" OSTK="-2.0" OTTR="-2.0" PANW="-2.0" PDD="-2.0" PENN="-2.0" PFE="-2.0" PHI="-2.0" PLNT="-2.0" PTON="-2.0" QCOM="-2.0" RCL="-2.0" ROKU="-2.0" SHAK="-2.0" SNAP="-2.0" SPX="-2.0" SPXL="-2.0" SQ="-2.0" STZ="-2.0" SYK="-2.0" TLRY="-2.0" TNDM="-2.0" TRGP="-2.0" TSLA="-2.0" TWTR="-2.0" UAL="-2.0" ULTA="-2.0" V="-2.0" VEC="-2.0" VEEV="-2.0" VIX="-2.0" VRSN="-2.0" VZ="-2.0" W="-2.0" WAFU="-2.0" WFC="-2.0" WYNN="-2.0" YETI="-2.0" Z="-2.0" ZBRA="-2.0" ZM="-2.0"/>
                      </TRG_1>
                    </_2>
                    <_3>
                      <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="3.0" TRG_TIF="DAY">
                        <OFFSET_PER_SYMBOL AAL="3.0" AAN="3.0" AAPL="3.0" ACN="3.0" ADSK="3.0" AIG="3.0" AL="3.0" AMD="3.0" AMGN="3.0" ANET="3.0" ATH="3.0" AZN="3.0" B="3.0" BA="3.0" BABA="3.0" BAC="3.0" BBBY="3.0" BBY="3.0" BMA="3.0" BMY="3.0" BUD="3.0" BURL="3.0" C="3.0" CAR="3.0" CCL="3.0" CGC="3.0" CHGG="3.0" CHWY="3.0" CLEU="3.0" CNQ="3.0" COUP="3.0" CRM="3.0" CRSP="3.0" CRWD="3.0" CSCO="3.0" CWT="3.0" CXO="3.0" DBX="3.0" DGX="3.0" DOCU="3.0" EBAY="3.0" EDTK="3.0" EIDX="3.0" EOG="3.0" ESS="3.0" ETFC="3.0" ETSY="3.0" FARO="3.0" FEDU="3.0" FIVN="3.0" G="3.0" GKOS="3.0" GLPG="3.0" GS="3.0" ICPT="3.0" INTC="3.0" JBLU="3.0" JCI="3.0" JNUG="3.0" JWN="3.0" KL="3.0" KO="3.0" KOD="3.0" KWEB="3.0" LHX="3.0" LITE="3.0" LYFT="3.0" MCD="3.0" MEDP="3.0" MHK="3.0" MRNA="3.0" MRTN="3.0" MTN="3.0" MU="3.0" NCLH="3.0" NKLA="3.0" NTNX="3.0" NTRS="3.0" NVAX="3.0" NVDA="3.0" OSTK="3.0" OTTR="3.0" PANW="3.0" PDD="3.0" PENN="3.0" PFE="3.0" PHI="3.0" PLNT="3.0" PTON="3.0" QCOM="3.0" RCL="3.0" ROKU="3.0" SHAK="3.0" SNAP="3.0" SPX="3.0" SPXL="3.0" SQ="3.0" STZ="3.0" SYK="3.0" TLRY="3.0" TNDM="3.0" TRGP="3.0" TSLA="3.0" TWTR="3.0" UAL="3.0" ULTA="3.0" V="3.0" VEC="3.0" VEEV="3.0" VIX="3.0" VRSN="3.0" VZ="3.0" W="3.0" WAFU="3.0" WFC="3.0" WYNN="3.0" YETI="3.0" Z="3.0" ZBRA="3.0" ZM="3.0"/>
                      </TRG_0>
                      <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-3.0" TRG_TIF="DAY">
                        <OFFSET_PER_SYMBOL AAL="-3.0" AAN="-3.0" AAPL="-3.0" ACN="-3.0" ADSK="-3.0" AIG="-3.0" AL="-3.0" AMD="-3.0" AMGN="-3.0" ANET="-3.0" ATH="-3.0" AZN="-3.0" B="-3.0" BA="-3.0" BABA="-3.0" BAC="-3.0" BBBY="-3.0" BBY="-3.0" BMA="-3.0" BMY="-3.0" BUD="-3.0" BURL="-3.0" C="-3.0" CAR="-3.0" CCL="-3.0" CGC="-3.0" CHGG="-3.0" CHWY="-3.0" CLEU="-3.0" CNQ="-3.0" COUP="-3.0" CRM="-3.0" CRSP="-3.0" CRWD="-3.0" CSCO="-3.0" CWT="-3.0" CXO="-3.0" DBX="-3.0" DGX="-3.0" DOCU="-3.0" EBAY="-3.0" EDTK="-3.0" EIDX="-3.0" EOG="-3.0" ESS="-3.0" ETFC="-3.0" ETSY="-3.0" FARO="-3.0" FEDU="-3.0" FIVN="-3.0" G="-3.0" GKOS="-3.0" GLPG="-3.0" GS="-3.0" ICPT="-3.0" INTC="-3.0" JBLU="-3.0" JCI="-3.0" JNUG="-3.0" JWN="-3.0" KL="-3.0" KO="-3.0" KOD="-3.0" KWEB="-3.0" LHX="-3.0" LITE="-3.0" LYFT="-3.0" MCD="-3.0" MEDP="-3.0" MHK="-3.0" MRNA="-3.0" MRTN="-3.0" MTN="-3.0" MU="-3.0" NCLH="-3.0" NKLA="-3.0" NTNX="-3.0" NTRS="-3.0" NVAX="-3.0" NVDA="-3.0" OSTK="-3.0" OTTR="-3.0" PANW="-3.0" PDD="-3.0" PENN="-3.0" PFE="-3.0" PHI="-3.0" PLNT="-3.0" PTON="-3.0" QCOM="-3.0" RCL="-3.0" ROKU="-3.0" SHAK="-3.0" SNAP="-3.0" SPX="-3.0" SPXL="-3.0" SQ="-3.0" STZ="-3.0" SYK="-3.0" TLRY="-3.0" TNDM="-3.0" TRGP="-3.0" TSLA="-3.0" TWTR="-3.0" UAL="-3.0" ULTA="-3.0" V="-3.0" VEC="-3.0" VEEV="-3.0" VIX="-3.0" VRSN="-3.0" VZ="-3.0" W="-3.0" WAFU="-3.0" WFC="-3.0" WYNN="-3.0" YETI="-3.0" Z="-3.0" ZBRA="-3.0" ZM="-3.0"/>
                      </TRG_1>
                    </_3>
                  </TRADE>
                </GADGET>
              </MODELNODE0>
              <MODELNODE1 COMPOSITENAME="COMPOSITE_1575349481509" NAME="1575349481446" TYPE="LEAF" WEIGHT="0.3444647758462946">
                <GADGET ROWSPANELWEIGHT="1.0" ROWWEIGHT0="1.0" ROWWEIGHT1="1.0" SELECTED_TYPE="CHART" SIDEBAR_IS_ACTIVE="false" SYMBOL="FEDU" SYMBOL_GROUP="8" TRADE_BUTTONS_MIGRATED="true">
                  <ACTIVETRADER VERTICAL="false" VISIBLE="false" WEIGHT="2.0"/>
                  <BIG_BUTTONS VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
                  <CHART CONFIGURATION="@v9@%0:com.devexperts.tos.thinkscript.constants,1:com.devexperts.tos.thinkscript.data,2:java.awt,3:com.devexperts.toschart.control.subgraph,4:com.devexperts.toschart.elstudies,5:com.devexperts.toschart.script%owner{chartAggregationPeriods:ChartAggregationPeriodArray0{13::ChartAggregationPeriod0},chartAggregationPeriods=@ChartAggregationPeriodArray0,colors{5::CustomColor0,9::CustomColor1,3::CustomColor2,2::CustomColor3,1::CustomColor4,0::CustomColor5}}#com.devexperts.toschart.core.ChartModel{encodedMixinsState=&quot;{\&quot;common\&quot;:{\&quot;DRAWING_SETS\&quot;:\&quot;{}\&quot;},\&quot;state_props\&quot;:{\&quot;state_type\&quot;:\&quot;REGULAR\&quot;},\&quot;monkey_bars_exp\&quot;:{\&quot;LikefolioMixin\&quot;:\&quot;{\\\&quot;paintingSettings\\\&quot;:{\\\&quot;neutralSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;positiveSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;negativeSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;sentimentSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true}},\\\&quot;shownDivisions\\\&quot;:[],\\\&quot;allDivisions\\\&quot;:[]}\&quot;},\&quot;monkey_bars\&quot;:{},\&quot;seasonality\&quot;:{},\&quot;regular\&quot;:{\&quot;DescriberMixin\&quot;:\&quot;{\\\&quot;visibility\\\&quot;:\\\&quot;HIDE_PANEL\\\&quot;,\\\&quot;studiesMode\\\&quot;:\\\&quot;HIDE_STUDIES\\\&quot;}\&quot;,\&quot;LikefolioMixin\&quot;:\&quot;{\\\&quot;paintingSettings\\\&quot;:{\\\&quot;neutralSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;positiveSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;negativeSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;sentimentSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true}},\\\&quot;shownDivisions\\\&quot;:[],\\\&quot;allDivisions\\\&quot;:[]}\&quot;}}&quot;,encodedPatternsModel=&quot;{\&quot;showPatterns\&quot;:true,\&quot;models\&quot;:[],\&quot;fibModels\&quot;:[]}&quot;,groupId=&quot;default&quot;,styleSettings{activeTool=13,chartAggregationSettings{priceAggregationSettings.timePeriod:ChartRange0,timeAggregationSettings=!com.devexperts.toschart.model.TimeFrameAggregationSettings.createTickOrTimeAggregation(@ChartRange0,@ChartAggregationPeriod0)},commonStyleSettings{autoCorpActionsExpansion=&lt;T,chartModeName:ChartModeName0,chartModes.!get(@ChartModeName0){chartPaintingType=!java.lang.Enum.valueOf(*%0.ChartPaintingType.class,&quot;BAR&quot;)},colorSettings{backgroundColor=#%1.CustomColor(#%2.Color(20,20,20,255)),barTypeColors{downColor=@CustomColor0,neutralColor=@CustomColor1,upColor=@CustomColor2},candleTrendTypeColors{fillUpColor=#%1.CustomColor(#%2.Color(0,204,204,255)),upColor=#%1.CustomColor(#%2.Color(0,204,204,255))},candleTypeColors.upColor=#%1.CustomColor(#%2.Color(0,204,204,195)),monkeyProfileTypeColors.defaultRowHeight=&lt;F,mpExpandedTypeColors.defaultRowHeight=&lt;F,volumeColor=#%1.CustomColor(#%2.Color(0,101,153,127))},fitArrowsToScreen=&lt;F,fitStudiesToScreen=&lt;F,manualAxisRegulator{maxValue=5.07559055d,minValue=1.1484252d},overlappedVolume=&lt;T,shortCuts{^(&quot;Time Zone&quot;,&lt;F),^(&quot;Show Expiration Friday &quot;,&lt;F),^(&quot;Keep Price Zoom&quot;,&lt;F),^(&quot;enableLeftAxis&quot;,&lt;F),^(&quot;Fit expected price ranges&quot;,&lt;F),^(&quot;emphasizeDigitMPExpanded&quot;,&lt;F),^(&quot;showWicksCandleTrend&quot;,&lt;F),^(&quot;highlightEarnings&quot;,&lt;F),^(&quot;synchronizeCrosshair&quot;,&lt;F),^(&quot;myToolsMode&quot;,&lt;F),^(&quot;seasonalityStyle&quot;,&lt;F),^(&quot;Show Price Subgraph&quot;,&lt;F),^(&quot;closePriceLevel&quot;,&lt;F),^(&quot;Color Volume As Symbol Ticks&quot;,&lt;F),^(&quot;highlightPhantomRBars&quot;,&lt;F),^(&quot;Cross type &quot;,&lt;F),^(&quot;Fit Studies to Screen&quot;,&lt;F),^(&quot;Fit Orders&quot;,&lt;F),^(&quot;Bubbles as Percentage&quot;,&lt;F),^(&quot;hideStatusString&quot;,&lt;F),^(&quot;Show Studies &quot;,&lt;F),^(&quot;showWicksHeikinAshi&quot;,&lt;F),^(&quot;Alerts&quot;,&lt;F),^(&quot;Chart scale&quot;,&lt;F),^(&quot;Fit High/Low&quot;,&lt;F),^(&quot;Orders&quot;,&lt;F),^(&quot;Use Log Scale &quot;,&lt;F),^(&quot;Fit Study Markers to Screen&quot;,&lt;F),^(&quot;Fit Alerts&quot;,&lt;F),^(&quot;Fit patterns&quot;,&lt;F),^(&quot;Percentage View&quot;,&lt;F),^(&quot;Make Auto Zoom &quot;,&lt;F),^(&quot;Show Year Marking Line&quot;,&lt;F),^(&quot;Show Rollover Line&quot;,&lt;F),^(&quot;Show High/Low Bubbles &quot;,&lt;F),^(&quot;Snap mode&quot;,&lt;F),^(&quot;highlightStudies&quot;,&lt;F),^(&quot;Overlapped Volume&quot;,&lt;F),^(&quot;Show Symbol Logo&quot;,&lt;F),^(&quot;Show Last Price Bubble &quot;,&lt;F),^(&quot;emphasizeDigitMP&quot;,&lt;F),^(&quot;Show grid&quot;,&lt;F),^(&quot;showWicksCandle&quot;,&lt;F),^(&quot;Show trades&quot;,&lt;F),^(&quot;highlightSeasons&quot;,&lt;F),^(&quot;Extend Order/Alert Line to Left&quot;,&lt;F)},showBubbles=&lt;F,showGrid=&lt;F,showTradeExecution=&lt;T,step=2.5839793281653747d,suppressAutoZoom=&lt;T},forexStyleSettings.shortCuts.^(&quot;Show Volume Subgraph&quot;,&lt;F),futuresStyleSettings{adjustForContractChanges=&lt;T,highlightExtendedHours=&lt;T,shortCuts{^(&quot;adjustForContractChanges&quot;,&lt;F),^(&quot;Show Open Interest&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,&lt;F),^(&quot;showContractChangeEvents&quot;,&lt;F),^(&quot;futures_daily_close_price&quot;,&lt;F),^(&quot;Show Options&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,&lt;F),^(&quot;startAtMarketOpen&quot;,&lt;F)},showOptions=&lt;T},optionsStyleSettings.shortCuts{^(&quot;Show Open Interest&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,&lt;F),^(&quot;Show Theo Price&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,&lt;F),^(&quot;startAtMarketOpen&quot;,&lt;F)},otherStyleSettings.shortCuts{^(&quot;Show Social Sentiment&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,&lt;F),^(&quot;Show Options&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,&lt;F),^(&quot;Show Corporate Actions&quot;,&lt;F),^(&quot;Show CNBC Video&quot;,&lt;F),^(&quot;startAtMarketOpen&quot;,&lt;F),^(&quot;adjustForDividends&quot;,&lt;F)}},subgraphModels{!get(#%3.SubgraphId(&quot;Symbol&quot;)){height=305,storableIndicators{+(!%4.CompiledStudy.resolveStudy(#%5.ScriptEssence{body=&quot;# Trend Pivots\n# Mobius\n# V01.01.29.2019\n# Uses trend of higher highs with higher lows and trend of lower lows with lower highs to locate pivots. Distance for trend is set by the user. Confirmation of a reversal from pivots is set with a multiple of the pivot bars range. That multiple is also a user input.\n# Trading Rules\n# 1) Trade when price crosses and closes outside the pivot Confirmation line. At that point looking for best entry. Min trade is 2 contracts\n# 2) Know your risk point before entering trade. Typical risk point is the pivot line itself. If your risk is crossed look for an exit. Never use hard stops - you\'ll often get out for little or no loss\n# 3) Know your Risk off point before entering. Typical Risk Off is an ATR multiple. Offer Risk Off as soon as possible for a Risk Free trade\n# 4) set mental stop one tick above entry when Risk Off is achieved\n# 5) if trade continues your way move mental stop for your runner to last support / resistance each time a new support / resistance is hit.\n\ninput n = 5;\ninput R_Mult = .7;\n\ndef o = open;\ndef h = high;\ndef l = low;\ndef c = close;\ndef x = BarNumber();\ndef nan = Double.NaN;\ndef ts = tickSize();\ndef tr = TrueRange(h, c, l);\ndef hh = if Sum(h &gt; h[1], n) &gt;= n and \n            Sum(l &gt; l[1], n) &gt;= n-1\n         then h\n         else if h &gt; hh[1]\n              then h\n              else hh[1];\ndef xh = if h == hh\n         then x\n         else nan;\nplot hh_ = if x &gt;= HighestAll(xh)\n           then HighestAll(if IsNaN(c[-1])\n                           then hh\n                           else nan)\n           else nan;\n     hh_.SetDefaultColor(Color.RED);\n     hh_.HideTitle();\n     hh_.HideBubble();\ndef hR = if h == hh\n         then Round(Average(tr, n)/TickSize(), 0)*TickSize()\n         else hR[1];\ndef PrevL = if h == hh\n            then l[1]\n            else PrevL[1];\nplot STO = if x &gt;= HighestAll(xh)\n           then HighestAll(if IsNaN(c[-1])\n           then Round((Max(PrevL, hh_ - (hR * R_Mult))) / ts, 0) * ts\n                           else nan)\n           else nan;\n     STO.SetDefaultColor(Color.RED);\n     STO.HideTitle();\n     STO.HideBubble();\nplot STO_RO = if x &gt;= HighestAll(xh)\n              then HighestAll(if isNaN(c[-1])\n                              then STO - Min(hR, TickSize() * 16)\n                              else nan)\n              else nan;\n     STO_RO.SetStyle(Curve.Long_Dash);\n     STO_RO.SetDefaultColor(Color.White);\n     STO_RO.HideBubble();\n     STO_RO.HideTitle();\nAddChartBubble(x == HighestAll(x), STO_RO, \&quot;RO\&quot;, STO_RO.TakeValueColor(), 0);\ndef ll = if Sum(l &lt; l[1], n) &gt;= n and \n            Sum(h &lt; h[1], n) &gt;= n-1\n         then l\n         else if l &lt; ll[1]\n              then l\n              else ll[1];\ndef xl = if l == ll\n         then x\n         else nan;\nplot ll_ = if x &gt;= HighestAll(xl)\n           then HighestAll(if IsNaN(c[-1])\n                           then ll\n                           else nan)\n           else nan;\n     ll_.SetDefaultColor(Color.GREEN);\n     ll_.HideTitle();\n     ll_.HideBubble();\ndef lR = if l == ll\n         then Round(Average(tr, n)/TickSize(), 0)*TickSize()\n         else lR[1];\ndef PrevH = if l == ll\n            then h[1]\n            else PrevH[1];\nplot BTO = if x &gt;= HighestAll(xl)\n           then HighestAll(if IsNaN(c[-1])\n           then Round((Min(PrevH, ll_ + (lR * R_Mult))) / ts, 0) * ts\n                           else nan)\n           else nan;\n     BTO.SetDefaultColor(Color.GREEN);\n     BTO.HideTitle();\n     BTO.HideBubble();\nplot BTO_RO = if x &gt;= HighestAll(xl)\n              then HighestAll(if isNaN(c[-1])\n                              then BTO + Min(lR, TickSize() * 16)\n                              else nan)\n              else nan;\n     BTO_RO.SetStyle(Curve.Long_Dash);\n     BTO_RO.SetDefaultColor(Color.White);\n     BTO_RO.HideBubble();\n     BTO_RO.HideTitle();\nAddChartBubble(x == HighestAll(x), BTO_RO, \&quot;RO\&quot;, BTO_RO.TakeValueColor(), 1);\nAddCloud(STO, hh_, Color.LIGHT_RED, Color.LIGHT_RED);\nAddCloud(ll_, BTO, Color.LIGHT_GREEN, Color.LIGHT_GREEN);\nAlert(c crosses below STO, \&quot;\&quot;, Alert.Bar, Sound.Bell);\nAlert(c crosses above BTO, \&quot;\&quot;, Alert.Bar, Sound.Ding);\n# End Code Trend Pivots &quot;,name=&quot;_bdb90595_db2e_3040_abcc_53876b8695e2&quot;}){alerts:LocalAlertArray0,alerts=@LocalAlertArray0}),+(!%4.CompiledStudy.resolveStudy(#%5.ScriptEssence{body=&quot;# @new\n# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2011-2021\n#\n# Source code isn\'t available.\n\ninput arrayPeriod = 13;\ninput formationPeriod = 9;\n\nplot \&quot;Buy Formation\&quot; = Double.NaN;\nplot \&quot;Sell Formation\&quot; = Double.NaN;\nplot \&quot;Buy Array\&quot; = Double.NaN;\nplot \&quot;Sell Array\&quot; = Double.NaN;\nplot \&quot;Perfect Buy\&quot; = Double.NaN;\nplot \&quot;Perfect Sell\&quot; = Double.NaN;\nplot \&quot;Perfect Array Buy\&quot; = Double.NaN;\nplot \&quot;Perfect Array Sell\&quot; = Double.NaN;&quot;,name=&quot;SequenceCounter&quot;}){plots{0:{color=#%1.CustomColor(#%2.Color(0,255,51,255))},1:{color=#%1.CustomColor(#%2.Color(255,0,0,255))},2:{color=!%1.CustomColor.findByIndex(&quot;17&quot;),hiding=&lt;T},3:{color=@CustomColor3,hiding=&lt;T},4:{color=#%1.CustomColor(#%2.Color(0,255,0,255))},5:{color=#%1.CustomColor(#%2.Color(255,0,0,255))},6:{color=#%1.CustomColor(#%2.Color(0,255,0,255))},7:{color=#%1.CustomColor(#%2.Color(255,0,0,255))}}}),+(!%4.CompiledStudy.resolveStudy(#%5.ScriptEssence{body=&quot;# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2017-2021\n#\n\ninput price = close;\ninput length = 9;\ninput displace = 0;\ninput showBreakoutSignals = no;\n\nplot AvgExp = ExpAverage(price[-displace], length);\nplot UpSignal = price crosses above AvgExp;\nplot DownSignal = price crosses below AvgExp;\n\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\nAvgExp.SetDefaultColor(GetColor(1));\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);&quot;,name=&quot;MovAvgExponential&quot;}){inputsMap:TreeMap0{^(&quot;length&quot;,20),^(&quot;price&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap0,plots{0:{color=!%1.CustomColor.findByIndex(&quot;12&quot;)}}}),+(!%4.CompiledStudy.resolveStudy(#%5.ScriptEssence{body=&quot;# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2017-2021\n#\n\ninput price = close;\ninput length = 9;\ninput displace = 0;\ninput showBreakoutSignals = no;\n\nplot AvgExp = ExpAverage(price[-displace], length);\nplot UpSignal = price crosses above AvgExp;\nplot DownSignal = price crosses below AvgExp;\n\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\nAvgExp.SetDefaultColor(GetColor(1));\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);&quot;,name=&quot;MovAvgExponential&quot;}){inputsMap:TreeMap1{^(&quot;length&quot;,50),^(&quot;price&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap1,plots{0:{color=@CustomColor0}}}),+(!%4.CompiledStudy.resolveStudy(#%5.ScriptEssence{body=&quot;# @new\n# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2011-2021\n#\n\ninput numDevDn = -2.0;\ninput numDevUp = 2.0;\ninput timeFrame = {default DAY, WEEK, MONTH};\n\ndef cap = getAggregationPeriod();\ndef errorInAggregation =\n    timeFrame == timeFrame.DAY and cap &gt;= AggregationPeriod.WEEK or\n    timeFrame == timeFrame.WEEK and cap &gt;= AggregationPeriod.MONTH;\nassert(!errorInAggregation, \&quot;timeFrame should be not less than current chart aggregation period\&quot;);\n\ndef yyyyMmDd = getYyyyMmDd();\ndef periodIndx;\nswitch (timeFrame) {\ncase DAY:\n    periodIndx = yyyyMmDd;\ncase WEEK:\n    periodIndx = Floor((daysFromDate(first(yyyyMmDd)) + getDayOfWeek(first(yyyyMmDd))) / 7);\ncase MONTH:\n    periodIndx = roundDown(yyyyMmDd / 100, 0);\n}\ndef isPeriodRolled = compoundValue(1, periodIndx != periodIndx[1], yes);\n\ndef volumeSum;\ndef volumeVwapSum;\ndef volumeVwap2Sum;\n\nif (isPeriodRolled) {\n    volumeSum = volume;\n    volumeVwapSum = volume * vwap;\n    volumeVwap2Sum = volume * Sqr(vwap);\n} else {\n    volumeSum = compoundValue(1, volumeSum[1] + volume, volume);\n    volumeVwapSum = compoundValue(1, volumeVwapSum[1] + volume * vwap, volume * vwap);\n    volumeVwap2Sum = compoundValue(1, volumeVwap2Sum[1] + volume * Sqr(vwap), volume * Sqr(vwap));\n}\ndef price = volumeVwapSum / volumeSum;\ndef deviation = Sqrt(Max(volumeVwap2Sum / volumeSum - Sqr(price), 0));\n\nplot VWAP = price;\nplot UpperBand = price + numDevUp * deviation;\nplot LowerBand = price + numDevDn * deviation;\n\nVWAP.setDefaultColor(getColor(0));\nUpperBand.setDefaultColor(getColor(2));\nLowerBand.setDefaultColor(getColor(4));&quot;,name=&quot;VWAP&quot;}){plots{0:{color=@CustomColor1,lineStyle=2,lineWeight=2},1:{hiding=&lt;T},2:{hiding=&lt;T}}}),+(!%4.CompiledStudy.resolveStudy(#%5.ScriptEssence{body=&quot;# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2017-2021\n#\n\ninput price = close;\ninput length = 9;\ninput displace = 0;\ninput showBreakoutSignals = no;\n\nplot AvgExp = ExpAverage(price[-displace], length);\nplot UpSignal = price crosses above AvgExp;\nplot DownSignal = price crosses below AvgExp;\n\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\nAvgExp.SetDefaultColor(GetColor(1));\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);&quot;,name=&quot;MovAvgExponential&quot;}){hidden=&lt;T,inputsMap:TreeMap2{^(&quot;price&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap2}),+(!%4.CompiledStudy.resolveStudy(#%5.ScriptEssence{body=&quot;# Buythedip + Selltherip Indicator (Upper)\n# Assembled by BenTen at UseThinkScript.com\n# Modified by BoarTrades #Boar6916 on discord\n# &lt;NOTES&gt;\n# Based on the concept of \&quot;Synethetic VIX\&quot; by Larry Williams\n# This software is licensed for individual use only.\n# NOT FOR REDISTRIBUTION PRIVATE/CONFIDENTIAL\n# Copyright (c) 2020 useThinkScript LLC\n\ninput length = 22;\ninput BTD_meter = yes;\ninput STR_meter = yes;\ninput arrows = yes;\ninput color_change = yes;\n\n# BTD Plot indicator\ndef BTD_value = ((high - Lowest(close[1], length)) / Lowest(close[1], length)) * 100;\ndef buythedip = BTD_value;\ndef Zeroline = 0;\ndef BTD_condition = buythedip crosses above Zeroline;\n\n# STR Plot indicator\ndef STR_value = ((low - highest(close[1], length)) / highest(close[1], length)) * 100;\ndef selltherip = STR_value;\ndef STR_condition = selltherip crosses below Zeroline;\n\nAddLabel(BTD_meter and yes, Concat(\&quot;BTD = \&quot;, buythedip), color.CYAN);\nAddLabel(STR_meter and yes, Concat(\&quot;STR = \&quot;, selltherip), color.MAGENTA);\n\n# BTD Plot arrows\nplot UpSignal = if arrows and BTD_condition then buythedip else Double.NaN;\nUpSignal.SetDefaultColor(Color.Orange);\nUpSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\n\n# STR Plot arrows\nplot DnSignal = if arrows and STR_condition then selltherip else Double.NaN;\nDnSignal.SetDefaultColor(Color.RED);\nDnSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);&quot;,name=&quot;_acdb191b_7565_36d8_9406_cd07ae712c77&quot;}){plots{0:{color=@CustomColor4,lineWeight=3},1:{color=@CustomColor5,lineWeight=3}}}),+(!%4.CompiledStudy.resolveStudy(#%5.ScriptEssence{body=&quot;# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2017-2021\n#\n\ninput price = close;\ninput length = 9;\ninput displace = 0;\ninput showBreakoutSignals = no;\n\nplot AvgExp = ExpAverage(price[-displace], length);\nplot UpSignal = price crosses above AvgExp;\nplot DownSignal = price crosses below AvgExp;\n\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\nAvgExp.SetDefaultColor(GetColor(1));\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);&quot;,name=&quot;MovAvgExponential&quot;})),+(!%4.CompiledStudy.resolveStudy(#%5.ScriptEssence{body=&quot;\n# Custom Pre-Market Levels ThinkScript by 3RG Coding for #PBP\n# edited 4/1/19\n\n# Inputs\n\ninput PlotPreMktLinesHrsPastOpen = 0;\n\ninput PlotRegMktLinesHrsPastOpen = 0;\n\ninput PlotYesterdayMktLinesHrsPastOpen = 0;\n\ninput PlotActiveRegMktLinesOnPrevDays = 0;\n\ninput DisplayPreMarketPriceBubbles = yes;\n\ninput DisplayCurrentDayPriceBubbles = yes;\n\ninput DisplayPreviousDayPriceBubbles = yes;\n\n# Pre market / Regular market definitions\n\ndef ExtPMOut = PlotPreMktLinesHrsPastOpen * 3610000;\n\ndef ExtRMOut = PlotRegMktLinesHrsPastOpen * 3610000;\n\ndef ExtYMOut = PlotYesterdayMktLinesHrsPastOpen * 3610000;\n\ndef MktPlot = GetLastDay() - PlotActiveRegMktLinesOnPrevDays &lt;= GetDay() and GetLastYear() - 0 &lt;= GetYear();\n\ndef PMhrs = RegularTradingStart (GetYYYYMMDD()) &gt; GetTime();\n\ndef RMhrs = RegularTradingStart (GetYYYYMMDD()) &lt; GetTime();\n\ndef PMplots = RegularTradingStart (GetYYYYMMDD()) &gt; GetTime() - ExtPMOut;\n\ndef RMplots = RegularTradingStart (GetYYYYMMDD()) &gt; GetTime() - ExtRMOut;\n\ndef YMplots = RegularTradingStart (GetYYYYMMDD()) &gt; GetTime() - ExtYMOut;\n\ndef PMStart = RMhrs[1] and PMhrs;\n\ndef RMStart = PMhrs[1] and RMhrs;\n\ndef PMHigh = CompoundValue(1, if PMStart then high else if PMhrs then Max(high, PMHigh[1]) else PMHigh[1], 0);\n\ndef PMLow = CompoundValue (1, if PMStart then low else if PMhrs then Min(low, PMLow[1]) else PMLow[1], 0);\n\ndef bar = BarNumber();\n\ndef highBar = if PMhrs and high == PMHigh then bar else Double.NaN;\n\ndef lowBar = if PMhrs and low == PMLow then bar else Double.NaN;\n\n# Current price line tracker code\n\nplot PriceLine = HighestAll (if IsNaN(close[-1]) and !IsNaN(close) then close else Double.NaN);\n\nPriceLine.SetDefaultColor (Color.GRAY);\nPriceLine.SetStyle (Curve.SHORT_DASH);\n\n# Pre market open code\n\ndef HidePMO = if GetAggregationPeriod() &lt;= AggregationPeriod.FIFTEEN_MIN then yes else no;\n\ndef day = GetDay();\n\ndef PMopenBar = day != day[1];\n\ndef PMOpen = if PMopenBar then open else PMOpen[1];\n\nplot PMO = if HidePMO and MktPlot and PMplots then PMOpen else Double.NaN;\n\nPMO.SetDefaultColor (CreateColor (234, 136, 255));\n\n# Pre market high code\n\ndef HidePMH = if GetAggregationPeriod() &lt;= AggregationPeriod.FIFTEEN_MIN then yes else no;\n\ndef PMHighBar = if bar == HighestAll(highBar) then PMHigh else PMHighBar[1];\n\nplot PMH = if HidePMH and PMplots and PMHighBar &gt; 0 then PMHighBar else Double.NaN;\n\nPMH.SetDefaultColor (CreateColor (116, 189, 232));\n\n# Pre market low code\n\ndef HidePML = if GetAggregationPeriod() &lt;= AggregationPeriod.FIFTEEN_MIN then yes else no;\n\ndef PMLowBar = if bar == HighestAll(lowBar) then PMLow else PMLowBar[1];\n\nplot PML = if HidePML and PMplots and PMLowBar &gt; 0 then PMLowBar else Double.NaN;\n\nPML.SetDefaultColor (CreateColor (116, 189, 232));\n\n# Current day open code\n\ndef HideCDO = if GetAggregationPeriod() &lt;= AggregationPeriod.FIFTEEN_MIN then yes else no;\n\ndef CDOpen = if !day then Double.NaN else open (period = \&quot;day\&quot;);\n\nplot CDO = if HideCDO and MktPlot and RMplots then CDOpen else Double.NaN;\n\nCDO.SetDefaultColor (Color.WHITE);\nCDO.SetStyle (Curve.SHORT_DASH);\n\n#Current day high code\n\ndef HideCDH = if GetAggregationPeriod() &lt;= AggregationPeriod.FIFTEEN_MIN then yes else no;\n\ndef CDHigh = if !day then Double.NaN else high (period = \&quot;day\&quot;);\n\nplot CDH = if HideCDH and MktPlot and RMplots then CDHigh else Double.NaN;\n\nCDH.SetDefaultColor (Color.GREEN);\nCDH.SetStyle (Curve.SHORT_DASH);\n\n#Current day low code\n\ndef HideCDL = if GetAggregationPeriod() &lt;= AggregationPeriod.FIFTEEN_MIN then yes else no;\n\ndef CDLow = if !day then Double.NaN else low (period = \&quot;day\&quot;);\n\nplot CDL = if HideCDL and MktPlot and RMplots then CDLow else Double.NaN;\n\nCDL.SetDefaultColor (Color.RED);\nCDL.SetStyle (Curve.SHORT_DASH);\n\n#Previous day high code\n\ndef HidePDH = if GetAggregationPeriod() &lt;= AggregationPeriod.FIFTEEN_MIN then yes else no;\n\ndef PDHigh = if !day then Double.NaN else high (period = \&quot;day\&quot;)[1];\n\nplot PDH = if HidePDH and MktPlot and YMplots then PDHigh else Double.NaN;\n\nPDH.SetDefaultColor (CreateColor (153, 255, 153));\nPDH.SetStyle (Curve.SHORT_DASH);\n\n#Previous day low code\n\ndef HidePDL = if GetAggregationPeriod() &lt;= AggregationPeriod.FIFTEEN_MIN then yes else no;\n\ndef PDLow = if !day then Double.NaN else low (period = \&quot;day\&quot;)[1];\n\nplot PDL = if HidePDL and MktPlot and YMplots then PDLow else Double.NaN;\n\nPDL.SetDefaultColor (CreateColor (255, 126, 156));\nPDL.SetStyle (Curve.SHORT_DASH);\n\n#Previous day close code\n\ndef HidePDC = if GetAggregationPeriod() &lt;= AggregationPeriod.FIFTEEN_MIN then yes else no;\n\ndef PDClose = if !day then Double.NaN else close (period = \&quot;day\&quot;)[1];\n\nplot PDC = if HidePDC and MktPlot and YMplots then PDClose else Double.NaN;\n\nPDC.SetDefaultColor (CreateColor (231, 190, 0));\nPDC.SetStyle (Curve.SHORT_DASH);\n\n#Pre market bubbles code\n\ndef PMBubbles = if GetAggregationPeriod() &lt;= AggregationPeriod.FIFTEEN_MIN then DisplayPreMarketPriceBubbles else no;\n\nAddChartBubble (PMopenBar and PMBubbles, PMO, (\&quot;PMO:\&quot;) + PMO,\nCreateColor (204, 204, 255));\n\nAddChartBubble (highBar and PMBubbles, PMH, (\&quot;PMH:\&quot;) + PMH, \nCreateColor (204, 204, 255));\n\nAddChartBubble (lowBar and PMBubbles, PML, (\&quot;PML:\&quot;) + PML, \nCreateColor (204, 204, 255), no);\n\n#Current day bubbles code\n\ndef CDBubbles = if GetAggregationPeriod() &lt;= AggregationPeriod.FIFTEEN_MIN then DisplayCurrentDayPriceBubbles else no;\n\ndef CDFirstBar = SecondsFromTime (0800) &gt;= 0 and SecondsFromTime (0800) &lt; 60;\n\nAddChartBubble (CDFirstBar and CDBubbles, CDO, (\&quot;CDO:\&quot;) + CDO, \nCreateColor (204, 204, 255));\n\nAddChartBubble (CDFirstBar and CDBubbles, CDH, (\&quot;CDH:\&quot;) + CDH, \nCreateColor (204, 204, 255));\n\nAddChartBubble (CDFirstBar and CDBubbles, CDL, (\&quot;CDL:\&quot;) + CDL, \nCreateColor (204, 204, 255), no);\n\n#Previous day bubbles code\n\ndef PDBubbles = if GetAggregationPeriod() &lt;= AggregationPeriod.FIFTEEN_MIN then DisplayPreviousDayPriceBubbles else no;\n\ndef PDFirstBar = SecondsFromTime (0700) &gt;= 0 and SecondsFromTime (0700) &lt; 60;\n\nAddChartBubble (PDFirstBar and PDBubbles, PDH, (\&quot;PDH:\&quot;) + PDH, \nCreateColor (204, 204, 255));\n\nAddChartBubble (PDFirstBar and PDBubbles, PDL, (\&quot;PDL:\&quot;) + PDL, \nCreateColor (204, 204, 255), no);\n\nAddChartBubble (PDFirstBar and PDBubbles, PDC, (\&quot;PDC:\&quot;) + PDC, \nCreateColor (204, 204, 255));\n\n\n&quot;,name=&quot;_df68278a_cb03_38d8_89d9_fa1dd6e19a1d&quot;}){inputsMap:TreeMap3{^(&quot;DisplayCurrentDayPriceBubbles&quot;,&lt;F),^(&quot;DisplayPreMarketPriceBubbles&quot;,&lt;F),^(&quot;DisplayPreviousDayPriceBubbles&quot;,&lt;F),^(&quot;PlotPreMktLinesHrsPastOpen&quot;,1)},inputsMap=@TreeMap3,plots{0:{color=#%1.CustomColor(#%2.Color(0,255,0,255))},1:{color=@CustomColor2,lineStyle=2},2:{color=#%1.CustomColor(#%2.Color(0,51,204,255)),lineWeight=2},3:{color=!%1.CustomColor.findByIndex(&quot;15&quot;),lineWeight=2},7:{lineStyle=2,lineWeight=3},8:{lineStyle=2,lineWeight=3},9:{color=#%1.CustomColor(#%2.Color(0,0,0,255)),lineStyle=2,lineWeight=3}}}),+(!%4.CompiledStudy.resolveStudy(#%5.ScriptEssence:ScriptEssence0{body=&quot;# blackFLAG FTS SwingArms\n# StudyName: blackFLAG_Futures_SwingArm_ATRTrail\n# My preferred setting is 28 / 5 FOR ALL TIMEFRAMES\n# Edited by: Jose Azcarate\n# blackFLAG Futures Trading - FOR EDUCATIONAL PURPOSES ONLY\n# TWITTER: @blackflagfuture\n\n# SwingArm Watchlist by [USER=278]@fishstick1229[/USER]\n# * Updated code below is to be used for custom watchlist column only **\n\n#Updated text display by [USER=4199]@Fishbed[/USER]\n\n# Combined Watchlist code to produce in chart label.\n\n# 6/25/20 Updated by Scott K @sirrous\n# Added overlapping swingarm timeframe notifications and alerts\n\n# Set the aggperiod to the timeframe you want the zone to monitor for an overlap.  When the defined aggperiod\'s swingarm overlaps with the chart and price moves into that then overlap you will be notified.\n# Labels only display for higher time periods (ie 15m aggperiod on a 10 min chart.\n# Add the study multiple times and set them to different aggperoids to montior multiple times.\n\n\ninput high_aggperiod = AggregationPeriod.MIN;\ninput Enable_Zone_Overlap_Notifications = no;\ninput current_period_trigger_zone = {default \&quot;Zone 4\&quot;, \&quot;Zone 3\&quot;, \&quot;Zone 2\&quot;};\ninput trailType = {default modified, unmodified};\ninput ATRPeriod = 28;\ninput ATRFactor = 5;\ninput firstTrade = {default long, short};\ninput averageType = AverageType.WILDERS;\n\ninput fib1Level = 61.8;\ninput fib2Level = 78.6;\ninput fib3Level = 88.6;\n\nAssert(ATRFactor &gt; 0, \&quot;\'atr factor\' must be positive: \&quot; + ATRFactor);\n\n## Current Chart Agg Period\n\ndef HiLo = Min(high - low, 1.5 * Average(high - low, ATRPeriod));\ndef HRef = if low &lt;= high[1]\n    then high - close[1]\n    else (high - close[1]) - 0.5 * (low - high[1]);\ndef LRef = if high &gt;= low[1]\n    then close[1] - low\n    else (close[1] - low) - 0.5 * (low[1] - high);\n\ndef trueRange;\nswitch (trailType) {\ncase modified:\n    trueRange = Max(HiLo, Max(HRef, LRef));\ncase unmodified:\n    trueRange = TrueRange(high, close, low);\n}\ndef loss = ATRFactor * MovingAverage(averageType, trueRange, ATRPeriod);\n\ndef state = {default init, long, short};\ndef trail;\nswitch (state[1]) {\ncase init:\n    if (!IsNaN(loss)) {\n        switch (firstTrade) {\n        case long:\n            state = state.long;\n            trail = close - loss;\n        case short:\n            state = state.short;\n            trail = close + loss;\n    }\n    } else {\n        state = state.init;\n        trail = Double.NaN;\n    }\ncase long:\n    if (close &gt; trail[1]) {\n        state = state.long;\n        trail = Max(trail[1], close - loss);\n    } else {\n        state = state.short;\n        trail = close + loss;\n    }\ncase short:\n    if (close &lt; trail[1]) {\n        state = state.short;\n        trail = Min(trail[1], close + loss);\n    } else {\n        state = state.long;\n        trail = close - loss;\n    }\n}\n\ndef BuySignal = Crosses(state == state.long, 0, CrossingDirection.ABOVE);\ndef SellSignal = Crosses(state == state.short, 0, CrossingDirection.ABOVE);\n\ndef ex = if BuySignal then high else if SellSignal then low else if state == state.long then Max(ex[1], high) else if state == state.short then Min(ex[1], low) else ex[1];\n\ndef TrailingStop = trail;\ndef f1 = ex + (trail - ex) * fib1Level / 100;\ndef f2 = ex + (trail - ex) * fib2Level / 100;\ndef f3 = ex + (trail - ex) * fib3Level / 100;\ndef l100 = trail + 0;\ndef Fib1 = f1;\ndef Fib2 = f2;\ndef Fib3 = f3;\n\ndef bullAboveZone = state == state.long and close &gt; Fib1;\ndef bullZone2 = state == state.long and close &lt;= Fib1 and close &gt; Fib2;\ndef bullZone3 = state == state.long and close &lt;= Fib2 and close &gt; Fib3;\ndef bullZone4 = state == state.long and close &lt;= Fib3 and close &gt; TrailingStop;\n\ndef bearZone2 = state == state.short and close &gt;= Fib1 and close &lt; Fib2;\ndef bearZone3 = state == state.short and close &gt;= Fib2 and close &lt; Fib3;\ndef bearZone4 = state == state.short and close &gt;= Fib3 and close &lt; TrailingStop;\n\n## High Agg Period\n\ndef highagg_high = high(period = high_aggperiod);\ndef highagg_low = low(period = high_aggperiod);\ndef highagg_close = close(period = high_aggperiod);\n\ndef highagg_HiLo = Min(highagg_high - highagg_low, 1.5 * Average(highagg_high - highagg_low, ATRPeriod));\ndef highagg_HRef = if highagg_low &lt;= highagg_high[1]\n    then highagg_high - highagg_close[1]\n    else (highagg_high - highagg_close[1]) - 0.5 * (highagg_low - highagg_high[1]);\ndef highagg_LRef = if highagg_high &gt;= highagg_low[1]\n    then highagg_close[1] - highagg_low\n    else (highagg_close[1] - highagg_low) - 0.5 * (highagg_low[1] - highagg_high);\n\ndef highagg_trueRange;\nswitch (trailType) {\ncase modified:\n    highagg_trueRange = Max(highagg_HiLo, Max(highagg_HRef, highagg_LRef));\ncase unmodified:\n    highagg_trueRange = TrueRange(highagg_high, highagg_close, highagg_low);\n}\ndef highagg_loss = ATRFactor * MovingAverage(averageType, highagg_trueRange, ATRPeriod);\n\ndef highagg_state = {default init, long, short};\ndef highagg_trail;\nswitch (highagg_state[1]) {\ncase init:\n    if (!IsNaN(highagg_loss)) {\n        switch (firstTrade) {\n        case long:\n            highagg_state = highagg_state.long;\n            highagg_trail = highagg_close - highagg_loss;\n        case short:\n            highagg_state = highagg_state.short;\n            highagg_trail = highagg_close + highagg_loss;\n    }\n    } else {\n        highagg_state = highagg_state.init;\n        highagg_trail = Double.NaN;\n    }\ncase long:\n    if (highagg_close &gt; highagg_trail[1]) {\n        highagg_state = highagg_state.long;\n        highagg_trail = Max(highagg_trail[1], highagg_close - highagg_loss);\n    } else {\n        highagg_state = highagg_state.short;\n        highagg_trail = highagg_close + highagg_loss;\n    }\ncase short:\n    if (highagg_close &lt; highagg_trail[1]) {\n        highagg_state = highagg_state.short;\n        highagg_trail = Min(highagg_trail[1], highagg_close + highagg_loss);\n    } else {\n        highagg_state = highagg_state.long;\n        highagg_trail = highagg_close - highagg_loss;\n    }\n}\n\ndef highagg_BuySignal = Crosses(highagg_state == highagg_state.long, 0, CrossingDirection.ABOVE);\ndef highagg_SellSignal = Crosses(highagg_state == highagg_state.short, 0, CrossingDirection.ABOVE);\n\ndef highagg_ex = if highagg_BuySignal then highagg_high else if highagg_SellSignal then highagg_low else if highagg_state == highagg_state.long then Max(highagg_ex[1], highagg_high) else if highagg_state == highagg_state.short then Min(highagg_ex[1], highagg_low) else highagg_ex[1];\n\ndef highagg_TrailingStop = highagg_trail;\ndef highagg_f1 = highagg_ex + (highagg_trail - highagg_ex) * fib1Level / 100;\ndef highagg_f2 = highagg_ex + (highagg_trail - highagg_ex) * fib2Level / 100;\ndef highagg_f3 = highagg_ex + (highagg_trail - highagg_ex) * fib3Level / 100;\ndef highagg_l100 = highagg_trail + 0;\ndef highagg_Fib1 = highagg_f1;\ndef highagg_Fib2 = highagg_f2;\ndef highagg_Fib3 = highagg_f3;\n\ndef highagg_bullAboveZone = highagg_state == highagg_state.long and highagg_close &gt; highagg_Fib1;\ndef highagg_bullZone2 = highagg_state == highagg_state.long and highagg_close &lt;= highagg_Fib1 and highagg_close &gt; highagg_Fib2;\ndef highagg_bullZone3 = highagg_state == highagg_state.long and highagg_close &lt;= highagg_Fib2 and highagg_close &gt; highagg_Fib3;\ndef highagg_bullZone4 = highagg_state == highagg_state.long and highagg_close &lt;= highagg_Fib3 and highagg_close &gt; highagg_TrailingStop;\n\ndef highagg_bearZone2 = highagg_state == highagg_state.short and highagg_close &gt;= highagg_Fib1 and highagg_close &lt; highagg_Fib2;\ndef highagg_bearZone3 = highagg_state == highagg_state.short and highagg_close &gt;= highagg_Fib2 and highagg_close &lt; highagg_Fib3;\ndef highagg_bearZone4 = highagg_state == highagg_state.short and highagg_close &gt;= highagg_Fib3 and highagg_close &lt; highagg_TrailingStop;\n\nAddLabel(yes, Concat(if high_aggperiod &lt; 3600000 then high_aggperiod / 60000 + \&quot;m\&quot; else if high_aggperiod &lt; 86400000 then high_aggperiod / 3600000 + \&quot;h\&quot; else if high_aggperiod &lt; 604800000 then high_aggperiod / 86400000 + \&quot;D\&quot; else if high_aggperiod &lt; 2592000000 then high_aggperiod / 604800000 + \&quot;Wk\&quot; else if high_aggperiod &lt; 31536000000 then high_aggperiod / 2592000000 + \&quot;Mo\&quot; else high_aggperiod / 31536000000 + \&quot;Yr\&quot;, if highagg_bullZone2 then \&quot;: ZONE 2\&quot;  else if highagg_bullZone3 then \&quot;: ZONE 3\&quot;  else if highagg_bullZone4 then \&quot;: ZONE 4\&quot; else if highagg_bearZone2 then \&quot;: ZONE 2\&quot;  else if highagg_bearZone3 then \&quot;: ZONE 3\&quot;  else if highagg_bearZone4 then \&quot;: ZONE 4\&quot; else \&quot;\&quot;), if highagg_state == highagg_state.long then Color.GREEN else Color.RED);\n\ndef action_confirmed;\n\nswitch (current_period_trigger_zone) {\ncase \&quot;Zone 4\&quot;:\n    if (state == state.long and highagg_state == highagg_state.long) {\n        if (bullZone4 and (highagg_bullZone2 or highagg_bullZone3 or highagg_bullZone4)) {\n            action_confirmed = 4;\n        } else {\n            action_confirmed = 0;\n        }\n    } else if (state == state.short and highagg_state == highagg_state.short) {\n        if (bearZone4 and (highagg_bearZone2 or highagg_bearZone3 or highagg_bearZone4)) {\n            action_confirmed = -4;\n        } else {\n            action_confirmed = 0;\n        }\n\n    } else {\n        action_confirmed = 0;\n    }\ncase \&quot;Zone 3\&quot;:\n    if (state == state.long and highagg_state == highagg_state.long) {\n        if ((bullZone3 or bullZone4) and (highagg_bullZone2 or highagg_bullZone3 or highagg_bullZone4)) {\n            action_confirmed = 3;\n        } else {\n            action_confirmed = 0;\n        }\n    } else if (state == state.short and highagg_state == highagg_state.short) {\n        if ((bearZone3 or bearZone4) and (highagg_bearZone2 or highagg_bearZone3 or highagg_bearZone4)) {\n            action_confirmed = -3;\n        } else {\n            action_confirmed = 0;\n        }\n\n    } else {\n        action_confirmed = 0;\n    }\ncase \&quot;Zone 2\&quot;:\n    if (state == state.long and highagg_state == highagg_state.long) {\n        if ((bullZone2 or (bullZone3 or bullZone4)) and (highagg_bullZone2 or highagg_bullZone3 or highagg_bullZone4)) {\n            action_confirmed = 2;\n        } else {\n            action_confirmed = 0;\n        }\n    } else if (state == state.short and highagg_state == highagg_state.short) {\n        if ((bearZone2 or (bearZone3 or bearZone4)) and (highagg_bearZone2 or highagg_bearZone3 or highagg_bearZone4)) {\n            action_confirmed = -2;\n        } else {\n            action_confirmed = 0;\n        }\n\n    } else {\n        action_confirmed = 0;\n    }\n}\n\nAddLabel((action_confirmed and Enable_Zone_Overlap_Notifications), if action_confirmed &lt; -1 then \&quot;SELL CONDITION CONFIRMED - Price entered overlapping zones!\&quot; else if action_confirmed &gt; 1 then \&quot;BUY CONDITION CONFIRMED - Price entered overlapping zones!\&quot; else \&quot;Waiting\&quot;, if action_confirmed &gt; 1 then Color.GREEN else if action_confirmed &lt; -1 then Color.RED else Color.WHITE);\n#Debug Label\n#AddLabel((action_confirmed or always_show_label), action_confirmed, Color.White);\n\n#add plot for scanner\nplot sell_confirm = if (action_confirmed &lt; -1) then high else Double.NaN;\nsell_confirm.SetDefaultColor(Color.WHITE);\nsell_confirm.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);\nsell_confirm.SetLineWeight(1);\nsell_confirm.Hide();\n\nplot buy_confirm = if (action_confirmed &gt; 1) then low else Double.NaN;\nbuy_confirm.SetDefaultColor(Color.WHITE);\nbuy_confirm.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nbuy_confirm.SetLineWeight(1);\nbuy_confirm.Hide();\n\n#add alert\nAlert(sell_confirm and Enable_Zone_Overlap_Notifications, \&quot;SELL CONDITION CONFIRMED - Price entered overlapping zones!\&quot;, Alert.Once, Sound.Ring);\nAlert(buy_confirm and Enable_Zone_Overlap_Notifications, \&quot;BUY CONDITION CONFIRMED - Price entered overlapping zones!\&quot;, Alert.Once, Sound.Ring);&quot;,name=&quot;_0d9d3fe3_219f_35fe_9e38_3ef74c9aaec4&quot;}){alerts:LocalAlertArray1,alerts=@LocalAlertArray1,inputsMap:TreeMap4{^(&quot;high_aggperiod&quot;,&quot;FIVE_MIN&quot;)},inputsMap=@TreeMap4}),+(!%4.CompiledStudy.resolveStudy(@ScriptEssence0){alerts:LocalAlertArray2,alerts=@LocalAlertArray2,inputsMap:TreeMap5{^(&quot;high_aggperiod&quot;,&quot;TEN_MIN&quot;)},inputsMap=@TreeMap5}),+(!%4.CompiledStudy.resolveStudy(@ScriptEssence0){alerts:LocalAlertArray3,alerts=@LocalAlertArray3,inputsMap:TreeMap6{^(&quot;high_aggperiod&quot;,&quot;THIRTY_MIN&quot;)},inputsMap=@TreeMap6})}},^(#%3.SubgraphId(&quot;Subgraph4&quot;),#%3.SubgraphStorableModel{height=124,storableIndicators{+(!%4.CompiledStudy.resolveStudy(#%5.ScriptEssence{body=&quot;# Standard version of Buy the Dip indicator\n# Assembled by BenTen at UseThinkScript.com\n# Version 1.1\n# &lt;INSTRUCTION&gt;\n# Get support at: https://usethinkscript.com/forums/buy-the-dip.32/\n# &lt;NOTES&gt;\n# Based on the concept of \&quot;Synethetic VIX\&quot; by Larry Williams\n# This software is licensed for individual use only.\n# NOT FOR REDISTRIBUTION PRIVATE/CONFIDENTIAL\n# Copyright (c) 2020 useThinkScript LLC\n\ndeclare lower;\n\ninput length = 22;\ninput meter = yes;\ninput arrows = yes;\ninput color_change = yes;\n\n# Plot indicator\ndef value = ((high - Lowest(close[1], length)) / Lowest(close[1], length)) * 100;\nplot buythedip = value;\nplot Zeroline = 0;\ndef condition = buythedip crosses below Zeroline;\n\nbuythedip.AssignValueColor(if color_change and buythedip &lt; Zeroline then color.red else color.green);\nZeroline.AssignValueColor(color.white);\n\nAddLabel(meter and yes, Concat(\&quot;Meter = \&quot;, buythedip), color.orange);\n\n# Plot arrows\nplot UpSignal = if arrows and condition then 0 else Double.NaN;\nUpSignal.SetDefaultColor(Color.Orange);\nUpSignal.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\n\n# Alert\nAlert(condition, \&quot;Buy the Dip\&quot;, Alert.Bar, Sound.Chimes);&quot;,name=&quot;_3e423716_4d5b_3558_bbaf_5d1ed4be8b12&quot;}){alerts:LocalAlertArray4,alerts=@LocalAlertArray4,plots{2:{lineWeight=2}}}),+(!%4.CompiledStudy.resolveStudy(#%5.ScriptEssence{body=&quot;# TMO ((T)rue (M)omentum (O)scilator)\n# Mobius\n# V01.05.2018\n# hint: TMO calculates momentum using the delta of price. Giving a much better picture of trend, tend reversals and divergence than momentum oscillators using price.\n\ndeclare Lower;\n\ninput length = 14;\ninput calcLength = 5;\ninput smoothLength = 3;\n\ndef o = open;\ndef c = close;\ndef data = fold i = 0 to length\n           with s\n           do s + (if c &gt; getValue(o, i)\n                   then 1\n                   else if c &lt; getValue(o, i)\n                        then - 1\n                        else 0);\ndef EMA5 = ExpAverage(data, calcLength);\nplot Main = ExpAverage(EMA5, smoothLength);\nplot Signal = ExpAverage(Main, smoothLength);\n     Main.AssignValueColor(if Main &gt; Signal\n                           then color.green\n                           else color.red);\n     Signal.AssignValueColor(if Main &gt; Signal\n                             then color.green\n                             else color.red);\n     Signal.HideBubble();\n     Signal.HideTitle();\naddCloud(Main, Signal, color.green, color.red);\nplot zero = if isNaN(c) then double.nan else 0;\n     zero.SetDefaultColor(Color.gray);\n     zero.hideBubble();\n     zero.hideTitle();\nplot ob = if isNaN(c) then double.nan else round(length * .7);\n     ob.SetDefaultColor(Color.gray);\n     ob.HideBubble();\n     ob.HideTitle();\nplot os = if isNaN(c) then double.nan else -round(length * .7);\n     os.SetDefaultColor(Color.gray);\n     os.HideBubble();\n     os.HideTitle();\naddCloud(ob, length, color.light_red, color.light_red, no);\naddCloud(-length, os, color.light_green, color.light_green);\n# End Code TMO&quot;,name=&quot;_e764f5bb_0b2a_3136_ab0c_1a950d75f144&quot;}){inputsMap:TreeMap7{^(&quot;length&quot;,25)},inputsMap=@TreeMap7})}})}}" SHARED_USER_SCRIPTS="@v8@owner{chartAggregationPeriods:ChartAggregationPeriodArray0,chartAggregationPeriods=@ChartAggregationPeriodArray0}#java.util.HashMap{^(&quot;_e6b646b1_181e_401f_8ad2_352a88081c5e&quot;,&quot;CT_Trend_Pivots_w_HH_LL_by_Mobius&quot;),^(&quot;_bbcf85dd_b360_4d9a_9f99_ebb62234c98b&quot;,&quot;CT_BTD_v1_Lower_by_BT&quot;),^(&quot;_06c891ec_d069_40f3_9b66_d05649d4a1f7&quot;,&quot;CT_TMO_Lower&quot;),^(&quot;_8073e821_ac50_4d0f_b860_40679520bdf5&quot;,&quot;CT_BTD_STR_Upper_by_UTS&quot;),^(&quot;_0363eeee_7d8b_3a12_a9f1_f2006497c7d2&quot;,&quot;CT_BFLG_SA_Zone_Monitor_Label_w_Alerts_062520&quot;),^(&quot;_0877d845_51da_46c6_a700_5326ac641083&quot;,&quot;CT_PreMarketLevels&quot;)}" SYMBOL="FEDU" SYMBOL_GROUP="8" VERTICAL="false" VISIBLE="true" WEIGHT="3.0"/>
                  <DASHBOARD VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
                  <LEVEL_II VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
                  <LIVE_NEWS VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
                  <PHASE_SCORES VERTICAL="false" VISIBLE="false" WEIGHT="2.0"/>
                  <TIME_SALES VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
                  <TRADE CONFIGURATION_NAME="SINGLE" ORDER_RULES_SET="STOCK" ORDER_TYPE="LIMIT" OS_AUTO="false" OS_EXPANDED="false" OS_TIF="DAY" QTY="10.0" QTY_STEP="1.0" TEMPLATE="SINGLE" TRADE_BUTTONS="BUY_MKT;SELL_MKT;MULTI_CANCEL;REVERSE;FLAT;SECOND_LINE;QUANTITY;AUTO_SEND;ORDER_SETUP" VISIBLE="false">
                    <OCO_STOP>
                      <TRG_0 TRG_ENBL="true" TRG_LINK="ASK_BID" TRG_OFFSET_MODE="TICK" TRG_OT="STOP" TRG_SETUP="10.0" TRG_TIF="DAY">
                        <OFFSET_PER_SYMBOL AAL="10.0" AAN="10.0" AAPL="10.0" ACN="10.0" ADSK="10.0" AIG="10.0" AL="10.0" ALL="10.0" AMD="10.0" AMGN="10.0" ANET="10.0" ATH="10.0" AZN="10.0" B="10.0" BA="10.0" BABA="10.0" BAC="10.0" BBBY="10.0" BBY="10.0" BMA="10.0" BMY="10.0" BUD="10.0" BURL="10.0" C="10.0" CAR="10.0" CCL="10.0" CGC="10.0" CHGG="10.0" CHWY="10.0" CLEU="10.0" CNQ="10.0" COMP="10.0" COUP="10.0" CRM="10.0" CRSP="10.0" CRWD="10.0" CSCO="10.0" CWT="10.0" CXO="10.0" DBX="10.0" DGX="10.0" DOCU="10.0" EBAY="10.0" EDTK="10.0" EIDX="10.0" EOG="10.0" ESS="10.0" ETFC="10.0" ETSY="10.0" FARO="10.0" FEDU="10.0" FIVN="10.0" G="10.0" GKOS="10.0" GLPG="10.0" GS="10.0" ICPT="10.0" INTC="10.0" JBLU="10.0" JCI="10.0" JNUG="10.0" JWN="10.0" KL="10.0" KO="10.0" KOD="10.0" KWEB="10.0" LHX="10.0" LITE="10.0" LYFT="10.0" MCD="10.0" MEDP="10.0" MHK="10.0" MRNA="10.0" MRTN="10.0" MTN="10.0" MU="10.0" NCLH="10.0" NKLA="10.0" NTNX="10.0" NTRS="10.0" NVAX="10.0" NVDA="10.0" OSTK="10.0" OTTR="10.0" PANW="10.0" PDD="10.0" PENN="10.0" PFE="10.0" PHI="10.0" PLNT="10.0" PTON="10.0" QCOM="10.0" RCL="10.0" ROKU="10.0" SHAK="10.0" SNAP="10.0" SPXL="10.0" SQ="10.0" STZ="10.0" SYK="10.0" TLRY="10.0" TNDM="10.0" TRGP="10.0" TSLA="10.0" TWTR="10.0" UAL="10.0" ULTA="10.0" V="10.0" VEC="10.0" VEEV="10.0" VIX="10.0" VRSN="10.0" VZ="10.0" W="10.0" WAFU="10.0" WFC="10.0" WYNN="10.0" YETI="10.0" Z="10.0" ZBRA="10.0" ZM="10.0"/>
                      </TRG_0>
                    </OCO_STOP>
                    <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="1.0" TRG_TIF="DAY">
                      <OFFSET_PER_SYMBOL AAL="1.0" AAN="1.0" AAPL="1.0" ACN="1.0" ADSK="1.0" AIG="1.0" AL="1.0" ALL="1.0" AMD="1.0" AMGN="1.0" ANET="1.0" ATH="1.0" AZN="1.0" B="1.0" BA="1.0" BABA="1.0" BAC="1.0" BBBY="1.0" BBY="1.0" BMA="1.0" BMY="1.0" BUD="1.0" BURL="1.0" C="1.0" CAR="1.0" CCL="1.0" CGC="1.0" CHGG="1.0" CHWY="1.0" CLEU="1.0" CNQ="1.0" COMP="1.0" COUP="1.0" CRM="1.0" CRSP="1.0" CRWD="1.0" CSCO="1.0" CWT="1.0" CXO="1.0" DBX="1.0" DGX="1.0" DOCU="1.0" EBAY="1.0" EDTK="1.0" EIDX="1.0" EOG="1.0" ESS="1.0" ETFC="1.0" ETSY="1.0" FARO="1.0" FEDU="1.0" FIVN="1.0" G="1.0" GKOS="1.0" GLPG="1.0" GS="1.0" ICPT="1.0" INTC="1.0" JBLU="1.0" JCI="1.0" JNUG="1.0" JWN="1.0" KL="1.0" KO="1.0" KOD="1.0" KWEB="1.0" LHX="1.0" LITE="1.0" LYFT="1.0" MCD="1.0" MEDP="1.0" MHK="1.0" MRNA="1.0" MRTN="1.0" MTN="1.0" MU="1.0" NCLH="1.0" NKLA="1.0" NTNX="1.0" NTRS="1.0" NVAX="1.0" NVDA="1.0" OSTK="1.0" OTTR="1.0" PANW="1.0" PDD="1.0" PENN="1.0" PFE="1.0" PHI="1.0" PLNT="1.0" PTON="1.0" QCOM="1.0" RCL="1.0" ROKU="1.0" SHAK="1.0" SNAP="1.0" SPXL="1.0" SQ="1.0" STZ="1.0" SYK="1.0" TLRY="1.0" TNDM="1.0" TRGP="1.0" TSLA="1.0" TWTR="1.0" UAL="1.0" ULTA="1.0" V="1.0" VEC="1.0" VEEV="1.0" VIX="1.0" VRSN="1.0" VZ="1.0" W="1.0" WAFU="1.0" WFC="1.0" WYNN="1.0" YETI="1.0" Z="1.0" ZBRA="1.0" ZM="1.0"/>
                    </TRG_0>
                    <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-1.0" TRG_TIF="DAY">
                      <OFFSET_PER_SYMBOL AAL="-1.0" AAN="-1.0" AAPL="-1.0" ACN="-1.0" ADSK="-1.0" AIG="-1.0" AL="-1.0" ALL="-1.0" AMD="-1.0" AMGN="-1.0" ANET="-1.0" ATH="-1.0" AZN="-1.0" B="-1.0" BA="-1.0" BABA="-1.0" BAC="-1.0" BBBY="-1.0" BBY="-1.0" BMA="-1.0" BMY="-1.0" BUD="-1.0" BURL="-1.0" C="-1.0" CAR="-1.0" CCL="-1.0" CGC="-1.0" CHGG="-1.0" CHWY="-1.0" CLEU="-1.0" CNQ="-1.0" COMP="-1.0" COUP="-1.0" CRM="-1.0" CRSP="-1.0" CRWD="-1.0" CSCO="-1.0" CWT="-1.0" CXO="-1.0" DBX="-1.0" DGX="-1.0" DOCU="-1.0" EBAY="-1.0" EDTK="-1.0" EIDX="-1.0" EOG="-1.0" ESS="-1.0" ETFC="-1.0" ETSY="-1.0" FARO="-1.0" FEDU="-1.0" FIVN="-1.0" G="-1.0" GKOS="-1.0" GLPG="-1.0" GS="-1.0" ICPT="-1.0" INTC="-1.0" JBLU="-1.0" JCI="-1.0" JNUG="-1.0" JWN="-1.0" KL="-1.0" KO="-1.0" KOD="-1.0" KWEB="-1.0" LHX="-1.0" LITE="-1.0" LYFT="-1.0" MCD="-1.0" MEDP="-1.0" MHK="-1.0" MRNA="-1.0" MRTN="-1.0" MTN="-1.0" MU="-1.0" NCLH="-1.0" NKLA="-1.0" NTNX="-1.0" NTRS="-1.0" NVAX="-1.0" NVDA="-1.0" OSTK="-1.0" OTTR="-1.0" PANW="-1.0" PDD="-1.0" PENN="-1.0" PFE="-1.0" PHI="-1.0" PLNT="-1.0" PTON="-1.0" QCOM="-1.0" RCL="-1.0" ROKU="-1.0" SHAK="-1.0" SNAP="-1.0" SPXL="-1.0" SQ="-1.0" STZ="-1.0" SYK="-1.0" TLRY="-1.0" TNDM="-1.0" TRGP="-1.0" TSLA="-1.0" TWTR="-1.0" UAL="-1.0" ULTA="-1.0" V="-1.0" VEC="-1.0" VEEV="-1.0" VIX="-1.0" VRSN="-1.0" VZ="-1.0" W="-1.0" WAFU="-1.0" WFC="-1.0" WYNN="-1.0" YETI="-1.0" Z="-1.0" ZBRA="-1.0" ZM="-1.0"/>
                    </TRG_1>
                    <_2>
                      <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="2.0" TRG_TIF="DAY">
                        <OFFSET_PER_SYMBOL AAL="2.0" AAN="2.0" AAPL="2.0" ACN="2.0" ADSK="2.0" AIG="2.0" AL="2.0" ALL="2.0" AMD="2.0" AMGN="2.0" ANET="2.0" ATH="2.0" AZN="2.0" B="2.0" BA="2.0" BABA="2.0" BAC="2.0" BBBY="2.0" BBY="2.0" BMA="2.0" BMY="2.0" BUD="2.0" BURL="2.0" C="2.0" CAR="2.0" CCL="2.0" CGC="2.0" CHGG="2.0" CHWY="2.0" CLEU="2.0" CNQ="2.0" COMP="2.0" COUP="2.0" CRM="2.0" CRSP="2.0" CRWD="2.0" CSCO="2.0" CWT="2.0" CXO="2.0" DBX="2.0" DGX="2.0" DOCU="2.0" EBAY="2.0" EDTK="2.0" EIDX="2.0" EOG="2.0" ESS="2.0" ETFC="2.0" ETSY="2.0" FARO="2.0" FEDU="2.0" FIVN="2.0" G="2.0" GKOS="2.0" GLPG="2.0" GS="2.0" ICPT="2.0" INTC="2.0" JBLU="2.0" JCI="2.0" JNUG="2.0" JWN="2.0" KL="2.0" KO="2.0" KOD="2.0" KWEB="2.0" LHX="2.0" LITE="2.0" LYFT="2.0" MCD="2.0" MEDP="2.0" MHK="2.0" MRNA="2.0" MRTN="2.0" MTN="2.0" MU="2.0" NCLH="2.0" NKLA="2.0" NTNX="2.0" NTRS="2.0" NVAX="2.0" NVDA="2.0" OSTK="2.0" OTTR="2.0" PANW="2.0" PDD="2.0" PENN="2.0" PFE="2.0" PHI="2.0" PLNT="2.0" PTON="2.0" QCOM="2.0" RCL="2.0" ROKU="2.0" SHAK="2.0" SNAP="2.0" SPXL="2.0" SQ="2.0" STZ="2.0" SYK="2.0" TLRY="2.0" TNDM="2.0" TRGP="2.0" TSLA="2.0" TWTR="2.0" UAL="2.0" ULTA="2.0" V="2.0" VEC="2.0" VEEV="2.0" VIX="2.0" VRSN="2.0" VZ="2.0" W="2.0" WAFU="2.0" WFC="2.0" WYNN="2.0" YETI="2.0" Z="2.0" ZBRA="2.0" ZM="2.0"/>
                      </TRG_0>
                      <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-2.0" TRG_TIF="DAY">
                        <OFFSET_PER_SYMBOL AAL="-2.0" AAN="-2.0" AAPL="-2.0" ACN="-2.0" ADSK="-2.0" AIG="-2.0" AL="-2.0" ALL="-2.0" AMD="-2.0" AMGN="-2.0" ANET="-2.0" ATH="-2.0" AZN="-2.0" B="-2.0" BA="-2.0" BABA="-2.0" BAC="-2.0" BBBY="-2.0" BBY="-2.0" BMA="-2.0" BMY="-2.0" BUD="-2.0" BURL="-2.0" C="-2.0" CAR="-2.0" CCL="-2.0" CGC="-2.0" CHGG="-2.0" CHWY="-2.0" CLEU="-2.0" CNQ="-2.0" COMP="-2.0" COUP="-2.0" CRM="-2.0" CRSP="-2.0" CRWD="-2.0" CSCO="-2.0" CWT="-2.0" CXO="-2.0" DBX="-2.0" DGX="-2.0" DOCU="-2.0" EBAY="-2.0" EDTK="-2.0" EIDX="-2.0" EOG="-2.0" ESS="-2.0" ETFC="-2.0" ETSY="-2.0" FARO="-2.0" FEDU="-2.0" FIVN="-2.0" G="-2.0" GKOS="-2.0" GLPG="-2.0" GS="-2.0" ICPT="-2.0" INTC="-2.0" JBLU="-2.0" JCI="-2.0" JNUG="-2.0" JWN="-2.0" KL="-2.0" KO="-2.0" KOD="-2.0" KWEB="-2.0" LHX="-2.0" LITE="-2.0" LYFT="-2.0" MCD="-2.0" MEDP="-2.0" MHK="-2.0" MRNA="-2.0" MRTN="-2.0" MTN="-2.0" MU="-2.0" NCLH="-2.0" NKLA="-2.0" NTNX="-2.0" NTRS="-2.0" NVAX="-2.0" NVDA="-2.0" OSTK="-2.0" OTTR="-2.0" PANW="-2.0" PDD="-2.0" PENN="-2.0" PFE="-2.0" PHI="-2.0" PLNT="-2.0" PTON="-2.0" QCOM="-2.0" RCL="-2.0" ROKU="-2.0" SHAK="-2.0" SNAP="-2.0" SPXL="-2.0" SQ="-2.0" STZ="-2.0" SYK="-2.0" TLRY="-2.0" TNDM="-2.0" TRGP="-2.0" TSLA="-2.0" TWTR="-2.0" UAL="-2.0" ULTA="-2.0" V="-2.0" VEC="-2.0" VEEV="-2.0" VIX="-2.0" VRSN="-2.0" VZ="-2.0" W="-2.0" WAFU="-2.0" WFC="-2.0" WYNN="-2.0" YETI="-2.0" Z="-2.0" ZBRA="-2.0" ZM="-2.0"/>
                      </TRG_1>
                    </_2>
                    <_3>
                      <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="3.0" TRG_TIF="DAY">
                        <OFFSET_PER_SYMBOL AAL="3.0" AAN="3.0" AAPL="3.0" ACN="3.0" ADSK="3.0" AIG="3.0" AL="3.0" ALL="3.0" AMD="3.0" AMGN="3.0" ANET="3.0" ATH="3.0" AZN="3.0" B="3.0" BA="3.0" BABA="3.0" BAC="3.0" BBBY="3.0" BBY="3.0" BMA="3.0" BMY="3.0" BUD="3.0" BURL="3.0" C="3.0" CAR="3.0" CCL="3.0" CGC="3.0" CHGG="3.0" CHWY="3.0" CLEU="3.0" CNQ="3.0" COMP="3.0" COUP="3.0" CRM="3.0" CRSP="3.0" CRWD="3.0" CSCO="3.0" CWT="3.0" CXO="3.0" DBX="3.0" DGX="3.0" DOCU="3.0" EBAY="3.0" EDTK="3.0" EIDX="3.0" EOG="3.0" ESS="3.0" ETFC="3.0" ETSY="3.0" FARO="3.0" FEDU="3.0" FIVN="3.0" G="3.0" GKOS="3.0" GLPG="3.0" GS="3.0" ICPT="3.0" INTC="3.0" JBLU="3.0" JCI="3.0" JNUG="3.0" JWN="3.0" KL="3.0" KO="3.0" KOD="3.0" KWEB="3.0" LHX="3.0" LITE="3.0" LYFT="3.0" MCD="3.0" MEDP="3.0" MHK="3.0" MRNA="3.0" MRTN="3.0" MTN="3.0" MU="3.0" NCLH="3.0" NKLA="3.0" NTNX="3.0" NTRS="3.0" NVAX="3.0" NVDA="3.0" OSTK="3.0" OTTR="3.0" PANW="3.0" PDD="3.0" PENN="3.0" PFE="3.0" PHI="3.0" PLNT="3.0" PTON="3.0" QCOM="3.0" RCL="3.0" ROKU="3.0" SHAK="3.0" SNAP="3.0" SPXL="3.0" SQ="3.0" STZ="3.0" SYK="3.0" TLRY="3.0" TNDM="3.0" TRGP="3.0" TSLA="3.0" TWTR="3.0" UAL="3.0" ULTA="3.0" V="3.0" VEC="3.0" VEEV="3.0" VIX="3.0" VRSN="3.0" VZ="3.0" W="3.0" WAFU="3.0" WFC="3.0" WYNN="3.0" YETI="3.0" Z="3.0" ZBRA="3.0" ZM="3.0"/>
                      </TRG_0>
                      <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-3.0" TRG_TIF="DAY">
                        <OFFSET_PER_SYMBOL AAL="-3.0" AAN="-3.0" AAPL="-3.0" ACN="-3.0" ADSK="-3.0" AIG="-3.0" AL="-3.0" ALL="-3.0" AMD="-3.0" AMGN="-3.0" ANET="-3.0" ATH="-3.0" AZN="-3.0" B="-3.0" BA="-3.0" BABA="-3.0" BAC="-3.0" BBBY="-3.0" BBY="-3.0" BMA="-3.0" BMY="-3.0" BUD="-3.0" BURL="-3.0" C="-3.0" CAR="-3.0" CCL="-3.0" CGC="-3.0" CHGG="-3.0" CHWY="-3.0" CLEU="-3.0" CNQ="-3.0" COMP="-3.0" COUP="-3.0" CRM="-3.0" CRSP="-3.0" CRWD="-3.0" CSCO="-3.0" CWT="-3.0" CXO="-3.0" DBX="-3.0" DGX="-3.0" DOCU="-3.0" EBAY="-3.0" EDTK="-3.0" EIDX="-3.0" EOG="-3.0" ESS="-3.0" ETFC="-3.0" ETSY="-3.0" FARO="-3.0" FEDU="-3.0" FIVN="-3.0" G="-3.0" GKOS="-3.0" GLPG="-3.0" GS="-3.0" ICPT="-3.0" INTC="-3.0" JBLU="-3.0" JCI="-3.0" JNUG="-3.0" JWN="-3.0" KL="-3.0" KO="-3.0" KOD="-3.0" KWEB="-3.0" LHX="-3.0" LITE="-3.0" LYFT="-3.0" MCD="-3.0" MEDP="-3.0" MHK="-3.0" MRNA="-3.0" MRTN="-3.0" MTN="-3.0" MU="-3.0" NCLH="-3.0" NKLA="-3.0" NTNX="-3.0" NTRS="-3.0" NVAX="-3.0" NVDA="-3.0" OSTK="-3.0" OTTR="-3.0" PANW="-3.0" PDD="-3.0" PENN="-3.0" PFE="-3.0" PHI="-3.0" PLNT="-3.0" PTON="-3.0" QCOM="-3.0" RCL="-3.0" ROKU="-3.0" SHAK="-3.0" SNAP="-3.0" SPXL="-3.0" SQ="-3.0" STZ="-3.0" SYK="-3.0" TLRY="-3.0" TNDM="-3.0" TRGP="-3.0" TSLA="-3.0" TWTR="-3.0" UAL="-3.0" ULTA="-3.0" V="-3.0" VEC="-3.0" VEEV="-3.0" VIX="-3.0" VRSN="-3.0" VZ="-3.0" W="-3.0" WAFU="-3.0" WFC="-3.0" WYNN="-3.0" YETI="-3.0" Z="-3.0" ZBRA="-3.0" ZM="-3.0"/>
                      </TRG_1>
                    </_3>
                  </TRADE>
                </GADGET>
              </MODELNODE1>
            </MODELNODE0>
            <MODELNODE1 COUNT="3" ROWLAYOUT="true" TYPE="SPLIT" WEIGHT="0.49795501022494887">
              <MODELNODE0 COMPOSITENAME="COMPOSITE_1559449022344" NAME="1559449022218" TYPE="LEAF" WEIGHT="0.33486028401282636">
                <GADGET ROWSPANELWEIGHT="1.0" ROWWEIGHT0="1.0" ROWWEIGHT1="1.0" SELECTED_TYPE="CHART" SIDEBAR_IS_ACTIVE="false" SYMBOL="FEDU" SYMBOL_GROUP="8" TRADE_BUTTONS_MIGRATED="true">
                  <ACTIVETRADER VERTICAL="false" VISIBLE="false" WEIGHT="2.0"/>
                  <BIG_BUTTONS VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
                  <CHART CONFIGURATION="@v9@%0:com.devexperts.tos.chartdata,1:com.devexperts.tos.thinkscript.constants,2:com.devexperts.tos.thinkscript.data,3:java.awt,4:com.devexperts.toschart.control.subgraph,5:com.devexperts.toschart.elstudies,6:com.devexperts.toschart.script%owner{chartAggregationPeriods:ChartAggregationPeriodArray0{15::ChartAggregationPeriod0},chartAggregationPeriods=@ChartAggregationPeriodArray0,colors{5::CustomColor0,9::CustomColor1,3::CustomColor2,7::CustomColor3,2::CustomColor4,6::CustomColor5,1::CustomColor6,0::CustomColor7}}#com.devexperts.toschart.core.ChartModel{encodedMixinsState=&quot;{\&quot;common\&quot;:{\&quot;DRAWING_SETS\&quot;:\&quot;{}\&quot;},\&quot;state_props\&quot;:{\&quot;state_type\&quot;:\&quot;REGULAR\&quot;},\&quot;monkey_bars_exp\&quot;:{\&quot;LikefolioMixin\&quot;:\&quot;{\\\&quot;paintingSettings\\\&quot;:{\\\&quot;neutralSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;positiveSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;negativeSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;sentimentSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true}},\\\&quot;shownDivisions\\\&quot;:[],\\\&quot;allDivisions\\\&quot;:[]}\&quot;},\&quot;monkey_bars\&quot;:{},\&quot;seasonality\&quot;:{},\&quot;regular\&quot;:{\&quot;DescriberMixin\&quot;:\&quot;{\\\&quot;visibility\\\&quot;:\\\&quot;HIDE_PANEL\\\&quot;,\\\&quot;studiesMode\\\&quot;:\\\&quot;HIDE_STUDIES\\\&quot;}\&quot;,\&quot;LikefolioMixin\&quot;:\&quot;{\\\&quot;paintingSettings\\\&quot;:{\\\&quot;neutralSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;positiveSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;negativeSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;sentimentSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true}},\\\&quot;shownDivisions\\\&quot;:[],\\\&quot;allDivisions\\\&quot;:[]}\&quot;}}&quot;,encodedPatternsModel=&quot;{\&quot;showPatterns\&quot;:true,\&quot;models\&quot;:[],\&quot;fibModels\&quot;:[]}&quot;,groupId=&quot;default&quot;,styleSettings{activeTool=0,chartAggregationSettings.timeAggregationSettings=!com.devexperts.toschart.model.TimeFrameAggregationSettings.createTickOrTimeAggregation(!%0.ChartRange.findByCode(&quot;DAY5&quot;),@ChartAggregationPeriod0),commonStyleSettings{autoCorpActionsExpansion=&lt;T,chartModeName:ChartModeName0,chartModes.!get(@ChartModeName0){chartPaintingType=!java.lang.Enum.valueOf(*%1.ChartPaintingType.class,&quot;BAR&quot;)},colorSettings{backgroundColor=#%2.CustomColor(#%3.Color(20,20,20,255)),barTypeColors{downColor=@CustomColor0,neutralColor=@CustomColor1,upColor=@CustomColor2},candleTrendTypeColors{fillUpColor=#%2.CustomColor(#%3.Color(0,204,204,255)),upColor=#%2.CustomColor(#%3.Color(0,204,204,255))},candleTypeColors.upColor=#%2.CustomColor(#%3.Color(0,204,204,195)),monkeyProfileTypeColors.defaultRowHeight=&lt;F,mpExpandedTypeColors.defaultRowHeight=&lt;F,volumeColor=#%2.CustomColor(#%3.Color(0,101,153,127))},expansion.right=15,fitArrowsToScreen=&lt;F,fitStudiesToScreen=&lt;F,manualAxisRegulator{maxValue=5.08095238d,minValue=1.10547619d},overlappedVolume=&lt;T,previousRightExpansion=15,shortCuts{^(&quot;Time Zone&quot;,&lt;F),^(&quot;Show Expiration Friday &quot;,&lt;F),^(&quot;Keep Price Zoom&quot;,&lt;F),^(&quot;enableLeftAxis&quot;,&lt;F),^(&quot;Fit expected price ranges&quot;,&lt;F),^(&quot;emphasizeDigitMPExpanded&quot;,&lt;F),^(&quot;showWicksCandleTrend&quot;,&lt;F),^(&quot;highlightEarnings&quot;,&lt;F),^(&quot;synchronizeCrosshair&quot;,&lt;F),^(&quot;myToolsMode&quot;,&lt;F),^(&quot;seasonalityStyle&quot;,&lt;F),^(&quot;Show Price Subgraph&quot;,&lt;F),^(&quot;closePriceLevel&quot;,&lt;F),^(&quot;Color Volume As Symbol Ticks&quot;,&lt;F),^(&quot;highlightPhantomRBars&quot;,&lt;F),^(&quot;Cross type &quot;,&lt;F),^(&quot;Fit Studies to Screen&quot;,&lt;F),^(&quot;Fit Orders&quot;,&lt;F),^(&quot;Bubbles as Percentage&quot;,&lt;F),^(&quot;hideStatusString&quot;,&lt;F),^(&quot;Show Studies &quot;,&lt;F),^(&quot;showWicksHeikinAshi&quot;,&lt;F),^(&quot;Alerts&quot;,&lt;F),^(&quot;Chart scale&quot;,&lt;F),^(&quot;Fit High/Low&quot;,&lt;F),^(&quot;Orders&quot;,&lt;F),^(&quot;Use Log Scale &quot;,&lt;F),^(&quot;Fit Study Markers to Screen&quot;,&lt;F),^(&quot;Fit Alerts&quot;,&lt;F),^(&quot;Fit patterns&quot;,&lt;F),^(&quot;Percentage View&quot;,&lt;F),^(&quot;Make Auto Zoom &quot;,&lt;F),^(&quot;Show Year Marking Line&quot;,&lt;F),^(&quot;Show Rollover Line&quot;,&lt;F),^(&quot;Show High/Low Bubbles &quot;,&lt;F),^(&quot;Snap mode&quot;,&lt;F),^(&quot;highlightStudies&quot;,&lt;F),^(&quot;Overlapped Volume&quot;,&lt;F),^(&quot;Show Symbol Logo&quot;,&lt;F),^(&quot;Show Last Price Bubble &quot;,&lt;F),^(&quot;emphasizeDigitMP&quot;,&lt;F),^(&quot;Show grid&quot;,&lt;F),^(&quot;showWicksCandle&quot;,&lt;F),^(&quot;Show trades&quot;,&lt;F),^(&quot;highlightSeasons&quot;,&lt;F),^(&quot;Extend Order/Alert Line to Left&quot;,&lt;F)},showBubbles=&lt;F,showGrid=&lt;F,showTradeExecution=&lt;T,step=5.376344086021505d,suppressAutoZoom=&lt;T},forexStyleSettings.shortCuts.^(&quot;Show Volume Subgraph&quot;,&lt;F),futuresStyleSettings{adjustForContractChanges=&lt;T,highlightExtendedHours=&lt;T,shortCuts{^(&quot;adjustForContractChanges&quot;,&lt;F),^(&quot;Show Open Interest&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,&lt;F),^(&quot;showContractChangeEvents&quot;,&lt;F),^(&quot;futures_daily_close_price&quot;,&lt;F),^(&quot;Show Options&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,&lt;F),^(&quot;startAtMarketOpen&quot;,&lt;F)},showOptions=&lt;T},optionsStyleSettings.shortCuts{^(&quot;Show Open Interest&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,&lt;F),^(&quot;Show Theo Price&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,&lt;F),^(&quot;startAtMarketOpen&quot;,&lt;F)},otherStyleSettings.shortCuts{^(&quot;Show Social Sentiment&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,&lt;F),^(&quot;Show Options&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,&lt;F),^(&quot;Show Corporate Actions&quot;,&lt;F),^(&quot;Show CNBC Video&quot;,&lt;F),^(&quot;startAtMarketOpen&quot;,&lt;F),^(&quot;adjustForDividends&quot;,&lt;F)}},subgraphModels{!get(#%4.SubgraphId(&quot;Symbol&quot;)){height=303,storableIndicators{+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# Trend Pivots\n# Mobius\n# V01.01.29.2019\n# Uses trend of higher highs with higher lows and trend of lower lows with lower highs to locate pivots. Distance for trend is set by the user. Confirmation of a reversal from pivots is set with a multiple of the pivot bars range. That multiple is also a user input.\n# Trading Rules\n# 1) Trade when price crosses and closes outside the pivot Confirmation line. At that point looking for best entry. Min trade is 2 contracts\n# 2) Know your risk point before entering trade. Typical risk point is the pivot line itself. If your risk is crossed look for an exit. Never use hard stops - you\'ll often get out for little or no loss\n# 3) Know your Risk off point before entering. Typical Risk Off is an ATR multiple. Offer Risk Off as soon as possible for a Risk Free trade\n# 4) set mental stop one tick above entry when Risk Off is achieved\n# 5) if trade continues your way move mental stop for your runner to last support / resistance each time a new support / resistance is hit.\n\ninput n = 5;\ninput R_Mult = .7;\n\ndef o = open;\ndef h = high;\ndef l = low;\ndef c = close;\ndef x = BarNumber();\ndef nan = Double.NaN;\ndef ts = tickSize();\ndef tr = TrueRange(h, c, l);\ndef hh = if Sum(h &gt; h[1], n) &gt;= n and \n            Sum(l &gt; l[1], n) &gt;= n-1\n         then h\n         else if h &gt; hh[1]\n              then h\n              else hh[1];\ndef xh = if h == hh\n         then x\n         else nan;\nplot hh_ = if x &gt;= HighestAll(xh)\n           then HighestAll(if IsNaN(c[-1])\n                           then hh\n                           else nan)\n           else nan;\n     hh_.SetDefaultColor(Color.RED);\n     hh_.HideTitle();\n     hh_.HideBubble();\ndef hR = if h == hh\n         then Round(Average(tr, n)/TickSize(), 0)*TickSize()\n         else hR[1];\ndef PrevL = if h == hh\n            then l[1]\n            else PrevL[1];\nplot STO = if x &gt;= HighestAll(xh)\n           then HighestAll(if IsNaN(c[-1])\n           then Round((Max(PrevL, hh_ - (hR * R_Mult))) / ts, 0) * ts\n                           else nan)\n           else nan;\n     STO.SetDefaultColor(Color.RED);\n     STO.HideTitle();\n     STO.HideBubble();\nplot STO_RO = if x &gt;= HighestAll(xh)\n              then HighestAll(if isNaN(c[-1])\n                              then STO - Min(hR, TickSize() * 16)\n                              else nan)\n              else nan;\n     STO_RO.SetStyle(Curve.Long_Dash);\n     STO_RO.SetDefaultColor(Color.White);\n     STO_RO.HideBubble();\n     STO_RO.HideTitle();\nAddChartBubble(x == HighestAll(x), STO_RO, \&quot;RO\&quot;, STO_RO.TakeValueColor(), 0);\ndef ll = if Sum(l &lt; l[1], n) &gt;= n and \n            Sum(h &lt; h[1], n) &gt;= n-1\n         then l\n         else if l &lt; ll[1]\n              then l\n              else ll[1];\ndef xl = if l == ll\n         then x\n         else nan;\nplot ll_ = if x &gt;= HighestAll(xl)\n           then HighestAll(if IsNaN(c[-1])\n                           then ll\n                           else nan)\n           else nan;\n     ll_.SetDefaultColor(Color.GREEN);\n     ll_.HideTitle();\n     ll_.HideBubble();\ndef lR = if l == ll\n         then Round(Average(tr, n)/TickSize(), 0)*TickSize()\n         else lR[1];\ndef PrevH = if l == ll\n            then h[1]\n            else PrevH[1];\nplot BTO = if x &gt;= HighestAll(xl)\n           then HighestAll(if IsNaN(c[-1])\n           then Round((Min(PrevH, ll_ + (lR * R_Mult))) / ts, 0) * ts\n                           else nan)\n           else nan;\n     BTO.SetDefaultColor(Color.GREEN);\n     BTO.HideTitle();\n     BTO.HideBubble();\nplot BTO_RO = if x &gt;= HighestAll(xl)\n              then HighestAll(if isNaN(c[-1])\n                              then BTO + Min(lR, TickSize() * 16)\n                              else nan)\n              else nan;\n     BTO_RO.SetStyle(Curve.Long_Dash);\n     BTO_RO.SetDefaultColor(Color.White);\n     BTO_RO.HideBubble();\n     BTO_RO.HideTitle();\nAddChartBubble(x == HighestAll(x), BTO_RO, \&quot;RO\&quot;, BTO_RO.TakeValueColor(), 1);\nAddCloud(STO, hh_, Color.LIGHT_RED, Color.LIGHT_RED);\nAddCloud(ll_, BTO, Color.LIGHT_GREEN, Color.LIGHT_GREEN);\nAlert(c crosses below STO, \&quot;\&quot;, Alert.Bar, Sound.Bell);\nAlert(c crosses above BTO, \&quot;\&quot;, Alert.Bar, Sound.Ding);\n# End Code Trend Pivots &quot;,name=&quot;_bdb90595_db2e_3040_abcc_53876b8695e2&quot;}){alerts:LocalAlertArray0,alerts=@LocalAlertArray0}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;\n#Custom Multi Plot System by 7of9 for BRT\n#Copyright © 2020 by 7of9...Please do not share this Study\n\n#hint: &lt;b&gt;\&quot;Multi Plot System\&quot; by 7of9 for BRT&lt;/b&gt; \\n This system plots ten different significant levels that can act as support and resistance. It also has a dynamic current price line tracker. \\n **For illustrative purposes only** \\n **Not a recommendation of a specific security or investment strategy** \\n &lt;li&gt;Copyright © 2020 by 7of9...Please do not share this Study&lt;/li&gt; \\n &lt;li&gt;This study has been designed to be very user customizable&lt;/li&gt; \\n &lt;li&gt;For a complete description of each user input, just click on the \&quot;?\&quot; next to each input in Edit Studies&lt;/li&gt;\n\n#hint ExtPreMktLinesIntoChart: Allows the user to set how far the three pre-market levels extend into the chart. A setting of 6.5 would extend the line 6.5 hours past market open.\n\n#hint ExtCurrDayMktLinesIntoChart: Allows the user to set how far the three regular market levels extend into the chart. A setting of 6.5 would extend the line 6.5 hours past market open.\n\n#hint ExtPrevDayMktLinesIntoChart: Allows the user to set how far the four previous days market levels extend into the chart. A setting of 6.5 would extend the line 6.5 hours past market open.\n\n#hint PlotRegMktLinesOnPrevDays: Allows the user to show regular market levels on previous days. A setting of 1 would show one previous day.\n\n#hint DisplayPreMarketPriceBubbles: Allows the user to show or not show pre-market price bubbles.\n\n#hint DisplayCurrDayPriceBubbles: Allows the user to show or not show current day price bubbles.\n\n#hint DisplayPrevDayPriceBubbles: Allows the user to show or not show previous day price bubbles.\n\n#hint DisplayPreMktOnOrBelow: Allows the user to set the chart timeframe that pre-market levels will show on or below.\n\n#hint DisplayCurrDayMktOnOrBelow: Allows the user to set the chart timeframe that current day levels will show on or below.\n\n#hint DisplayPrevDayMktOnOrBelow: Allows the user to set the chart timeframe that previous day levels will show on or below.\n\n#Inputs\n\ninput ExtPreMktLinesIntoChart = 6.5;\ninput ExtCurrDayMktLinesIntoChart = 0.5;\ninput ExtPrevDayMktLinesIntoChart = 6.5;\ninput PlotRegMktLinesOnPrevDays = 0;\ninput DisplayPreMarketPriceBubbles = yes;\ninput DisplayCurrDayPriceBubbles = yes;\ninput DisplayPrevDayPriceBubbles = yes;\ninput DisplayPreMktOnOrBelow = {default OneMin, TwoMin, ThreeMin, FourMin, FiveMin, TenMin, FifteenMin, TwentyMin, ThirtyMin, OneHr, TwoHr, FourHr};\ninput DisplayCurrDayMktOnOrBelow = {default OneMin, TwoMin, ThreeMin, FourMin, FiveMin, TenMin, FifteenMin, TwentyMin, ThirtyMin, OneHr, TwoHr, FourHr};\ninput DisplayPrevDayMktOnOrBelow = {default OneMin, TwoMin, ThreeMin, FourMin, FiveMin, TenMin, FifteenMin, TwentyMin, ThirtyMin, OneHr, TwoHr, FourHr};\n\n#Pre-Market Agg Switch\n\ndef PreMktAgg;\n\nswitch(DisplayPreMktOnOrBelow) \n\n{case OneMin:\n    PreMktAgg = AggregationPeriod.MIN; \n  case TwoMin:\n    PreMktAgg = AggregationPeriod.TWO_MIN;\n  case ThreeMin:\n    PreMktAgg = AggregationPeriod.THREE_MIN;\n  case FourMin:\n    PreMktAgg = AggregationPeriod.FOUR_MIN;\n  case FiveMin:\n    PreMktAgg = AggregationPeriod.FIVE_MIN;\n  case TenMin:\n    PreMktAgg = AggregationPeriod.TEN_MIN;\n  case FifteenMin:\n    PreMktAgg = AggregationPeriod.FIFTEEN_MIN;\n  case TwentyMin:\n    PreMktAgg = AggregationPeriod.TWENTY_MIN;\n  case ThirtyMin:\n    PreMktAgg = AggregationPeriod.THIRTY_MIN;\n  case OneHr:\n    PreMktAgg = AggregationPeriod.HOUR;\n  case TwoHr:\n    PreMktAgg = AggregationPeriod.TWO_HOURS;\n  case FourHr:\n    PreMktAgg = AggregationPeriod.FOUR_HOURS;}\n\n#Current Day Agg Switch\n\ndef CurrDayAgg;\n\nswitch(DisplayCurrDayMktOnOrBelow) \n\n{case OneMin:\n    CurrDayAgg = AggregationPeriod.MIN; \n  case TwoMin:\n    CurrDayAgg = AggregationPeriod.TWO_MIN;\n  case ThreeMin:\n    CurrDayAgg = AggregationPeriod.THREE_MIN;\n  case FourMin:\n    CurrDayAgg = AggregationPeriod.FOUR_MIN;\n  case FiveMin:\n    CurrDayAgg = AggregationPeriod.FIVE_MIN;\n  case TenMin:\n    CurrDayAgg = AggregationPeriod.TEN_MIN;\n  case FifteenMin:\n    CurrDayAgg = AggregationPeriod.FIFTEEN_MIN;\n  case TwentyMin:\n    CurrDayAgg = AggregationPeriod.TWENTY_MIN;\n  case ThirtyMin:\n    CurrDayAgg = AggregationPeriod.THIRTY_MIN;\n  case OneHr:\n    CurrDayAgg = AggregationPeriod.HOUR;\n  case TwoHr:\n    CurrDayAgg = AggregationPeriod.TWO_HOURS;\n  case FourHr:\n    CurrDayAgg = AggregationPeriod.FOUR_HOURS;}\n\n#Previous Day Agg Switch\n\ndef PrevDayAgg;\n\nswitch(DisplayPrevDayMktOnOrBelow) \n\n{case OneMin:\n    PrevDayAgg = AggregationPeriod.MIN; \n  case TwoMin:\n    PrevDayAgg = AggregationPeriod.TWO_MIN;\n  case ThreeMin:\n    PrevDayAgg = AggregationPeriod.THREE_MIN;\n  case FourMin:\n    PrevDayAgg = AggregationPeriod.FOUR_MIN;\n  case FiveMin:\n    PrevDayAgg = AggregationPeriod.FIVE_MIN;\n  case TenMin:\n    PrevDayAgg = AggregationPeriod.TEN_MIN;\n  case FifteenMin:\n    PrevDayAgg = AggregationPeriod.FIFTEEN_MIN;\n  case TwentyMin:\n    PrevDayAgg = AggregationPeriod.TWENTY_MIN;\n  case ThirtyMin:\n    PrevDayAgg = AggregationPeriod.THIRTY_MIN;\n  case OneHr:\n    PrevDayAgg = AggregationPeriod.HOUR;\n  case TwoHr:\n    PrevDayAgg = AggregationPeriod.TWO_HOURS;\n  case FourHr:\n    PrevDayAgg = AggregationPeriod.FOUR_HOURS;}\n\n#Pre market / Regular market definitions\n\ndef ExtPMOut = ExtPreMktLinesIntoChart * 3610000;\ndef ExtRMOut = ExtCurrDayMktLinesIntoChart * 3610000;\ndef ExtYMOut = ExtPrevDayMktLinesIntoChart * 3610000;\ndef MktPlot = GetLastDay() - PlotRegMktLinesOnPrevDays &lt;= GetDay()\nand GetLastYear() - 0 &lt;= GetYear();\n\ndef PMhrs = RegularTradingStart (GetYYYYMMDD()) &gt; GetTime();\ndef RMhrs = RegularTradingStart (GetYYYYMMDD()) &lt; GetTime();\ndef PMplots = RegularTradingStart (GetYYYYMMDD()) &gt; GetTime() - ExtPMOut;\ndef RMplots = RegularTradingStart (GetYYYYMMDD()) &gt; GetTime() - ExtRMOut;\ndef YMplots = RegularTradingStart (GetYYYYMMDD()) &gt; GetTime() - ExtYMOut;\ndef PMStart = RMhrs[1] and PMhrs;\ndef RMStart = PMhrs[1] and RMhrs;\ndef PMHigh = CompoundValue(1, if PMStart then high else if PMhrs\nthen Max(high, PMHigh[1]) else PMHigh[1], 0);\n\ndef PMLow = CompoundValue(1, if PMStart then low else if PMhrs\nthen Min(low, PMLow[1]) else PMLow[1], 0);\n\ndef bar = BarNumber();\ndef highBar = if PMhrs and high == PMHigh then bar else Double.NaN;\ndef lowBar = if PMhrs and low == PMLow then bar else Double.NaN;\n\n#Current price line tracker code\n\nplot PriceLine = HighestAll (if IsNaN(close[-1]) and !IsNaN(close) then close else Double.NaN);\n\nPriceLine.SetDefaultColor (Color.GRAY);\nPriceLine.SetStyle (Curve.SHORT_DASH);\n\n#Pre market open code\n\ndef ShowPMO = if GetAggregationPeriod() &lt;= PreMktAgg then yes else no;\ndef day = GetDay();\ndef PMopenBar = day != day[1];\ndef PMOpen = if PMopenBar then open else PMOpen[1];\nplot PMO = if ShowPMO and MktPlot and PMplots then PMOpen else Double.NaN;\n\nPMO.SetDefaultColor (CreateColor (234, 136, 255));\n\n#Pre market high code\n\ndef ShowPMH = if GetAggregationPeriod() &lt;= PreMktAgg then yes else no;\ndef PMHighBar = if bar == HighestAll(highBar) then PMHigh else PMHighBar[1];\nplot PMH = if ShowPMH and PMplots and PMHighBar &gt; 0 then PMHighBar else Double.NaN;\n\nPMH.SetDefaultColor (CreateColor (116, 189, 232));\n\n#Pre market low code\n\ndef ShowPML = if GetAggregationPeriod() &lt;= PreMktAgg then yes else no;\ndef PMLowBar = if bar == HighestAll(lowBar) then PMLow else PMLowBar[1];\nplot PML = if ShowPML and PMplots and PMLowBar &gt; 0 then PMLowBar else double.NaN;\n\nPML.SetDefaultColor (CreateColor (116, 189, 232));\n\n#Current day open code\n\ndef ShowCDO = if GetAggregationPeriod() &lt;= CurrDayAgg then yes else no;\ndef CDOpen = if !day then Double.NaN else open (period = \&quot;day\&quot;);\nplot CDO = if ShowCDO and MktPlot and RMplots then CDOpen else Double.NaN;\n\nCDO.SetDefaultColor (Color.YELLOW);\nCDO.SetStyle (Curve.SHORT_DASH);\n\n#Current day high code\n\ndef ShowCDH = if GetAggregationPeriod() &lt;= CurrDayAgg then yes else no;\ndef CDHigh = if !day then Double.NaN else high (period = \&quot;day\&quot;);\nplot CDH = if ShowCDH and MktPlot and RMplots then CDHigh else Double.NaN;\n\nCDH.SetDefaultColor (Color.GREEN);\nCDH.SetStyle (Curve.SHORT_DASH);\n\n#Current day low code\n\ndef ShowCDL = if GetAggregationPeriod() &lt;= CurrDayAgg then yes else no;\ndef CDLow = if !day then Double.NaN else low (period = \&quot;day\&quot;);\nplot CDL = if ShowCDL and MktPlot and RMplots then CDLow else Double.NaN;\n\nCDL.SetDefaultColor (Color.RED);\nCDL.SetStyle (Curve.SHORT_DASH);\n\n#Previous day open code\n\ndef ShowPDO = if GetAggregationPeriod() &lt;= PrevDayAgg then yes else no;\ndef PDOpen = if !day then Double.NaN else open (period = \&quot;day\&quot;)[1];\nplot PDO = if ShowPDO and MktPlot and YMplots then PDOpen else Double.NaN;\n\nPDO.SetDefaultColor (CreateColor (255, 255, 153));\nPDO.SetStyle (Curve.SHORT_DASH);\n\n#Previous day high code\n\ndef ShowPDH = if GetAggregationPeriod() &lt;= PrevDayAgg then yes else no;\ndef PDHigh = if !day then Double.NaN else high (period = \&quot;day\&quot;)[1];\nplot PDH = if ShowPDH and MktPlot and YMplots then PDHigh else Double.NaN;\n\nPDH.SetDefaultColor (CreateColor (153, 255, 153));\nPDH.SetStyle (Curve.SHORT_DASH);\n\n#Previous day low code\n\ndef ShowPDL = if GetAggregationPeriod() &lt;= PrevDayAgg then yes else no;\ndef PDLow = if !day then Double.NaN else low (period = \&quot;day\&quot;)[1];\nplot PDL = if ShowPDL and MktPlot and YMplots then PDLow else Double.NaN;\n\nPDL.SetDefaultColor (CreateColor (255, 126, 156));\nPDL.SetStyle (Curve.SHORT_DASH);\n\n#Previous day close code\n\ndef ShowPDC = if GetAggregationPeriod() &lt;= PrevDayAgg then yes else no;\ndef PDClose = if !day then Double.NaN else close (period = \&quot;day\&quot;)[1];\nplot PDC = if ShowPDC and MktPlot and YMplots then PDClose else Double.NaN;\n\nPDC.SetDefaultColor (Color.WHITE);\nPDC.SetStyle (Curve.SHORT_DASH);\n\n#Pre market bubbles code\n\ndef PMBubbles = if GetAggregationPeriod() &lt;= PreMktAgg\nthen DisplayPreMarketPriceBubbles else no;\n\nAddChartBubble (PMopenBar and PMBubbles, PMO, (\&quot;PMO:\&quot;) + Round (PMO, 2),\nCreateColor (204, 204, 255));\nAddChartBubble (highBar and PMBubbles, PMH, (\&quot;PMH:\&quot;) + Round (PMH, 2), \nCreateColor (204, 204, 255));\nAddChartBubble (lowBar and PMBubbles, PML, (\&quot;PML:\&quot;) + Round (PML, 2), \nCreateColor (204, 204, 255), no);\n\n#Current day bubbles code\n\ndef CDBubbles = if GetAggregationPeriod() &lt;= CurrDayAgg\nthen DisplayCurrDayPriceBubbles else no;\n\nAddChartBubble (PMopenBar and CDBubbles, CDO, (\&quot;CDO:\&quot;) + Round (CDO, 2), \nCreateColor (204, 204, 255));\nAddChartBubble (PMopenBar and CDBubbles, CDH, (\&quot;CDH:\&quot;) + Round (CDH, 2), \nCreateColor (204, 204, 255));\nAddChartBubble (PMopenBar and CDBubbles, CDL, (\&quot;CDL:\&quot;) + Round (CDL, 2), \nCreateColor (204, 204, 255), no);\n\n#Previous day bubbles code\n\ndef PDBubbles = if GetAggregationPeriod() &lt;= PrevDayAgg\nthen DisplayPrevDayPriceBubbles else no;\n\nAddChartBubble (PMopenBar and PDBubbles, PDO, (\&quot;PDO:\&quot;) + Round (PDO, 2), \nCreateColor (204, 204, 255));\nAddChartBubble (PMopenBar and PDBubbles, PDH, (\&quot;PDH:\&quot;) + Round (PDH, 2), \nCreateColor (204, 204, 255));\nAddChartBubble (PMopenBar and PDBubbles, PDL, (\&quot;PDL:\&quot;) + Round (PDL, 2), \nCreateColor (204, 204, 255), no);\nAddChartBubble (PMopenBar and PDBubbles, PDC, (\&quot;PDC:\&quot;) + Round (PDC, 2), \nCreateColor (204, 204, 255));\n\n\n&quot;,name=&quot;_e3e4cdd0_e429_36e8_b06d_a1832cc27156&quot;}){inputsMap:TreeMap0{^(&quot;DisplayCurrDayMktOnOrBelow&quot;,&quot;FourHr&quot;),^(&quot;DisplayCurrDayPriceBubbles&quot;,&lt;F),^(&quot;DisplayPreMarketPriceBubbles&quot;,&lt;F),^(&quot;DisplayPreMktOnOrBelow&quot;,&quot;FourHr&quot;),^(&quot;DisplayPrevDayMktOnOrBelow&quot;,&quot;FourHr&quot;),^(&quot;DisplayPrevDayPriceBubbles&quot;,&lt;F),^(&quot;ExtCurrDayMktLinesIntoChart&quot;,0.0d),^(&quot;ExtPreMktLinesIntoChart&quot;,1.5d),^(&quot;ExtPrevDayMktLinesIntoChart&quot;,0.0d)},inputsMap=@TreeMap0,plots{0:{color=#%2.CustomColor(#%3.Color(0,255,0,255))},1:{color=@CustomColor2,lineStyle=2,lineWeight=2},2:{color=#%2.CustomColor(#%3.Color(0,0,255,255)),lineWeight=3},3:{color=#%2.CustomColor(#%3.Color(0,102,255,255)),lineWeight=3},4:{color=@CustomColor1,hiding=&lt;T},5:{hiding=&lt;T},6:{hiding=&lt;T},7:{color=@CustomColor3,lineStyle=2,lineWeight=3},8:{lineStyle=2,lineWeight=3},9:{lineStyle=2,lineWeight=3},10:{color=#%2.CustomColor(#%3.Color(0,0,0,255)),lineStyle=2,lineWeight=3}}}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# @new\n# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2011-2021\n#\n# Source code isn\'t available.\n\ninput arrayPeriod = 13;\ninput formationPeriod = 9;\n\nplot \&quot;Buy Formation\&quot; = Double.NaN;\nplot \&quot;Sell Formation\&quot; = Double.NaN;\nplot \&quot;Buy Array\&quot; = Double.NaN;\nplot \&quot;Sell Array\&quot; = Double.NaN;\nplot \&quot;Perfect Buy\&quot; = Double.NaN;\nplot \&quot;Perfect Sell\&quot; = Double.NaN;\nplot \&quot;Perfect Array Buy\&quot; = Double.NaN;\nplot \&quot;Perfect Array Sell\&quot; = Double.NaN;&quot;,name=&quot;SequenceCounter&quot;}){plots{0:{color=#%2.CustomColor(#%3.Color(0,255,51,255))},1:{color=#%2.CustomColor(#%3.Color(255,0,0,255))},2:{color=!%2.CustomColor.findByIndex(&quot;17&quot;),hiding=&lt;T},3:{color=@CustomColor4,hiding=&lt;T},4:{color=#%2.CustomColor(#%3.Color(0,255,0,255))},5:{color=#%2.CustomColor(#%3.Color(255,0,0,255))},6:{color=#%2.CustomColor(#%3.Color(0,255,0,255))},7:{color=#%2.CustomColor(#%3.Color(255,0,0,255))}}}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2017-2021\n#\n\ninput price = close;\ninput length = 9;\ninput displace = 0;\ninput showBreakoutSignals = no;\n\nplot AvgExp = ExpAverage(price[-displace], length);\nplot UpSignal = price crosses above AvgExp;\nplot DownSignal = price crosses below AvgExp;\n\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\nAvgExp.SetDefaultColor(GetColor(1));\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);&quot;,name=&quot;MovAvgExponential&quot;}){inputsMap:TreeMap1{^(&quot;length&quot;,20),^(&quot;price&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap1,plots{0:{color=!%2.CustomColor.findByIndex(&quot;12&quot;)}}}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2017-2021\n#\n\ninput price = close;\ninput length = 9;\ninput displace = 0;\ninput showBreakoutSignals = no;\n\nplot AvgExp = ExpAverage(price[-displace], length);\nplot UpSignal = price crosses above AvgExp;\nplot DownSignal = price crosses below AvgExp;\n\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\nAvgExp.SetDefaultColor(GetColor(1));\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);&quot;,name=&quot;MovAvgExponential&quot;}){inputsMap:TreeMap2{^(&quot;length&quot;,50),^(&quot;price&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap2,plots{0:{color=@CustomColor0}}}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2017-2021\n#\n\ninput price = close;\ninput length = 9;\ninput displace = 0;\ninput showBreakoutSignals = no;\n\nplot AvgExp = ExpAverage(price[-displace], length);\nplot UpSignal = price crosses above AvgExp;\nplot DownSignal = price crosses below AvgExp;\n\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\nAvgExp.SetDefaultColor(GetColor(1));\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);&quot;,name=&quot;MovAvgExponential&quot;}){inputsMap:TreeMap3{^(&quot;length&quot;,100),^(&quot;price&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap3,plots{0:{color=@CustomColor5}}}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2017-2021\n#\n\ninput price = close;\ninput length = 9;\ninput displace = 0;\ninput showBreakoutSignals = no;\n\nplot SMA = Average(price[-displace], length);\nplot UpSignal = price crosses above SMA;\nplot DownSignal = price crosses below SMA;\n\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\nSMA.SetDefaultColor(GetColor(1));\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);&quot;,name=&quot;SimpleMovingAvg&quot;}){inputsMap:TreeMap4{^(&quot;length&quot;,200),^(&quot;price&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap4,plots{0:{color=!%2.CustomColor.findByIndex(&quot;13&quot;)}}}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# @new\n# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2011-2021\n#\n\ninput numDevDn = -2.0;\ninput numDevUp = 2.0;\ninput timeFrame = {default DAY, WEEK, MONTH};\n\ndef cap = getAggregationPeriod();\ndef errorInAggregation =\n    timeFrame == timeFrame.DAY and cap &gt;= AggregationPeriod.WEEK or\n    timeFrame == timeFrame.WEEK and cap &gt;= AggregationPeriod.MONTH;\nassert(!errorInAggregation, \&quot;timeFrame should be not less than current chart aggregation period\&quot;);\n\ndef yyyyMmDd = getYyyyMmDd();\ndef periodIndx;\nswitch (timeFrame) {\ncase DAY:\n    periodIndx = yyyyMmDd;\ncase WEEK:\n    periodIndx = Floor((daysFromDate(first(yyyyMmDd)) + getDayOfWeek(first(yyyyMmDd))) / 7);\ncase MONTH:\n    periodIndx = roundDown(yyyyMmDd / 100, 0);\n}\ndef isPeriodRolled = compoundValue(1, periodIndx != periodIndx[1], yes);\n\ndef volumeSum;\ndef volumeVwapSum;\ndef volumeVwap2Sum;\n\nif (isPeriodRolled) {\n    volumeSum = volume;\n    volumeVwapSum = volume * vwap;\n    volumeVwap2Sum = volume * Sqr(vwap);\n} else {\n    volumeSum = compoundValue(1, volumeSum[1] + volume, volume);\n    volumeVwapSum = compoundValue(1, volumeVwapSum[1] + volume * vwap, volume * vwap);\n    volumeVwap2Sum = compoundValue(1, volumeVwap2Sum[1] + volume * Sqr(vwap), volume * Sqr(vwap));\n}\ndef price = volumeVwapSum / volumeSum;\ndef deviation = Sqrt(Max(volumeVwap2Sum / volumeSum - Sqr(price), 0));\n\nplot VWAP = price;\nplot UpperBand = price + numDevUp * deviation;\nplot LowerBand = price + numDevDn * deviation;\n\nVWAP.setDefaultColor(getColor(0));\nUpperBand.setDefaultColor(getColor(2));\nLowerBand.setDefaultColor(getColor(4));&quot;,name=&quot;VWAP&quot;}){plots{0:{color=@CustomColor1,lineStyle=2,lineWeight=2},1:{hiding=&lt;T},2:{hiding=&lt;T}}}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2017-2021\n#\n\ninput price = close;\ninput length = 9;\ninput displace = 0;\ninput showBreakoutSignals = no;\n\nplot AvgExp = ExpAverage(price[-displace], length);\nplot UpSignal = price crosses above AvgExp;\nplot DownSignal = price crosses below AvgExp;\n\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\nAvgExp.SetDefaultColor(GetColor(1));\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);&quot;,name=&quot;MovAvgExponential&quot;}){hidden=&lt;T,inputsMap:TreeMap5{^(&quot;price&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap5}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2017-2021\n#\n\ninput price = close;\ninput length = 9;\ninput displace = 0;\ninput showBreakoutSignals = no;\n\nplot SMA = Average(price[-displace], length);\nplot UpSignal = price crosses above SMA;\nplot DownSignal = price crosses below SMA;\n\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\nSMA.SetDefaultColor(GetColor(1));\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);&quot;,name=&quot;SimpleMovingAvg&quot;}){hidden=&lt;T,inputsMap:TreeMap6{^(&quot;length&quot;,50),^(&quot;price&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap6,plots{0:{color=@CustomColor4}}}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# Buythedip + Selltherip Indicator (Upper)\n# Assembled by BenTen at UseThinkScript.com\n# Modified by BoarTrades #Boar6916 on discord\n# &lt;NOTES&gt;\n# Based on the concept of \&quot;Synethetic VIX\&quot; by Larry Williams\n# This software is licensed for individual use only.\n# NOT FOR REDISTRIBUTION PRIVATE/CONFIDENTIAL\n# Copyright (c) 2020 useThinkScript LLC\n\ninput length = 22;\ninput BTD_meter = yes;\ninput STR_meter = yes;\ninput arrows = yes;\ninput color_change = yes;\n\n# BTD Plot indicator\ndef BTD_value = ((high - Lowest(close[1], length)) / Lowest(close[1], length)) * 100;\ndef buythedip = BTD_value;\ndef Zeroline = 0;\ndef BTD_condition = buythedip crosses above Zeroline;\n\n# STR Plot indicator\ndef STR_value = ((low - highest(close[1], length)) / highest(close[1], length)) * 100;\ndef selltherip = STR_value;\ndef STR_condition = selltherip crosses below Zeroline;\n\nAddLabel(BTD_meter and yes, Concat(\&quot;BTD = \&quot;, buythedip), color.CYAN);\nAddLabel(STR_meter and yes, Concat(\&quot;STR = \&quot;, selltherip), color.MAGENTA);\n\n# BTD Plot arrows\nplot UpSignal = if arrows and BTD_condition then buythedip else Double.NaN;\nUpSignal.SetDefaultColor(Color.Orange);\nUpSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\n\n# STR Plot arrows\nplot DnSignal = if arrows and STR_condition then selltherip else Double.NaN;\nDnSignal.SetDefaultColor(Color.RED);\nDnSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);&quot;,name=&quot;_acdb191b_7565_36d8_9406_cd07ae712c77&quot;}){plots{0:{color=@CustomColor6,lineWeight=3},1:{color=@CustomColor7,lineWeight=3}}}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence:ScriptEssence0{body=&quot;# blackFLAG FTS SwingArms\n# StudyName: blackFLAG_Futures_SwingArm_ATRTrail\n# My preferred setting is 28 / 5 FOR ALL TIMEFRAMES\n# Edited by: Jose Azcarate\n# blackFLAG Futures Trading - FOR EDUCATIONAL PURPOSES ONLY\n# TWITTER: @blackflagfuture\n\n# SwingArm Watchlist by [USER=278]@fishstick1229[/USER]\n# * Updated code below is to be used for custom watchlist column only **\n\n#Updated text display by [USER=4199]@Fishbed[/USER]\n\n# Combined Watchlist code to produce in chart label.\n\n# 6/25/20 Updated by Scott K @sirrous\n# Added overlapping swingarm timeframe notifications and alerts\n\n# Set the aggperiod to the timeframe you want the zone to monitor for an overlap.  When the defined aggperiod\'s swingarm overlaps with the chart and price moves into that then overlap you will be notified.\n# Labels only display for higher time periods (ie 15m aggperiod on a 10 min chart.\n# Add the study multiple times and set them to different aggperoids to montior multiple times.\n\n\ninput high_aggperiod = AggregationPeriod.MIN;\ninput Enable_Zone_Overlap_Notifications = no;\ninput current_period_trigger_zone = {default \&quot;Zone 4\&quot;, \&quot;Zone 3\&quot;, \&quot;Zone 2\&quot;};\ninput trailType = {default modified, unmodified};\ninput ATRPeriod = 28;\ninput ATRFactor = 5;\ninput firstTrade = {default long, short};\ninput averageType = AverageType.WILDERS;\n\ninput fib1Level = 61.8;\ninput fib2Level = 78.6;\ninput fib3Level = 88.6;\n\nAssert(ATRFactor &gt; 0, \&quot;\'atr factor\' must be positive: \&quot; + ATRFactor);\n\n## Current Chart Agg Period\n\ndef HiLo = Min(high - low, 1.5 * Average(high - low, ATRPeriod));\ndef HRef = if low &lt;= high[1]\n    then high - close[1]\n    else (high - close[1]) - 0.5 * (low - high[1]);\ndef LRef = if high &gt;= low[1]\n    then close[1] - low\n    else (close[1] - low) - 0.5 * (low[1] - high);\n\ndef trueRange;\nswitch (trailType) {\ncase modified:\n    trueRange = Max(HiLo, Max(HRef, LRef));\ncase unmodified:\n    trueRange = TrueRange(high, close, low);\n}\ndef loss = ATRFactor * MovingAverage(averageType, trueRange, ATRPeriod);\n\ndef state = {default init, long, short};\ndef trail;\nswitch (state[1]) {\ncase init:\n    if (!IsNaN(loss)) {\n        switch (firstTrade) {\n        case long:\n            state = state.long;\n            trail = close - loss;\n        case short:\n            state = state.short;\n            trail = close + loss;\n    }\n    } else {\n        state = state.init;\n        trail = Double.NaN;\n    }\ncase long:\n    if (close &gt; trail[1]) {\n        state = state.long;\n        trail = Max(trail[1], close - loss);\n    } else {\n        state = state.short;\n        trail = close + loss;\n    }\ncase short:\n    if (close &lt; trail[1]) {\n        state = state.short;\n        trail = Min(trail[1], close + loss);\n    } else {\n        state = state.long;\n        trail = close - loss;\n    }\n}\n\ndef BuySignal = Crosses(state == state.long, 0, CrossingDirection.ABOVE);\ndef SellSignal = Crosses(state == state.short, 0, CrossingDirection.ABOVE);\n\ndef ex = if BuySignal then high else if SellSignal then low else if state == state.long then Max(ex[1], high) else if state == state.short then Min(ex[1], low) else ex[1];\n\ndef TrailingStop = trail;\ndef f1 = ex + (trail - ex) * fib1Level / 100;\ndef f2 = ex + (trail - ex) * fib2Level / 100;\ndef f3 = ex + (trail - ex) * fib3Level / 100;\ndef l100 = trail + 0;\ndef Fib1 = f1;\ndef Fib2 = f2;\ndef Fib3 = f3;\n\ndef bullAboveZone = state == state.long and close &gt; Fib1;\ndef bullZone2 = state == state.long and close &lt;= Fib1 and close &gt; Fib2;\ndef bullZone3 = state == state.long and close &lt;= Fib2 and close &gt; Fib3;\ndef bullZone4 = state == state.long and close &lt;= Fib3 and close &gt; TrailingStop;\n\ndef bearZone2 = state == state.short and close &gt;= Fib1 and close &lt; Fib2;\ndef bearZone3 = state == state.short and close &gt;= Fib2 and close &lt; Fib3;\ndef bearZone4 = state == state.short and close &gt;= Fib3 and close &lt; TrailingStop;\n\n## High Agg Period\n\ndef highagg_high = high(period = high_aggperiod);\ndef highagg_low = low(period = high_aggperiod);\ndef highagg_close = close(period = high_aggperiod);\n\ndef highagg_HiLo = Min(highagg_high - highagg_low, 1.5 * Average(highagg_high - highagg_low, ATRPeriod));\ndef highagg_HRef = if highagg_low &lt;= highagg_high[1]\n    then highagg_high - highagg_close[1]\n    else (highagg_high - highagg_close[1]) - 0.5 * (highagg_low - highagg_high[1]);\ndef highagg_LRef = if highagg_high &gt;= highagg_low[1]\n    then highagg_close[1] - highagg_low\n    else (highagg_close[1] - highagg_low) - 0.5 * (highagg_low[1] - highagg_high);\n\ndef highagg_trueRange;\nswitch (trailType) {\ncase modified:\n    highagg_trueRange = Max(highagg_HiLo, Max(highagg_HRef, highagg_LRef));\ncase unmodified:\n    highagg_trueRange = TrueRange(highagg_high, highagg_close, highagg_low);\n}\ndef highagg_loss = ATRFactor * MovingAverage(averageType, highagg_trueRange, ATRPeriod);\n\ndef highagg_state = {default init, long, short};\ndef highagg_trail;\nswitch (highagg_state[1]) {\ncase init:\n    if (!IsNaN(highagg_loss)) {\n        switch (firstTrade) {\n        case long:\n            highagg_state = highagg_state.long;\n            highagg_trail = highagg_close - highagg_loss;\n        case short:\n            highagg_state = highagg_state.short;\n            highagg_trail = highagg_close + highagg_loss;\n    }\n    } else {\n        highagg_state = highagg_state.init;\n        highagg_trail = Double.NaN;\n    }\ncase long:\n    if (highagg_close &gt; highagg_trail[1]) {\n        highagg_state = highagg_state.long;\n        highagg_trail = Max(highagg_trail[1], highagg_close - highagg_loss);\n    } else {\n        highagg_state = highagg_state.short;\n        highagg_trail = highagg_close + highagg_loss;\n    }\ncase short:\n    if (highagg_close &lt; highagg_trail[1]) {\n        highagg_state = highagg_state.short;\n        highagg_trail = Min(highagg_trail[1], highagg_close + highagg_loss);\n    } else {\n        highagg_state = highagg_state.long;\n        highagg_trail = highagg_close - highagg_loss;\n    }\n}\n\ndef highagg_BuySignal = Crosses(highagg_state == highagg_state.long, 0, CrossingDirection.ABOVE);\ndef highagg_SellSignal = Crosses(highagg_state == highagg_state.short, 0, CrossingDirection.ABOVE);\n\ndef highagg_ex = if highagg_BuySignal then highagg_high else if highagg_SellSignal then highagg_low else if highagg_state == highagg_state.long then Max(highagg_ex[1], highagg_high) else if highagg_state == highagg_state.short then Min(highagg_ex[1], highagg_low) else highagg_ex[1];\n\ndef highagg_TrailingStop = highagg_trail;\ndef highagg_f1 = highagg_ex + (highagg_trail - highagg_ex) * fib1Level / 100;\ndef highagg_f2 = highagg_ex + (highagg_trail - highagg_ex) * fib2Level / 100;\ndef highagg_f3 = highagg_ex + (highagg_trail - highagg_ex) * fib3Level / 100;\ndef highagg_l100 = highagg_trail + 0;\ndef highagg_Fib1 = highagg_f1;\ndef highagg_Fib2 = highagg_f2;\ndef highagg_Fib3 = highagg_f3;\n\ndef highagg_bullAboveZone = highagg_state == highagg_state.long and highagg_close &gt; highagg_Fib1;\ndef highagg_bullZone2 = highagg_state == highagg_state.long and highagg_close &lt;= highagg_Fib1 and highagg_close &gt; highagg_Fib2;\ndef highagg_bullZone3 = highagg_state == highagg_state.long and highagg_close &lt;= highagg_Fib2 and highagg_close &gt; highagg_Fib3;\ndef highagg_bullZone4 = highagg_state == highagg_state.long and highagg_close &lt;= highagg_Fib3 and highagg_close &gt; highagg_TrailingStop;\n\ndef highagg_bearZone2 = highagg_state == highagg_state.short and highagg_close &gt;= highagg_Fib1 and highagg_close &lt; highagg_Fib2;\ndef highagg_bearZone3 = highagg_state == highagg_state.short and highagg_close &gt;= highagg_Fib2 and highagg_close &lt; highagg_Fib3;\ndef highagg_bearZone4 = highagg_state == highagg_state.short and highagg_close &gt;= highagg_Fib3 and highagg_close &lt; highagg_TrailingStop;\n\nAddLabel(yes, Concat(if high_aggperiod &lt; 3600000 then high_aggperiod / 60000 + \&quot;m\&quot; else if high_aggperiod &lt; 86400000 then high_aggperiod / 3600000 + \&quot;h\&quot; else if high_aggperiod &lt; 604800000 then high_aggperiod / 86400000 + \&quot;D\&quot; else if high_aggperiod &lt; 2592000000 then high_aggperiod / 604800000 + \&quot;Wk\&quot; else if high_aggperiod &lt; 31536000000 then high_aggperiod / 2592000000 + \&quot;Mo\&quot; else high_aggperiod / 31536000000 + \&quot;Yr\&quot;, if highagg_bullZone2 then \&quot;: ZONE 2\&quot;  else if highagg_bullZone3 then \&quot;: ZONE 3\&quot;  else if highagg_bullZone4 then \&quot;: ZONE 4\&quot; else if highagg_bearZone2 then \&quot;: ZONE 2\&quot;  else if highagg_bearZone3 then \&quot;: ZONE 3\&quot;  else if highagg_bearZone4 then \&quot;: ZONE 4\&quot; else \&quot;\&quot;), if highagg_state == highagg_state.long then Color.GREEN else Color.RED);\n\ndef action_confirmed;\n\nswitch (current_period_trigger_zone) {\ncase \&quot;Zone 4\&quot;:\n    if (state == state.long and highagg_state == highagg_state.long) {\n        if (bullZone4 and (highagg_bullZone2 or highagg_bullZone3 or highagg_bullZone4)) {\n            action_confirmed = 4;\n        } else {\n            action_confirmed = 0;\n        }\n    } else if (state == state.short and highagg_state == highagg_state.short) {\n        if (bearZone4 and (highagg_bearZone2 or highagg_bearZone3 or highagg_bearZone4)) {\n            action_confirmed = -4;\n        } else {\n            action_confirmed = 0;\n        }\n\n    } else {\n        action_confirmed = 0;\n    }\ncase \&quot;Zone 3\&quot;:\n    if (state == state.long and highagg_state == highagg_state.long) {\n        if ((bullZone3 or bullZone4) and (highagg_bullZone2 or highagg_bullZone3 or highagg_bullZone4)) {\n            action_confirmed = 3;\n        } else {\n            action_confirmed = 0;\n        }\n    } else if (state == state.short and highagg_state == highagg_state.short) {\n        if ((bearZone3 or bearZone4) and (highagg_bearZone2 or highagg_bearZone3 or highagg_bearZone4)) {\n            action_confirmed = -3;\n        } else {\n            action_confirmed = 0;\n        }\n\n    } else {\n        action_confirmed = 0;\n    }\ncase \&quot;Zone 2\&quot;:\n    if (state == state.long and highagg_state == highagg_state.long) {\n        if ((bullZone2 or (bullZone3 or bullZone4)) and (highagg_bullZone2 or highagg_bullZone3 or highagg_bullZone4)) {\n            action_confirmed = 2;\n        } else {\n            action_confirmed = 0;\n        }\n    } else if (state == state.short and highagg_state == highagg_state.short) {\n        if ((bearZone2 or (bearZone3 or bearZone4)) and (highagg_bearZone2 or highagg_bearZone3 or highagg_bearZone4)) {\n            action_confirmed = -2;\n        } else {\n            action_confirmed = 0;\n        }\n\n    } else {\n        action_confirmed = 0;\n    }\n}\n\nAddLabel((action_confirmed and Enable_Zone_Overlap_Notifications), if action_confirmed &lt; -1 then \&quot;SELL CONDITION CONFIRMED - Price entered overlapping zones!\&quot; else if action_confirmed &gt; 1 then \&quot;BUY CONDITION CONFIRMED - Price entered overlapping zones!\&quot; else \&quot;Waiting\&quot;, if action_confirmed &gt; 1 then Color.GREEN else if action_confirmed &lt; -1 then Color.RED else Color.WHITE);\n#Debug Label\n#AddLabel((action_confirmed or always_show_label), action_confirmed, Color.White);\n\n#add plot for scanner\nplot sell_confirm = if (action_confirmed &lt; -1) then high else Double.NaN;\nsell_confirm.SetDefaultColor(Color.WHITE);\nsell_confirm.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);\nsell_confirm.SetLineWeight(1);\nsell_confirm.Hide();\n\nplot buy_confirm = if (action_confirmed &gt; 1) then low else Double.NaN;\nbuy_confirm.SetDefaultColor(Color.WHITE);\nbuy_confirm.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nbuy_confirm.SetLineWeight(1);\nbuy_confirm.Hide();\n\n#add alert\nAlert(sell_confirm and Enable_Zone_Overlap_Notifications, \&quot;SELL CONDITION CONFIRMED - Price entered overlapping zones!\&quot;, Alert.Once, Sound.Ring);\nAlert(buy_confirm and Enable_Zone_Overlap_Notifications, \&quot;BUY CONDITION CONFIRMED - Price entered overlapping zones!\&quot;, Alert.Once, Sound.Ring);&quot;,name=&quot;_0d9d3fe3_219f_35fe_9e38_3ef74c9aaec4&quot;}){alerts:LocalAlertArray1,alerts=@LocalAlertArray1,inputsMap:TreeMap7{^(&quot;high_aggperiod&quot;,&quot;FIFTEEN_MIN&quot;)},inputsMap=@TreeMap7}),+(!%5.CompiledStudy.resolveStudy(@ScriptEssence0){alerts:LocalAlertArray2,alerts=@LocalAlertArray2,inputsMap:TreeMap8{^(&quot;high_aggperiod&quot;,&quot;TWENTY_MIN&quot;)},inputsMap=@TreeMap8}),+(!%5.CompiledStudy.resolveStudy(@ScriptEssence0){alerts:LocalAlertArray3,alerts=@LocalAlertArray3,inputsMap:TreeMap9{^(&quot;high_aggperiod&quot;,&quot;TWO_HOURS&quot;)},inputsMap=@TreeMap9})}},^(#%4.SubgraphId(&quot;Subgraph4&quot;),#%4.SubgraphStorableModel{height=122,storableIndicators{+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# @new\n# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2009-2021\n#\n# Source code isn\'t available.\n\ndeclare lower;\n\ninput price = CLOSE;\ninput length = 20;\ninput nK = 1.5;\ninput nBB = 2.0;\ninput alertLine = 1.0;\n\nplot Histogram = Double.NaN;\nplot VolComp = Double.NaN;\nplot SqueezeAlert = Double.NaN;&quot;,name=&quot;TTM_Squeeze&quot;}){alerts:LocalAlertArray4,alerts=@LocalAlertArray4}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# TMO ((T)rue (M)omentum (O)scilator)\n# Mobius\n# V01.05.2018\n# hint: TMO calculates momentum using the delta of price. Giving a much better picture of trend, tend reversals and divergence than momentum oscillators using price.\n\ndeclare Lower;\n\ninput length = 14;\ninput calcLength = 5;\ninput smoothLength = 3;\n\ndef o = open;\ndef c = close;\ndef data = fold i = 0 to length\n           with s\n           do s + (if c &gt; getValue(o, i)\n                   then 1\n                   else if c &lt; getValue(o, i)\n                        then - 1\n                        else 0);\ndef EMA5 = ExpAverage(data, calcLength);\nplot Main = ExpAverage(EMA5, smoothLength);\nplot Signal = ExpAverage(Main, smoothLength);\n     Main.AssignValueColor(if Main &gt; Signal\n                           then color.green\n                           else color.red);\n     Signal.AssignValueColor(if Main &gt; Signal\n                             then color.green\n                             else color.red);\n     Signal.HideBubble();\n     Signal.HideTitle();\naddCloud(Main, Signal, color.green, color.red);\nplot zero = if isNaN(c) then double.nan else 0;\n     zero.SetDefaultColor(Color.gray);\n     zero.hideBubble();\n     zero.hideTitle();\nplot ob = if isNaN(c) then double.nan else round(length * .7);\n     ob.SetDefaultColor(Color.gray);\n     ob.HideBubble();\n     ob.HideTitle();\nplot os = if isNaN(c) then double.nan else -round(length * .7);\n     os.SetDefaultColor(Color.gray);\n     os.HideBubble();\n     os.HideTitle();\naddCloud(ob, length, color.light_red, color.light_red, no);\naddCloud(-length, os, color.light_green, color.light_green);\n# End Code TMO&quot;,name=&quot;_e764f5bb_0b2a_3136_ab0c_1a950d75f144&quot;}){inputsMap:TreeMap10{^(&quot;length&quot;,25)},inputsMap=@TreeMap10})}})}}" SHARED_USER_SCRIPTS="@v8@owner{chartAggregationPeriods:ChartAggregationPeriodArray0,chartAggregationPeriods=@ChartAggregationPeriodArray0}#java.util.HashMap{^(&quot;_e27c62d0_d912_4ba9_bc30_f429d7c7a111&quot;,&quot;CT_PremarketLevels_by_BRT_v7&quot;),^(&quot;_e6b646b1_181e_401f_8ad2_352a88081c5e&quot;,&quot;CT_Trend_Pivots_w_HH_LL_by_Mobius&quot;),^(&quot;_06c891ec_d069_40f3_9b66_d05649d4a1f7&quot;,&quot;CT_TMO_Lower&quot;),^(&quot;_8073e821_ac50_4d0f_b860_40679520bdf5&quot;,&quot;CT_BTD_STR_Upper_by_UTS&quot;),^(&quot;_0363eeee_7d8b_3a12_a9f1_f2006497c7d2&quot;,&quot;CT_BFLG_SA_Zone_Monitor_Label_w_Alerts_062520&quot;)}" SYMBOL="FEDU" SYMBOL_GROUP="8" VERTICAL="false" VISIBLE="true" WEIGHT="1.0"/>
                  <DASHBOARD VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
                  <LEVEL_II VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
                  <LIVE_NEWS VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
                  <PHASE_SCORES VERTICAL="false" VISIBLE="false" WEIGHT="2.0"/>
                  <TIME_SALES VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
                  <TRADE CONFIGURATION_NAME="SINGLE" ORDER_RULES_SET="STOCK" ORDER_TYPE="LIMIT" OS_AUTO="false" OS_EXPANDED="false" OS_TIF="DAY" QTY="10.0" QTY_STEP="1.0" TEMPLATE="SINGLE" TRADE_BUTTONS="BUY_MKT;SELL_MKT;MULTI_CANCEL;REVERSE;FLAT;SECOND_LINE;QUANTITY;AUTO_SEND;ORDER_SETUP" VISIBLE="false">
                    <OCO_STOP>
                      <TRG_0 TRG_ENBL="true" TRG_LINK="ASK_BID" TRG_OFFSET_MODE="TICK" TRG_OT="STOP" TRG_SETUP="10.0" TRG_TIF="DAY">
                        <OFFSET_PER_SYMBOL AAL="10.0" AAN="10.0" AAPL="10.0" ACN="10.0" ADSK="10.0" AIG="10.0" AL="10.0" AMD="10.0" AMGN="10.0" ANET="10.0" ATH="10.0" AZN="10.0" B="10.0" BA="10.0" BABA="10.0" BAC="10.0" BBBY="10.0" BBY="10.0" BMA="10.0" BMY="10.0" BUD="10.0" BURL="10.0" C="10.0" CAR="10.0" CCL="10.0" CGC="10.0" CHGG="10.0" CHWY="10.0" CLEU="10.0" CNQ="10.0" COUP="10.0" CRM="10.0" CRSP="10.0" CRWD="10.0" CSCO="10.0" CWT="10.0" CXO="10.0" DBX="10.0" DGX="10.0" DOCU="10.0" EBAY="10.0" EDTK="10.0" EIDX="10.0" EOG="10.0" ESS="10.0" ETFC="10.0" ETSY="10.0" FARO="10.0" FEDU="10.0" FIVN="10.0" G="10.0" GKOS="10.0" GLPG="10.0" GS="10.0" ICPT="10.0" INTC="10.0" JBLU="10.0" JCI="10.0" JNUG="10.0" JWN="10.0" KL="10.0" KO="10.0" KOD="10.0" KWEB="10.0" LHX="10.0" LITE="10.0" LYFT="10.0" MCD="10.0" MEDP="10.0" MHK="10.0" MRNA="10.0" MRTN="10.0" MTN="10.0" MU="10.0" NCLH="10.0" NKLA="10.0" NTNX="10.0" NTRS="10.0" NVAX="10.0" NVDA="10.0" OSTK="10.0" OTTR="10.0" PANW="10.0" PDD="10.0" PENN="10.0" PFE="10.0" PHI="10.0" PLNT="10.0" PTON="10.0" QCOM="10.0" QQQ="10.0" RCL="10.0" ROKU="10.0" SHAK="10.0" SNAP="10.0" SPX="10.0" SPXL="10.0" SQ="10.0" STZ="10.0" SYK="10.0" TLRY="10.0" TNDM="10.0" TRGP="10.0" TSLA="10.0" TWTR="10.0" UAL="10.0" ULTA="10.0" V="10.0" VEC="10.0" VEEV="10.0" VIX="10.0" VRSN="10.0" VZ="10.0" W="10.0" WAFU="10.0" WFC="10.0" WYNN="10.0" YETI="10.0" Z="10.0" ZBRA="10.0" ZM="10.0"/>
                      </TRG_0>
                    </OCO_STOP>
                    <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="1.0" TRG_TIF="DAY">
                      <OFFSET_PER_SYMBOL AAL="1.0" AAN="1.0" AAPL="1.0" ACN="1.0" ADSK="1.0" AIG="1.0" AL="1.0" AMD="1.0" AMGN="1.0" ANET="1.0" ATH="1.0" AZN="1.0" B="1.0" BA="1.0" BABA="1.0" BAC="1.0" BBBY="1.0" BBY="1.0" BMA="1.0" BMY="1.0" BUD="1.0" BURL="1.0" C="1.0" CAR="1.0" CCL="1.0" CGC="1.0" CHGG="1.0" CHWY="1.0" CLEU="1.0" CNQ="1.0" COUP="1.0" CRM="1.0" CRSP="1.0" CRWD="1.0" CSCO="1.0" CWT="1.0" CXO="1.0" DBX="1.0" DGX="1.0" DOCU="1.0" EBAY="1.0" EDTK="1.0" EIDX="1.0" EOG="1.0" ESS="1.0" ETFC="1.0" ETSY="1.0" FARO="1.0" FEDU="1.0" FIVN="1.0" G="1.0" GKOS="1.0" GLPG="1.0" GS="1.0" ICPT="1.0" INTC="1.0" JBLU="1.0" JCI="1.0" JNUG="1.0" JWN="1.0" KL="1.0" KO="1.0" KOD="1.0" KWEB="1.0" LHX="1.0" LITE="1.0" LYFT="1.0" MCD="1.0" MEDP="1.0" MHK="1.0" MRNA="1.0" MRTN="1.0" MTN="1.0" MU="1.0" NCLH="1.0" NKLA="1.0" NTNX="1.0" NTRS="1.0" NVAX="1.0" NVDA="1.0" OSTK="1.0" OTTR="1.0" PANW="1.0" PDD="1.0" PENN="1.0" PFE="1.0" PHI="1.0" PLNT="1.0" PTON="1.0" QCOM="1.0" QQQ="1.0" RCL="1.0" ROKU="1.0" SHAK="1.0" SNAP="1.0" SPX="1.0" SPXL="1.0" SQ="1.0" STZ="1.0" SYK="1.0" TLRY="1.0" TNDM="1.0" TRGP="1.0" TSLA="1.0" TWTR="1.0" UAL="1.0" ULTA="1.0" V="1.0" VEC="1.0" VEEV="1.0" VIX="1.0" VRSN="1.0" VZ="1.0" W="1.0" WAFU="1.0" WFC="1.0" WYNN="1.0" YETI="1.0" Z="1.0" ZBRA="1.0" ZM="1.0"/>
                    </TRG_0>
                    <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-1.0" TRG_TIF="DAY">
                      <OFFSET_PER_SYMBOL AAL="-1.0" AAN="-1.0" AAPL="-1.0" ACN="-1.0" ADSK="-1.0" AIG="-1.0" AL="-1.0" AMD="-1.0" AMGN="-1.0" ANET="-1.0" ATH="-1.0" AZN="-1.0" B="-1.0" BA="-1.0" BABA="-1.0" BAC="-1.0" BBBY="-1.0" BBY="-1.0" BMA="-1.0" BMY="-1.0" BUD="-1.0" BURL="-1.0" C="-1.0" CAR="-1.0" CCL="-1.0" CGC="-1.0" CHGG="-1.0" CHWY="-1.0" CLEU="-1.0" CNQ="-1.0" COUP="-1.0" CRM="-1.0" CRSP="-1.0" CRWD="-1.0" CSCO="-1.0" CWT="-1.0" CXO="-1.0" DBX="-1.0" DGX="-1.0" DOCU="-1.0" EBAY="-1.0" EDTK="-1.0" EIDX="-1.0" EOG="-1.0" ESS="-1.0" ETFC="-1.0" ETSY="-1.0" FARO="-1.0" FEDU="-1.0" FIVN="-1.0" G="-1.0" GKOS="-1.0" GLPG="-1.0" GS="-1.0" ICPT="-1.0" INTC="-1.0" JBLU="-1.0" JCI="-1.0" JNUG="-1.0" JWN="-1.0" KL="-1.0" KO="-1.0" KOD="-1.0" KWEB="-1.0" LHX="-1.0" LITE="-1.0" LYFT="-1.0" MCD="-1.0" MEDP="-1.0" MHK="-1.0" MRNA="-1.0" MRTN="-1.0" MTN="-1.0" MU="-1.0" NCLH="-1.0" NKLA="-1.0" NTNX="-1.0" NTRS="-1.0" NVAX="-1.0" NVDA="-1.0" OSTK="-1.0" OTTR="-1.0" PANW="-1.0" PDD="-1.0" PENN="-1.0" PFE="-1.0" PHI="-1.0" PLNT="-1.0" PTON="-1.0" QCOM="-1.0" QQQ="-1.0" RCL="-1.0" ROKU="-1.0" SHAK="-1.0" SNAP="-1.0" SPX="-1.0" SPXL="-1.0" SQ="-1.0" STZ="-1.0" SYK="-1.0" TLRY="-1.0" TNDM="-1.0" TRGP="-1.0" TSLA="-1.0" TWTR="-1.0" UAL="-1.0" ULTA="-1.0" V="-1.0" VEC="-1.0" VEEV="-1.0" VIX="-1.0" VRSN="-1.0" VZ="-1.0" W="-1.0" WAFU="-1.0" WFC="-1.0" WYNN="-1.0" YETI="-1.0" Z="-1.0" ZBRA="-1.0" ZM="-1.0"/>
                    </TRG_1>
                    <_2>
                      <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="2.0" TRG_TIF="DAY">
                        <OFFSET_PER_SYMBOL AAL="2.0" AAN="2.0" AAPL="2.0" ACN="2.0" ADSK="2.0" AIG="2.0" AL="2.0" AMD="2.0" AMGN="2.0" ANET="2.0" ATH="2.0" AZN="2.0" B="2.0" BA="2.0" BABA="2.0" BAC="2.0" BBBY="2.0" BBY="2.0" BMA="2.0" BMY="2.0" BUD="2.0" BURL="2.0" C="2.0" CAR="2.0" CCL="2.0" CGC="2.0" CHGG="2.0" CHWY="2.0" CLEU="2.0" CNQ="2.0" COUP="2.0" CRM="2.0" CRSP="2.0" CRWD="2.0" CSCO="2.0" CWT="2.0" CXO="2.0" DBX="2.0" DGX="2.0" DOCU="2.0" EBAY="2.0" EDTK="2.0" EIDX="2.0" EOG="2.0" ESS="2.0" ETFC="2.0" ETSY="2.0" FARO="2.0" FEDU="2.0" FIVN="2.0" G="2.0" GKOS="2.0" GLPG="2.0" GS="2.0" ICPT="2.0" INTC="2.0" JBLU="2.0" JCI="2.0" JNUG="2.0" JWN="2.0" KL="2.0" KO="2.0" KOD="2.0" KWEB="2.0" LHX="2.0" LITE="2.0" LYFT="2.0" MCD="2.0" MEDP="2.0" MHK="2.0" MRNA="2.0" MRTN="2.0" MTN="2.0" MU="2.0" NCLH="2.0" NKLA="2.0" NTNX="2.0" NTRS="2.0" NVAX="2.0" NVDA="2.0" OSTK="2.0" OTTR="2.0" PANW="2.0" PDD="2.0" PENN="2.0" PFE="2.0" PHI="2.0" PLNT="2.0" PTON="2.0" QCOM="2.0" QQQ="2.0" RCL="2.0" ROKU="2.0" SHAK="2.0" SNAP="2.0" SPX="2.0" SPXL="2.0" SQ="2.0" STZ="2.0" SYK="2.0" TLRY="2.0" TNDM="2.0" TRGP="2.0" TSLA="2.0" TWTR="2.0" UAL="2.0" ULTA="2.0" V="2.0" VEC="2.0" VEEV="2.0" VIX="2.0" VRSN="2.0" VZ="2.0" W="2.0" WAFU="2.0" WFC="2.0" WYNN="2.0" YETI="2.0" Z="2.0" ZBRA="2.0" ZM="2.0"/>
                      </TRG_0>
                      <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-2.0" TRG_TIF="DAY">
                        <OFFSET_PER_SYMBOL AAL="-2.0" AAN="-2.0" AAPL="-2.0" ACN="-2.0" ADSK="-2.0" AIG="-2.0" AL="-2.0" AMD="-2.0" AMGN="-2.0" ANET="-2.0" ATH="-2.0" AZN="-2.0" B="-2.0" BA="-2.0" BABA="-2.0" BAC="-2.0" BBBY="-2.0" BBY="-2.0" BMA="-2.0" BMY="-2.0" BUD="-2.0" BURL="-2.0" C="-2.0" CAR="-2.0" CCL="-2.0" CGC="-2.0" CHGG="-2.0" CHWY="-2.0" CLEU="-2.0" CNQ="-2.0" COUP="-2.0" CRM="-2.0" CRSP="-2.0" CRWD="-2.0" CSCO="-2.0" CWT="-2.0" CXO="-2.0" DBX="-2.0" DGX="-2.0" DOCU="-2.0" EBAY="-2.0" EDTK="-2.0" EIDX="-2.0" EOG="-2.0" ESS="-2.0" ETFC="-2.0" ETSY="-2.0" FARO="-2.0" FEDU="-2.0" FIVN="-2.0" G="-2.0" GKOS="-2.0" GLPG="-2.0" GS="-2.0" ICPT="-2.0" INTC="-2.0" JBLU="-2.0" JCI="-2.0" JNUG="-2.0" JWN="-2.0" KL="-2.0" KO="-2.0" KOD="-2.0" KWEB="-2.0" LHX="-2.0" LITE="-2.0" LYFT="-2.0" MCD="-2.0" MEDP="-2.0" MHK="-2.0" MRNA="-2.0" MRTN="-2.0" MTN="-2.0" MU="-2.0" NCLH="-2.0" NKLA="-2.0" NTNX="-2.0" NTRS="-2.0" NVAX="-2.0" NVDA="-2.0" OSTK="-2.0" OTTR="-2.0" PANW="-2.0" PDD="-2.0" PENN="-2.0" PFE="-2.0" PHI="-2.0" PLNT="-2.0" PTON="-2.0" QCOM="-2.0" QQQ="-2.0" RCL="-2.0" ROKU="-2.0" SHAK="-2.0" SNAP="-2.0" SPX="-2.0" SPXL="-2.0" SQ="-2.0" STZ="-2.0" SYK="-2.0" TLRY="-2.0" TNDM="-2.0" TRGP="-2.0" TSLA="-2.0" TWTR="-2.0" UAL="-2.0" ULTA="-2.0" V="-2.0" VEC="-2.0" VEEV="-2.0" VIX="-2.0" VRSN="-2.0" VZ="-2.0" W="-2.0" WAFU="-2.0" WFC="-2.0" WYNN="-2.0" YETI="-2.0" Z="-2.0" ZBRA="-2.0" ZM="-2.0"/>
                      </TRG_1>
                    </_2>
                    <_3>
                      <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="3.0" TRG_TIF="DAY">
                        <OFFSET_PER_SYMBOL AAL="3.0" AAN="3.0" AAPL="3.0" ACN="3.0" ADSK="3.0" AIG="3.0" AL="3.0" AMD="3.0" AMGN="3.0" ANET="3.0" ATH="3.0" AZN="3.0" B="3.0" BA="3.0" BABA="3.0" BAC="3.0" BBBY="3.0" BBY="3.0" BMA="3.0" BMY="3.0" BUD="3.0" BURL="3.0" C="3.0" CAR="3.0" CCL="3.0" CGC="3.0" CHGG="3.0" CHWY="3.0" CLEU="3.0" CNQ="3.0" COUP="3.0" CRM="3.0" CRSP="3.0" CRWD="3.0" CSCO="3.0" CWT="3.0" CXO="3.0" DBX="3.0" DGX="3.0" DOCU="3.0" EBAY="3.0" EDTK="3.0" EIDX="3.0" EOG="3.0" ESS="3.0" ETFC="3.0" ETSY="3.0" FARO="3.0" FEDU="3.0" FIVN="3.0" G="3.0" GKOS="3.0" GLPG="3.0" GS="3.0" ICPT="3.0" INTC="3.0" JBLU="3.0" JCI="3.0" JNUG="3.0" JWN="3.0" KL="3.0" KO="3.0" KOD="3.0" KWEB="3.0" LHX="3.0" LITE="3.0" LYFT="3.0" MCD="3.0" MEDP="3.0" MHK="3.0" MRNA="3.0" MRTN="3.0" MTN="3.0" MU="3.0" NCLH="3.0" NKLA="3.0" NTNX="3.0" NTRS="3.0" NVAX="3.0" NVDA="3.0" OSTK="3.0" OTTR="3.0" PANW="3.0" PDD="3.0" PENN="3.0" PFE="3.0" PHI="3.0" PLNT="3.0" PTON="3.0" QCOM="3.0" QQQ="3.0" RCL="3.0" ROKU="3.0" SHAK="3.0" SNAP="3.0" SPX="3.0" SPXL="3.0" SQ="3.0" STZ="3.0" SYK="3.0" TLRY="3.0" TNDM="3.0" TRGP="3.0" TSLA="3.0" TWTR="3.0" UAL="3.0" ULTA="3.0" V="3.0" VEC="3.0" VEEV="3.0" VIX="3.0" VRSN="3.0" VZ="3.0" W="3.0" WAFU="3.0" WFC="3.0" WYNN="3.0" YETI="3.0" Z="3.0" ZBRA="3.0" ZM="3.0"/>
                      </TRG_0>
                      <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-3.0" TRG_TIF="DAY">
                        <OFFSET_PER_SYMBOL AAL="-3.0" AAN="-3.0" AAPL="-3.0" ACN="-3.0" ADSK="-3.0" AIG="-3.0" AL="-3.0" AMD="-3.0" AMGN="-3.0" ANET="-3.0" ATH="-3.0" AZN="-3.0" B="-3.0" BA="-3.0" BABA="-3.0" BAC="-3.0" BBBY="-3.0" BBY="-3.0" BMA="-3.0" BMY="-3.0" BUD="-3.0" BURL="-3.0" C="-3.0" CAR="-3.0" CCL="-3.0" CGC="-3.0" CHGG="-3.0" CHWY="-3.0" CLEU="-3.0" CNQ="-3.0" COUP="-3.0" CRM="-3.0" CRSP="-3.0" CRWD="-3.0" CSCO="-3.0" CWT="-3.0" CXO="-3.0" DBX="-3.0" DGX="-3.0" DOCU="-3.0" EBAY="-3.0" EDTK="-3.0" EIDX="-3.0" EOG="-3.0" ESS="-3.0" ETFC="-3.0" ETSY="-3.0" FARO="-3.0" FEDU="-3.0" FIVN="-3.0" G="-3.0" GKOS="-3.0" GLPG="-3.0" GS="-3.0" ICPT="-3.0" INTC="-3.0" JBLU="-3.0" JCI="-3.0" JNUG="-3.0" JWN="-3.0" KL="-3.0" KO="-3.0" KOD="-3.0" KWEB="-3.0" LHX="-3.0" LITE="-3.0" LYFT="-3.0" MCD="-3.0" MEDP="-3.0" MHK="-3.0" MRNA="-3.0" MRTN="-3.0" MTN="-3.0" MU="-3.0" NCLH="-3.0" NKLA="-3.0" NTNX="-3.0" NTRS="-3.0" NVAX="-3.0" NVDA="-3.0" OSTK="-3.0" OTTR="-3.0" PANW="-3.0" PDD="-3.0" PENN="-3.0" PFE="-3.0" PHI="-3.0" PLNT="-3.0" PTON="-3.0" QCOM="-3.0" QQQ="-3.0" RCL="-3.0" ROKU="-3.0" SHAK="-3.0" SNAP="-3.0" SPX="-3.0" SPXL="-3.0" SQ="-3.0" STZ="-3.0" SYK="-3.0" TLRY="-3.0" TNDM="-3.0" TRGP="-3.0" TSLA="-3.0" TWTR="-3.0" UAL="-3.0" ULTA="-3.0" V="-3.0" VEC="-3.0" VEEV="-3.0" VIX="-3.0" VRSN="-3.0" VZ="-3.0" W="-3.0" WAFU="-3.0" WFC="-3.0" WYNN="-3.0" YETI="-3.0" Z="-3.0" ZBRA="-3.0" ZM="-3.0"/>
                      </TRG_1>
                    </_3>
                  </TRADE>
                </GADGET>
              </MODELNODE0>
              <MODELNODE1 COMPOSITENAME="COMPOSITE_1559449022369" NAME="1559449022220" TYPE="LEAF" WEIGHT="0.31974347228584515">
                <GADGET ROWSPANELWEIGHT="1.0" ROWWEIGHT0="1.0" ROWWEIGHT1="1.0" SELECTED_TYPE="CHART" SIDEBAR_IS_ACTIVE="false" SYMBOL="FEDU" SYMBOL_GROUP="8" TRADE_BUTTONS_MIGRATED="true">
                  <ACTIVETRADER VERTICAL="false" VISIBLE="false" WEIGHT="2.0"/>
                  <BIG_BUTTONS VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
                  <CHART CONFIGURATION="@v9@%0:com.devexperts.tos.chartdata,1:com.devexperts.tos.thinkscript.constants,2:com.devexperts.tos.thinkscript.data,3:java.awt,4:com.devexperts.toschart.control.subgraph,5:com.devexperts.toschart.elstudies,6:com.devexperts.toschart.script%owner{chartAggregationPeriods:ChartAggregationPeriodArray0{18::ChartAggregationPeriod0},chartAggregationPeriods=@ChartAggregationPeriodArray0,colors{9::CustomColor0,3::CustomColor1,2::CustomColor2,5::CustomColor3,6::CustomColor4,1::CustomColor5,0::CustomColor6}}#com.devexperts.toschart.core.ChartModel{encodedMixinsState=&quot;{\&quot;common\&quot;:{\&quot;DRAWING_SETS\&quot;:\&quot;{}\&quot;},\&quot;state_props\&quot;:{\&quot;state_type\&quot;:\&quot;REGULAR\&quot;},\&quot;monkey_bars_exp\&quot;:{\&quot;LikefolioMixin\&quot;:\&quot;{\\\&quot;paintingSettings\\\&quot;:{\\\&quot;neutralSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;positiveSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;negativeSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;sentimentSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true}},\\\&quot;shownDivisions\\\&quot;:[],\\\&quot;allDivisions\\\&quot;:[]}\&quot;},\&quot;monkey_bars\&quot;:{},\&quot;seasonality\&quot;:{},\&quot;regular\&quot;:{\&quot;DescriberMixin\&quot;:\&quot;{\\\&quot;visibility\\\&quot;:\\\&quot;HIDE_PANEL\\\&quot;,\\\&quot;studiesMode\\\&quot;:\\\&quot;HIDE_STUDIES\\\&quot;}\&quot;,\&quot;LikefolioMixin\&quot;:\&quot;{\\\&quot;paintingSettings\\\&quot;:{\\\&quot;neutralSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;positiveSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;negativeSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;sentimentSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true}},\\\&quot;shownDivisions\\\&quot;:[],\\\&quot;allDivisions\\\&quot;:[]}\&quot;}}&quot;,encodedPatternsModel=&quot;{\&quot;showPatterns\&quot;:true,\&quot;models\&quot;:[],\&quot;fibModels\&quot;:[]}&quot;,groupId=&quot;default&quot;,styleSettings{chartAggregationSettings.timeAggregationSettings=!com.devexperts.toschart.model.TimeFrameAggregationSettings.createTickOrTimeAggregation(!%0.ChartRange.findByCode(&quot;DAY30&quot;),@ChartAggregationPeriod0),commonStyleSettings{autoCorpActionsExpansion=&lt;T,chartModeName:ChartModeName0,chartModes.!get(@ChartModeName0){chartPaintingType=!java.lang.Enum.valueOf(*%1.ChartPaintingType.class,&quot;BAR&quot;)},colorSettings{backgroundColor=#%2.CustomColor(#%3.Color(20,20,20,255)),barTypeColors{neutralColor=@CustomColor0,upColor=@CustomColor1},candleTrendTypeColors{fillUpColor=#%2.CustomColor(#%3.Color(0,204,204,255)),upColor=#%2.CustomColor(#%3.Color(0,204,204,255))},candleTypeColors.upColor=#%2.CustomColor(#%3.Color(0,204,204,195)),monkeyProfileTypeColors.defaultRowHeight=&lt;F,mpExpandedTypeColors.defaultRowHeight=&lt;F,volumeColor=#%2.CustomColor(#%3.Color(0,101,153,91))},fitArrowsToScreen=&lt;F,fitStudiesToScreen=&lt;F,manualAxisRegulator{maxValue=2.74952381d,minValue=1.1997619d},overlappedVolume=&lt;T,shortCuts{^(&quot;Time Zone&quot;,&lt;F),^(&quot;Show Expiration Friday &quot;,&lt;F),^(&quot;Keep Price Zoom&quot;,&lt;F),^(&quot;enableLeftAxis&quot;,&lt;F),^(&quot;Fit expected price ranges&quot;,&lt;F),^(&quot;emphasizeDigitMPExpanded&quot;,&lt;F),^(&quot;showWicksCandleTrend&quot;,&lt;F),^(&quot;highlightEarnings&quot;,&lt;F),^(&quot;synchronizeCrosshair&quot;,&lt;F),^(&quot;myToolsMode&quot;,&lt;F),^(&quot;seasonalityStyle&quot;,&lt;F),^(&quot;Show Price Subgraph&quot;,&lt;F),^(&quot;closePriceLevel&quot;,&lt;F),^(&quot;Color Volume As Symbol Ticks&quot;,&lt;F),^(&quot;highlightPhantomRBars&quot;,&lt;F),^(&quot;Cross type &quot;,&lt;F),^(&quot;Fit Studies to Screen&quot;,&lt;F),^(&quot;Fit Orders&quot;,&lt;F),^(&quot;Bubbles as Percentage&quot;,&lt;F),^(&quot;hideStatusString&quot;,&lt;F),^(&quot;Show Studies &quot;,&lt;F),^(&quot;showWicksHeikinAshi&quot;,&lt;F),^(&quot;Alerts&quot;,&lt;F),^(&quot;Chart scale&quot;,&lt;F),^(&quot;Fit High/Low&quot;,&lt;F),^(&quot;Orders&quot;,&lt;F),^(&quot;Use Log Scale &quot;,&lt;F),^(&quot;Fit Study Markers to Screen&quot;,&lt;F),^(&quot;Fit Alerts&quot;,&lt;F),^(&quot;Fit patterns&quot;,&lt;F),^(&quot;Percentage View&quot;,&lt;F),^(&quot;Make Auto Zoom &quot;,&lt;F),^(&quot;Show Year Marking Line&quot;,&lt;F),^(&quot;Show Rollover Line&quot;,&lt;F),^(&quot;Show High/Low Bubbles &quot;,&lt;F),^(&quot;Snap mode&quot;,&lt;F),^(&quot;highlightStudies&quot;,&lt;F),^(&quot;Overlapped Volume&quot;,&lt;F),^(&quot;Show Symbol Logo&quot;,&lt;F),^(&quot;Show Last Price Bubble &quot;,&lt;F),^(&quot;emphasizeDigitMP&quot;,&lt;F),^(&quot;Show grid&quot;,&lt;F),^(&quot;showWicksCandle&quot;,&lt;F),^(&quot;Show trades&quot;,&lt;F),^(&quot;highlightSeasons&quot;,&lt;F),^(&quot;Extend Order/Alert Line to Left&quot;,&lt;F)},showBubbles=&lt;F,showDayRollover=&lt;F,showExpFriday=&lt;F,showGrid=&lt;F,showTradeExecution=&lt;T,showYearMarkingLine=&lt;F,step=3.194888178913738d,suppressAutoZoom=&lt;T},forexStyleSettings.shortCuts.^(&quot;Show Volume Subgraph&quot;,&lt;F),futuresStyleSettings{adjustForContractChanges=&lt;T,highlightExtendedHours=&lt;T,shortCuts{^(&quot;adjustForContractChanges&quot;,&lt;F),^(&quot;Show Open Interest&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,&lt;F),^(&quot;showContractChangeEvents&quot;,&lt;F),^(&quot;futures_daily_close_price&quot;,&lt;F),^(&quot;Show Options&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,&lt;F),^(&quot;startAtMarketOpen&quot;,&lt;F)},showOptions=&lt;T},optionsStyleSettings.shortCuts{^(&quot;Show Open Interest&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,&lt;F),^(&quot;Show Theo Price&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,&lt;F),^(&quot;startAtMarketOpen&quot;,&lt;F)},otherStyleSettings{shortCuts{^(&quot;Show Social Sentiment&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,&lt;F),^(&quot;Show Options&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,&lt;F),^(&quot;Show Corporate Actions&quot;,&lt;F),^(&quot;Show CNBC Video&quot;,&lt;F),^(&quot;startAtMarketOpen&quot;,&lt;F),^(&quot;adjustForDividends&quot;,&lt;F)},tradingHoursOnly=&lt;T}},subgraphModels{!get(#%4.SubgraphId(&quot;Symbol&quot;)){height=303,storableIndicators{+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# @new\n# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2011-2021\n#\n# Source code isn\'t available.\n\ninput arrayPeriod = 13;\ninput formationPeriod = 9;\n\nplot \&quot;Buy Formation\&quot; = Double.NaN;\nplot \&quot;Sell Formation\&quot; = Double.NaN;\nplot \&quot;Buy Array\&quot; = Double.NaN;\nplot \&quot;Sell Array\&quot; = Double.NaN;\nplot \&quot;Perfect Buy\&quot; = Double.NaN;\nplot \&quot;Perfect Sell\&quot; = Double.NaN;\nplot \&quot;Perfect Array Buy\&quot; = Double.NaN;\nplot \&quot;Perfect Array Sell\&quot; = Double.NaN;&quot;,name=&quot;SequenceCounter&quot;}){plots{0:{color=#%2.CustomColor(#%3.Color(0,255,51,255))},1:{color=#%2.CustomColor(#%3.Color(255,0,0,255))},2:{color=!%2.CustomColor.findByIndex(&quot;17&quot;),hiding=&lt;T},3:{color=@CustomColor2,hiding=&lt;T},4:{color=#%2.CustomColor(#%3.Color(0,255,0,255))},5:{color=#%2.CustomColor(#%3.Color(255,0,0,255))},6:{color=#%2.CustomColor(#%3.Color(0,255,0,255))},7:{color=#%2.CustomColor(#%3.Color(255,0,0,255))}}}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2017-2021\n#\n\ninput price = close;\ninput length = 9;\ninput displace = 0;\ninput showBreakoutSignals = no;\n\nplot SMA = Average(price[-displace], length);\nplot UpSignal = price crosses above SMA;\nplot DownSignal = price crosses below SMA;\n\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\nSMA.SetDefaultColor(GetColor(1));\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);&quot;,name=&quot;SimpleMovingAvg&quot;}){inputsMap:TreeMap0{^(&quot;length&quot;,200),^(&quot;price&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap0,plots{0:{color=!%2.CustomColor.findByIndex(&quot;13&quot;)}}}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# @new\n# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2010-2021\n#\n\ninput pricePerRowHeightMode = {default AUTOMATIC, TICKSIZE, CUSTOM};\ninput customRowHeight = 1.0;\ninput timePerProfile = {default CHART, MINUTE, HOUR, DAY, WEEK, MONTH, \&quot;OPT EXP\&quot;, BAR};\ninput multiplier = 1;\ninput onExpansion = yes;\ninput profiles = 1000;\ninput showPointOfControl = yes;\ninput showValueArea = yes;\ninput valueAreaPercent = 70;\ninput opacity = 50;\n\ndef period;\ndef yyyymmdd = getYyyyMmDd();\ndef seconds = secondsFromTime(0);\ndef month = getYear() * 12 + getMonth();\ndef day_number = daysFromDate(first(yyyymmdd)) + getDayOfWeek(first(yyyymmdd));\ndef dom = getDayOfMonth(yyyymmdd);\ndef dow = getDayOfWeek(yyyymmdd - dom + 1);\ndef expthismonth = (if dow &gt; 5 then 27 else 20) - dow;\ndef exp_opt = month + (dom &gt; expthismonth);\nswitch (timePerProfile) {\ncase CHART:\n    period = 0;\ncase MINUTE:\n    period = floor(seconds / 60 + day_number * 24 * 60);\ncase HOUR:\n    period = floor(seconds / 3600 + day_number * 24);\ncase DAY:\n    period = countTradingDays(min(first(yyyymmdd), yyyymmdd), yyyymmdd) - 1;\ncase WEEK:\n    period = floor(day_number / 7);\ncase MONTH:\n    period = floor(month - first(month));\ncase \&quot;OPT EXP\&quot;:\n    period = exp_opt - first(exp_opt);\ncase BAR:\n    period = barNumber() - 1;\n}\n\ndef count = CompoundValue(1, if period != period[1] then (count[1] + period - period[1]) % multiplier else count[1], 0);\ndef cond = count &lt; count[1] + period - period[1];\ndef height;\nswitch (pricePerRowHeightMode) {\ncase AUTOMATIC:\n    height = PricePerRow.AUTOMATIC;\ncase TICKSIZE:\n    height = PricePerRow.TICKSIZE;\ncase CUSTOM:\n    height = customRowHeight;\n}\n\nprofile vol = volumeProfile(\&quot;startNewProfile\&quot; = cond, \&quot;onExpansion\&quot; = onExpansion, \&quot;numberOfProfiles\&quot; = profiles, \&quot;pricePerRow\&quot; = height, \&quot;value area percent\&quot; = valueAreaPercent);\ndef con = compoundValue(1, onExpansion, no);\ndef pc = if IsNaN(vol.getPointOfControl()) and con then pc[1] else vol.getPointOfControl();\ndef hVA = if IsNaN(vol.getHighestValueArea()) and con then hVA[1] else vol.getHighestValueArea();\ndef lVA = if IsNaN(vol.getLowestValueArea()) and con then lVA[1] else vol.getLowestValueArea();\n\ndef hProfile = if IsNaN(vol.getHighest()) and con then hProfile[1] else vol.getHighest();\ndef lProfile = if IsNaN(vol.getLowest()) and con then lProfile[1] else vol.getLowest();\ndef plotsDomain = IsNaN(close) == onExpansion;\n\nplot POC = if plotsDomain then pc else Double.NaN;\nplot ProfileHigh = if plotsDomain then hProfile else Double.NaN;\nplot ProfileLow = if plotsDomain then lProfile else Double.NaN;\nplot VAHigh = if plotsDomain then hVA else Double.NaN;\nplot VALow = if plotsDomain then lVA else Double.NaN;\n\nDefineGlobalColor(\&quot;Profile\&quot;, GetColor(1));\nDefineGlobalColor(\&quot;Point Of Control\&quot;, GetColor(5));\nDefineGlobalColor(\&quot;Value Area\&quot;, GetColor(8));\n\nvol.show(globalColor(\&quot;Profile\&quot;), if showPointOfControl then globalColor(\&quot;Point Of Control\&quot;) else color.current, if showValueArea then globalColor(\&quot;Value Area\&quot;) else color.current, opacity);\nPOC.SetDefaultColor(globalColor(\&quot;Point Of Control\&quot;));\nPOC.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nVAHigh.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nVALow.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nVAHigh.SetDefaultColor(globalColor(\&quot;Value Area\&quot;));\nVALow.SetDefaultColor(globalColor(\&quot;Value Area\&quot;));\nProfileHigh.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nProfileLow.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nProfileHigh.SetDefaultColor(GetColor(3));\nProfileLow.SetDefaultColor(GetColor(3));\nProfileHigh.hide();\nProfileLow.hide();&quot;,name=&quot;VolumeProfile&quot;}){inputsMap:TreeMap1{^(&quot;customRowHeight&quot;,20.0d),^(&quot;pricePerRowHeightMode&quot;,&quot;TICKSIZE&quot;),^(&quot;showValueArea&quot;,&lt;F),!get:Integer0(&quot;opacity&quot;)},inputsMap=@TreeMap1,palette{^(&quot;Point Of Control&quot;,#%2.CustomColor(#%3.Color(102,0,204,255))),^(&quot;Profile&quot;,#%2.CustomColor(#%3.Color(0,102,153,255)))},plots{0:{color=#%2.CustomColor(#%3.Color(102,0,204,255)),lineWeight=2},1:{color=@CustomColor3,hiding=&lt;F},2:{color=@CustomColor4,hiding=&lt;F},3:{color=#%2.CustomColor(#%3.Color(255,0,0,255)),lineWeight=2},4:{color=#%2.CustomColor(#%3.Color(0,255,0,255)),lineWeight=2}}}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# Buythedip + Selltherip Indicator (Upper)\n# Assembled by BenTen at UseThinkScript.com\n# Modified by BoarTrades #Boar6916 on discord\n# &lt;NOTES&gt;\n# Based on the concept of \&quot;Synethetic VIX\&quot; by Larry Williams\n# This software is licensed for individual use only.\n# NOT FOR REDISTRIBUTION PRIVATE/CONFIDENTIAL\n# Copyright (c) 2020 useThinkScript LLC\n\ninput length = 22;\ninput BTD_meter = yes;\ninput STR_meter = yes;\ninput arrows = yes;\ninput color_change = yes;\n\n# BTD Plot indicator\ndef BTD_value = ((high - Lowest(close[1], length)) / Lowest(close[1], length)) * 100;\ndef buythedip = BTD_value;\ndef Zeroline = 0;\ndef BTD_condition = buythedip crosses above Zeroline;\n\n# STR Plot indicator\ndef STR_value = ((low - highest(close[1], length)) / highest(close[1], length)) * 100;\ndef selltherip = STR_value;\ndef STR_condition = selltherip crosses below Zeroline;\n\nAddLabel(BTD_meter and yes, Concat(\&quot;BTD = \&quot;, buythedip), color.CYAN);\nAddLabel(STR_meter and yes, Concat(\&quot;STR = \&quot;, selltherip), color.MAGENTA);\n\n# BTD Plot arrows\nplot UpSignal = if arrows and BTD_condition then buythedip else Double.NaN;\nUpSignal.SetDefaultColor(Color.Orange);\nUpSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\n\n# STR Plot arrows\nplot DnSignal = if arrows and STR_condition then selltherip else Double.NaN;\nDnSignal.SetDefaultColor(Color.RED);\nDnSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);&quot;,name=&quot;_acdb191b_7565_36d8_9406_cd07ae712c77&quot;}){plots{0:{color=@CustomColor5,lineWeight=3},1:{color=@CustomColor6,lineWeight=3}}}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2017-2021\n#\n\ninput price = close;\ninput length = 9;\ninput displace = 0;\ninput showBreakoutSignals = no;\n\nplot SMA = Average(price[-displace], length);\nplot UpSignal = price crosses above SMA;\nplot DownSignal = price crosses below SMA;\n\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\nSMA.SetDefaultColor(GetColor(1));\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);&quot;,name=&quot;SimpleMovingAvg&quot;}){inputsMap:TreeMap2{^(&quot;length&quot;,@Integer0),^(&quot;price&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap2,plots{0:{color=@CustomColor2}}}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2017-2021\n#\n\ninput price = close;\ninput length = 9;\ninput displace = 0;\ninput showBreakoutSignals = no;\n\nplot AvgExp = ExpAverage(price[-displace], length);\nplot UpSignal = price crosses above AvgExp;\nplot DownSignal = price crosses below AvgExp;\n\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\nAvgExp.SetDefaultColor(GetColor(1));\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);&quot;,name=&quot;MovAvgExponential&quot;})),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2017-2021\n#\n\ninput price = close;\ninput length = 9;\ninput displace = 0;\ninput showBreakoutSignals = no;\n\nplot AvgExp = ExpAverage(price[-displace], length);\nplot UpSignal = price crosses above AvgExp;\nplot DownSignal = price crosses below AvgExp;\n\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\nAvgExp.SetDefaultColor(GetColor(1));\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);&quot;,name=&quot;MovAvgExponential&quot;}){inputsMap:TreeMap3{^(&quot;length&quot;,20),^(&quot;price&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap3,plots{0:{color=!%2.CustomColor.findByIndex(&quot;12&quot;)}}}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence:ScriptEssence0{body=&quot;# blackFLAG FTS SwingArms\n# StudyName: blackFLAG_Futures_SwingArm_ATRTrail\n# My preferred setting is 28 / 5 FOR ALL TIMEFRAMES\n# Edited by: Jose Azcarate\n# blackFLAG Futures Trading - FOR EDUCATIONAL PURPOSES ONLY\n# TWITTER: @blackflagfuture\n\n# SwingArm Watchlist by [USER=278]@fishstick1229[/USER]\n# * Updated code below is to be used for custom watchlist column only **\n\n#Updated text display by [USER=4199]@Fishbed[/USER]\n\n# Combined Watchlist code to produce in chart label.\n\n# 6/25/20 Updated by Scott K @sirrous\n# Added overlapping swingarm timeframe notifications and alerts\n\n# Set the aggperiod to the timeframe you want the zone to monitor for an overlap.  When the defined aggperiod\'s swingarm overlaps with the chart and price moves into that then overlap you will be notified.\n# Labels only display for higher time periods (ie 15m aggperiod on a 10 min chart.\n# Add the study multiple times and set them to different aggperoids to montior multiple times.\n\n\ninput high_aggperiod = AggregationPeriod.MIN;\ninput Enable_Zone_Overlap_Notifications = no;\ninput current_period_trigger_zone = {default \&quot;Zone 4\&quot;, \&quot;Zone 3\&quot;, \&quot;Zone 2\&quot;};\ninput trailType = {default modified, unmodified};\ninput ATRPeriod = 28;\ninput ATRFactor = 5;\ninput firstTrade = {default long, short};\ninput averageType = AverageType.WILDERS;\n\ninput fib1Level = 61.8;\ninput fib2Level = 78.6;\ninput fib3Level = 88.6;\n\nAssert(ATRFactor &gt; 0, \&quot;\'atr factor\' must be positive: \&quot; + ATRFactor);\n\n## Current Chart Agg Period\n\ndef HiLo = Min(high - low, 1.5 * Average(high - low, ATRPeriod));\ndef HRef = if low &lt;= high[1]\n    then high - close[1]\n    else (high - close[1]) - 0.5 * (low - high[1]);\ndef LRef = if high &gt;= low[1]\n    then close[1] - low\n    else (close[1] - low) - 0.5 * (low[1] - high);\n\ndef trueRange;\nswitch (trailType) {\ncase modified:\n    trueRange = Max(HiLo, Max(HRef, LRef));\ncase unmodified:\n    trueRange = TrueRange(high, close, low);\n}\ndef loss = ATRFactor * MovingAverage(averageType, trueRange, ATRPeriod);\n\ndef state = {default init, long, short};\ndef trail;\nswitch (state[1]) {\ncase init:\n    if (!IsNaN(loss)) {\n        switch (firstTrade) {\n        case long:\n            state = state.long;\n            trail = close - loss;\n        case short:\n            state = state.short;\n            trail = close + loss;\n    }\n    } else {\n        state = state.init;\n        trail = Double.NaN;\n    }\ncase long:\n    if (close &gt; trail[1]) {\n        state = state.long;\n        trail = Max(trail[1], close - loss);\n    } else {\n        state = state.short;\n        trail = close + loss;\n    }\ncase short:\n    if (close &lt; trail[1]) {\n        state = state.short;\n        trail = Min(trail[1], close + loss);\n    } else {\n        state = state.long;\n        trail = close - loss;\n    }\n}\n\ndef BuySignal = Crosses(state == state.long, 0, CrossingDirection.ABOVE);\ndef SellSignal = Crosses(state == state.short, 0, CrossingDirection.ABOVE);\n\ndef ex = if BuySignal then high else if SellSignal then low else if state == state.long then Max(ex[1], high) else if state == state.short then Min(ex[1], low) else ex[1];\n\ndef TrailingStop = trail;\ndef f1 = ex + (trail - ex) * fib1Level / 100;\ndef f2 = ex + (trail - ex) * fib2Level / 100;\ndef f3 = ex + (trail - ex) * fib3Level / 100;\ndef l100 = trail + 0;\ndef Fib1 = f1;\ndef Fib2 = f2;\ndef Fib3 = f3;\n\ndef bullAboveZone = state == state.long and close &gt; Fib1;\ndef bullZone2 = state == state.long and close &lt;= Fib1 and close &gt; Fib2;\ndef bullZone3 = state == state.long and close &lt;= Fib2 and close &gt; Fib3;\ndef bullZone4 = state == state.long and close &lt;= Fib3 and close &gt; TrailingStop;\n\ndef bearZone2 = state == state.short and close &gt;= Fib1 and close &lt; Fib2;\ndef bearZone3 = state == state.short and close &gt;= Fib2 and close &lt; Fib3;\ndef bearZone4 = state == state.short and close &gt;= Fib3 and close &lt; TrailingStop;\n\n## High Agg Period\n\ndef highagg_high = high(period = high_aggperiod);\ndef highagg_low = low(period = high_aggperiod);\ndef highagg_close = close(period = high_aggperiod);\n\ndef highagg_HiLo = Min(highagg_high - highagg_low, 1.5 * Average(highagg_high - highagg_low, ATRPeriod));\ndef highagg_HRef = if highagg_low &lt;= highagg_high[1]\n    then highagg_high - highagg_close[1]\n    else (highagg_high - highagg_close[1]) - 0.5 * (highagg_low - highagg_high[1]);\ndef highagg_LRef = if highagg_high &gt;= highagg_low[1]\n    then highagg_close[1] - highagg_low\n    else (highagg_close[1] - highagg_low) - 0.5 * (highagg_low[1] - highagg_high);\n\ndef highagg_trueRange;\nswitch (trailType) {\ncase modified:\n    highagg_trueRange = Max(highagg_HiLo, Max(highagg_HRef, highagg_LRef));\ncase unmodified:\n    highagg_trueRange = TrueRange(highagg_high, highagg_close, highagg_low);\n}\ndef highagg_loss = ATRFactor * MovingAverage(averageType, highagg_trueRange, ATRPeriod);\n\ndef highagg_state = {default init, long, short};\ndef highagg_trail;\nswitch (highagg_state[1]) {\ncase init:\n    if (!IsNaN(highagg_loss)) {\n        switch (firstTrade) {\n        case long:\n            highagg_state = highagg_state.long;\n            highagg_trail = highagg_close - highagg_loss;\n        case short:\n            highagg_state = highagg_state.short;\n            highagg_trail = highagg_close + highagg_loss;\n    }\n    } else {\n        highagg_state = highagg_state.init;\n        highagg_trail = Double.NaN;\n    }\ncase long:\n    if (highagg_close &gt; highagg_trail[1]) {\n        highagg_state = highagg_state.long;\n        highagg_trail = Max(highagg_trail[1], highagg_close - highagg_loss);\n    } else {\n        highagg_state = highagg_state.short;\n        highagg_trail = highagg_close + highagg_loss;\n    }\ncase short:\n    if (highagg_close &lt; highagg_trail[1]) {\n        highagg_state = highagg_state.short;\n        highagg_trail = Min(highagg_trail[1], highagg_close + highagg_loss);\n    } else {\n        highagg_state = highagg_state.long;\n        highagg_trail = highagg_close - highagg_loss;\n    }\n}\n\ndef highagg_BuySignal = Crosses(highagg_state == highagg_state.long, 0, CrossingDirection.ABOVE);\ndef highagg_SellSignal = Crosses(highagg_state == highagg_state.short, 0, CrossingDirection.ABOVE);\n\ndef highagg_ex = if highagg_BuySignal then highagg_high else if highagg_SellSignal then highagg_low else if highagg_state == highagg_state.long then Max(highagg_ex[1], highagg_high) else if highagg_state == highagg_state.short then Min(highagg_ex[1], highagg_low) else highagg_ex[1];\n\ndef highagg_TrailingStop = highagg_trail;\ndef highagg_f1 = highagg_ex + (highagg_trail - highagg_ex) * fib1Level / 100;\ndef highagg_f2 = highagg_ex + (highagg_trail - highagg_ex) * fib2Level / 100;\ndef highagg_f3 = highagg_ex + (highagg_trail - highagg_ex) * fib3Level / 100;\ndef highagg_l100 = highagg_trail + 0;\ndef highagg_Fib1 = highagg_f1;\ndef highagg_Fib2 = highagg_f2;\ndef highagg_Fib3 = highagg_f3;\n\ndef highagg_bullAboveZone = highagg_state == highagg_state.long and highagg_close &gt; highagg_Fib1;\ndef highagg_bullZone2 = highagg_state == highagg_state.long and highagg_close &lt;= highagg_Fib1 and highagg_close &gt; highagg_Fib2;\ndef highagg_bullZone3 = highagg_state == highagg_state.long and highagg_close &lt;= highagg_Fib2 and highagg_close &gt; highagg_Fib3;\ndef highagg_bullZone4 = highagg_state == highagg_state.long and highagg_close &lt;= highagg_Fib3 and highagg_close &gt; highagg_TrailingStop;\n\ndef highagg_bearZone2 = highagg_state == highagg_state.short and highagg_close &gt;= highagg_Fib1 and highagg_close &lt; highagg_Fib2;\ndef highagg_bearZone3 = highagg_state == highagg_state.short and highagg_close &gt;= highagg_Fib2 and highagg_close &lt; highagg_Fib3;\ndef highagg_bearZone4 = highagg_state == highagg_state.short and highagg_close &gt;= highagg_Fib3 and highagg_close &lt; highagg_TrailingStop;\n\nAddLabel(yes, Concat(if high_aggperiod &lt; 3600000 then high_aggperiod / 60000 + \&quot;m\&quot; else if high_aggperiod &lt; 86400000 then high_aggperiod / 3600000 + \&quot;h\&quot; else if high_aggperiod &lt; 604800000 then high_aggperiod / 86400000 + \&quot;D\&quot; else if high_aggperiod &lt; 2592000000 then high_aggperiod / 604800000 + \&quot;Wk\&quot; else if high_aggperiod &lt; 31536000000 then high_aggperiod / 2592000000 + \&quot;Mo\&quot; else high_aggperiod / 31536000000 + \&quot;Yr\&quot;, if highagg_bullZone2 then \&quot;: ZONE 2\&quot;  else if highagg_bullZone3 then \&quot;: ZONE 3\&quot;  else if highagg_bullZone4 then \&quot;: ZONE 4\&quot; else if highagg_bearZone2 then \&quot;: ZONE 2\&quot;  else if highagg_bearZone3 then \&quot;: ZONE 3\&quot;  else if highagg_bearZone4 then \&quot;: ZONE 4\&quot; else \&quot;\&quot;), if highagg_state == highagg_state.long then Color.GREEN else Color.RED);\n\ndef action_confirmed;\n\nswitch (current_period_trigger_zone) {\ncase \&quot;Zone 4\&quot;:\n    if (state == state.long and highagg_state == highagg_state.long) {\n        if (bullZone4 and (highagg_bullZone2 or highagg_bullZone3 or highagg_bullZone4)) {\n            action_confirmed = 4;\n        } else {\n            action_confirmed = 0;\n        }\n    } else if (state == state.short and highagg_state == highagg_state.short) {\n        if (bearZone4 and (highagg_bearZone2 or highagg_bearZone3 or highagg_bearZone4)) {\n            action_confirmed = -4;\n        } else {\n            action_confirmed = 0;\n        }\n\n    } else {\n        action_confirmed = 0;\n    }\ncase \&quot;Zone 3\&quot;:\n    if (state == state.long and highagg_state == highagg_state.long) {\n        if ((bullZone3 or bullZone4) and (highagg_bullZone2 or highagg_bullZone3 or highagg_bullZone4)) {\n            action_confirmed = 3;\n        } else {\n            action_confirmed = 0;\n        }\n    } else if (state == state.short and highagg_state == highagg_state.short) {\n        if ((bearZone3 or bearZone4) and (highagg_bearZone2 or highagg_bearZone3 or highagg_bearZone4)) {\n            action_confirmed = -3;\n        } else {\n            action_confirmed = 0;\n        }\n\n    } else {\n        action_confirmed = 0;\n    }\ncase \&quot;Zone 2\&quot;:\n    if (state == state.long and highagg_state == highagg_state.long) {\n        if ((bullZone2 or (bullZone3 or bullZone4)) and (highagg_bullZone2 or highagg_bullZone3 or highagg_bullZone4)) {\n            action_confirmed = 2;\n        } else {\n            action_confirmed = 0;\n        }\n    } else if (state == state.short and highagg_state == highagg_state.short) {\n        if ((bearZone2 or (bearZone3 or bearZone4)) and (highagg_bearZone2 or highagg_bearZone3 or highagg_bearZone4)) {\n            action_confirmed = -2;\n        } else {\n            action_confirmed = 0;\n        }\n\n    } else {\n        action_confirmed = 0;\n    }\n}\n\nAddLabel((action_confirmed and Enable_Zone_Overlap_Notifications), if action_confirmed &lt; -1 then \&quot;SELL CONDITION CONFIRMED - Price entered overlapping zones!\&quot; else if action_confirmed &gt; 1 then \&quot;BUY CONDITION CONFIRMED - Price entered overlapping zones!\&quot; else \&quot;Waiting\&quot;, if action_confirmed &gt; 1 then Color.GREEN else if action_confirmed &lt; -1 then Color.RED else Color.WHITE);\n#Debug Label\n#AddLabel((action_confirmed or always_show_label), action_confirmed, Color.White);\n\n#add plot for scanner\nplot sell_confirm = if (action_confirmed &lt; -1) then high else Double.NaN;\nsell_confirm.SetDefaultColor(Color.WHITE);\nsell_confirm.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);\nsell_confirm.SetLineWeight(1);\nsell_confirm.Hide();\n\nplot buy_confirm = if (action_confirmed &gt; 1) then low else Double.NaN;\nbuy_confirm.SetDefaultColor(Color.WHITE);\nbuy_confirm.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nbuy_confirm.SetLineWeight(1);\nbuy_confirm.Hide();\n\n#add alert\nAlert(sell_confirm and Enable_Zone_Overlap_Notifications, \&quot;SELL CONDITION CONFIRMED - Price entered overlapping zones!\&quot;, Alert.Once, Sound.Ring);\nAlert(buy_confirm and Enable_Zone_Overlap_Notifications, \&quot;BUY CONDITION CONFIRMED - Price entered overlapping zones!\&quot;, Alert.Once, Sound.Ring);&quot;,name=&quot;_823eeba3_0f87_31f8_9c91_a146f75edd1b&quot;}){alerts:LocalAlertArray0,alerts=@LocalAlertArray0,inputsMap:TreeMap4{^(&quot;high_aggperiod&quot;,&quot;THIRTY_MIN&quot;)},inputsMap=@TreeMap4}),+(!%5.CompiledStudy.resolveStudy(@ScriptEssence0){alerts:LocalAlertArray1,alerts=@LocalAlertArray1,inputsMap:TreeMap5{^(&quot;high_aggperiod&quot;,&quot;HOUR&quot;)},inputsMap=@TreeMap5}),+(!%5.CompiledStudy.resolveStudy(@ScriptEssence0){alerts:LocalAlertArray2,alerts=@LocalAlertArray2,inputsMap:TreeMap6{^(&quot;high_aggperiod&quot;,&quot;FOUR_HOURS&quot;)},inputsMap=@TreeMap6}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;plot Data = close;\nplot priceLine = highestAll(if isNan(close[-1]) and !isNAN(close) then close else double.nan);&quot;,name=&quot;_2c1dfba0_1c0a_3978_bf1d_074c015cc785&quot;}){plots{0:{hiding=&lt;T},1:{color=#%2.CustomColor(#%3.Color(0,255,0,255)),lineStyle=3}}})}},^(#%4.SubgraphId(&quot;Subgraph4&quot;),#%4.SubgraphStorableModel{height=122,storableIndicators{+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# @new\n# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2009-2021\n#\n# Source code isn\'t available.\n\ndeclare lower;\n\ninput price = CLOSE;\ninput length = 20;\ninput nK = 1.5;\ninput nBB = 2.0;\ninput alertLine = 1.0;\n\nplot Histogram = Double.NaN;\nplot VolComp = Double.NaN;\nplot SqueezeAlert = Double.NaN;&quot;,name=&quot;TTM_Squeeze&quot;}){alerts:LocalAlertArray3,alerts=@LocalAlertArray3}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# TMO ((T)rue (M)omentum (O)scilator)\n# Mobius\n# V01.05.2018\n# hint: TMO calculates momentum using the delta of price. Giving a much better picture of trend, tend reversals and divergence than momentum oscillators using price.\n\ndeclare Lower;\n\ninput length = 14;\ninput calcLength = 5;\ninput smoothLength = 3;\n\ndef o = open;\ndef c = close;\ndef data = fold i = 0 to length\n           with s\n           do s + (if c &gt; getValue(o, i)\n                   then 1\n                   else if c &lt; getValue(o, i)\n                        then - 1\n                        else 0);\ndef EMA5 = ExpAverage(data, calcLength);\nplot Main = ExpAverage(EMA5, smoothLength);\nplot Signal = ExpAverage(Main, smoothLength);\n     Main.AssignValueColor(if Main &gt; Signal\n                           then color.green\n                           else color.red);\n     Signal.AssignValueColor(if Main &gt; Signal\n                             then color.green\n                             else color.red);\n     Signal.HideBubble();\n     Signal.HideTitle();\naddCloud(Main, Signal, color.green, color.red);\nplot zero = if isNaN(c) then double.nan else 0;\n     zero.SetDefaultColor(Color.gray);\n     zero.hideBubble();\n     zero.hideTitle();\nplot ob = if isNaN(c) then double.nan else round(length * .7);\n     ob.SetDefaultColor(Color.gray);\n     ob.HideBubble();\n     ob.HideTitle();\nplot os = if isNaN(c) then double.nan else -round(length * .7);\n     os.SetDefaultColor(Color.gray);\n     os.HideBubble();\n     os.HideTitle();\naddCloud(ob, length, color.light_red, color.light_red, no);\naddCloud(-length, os, color.light_green, color.light_green);\n# End Code TMO&quot;,name=&quot;_e764f5bb_0b2a_3136_ab0c_1a950d75f144&quot;}){inputsMap:TreeMap7{^(&quot;length&quot;,25)},inputsMap=@TreeMap7})}})}}" SHARED_USER_SCRIPTS="@v8@owner{chartAggregationPeriods:ChartAggregationPeriodArray0,chartAggregationPeriods=@ChartAggregationPeriodArray0}#java.util.HashMap{^(&quot;_fd44f96a_9d06_4c34_b59d_ff3eec59b963&quot;,&quot;CT_BFLG_Scan_Zone_Monitor_Label_w_Alerts_by_Scott_AKA_Xzeryn&quot;),^(&quot;_06c891ec_d069_40f3_9b66_d05649d4a1f7&quot;,&quot;CT_TMO_Lower&quot;),^(&quot;_52a101b8_1dfe_3727_8462_9f6545583b14&quot;,&quot;CT_PriceLine&quot;),^(&quot;_8073e821_ac50_4d0f_b860_40679520bdf5&quot;,&quot;CT_BTD_STR_Upper_by_UTS&quot;)}" SYMBOL="FEDU" SYMBOL_GROUP="8" VERTICAL="false" VISIBLE="true" WEIGHT="1.0"/>
                  <DASHBOARD VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
                  <LEVEL_II VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
                  <LIVE_NEWS VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
                  <PHASE_SCORES VERTICAL="false" VISIBLE="false" WEIGHT="2.0"/>
                  <TIME_SALES VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
                  <TRADE CONFIGURATION_NAME="SINGLE" ORDER_RULES_SET="STOCK" ORDER_TYPE="LIMIT" OS_AUTO="false" OS_EXPANDED="false" OS_TIF="DAY" QTY="10.0" QTY_STEP="1.0" TEMPLATE="SINGLE" TRADE_BUTTONS="BUY_MKT;SELL_MKT;MULTI_CANCEL;REVERSE;FLAT;SECOND_LINE;QUANTITY;AUTO_SEND;ORDER_SETUP" VISIBLE="false">
                    <OCO_STOP>
                      <TRG_0 TRG_ENBL="true" TRG_LINK="ASK_BID" TRG_OFFSET_MODE="TICK" TRG_OT="STOP" TRG_SETUP="10.0" TRG_TIF="DAY">
                        <OFFSET_PER_SYMBOL AAL="10.0" AAN="10.0" AAPL="10.0" ACN="10.0" ADSK="10.0" AIG="10.0" AL="10.0" AMD="10.0" AMGN="10.0" ANET="10.0" ATH="10.0" AZN="10.0" B="10.0" BA="10.0" BABA="10.0" BAC="10.0" BBBY="10.0" BBY="10.0" BMA="10.0" BMY="10.0" BUD="10.0" BURL="10.0" C="10.0" CAR="10.0" CCL="10.0" CGC="10.0" CHGG="10.0" CHWY="10.0" CLEU="10.0" CNQ="10.0" COMP="10.0" COUP="10.0" CRM="10.0" CRSP="10.0" CRWD="10.0" CSCO="10.0" CWT="10.0" CXO="10.0" DBX="10.0" DGX="10.0" DOCU="10.0" EBAY="10.0" EDTK="10.0" EIDX="10.0" EOG="10.0" ESS="10.0" ETFC="10.0" ETSY="10.0" FARO="10.0" FEDU="10.0" FIVN="10.0" G="10.0" GKOS="10.0" GLPG="10.0" GS="10.0" ICPT="10.0" INTC="10.0" JBLU="10.0" JCI="10.0" JNUG="10.0" JWN="10.0" KL="10.0" KO="10.0" KOD="10.0" KWEB="10.0" LHX="10.0" LITE="10.0" LYFT="10.0" MCD="10.0" MEDP="10.0" MHK="10.0" MRNA="10.0" MRTN="10.0" MTN="10.0" MU="10.0" NCLH="10.0" NKLA="10.0" NTNX="10.0" NTRS="10.0" NVAX="10.0" NVDA="10.0" OSTK="10.0" OTTR="10.0" PANW="10.0" PDD="10.0" PENN="10.0" PFE="10.0" PHI="10.0" PLNT="10.0" PTON="10.0" QCOM="10.0" RCL="10.0" ROKU="10.0" SHAK="10.0" SNAP="10.0" SPXL="10.0" SPY="10.0" SQ="10.0" STZ="10.0" SYK="10.0" TLRY="10.0" TNDM="10.0" TRGP="10.0" TSLA="10.0" TWTR="10.0" UAL="10.0" ULTA="10.0" V="10.0" VEC="10.0" VEEV="10.0" VIX="10.0" VRSN="10.0" VZ="10.0" W="10.0" WAFU="10.0" WFC="10.0" WYNN="10.0" YETI="10.0" Z="10.0" ZBRA="10.0" ZM="10.0"/>
                      </TRG_0>
                    </OCO_STOP>
                    <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="1.0" TRG_TIF="DAY">
                      <OFFSET_PER_SYMBOL AAL="1.0" AAN="1.0" AAPL="1.0" ACN="1.0" ADSK="1.0" AIG="1.0" AL="1.0" AMD="1.0" AMGN="1.0" ANET="1.0" ATH="1.0" AZN="1.0" B="1.0" BA="1.0" BABA="1.0" BAC="1.0" BBBY="1.0" BBY="1.0" BMA="1.0" BMY="1.0" BUD="1.0" BURL="1.0" C="1.0" CAR="1.0" CCL="1.0" CGC="1.0" CHGG="1.0" CHWY="1.0" CLEU="1.0" CNQ="1.0" COMP="1.0" COUP="1.0" CRM="1.0" CRSP="1.0" CRWD="1.0" CSCO="1.0" CWT="1.0" CXO="1.0" DBX="1.0" DGX="1.0" DOCU="1.0" EBAY="1.0" EDTK="1.0" EIDX="1.0" EOG="1.0" ESS="1.0" ETFC="1.0" ETSY="1.0" FARO="1.0" FEDU="1.0" FIVN="1.0" G="1.0" GKOS="1.0" GLPG="1.0" GS="1.0" ICPT="1.0" INTC="1.0" JBLU="1.0" JCI="1.0" JNUG="1.0" JWN="1.0" KL="1.0" KO="1.0" KOD="1.0" KWEB="1.0" LHX="1.0" LITE="1.0" LYFT="1.0" MCD="1.0" MEDP="1.0" MHK="1.0" MRNA="1.0" MRTN="1.0" MTN="1.0" MU="1.0" NCLH="1.0" NKLA="1.0" NTNX="1.0" NTRS="1.0" NVAX="1.0" NVDA="1.0" OSTK="1.0" OTTR="1.0" PANW="1.0" PDD="1.0" PENN="1.0" PFE="1.0" PHI="1.0" PLNT="1.0" PTON="1.0" QCOM="1.0" RCL="1.0" ROKU="1.0" SHAK="1.0" SNAP="1.0" SPXL="1.0" SPY="1.0" SQ="1.0" STZ="1.0" SYK="1.0" TLRY="1.0" TNDM="1.0" TRGP="1.0" TSLA="1.0" TWTR="1.0" UAL="1.0" ULTA="1.0" V="1.0" VEC="1.0" VEEV="1.0" VIX="1.0" VRSN="1.0" VZ="1.0" W="1.0" WAFU="1.0" WFC="1.0" WYNN="1.0" YETI="1.0" Z="1.0" ZBRA="1.0" ZM="1.0"/>
                    </TRG_0>
                    <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-1.0" TRG_TIF="DAY">
                      <OFFSET_PER_SYMBOL AAL="-1.0" AAN="-1.0" AAPL="-1.0" ACN="-1.0" ADSK="-1.0" AIG="-1.0" AL="-1.0" AMD="-1.0" AMGN="-1.0" ANET="-1.0" ATH="-1.0" AZN="-1.0" B="-1.0" BA="-1.0" BABA="-1.0" BAC="-1.0" BBBY="-1.0" BBY="-1.0" BMA="-1.0" BMY="-1.0" BUD="-1.0" BURL="-1.0" C="-1.0" CAR="-1.0" CCL="-1.0" CGC="-1.0" CHGG="-1.0" CHWY="-1.0" CLEU="-1.0" CNQ="-1.0" COMP="-1.0" COUP="-1.0" CRM="-1.0" CRSP="-1.0" CRWD="-1.0" CSCO="-1.0" CWT="-1.0" CXO="-1.0" DBX="-1.0" DGX="-1.0" DOCU="-1.0" EBAY="-1.0" EDTK="-1.0" EIDX="-1.0" EOG="-1.0" ESS="-1.0" ETFC="-1.0" ETSY="-1.0" FARO="-1.0" FEDU="-1.0" FIVN="-1.0" G="-1.0" GKOS="-1.0" GLPG="-1.0" GS="-1.0" ICPT="-1.0" INTC="-1.0" JBLU="-1.0" JCI="-1.0" JNUG="-1.0" JWN="-1.0" KL="-1.0" KO="-1.0" KOD="-1.0" KWEB="-1.0" LHX="-1.0" LITE="-1.0" LYFT="-1.0" MCD="-1.0" MEDP="-1.0" MHK="-1.0" MRNA="-1.0" MRTN="-1.0" MTN="-1.0" MU="-1.0" NCLH="-1.0" NKLA="-1.0" NTNX="-1.0" NTRS="-1.0" NVAX="-1.0" NVDA="-1.0" OSTK="-1.0" OTTR="-1.0" PANW="-1.0" PDD="-1.0" PENN="-1.0" PFE="-1.0" PHI="-1.0" PLNT="-1.0" PTON="-1.0" QCOM="-1.0" RCL="-1.0" ROKU="-1.0" SHAK="-1.0" SNAP="-1.0" SPXL="-1.0" SPY="-1.0" SQ="-1.0" STZ="-1.0" SYK="-1.0" TLRY="-1.0" TNDM="-1.0" TRGP="-1.0" TSLA="-1.0" TWTR="-1.0" UAL="-1.0" ULTA="-1.0" V="-1.0" VEC="-1.0" VEEV="-1.0" VIX="-1.0" VRSN="-1.0" VZ="-1.0" W="-1.0" WAFU="-1.0" WFC="-1.0" WYNN="-1.0" YETI="-1.0" Z="-1.0" ZBRA="-1.0" ZM="-1.0"/>
                    </TRG_1>
                    <_2>
                      <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="2.0" TRG_TIF="DAY">
                        <OFFSET_PER_SYMBOL AAL="2.0" AAN="2.0" AAPL="2.0" ACN="2.0" ADSK="2.0" AIG="2.0" AL="2.0" AMD="2.0" AMGN="2.0" ANET="2.0" ATH="2.0" AZN="2.0" B="2.0" BA="2.0" BABA="2.0" BAC="2.0" BBBY="2.0" BBY="2.0" BMA="2.0" BMY="2.0" BUD="2.0" BURL="2.0" C="2.0" CAR="2.0" CCL="2.0" CGC="2.0" CHGG="2.0" CHWY="2.0" CLEU="2.0" CNQ="2.0" COMP="2.0" COUP="2.0" CRM="2.0" CRSP="2.0" CRWD="2.0" CSCO="2.0" CWT="2.0" CXO="2.0" DBX="2.0" DGX="2.0" DOCU="2.0" EBAY="2.0" EDTK="2.0" EIDX="2.0" EOG="2.0" ESS="2.0" ETFC="2.0" ETSY="2.0" FARO="2.0" FEDU="2.0" FIVN="2.0" G="2.0" GKOS="2.0" GLPG="2.0" GS="2.0" ICPT="2.0" INTC="2.0" JBLU="2.0" JCI="2.0" JNUG="2.0" JWN="2.0" KL="2.0" KO="2.0" KOD="2.0" KWEB="2.0" LHX="2.0" LITE="2.0" LYFT="2.0" MCD="2.0" MEDP="2.0" MHK="2.0" MRNA="2.0" MRTN="2.0" MTN="2.0" MU="2.0" NCLH="2.0" NKLA="2.0" NTNX="2.0" NTRS="2.0" NVAX="2.0" NVDA="2.0" OSTK="2.0" OTTR="2.0" PANW="2.0" PDD="2.0" PENN="2.0" PFE="2.0" PHI="2.0" PLNT="2.0" PTON="2.0" QCOM="2.0" RCL="2.0" ROKU="2.0" SHAK="2.0" SNAP="2.0" SPXL="2.0" SPY="2.0" SQ="2.0" STZ="2.0" SYK="2.0" TLRY="2.0" TNDM="2.0" TRGP="2.0" TSLA="2.0" TWTR="2.0" UAL="2.0" ULTA="2.0" V="2.0" VEC="2.0" VEEV="2.0" VIX="2.0" VRSN="2.0" VZ="2.0" W="2.0" WAFU="2.0" WFC="2.0" WYNN="2.0" YETI="2.0" Z="2.0" ZBRA="2.0" ZM="2.0"/>
                      </TRG_0>
                      <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-2.0" TRG_TIF="DAY">
                        <OFFSET_PER_SYMBOL AAL="-2.0" AAN="-2.0" AAPL="-2.0" ACN="-2.0" ADSK="-2.0" AIG="-2.0" AL="-2.0" AMD="-2.0" AMGN="-2.0" ANET="-2.0" ATH="-2.0" AZN="-2.0" B="-2.0" BA="-2.0" BABA="-2.0" BAC="-2.0" BBBY="-2.0" BBY="-2.0" BMA="-2.0" BMY="-2.0" BUD="-2.0" BURL="-2.0" C="-2.0" CAR="-2.0" CCL="-2.0" CGC="-2.0" CHGG="-2.0" CHWY="-2.0" CLEU="-2.0" CNQ="-2.0" COMP="-2.0" COUP="-2.0" CRM="-2.0" CRSP="-2.0" CRWD="-2.0" CSCO="-2.0" CWT="-2.0" CXO="-2.0" DBX="-2.0" DGX="-2.0" DOCU="-2.0" EBAY="-2.0" EDTK="-2.0" EIDX="-2.0" EOG="-2.0" ESS="-2.0" ETFC="-2.0" ETSY="-2.0" FARO="-2.0" FEDU="-2.0" FIVN="-2.0" G="-2.0" GKOS="-2.0" GLPG="-2.0" GS="-2.0" ICPT="-2.0" INTC="-2.0" JBLU="-2.0" JCI="-2.0" JNUG="-2.0" JWN="-2.0" KL="-2.0" KO="-2.0" KOD="-2.0" KWEB="-2.0" LHX="-2.0" LITE="-2.0" LYFT="-2.0" MCD="-2.0" MEDP="-2.0" MHK="-2.0" MRNA="-2.0" MRTN="-2.0" MTN="-2.0" MU="-2.0" NCLH="-2.0" NKLA="-2.0" NTNX="-2.0" NTRS="-2.0" NVAX="-2.0" NVDA="-2.0" OSTK="-2.0" OTTR="-2.0" PANW="-2.0" PDD="-2.0" PENN="-2.0" PFE="-2.0" PHI="-2.0" PLNT="-2.0" PTON="-2.0" QCOM="-2.0" RCL="-2.0" ROKU="-2.0" SHAK="-2.0" SNAP="-2.0" SPXL="-2.0" SPY="-2.0" SQ="-2.0" STZ="-2.0" SYK="-2.0" TLRY="-2.0" TNDM="-2.0" TRGP="-2.0" TSLA="-2.0" TWTR="-2.0" UAL="-2.0" ULTA="-2.0" V="-2.0" VEC="-2.0" VEEV="-2.0" VIX="-2.0" VRSN="-2.0" VZ="-2.0" W="-2.0" WAFU="-2.0" WFC="-2.0" WYNN="-2.0" YETI="-2.0" Z="-2.0" ZBRA="-2.0" ZM="-2.0"/>
                      </TRG_1>
                    </_2>
                    <_3>
                      <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="3.0" TRG_TIF="DAY">
                        <OFFSET_PER_SYMBOL AAL="3.0" AAN="3.0" AAPL="3.0" ACN="3.0" ADSK="3.0" AIG="3.0" AL="3.0" AMD="3.0" AMGN="3.0" ANET="3.0" ATH="3.0" AZN="3.0" B="3.0" BA="3.0" BABA="3.0" BAC="3.0" BBBY="3.0" BBY="3.0" BMA="3.0" BMY="3.0" BUD="3.0" BURL="3.0" C="3.0" CAR="3.0" CCL="3.0" CGC="3.0" CHGG="3.0" CHWY="3.0" CLEU="3.0" CNQ="3.0" COMP="3.0" COUP="3.0" CRM="3.0" CRSP="3.0" CRWD="3.0" CSCO="3.0" CWT="3.0" CXO="3.0" DBX="3.0" DGX="3.0" DOCU="3.0" EBAY="3.0" EDTK="3.0" EIDX="3.0" EOG="3.0" ESS="3.0" ETFC="3.0" ETSY="3.0" FARO="3.0" FEDU="3.0" FIVN="3.0" G="3.0" GKOS="3.0" GLPG="3.0" GS="3.0" ICPT="3.0" INTC="3.0" JBLU="3.0" JCI="3.0" JNUG="3.0" JWN="3.0" KL="3.0" KO="3.0" KOD="3.0" KWEB="3.0" LHX="3.0" LITE="3.0" LYFT="3.0" MCD="3.0" MEDP="3.0" MHK="3.0" MRNA="3.0" MRTN="3.0" MTN="3.0" MU="3.0" NCLH="3.0" NKLA="3.0" NTNX="3.0" NTRS="3.0" NVAX="3.0" NVDA="3.0" OSTK="3.0" OTTR="3.0" PANW="3.0" PDD="3.0" PENN="3.0" PFE="3.0" PHI="3.0" PLNT="3.0" PTON="3.0" QCOM="3.0" RCL="3.0" ROKU="3.0" SHAK="3.0" SNAP="3.0" SPXL="3.0" SPY="3.0" SQ="3.0" STZ="3.0" SYK="3.0" TLRY="3.0" TNDM="3.0" TRGP="3.0" TSLA="3.0" TWTR="3.0" UAL="3.0" ULTA="3.0" V="3.0" VEC="3.0" VEEV="3.0" VIX="3.0" VRSN="3.0" VZ="3.0" W="3.0" WAFU="3.0" WFC="3.0" WYNN="3.0" YETI="3.0" Z="3.0" ZBRA="3.0" ZM="3.0"/>
                      </TRG_0>
                      <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-3.0" TRG_TIF="DAY">
                        <OFFSET_PER_SYMBOL AAL="-3.0" AAN="-3.0" AAPL="-3.0" ACN="-3.0" ADSK="-3.0" AIG="-3.0" AL="-3.0" AMD="-3.0" AMGN="-3.0" ANET="-3.0" ATH="-3.0" AZN="-3.0" B="-3.0" BA="-3.0" BABA="-3.0" BAC="-3.0" BBBY="-3.0" BBY="-3.0" BMA="-3.0" BMY="-3.0" BUD="-3.0" BURL="-3.0" C="-3.0" CAR="-3.0" CCL="-3.0" CGC="-3.0" CHGG="-3.0" CHWY="-3.0" CLEU="-3.0" CNQ="-3.0" COMP="-3.0" COUP="-3.0" CRM="-3.0" CRSP="-3.0" CRWD="-3.0" CSCO="-3.0" CWT="-3.0" CXO="-3.0" DBX="-3.0" DGX="-3.0" DOCU="-3.0" EBAY="-3.0" EDTK="-3.0" EIDX="-3.0" EOG="-3.0" ESS="-3.0" ETFC="-3.0" ETSY="-3.0" FARO="-3.0" FEDU="-3.0" FIVN="-3.0" G="-3.0" GKOS="-3.0" GLPG="-3.0" GS="-3.0" ICPT="-3.0" INTC="-3.0" JBLU="-3.0" JCI="-3.0" JNUG="-3.0" JWN="-3.0" KL="-3.0" KO="-3.0" KOD="-3.0" KWEB="-3.0" LHX="-3.0" LITE="-3.0" LYFT="-3.0" MCD="-3.0" MEDP="-3.0" MHK="-3.0" MRNA="-3.0" MRTN="-3.0" MTN="-3.0" MU="-3.0" NCLH="-3.0" NKLA="-3.0" NTNX="-3.0" NTRS="-3.0" NVAX="-3.0" NVDA="-3.0" OSTK="-3.0" OTTR="-3.0" PANW="-3.0" PDD="-3.0" PENN="-3.0" PFE="-3.0" PHI="-3.0" PLNT="-3.0" PTON="-3.0" QCOM="-3.0" RCL="-3.0" ROKU="-3.0" SHAK="-3.0" SNAP="-3.0" SPXL="-3.0" SPY="-3.0" SQ="-3.0" STZ="-3.0" SYK="-3.0" TLRY="-3.0" TNDM="-3.0" TRGP="-3.0" TSLA="-3.0" TWTR="-3.0" UAL="-3.0" ULTA="-3.0" V="-3.0" VEC="-3.0" VEEV="-3.0" VIX="-3.0" VRSN="-3.0" VZ="-3.0" W="-3.0" WAFU="-3.0" WFC="-3.0" WYNN="-3.0" YETI="-3.0" Z="-3.0" ZBRA="-3.0" ZM="-3.0"/>
                      </TRG_1>
                    </_3>
                  </TRADE>
                </GADGET>
              </MODELNODE1>
              <MODELNODE2 COMPOSITENAME="COMPOSITE_1575349487086" NAME="1575349487020" TYPE="LEAF" WEIGHT="0.34539624370132843">
                <GADGET ROWSPANELWEIGHT="1.0" ROWWEIGHT0="1.0" ROWWEIGHT1="1.0" SELECTED_TYPE="CHART" SIDEBAR_IS_ACTIVE="false" SYMBOL="FEDU" SYMBOL_GROUP="8" TRADE_BUTTONS_MIGRATED="true">
                  <ACTIVETRADER VERTICAL="false" VISIBLE="false" WEIGHT="2.0"/>
                  <BIG_BUTTONS VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
                  <CHART CONFIGURATION="@v9@%0:com.devexperts.tos.chartdata,1:com.devexperts.tos.thinkscript.constants,2:com.devexperts.tos.thinkscript.data,3:java.awt,4:com.devexperts.toschart.control.subgraph,5:com.devexperts.toschart.elstudies,6:com.devexperts.toschart.script%owner{chartAggregationPeriods:ChartAggregationPeriodArray0{21::ChartAggregationPeriod0},chartAggregationPeriods=@ChartAggregationPeriodArray0,colors{9::CustomColor0,3::CustomColor1,7::CustomColor2,2::CustomColor3,6::CustomColor4,5::CustomColor5,1::CustomColor6,0::CustomColor7}}#com.devexperts.toschart.core.ChartModel{encodedMixinsState=&quot;{\&quot;common\&quot;:{\&quot;DRAWING_SETS\&quot;:\&quot;{}\&quot;},\&quot;state_props\&quot;:{\&quot;state_type\&quot;:\&quot;REGULAR\&quot;},\&quot;monkey_bars_exp\&quot;:{\&quot;LikefolioMixin\&quot;:\&quot;{\\\&quot;paintingSettings\\\&quot;:{\\\&quot;neutralSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;positiveSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;negativeSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;sentimentSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true}},\\\&quot;shownDivisions\\\&quot;:[],\\\&quot;allDivisions\\\&quot;:[]}\&quot;},\&quot;monkey_bars\&quot;:{},\&quot;seasonality\&quot;:{},\&quot;regular\&quot;:{\&quot;DescriberMixin\&quot;:\&quot;{\\\&quot;visibility\\\&quot;:\\\&quot;HIDE_PANEL\\\&quot;,\\\&quot;studiesMode\\\&quot;:\\\&quot;HIDE_STUDIES\\\&quot;}\&quot;,\&quot;LikefolioMixin\&quot;:\&quot;{\\\&quot;paintingSettings\\\&quot;:{\\\&quot;neutralSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;positiveSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;negativeSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;sentimentSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true}},\\\&quot;shownDivisions\\\&quot;:[],\\\&quot;allDivisions\\\&quot;:[]}\&quot;}}&quot;,encodedPatternsModel=&quot;{\&quot;showPatterns\&quot;:true,\&quot;models\&quot;:[],\&quot;fibModels\&quot;:[]}&quot;,groupId=&quot;default&quot;,styleSettings{activeTool=0,chartAggregationSettings.timeAggregationSettings=!com.devexperts.toschart.model.TimeFrameAggregationSettings.createTickOrTimeAggregation(!%0.ChartRange.findByCode(&quot;DAY180&quot;),@ChartAggregationPeriod0),commonStyleSettings{autoCorpActionsExpansion=&lt;T,chartModeName:ChartModeName0,chartModes.!get(@ChartModeName0){chartPaintingType=!java.lang.Enum.valueOf(*%1.ChartPaintingType.class,&quot;BAR&quot;)},colorSettings{backgroundColor=#%2.CustomColor(#%3.Color(20,20,20,255)),barTypeColors{neutralColor=@CustomColor0,upColor=@CustomColor1},candleTrendTypeColors{fillUpColor=#%2.CustomColor(#%3.Color(0,204,204,255)),upColor=#%2.CustomColor(#%3.Color(0,204,204,255))},candleTypeColors.upColor=#%2.CustomColor(#%3.Color(0,204,204,195)),monkeyProfileTypeColors.defaultRowHeight=&lt;F,mpExpandedTypeColors.defaultRowHeight=&lt;F,volumeColor=@CustomColor2},expansion.right=5,fitArrowsToScreen=&lt;F,fitStudiesToScreen=&lt;F,leftAxisRegulator{maxValue=2.18745631d,minValue=0.0d},manualAxisRegulator{maxValue=2.79988095d,minValue=0.53756548d},overlappedVolume=&lt;T,previousRightExpansion=5,shortCuts{^(&quot;Time Zone&quot;,&lt;F),^(&quot;Show Expiration Friday &quot;,&lt;F),^(&quot;Keep Price Zoom&quot;,&lt;F),^(&quot;enableLeftAxis&quot;,&lt;F),^(&quot;Fit expected price ranges&quot;,&lt;F),^(&quot;emphasizeDigitMPExpanded&quot;,&lt;F),^(&quot;showWicksCandleTrend&quot;,&lt;F),^(&quot;highlightEarnings&quot;,&lt;F),^(&quot;synchronizeCrosshair&quot;,&lt;F),^(&quot;myToolsMode&quot;,&lt;F),^(&quot;seasonalityStyle&quot;,&lt;F),^(&quot;Show Price Subgraph&quot;,&lt;F),^(&quot;closePriceLevel&quot;,&lt;F),^(&quot;Color Volume As Symbol Ticks&quot;,&lt;F),^(&quot;highlightPhantomRBars&quot;,&lt;F),^(&quot;Cross type &quot;,&lt;F),^(&quot;Fit Studies to Screen&quot;,&lt;F),^(&quot;Fit Orders&quot;,&lt;F),^(&quot;Bubbles as Percentage&quot;,&lt;F),^(&quot;hideStatusString&quot;,&lt;F),^(&quot;Show Studies &quot;,&lt;F),^(&quot;showWicksHeikinAshi&quot;,&lt;F),^(&quot;Alerts&quot;,&lt;F),^(&quot;Chart scale&quot;,&lt;F),^(&quot;Fit High/Low&quot;,&lt;F),^(&quot;Orders&quot;,&lt;F),^(&quot;Use Log Scale &quot;,&lt;F),^(&quot;Fit Study Markers to Screen&quot;,&lt;F),^(&quot;Fit Alerts&quot;,&lt;F),^(&quot;Fit patterns&quot;,&lt;F),^(&quot;Percentage View&quot;,&lt;F),^(&quot;Make Auto Zoom &quot;,&lt;F),^(&quot;Show Year Marking Line&quot;,&lt;F),^(&quot;Show Rollover Line&quot;,&lt;F),^(&quot;Show High/Low Bubbles &quot;,&lt;F),^(&quot;Snap mode&quot;,&lt;F),^(&quot;highlightStudies&quot;,&lt;F),^(&quot;Overlapped Volume&quot;,&lt;F),^(&quot;Show Symbol Logo&quot;,&lt;F),^(&quot;Show Last Price Bubble &quot;,&lt;F),^(&quot;emphasizeDigitMP&quot;,&lt;F),^(&quot;Show grid&quot;,&lt;F),^(&quot;showWicksCandle&quot;,&lt;F),^(&quot;Show trades&quot;,&lt;F),^(&quot;highlightSeasons&quot;,&lt;F),^(&quot;Extend Order/Alert Line to Left&quot;,&lt;F)},showBubbles=&lt;F,showDayRollover=&lt;F,showExpFriday=&lt;F,showGrid=&lt;F,showTradeExecution=&lt;T,showYearMarkingLine=&lt;F,step=3.5842293906810037d,suppressAutoZoom=&lt;T},forexStyleSettings.shortCuts.^(&quot;Show Volume Subgraph&quot;,&lt;F),futuresStyleSettings{adjustForContractChanges=&lt;T,highlightExtendedHours=&lt;T,shortCuts{^(&quot;adjustForContractChanges&quot;,&lt;F),^(&quot;Show Open Interest&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,&lt;F),^(&quot;showContractChangeEvents&quot;,&lt;F),^(&quot;futures_daily_close_price&quot;,&lt;F),^(&quot;Show Options&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,&lt;F),^(&quot;startAtMarketOpen&quot;,&lt;F)}},optionsStyleSettings.shortCuts{^(&quot;Show Open Interest&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,&lt;F),^(&quot;Show Theo Price&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,&lt;F),^(&quot;startAtMarketOpen&quot;,&lt;F)},otherStyleSettings{shortCuts{^(&quot;Show Social Sentiment&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,&lt;F),^(&quot;Show Options&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,&lt;F),^(&quot;Show Corporate Actions&quot;,&lt;F),^(&quot;Show CNBC Video&quot;,&lt;F),^(&quot;startAtMarketOpen&quot;,&lt;F),^(&quot;adjustForDividends&quot;,&lt;F)},showVolume=&lt;F,tradingHoursOnly=&lt;T}},subgraphModels{!get(#%4.SubgraphId(&quot;Symbol&quot;)){height=303,storableIndicators{+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# Trend Pivots\n# Mobius\n# V01.01.29.2019\n# Uses trend of higher highs with higher lows and trend of lower lows with lower highs to locate pivots. Distance for trend is set by the user. Confirmation of a reversal from pivots is set with a multiple of the pivot bars range. That multiple is also a user input.\n# Trading Rules\n# 1) Trade when price crosses and closes outside the pivot Confirmation line. At that point looking for best entry. Min trade is 2 contracts\n# 2) Know your risk point before entering trade. Typical risk point is the pivot line itself. If your risk is crossed look for an exit. Never use hard stops - you\'ll often get out for little or no loss\n# 3) Know your Risk off point before entering. Typical Risk Off is an ATR multiple. Offer Risk Off as soon as possible for a Risk Free trade\n# 4) set mental stop one tick above entry when Risk Off is achieved\n# 5) if trade continues your way move mental stop for your runner to last support / resistance each time a new support / resistance is hit.\n\ninput n = 5;\ninput R_Mult = .7;\n\ndef o = open;\ndef h = high;\ndef l = low;\ndef c = close;\ndef x = BarNumber();\ndef nan = Double.NaN;\ndef ts = tickSize();\ndef tr = TrueRange(h, c, l);\ndef hh = if Sum(h &gt; h[1], n) &gt;= n and \n            Sum(l &gt; l[1], n) &gt;= n-1\n         then h\n         else if h &gt; hh[1]\n              then h\n              else hh[1];\ndef xh = if h == hh\n         then x\n         else nan;\nplot hh_ = if x &gt;= HighestAll(xh)\n           then HighestAll(if IsNaN(c[-1])\n                           then hh\n                           else nan)\n           else nan;\n     hh_.SetDefaultColor(Color.RED);\n     hh_.HideTitle();\n     hh_.HideBubble();\ndef hR = if h == hh\n         then Round(Average(tr, n)/TickSize(), 0)*TickSize()\n         else hR[1];\ndef PrevL = if h == hh\n            then l[1]\n            else PrevL[1];\nplot STO = if x &gt;= HighestAll(xh)\n           then HighestAll(if IsNaN(c[-1])\n           then Round((Max(PrevL, hh_ - (hR * R_Mult))) / ts, 0) * ts\n                           else nan)\n           else nan;\n     STO.SetDefaultColor(Color.RED);\n     STO.HideTitle();\n     STO.HideBubble();\nplot STO_RO = if x &gt;= HighestAll(xh)\n              then HighestAll(if isNaN(c[-1])\n                              then STO - Min(hR, TickSize() * 16)\n                              else nan)\n              else nan;\n     STO_RO.SetStyle(Curve.Long_Dash);\n     STO_RO.SetDefaultColor(Color.White);\n     STO_RO.HideBubble();\n     STO_RO.HideTitle();\nAddChartBubble(x == HighestAll(x), STO_RO, \&quot;RO\&quot;, STO_RO.TakeValueColor(), 0);\ndef ll = if Sum(l &lt; l[1], n) &gt;= n and \n            Sum(h &lt; h[1], n) &gt;= n-1\n         then l\n         else if l &lt; ll[1]\n              then l\n              else ll[1];\ndef xl = if l == ll\n         then x\n         else nan;\nplot ll_ = if x &gt;= HighestAll(xl)\n           then HighestAll(if IsNaN(c[-1])\n                           then ll\n                           else nan)\n           else nan;\n     ll_.SetDefaultColor(Color.GREEN);\n     ll_.HideTitle();\n     ll_.HideBubble();\ndef lR = if l == ll\n         then Round(Average(tr, n)/TickSize(), 0)*TickSize()\n         else lR[1];\ndef PrevH = if l == ll\n            then h[1]\n            else PrevH[1];\nplot BTO = if x &gt;= HighestAll(xl)\n           then HighestAll(if IsNaN(c[-1])\n           then Round((Min(PrevH, ll_ + (lR * R_Mult))) / ts, 0) * ts\n                           else nan)\n           else nan;\n     BTO.SetDefaultColor(Color.GREEN);\n     BTO.HideTitle();\n     BTO.HideBubble();\nplot BTO_RO = if x &gt;= HighestAll(xl)\n              then HighestAll(if isNaN(c[-1])\n                              then BTO + Min(lR, TickSize() * 16)\n                              else nan)\n              else nan;\n     BTO_RO.SetStyle(Curve.Long_Dash);\n     BTO_RO.SetDefaultColor(Color.White);\n     BTO_RO.HideBubble();\n     BTO_RO.HideTitle();\nAddChartBubble(x == HighestAll(x), BTO_RO, \&quot;RO\&quot;, BTO_RO.TakeValueColor(), 1);\nAddCloud(STO, hh_, Color.LIGHT_RED, Color.LIGHT_RED);\nAddCloud(ll_, BTO, Color.LIGHT_GREEN, Color.LIGHT_GREEN);\nAlert(c crosses below STO, \&quot;\&quot;, Alert.Bar, Sound.Bell);\nAlert(c crosses above BTO, \&quot;\&quot;, Alert.Bar, Sound.Ding);\n# End Code Trend Pivots &quot;,name=&quot;_bdb90595_db2e_3040_abcc_53876b8695e2&quot;}){alerts:LocalAlertArray0,alerts=@LocalAlertArray0}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# @new\n# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2011-2021\n#\n# Source code isn\'t available.\n\ninput arrayPeriod = 13;\ninput formationPeriod = 9;\n\nplot \&quot;Buy Formation\&quot; = Double.NaN;\nplot \&quot;Sell Formation\&quot; = Double.NaN;\nplot \&quot;Buy Array\&quot; = Double.NaN;\nplot \&quot;Sell Array\&quot; = Double.NaN;\nplot \&quot;Perfect Buy\&quot; = Double.NaN;\nplot \&quot;Perfect Sell\&quot; = Double.NaN;\nplot \&quot;Perfect Array Buy\&quot; = Double.NaN;\nplot \&quot;Perfect Array Sell\&quot; = Double.NaN;&quot;,name=&quot;SequenceCounter&quot;}){plots{0:{color=#%2.CustomColor(#%3.Color(0,255,51,255))},1:{color=#%2.CustomColor(#%3.Color(255,0,0,255))},2:{color=!%2.CustomColor.findByIndex(&quot;17&quot;),hiding=&lt;T},3:{color=@CustomColor3,hiding=&lt;T},4:{color=#%2.CustomColor(#%3.Color(0,255,0,255))},5:{color=#%2.CustomColor(#%3.Color(255,0,0,255))},6:{color=#%2.CustomColor(#%3.Color(0,255,0,255))},7:{color=#%2.CustomColor(#%3.Color(255,0,0,255))}}}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2017-2021\n#\n\ninput price = close;\ninput length = 9;\ninput displace = 0;\ninput showBreakoutSignals = no;\n\nplot SMA = Average(price[-displace], length);\nplot UpSignal = price crosses above SMA;\nplot DownSignal = price crosses below SMA;\n\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\nSMA.SetDefaultColor(GetColor(1));\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);&quot;,name=&quot;SimpleMovingAvg&quot;}){inputsMap:TreeMap0{^(&quot;length&quot;,50),^(&quot;price&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap0,plots{0:{color=@CustomColor3}}}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2017-2021\n#\n\ninput price = close;\ninput length = 9;\ninput displace = 0;\ninput showBreakoutSignals = no;\n\nplot AvgExp = ExpAverage(price[-displace], length);\nplot UpSignal = price crosses above AvgExp;\nplot DownSignal = price crosses below AvgExp;\n\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\nAvgExp.SetDefaultColor(GetColor(1));\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);&quot;,name=&quot;MovAvgExponential&quot;}){inputsMap:TreeMap1{^(&quot;price&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap1}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2017-2021\n#\n\ninput price = close;\ninput length = 9;\ninput displace = 0;\ninput showBreakoutSignals = no;\n\nplot AvgExp = ExpAverage(price[-displace], length);\nplot UpSignal = price crosses above AvgExp;\nplot DownSignal = price crosses below AvgExp;\n\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\nAvgExp.SetDefaultColor(GetColor(1));\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);&quot;,name=&quot;MovAvgExponential&quot;}){inputsMap:TreeMap2{^(&quot;length&quot;,20),^(&quot;price&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap2,plots{0:{color=!%2.CustomColor.findByIndex(&quot;12&quot;)}}}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2017-2021\n#\n\ninput price = close;\ninput length = 9;\ninput displace = 0;\ninput showBreakoutSignals = no;\n\nplot AvgExp = ExpAverage(price[-displace], length);\nplot UpSignal = price crosses above AvgExp;\nplot DownSignal = price crosses below AvgExp;\n\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\nAvgExp.SetDefaultColor(GetColor(1));\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);&quot;,name=&quot;MovAvgExponential&quot;}){inputsMap:TreeMap3{^(&quot;length&quot;,100),^(&quot;price&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap3,plots{0:{color=@CustomColor4}}}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2017-2021\n#\n\ninput price = close;\ninput length = 9;\ninput displace = 0;\ninput showBreakoutSignals = no;\n\nplot AvgExp = ExpAverage(price[-displace], length);\nplot UpSignal = price crosses above AvgExp;\nplot DownSignal = price crosses below AvgExp;\n\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\nAvgExp.SetDefaultColor(GetColor(1));\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);&quot;,name=&quot;MovAvgExponential&quot;}){inputsMap:TreeMap4{^(&quot;length&quot;,200),^(&quot;price&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap4,plots{0:{color=!%2.CustomColor.findByIndex(&quot;16&quot;)}}}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2017-2021\n#\n\ninput price = close;\ninput length = 9;\ninput displace = 0;\ninput showBreakoutSignals = no;\n\nplot SMA = Average(price[-displace], length);\nplot UpSignal = price crosses above SMA;\nplot DownSignal = price crosses below SMA;\n\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\nSMA.SetDefaultColor(GetColor(1));\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);&quot;,name=&quot;SimpleMovingAvg&quot;}){inputsMap:TreeMap5{^(&quot;length&quot;,200),^(&quot;price&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap5,plots{0:{color=!%2.CustomColor.findByIndex(&quot;13&quot;)}}}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# @new\n# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2010-2021\n#\n\ninput pricePerRowHeightMode = {default AUTOMATIC, TICKSIZE, CUSTOM};\ninput customRowHeight = 1.0;\ninput timePerProfile = {default CHART, MINUTE, HOUR, DAY, WEEK, MONTH, \&quot;OPT EXP\&quot;, BAR};\ninput multiplier = 1;\ninput onExpansion = yes;\ninput profiles = 1000;\ninput showPointOfControl = yes;\ninput showValueArea = yes;\ninput valueAreaPercent = 70;\ninput opacity = 50;\n\ndef period;\ndef yyyymmdd = getYyyyMmDd();\ndef seconds = secondsFromTime(0);\ndef month = getYear() * 12 + getMonth();\ndef day_number = daysFromDate(first(yyyymmdd)) + getDayOfWeek(first(yyyymmdd));\ndef dom = getDayOfMonth(yyyymmdd);\ndef dow = getDayOfWeek(yyyymmdd - dom + 1);\ndef expthismonth = (if dow &gt; 5 then 27 else 20) - dow;\ndef exp_opt = month + (dom &gt; expthismonth);\nswitch (timePerProfile) {\ncase CHART:\n    period = 0;\ncase MINUTE:\n    period = floor(seconds / 60 + day_number * 24 * 60);\ncase HOUR:\n    period = floor(seconds / 3600 + day_number * 24);\ncase DAY:\n    period = countTradingDays(min(first(yyyymmdd), yyyymmdd), yyyymmdd) - 1;\ncase WEEK:\n    period = floor(day_number / 7);\ncase MONTH:\n    period = floor(month - first(month));\ncase \&quot;OPT EXP\&quot;:\n    period = exp_opt - first(exp_opt);\ncase BAR:\n    period = barNumber() - 1;\n}\n\ndef count = CompoundValue(1, if period != period[1] then (count[1] + period - period[1]) % multiplier else count[1], 0);\ndef cond = count &lt; count[1] + period - period[1];\ndef height;\nswitch (pricePerRowHeightMode) {\ncase AUTOMATIC:\n    height = PricePerRow.AUTOMATIC;\ncase TICKSIZE:\n    height = PricePerRow.TICKSIZE;\ncase CUSTOM:\n    height = customRowHeight;\n}\n\nprofile vol = volumeProfile(\&quot;startNewProfile\&quot; = cond, \&quot;onExpansion\&quot; = onExpansion, \&quot;numberOfProfiles\&quot; = profiles, \&quot;pricePerRow\&quot; = height, \&quot;value area percent\&quot; = valueAreaPercent);\ndef con = compoundValue(1, onExpansion, no);\ndef pc = if IsNaN(vol.getPointOfControl()) and con then pc[1] else vol.getPointOfControl();\ndef hVA = if IsNaN(vol.getHighestValueArea()) and con then hVA[1] else vol.getHighestValueArea();\ndef lVA = if IsNaN(vol.getLowestValueArea()) and con then lVA[1] else vol.getLowestValueArea();\n\ndef hProfile = if IsNaN(vol.getHighest()) and con then hProfile[1] else vol.getHighest();\ndef lProfile = if IsNaN(vol.getLowest()) and con then lProfile[1] else vol.getLowest();\ndef plotsDomain = IsNaN(close) == onExpansion;\n\nplot POC = if plotsDomain then pc else Double.NaN;\nplot ProfileHigh = if plotsDomain then hProfile else Double.NaN;\nplot ProfileLow = if plotsDomain then lProfile else Double.NaN;\nplot VAHigh = if plotsDomain then hVA else Double.NaN;\nplot VALow = if plotsDomain then lVA else Double.NaN;\n\nDefineGlobalColor(\&quot;Profile\&quot;, GetColor(1));\nDefineGlobalColor(\&quot;Point Of Control\&quot;, GetColor(5));\nDefineGlobalColor(\&quot;Value Area\&quot;, GetColor(8));\n\nvol.show(globalColor(\&quot;Profile\&quot;), if showPointOfControl then globalColor(\&quot;Point Of Control\&quot;) else color.current, if showValueArea then globalColor(\&quot;Value Area\&quot;) else color.current, opacity);\nPOC.SetDefaultColor(globalColor(\&quot;Point Of Control\&quot;));\nPOC.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nVAHigh.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nVALow.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nVAHigh.SetDefaultColor(globalColor(\&quot;Value Area\&quot;));\nVALow.SetDefaultColor(globalColor(\&quot;Value Area\&quot;));\nProfileHigh.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nProfileLow.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nProfileHigh.SetDefaultColor(GetColor(3));\nProfileLow.SetDefaultColor(GetColor(3));\nProfileHigh.hide();\nProfileLow.hide();&quot;,name=&quot;VolumeProfile&quot;}){inputsMap:TreeMap6{^(&quot;customRowHeight&quot;,20.0d),^(&quot;pricePerRowHeightMode&quot;,&quot;TICKSIZE&quot;),^(&quot;showValueArea&quot;,&lt;F)},inputsMap=@TreeMap6,palette{^(&quot;Point Of Control&quot;,#%2.CustomColor(#%3.Color(102,0,204,255))),^(&quot;Profile&quot;,#%2.CustomColor(#%3.Color(0,102,153,255)))},plots{0:{color=#%2.CustomColor(#%3.Color(102,0,204,255)),lineWeight=2},1:{color=@CustomColor5,hiding=&lt;F},2:{color=@CustomColor4,hiding=&lt;F},3:{color=#%2.CustomColor(#%3.Color(255,0,0,255)),lineWeight=2},4:{color=#%2.CustomColor(#%3.Color(0,255,0,255)),lineWeight=2}}}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;#Custom Correlation Label by 7of9\n\ninput length = 10;\ninput correlationWithSecurity = \&quot;SPX\&quot;;\n\ndef Correlation = correlation(close, close(correlationWithSecurity), length);\n\nAddLabel (yes, \&quot;Corr \&quot; + round (Correlation, 2), CreateColor(196, 83, 255));\n&quot;,name=&quot;_dff6eab3_6d8b_3255_900d_46a585e253fa&quot;})),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# Buythedip + Selltherip Indicator (Upper)\n# Assembled by BenTen at UseThinkScript.com\n# Modified by BoarTrades #Boar6916 on discord\n# &lt;NOTES&gt;\n# Based on the concept of \&quot;Synethetic VIX\&quot; by Larry Williams\n# This software is licensed for individual use only.\n# NOT FOR REDISTRIBUTION PRIVATE/CONFIDENTIAL\n# Copyright (c) 2020 useThinkScript LLC\n\ninput length = 22;\ninput BTD_meter = yes;\ninput STR_meter = yes;\ninput arrows = yes;\ninput color_change = yes;\n\n# BTD Plot indicator\ndef BTD_value = ((high - Lowest(close[1], length)) / Lowest(close[1], length)) * 100;\ndef buythedip = BTD_value;\ndef Zeroline = 0;\ndef BTD_condition = buythedip crosses above Zeroline;\n\n# STR Plot indicator\ndef STR_value = ((low - highest(close[1], length)) / highest(close[1], length)) * 100;\ndef selltherip = STR_value;\ndef STR_condition = selltherip crosses below Zeroline;\n\nAddLabel(BTD_meter and yes, Concat(\&quot;BTD = \&quot;, buythedip), color.CYAN);\nAddLabel(STR_meter and yes, Concat(\&quot;STR = \&quot;, selltherip), color.MAGENTA);\n\n# BTD Plot arrows\nplot UpSignal = if arrows and BTD_condition then buythedip else Double.NaN;\nUpSignal.SetDefaultColor(Color.Orange);\nUpSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\n\n# STR Plot arrows\nplot DnSignal = if arrows and STR_condition then selltherip else Double.NaN;\nDnSignal.SetDefaultColor(Color.RED);\nDnSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);&quot;,name=&quot;_acdb191b_7565_36d8_9406_cd07ae712c77&quot;}){plots{0:{color=@CustomColor6,lineWeight=3},1:{color=@CustomColor7,lineWeight=3}}}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence:ScriptEssence0{body=&quot;# blackFLAG FTS SwingArms\n# StudyName: blackFLAG_Futures_SwingArm_ATRTrail\n# My preferred setting is 28 / 5 FOR ALL TIMEFRAMES\n# Edited by: Jose Azcarate\n# blackFLAG Futures Trading - FOR EDUCATIONAL PURPOSES ONLY\n# TWITTER: @blackflagfuture\n\n# SwingArm Watchlist by [USER=278]@fishstick1229[/USER]\n# * Updated code below is to be used for custom watchlist column only **\n\n#Updated text display by [USER=4199]@Fishbed[/USER]\n\n# Combined Watchlist code to produce in chart label.\n\n# 6/25/20 Updated by Scott K @sirrous\n# Added overlapping swingarm timeframe notifications and alerts\n\n# Set the aggperiod to the timeframe you want the zone to monitor for an overlap.  When the defined aggperiod\'s swingarm overlaps with the chart and price moves into that then overlap you will be notified.\n# Labels only display for higher time periods (ie 15m aggperiod on a 10 min chart.\n# Add the study multiple times and set them to different aggperoids to montior multiple times.\n\n\ninput high_aggperiod = AggregationPeriod.MIN;\ninput Enable_Zone_Overlap_Notifications = no;\ninput current_period_trigger_zone = {default \&quot;Zone 4\&quot;, \&quot;Zone 3\&quot;, \&quot;Zone 2\&quot;};\ninput trailType = {default modified, unmodified};\ninput ATRPeriod = 28;\ninput ATRFactor = 5;\ninput firstTrade = {default long, short};\ninput averageType = AverageType.WILDERS;\n\ninput fib1Level = 61.8;\ninput fib2Level = 78.6;\ninput fib3Level = 88.6;\n\nAssert(ATRFactor &gt; 0, \&quot;\'atr factor\' must be positive: \&quot; + ATRFactor);\n\n## Current Chart Agg Period\n\ndef HiLo = Min(high - low, 1.5 * Average(high - low, ATRPeriod));\ndef HRef = if low &lt;= high[1]\n    then high - close[1]\n    else (high - close[1]) - 0.5 * (low - high[1]);\ndef LRef = if high &gt;= low[1]\n    then close[1] - low\n    else (close[1] - low) - 0.5 * (low[1] - high);\n\ndef trueRange;\nswitch (trailType) {\ncase modified:\n    trueRange = Max(HiLo, Max(HRef, LRef));\ncase unmodified:\n    trueRange = TrueRange(high, close, low);\n}\ndef loss = ATRFactor * MovingAverage(averageType, trueRange, ATRPeriod);\n\ndef state = {default init, long, short};\ndef trail;\nswitch (state[1]) {\ncase init:\n    if (!IsNaN(loss)) {\n        switch (firstTrade) {\n        case long:\n            state = state.long;\n            trail = close - loss;\n        case short:\n            state = state.short;\n            trail = close + loss;\n    }\n    } else {\n        state = state.init;\n        trail = Double.NaN;\n    }\ncase long:\n    if (close &gt; trail[1]) {\n        state = state.long;\n        trail = Max(trail[1], close - loss);\n    } else {\n        state = state.short;\n        trail = close + loss;\n    }\ncase short:\n    if (close &lt; trail[1]) {\n        state = state.short;\n        trail = Min(trail[1], close + loss);\n    } else {\n        state = state.long;\n        trail = close - loss;\n    }\n}\n\ndef BuySignal = Crosses(state == state.long, 0, CrossingDirection.ABOVE);\ndef SellSignal = Crosses(state == state.short, 0, CrossingDirection.ABOVE);\n\ndef ex = if BuySignal then high else if SellSignal then low else if state == state.long then Max(ex[1], high) else if state == state.short then Min(ex[1], low) else ex[1];\n\ndef TrailingStop = trail;\ndef f1 = ex + (trail - ex) * fib1Level / 100;\ndef f2 = ex + (trail - ex) * fib2Level / 100;\ndef f3 = ex + (trail - ex) * fib3Level / 100;\ndef l100 = trail + 0;\ndef Fib1 = f1;\ndef Fib2 = f2;\ndef Fib3 = f3;\n\ndef bullAboveZone = state == state.long and close &gt; Fib1;\ndef bullZone2 = state == state.long and close &lt;= Fib1 and close &gt; Fib2;\ndef bullZone3 = state == state.long and close &lt;= Fib2 and close &gt; Fib3;\ndef bullZone4 = state == state.long and close &lt;= Fib3 and close &gt; TrailingStop;\n\ndef bearZone2 = state == state.short and close &gt;= Fib1 and close &lt; Fib2;\ndef bearZone3 = state == state.short and close &gt;= Fib2 and close &lt; Fib3;\ndef bearZone4 = state == state.short and close &gt;= Fib3 and close &lt; TrailingStop;\n\n## High Agg Period\n\ndef highagg_high = high(period = high_aggperiod);\ndef highagg_low = low(period = high_aggperiod);\ndef highagg_close = close(period = high_aggperiod);\n\ndef highagg_HiLo = Min(highagg_high - highagg_low, 1.5 * Average(highagg_high - highagg_low, ATRPeriod));\ndef highagg_HRef = if highagg_low &lt;= highagg_high[1]\n    then highagg_high - highagg_close[1]\n    else (highagg_high - highagg_close[1]) - 0.5 * (highagg_low - highagg_high[1]);\ndef highagg_LRef = if highagg_high &gt;= highagg_low[1]\n    then highagg_close[1] - highagg_low\n    else (highagg_close[1] - highagg_low) - 0.5 * (highagg_low[1] - highagg_high);\n\ndef highagg_trueRange;\nswitch (trailType) {\ncase modified:\n    highagg_trueRange = Max(highagg_HiLo, Max(highagg_HRef, highagg_LRef));\ncase unmodified:\n    highagg_trueRange = TrueRange(highagg_high, highagg_close, highagg_low);\n}\ndef highagg_loss = ATRFactor * MovingAverage(averageType, highagg_trueRange, ATRPeriod);\n\ndef highagg_state = {default init, long, short};\ndef highagg_trail;\nswitch (highagg_state[1]) {\ncase init:\n    if (!IsNaN(highagg_loss)) {\n        switch (firstTrade) {\n        case long:\n            highagg_state = highagg_state.long;\n            highagg_trail = highagg_close - highagg_loss;\n        case short:\n            highagg_state = highagg_state.short;\n            highagg_trail = highagg_close + highagg_loss;\n    }\n    } else {\n        highagg_state = highagg_state.init;\n        highagg_trail = Double.NaN;\n    }\ncase long:\n    if (highagg_close &gt; highagg_trail[1]) {\n        highagg_state = highagg_state.long;\n        highagg_trail = Max(highagg_trail[1], highagg_close - highagg_loss);\n    } else {\n        highagg_state = highagg_state.short;\n        highagg_trail = highagg_close + highagg_loss;\n    }\ncase short:\n    if (highagg_close &lt; highagg_trail[1]) {\n        highagg_state = highagg_state.short;\n        highagg_trail = Min(highagg_trail[1], highagg_close + highagg_loss);\n    } else {\n        highagg_state = highagg_state.long;\n        highagg_trail = highagg_close - highagg_loss;\n    }\n}\n\ndef highagg_BuySignal = Crosses(highagg_state == highagg_state.long, 0, CrossingDirection.ABOVE);\ndef highagg_SellSignal = Crosses(highagg_state == highagg_state.short, 0, CrossingDirection.ABOVE);\n\ndef highagg_ex = if highagg_BuySignal then highagg_high else if highagg_SellSignal then highagg_low else if highagg_state == highagg_state.long then Max(highagg_ex[1], highagg_high) else if highagg_state == highagg_state.short then Min(highagg_ex[1], highagg_low) else highagg_ex[1];\n\ndef highagg_TrailingStop = highagg_trail;\ndef highagg_f1 = highagg_ex + (highagg_trail - highagg_ex) * fib1Level / 100;\ndef highagg_f2 = highagg_ex + (highagg_trail - highagg_ex) * fib2Level / 100;\ndef highagg_f3 = highagg_ex + (highagg_trail - highagg_ex) * fib3Level / 100;\ndef highagg_l100 = highagg_trail + 0;\ndef highagg_Fib1 = highagg_f1;\ndef highagg_Fib2 = highagg_f2;\ndef highagg_Fib3 = highagg_f3;\n\ndef highagg_bullAboveZone = highagg_state == highagg_state.long and highagg_close &gt; highagg_Fib1;\ndef highagg_bullZone2 = highagg_state == highagg_state.long and highagg_close &lt;= highagg_Fib1 and highagg_close &gt; highagg_Fib2;\ndef highagg_bullZone3 = highagg_state == highagg_state.long and highagg_close &lt;= highagg_Fib2 and highagg_close &gt; highagg_Fib3;\ndef highagg_bullZone4 = highagg_state == highagg_state.long and highagg_close &lt;= highagg_Fib3 and highagg_close &gt; highagg_TrailingStop;\n\ndef highagg_bearZone2 = highagg_state == highagg_state.short and highagg_close &gt;= highagg_Fib1 and highagg_close &lt; highagg_Fib2;\ndef highagg_bearZone3 = highagg_state == highagg_state.short and highagg_close &gt;= highagg_Fib2 and highagg_close &lt; highagg_Fib3;\ndef highagg_bearZone4 = highagg_state == highagg_state.short and highagg_close &gt;= highagg_Fib3 and highagg_close &lt; highagg_TrailingStop;\n\nAddLabel(yes, Concat(if high_aggperiod &lt; 3600000 then high_aggperiod / 60000 + \&quot;m\&quot; else if high_aggperiod &lt; 86400000 then high_aggperiod / 3600000 + \&quot;h\&quot; else if high_aggperiod &lt; 604800000 then high_aggperiod / 86400000 + \&quot;D\&quot; else if high_aggperiod &lt; 2592000000 then high_aggperiod / 604800000 + \&quot;Wk\&quot; else if high_aggperiod &lt; 31536000000 then high_aggperiod / 2592000000 + \&quot;Mo\&quot; else high_aggperiod / 31536000000 + \&quot;Yr\&quot;, if highagg_bullZone2 then \&quot;: ZONE 2\&quot;  else if highagg_bullZone3 then \&quot;: ZONE 3\&quot;  else if highagg_bullZone4 then \&quot;: ZONE 4\&quot; else if highagg_bearZone2 then \&quot;: ZONE 2\&quot;  else if highagg_bearZone3 then \&quot;: ZONE 3\&quot;  else if highagg_bearZone4 then \&quot;: ZONE 4\&quot; else \&quot;\&quot;), if highagg_state == highagg_state.long then Color.GREEN else Color.RED);\n\ndef action_confirmed;\n\nswitch (current_period_trigger_zone) {\ncase \&quot;Zone 4\&quot;:\n    if (state == state.long and highagg_state == highagg_state.long) {\n        if (bullZone4 and (highagg_bullZone2 or highagg_bullZone3 or highagg_bullZone4)) {\n            action_confirmed = 4;\n        } else {\n            action_confirmed = 0;\n        }\n    } else if (state == state.short and highagg_state == highagg_state.short) {\n        if (bearZone4 and (highagg_bearZone2 or highagg_bearZone3 or highagg_bearZone4)) {\n            action_confirmed = -4;\n        } else {\n            action_confirmed = 0;\n        }\n\n    } else {\n        action_confirmed = 0;\n    }\ncase \&quot;Zone 3\&quot;:\n    if (state == state.long and highagg_state == highagg_state.long) {\n        if ((bullZone3 or bullZone4) and (highagg_bullZone2 or highagg_bullZone3 or highagg_bullZone4)) {\n            action_confirmed = 3;\n        } else {\n            action_confirmed = 0;\n        }\n    } else if (state == state.short and highagg_state == highagg_state.short) {\n        if ((bearZone3 or bearZone4) and (highagg_bearZone2 or highagg_bearZone3 or highagg_bearZone4)) {\n            action_confirmed = -3;\n        } else {\n            action_confirmed = 0;\n        }\n\n    } else {\n        action_confirmed = 0;\n    }\ncase \&quot;Zone 2\&quot;:\n    if (state == state.long and highagg_state == highagg_state.long) {\n        if ((bullZone2 or (bullZone3 or bullZone4)) and (highagg_bullZone2 or highagg_bullZone3 or highagg_bullZone4)) {\n            action_confirmed = 2;\n        } else {\n            action_confirmed = 0;\n        }\n    } else if (state == state.short and highagg_state == highagg_state.short) {\n        if ((bearZone2 or (bearZone3 or bearZone4)) and (highagg_bearZone2 or highagg_bearZone3 or highagg_bearZone4)) {\n            action_confirmed = -2;\n        } else {\n            action_confirmed = 0;\n        }\n\n    } else {\n        action_confirmed = 0;\n    }\n}\n\nAddLabel((action_confirmed and Enable_Zone_Overlap_Notifications), if action_confirmed &lt; -1 then \&quot;SELL CONDITION CONFIRMED - Price entered overlapping zones!\&quot; else if action_confirmed &gt; 1 then \&quot;BUY CONDITION CONFIRMED - Price entered overlapping zones!\&quot; else \&quot;Waiting\&quot;, if action_confirmed &gt; 1 then Color.GREEN else if action_confirmed &lt; -1 then Color.RED else Color.WHITE);\n#Debug Label\n#AddLabel((action_confirmed or always_show_label), action_confirmed, Color.White);\n\n#add plot for scanner\nplot sell_confirm = if (action_confirmed &lt; -1) then high else Double.NaN;\nsell_confirm.SetDefaultColor(Color.WHITE);\nsell_confirm.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);\nsell_confirm.SetLineWeight(1);\nsell_confirm.Hide();\n\nplot buy_confirm = if (action_confirmed &gt; 1) then low else Double.NaN;\nbuy_confirm.SetDefaultColor(Color.WHITE);\nbuy_confirm.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nbuy_confirm.SetLineWeight(1);\nbuy_confirm.Hide();\n\n#add alert\nAlert(sell_confirm and Enable_Zone_Overlap_Notifications, \&quot;SELL CONDITION CONFIRMED - Price entered overlapping zones!\&quot;, Alert.Once, Sound.Ring);\nAlert(buy_confirm and Enable_Zone_Overlap_Notifications, \&quot;BUY CONDITION CONFIRMED - Price entered overlapping zones!\&quot;, Alert.Once, Sound.Ring);&quot;,name=&quot;_823eeba3_0f87_31f8_9c91_a146f75edd1b&quot;}){alerts:LocalAlertArray1,alerts=@LocalAlertArray1,inputsMap:TreeMap7{^(&quot;high_aggperiod&quot;,&quot;DAY&quot;)},inputsMap=@TreeMap7}),+(!%5.CompiledStudy.resolveStudy(@ScriptEssence0){alerts:LocalAlertArray2,alerts=@LocalAlertArray2,inputsMap:TreeMap8{^(&quot;high_aggperiod&quot;,&quot;WEEK&quot;)},inputsMap=@TreeMap8}),+(!%5.CompiledStudy.resolveStudy(@ScriptEssence0){alerts:LocalAlertArray3,alerts=@LocalAlertArray3,inputsMap:TreeMap9{^(&quot;high_aggperiod&quot;,&quot;MONTH&quot;)},inputsMap=@TreeMap9}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;plot Data = close;\nplot priceLine = highestAll(if isNan(close[-1]) and !isNAN(close) then close else double.nan);&quot;,name=&quot;_2c1dfba0_1c0a_3978_bf1d_074c015cc785&quot;}){plots{0:{hiding=&lt;T},1:{color=#%2.CustomColor(#%3.Color(0,255,0,255)),lineStyle=3}}})}},^(#%4.SubgraphId(&quot;Subgraph4&quot;),#%4.SubgraphStorableModel{height=122,storableIndicators{+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# @new\n# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2009-2021\n#\n# Source code isn\'t available.\n\ndeclare lower;\n\ninput price = CLOSE;\ninput length = 20;\ninput nK = 1.5;\ninput nBB = 2.0;\ninput alertLine = 1.0;\n\nplot Histogram = Double.NaN;\nplot VolComp = Double.NaN;\nplot SqueezeAlert = Double.NaN;&quot;,name=&quot;TTM_Squeeze&quot;}){alerts:LocalAlertArray4{0:{enabled=&lt;F}},alerts=@LocalAlertArray4}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# TMO ((T)rue (M)omentum (O)scilator)\n# Mobius\n# V01.05.2018\n# hint: TMO calculates momentum using the delta of price. Giving a much better picture of trend, tend reversals and divergence than momentum oscillators using price.\n\ndeclare Lower;\n\ninput length = 14;\ninput calcLength = 5;\ninput smoothLength = 3;\n\ndef o = open;\ndef c = close;\ndef data = fold i = 0 to length\n           with s\n           do s + (if c &gt; getValue(o, i)\n                   then 1\n                   else if c &lt; getValue(o, i)\n                        then - 1\n                        else 0);\ndef EMA5 = ExpAverage(data, calcLength);\nplot Main = ExpAverage(EMA5, smoothLength);\nplot Signal = ExpAverage(Main, smoothLength);\n     Main.AssignValueColor(if Main &gt; Signal\n                           then color.green\n                           else color.red);\n     Signal.AssignValueColor(if Main &gt; Signal\n                             then color.green\n                             else color.red);\n     Signal.HideBubble();\n     Signal.HideTitle();\naddCloud(Main, Signal, color.green, color.red);\nplot zero = if isNaN(c) then double.nan else 0;\n     zero.SetDefaultColor(Color.gray);\n     zero.hideBubble();\n     zero.hideTitle();\nplot ob = if isNaN(c) then double.nan else round(length * .7);\n     ob.SetDefaultColor(Color.gray);\n     ob.HideBubble();\n     ob.HideTitle();\nplot os = if isNaN(c) then double.nan else -round(length * .7);\n     os.SetDefaultColor(Color.gray);\n     os.HideBubble();\n     os.HideTitle();\naddCloud(ob, length, color.light_red, color.light_red, no);\naddCloud(-length, os, color.light_green, color.light_green);\n# End Code TMO&quot;,name=&quot;_e764f5bb_0b2a_3136_ab0c_1a950d75f144&quot;}){inputsMap:TreeMap10{^(&quot;length&quot;,25)},inputsMap=@TreeMap10})}})}}" SHARED_USER_SCRIPTS="@v8@owner{chartAggregationPeriods:ChartAggregationPeriodArray0,chartAggregationPeriods=@ChartAggregationPeriodArray0}#java.util.HashMap{^(&quot;_816c6ffe_203d_442d_8f86_7feb2d5ed00a&quot;,&quot;CT_Correlation_Purple&quot;),^(&quot;_e6b646b1_181e_401f_8ad2_352a88081c5e&quot;,&quot;CT_Trend_Pivots_w_HH_LL_by_Mobius&quot;),^(&quot;_fd44f96a_9d06_4c34_b59d_ff3eec59b963&quot;,&quot;CT_BFLG_Scan_Zone_Monitor_Label_w_Alerts_by_Scott_AKA_Xzeryn&quot;),^(&quot;_06c891ec_d069_40f3_9b66_d05649d4a1f7&quot;,&quot;CT_TMO_Lower&quot;),^(&quot;_52a101b8_1dfe_3727_8462_9f6545583b14&quot;,&quot;CT_PriceLine&quot;),^(&quot;_8073e821_ac50_4d0f_b860_40679520bdf5&quot;,&quot;CT_BTD_STR_Upper_by_UTS&quot;)}" SYMBOL="FEDU" SYMBOL_GROUP="8" VERTICAL="false" VISIBLE="true" WEIGHT="3.0"/>
                  <DASHBOARD VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
                  <LEVEL_II VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
                  <LIVE_NEWS VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
                  <PHASE_SCORES VERTICAL="false" VISIBLE="false" WEIGHT="2.0"/>
                  <TIME_SALES VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
                  <TRADE CONFIGURATION_NAME="SINGLE" ORDER_RULES_SET="STOCK" ORDER_TYPE="LIMIT" OS_AUTO="false" OS_EXPANDED="false" OS_TIF="DAY" QTY="10.0" QTY_STEP="1.0" TEMPLATE="SINGLE" TRADE_BUTTONS="BUY_MKT;SELL_MKT;MULTI_CANCEL;REVERSE;FLAT;SECOND_LINE;QUANTITY;AUTO_SEND;ORDER_SETUP" VISIBLE="false">
                    <OCO_STOP>
                      <TRG_0 TRG_ENBL="true" TRG_LINK="ASK_BID" TRG_OFFSET_MODE="TICK" TRG_OT="STOP" TRG_SETUP="10.0" TRG_TIF="DAY">
                        <OFFSET_PER_SYMBOL AAL="10.0" AAN="10.0" AAPL="10.0" ACN="10.0" ADSK="10.0" AIG="10.0" AL="10.0" AMD="10.0" AMGN="10.0" ANET="10.0" ATH="10.0" AZN="10.0" B="10.0" BA="10.0" BABA="10.0" BAC="10.0" BBBY="10.0" BBY="10.0" BMA="10.0" BMY="10.0" BUD="10.0" BURL="10.0" C="10.0" CAR="10.0" CCL="10.0" CGC="10.0" CHGG="10.0" CHWY="10.0" CLEU="10.0" CNQ="10.0" COUP="10.0" CRM="10.0" CRSP="10.0" CRWD="10.0" CSCO="10.0" CWT="10.0" CXO="10.0" DBX="10.0" DGX="10.0" DOCU="10.0" EBAY="10.0" EDTK="10.0" EIDX="10.0" EOG="10.0" ESS="10.0" ETFC="10.0" ETSY="10.0" FARO="10.0" FEDU="10.0" FIVN="10.0" G="10.0" GKOS="10.0" GLPG="10.0" GS="10.0" ICPT="10.0" INTC="10.0" JBLU="10.0" JCI="10.0" JNUG="10.0" JWN="10.0" KL="10.0" KO="10.0" KOD="10.0" KWEB="10.0" LHX="10.0" LITE="10.0" LYFT="10.0" MCD="10.0" MEDP="10.0" MHK="10.0" MRNA="10.0" MRTN="10.0" MTN="10.0" MU="10.0" NCLH="10.0" NKLA="10.0" NTNX="10.0" NTRS="10.0" NVAX="10.0" NVDA="10.0" OSTK="10.0" OTTR="10.0" PANW="10.0" PDD="10.0" PENN="10.0" PFE="10.0" PHI="10.0" PLNT="10.0" PTON="10.0" QCOM="10.0" RCL="10.0" ROKU="10.0" SHAK="10.0" SNAP="10.0" SPXL="10.0" SPY="10.0" SQ="10.0" STZ="10.0" SYK="10.0" TLRY="10.0" TNDM="10.0" TRGP="10.0" TSLA="10.0" TWTR="10.0" UAL="10.0" ULTA="10.0" V="10.0" VEC="10.0" VEEV="10.0" VIX="10.0" VRSN="10.0" VZ="10.0" W="10.0" WAFU="10.0" WFC="10.0" WYNN="10.0" YETI="10.0" Z="10.0" ZBRA="10.0" ZM="10.0"/>
                      </TRG_0>
                    </OCO_STOP>
                    <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="1.0" TRG_TIF="DAY">
                      <OFFSET_PER_SYMBOL AAL="1.0" AAN="1.0" AAPL="1.0" ACN="1.0" ADSK="1.0" AIG="1.0" AL="1.0" AMD="1.0" AMGN="1.0" ANET="1.0" ATH="1.0" AZN="1.0" B="1.0" BA="1.0" BABA="1.0" BAC="1.0" BBBY="1.0" BBY="1.0" BMA="1.0" BMY="1.0" BUD="1.0" BURL="1.0" C="1.0" CAR="1.0" CCL="1.0" CGC="1.0" CHGG="1.0" CHWY="1.0" CLEU="1.0" CNQ="1.0" COUP="1.0" CRM="1.0" CRSP="1.0" CRWD="1.0" CSCO="1.0" CWT="1.0" CXO="1.0" DBX="1.0" DGX="1.0" DOCU="1.0" EBAY="1.0" EDTK="1.0" EIDX="1.0" EOG="1.0" ESS="1.0" ETFC="1.0" ETSY="1.0" FARO="1.0" FEDU="1.0" FIVN="1.0" G="1.0" GKOS="1.0" GLPG="1.0" GS="1.0" ICPT="1.0" INTC="1.0" JBLU="1.0" JCI="1.0" JNUG="1.0" JWN="1.0" KL="1.0" KO="1.0" KOD="1.0" KWEB="1.0" LHX="1.0" LITE="1.0" LYFT="1.0" MCD="1.0" MEDP="1.0" MHK="1.0" MRNA="1.0" MRTN="1.0" MTN="1.0" MU="1.0" NCLH="1.0" NKLA="1.0" NTNX="1.0" NTRS="1.0" NVAX="1.0" NVDA="1.0" OSTK="1.0" OTTR="1.0" PANW="1.0" PDD="1.0" PENN="1.0" PFE="1.0" PHI="1.0" PLNT="1.0" PTON="1.0" QCOM="1.0" RCL="1.0" ROKU="1.0" SHAK="1.0" SNAP="1.0" SPXL="1.0" SPY="1.0" SQ="1.0" STZ="1.0" SYK="1.0" TLRY="1.0" TNDM="1.0" TRGP="1.0" TSLA="1.0" TWTR="1.0" UAL="1.0" ULTA="1.0" V="1.0" VEC="1.0" VEEV="1.0" VIX="1.0" VRSN="1.0" VZ="1.0" W="1.0" WAFU="1.0" WFC="1.0" WYNN="1.0" YETI="1.0" Z="1.0" ZBRA="1.0" ZM="1.0"/>
                    </TRG_0>
                    <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-1.0" TRG_TIF="DAY">
                      <OFFSET_PER_SYMBOL AAL="-1.0" AAN="-1.0" AAPL="-1.0" ACN="-1.0" ADSK="-1.0" AIG="-1.0" AL="-1.0" AMD="-1.0" AMGN="-1.0" ANET="-1.0" ATH="-1.0" AZN="-1.0" B="-1.0" BA="-1.0" BABA="-1.0" BAC="-1.0" BBBY="-1.0" BBY="-1.0" BMA="-1.0" BMY="-1.0" BUD="-1.0" BURL="-1.0" C="-1.0" CAR="-1.0" CCL="-1.0" CGC="-1.0" CHGG="-1.0" CHWY="-1.0" CLEU="-1.0" CNQ="-1.0" COUP="-1.0" CRM="-1.0" CRSP="-1.0" CRWD="-1.0" CSCO="-1.0" CWT="-1.0" CXO="-1.0" DBX="-1.0" DGX="-1.0" DOCU="-1.0" EBAY="-1.0" EDTK="-1.0" EIDX="-1.0" EOG="-1.0" ESS="-1.0" ETFC="-1.0" ETSY="-1.0" FARO="-1.0" FEDU="-1.0" FIVN="-1.0" G="-1.0" GKOS="-1.0" GLPG="-1.0" GS="-1.0" ICPT="-1.0" INTC="-1.0" JBLU="-1.0" JCI="-1.0" JNUG="-1.0" JWN="-1.0" KL="-1.0" KO="-1.0" KOD="-1.0" KWEB="-1.0" LHX="-1.0" LITE="-1.0" LYFT="-1.0" MCD="-1.0" MEDP="-1.0" MHK="-1.0" MRNA="-1.0" MRTN="-1.0" MTN="-1.0" MU="-1.0" NCLH="-1.0" NKLA="-1.0" NTNX="-1.0" NTRS="-1.0" NVAX="-1.0" NVDA="-1.0" OSTK="-1.0" OTTR="-1.0" PANW="-1.0" PDD="-1.0" PENN="-1.0" PFE="-1.0" PHI="-1.0" PLNT="-1.0" PTON="-1.0" QCOM="-1.0" RCL="-1.0" ROKU="-1.0" SHAK="-1.0" SNAP="-1.0" SPXL="-1.0" SPY="-1.0" SQ="-1.0" STZ="-1.0" SYK="-1.0" TLRY="-1.0" TNDM="-1.0" TRGP="-1.0" TSLA="-1.0" TWTR="-1.0" UAL="-1.0" ULTA="-1.0" V="-1.0" VEC="-1.0" VEEV="-1.0" VIX="-1.0" VRSN="-1.0" VZ="-1.0" W="-1.0" WAFU="-1.0" WFC="-1.0" WYNN="-1.0" YETI="-1.0" Z="-1.0" ZBRA="-1.0" ZM="-1.0"/>
                    </TRG_1>
                    <_2>
                      <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="2.0" TRG_TIF="DAY">
                        <OFFSET_PER_SYMBOL AAL="2.0" AAN="2.0" AAPL="2.0" ACN="2.0" ADSK="2.0" AIG="2.0" AL="2.0" AMD="2.0" AMGN="2.0" ANET="2.0" ATH="2.0" AZN="2.0" B="2.0" BA="2.0" BABA="2.0" BAC="2.0" BBBY="2.0" BBY="2.0" BMA="2.0" BMY="2.0" BUD="2.0" BURL="2.0" C="2.0" CAR="2.0" CCL="2.0" CGC="2.0" CHGG="2.0" CHWY="2.0" CLEU="2.0" CNQ="2.0" COUP="2.0" CRM="2.0" CRSP="2.0" CRWD="2.0" CSCO="2.0" CWT="2.0" CXO="2.0" DBX="2.0" DGX="2.0" DOCU="2.0" EBAY="2.0" EDTK="2.0" EIDX="2.0" EOG="2.0" ESS="2.0" ETFC="2.0" ETSY="2.0" FARO="2.0" FEDU="2.0" FIVN="2.0" G="2.0" GKOS="2.0" GLPG="2.0" GS="2.0" ICPT="2.0" INTC="2.0" JBLU="2.0" JCI="2.0" JNUG="2.0" JWN="2.0" KL="2.0" KO="2.0" KOD="2.0" KWEB="2.0" LHX="2.0" LITE="2.0" LYFT="2.0" MCD="2.0" MEDP="2.0" MHK="2.0" MRNA="2.0" MRTN="2.0" MTN="2.0" MU="2.0" NCLH="2.0" NKLA="2.0" NTNX="2.0" NTRS="2.0" NVAX="2.0" NVDA="2.0" OSTK="2.0" OTTR="2.0" PANW="2.0" PDD="2.0" PENN="2.0" PFE="2.0" PHI="2.0" PLNT="2.0" PTON="2.0" QCOM="2.0" RCL="2.0" ROKU="2.0" SHAK="2.0" SNAP="2.0" SPXL="2.0" SPY="2.0" SQ="2.0" STZ="2.0" SYK="2.0" TLRY="2.0" TNDM="2.0" TRGP="2.0" TSLA="2.0" TWTR="2.0" UAL="2.0" ULTA="2.0" V="2.0" VEC="2.0" VEEV="2.0" VIX="2.0" VRSN="2.0" VZ="2.0" W="2.0" WAFU="2.0" WFC="2.0" WYNN="2.0" YETI="2.0" Z="2.0" ZBRA="2.0" ZM="2.0"/>
                      </TRG_0>
                      <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-2.0" TRG_TIF="DAY">
                        <OFFSET_PER_SYMBOL AAL="-2.0" AAN="-2.0" AAPL="-2.0" ACN="-2.0" ADSK="-2.0" AIG="-2.0" AL="-2.0" AMD="-2.0" AMGN="-2.0" ANET="-2.0" ATH="-2.0" AZN="-2.0" B="-2.0" BA="-2.0" BABA="-2.0" BAC="-2.0" BBBY="-2.0" BBY="-2.0" BMA="-2.0" BMY="-2.0" BUD="-2.0" BURL="-2.0" C="-2.0" CAR="-2.0" CCL="-2.0" CGC="-2.0" CHGG="-2.0" CHWY="-2.0" CLEU="-2.0" CNQ="-2.0" COUP="-2.0" CRM="-2.0" CRSP="-2.0" CRWD="-2.0" CSCO="-2.0" CWT="-2.0" CXO="-2.0" DBX="-2.0" DGX="-2.0" DOCU="-2.0" EBAY="-2.0" EDTK="-2.0" EIDX="-2.0" EOG="-2.0" ESS="-2.0" ETFC="-2.0" ETSY="-2.0" FARO="-2.0" FEDU="-2.0" FIVN="-2.0" G="-2.0" GKOS="-2.0" GLPG="-2.0" GS="-2.0" ICPT="-2.0" INTC="-2.0" JBLU="-2.0" JCI="-2.0" JNUG="-2.0" JWN="-2.0" KL="-2.0" KO="-2.0" KOD="-2.0" KWEB="-2.0" LHX="-2.0" LITE="-2.0" LYFT="-2.0" MCD="-2.0" MEDP="-2.0" MHK="-2.0" MRNA="-2.0" MRTN="-2.0" MTN="-2.0" MU="-2.0" NCLH="-2.0" NKLA="-2.0" NTNX="-2.0" NTRS="-2.0" NVAX="-2.0" NVDA="-2.0" OSTK="-2.0" OTTR="-2.0" PANW="-2.0" PDD="-2.0" PENN="-2.0" PFE="-2.0" PHI="-2.0" PLNT="-2.0" PTON="-2.0" QCOM="-2.0" RCL="-2.0" ROKU="-2.0" SHAK="-2.0" SNAP="-2.0" SPXL="-2.0" SPY="-2.0" SQ="-2.0" STZ="-2.0" SYK="-2.0" TLRY="-2.0" TNDM="-2.0" TRGP="-2.0" TSLA="-2.0" TWTR="-2.0" UAL="-2.0" ULTA="-2.0" V="-2.0" VEC="-2.0" VEEV="-2.0" VIX="-2.0" VRSN="-2.0" VZ="-2.0" W="-2.0" WAFU="-2.0" WFC="-2.0" WYNN="-2.0" YETI="-2.0" Z="-2.0" ZBRA="-2.0" ZM="-2.0"/>
                      </TRG_1>
                    </_2>
                    <_3>
                      <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="3.0" TRG_TIF="DAY">
                        <OFFSET_PER_SYMBOL AAL="3.0" AAN="3.0" AAPL="3.0" ACN="3.0" ADSK="3.0" AIG="3.0" AL="3.0" AMD="3.0" AMGN="3.0" ANET="3.0" ATH="3.0" AZN="3.0" B="3.0" BA="3.0" BABA="3.0" BAC="3.0" BBBY="3.0" BBY="3.0" BMA="3.0" BMY="3.0" BUD="3.0" BURL="3.0" C="3.0" CAR="3.0" CCL="3.0" CGC="3.0" CHGG="3.0" CHWY="3.0" CLEU="3.0" CNQ="3.0" COUP="3.0" CRM="3.0" CRSP="3.0" CRWD="3.0" CSCO="3.0" CWT="3.0" CXO="3.0" DBX="3.0" DGX="3.0" DOCU="3.0" EBAY="3.0" EDTK="3.0" EIDX="3.0" EOG="3.0" ESS="3.0" ETFC="3.0" ETSY="3.0" FARO="3.0" FEDU="3.0" FIVN="3.0" G="3.0" GKOS="3.0" GLPG="3.0" GS="3.0" ICPT="3.0" INTC="3.0" JBLU="3.0" JCI="3.0" JNUG="3.0" JWN="3.0" KL="3.0" KO="3.0" KOD="3.0" KWEB="3.0" LHX="3.0" LITE="3.0" LYFT="3.0" MCD="3.0" MEDP="3.0" MHK="3.0" MRNA="3.0" MRTN="3.0" MTN="3.0" MU="3.0" NCLH="3.0" NKLA="3.0" NTNX="3.0" NTRS="3.0" NVAX="3.0" NVDA="3.0" OSTK="3.0" OTTR="3.0" PANW="3.0" PDD="3.0" PENN="3.0" PFE="3.0" PHI="3.0" PLNT="3.0" PTON="3.0" QCOM="3.0" RCL="3.0" ROKU="3.0" SHAK="3.0" SNAP="3.0" SPXL="3.0" SPY="3.0" SQ="3.0" STZ="3.0" SYK="3.0" TLRY="3.0" TNDM="3.0" TRGP="3.0" TSLA="3.0" TWTR="3.0" UAL="3.0" ULTA="3.0" V="3.0" VEC="3.0" VEEV="3.0" VIX="3.0" VRSN="3.0" VZ="3.0" W="3.0" WAFU="3.0" WFC="3.0" WYNN="3.0" YETI="3.0" Z="3.0" ZBRA="3.0" ZM="3.0"/>
                      </TRG_0>
                      <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-3.0" TRG_TIF="DAY">
                        <OFFSET_PER_SYMBOL AAL="-3.0" AAN="-3.0" AAPL="-3.0" ACN="-3.0" ADSK="-3.0" AIG="-3.0" AL="-3.0" AMD="-3.0" AMGN="-3.0" ANET="-3.0" ATH="-3.0" AZN="-3.0" B="-3.0" BA="-3.0" BABA="-3.0" BAC="-3.0" BBBY="-3.0" BBY="-3.0" BMA="-3.0" BMY="-3.0" BUD="-3.0" BURL="-3.0" C="-3.0" CAR="-3.0" CCL="-3.0" CGC="-3.0" CHGG="-3.0" CHWY="-3.0" CLEU="-3.0" CNQ="-3.0" COUP="-3.0" CRM="-3.0" CRSP="-3.0" CRWD="-3.0" CSCO="-3.0" CWT="-3.0" CXO="-3.0" DBX="-3.0" DGX="-3.0" DOCU="-3.0" EBAY="-3.0" EDTK="-3.0" EIDX="-3.0" EOG="-3.0" ESS="-3.0" ETFC="-3.0" ETSY="-3.0" FARO="-3.0" FEDU="-3.0" FIVN="-3.0" G="-3.0" GKOS="-3.0" GLPG="-3.0" GS="-3.0" ICPT="-3.0" INTC="-3.0" JBLU="-3.0" JCI="-3.0" JNUG="-3.0" JWN="-3.0" KL="-3.0" KO="-3.0" KOD="-3.0" KWEB="-3.0" LHX="-3.0" LITE="-3.0" LYFT="-3.0" MCD="-3.0" MEDP="-3.0" MHK="-3.0" MRNA="-3.0" MRTN="-3.0" MTN="-3.0" MU="-3.0" NCLH="-3.0" NKLA="-3.0" NTNX="-3.0" NTRS="-3.0" NVAX="-3.0" NVDA="-3.0" OSTK="-3.0" OTTR="-3.0" PANW="-3.0" PDD="-3.0" PENN="-3.0" PFE="-3.0" PHI="-3.0" PLNT="-3.0" PTON="-3.0" QCOM="-3.0" RCL="-3.0" ROKU="-3.0" SHAK="-3.0" SNAP="-3.0" SPXL="-3.0" SPY="-3.0" SQ="-3.0" STZ="-3.0" SYK="-3.0" TLRY="-3.0" TNDM="-3.0" TRGP="-3.0" TSLA="-3.0" TWTR="-3.0" UAL="-3.0" ULTA="-3.0" V="-3.0" VEC="-3.0" VEEV="-3.0" VIX="-3.0" VRSN="-3.0" VZ="-3.0" W="-3.0" WAFU="-3.0" WFC="-3.0" WYNN="-3.0" YETI="-3.0" Z="-3.0" ZBRA="-3.0" ZM="-3.0"/>
                      </TRG_1>
                    </_3>
                  </TRADE>
                </GADGET>
              </MODELNODE2>
            </MODELNODE1>
          </MODELNODE0>
        </FLEX>
        <FOREX_TRADER COLUMN_COUNT="2" COMPONENTS="FX_BP,FX_CASH,FX_UPL,FX_FPL,FX_EQUITY,FX_MARGIN,FX_RISK_LEVEL" CURRENT_GRID_NAME="mah_anchor2" DEFAULT_TYPE="DASHBOARD" ITEM_DISPLAY_MODE="HIDE_UNSED" ORDER_ENTRY_EXPANDED="false" ROW_COUNT="1">
          <ACTIVE_ACCOUNT COMPONENTS="FX_BP,FX_CASH,FX_UPL,FX_FPL,FX_EQUITY,FX_MARGIN,FX_RISK_LEVEL" ITEM_DISPLAY_MODE="HIDE_UNSED"/>
          <CELL0 ROWSPANELWEIGHT="1.0" ROWWEIGHT0="1.0" ROWWEIGHT1="1.0" SELECTED_TYPE="CHART" SIDEBAR_IS_ACTIVE="true" SYMBOL="ZM" SYMBOL_GROUP="1" TRADE_BUTTONS_MIGRATED="true">
            <ACTIVETRADER CELL_IDS="POSITION_BREAKDOWN;NET_POSITION;AVERAGE_PRICE;PL_OPEN;PL_DAY" COLUMNS="TRADE_AMOUNT:100:,BUY_ORDER:150:,BIDSIZE:60:,PRICE:100:,ASKSIZE:60:,SELL_ORDER:150:" ENABLED="true" SHOW_STUDY_MARKERS="false" SYMBOL="AAPL" SYMBOL_GROUP="1" VERTICAL="false" VISIBLE="false" WEIGHT="2.0" ZOOMING_STEPS="1">
              <POSITION_SUMMARY_PANEL CELL_IDS="POSITION_BREAKDOWN;NET_POSITION;AVERAGE_PRICE;PL_OPEN;PL_DAY" ENABLED="true"/>
              <TRADE_BUTTONS_CONFIG CONFIGURATION_NAME="THREE_LEVELS" ORDER_RULES_SET="STOCK" ORDER_TYPE="LIMIT" OS_AUTO="false" OS_EXPANDED="true" OS_TIF="DAY" QTY="200.0" QTY_STEP="1.0" TEMPLATE="THREE_LEVELS" TRADE_BUTTONS="BUY_MKT;SELL_MKT;MULTI_CANCEL;REVERSE;FLAT;SECOND_LINE;QUANTITY_WITH_BUTTONS;ORDER_TEMPLATE;AUTO_SEND;ORDER_SETUP">
                <OCO_STOP>
                  <TRG_0 TRG_ENBL="true" TRG_LINK="ASK_BID" TRG_OFFSET_MODE="TICK" TRG_OT="STOP" TRG_SETUP="10.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL AAL="10.0" AAPL="10.0" ADBE="10.0" AMZN="10.0" BA="10.0" BBBY="10.0" CAKE="10.0" CLDR="10.0" CSCO="10.0" EVRG="10.0" GOED="10.0" HTZ="10.0" IDXX="10.0" INTC="10.0" INTU="10.0" LUV="10.0" NIO="10.0" NVDA="10.0" SNAP="10.0" TAP="10.0" TSLA="10.0" UAL="10.0" UIS="10.0" VIX="10.0" WKHS="10.0" ZM="10.0"/>
                  </TRG_0>
                </OCO_STOP>
                <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="TICK" TRG_OT="LIMIT" TRG_SETUP="1.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AAL="1.0" AAPL="1.0" ADBE="1.0" AMZN="1.0" BA="1.0" BBBY="1.0" CAKE="1.0" CLDR="1.0" CSCO="1.0" EVRG="1.0" GOED="1.0" HTZ="1.0" IDXX="1.0" INTC="1.0" INTU="1.0" LUV="1.0" NIO="1.0" NVDA="1.0" SNAP="1.0" TAP="1.0" TSLA="1.0" UAL="1.0" UIS="1.0" VIX="1.0" WKHS="1.0" ZM="1.0"/>
                </TRG_0>
                <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-1.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AAL="-1.0" AAPL="-1.0" ADBE="-1.0" AMZN="-1.0" BA="-1.0" BBBY="-1.0" CAKE="-1.0" CLDR="-1.0" CSCO="-1.0" EVRG="-1.0" GOED="-1.0" HTZ="-1.0" IDXX="-1.0" INTC="-1.0" INTU="-1.0" LUV="-1.0" NIO="-1.0" NVDA="-1.0" SNAP="-1.0" TAP="-1.0" TSLA="-1.0" UAL="-1.0" UIS="-1.0" VIX="-1.0" WKHS="-1.0" ZM="-1.0"/>
                </TRG_1>
                <_2>
                  <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="2.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL AAL="2.0" AAPL="2.0" ADBE="2.0" AMZN="2.0" BA="2.0" BBBY="2.0" CAKE="2.0" CLDR="2.0" CSCO="2.0" EVRG="2.0" GOED="2.0" HTZ="2.0" IDXX="2.0" INTC="2.0" INTU="2.0" LUV="2.0" NIO="2.0" NVDA="2.0" SNAP="2.0" TAP="2.0" TSLA="2.0" UAL="2.0" UIS="2.0" VIX="2.0" WKHS="2.0" ZM="2.0"/>
                  </TRG_0>
                  <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-2.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL AAL="-2.0" AAPL="-2.0" ADBE="-2.0" AMZN="-2.0" BA="-2.0" BBBY="-2.0" CAKE="-2.0" CLDR="-2.0" CSCO="-2.0" EVRG="-2.0" GOED="-2.0" HTZ="-2.0" IDXX="-2.0" INTC="-2.0" INTU="-2.0" LUV="-2.0" NIO="-2.0" NVDA="-2.0" SNAP="-2.0" TAP="-2.0" TSLA="-2.0" UAL="-2.0" UIS="-2.0" VIX="-2.0" WKHS="-2.0" ZM="-2.0"/>
                  </TRG_1>
                </_2>
                <_3>
                  <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="3.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL AAL="3.0" AAPL="3.0" ADBE="3.0" AMZN="3.0" BA="3.0" BBBY="3.0" CAKE="3.0" CLDR="3.0" CSCO="3.0" EVRG="3.0" GOED="3.0" HTZ="3.0" IDXX="3.0" INTC="3.0" INTU="3.0" LUV="3.0" NIO="3.0" NVDA="3.0" SNAP="3.0" TAP="3.0" TSLA="3.0" UAL="3.0" UIS="3.0" VIX="3.0" WKHS="3.0" ZM="3.0"/>
                  </TRG_0>
                  <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-3.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL AAL="-3.0" AAPL="-3.0" ADBE="-3.0" AMZN="-3.0" BA="-3.0" BBBY="-3.0" CAKE="-3.0" CLDR="-3.0" CSCO="-3.0" EVRG="-3.0" GOED="-3.0" HTZ="-3.0" IDXX="-3.0" INTC="-3.0" INTU="-3.0" LUV="-3.0" NIO="-3.0" NVDA="-3.0" SNAP="-3.0" TAP="-3.0" TSLA="-3.0" UAL="-3.0" UIS="-3.0" VIX="-3.0" WKHS="-3.0" ZM="-3.0"/>
                  </TRG_1>
                </_3>
              </TRADE_BUTTONS_CONFIG>
            </ACTIVETRADER>
            <BIG_BUTTONS VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <CHART COLUMN_COUNT="1" CONFIGURATION="@v9@%0:com.devexperts.toschart.model,1:com.devexperts.tos.chartdata,2:com.devexperts.tos.thinkscript.data,3:java.awt,4:com.devexperts.toschart.control.subgraph,5:com.devexperts.toschart.elstudies,6:com.devexperts.toschart.script,7:com.devexperts.tos.thinkscript%owner{chartAggregationPeriods:ChartAggregationPeriodArray0{12::ChartAggregationPeriod0},chartAggregationPeriods=@ChartAggregationPeriodArray0,colors{6::CustomColor0,2::CustomColor1}}#com.devexperts.toschart.core.ChartModel{disabledMessageTypes.+(!%0.BuiltinExplanationMessage$MessageType.findByCode(1)),encodedMixinsState=&quot;{\&quot;common\&quot;:{\&quot;DRAWING_SETS\&quot;:\&quot;{}\&quot;},\&quot;state_props\&quot;:{\&quot;state_type\&quot;:\&quot;REGULAR\&quot;},\&quot;monkey_bars_exp\&quot;:{\&quot;LikefolioMixin\&quot;:\&quot;{\\\&quot;paintingSettings\\\&quot;:{\\\&quot;neutralSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;positiveSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;negativeSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;sentimentSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true}},\\\&quot;shownDivisions\\\&quot;:[],\\\&quot;allDivisions\\\&quot;:[]}\&quot;},\&quot;monkey_bars\&quot;:{},\&quot;seasonality\&quot;:{},\&quot;regular\&quot;:{\&quot;DescriberMixin\&quot;:\&quot;{\\\&quot;visibility\\\&quot;:\\\&quot;HIDE_PANEL\\\&quot;,\\\&quot;studiesMode\\\&quot;:\\\&quot;HIDE_STUDIES\\\&quot;}\&quot;,\&quot;LikefolioMixin\&quot;:\&quot;{\\\&quot;paintingSettings\\\&quot;:{\\\&quot;neutralSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;positiveSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;negativeSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;sentimentSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true}},\\\&quot;shownDivisions\\\&quot;:[],\\\&quot;allDivisions\\\&quot;:[]}\&quot;}}&quot;,encodedPatternsModel=&quot;{\&quot;showPatterns\&quot;:true,\&quot;models\&quot;:[]}&quot;,groupId=&quot;default&quot;,styleSettings{chartAggregationSettings.timeAggregationSettings=!%0.TimeFrameAggregationSettings.createTickOrTimeAggregation(!%1.ChartRange.findByCode(&quot;DAY4&quot;),@ChartAggregationPeriod0),commonStyleSettings{colorSettings{backgroundColor=!%2.CustomColor.findByIndex(&quot;108&quot;),candleTypeColors.fillUp=&lt;T,gridTypeColor=#%2.CustomColor(#%3.Color(51,51,255,255)),monkeyProfileTypeColors.defaultRowHeight=&lt;F,mpExpandedTypeColors.defaultRowHeight=&lt;F,volumeColor=#%2.CustomColor(#%3.Color(51,0,255,255))},expansion{down=10,right=10,up=10},fitArrowsToScreen=&lt;F,fitStudiesToScreen=&lt;F,leftAxisEnabled=&lt;F,manualAxisRegulator{maxValue=516.23093428d,minValue=449.35896572d},orderShowMode=!%0.OrderShowType.valueOf(*%0.OrderShowType.class,&quot;DO_NOT_SHOW&quot;),overlappedVolume=&lt;T,percentageBubbles=&lt;F,previousRightExpansion=10,shortCuts{^(&quot;Time Zone&quot;,&lt;F),^(&quot;Show Expiration Friday &quot;,&lt;F),^(&quot;Chart mode&quot;,&lt;F),^(&quot;Keep Price Zoom&quot;,&lt;F),^(&quot;enableLeftAxis&quot;,&lt;T),^(&quot;Fit expected price ranges&quot;,&lt;F),^(&quot;emphasizeDigitMPExpanded&quot;,&lt;F),^(&quot;showWicksCandleTrend&quot;,&lt;F),^(&quot;highlightEarnings&quot;,&lt;F),^(&quot;synchronizeCrosshair&quot;,&lt;F),^(&quot;myToolsMode&quot;,&lt;T),^(&quot;seasonalityStyle&quot;,&lt;F),^(&quot;Show Price Subgraph&quot;,&lt;F),^(&quot;closePriceLevel&quot;,&lt;F),^(&quot;Color Volume As Symbol Ticks&quot;,&lt;T),^(&quot;highlightPhantomRBars&quot;,&lt;F),^(&quot;Cross type &quot;,&lt;F),^(&quot;Fit Studies to Screen&quot;,&lt;T),^(&quot;Chart type &quot;,&lt;F),^(&quot;Fit Orders&quot;,&lt;F),^(&quot;Bubbles as Percentage&quot;,&lt;F),^(&quot;hideStatusString&quot;,&lt;F),^(&quot;Show Studies &quot;,&lt;F),^(&quot;showWicksHeikinAshi&quot;,&lt;F),^(&quot;Alerts&quot;,&lt;F),^(&quot;Chart scale&quot;,&lt;F),^(&quot;Fit High/Low&quot;,&lt;F),^(&quot;Orders&quot;,&lt;F),^(&quot;Use Log Scale &quot;,&lt;T),^(&quot;Fit Study Markers to Screen&quot;,&lt;T),^(&quot;Fit Alerts&quot;,&lt;F),^(&quot;Fit patterns&quot;,&lt;F),^(&quot;Percentage View&quot;,&lt;T),^(&quot;Make Auto Zoom &quot;,&lt;F),^(&quot;Show Year Marking Line&quot;,&lt;F),^(&quot;Show Rollover Line&quot;,&lt;T),^(&quot;Show High/Low Bubbles &quot;,&lt;T),^(&quot;Snap mode&quot;,&lt;F),^(&quot;highlightStudies&quot;,&lt;F),^(&quot;Overlapped Volume&quot;,&lt;T),^(&quot;Show Symbol Logo&quot;,&lt;F),^(&quot;Show Last Price Bubble &quot;,&lt;F),^(&quot;emphasizeDigitMP&quot;,&lt;F),^(&quot;Show grid&quot;,&lt;T),^(&quot;databoxMode&quot;,&lt;F),^(&quot;Synchronize Drawings&quot;,&lt;F),^(&quot;showWicksCandle&quot;,&lt;F),^(&quot;Show trades&quot;,&lt;F),^(&quot;highlightSeasons&quot;,&lt;F),^(&quot;Extend Order/Alert Line to Left&quot;,&lt;F)},showBubbles=&lt;F,showDayRollover=&lt;F,showYearMarkingLine=&lt;F,step=1.5220700152207d},forexStyleSettings.shortCuts.^(&quot;Show Volume Subgraph&quot;,&lt;F),futuresStyleSettings{adjustForContractChanges=&lt;T,highlightExtendedHours=&lt;T,shortCuts{^(&quot;adjustForContractChanges&quot;,&lt;F),^(&quot;Show Open Interest&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,&lt;T),^(&quot;showContractChangeEvents&quot;,&lt;F),^(&quot;futures_daily_close_price&quot;,&lt;F),^(&quot;Show Options&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,&lt;T),^(&quot;startAtMarketOpen&quot;,&lt;F)}},optionsStyleSettings{shortCuts{^(&quot;Show Open Interest&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,&lt;T),^(&quot;Show Theo Price&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,&lt;T),^(&quot;startAtMarketOpen&quot;,&lt;F)},showTheoPrice=&lt;F,tradingHoursOnly=&lt;T},otherStyleSettings.shortCuts{^(&quot;Show Social Sentiment&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,&lt;T),^(&quot;Price type&quot;,&lt;F),^(&quot;Show Options&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,&lt;T),^(&quot;Show Corporate Actions&quot;,&lt;F),^(&quot;Show CNBC Video&quot;,&lt;F),^(&quot;startAtMarketOpen&quot;,&lt;F),^(&quot;adjustForDividends&quot;,&lt;F)},setsIdentifiers.styleSetName=&quot;Style name6&quot;},subgraphModels{!get(#%4.SubgraphId(&quot;Symbol&quot;)){height=567,storableIndicators{+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# AD Label\n# Mobius\n# Chat Room Request 04.26.2016\n\ninput SYMB = \&quot;$ADSPD\&quot;;\n\ndef Data = close(symbol = \&quot;$ADSPD\&quot;, period = AggregationPeriod.WEEK);\naddLabel(1, \&quot;AD = \&quot; + Data, if Data &lt; 0 \nthen color.red\nelse color.green);\n# End Code&quot;,name=&quot;_36736c7b_da04_3b0b_9378_380c438f3e0d&quot;})),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;### xiuyu vwap cross signal with abnormal volume\n\n#declare hide_on_daily;\n\n####\n#MTF\ndef tFrame = GetAggregationPeriod();\ninput timeFrame = {default DAY, WEEK, MONTH};\ninput aggregationPeriod = AggregationPeriod.HOUR;\ninput useAutoAggegate = yes;\n\n\n\n# Variables:\n#def  =if (useAutoAggegate) then open(period = aggregationPeriod1) else open;\n\ndef AutoAGG = if tFrame &lt;  AggregationPeriod.DAY then AggregationPeriod.DAY\n             else if  tFrame &lt; AggregationPeriod.WEEK then AggregationPeriod.WEEK\n                  else AggregationPeriod.MONTH;\ndef AGG = if (!useAutoAggegate) then aggregationPeriod else AutoAGG;\n\ndef testTimeFrames = if tFrame &lt; AGG  then yes else no;\n\n#AddLabel(useAutoAggegate, if testTimeFrames  then \&quot;Time Frames Are Correct\&quot; else \&quot;Time Frames Are \n\ninput length = 10; #average volume lenght\ninput volMinimum = 50000;\ninput showPriceColor = yes;\ninput factor = 1.50; #show what factors to avgvolume \ninput nDevUp = 2.0;\ninput nDevDn = -2.0;\n\ndef avgvolume = Average(volume, length) * factor;\n\n\n#plot vwap = reference VWAP( AGG);\n#######\n\n\ndef cap = GetAggregationPeriod();\ndef errorInAggregation =\n    timeFrame == timeFrame.DAY and cap &gt;= AggregationPeriod.WEEK or\n    timeFrame == timeFrame.WEEK and cap &gt;= AggregationPeriod.MONTH;\nAssert(!errorInAggregation, \&quot;timeFrame should be not less than current chart aggregation period\&quot;);\n\ndef yyyyMmDd = GetYYYYMMDD();\ndef periodIndx;\nswitch (timeFrame) {\ncase DAY:\n    periodIndx = yyyyMmDd;\ncase WEEK:\n    periodIndx = Floor((DaysFromDate(First(yyyyMmDd)) + GetDayOfWeek(First(yyyyMmDd))) / 7);\ncase MONTH:\n    periodIndx = RoundDown(yyyyMmDd / 100, 0);\n}\ndef isPeriodRolled = CompoundValue(1, periodIndx != periodIndx[1], yes);\n\ndef volumeSum;\ndef volumeVwapSum;\ndef volumeVwap2Sum;\n\nif (isPeriodRolled) {\n    volumeSum = volume;\n    volumeVwapSum = volume * vwap;\n    volumeVwap2Sum = volume * Sqr(vwap);\n} else {\n    volumeSum = CompoundValue(1, volumeSum[1] + volume, volume);\n    volumeVwapSum = CompoundValue(1, volumeVwapSum[1] + volume * vwap, volume * vwap);\n    volumeVwap2Sum = CompoundValue(1, volumeVwap2Sum[1] + volume * Sqr(vwap), volume * Sqr(vwap));\n}\ndef price = volumeVwapSum / volumeSum;\ndef deviation = Sqrt(Max(volumeVwap2Sum / volumeSum - Sqr(price), 0));\n\nplot VWAP = price;\nplot UpperBand = price + nDevUp * deviation;\nplot LowerBand = price + nDevDn * deviation;\nplot UpperBand2 = price + (1+nDevUp) * deviation;\nplot LowerBand2 = price +(-1+ nDevDn) * deviation;\ndef sdvP1=  price + deviation;\ndef sdvN1=  price - deviation;\n#####\n\n\nplot SD1up =close[1] crosses above sdvp1 and ( open&lt; close) and low&gt;sdvp1;\nSD1up.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nSD1up.SetDefaultColor(Color.graY);\nSD1up.SetLineWeight(2);\nAssignPriceColor(if SD1up and showPriceColor and open&lt; close then Color.violet else Color.CURRENT);\n\nAddLabel(yes, \&quot;VWAP= \&quot; + astext(VWAP), if VWAP&lt; close then Color.LIGHT_GREEN else if VWAP&gt; close then color.LIGHT_red else Color.GRAY);\n#AddLabel(yes, \&quot;VWAP= \&quot; + astext(VWAP), Color.White);\ndef vwDif= close- VWAP;\n#AddLabel(yes, \&quot; \&quot;+astext(vwDif), if vwDif&gt; 0 then Color.LIGHT_GREEN else if vwDif&lt; 0 then color.LIGHT_red else Color.GRAY);\nAddLabel(yes and vwDif&gt;0, \&quot; +\&quot;+astext(vwDif),  Color.LIGHT_GREEN );\nAddLabel(yes and vwDif&lt;=0, \&quot; \&quot;+astext(vwDif),  if vwDif&lt; 0 then color.LIGHT_red else Color.LIGHT_GRAY);\n\ninput vwapLableAll =yes;\nAddLabel(vwapLableAll, \&quot;VWAP +1= \&quot; + astext(sdvP1), if sdvP1&lt; close then Color.LIGHT_GREEN else if sdvP1&gt; close then color.LIGHT_red else Color.GRAY);\n\nAddLabel(vwapLableAll, \&quot;VWAP +2= \&quot; + astext(UpperBand), if UpperBand&lt; close then Color.LIGHT_GREEN else if UpperBand&gt; close then color.LIGHT_red else Color.GRAY);\nAddLabel(vwapLableAll, \&quot;VWAP +3= \&quot; + astext(UpperBand2), if UpperBand2&lt; close then Color.LIGHT_GREEN else if UpperBand2&gt; close then color.LIGHT_red else Color.GRAY);\n\nAddLabel(vwapLableAll, \&quot;VWAP -1= \&quot; + astext(sdvN1), if sdvN1&lt; close then Color.LIGHT_GREEN else if sdvN1&gt; close then color.LIGHT_red else Color.GRAY);\nAddLabel(vwapLableAll, \&quot;VWAP -2= \&quot; + astext(LowerBand), if LowerBand&lt; close then Color.LIGHT_GREEN else if LowerBand&gt; close then color.LIGHT_red else Color.GRAY);\nAddLabel(vwapLableAll, \&quot;VWAP -3= \&quot; + astext(LowerBand2), if LowerBand2&lt; close then Color.LIGHT_GREEN else if LowerBand2&gt; close then color.LIGHT_red else Color.GRAY);\n\n#AddLabel(vwapLableAll, \&quot;VWAP R= \&quot; + astext(upperBand/sdvN1 -1)+\&quot;  \&quot;+astext(upperBand/lowerBand -1)+\&quot;  \&quot;+astext(upperBand2/lowerBand2 -1), if LowerBand&lt; close then Color.LIGHT_GREEN else if LowerBand&gt; close then color.LIGHT_red else Color.GRAY);\n\nAddLabel(vwapLableAll, \&quot;VWAP R= \&quot; + astext(upperBand/sdvN1 -1)+\&quot;  \&quot;+astext(upperBand/lowerBand -1)+\&quot;  \&quot;+astext(upperBand2/lowerBand2 -1), if LowerBand&lt; close then Color.LIGHT_GREEN else if LowerBand&gt; close then color.LIGHT_red else Color.GRAY);\n\n\n\ndef volCheck = volume &gt;= avgvolume &amp;&amp; volume &gt;= volMinimum &amp;&amp; volume &gt;= volume[1];\ndef isCross =  close crosses VWAP;\ndef abnormalSignal = isCross and volCheck;\n\n\nVWAP.SetDefaultColor(color.white);#(GetColor(0));\nplot signalup = if abnormalSignal and close &gt; VWAP then low else Double.NaN;\nsignalup.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nsignalup.SetDefaultColor(Color.CYAN);\nsignalup.SetLineWeight(2);\n\nplot signaldown =  if abnormalSignal and close &lt; VWAP then high else Double.NaN;\nsignaldown.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);\nsignaldown.SetDefaultColor(Color.CYAN);\nsignaldown.SetLineWeight(2);\n\nAssignPriceColor(if abnormalSignal and showPriceColor then Color.CYAN else Color.CURRENT);\n\n\n#####\nvwap.SetStyle(Curve.POINTS);\nUpperBand.SetDefaultColor(GetColor(0));\nLowerBand.SetDefaultColor(GetColor(0));\n\nUpperBand.SetStyle(Curve.POINTS);\nLowerBand.SetStyle(Curve.POINTS);\n\nUpperBand2.SetDefaultColor(Color.YELLOW);\nLowerBand2.SetDefaultColor(Color.YELLOW);\n\nUpperBand2.SetStyle(Curve.SHORT_DASH);\nLowerBand2.SetStyle(Curve.SHORT_DASH);\n#input AutoHide=yes;\n#def hideLower = if AutoHide then close &gt;vwap  else 0;;\n#def hideUpper = if AutoHide then  close &lt;vwap  else 0;#- deviation\n#addLabel(yes, \&quot;hide U\&quot;+hideUpper +\&quot; L\&quot;+hideLower);\n#UpperBand.setHiding(hideUpper);\n#LowerBand.setHiding(hideLower);\n#UpperBand.Hide();\n#LowerBand.Hide();\n#UpperBand2.Hide();\n#LowerBand2.Hide();&quot;,name=&quot;_740dc265_6e6e_38a5_ba0e_c0a058a5d552&quot;}){inputsMap:TreeMap0{^(&quot;volMinimum&quot;,500000)},inputsMap=@TreeMap0,plots{0:{paintingStrategy=2}}}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;\ninput fastLength = 12;\ninput slowLength = 26;\ninput MACDLength = 9;\n\n\ninput crossingType = {default above, below};\n#RSI\n\n\ninput over_Bought = 77;\ninput over_Sold = 20;\ninput RSIlength = 14;\ninput RSI_prev = 3; #previous bar to check\ninput averageType_rsi = AverageType.WILDERS;\n\ninput price = close;\ninput displace = 0;\n\n\n\n\n# Start EMA\n#MACDvolume weighted\n\ndef fastAvg = Sum(volume * price, fastLength) / Sum(volume, fastLength);\ndef slowAvg = Sum(volume * price, slowLength) / Sum(volume, slowLength);\ndef Value = fastAvg - slowAvg;\ndef Avg = ExpAverage(Value, MACDLength);\ndef Diff = Value - Avg;\ndef ZeroLine = 0;\n\n\n#############################################################################\n\n#def rsi_v = RSI(length = length, averageType = averageType_rsi);\ndef OverSold = over_Sold;\ndef OverBought = over_Bought;\n\ndef emaBull = price &gt; Avg;\ndef emaBear = price &lt; Avg;\n\n\n#############\n\n\n#def NetChgAvg = MovingAverage(averageType_rsi, price - price[1], length);\n#def TotChgAvg = MovingAverage(averageType_rsi, AbsValue(price - price[1]), length);\n\ndef NetChgAvg = MovingAverage(averageType_rsi, price - price[1], RSIlength);\ndef TotChgAvg = MovingAverage(averageType_rsi, AbsValue(price - price[1]), RSIlength);\ndef ChgRatio = if TotChgAvg != 0 then NetChgAvg / TotChgAvg else 0;\n\ndef RSI = 50 * (ChgRatio + 1);\n\n\n#################\n\n\n# Define Warning Signals\n#def bullish = RSI(length = RSIlength, averageType = averageType) &lt; over_Sold and emaBull and Value &gt;=0;\n#def bearish = RSI(length = RSIlength, averageType = averageType) &gt; over_Bought and emaBear and Value &lt;=0;\n#def bullish = (RSI crosses above over_Sold)  within 2 bars and   Diff &lt; Diff[1] and Diff &lt;= 0 and Value &gt;= 0;\n#def bearish = (RSI crosses below over_Bought) within 2 bars and  Diff &lt; Diff[1] and Diff &gt;= 0  and Value &lt;= 0;\n#############&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;\n\ndef sig_buy = ((RSI crosses above over_Sold)  within RSI_prev bars )and Diff &gt;= Diff[1] and Diff[1] &gt;= Diff[2]  and Diff &lt;= 0;# and Value &lt;= 0;\nplot signal_buy = sig_buy;\n\n\ndef sig_sell = ((RSI crosses below over_Bought) within RSI_prev bars) and  Diff &lt; Diff[1] and Diff[1] &gt;= Diff[2] and Diff &gt;= 0 ;# and Value &gt;= 0;\nplot signal_sell = sig_sell;\n\n\n\nsignal_buy.DefineColor(\&quot;Above\&quot;, GetColor(6));\nsignal_buy.DefineColor(\&quot;Below\&quot;, GetColor(8));\nsignal_buy.AssignValueColor(if crossingType == crossingType.above then signal_buy.Color(\&quot;Above\&quot;) else signal_buy.Color(\&quot;Below\&quot;));\nsignal_buy.setlineWeight(5);\nsignal_buy.SetPaintingStrategy(if crossingType == crossingType.above\n    then PaintingStrategy.BOOLEAN_ARROW_UP\n    else PaintingStrategy.BOOLEAN_ARROW_DOWN);\n\n#########\nsignal_sell.DefineColor(\&quot;Above\&quot;, GetColor(5));\nsignal_sell.DefineColor(\&quot;Below\&quot;, GetColor(8));\nsignal_sell.AssignValueColor(if crossingType == crossingType.above then signal_sell.Color(\&quot;Above\&quot;) else signal_sell.Color(\&quot;Below\&quot;));\n\nsignal_sell.SetPaintingStrategy(if crossingType == crossingType.above\n    then PaintingStrategy.BOOLEAN_ARROW_DOWN\n    else PaintingStrategy.BOOLEAN_ARROW_UP);\nsignal_sell.setlineWeight(5);\ninput bubble =no; \nAddChartBubble(bubble and sig_sell == 1, price, \&quot;S= \&quot; + price + \&quot; rsi \&quot; + RSI, GetColor(5), no);\n\n###########################****************&quot;,name=&quot;_9a9ffdba_4673_4d6a_a832_38adc7c18676&quot;}){inputsMap{!get:Integer0(&quot;over_Bought&quot;),!get:Integer1(&quot;MACDLength&quot;)}}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;###############################################################################################################################################\n################################################################################################################################################\n#\n# Author: Kory Gill, [USER=212]@korygill[/USER]\n#\n# Created from idea on https://usethinkscript.com/threads/finite-volume-elements.593/\n# Original idea is from http://mkatsanos.com/FVE.html\n#\n# VERSION HISTORY (sortable date and time (your local time is fine), and your initials\n# 20190907-1200-KG    - Created.\n\n###############################################################################\n### NORMALIZATION (Volume Damping adaptation) by Ramon Del Villar AKA PElonsax\n### 7/20/2020 #################################################################\n###############################################################################\n# The damping logic is taken directly from VFI #\n\n#declare once_per_bar;\n\n\n#################################################################$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n\n#########################################%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%$$$$$$$$$$$$$$$$$\n\n\n\n#\n# inputs\n#\ninput RSI_prev = 2; #previous bar to check\ninput def_cond = no;\ninput Samples = 14;\n\n\n\n#vwap vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\n#input numDevUp = 2.0;\ninput vwapTimeFrame = {default DAY, WEEK, MONTH};\n\ndef cap = getAggregationPeriod();\ndef errorInAggregation =\n    vwapTimeFrame == vwapTimeFrame.DAY and cap &gt;= AggregationPeriod.WEEK or\n    vwapTimeFrame== vwapTimeFrame.WEEK and cap &gt;= AggregationPeriod.MONTH;\nassert(!errorInAggregation, \&quot;timeFrame should be not less than current chart aggregation period\&quot;);\n\ndef yyyyMmDd = getYyyyMmDd();\ndef periodIndx;\nswitch (vwapTimeFrame) {\ncase DAY:\n    periodIndx = yyyyMmDd;\ncase WEEK:\n    periodIndx = Floor((daysFromDate(first(yyyyMmDd)) + getDayOfWeek(first(yyyyMmDd))) / 7);\ncase MONTH:\n    periodIndx = roundDown(yyyyMmDd / 100, 0);\n}\ndef isPeriodRolled = compoundValue(1, periodIndx != periodIndx[1], yes);\n\ndef volumeSum;\ndef volumeVwapSum;\ndef volumeVwap2Sum;\n\nif (isPeriodRolled) {\n    volumeSum = volume;\n    volumeVwapSum = volume * vwap;\n    volumeVwap2Sum = volume * Sqr(vwap);\n} else {\n    volumeSum = compoundValue(1, volumeSum[1] + volume, volume);\n    volumeVwapSum = compoundValue(1, volumeVwapSum[1] + volume * vwap, volume * vwap);\n    volumeVwap2Sum = compoundValue(1, volumeVwap2Sum[1] + volume * Sqr(vwap), volume * Sqr(vwap));\n}\ndef vWapprice = volumeVwapSum / volumeSum;\ndef deviation = Sqrt(Max(volumeVwap2Sum / volumeSum - Sqr(vWapprice), 0));\n\ndef VWAP = vWapprice;\n\n\n\ninput vwapCondition =no;\n#input vp=close;\ndef conVwapBuy =if  vwapCondition then  close &gt;= VWAp else 1;\n\n#####^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n\n#\n# FVE logic\n#\ndef bn = BarNumber();\ndef nan = double.NaN;\n\n\ninput maxVolumeCutOff = 2.5;\n###Coefficient used in calculation of “Cut Off” value. Lower values mean stronger damping of volume spikes###\n\nAssert(maxVolumeCutOff &gt; 0, \&quot;\'max volume cut off\' must be positive: \&quot; + maxVolumeCutOff);\n\ndef cutOff = 0.2 * StDev(Log(hlc3) - Log(hlc3[1]), 30) * close;\ndef hlcChange = hlc3 - hlc3[1];\ndef avgVolume = Average(volume, 30)[1];\ndef minVolume = Min(volume, avgVolume * maxVolumeCutOff);\ndef dirVolume = if hlcChange &gt; cutOff\n    then minVolume\n    else if hlcChange &lt; -cutOff\n        then -minVolume\n        else 0;\n\n\ndef mf = (close - (high+low)/2) + hlc3 - hlc3 [1];\ndef fveSum = Sum(dirVolume, Samples);\n\ndef fve = if bn &gt; Samples\n          then (fveSum / (Average(avgVolume, Samples) * Samples)) * 100\n          else nan;\n\n\n#\n# plots\n#\ndef pFVE = fve;\n\ndef pFVE_MA = MovingAverage(AverageType.SIMPLE, fve, 30);\n#pFVE_MA.SetDefaultColor(Color.Gray);\n#PFVE_MA.SetPaintingStrategy(PaintingStrategy.DASHES);\n\ndef zeroLine = 0;\ndef pFVE_Bull = if pFVE crosses above pFVE_MA then pFVE  else double.NaN ;\ndef pFVE_Bear = if pFVE &gt; pFVE_MA and pFVE[1] &gt; pFVE then pFVE else double.NaN ;\n\n#format plot \n\n#zeroLine.SetDefaultColor(Color.White);\n#pFVE.AssignValueColor(if pFVE &gt; pFVE_MA then color.green else color.red) ;\n#pFVE.SetLineWeight(3);\n\n\n#pFVE_Bull.SetPaintingStrategy(PaintingStrategy.SQUARES);\n#pFVE_Bull.SetLineWeight(5);\n#pFVE_Bull.SetDefaultColor(color.dark_green) ;\n\n#pFVE_Bear.SetPaintingStrategy(PaintingStrategy.SQUARES);\n#pFVE_Bear.SetLineWeight(5);\n#pFVE_Bear.SetDefaultColor(color.white) ;\n\n#AddCloud(pFVE, pFVE_MA, color.light_green, color.pink);\n\n\n\n#####################################################################################################################################################\n\n\n\n# Simple 2 Period RSI Trading Indicator\n# Assembled by BenTen at useThinkScript.com\n# You are free to use this code for personal use, and make derivative works from it. You are NOT GRANTED permission to use this code (or derivative works) for commercial purposes which includes and is not limited to selling, reselling, or packaging with other commercial indicators. Headers and attribution in this code should remain as provided, and any derivative works should extend the existing headers.\n\n#MACD\ninput price = close;\n#input length_macd = 14;\ninput displace = 0;\n#input showBreakoutSignals = no;\ninput crossingType = {default above, below};\n\ninput fastLength = 12;\ninput slowLength = 26;\ninput MACDLength = 9;\ndef fastAvg = Sum(volume * price, fastLength) / Sum(volume, fastLength);\ndef slowAvg = Sum(volume * price, slowLength) / Sum(volume, slowLength);\ndef Value = fastAvg - slowAvg;\ndef Avg = ExpAverage(Value, MACDLength);\ndef MACD_Diff  = Value - Avg;\n#def ZeroLine = 0;\n\n# RSI\ninput rsiLength = 14;\ninput overBought = 80;\ninput overSold = 28;\ninput rsiBuyLevel =40;\ninput averageType = AverageType.WILDERS;\ndef NetChgAvg = MovingAverage(averageType, price - price[1], RSIlength);\ndef TotChgAvg = MovingAverage(averageType, AbsValue(price - price[1]), RSIlength);\ndef ChgRatio = if TotChgAvg != 0 then NetChgAvg / TotChgAvg else 0;\ndef RSI = 50 * (ChgRatio + 1);\n#def OverSold = overSold;\n#def OverBought = overBought;\n\n#test\n#plot p= VWAp;#(period= AggregationPeriod.DAY);\n\n####################################\n\ndef cond_logic = if (def_cond) then MACD_Diff &lt;= 0 else yes;\n######\n#def sig_buy = Crosses(RSI(length = RSIlength, averageType = averageType).RSI, over_Sold, crossingType == crossingType.above) within RSI_prev bars and pFVE_Bull and cond_logic; # and Diff &lt;= 0;\ndef sig_buy = conVwapBuy and RSI&lt; rsiBuyLevel and pFVE_Bull  and cond_logic ;# and Diff &gt;= 0;\n#def sig_buy = pFVE_Bull and Diff &gt;= 0;\nplot signal_buy = sig_buy ;\n\n\ndef sig_sell = Crosses(RSI(length = RSIlength, averageType = averageType).RSI, overBought, crossingType == crossingType.below) within RSI_prev bars and pFVE_Bear ;\nplot signal_sell = sig_sell;\n\nsignal_buy.DefineColor(\&quot;Above\&quot;, Color.YELLOW);\nsignal_buy.DefineColor(\&quot;Below\&quot;, GetColor(8));\nsignal_buy.AssignValueColor(if crossingType == crossingType.above then signal_buy.Color(\&quot;Above\&quot;) else signal_buy.Color(\&quot;Below\&quot;));\nsignal_buy.setlineWeight(5);\nsignal_buy.SetPaintingStrategy(if crossingType == crossingType.above\n    then PaintingStrategy.BOOLEAN_ARROW_UP\n    else PaintingStrategy.BOOLEAN_ARROW_DOWN);\n\nsignal_sell.DefineColor(\&quot;Above\&quot;, Color.VIOLET);\nsignal_sell.DefineColor(\&quot;Below\&quot;, GetColor(8));\nsignal_sell.AssignValueColor(if crossingType == crossingType.above then signal_sell.Color(\&quot;Above\&quot;) else signal_sell.Color(\&quot;Below\&quot;));\n\nsignal_sell.SetPaintingStrategy(if crossingType == crossingType.above\n    then PaintingStrategy.BOOLEAN_ARROW_DOWN\n    else PaintingStrategy.BOOLEAN_ARROW_UP);\nsignal_sell.setlineWeight(5);\ninput bubble =no; \nAddChartBubble(bubble and sig_sell == 1, price, \&quot;S= \&quot; + price + \&quot; rsi \&quot; + RSI, Color.VIOLET, no);&quot;,name=&quot;_259d509b_f440_4edf_840b_2df1df75ab8c&quot;}){inputsMap:TreeMap1{^(&quot;overBought&quot;,@Integer0),^(&quot;price&quot;,!%7.FundamentalType.valueOf(*%7.FundamentalType.class,&quot;OPEN&quot;))},inputsMap=@TreeMap1}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;def loc = isNaN(close[3]) and !isNaN(close[4]);\nplot Highest_All = HighestAll(if high == HighestAll(high)\n                              then high\n                              else double.nan);\nHighest_ALL.SetStyle(Curve.LONG_DASH);\nHighest_All.SetDefaultColor(Color.gray);\nHighest_All.HideBubble();\nHighest_All.HideTitle();\naddChartBubble(loc, Highest_ALL, \&quot;ATH\&quot;, color.gray, no);\n#plot OnePercent = HighestAll(if close crosses HighestAll(high) * #.99\n#                           then HighestAll(high) * .99\n#                           else double.nan);\n#OnePercent.SetStyle(Curve.LONG_DASH);\n#OnePercent.SetDefaultColor(Color.gray);\n#OnePercent.HideBubble();\n#OnePercent.HideTitle();\n#addChartBubble(loc, OnePercent, \&quot;1%\&quot;, color.gray, no);\n#plot TwoPercent = HighestAll(if close crosses HighestALl(high) * #.98\n#                             then HighestAll(high) * .98\n#                             else double.nan);\n#TwoPercent.SetStyle(Curve.LONG_DASH);\n#TwoPercent.SetDefaultColor(Color.gray);\n#TwoPercent.HideBubble();\n#TwoPercent.HideTitle();\n#addChartBubble(loc, TwoPercent, \&quot;2%\&quot;, color.gray, no);\nplot FivePercent = HighestAll(if close crosses HighestALl(high) * .95\n                             then HighestAll(high) * .95\n                             else double.nan);\nFivePercent.SetStyle(Curve.LONG_DASH);\nFivePercent.SetDefaultColor(Color.liME);\nFivePercent.HideBubble();\nFivePercent.HideTitle();\naddChartBubble(loc, FivePercent, \&quot;5%\&quot;, color.lime, no);\nplot TenPercent =  HighestAll(if close crosses HighestALl(high) * .9\n                             then HighestAll(high) * .9\n                             else double.nan);\nTenPercent.SetStyle(Curve.LONG_DASH);\nTenPercent.SetDefaultColor(Color.lighT_ORANGE);\nTenPercent.HideBubble();\nTenPercent.HideTitle();\naddChartBubble(loc, TenPercent, \&quot;10%\&quot;, color.lighT_ORANGE, no);\nplot TwentyPercent =  HighestAll(if close crosses HighestALl(high) * .8\n                             then HighestAll(high) * .8\n                             else double.nan);\nTwentyPercent.SetStyle(Curve.LONG_DASH);\nTwentyPercent.SetDefaultColor(Color.lighT_RED);\nTwentyPercent.HideBubble();\nTwentyPercent.HideTitle();\naddChartBubble(loc, TwentyPercent, \&quot;20%\&quot;, color.lIGHT_RED, no);&quot;,name=&quot;_13dbc1dc_6181_3e17_ba02_f4c3cf860983&quot;}){hidden=&lt;T}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;input averageType = AverageType.expONENTIAL;\ninput showMovingAvgLable =NO;\ninput useMTF =No;\ninput aggregationPeriod1 =AggregationPeriod.Five_MIN;\n\n\ndef c =close(period = aggregationPeriod1);\ninput price = close;\ninput length1 = 10;\ninput length2 = 20;\ninput length3 = 50;\ninput length4 = 200;\ninput displace = 0;\ninput showAvg3 = no;\ndef priceV = if (!useMTF) then price else close(period = aggregationPeriod1);#(period = aggregationPeriod1));\ninput showAvg4 = no;\n\ninput showBreakoutSignals = no;\n\n\n\n\n#def AvgExp = ExpAverage(price[-displace], length);\nplot Avg1 = MovingAverage(averageType, price[-displace], length1);\nplot Avg2 = MovingAverage(averageType, price[-displace], length2);\nplot Avg3 = MovingAverage(averageType, price[-displace], length3);\nplot Avg4 = MovingAverage(averageType, price[-displace], length4);\n\nAvg3.setHiding(!showAvg3);\nAvg4.setHiding(!showAvg4);\n\ndef uptrend = open &gt;close[1] and close[1]&gt;close[2] ;\ndef downtrend =price &lt; AVg3;\n#plot SMA ( Average(price[-displace], length);\nplot UpSignal = Avg1 crosses above Avg2 and uptrend;\nplot DownSignal = Avg1 crosses below Avg2 and downtrend;\n#Add Label\n\nAddLabel(showMovingAvgLable, \&quot;  \&quot;+ length1+ \&quot;MAvg\&quot; ,Avg1.TakeValueColor ());\nAddLabel(showMovingAvgLable,  astext(Avg1), if Avg1&lt; close then Color.LIGHT_GREEN else if Avg1&gt; close then color.light_red else Color.Light_GRAY);\n\n\nAddLabel(showMovingAvgLable, \&quot;  \&quot;+ length2+ \&quot;MAvg\&quot; ,Avg2.TakeValueColor ());\nAddLabel(showMovingAvgLable,  astext(Avg2), if Avg2&lt; close then Color.LIGHT_GREEN else if Avg2&gt; close then color.light_red else Color.Light_GRAY);\n\nAddLabel(showMovingAvgLable, \&quot;  \&quot;+ length3+ \&quot;MAvg\&quot; ,Avg3.TakeValueColor ());\nAddLabel(showMovingAvgLable,  astext(Avg3), if Avg3&lt; close then Color.LIGHT_GREEN else if Avg3&gt; close then color.light_red else Color.Light_GRAY);\n\n\nAddLabel(showMovingAvgLable, \&quot;  \&quot;+ length4+ \&quot;MAvg\&quot; ,Avg4.TakeValueColor ());\nAddLabel(showMovingAvgLable,  astext(Avg4), if Avg4&lt; close then Color.LIGHT_GREEN else if Avg4&gt; close then color.light_red else Color.Light_GRAY);\n\n\n# Avg1.TakeValueColor ()\n#AddLabel(showMovingAvgLable,  length1+ \&quot;MAvg \&quot; +astext(Avg1) ,Avg1.TakeValueColor ());\n#AddLabel(showMovingAvgLable, astext(Avg1), if Avg1&lt; close then Color.GREEN else if Avg1&gt; close then color.light_red else Color.Light_GRAY);\n\n\n\n#AddLabel(showMovingAvgLable,  length2+ \&quot;MAvg \&quot;+ astext(Avg2) ,Avg2.TakeValueColor ());\n#AddLabel(showMovingAvgLable,  astext(Avg2), if Avg2&lt; close then Color.GREEN else if Avg2&gt; close then color.light_red else Color.Light_GRAY);\n#AddLabel(showMovingAvgLable,  length3+ \&quot;MAvg \&quot; +astext(Avg3),Avg3.TakeValueColor ());\n#AddLabel(showMovingAvgLable, astext(Avg3), if Avg3&lt; close then Color.GREEN else if Avg3&gt; close then color.light_red else Color.Light_GRAY);\n#AddLabel(showMovingAvgLable,  length4+ \&quot;MAvg \&quot; +astext(Avg4),Avg4.TakeValueColor ());\n#AddLabel(showMovingAvgLable, astext(Avg4), if Avg4&lt; close then Color.GREEN else if Avg4&gt; close then color.light_red else Color.Light_GRAY);\ndef bub;\nif !IsNaN(close[-1])\nthen {\n\n    bub = no;#Double.NaN;\n    \n} else {\nbub = yes;\n    \n}\ndef bubb = if  BarNumber() == 20  then yes else no;\n\ninput Show_Mavg_Key=no;\n\n#AddChartBubble(bub, Avg1, \&quot;MAvg\&quot;+ length1+ \&quot;= \&quot; + astext(Avg1), Color.LIGHT_ORANGE, no);\nAddChartBubble(bub and Show_Mavg_Key, Avg1, \&quot;MAvg\&quot;+ length1+ \&quot;= \&quot; + astext(Avg1), Avg1.TakeValueColor (), yes);\nAddChartBubble(bub and Show_Mavg_Key, Avg2, \&quot;MAvg\&quot;+ length2+ \&quot;= \&quot; + astext(Avg2), Avg2.TakeValueColor (), yes);\nAddChartBubble(bub and Show_Mavg_Key, Avg3, \&quot;MAvg\&quot;+ length3+ \&quot;= \&quot; + astext(Avg3), Avg3.TakeValueColor (), yes);\nAddChartBubble(bub and Show_Mavg_Key, Avg4, \&quot;MAvg\&quot;+ length4+ \&quot;= \&quot; + astext(Avg4), Avg4.TakeValueColor (), yes);\n\n#Vwap\ninput vwapTimeFrame = {default DAY, WEEK, MONTH};\ninput numDevDn = -1.5;\ninput numDevUp = 1.5;\ninput vwapLable =no;\n\n\ndef cap = getAggregationPeriod();\ndef errorInAggregation =\n    vwapTimeFrame == vwapTimeFrame.DAY and cap &gt;= AggregationPeriod.WEEK or\n    vwapTimeFrame == vwapTimeFrame.WEEK and cap &gt;= AggregationPeriod.MONTH;\nassert(!errorInAggregation, \&quot;timeFrame should be not less than current chart aggregation period\&quot;);\n\ndef yyyyMmDd = getYyyyMmDd();\ndef periodIndx;\nswitch (vwapTimeFrame) {\ncase DAY:\n    periodIndx = yyyyMmDd;\ncase WEEK:\n    periodIndx = Floor((daysFromDate(first(yyyyMmDd)) + getDayOfWeek(first(yyyyMmDd))) / 7);\ncase MONTH:\n    periodIndx = roundDown(yyyyMmDd / 100, 0);\n}\ndef isPeriodRolled = compoundValue(1, periodIndx != periodIndx[1], yes);\n\ndef volumeSum;\ndef volumeVwapSum;\ndef volumeVwap2Sum;\n\nif (isPeriodRolled) {\n    volumeSum = volume;\n    volumeVwapSum = volume * vwap;\n    volumeVwap2Sum = volume * Sqr(vwap);\n} else {\n    volumeSum = compoundValue(1, volumeSum[1] + volume, volume);\n    volumeVwapSum = compoundValue(1, volumeVwapSum[1] + volume * vwap, volume * vwap);\n    volumeVwap2Sum = compoundValue(1, volumeVwap2Sum[1] + volume * Sqr(vwap), volume * Sqr(vwap));\n}\ndef VWprice = volumeVwapSum / volumeSum;\ndef deviation = Sqrt(Max(volumeVwap2Sum / volumeSum - Sqr(VWprice), 0));\n\nplot VWAP = VWprice;\nplot UpperBand = VWprice + numDevUp * deviation;\nplot LowerBand = VWprice + numDevDn * deviation;\n\nVWAP.setDefaultColor(getColor(0));\nUpperBand.setDefaultColor(getColor(0));\nLowerBand.setDefaultColor(getColor(0));\n\nUpperBand.SetStyle(Curve.MEDIUM_DASH);\nLowerBand.SetStyle(Curve.MEDIUM_DASH);\n\n\nvwap.hide();\n#UpperBand.hide();\n#LowerBand.hide();\n\n#vwap\n\nAddLabel(vwapLable, \&quot;VWAP= \&quot; + astext(VWAP), if VWAP&lt; close then Color.LIGHT_GREEN else if VWAP&gt; close then color.LIGHT_red else Color.GRAY);\n#AddLabel(vwapLable, \&quot;VWAP= \&quot; + astext(VWAP), Color.White);\ndef vwDif= close- VWAP;\n#AddLabel(yes, \&quot; \&quot;+astext(vwDif), if vwDif&gt; 0 then Color.LIGHT_GREEN else if vwDif&lt; 0 then color.LIGHT_red else Color.GRAY);\nAddLabel(vwapLable and vwDif&gt;0, \&quot; +\&quot;+astext(vwDif),  Color.LIGHT_GREEN );\nAddLabel(vwapLable and vwDif&lt;=0, \&quot; \&quot;+astext(vwDif),  if vwDif&lt; 0 then color.LIGHT_red else Color.LIGHT_GRAY);\n#RSI\ninput overBoughtRsi = 70;\ninput overSoldRsi = 30;\ninput rsiLength = 14;\ninput rsiPrice = close;\ndef rsi_val = reference RSI(length = rsiLength, price = rsiPrice );\n####\n\n\n\nAddLabel(yes, \&quot;RSI = \&quot; + astext(rsi_val) , if rsi_val &gt; overBoughtRsi  then Color.RED else if rsi_val &lt; overSoldRsi then  Color.GREEN else Color.light_GRAY);\n\n\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\nAvg1.SetDefaultColor(color.white);\nAvg2.SetDefaultColor(color.cyan);\nAvg3.SetDefaultColor(color.light_red);\nAvg4.SetDefaultColor(color.pink);\n#avg3.SetStyle(Curve.MEDIUM_DASH);\n#avg4.SetStyle(Curve.MEDIUM_DASH);\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);\n&quot;,name=&quot;_686a0d47_2dc7_4466_91d6_64cf4907bd2a&quot;}){inputsMap:TreeMap2{^(&quot;length1&quot;,@Integer1),^(&quot;price&quot;,&quot;CLOSE&quot;),^(&quot;rsiPrice&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap2,plots{6:{paintingStrategy=2}}}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;#hint: yakBro daily ATR 2020\n#yakbro.com\n\ndeclare upper;\n\ninput atrLength =5;\ninput averageType = AverageType.WILDERS;\ninput Period = AggregationPeriod.DAY;\ninput atrLength2 =5;\n\ninput Period2 = AggregationPeriod.HOUR;\ninput offset = 0;\ninput prctOfDr = 50;\ninput showATR = yes;\ninput showTodayRS = yes; #show strength to today\'s range\n\ndef ATR = MovingAverage(averageType, TrueRange(high(period= Period), close(period = Period), low(period = Period)), ATRlength)[offset];\ndef ATR2 = MovingAverage(averageType, TrueRange(high(period= Period2), close(period = Period2), low(period = Period2)), ATRlength2)[offset];\ndef todayHigh = high(period = Period);\ndef todayLow = low(period = Period);\ndef DR = todayHigh - todayLow;#current range\ndef a = todayLow + DR * prctOfDr/100;#.5; #50% of DR price\ndef b = close(period=Period) - todayLow; #last close price to DR\ndef x = b / DR * 100; #current DR range\ndef rangeDiff = roundUp(ATR - DR); #Range left\n\n#labels\nAddLabel(showATR, \&quot;ATR: \&quot;+Round(DR,2)+ \&quot;/ ATR(\&quot;+atrLength+\&quot;):\&quot;+Round(ATR,2), (if DR &gt; ATR then Color.downtick else Color.LIGHT_GRAY));\n\nAddLabel(showATR, \&quot;Diff:\&quot; +absValue(rangeDiff),if rangeDiff &lt; 0 then Color.downtick else color.green);\nAddLabel(showATR, \&quot;/ ATR2(\&quot;+atrLength2+\&quot;):\&quot;+Round(ATR2,2), (if DR &gt; ATR2 then Color.downtick else Color.LIGHT_GRAY));\nAddLabel(showTodayRS,\&quot;RS: \&quot;+round(x,2) + \&quot;%\&quot;,if x &gt;70 then Color.GREEN else if x&gt;60 then color.LIGHT_GREEN else if x&gt;40 then color.orange else color.red);\n\n&quot;,name=&quot;_843536f6_4cec_345a_b9ad_7b0f7d848b54&quot;}){inputsMap:TreeMap3{^(&quot;atrLength2&quot;,@Integer1),^(&quot;Period2&quot;,&quot;THIRTY_MIN&quot;)},inputsMap=@TreeMap3}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;## START STUDY\n## Anchored_VWAP_STOPS\n## linus, 2014-03-10, v0.1\n \n#hint: VWAP stops anchored off FractalTrader pivots.\n \n#hint n: Lookback period for finding swing highs, lows.\ninput n = 10;\n \n#hint ticks: Offset VWAP lines by this number of ticks.\ninput ticks = 2.0;\n \ndef bnOK = barNumber() &gt; n;\n \ndef isHigher = fold i = 1 to n + 1 with p = 1 \n               while p do high &gt; GetValue(high, -i);\n \ndef HH = if bnOK and isHigher \n         and high == Highest(high, n) \n         then high else Double.NaN;\n \ndef isLower = fold j = 1 to n + 1 with q = 1\n              while q do low &lt; GetValue(low, -j);\n \ndef LL = if bnOK and isLower \n         and low == Lowest(low, n) \n         then low else Double.NaN;\n \ndef PivH = if HH &gt; 0 then HH else Double.NaN;\ndef PivL = if LL &gt; 0 then LL else Double.NaN;\n \nrec dir = compoundValue(1, if !isNaN(PivL) then 1 else if !isNaN(PivH) then -1 else dir[1], 0);\n \nplot Up = dir crosses above 0;\nUp.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nUp.SetLineWeight(3);\nUp.SetDefaultColor(Color.WHITE);\n \nplot Dn = dir crosses below 0;\nDn.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);\nDn.SetLineWeight(3);\nDn.SetDefaultColor(Color.ORANGE);\n \ndef LocH = (high + (tickSize() * ticks)) * volume;\ndef LocL = (low - (tickSize() * ticks)) * volume;\nrec PH;\nrec VH;\nrec PL;\nrec VL;\n \nif Dn {\n    PH = LocH;\n    VH = volume;    \n} else {\n    PH = compoundValue(1, LocH + PH[1], Double.NaN);\n    VH = compoundValue(1, volume + VH[1], Double.NaN);\n}\nif Up  {\n    PL = LocL;\n    VL = volume;\n} else {\n    PL = compoundValue(1, LocL + PL[1], Double.NaN);\n    VL = compoundValue(1, volume + VL[1], Double.NaN);\n}\n \nplot VwapH = if Dn then Double.NaN else PH / VH;\nplot VwapL = if Up then Double.NaN else PL / VL;\n \nVwapH.SetDefaultColor(Color.DARK_RED);\nVwapL.SetDefaultColor(Color.Yellow);\nvwapH.setlineWeight(5);\nvwapL.setlineWeight(5);\n \n## END STUDY\n \n#Note: /ES 5m chart of the Anchored_VWAP_STOPS study.\n&quot;,name=&quot;_163cc979_a667_47d6_b9c2_0327d28018bc&quot;})),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;def showProfile = no;\ninput showLines = no;\ninput VaPrevious =yes;\ninput show_VA_cloud = yes;\ninput opacity = 20;\n\ndef opacity_inv ;#= if (opacity &gt;= 0 and opacity &lt;= 100) then 100 - opacity else 50;\n#input showCloud= yes;\ninput pricePerRowHeightMode = {default AUTOMATIC, TICKSIZE, CUSTOM};\ndef customRowHeight = 1.0;\ninput timePerProfile = { CHART, MINUTE, FIVE_MINUTE, TEN_MINUTE, FIFTEEN_MINUTE,THIRTY_MINUTE,  default HOUR, TWO_HOUR, FOUR_HOUR, DAY, TWO_DAY, THREE_DAY, FOUR_DAY, WEEK, TWO_WEEK, THREE_WEEK, MONTH, \&quot;OPT EXP\&quot;, BAR};\ninput multiplier = 1;\n\n\ninput triggerUpperVaLimitHigh = 5;\ninput triggerUpperVaLimitLow = -5;\ninput triggerLowerVaLimitHigh = 5;\ninput triggerLowerVaLimitLow = -5;\n#input triggerLowerVaLimit = 20;\n#input triggerLowerVaRange = 10;\n\ndef onExpansion = no;\ninput profiles = 50;\ninput showPointOfControl = no;\ninput showValueArea = no;\ninput valueAreaPercent = 70;\n\n\n\n\ndef period;\ndef yyyymmdd = GetYYYYMMDD();\ndef seconds = SecondsFromTime(0);\ndef month = GetYear() * 12 + GetMonth();\ndef day_number = DaysFromDate(First(yyyymmdd)) + GetDayOfWeek(First(yyyymmdd));\ndef dom = GetDayOfMonth(yyyymmdd);\ndef dow = GetDayOfWeek(yyyymmdd - dom + 1);\ndef expthismonth = (if dow &gt; 5 then 27 else 20) - dow;\ndef exp_opt = month + (dom &gt; expthismonth);\nswitch (timePerProfile) {\ncase CHART:\n    period = 0;\ncase MINUTE:\n    period = Floor(seconds / 60 + day_number * 24 * 60);\ncase FIVE_MINUTE:\n    period = Floor(seconds / 60 + day_number * 24 * 60);\ncase TEN_MINUTE:\n    period = Floor(seconds / 60 + day_number * 24 * 60);\ncase FIFTEEN_MINUTE:\n    period = Floor(seconds / 60 + day_number * 24 * 60);\ncase THIRTY_MINUTE:\n    period = Floor(seconds / (30 * 60) + day_number * 24 * 60);\ncase HOUR:\n    period = Floor(seconds / 3600 + day_number * 24);\ncase TWO_HOUR:\n    period = Floor(seconds / (2 * 3600) + day_number * 24);\ncase FOUR_HOUR:\n    period = Floor(seconds / (4 * 3600) + day_number * 24);\ncase DAY:\n    period = CountTradingDays(Min(First(yyyymmdd), yyyymmdd), yyyymmdd) - 1;\ncase TWO_DAY:\n    period = 2 * (CountTradingDays(Min(First(yyyymmdd), yyyymmdd), yyyymmdd) - 1);\ncase THREE_DAY:\n    period = 3 * (CountTradingDays(Min(First(yyyymmdd), yyyymmdd), yyyymmdd) - 1);\ncase FOUR_DAY:\n    period = 4 * (CountTradingDays(Min(First(yyyymmdd), yyyymmdd), yyyymmdd) - 1);\ncase WEEK:\n    period = Floor(day_number / 7);\ncase TWO_WEEK:\n    period = Floor(day_number / 14);\ncase THREE_WEEK:\n    period = Floor(day_number / 21);\ncase MONTH:\n    period = Floor(month - First(month));\ncase \&quot;OPT EXP\&quot;:\n    period = exp_opt - First(exp_opt);\ncase BAR:\n    period = BarNumber() - 1;\n}\n\ndef count;\nif VaPrevious\n{\n\n\n count = CompoundValue(1, if !(period != period[1]) then count[1] + 1 else 1, 1);\n}\nelse\n{\n count = CompoundValue(1, if period != period[1] then (count[1] + period - period[1]) % multiplier else count[1], 0);\n}\ndef cond = count &lt; count[1] + period - period[1];\n\n\ndef height;\nswitch (pricePerRowHeightMode) {\ncase AUTOMATIC:\n    height = PricePerRow.AUTOMATIC;\ncase TICKSIZE:\n    height = PricePerRow.TICKSIZE;\ncase CUSTOM:\n    height = customRowHeight;\n}\n\n#####vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\ninput PlotStartTime = 0930;#Hint PlotStartTime: Move to earlier time to shift bubbles to the left.\n\ndef Na = Double.NaN;\n#Previous Day Functions\ndef Day   = GetDayOfWeek(GetYYYYMMDD());\ndef CloseTime = SecondsTillTime(1600) &gt;= 0;\ndef OpenTime = SecondsFromTime(0930) &gt;= 0;\ndef RegHrs = CloseTime and OpenTime;\ndef PLow  =  CompoundValue(1, If(Day == Day[1] and RegHrs and low &lt; PLow[1], low, If(SecondsFromTime(0930) &lt;= 0 and RegHrs, low, PLow[1])), low);\ndef PHigh = CompoundValue(1, If(Day == Day[1] and RegHrs and high &gt; PHigh[1], high, If(SecondsFromTime(0930) &lt;= 0 and RegHrs, high, PHigh[1])), high);\ndef PrevLow  = low(period = AggregationPeriod.THIRTY_MIN);\ndef PrevHigh = high(period = AggregationPeriod.THIRTY_MIN);\n##################\n#Prior Day Profile - counting formula by functionform\nrec count1 = CompoundValue(1, if !(GetDay() != GetDay()[1]) then count1[1] + 1 else 1, 1);\ndef priorperiod = if IsNaN(count[1]) then 1 else Max(count, count[1]);\ndef priorperiod1 = if IsNaN(count1[1]) then 1 else Max(count1, count1[1]);\n#profile vol1 = VolumeProfile(\&quot;startNewProfile\&quot; = GetDay() != GetDay()[1], \&quot;onExpansion\&quot; = no);\nprofile vol1 = VolumeProfile(\&quot;startNewProfile\&quot; = period != period[1], \&quot;onExpansion\&quot; = no);\n#period - period[1];\ndef vahprior = vol1.GetHighestValueArea();\ndef pocprior = vol1.GetPointOfControl();\ndef valprior = vol1.GetLowestValueArea();\n\ndef vahprev = GetValue(vahprior, priorperiod);\ndef pocprev = GetValue(pocprior, priorperiod);\ndef valprev = GetValue(valprior, priorperiod);\n\n\n\n#vol.Show(if showProfile then GlobalColor(\&quot;Profile\&quot;) else Color.CURRENT, if showPointOfControl then GlobalColor(\&quot;Point Of Control\&quot;) else Color.CURRENT, if showValueArea then GlobalColor(\&quot;Value Area\&quot;) else Color.CURRENT, opacity);\n#profile vol = VolumeProfile(\&quot;startNewProfile\&quot; = cond, \&quot;onExpansion\&quot; = no);\n#vol.Show(if showProfile then GlobalColor(\&quot;Profile\&quot;) else Color.CURRENT, if showPointOfControl then GlobalColor(\&quot;Point Of Control\&quot;) else Color.CURRENT, if showValueArea then GlobalColor(\&quot;Value Area\&quot;) else Color.CURRENT, opacity);\ndef VAH = vahprev;\ndef VAL = valprev;\ndef POC = pocprev;\n\n\n############\n#Value Area Functions\ndef Pivot = hlc3(period = period)[1];\ndef PPoint = If(Pivot &gt; 0, Pivot, Na);\ndef VArea  = Between(close, VAL, VAH);\ndef VAreaabove  = close &gt; VAH;\ndef VAreabelow  = close &lt; VAL;\n\n#Time Functions\ndef CloseTime2 = SecondsTillTime(1600) &gt;= 0;\ndef OpenTime2 = SecondsFromTime(PlotStartTime) &gt;= 0;\ndef MarketOpen = OpenTime2 and CloseTime2;\ndef NewDay = IsNaN(close(period = “Day”)[-1]);\ninput  Chart  =yes;# MarketOpen;# and NewDay;\n#Value Area Cloud\ndef CloudClose = SecondsTillTime(1615) &gt; 0;\ndef Cloud      =1;#OpenTime and CloudClose;\ndef ChartCloud = Cloud and Chart;\ndef CloudTest  =If(1, ChartCloud, Chart);#If(CloudOpenOnly, ChartCloud, Chart);\n\n#Plots\nplot VH  = If(Chart and VAH &gt; 0, VAH, Na);\nplot PC  = If(Chart and POC &gt; 0, POC, Na);\nplot VL  = If(Chart and VAL &gt; 0, VAL, Na);\n#plot cloudhigh = If(CloudTest and ShowCloud, VAH, Na);\n#plot cloudlow  = If(CloudTest and ShowCloud, VAL, Na);\n#AddCloud(cloudhigh, cloudlow, Color.GRAY, Color.GRAY);\n#AddCloud(VH, VL, Color.GRAY, Color.GRAY);\n\n####@\ndef VAHigh= VH;\ndef VALow= VL;\n\n#####^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n#profile vol = VolumeProfile(\&quot;startNewProfile\&quot; = cond, \&quot;onExpansion\&quot; = onExpansion, \&quot;numberOfProfiles\&quot; = profiles, \&quot;pricePerRow\&quot; = height, \&quot;value area percent\&quot; = valueAreaPercent);\n##$profile vol = VolumeProfile(\&quot;startNewProfile\&quot; = period != period[1], \&quot;onExpansion\&quot; = no);\n##$def con = CompoundValue(1, onExpansion, no);\n##$def pc = if IsNaN(vol.GetPointOfControl()) and con then pc[1] else vol.GetPointOfControl();\n##$def hVA = if IsNaN(vol.GetHighestValueArea()) and con then hVA[1] else vol.GetHighestValueArea();\n##$def lVA = if IsNaN(vol.GetLowestValueArea()) and con then lVA[1] else vol.GetLowestValueArea();\n\n##$def hProfile = if IsNaN(vol.GetHighest()) and con then hProfile[1] else vol.GetHighest();\n##$def lProfile = if IsNaN(vol.GetLowest()) and con then lProfile[1] else vol.GetLowest();\n##$def plotsDomain = IsNaN(close) == onExpansion;\n\n#plot POC = if plotsDomain then pc else Double.NaN;\n#plot ProfileHigh = if plotsDomain then hProfile else Double.NaN;\n#plot ProfileLow = if plotsDomain then lProfile else Double.NaN;\n##$plot VAHigh = if plotsDomain then hVA else Double.NaN;\n##$plot VALow = if plotsDomain then lVA else Double.NaN;\n\nDefineGlobalColor(\&quot;Profile\&quot;, GetColor(1));\nDefineGlobalColor(\&quot;Point Of Control\&quot;, GetColor(5));\nDefineGlobalColor(\&quot;Value Area\&quot;, GetColor(8));\n\n#if showProfile then\n\nvol1.Show(if showProfile then GlobalColor(\&quot;Profile\&quot;) else Color.CURRENT, if showPointOfControl then GlobalColor(\&quot;Point Of Control\&quot;) else Color.CURRENT, if showValueArea then GlobalColor(\&quot;Value Area\&quot;) else Color.CURRENT, opacity);\n\n#else\n\n#Vol.();\n\n#POC.SetDefaultColor(GlobalColor(\&quot;Point Of Control\&quot;));\n#POC.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\n#VAHigh.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\n#VALow.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\n#VAHigh.SetDefaultColor(GlobalColor(\&quot;Value Area\&quot;));\n#VALow.SetDefaultColor(GlobalColor(\&quot;Value Area\&quot;));\n#ProfileHigh.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\n#ProfileLow.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\n#ProfileHigh.SetDefaultColor(GetColor(3));\n#ProfileLow.SetDefaultColor(GetColor(3));\n#ProfileHigh.Hide();\n\n\n#############################################\n#def oneVol = Roundup(( VAHigh - VALow) / VAHigh, 2);\ndef oneVol = RoundUp(( VAHigh - VALow) / 100, 2);\n#def LowerVaLimit = VALow + offset * (triggerLowerVaLimit);\n#lProfile;#POC;#lProfile;#VALow;#*VAHigh;#(*POC ;\ndef upperValimitH = VAHigh + oneVol * (triggerUpperVaLimitHigh);\ndef upperValimitL = VAHigh + oneVol * (triggerUpperVaLimitLow);\n\ndef lowerValimitH = VALow + oneVol * (triggerLowerVaLimitHigh);\ndef lowerValimitL = VALow + oneVol * (triggerLowerVaLimitLow);\n#triggerUpperVaLimitlow = if triggerUpperVaLimitlow&gt;=0 then triggerUpperVaLimitlow =-5 else triggerUpperVaLimitlow= triggerUpperVaLimitlow;\n\nplot VA_high_short = upperValimitH;\nplot VA_high_long = upperValimitL;\n\nplot VA_low_short = lowerValimitL;\nplot VA_low_long = lowerValimitH;\n\n#AddCloud(VA_high_long, VA_high_short, Color.LIGHT_RED, Color.LIGHT_RED);\n#AddCloud(VA_high_long, VA_high_short, Color.LIGHT_RED, Color.LIGHT_RED);\n\n#VA_low_short.SetPaintingStrategy(PaintingStrategy.DASHES);\n#VA_low_long.SetDefaultColor(Color.BLUE);\nVA_low_short.SetHiding(!showLines);\nVA_low_short.SetPaintingStrategy(PaintingStrategy.DASHES);\nVA_low_short.SetDefaultColor(Color.RED);\nVA_low_long.SetHiding(!showLines);\nVA_low_long.SetPaintingStrategy(PaintingStrategy.DASHES);\nVA_low_long.SetDefaultColor(Color.GREEN);\n\n\n\nVA_high_short.SetHiding(!showLines);\nVA_high_short.SetPaintingStrategy(PaintingStrategy.DASHES);\nVA_high_short.SetDefaultColor(Color.RED);\nVA_high_long.SetHiding(!showLines);\nVA_high_long.SetPaintingStrategy(PaintingStrategy.DASHES);\nVA_high_long.SetDefaultColor(Color.GREEN);\n\nif (!show_VA_cloud)\nthen\n{\n    opacity_inv = 1000;\n}\nelse\n\n{\n    opacity_inv = if (opacity &gt;= 0 and opacity &lt;= 100) then 100 - opacity else 50;\n}\nAddCloud(VA_low_short,  VA_low_long,  CreateColor(144 * opacity_inv / 100, 240, 144 * opacity_inv / 100),  CreateColor(144 * opacity_inv / 100, 240, 144 * opacity_inv / 100));\n\nAddCloud(VA_high_short,   VA_high_long,  CreateColor(204, 184 * opacity_inv / 100, 202 * opacity_inv / 100),   CreateColor(204, 184 * opacity_inv / 100, 202 * opacity_inv / 100));\n\n\n#################\ninput showLable = no;\ninput timeFrame = {default DAY, \&quot;2 DAYS\&quot;, \&quot;3 DAYS\&quot;, \&quot;4 DAYS\&quot;, WEEK, MONTH, \&quot;OPT EXP\&quot;};\n #AddChartBubble(high == high(period = timeFrame), high, \&quot;High of \&quot; + timeFrame + \&quot;: \&quot; + high, Color.GREEN, showLable);\n #AddChartBubble(low == low(period = timeFrame), low, \&quot;Low of \&quot; + timeFrame + \&quot;: \&quot; + low, Color.PINK, showLable);\n #AddChartBubble(GetYYYYMMDD() != GetYYYYMMDD()[1], high, \&quot;O: \&quot; + open(period = \&quot;DAY\&quot;) + \&quot;\\nChg: \&quot; + ( open(period = \&quot;DAY\&quot;) - open(period = \&quot;DAY\&quot;)[1] ), Color.PLUM, showLable);\n\n#AddChartBubble(GetYYYYMMDD() != GetYYYYMMDD()[1], high, \&quot;oneVol: \&quot; + oneVol + \&quot;\\nPOH: \&quot; +  VAHigh+ \&quot;\\nPOL: \&quot; +  VALow, Color.orange, yes);\n\nVH.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nPC.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nVL.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nVH.SetDefaultColor(Color.RED);\nPC.SetDefaultColor(Color.YELLOW);\nPC.SetStyle(Curve.LONG_DASH);\nVL.SetDefaultColor(Color.GREEN);\n\n\n\n\n#Pivot Functions\ndef Res1  = (2 * PPoint) - PrevLow;\ndef Supp1 = (2 * PPoint) - PrevHigh;\ndef Res2  = PPoint + (Res1 - Supp1); # def Res2  = PPoint + (Res1 - Supp1);\ndef Supp2 = PPoint - (Res1 - Supp1);\ndef Res3  = PPoint + (Res2 - Supp2);# def Res3  = PrevHigh + 2 * (PPoint - PrevLow);\ndef Supp3 = PPoint - (Res2 - Supp2);#PrevLow - 2 * (PrevHigh - PPoint);\ndef Res4  = PrevHigh + 3 * (PPoint - PrevLow);\ndef Supp4 = PrevLow - 3 * (PrevHigh - PPoint);\ndef Res5  = PrevHigh + 4 * (PPoint - PrevLow);\ndef Supp5 = PrevLow - 4 * (PrevHigh - PPoint);\ndef Res6  = PrevHigh + 5 * (PPoint - PrevLow);\ndef Supp6 = PrevLow - 5 * (PrevHigh - PPoint);\ndef Res7  = PrevHigh + 6 * (PPoint - PrevLow);\ndef Supp7 = PrevLow - 6 * (PrevHigh - PPoint);\ndef Res8  = PrevHigh + 7 * (PPoint - PrevLow);\ndef Supp8 = PrevLow - 7 * (PrevHigh - PPoint);\n\n#Rounding Functions\ndef RI   = RoundDown(Res1, 0) - ((Round(((RoundDown(Res1, 0) - Res1) / 0.25), 0)) * 0.25);\ndef SI   = RoundDown(Supp1, 0) - ((Round(((RoundDown(Supp1, 0) - Supp1) / 0.25), 0)) * 0.25);\ndef RII  = RoundDown(Res2, 0) - ((Round(((RoundDown(Res2, 0) - Res2) / 0.25), 0)) * 0.25);\ndef SII  = RoundDown(Supp2, 0) - ((Round(((RoundDown(Supp2, 0) - Supp2) / 0.25), 0)) * 0.25);\ndef RIII = RoundDown(Res3, 0) - ((Round(((RoundDown(Res3, 0) - Res3) / 0.25), 0)) * 0.25);\ndef SIII = RoundDown(Supp3, 0) - ((Round(((RoundDown(Supp3, 0) - Supp3) / 0.25), 0)) * 0.25);\ndef RIV  = RoundDown(Res4, 0) - ((Round(((RoundDown(Res4, 0) - Res4) / 0.25), 0)) * 0.25);\ndef SIV  = RoundDown(Supp4, 0) - ((Round(((RoundDown(Supp4, 0) - Supp4) / 0.25), 0)) * 0.25);\ndef PivP = RoundDown(PPoint, 0) - ((Round(((RoundDown(PPoint, 0) - PPoint) / 0.25), 0)) * 0.25);\ndef RV  = RoundDown(Res5, 0) - ((Round(((RoundDown(Res5, 0) - Res5) / 0.25), 0)) * 0.25);\ndef SV  = RoundDown(Supp5, 0) - ((Round(((RoundDown(Supp5, 0) - Supp5) / 0.25), 0)) * 0.25);\ndef RVI  = RoundDown(Res6, 0) - ((Round(((RoundDown(Res6, 0) - Res6) / 0.25), 0)) * 0.25);\ndef SVI  = RoundDown(Supp6, 0) - ((Round(((RoundDown(Supp6, 0) - Supp6) / 0.25), 0)) * 0.25);\ndef RVII  = RoundDown(Res7, 0) - ((Round(((RoundDown(Res7, 0) - Res7) / 0.25), 0)) * 0.25);\ndef SVII  = RoundDown(Supp7, 0) - ((Round(((RoundDown(Supp7, 0) - Supp7) / 0.25), 0)) * 0.25);\ndef RVIII  = RoundDown(Res8, 0) - ((Round(((RoundDown(Res8, 0) - Res8) / 0.25), 0)) * 0.25);\ndef SVIII  = RoundDown(Supp8, 0) - ((Round(((RoundDown(Supp8, 0) - Supp8) / 0.25), 0)) * 0.25);\n\n\n##\ndef R1_auto_show = (Between(RI, VL, VH) and close &gt; VL);\ndef S1_auto_show = (close &lt; VL or (Between(SI, VL, VH) and close &lt; VH));\n\ndef R2_auto_show = close &gt; VH;\ndef S2_auto_show = close &lt; VL;\n\ndef R3_auto_show = close &gt; (RI + ((RII - RI) / 2));\ndef S3_auto_show = close &lt; (SI - ((SI - SII) / 2));\n\ndef R4_auto_show = close &gt; (RII + ((RIII - RII) / 2));\ndef S4_auto_show =  close &lt; (SII - ((SII - SIII) / 2));\n\ndef R5_auto_show =  close &gt; (RIII + ((RIV - SIII) / 2));\ndef S5_auto_show =  close &lt; (SIII - ((SIII - SIV) / 2));\n\ndef R6_auto_show =  close &gt; (RIV + ((RV - SIV) / 2));\ndef S6_auto_show =  close &lt; (SIV - ((SVI - SV) / 2));\n\ndef R7_auto_show =  close &gt; (RV + ((RVI - SV) / 2));\ndef S7_auto_show =  close &lt; (SV- ((SV - SVI) / 2));\n\ndef R8_auto_show =  close &gt; (RVI + ((RVII - SIII) / 2));\ndef S8_auto_show =  close &lt; (SVI - ((SVI - SVII) / 2));\n#plot Pivots\n\n#AddLabel(yes , \&quot;day_number= \&quot; + (day_number), Color.pink);\n#AddLabel(yes , \&quot;period= \&quot; + (period), Color.pink);\n\n#plot test =PrevLow;\n&quot;,name=&quot;_d49e3a91_fd7a_414f_b507_d0dfaea0694e&quot;}){hidden=&lt;T,plots{1:{lineStyle=1}}}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# Upper study of Buy the Dip indicator\n# Assembled by BenTen at UseThinkScript.com\n# Version 1.0\n# &lt;INSTRUCTION&gt;\n# Get support at: https://usethinkscript.com/forums/buy-the-dip.32/\n# &lt;NOTES&gt;\n#Start\n#hint:&lt;b&gt;Buy The Dip&lt;/b&gt;\n# Based on the concept of \&quot;Synethetic VIX\&quot; by Larry Williams\n# This software is licensed for individual use only.\n# NOT FOR REDISTRIBUTION *PRIVATE/CONFIDENTIAL*\n# Copyright (c) 2020 useThinkScript LLC\n# Include MTF moving average that you can find here: https://usethinkscript.com/threads/multi-timeframe-mtf-moving-average-indicator-for-thinkorswim.135/\ninput aggregationPeriod1 = AggregationPeriod.THIRTY_MIN;\ninput aggregationPeriod2 = AggregationPeriod.HOUR;\ninput aggregationPeriod3 = AggregationPeriod.FOUR_HOURS;\ninput lenBTD = 22;\ninput mAvgPeriod = AggregationPeriod.DAY;\ninput AvgType = AverageType.SIMPLE;\ninput price = FundamentalType.CLOSE;#{default CLOSE, open};\ninput useCloseForBTD = yes;\ndef showMmovingAverage = no;\ninput bubbles = yes;\ninput showMeter = yes;\ninput showMtfMeter = yes;\ninput AutoHideMtfMeter = Yes;\n\ninput showMovAvgLabels = yes;\ndef timeFrame = getAggregationPeriod();\n def shortTimeFrame = timeFrame &lt; AggregationPeriod.FIVE_MIN;\ninput short_len = 50;\ninput long_len = 200;\ninput z = 0.1;\ndef Zeroline = z;\n\n\n\n\n\n# MTFindicator\n# MTF 1\ndef h = high;\ndef c = if useCloseForBTD then close else price;\n\n\n# MTF 2\ndef h2 = high(period = aggregationPeriod1);\ndef c2 = if useCloseForBTD then  close(period = aggregationPeriod1) else open(period = aggregationPeriod1);\n\n# MTF 3\n\ndef h3 = high(period = aggregationPeriod2);\ndef c3 = if useCloseForBTD then  close(period = aggregationPeriod2) else open(period = aggregationPeriod2);\n\n# MTF 4\n\ndef h4 = high(period = aggregationPeriod3);\ndef c4 = if useCloseForBTD then  close(period = aggregationPeriod2) else open(period = aggregationPeriod3);\n\n# indicator\ndef BTD = ((h - Lowest(close[1], lenBTD)) / Lowest(c[1], lenBTD)) * 100;\ndef BTD2 = ((h2 - Lowest(c2[1], lenBTD)) / Lowest(c2[1], lenBTD)) * 100;\ndef BTD3 = ((h3 - Lowest(c3[1], lenBTD)) / Lowest(c3[1], lenBTD)) * 100;\ndef BTD4 = ((h4 - Lowest(c4[1], lenBTD)) / Lowest(c4[1], lenBTD)) * 100;\n\n\n\n\n#\n#RSI\n#RSI\n\ninput overBoughtRsi = 70;\ninput overSoldRsi = 35;\ninput rsiLength = 14;\ninput rsiCondition = yes;\n#input rsiPrice = close;\ndef rsi1 = reference RSI(length = rsiLength, price = c );\ndef rsi2 = reference RSI(length = rsiLength, price = c2 );\ndef rsi3 = reference RSI(length = rsiLength, price = c3 );\ndef rsi4 = reference RSI(length = rsiLength, price = c4 );\n####\n\n\ndef rsiLogic1 = if (rsiCondition) then rsi1 &lt;= overSoldRsi else yes;\ndef rsiLogic2 = if (rsiCondition) then rsi2 &lt;= overSoldRsi else yes;\ndef rsiLogic3 = if (rsiCondition) then rsi3 &lt;= overSoldRsi else yes;\ndef rsiLogic4 = if (rsiCondition) then rsi4 &lt;= overSoldRsi else yes;\n\n\n\n#moving Average\n\n\ndef AVG1 = MovingAverage(AvgType, close(period = mAvgPeriod), short_len);\ndef AVG2 = MovingAverage(AvgType, close(period = mAvgPeriod), long_len);\ndef EMA_condition = close &gt; AVG1 or close &gt; AVG2;\nplot average1 = if showMmovingAverage then AVG1 else Double.NaN;\nplot average2 = if showMmovingAverage then AVG2 else Double.NaN;\n\n\n#signal\ndef BTDsignal = BTD crosses below Zeroline and rsiLogic1 and EMA_condition;\ndef BTDsignal2 = BTD2 crosses below Zeroline and rsiLogic2 and EMA_condition;\ndef BTDsignal3 = BTD3 crosses below Zeroline and rsiLogic3 and EMA_condition;\ndef BTDsignal4 = BTD4 crosses below Zeroline and rsiLogic4 and EMA_condition;\n\n\n# Plot indicator\n#def buythedip = BTD;\n#def Zeroline = z;\n\n#plot signal2_above = buythedip crosses above Zeroline;\n\n# Customize higher timeframe moving averages\naverage1.AssignValueColor(Color.CYAN);\naverage2.AssignValueColor(Color.PINK);\n\nAddLabel(showMeter   , Concat(\&quot;BTD = \&quot;, AsText( BTD)), Color.WHITE);\nAddLabel(showMtfMeter and (!AutoHideMtfMeter or BTD2 &lt; 1 ), Concat(\&quot;BTD2 = \&quot;, AsText( BTD2)), Color.LIGHT_GREEN);\nAddLabel(showMtfMeter  and (!AutoHideMtfMeter or BTD3 &lt; 1), Concat(\&quot;BTD3 = \&quot;, AsText( BTD3)), Color.ORANGE);\nAddLabel(showMtfMeter  and (!AutoHideMtfMeter or BTD4 &lt; 1), Concat(\&quot;BTD4 = \&quot;, AsText( BTD4)), Color.LIGHT_GREEN);\nAddLabel(showMovAvgLabels and yes, short_len+Concat(\&quot;MA= \&quot;, AsText( AVG1)), Color.CYAN);\nAddLabel(showMovAvgLabels and yes, long_len+Concat(\&quot;MA= \&quot;, AsText( AVG2)), Color.PINK);\n\nAddChartBubble(!shortTimeFrame and bubbles and BTDsignal and EMA_condition, low, \&quot;BTD1^ \&quot; + AsText(close) + \&quot; rsi=\&quot; + AsText(rsi1), Color.LIGHT_GREEN, no);#Buy the Dip\n\nAddChartBubble(!shortTimeFrame and bubbles and BTDsignal2 and EMA_condition, low, \&quot;BTD2^ \&quot; + AsText(close) + \&quot; rsi=\&quot; + AsText(rsi2), Color.GREEN, no);#Buy the Dip\nAddChartBubble(bubbles and BTDsignal3 and EMA_condition, low, \&quot;BTD3^ \&quot; + AsText(close) + \&quot; rsi=\&quot; + AsText(rsi3), Color.LIGHT_ORANGE, no);#Buy the Dip\nAddChartBubble(bubbles and BTDsignal4 and EMA_condition, low, \&quot;BTD4^ \&quot; + AsText(close) + \&quot;  rsi=\&quot; + AsText(rsi4), Color.YELLOW, no);#Buy the Dip\n\n\ndef strongBuy  = (BTDsignal+ BTDsignal2 +BTDsignal2+ BTDsignal3+BTDsignal4)&gt;=2 ; \n plot scan = strongBuy;\nscan.hide();\n#end&quot;,name=&quot;_1919350f_52d9_4911_8a8e_c23a6cc398a3&quot;}){inputsMap:TreeMap4{^(&quot;bubbles&quot;,&lt;F)},inputsMap=@TreeMap4}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;#ShadowTrader_VA_Pivots\n#ShadowTrader (Copyright ShadowTrader), a division of ShadowTrader Technologies, LLC. 2017. All rights reserved. This ShadowTrader Script is for educational purposes only.  ShadowTrader is not responsible for the use,  functionality or the performance of this Script. This work is copyrighted by ShadowTrader and all rights of this work under the license are reserved. Use of the ShadowTrader licensed code is for private use only and any other use are prohibited. By exercising any of the rights herein, you are accepting the terms of this license. You have a non-exclusive right to use or alter the ShadowTrader code. Use of this ShadowTrader Script other than as provided for in this license is prohibited. Any redistribution is strictly prohibited and will be enforced.\n\n# A big ShadowTrader thank you to Justin Lane Williams for initially creating this script for us.\n#08/31/11: Total redesign, added automated Pivot values, proximity plotting, new features.\n#09/12/11: Added “ShowLevel4” option due to recent volitility. Will plot S4 &amp; R4.\n#12/11/11: Added “AfterHours” option to turn off plot after hours.\n#12/21/11: Bug fixes due to TOS upgrades. Removed “AfterHours”, not workin correctly.\n#01/25/12: Enter daily inputs as 4 digits and script will interpret.\n# -added rounding to make the pivots appear as they do on the show.\n#01/26/12: Removed ability to truncate inputs due to it only being accurate 99% of time.\n#02/02/12: Small update to make sure \&quot;Auto Pivots\&quot; menu option functioned properly.\n#06/07/12: Added (6)VPOC inputs, should be manually entered/deleted, displays when applicable.\n#06/25/12: Removed some code and fixed a few bugs.\n#07/09/12: Fixed one small but important bug.\n#07/13/12: Added value bubbles, removed proximity plot function.\n#08/13/12: Removed a lot of superfluous code plus a few upgrades.\n#08/15/12: Fixed a bug that was giving false numbers.\n#08/30/12: Fixed a bug that wasn\'t plotting the NQ profile.\n#09/02/12: Reordered inputs and removed \&quot;LabelESonly\&quot; input.\n#12/28/12: Made the plot hide on daily charts and updated code to current standards.\n#01/04/13: Fixed a rare bug that hides labels if using tick charts.\n#01/28/13: Added ability to hide each individual level.\n\n# Pivot values will be off the day following market holidays and possibly the day after rollover.\n# On these days make \&quot;AutoPivots=No\&quot; and manually draw pivots. Change back to \&quot;AutoPivots=Yes\&quot; the day after.\n\n#Inputs\n#def VAH ;#  = 2170.75;#Hint VAH: Must be manually entered daily, tinyurl.com/3lbmu4o\n#def POC ;#  = 2166.75;#Hint POC: Must be manually entered daily, tinyurl.com/3lbmu4o\n#def VAL ;#;  = 2161.75;#Hint VAL: Must be manually entered daily, tinyurl.com/3lbmu4o\ndef Pivot = hlc3(period = AggregationPeriod.DAY)[1];# = 2164.75;#Hint Pivot: Must be manually entered daily, tinyurl.com/3lbmu4o\ninput AutoPivots = yes;#Hint AutoPivots: Turns off pivot lines, value area stays on.\ninput showVAH =no;\ninput Labels = {default \&quot;Proximity\&quot;, \&quot;Off\&quot;, \&quot;All\&quot;, \&quot;ValueAreaOnly\&quot;};#Hint Labels: Labels at top of chart.\ninput ShowPivotPoint = no;#Hint ShowPivotPoint: Hides Pivot Point plot.\ninput ShowLevel4 = no;#Hint ShowLevel4: Will display S4 and R4 for days with large moves.\ninput ShowLevel5 = no;#Hint ShowLevel4: Will display S4 and R4 for days with large moves.\ninput ShowLevel6 = no;#Hint ShowLevel4: Will display S4 and R4 for days with large moves.\ninput ShowLevel7 = no;#Hint ShowLevel4: Will display S4 and R4 for days with large moves.\ninput ShowLevel8 = no;#Hint ShowLevel4: Will display S4 and R4 for days with large moves.\ninput PivotBubbles  = no;#yes;#Hint PivotBubbles: Shows bubbles on pivot plot lines.\ninput ValueBubbles  = no;#yes;#Hint ValueBubbles: Shows bubbles on value plot lines.\ninput PlotStartTime = 0930;#Hint PlotStartTime: Move to earlier time to shift bubbles to the left.\ninput ShowCloud  = yes;#Hint ShowCloud: Shows the value area as a cloud.\ninput CloudOpenOnly = yes;#Hint CloudOpenOnly: Will only cloud open candles.\ninput HideAfterHoursLabel = no;#Hint HideAfterHoursLabel: Hides \&quot;NoShadowPlotAfterHours\&quot; label.\ninput VpocBubbles  = no;#yes;#Hint VpocBubbles: Shows bubbles on VPOC plot lines.\n\ninput ShowS1 = yes;#yes;#Hint ShowS1: Hide/Show S1.\ninput ShowS2 = yes;#Hint ShowS2: Hide/Show S2.\ninput ShowS3 = yes;#yes;#Hint ShowS3: Hide/Show S3.\ninput ShowR1 = yes;#yes;#Hint ShowR1: Hide/Show R1.\ninput ShowR2 = yes;#Hint ShowR2: Hide/Show R2.\ninput ShowR3 = yes;#yes;#Hint ShowR3: Hide/Show R3.\ninput ShowORB = no;#Hint ShowORB: Displays 2 small, dashed lines at the top/bottom of opening range.\ninput OrbTime = 30;#Hint OrbTime: Defines the time range in minutes for the ORB.\n\ndef Na = Double.NaN;\n#declare hide_on_daily;\n\ninput marketThreshold = 0.0025;\ninput timeFrame = {default DAY, \&quot;2 DAYS\&quot;, \&quot;3 DAYS\&quot;, \&quot;4 DAYS\&quot;, WEEK, MONTH, \&quot;OPT EXP\&quot;, QUARTER, YEAR};\ninput showOnlyToday = yes;\ninput applyPersonsLevelsFilter = yes;\n\nassert(marketThreshold &gt;= 0, \&quot;\'market threshold\' must not be negative: \&quot; + marketThreshold);\n\ndef marketType = {default DISABLED, NEUTRAL, BEARISH, BULLISH};\n\ndef PP2 = high(period = timeFrame)[2] + low(period = timeFrame)[2] + close(period = timeFrame)[2];\n\nmarketType = if !applyPersonsLevelsFilter then marketType.DISABLED else\nif PP2[-1] &gt; (PP2[-1] + PP2 + PP2[1]) / 3 + marketThreshold then marketType.BULLISH else\nif PP2[-1] &lt; (PP2[-1] + PP2 + PP2[1]) / 3 - marketThreshold then marketType.BEARISH else marketType.NEUTRAL;\n\n#Previous Day Functions\ndef Day   = GetDayOfWeek(GetYYYYMMDD());\ndef CloseTime = SecondsTillTime(1545) &gt;= 0;\ndef OpenTime = SecondsFromTime(0930) &gt;= 0;\ndef RegHrs = CloseTime and OpenTime;\ndef PLow  =  CompoundValue(1, If(Day == Day[1] and RegHrs and low &lt; PLow[1], low, If(SecondsFromTime(0930) &lt;= 0 and RegHrs, low, PLow[1])), low);\ndef PHigh = CompoundValue(1, If(Day == Day[1] and RegHrs and high &gt; PHigh[1], high, If(SecondsFromTime(0930) &lt;= 0 and RegHrs, high, PHigh[1])), high);\ndef PrevLow  = If(Day != Day[1], PLow[1], PrevLow[1]);\ndef PrevHigh = If(Day != Day[1], PHigh[1], PrevHigh[1]);\n##################\n#Prior Day Profile - counting formula by functionform\nrec count1 = CompoundValue(1, if !(GetDay() != GetDay()[1]) then count1[1] + 1 else 1, 1);\ndef priorperiod = if IsNaN(count1[1]) then 1 else Max(count1, count1[1]);\nprofile vol1 = VolumeProfile(\&quot;startNewProfile\&quot; = GetDay() != GetDay()[1], \&quot;onExpansion\&quot; = no);\n\ndef vahprior = vol1.GetHighestValueArea();\ndef pocprior = vol1.GetPointOfControl();\ndef valprior = vol1.GetLowestValueArea();\n\ndef vahprev = GetValue(vahprior, priorperiod);\ndef pocprev = GetValue(pocprior, priorperiod);\ndef valprev = GetValue(valprior, priorperiod);\n\n#if showProfile then\ndef  showProfile = no;\ndef showPointOfControl = no;\ndef opacity = 50;\n#vol.Show(if showProfile then GlobalColor(\&quot;Profile\&quot;) else Color.CURRENT, if showPointOfControl then GlobalColor(\&quot;Point Of Control\&quot;) else Color.CURRENT, if showValueArea then GlobalColor(\&quot;Value Area\&quot;) else Color.CURRENT, opacity);\n#profile vol = VolumeProfile(\&quot;startNewProfile\&quot; = cond, \&quot;onExpansion\&quot; = no);\n#vol.Show(if showProfile then GlobalColor(\&quot;Profile\&quot;) else Color.CURRENT, if showPointOfControl then GlobalColor(\&quot;Point Of Control\&quot;) else Color.CURRENT, if showValueArea then GlobalColor(\&quot;Value Area\&quot;) else Color.CURRENT, opacity);\ndef VAH = vahprev;\ndef VAL = valprev;\ndef POC = pocprev;\n\n\n############\n#Value Area Functions\ndef PPoint = If(Pivot &gt; 0, Pivot, Na);\ndef VArea  = Between(close, VAL, VAH);\ndef VAreaabove  = close &gt; VAH;\ndef VAreabelow  = close &lt; VAL;\n\n\n#Time Functions\ndef CloseTime2 = SecondsTillTime(1600) &gt;= 0;\ndef OpenTime2 = SecondsFromTime(PlotStartTime) &gt;= 0;\ndef MarketOpen = OpenTime2 and CloseTime2;\ndef NewDay = IsNaN(close(period = “Day”)[-1]);\ndef Chart  = if showOnlyToday then MarketOpen and NewDay else 1 ;\n\n#Pivot Functions\ndef Res1  = (2 * PPoint) - PrevLow;\ndef Supp1 = (2 * PPoint) - PrevHigh;\ndef Res2  = PPoint + (Res1 - Supp1); # def Res2  = PPoint + (Res1 - Supp1);\ndef Supp2 = PPoint - (Res1 - Supp1);\ndef Res3  =PPoint + 2*(PrevHigh - PrevLow);# def Res3  = PrevHigh + 2 * (PPoint - PrevLow);\ndef Supp3 = PPoint - 2*(PrevHigh - PrevLow);\ndef Res4  =PPoint + 3*(PrevHigh - PrevLow);#\ndef Supp4 = PPoint - 3*(PrevHigh - PrevLow);\ndef Res5  =PPoint + 4*(PrevHigh - PrevLow);#\ndef Supp5 = PPoint - 4*(PrevHigh - PrevLow);\ndef Res6  =PPoint + 5*(PrevHigh - PrevLow);#\ndef Supp6 = PPoint - 5*(PrevHigh - PrevLow);\ndef Res7  =PPoint + 6*(PrevHigh - PrevLow);#\ndef Supp7 = PPoint - 6*(PrevHigh - PrevLow);\n\ndef Res8  =PPoint + 7*(PrevHigh - PrevLow);#\ndef Supp8 = PPoint - 7*(PrevHigh - PrevLow);\n\n\n\n\n#def Res4  = PrevHigh + 3 * (PPoint - PrevLow);\n#def Supp4 = PrevLow - 3 * (PrevHigh - PPoint);\n#def Res5  = PrevHigh + 4 * (PPoint - PrevLow);\n#def Supp5 = PrevLow - 4 * (PrevHigh - PPoint);\n#def Res6  = PrevHigh + 5 * (PPoint - PrevLow);\n#def Supp6 = PrevLow - 5 * (PrevHigh - PPoint);\n#def Res7  = PrevHigh + 6 * (PPoint - PrevLow);\n#def Supp7 = PrevLow - 6 * (PrevHigh - PPoint);\n#def Res8  = PrevHigh + 7 * (PPoint - PrevLow);\n#def Supp8 = PrevLow - 7 * (PrevHigh - PPoint);\n\n#Rounding Functions\ndef RI   = RoundDown(Res1, 0) - ((Round(((RoundDown(Res1, 0) - Res1) / 0.25), 0)) * 0.25);\ndef SI   = RoundDown(Supp1, 0) - ((Round(((RoundDown(Supp1, 0) - Supp1) / 0.25), 0)) * 0.25);\ndef RII  = RoundDown(Res2, 0) - ((Round(((RoundDown(Res2, 0) - Res2) / 0.25), 0)) * 0.25);\ndef SII  = RoundDown(Supp2, 0) - ((Round(((RoundDown(Supp2, 0) - Supp2) / 0.25), 0)) * 0.25);\ndef RIII = RoundDown(Res3, 0) - ((Round(((RoundDown(Res3, 0) - Res3) / 0.25), 0)) * 0.25);\ndef SIII = RoundDown(Supp3, 0) - ((Round(((RoundDown(Supp3, 0) - Supp3) / 0.25), 0)) * 0.25);\ndef RIV  = RoundDown(Res4, 0) - ((Round(((RoundDown(Res4, 0) - Res4) / 0.25), 0)) * 0.25);\ndef SIV  = RoundDown(Supp4, 0) - ((Round(((RoundDown(Supp4, 0) - Supp4) / 0.25), 0)) * 0.25);\ndef PivP = RoundDown(PPoint, 0) - ((Round(((RoundDown(PPoint, 0) - PPoint) / 0.25), 0)) * 0.25);\ndef RV  = RoundDown(Res5, 0) - ((Round(((RoundDown(Res5, 0) - Res5) / 0.25), 0)) * 0.25);\ndef SV  = RoundDown(Supp5, 0) - ((Round(((RoundDown(Supp5, 0) - Supp5) / 0.25), 0)) * 0.25);\ndef RVI  = RoundDown(Res6, 0) - ((Round(((RoundDown(Res6, 0) - Res6) / 0.25), 0)) * 0.25);\ndef SVI  = RoundDown(Supp6, 0) - ((Round(((RoundDown(Supp6, 0) - Supp6) / 0.25), 0)) * 0.25);\ndef RVII  = RoundDown(Res7, 0) - ((Round(((RoundDown(Res7, 0) - Res7) / 0.25), 0)) * 0.25);\ndef SVII  = RoundDown(Supp7, 0) - ((Round(((RoundDown(Supp7, 0) - Supp7) / 0.25), 0)) * 0.25);\ndef RVIII  = RoundDown(Res8, 0) - ((Round(((RoundDown(Res8, 0) - Res8) / 0.25), 0)) * 0.25);\ndef SVIII  = RoundDown(Supp8, 0) - ((Round(((RoundDown(Supp8, 0) - Supp8) / 0.25), 0)) * 0.25);\n\n\n\n\n#Plots\nplot VH  = If(Chart and VAH &gt; 0, VAH, Na);\nplot PC  = If(Chart and POC &gt; 0, POC, Na);\nplot VL  = If(Chart and VAL &gt; 0, VAL, Na);\n\n##\ndef R1_auto_show = (Between(RI, VL, VH) and close &gt; VL);\ndef S1_auto_show = (close &lt; VL or (Between(SI, VL, VH) and close &lt; VH));\n\ndef R2_auto_show = close &gt; VH;\ndef S2_auto_show = close &lt; VL;\n\ndef R3_auto_show = close &gt; (RI + ((RII - RI) / 2));\ndef S3_auto_show = close &lt; (SI - ((SI - SII) / 2));\n\ndef R4_auto_show = close &gt; (RII + ((RIII - RII) / 2));\ndef S4_auto_show =  close &lt; (SII - ((SII - SIII) / 2));\n\ndef R5_auto_show =  close &gt; (RIII + ((RIV - RIII) / 2));\ndef S5_auto_show =  close &lt; (SIII - ((SIII - SIV) / 2));\n\ndef R6_auto_show =  close &gt; (RIV + ((RV - RIV) / 2));\ndef S6_auto_show =  close &lt; (SIV - ((SVI - SV) / 2));\n\ndef R7_auto_show =  close &gt; (RV + ((RVI - RV) / 2));\ndef S7_auto_show =  close &lt; (SV- ((SV - SVI) / 2));\n\ndef R8_auto_show =  close &gt; (RVI + ((RVII - RVI) / 2));\ndef S8_auto_show =  close &lt; (SVI - ((SVI - SVII) / 2));\n#input showHigherLevel =yes;\n##\n\nplot R4  = If(Chart and AutoPivots and ShowLevel4 and  R4_auto_show  and RIV &gt; 0, RIV, Na);\nplot R3  = If(Chart and AutoPivots and ShowR3  and  R3_auto_show and RIII &gt; 0, RIII, Na);\nplot R2  = If(Chart and AutoPivots and ShowR2  and  R2_auto_show and RII &gt; 0, RII, Na);\nplot R1  = If(Chart and AutoPivots and ShowR1  and  R1_auto_show and RI &gt; 0, RI, Na);\nplot PP  = If(Chart and AutoPivots and ShowPivotPoint and PPoint &gt; 0, PivP, Na);\nplot S1  = If(Chart and AutoPivots and ShowS1 and  S1_auto_show  and SI &gt; 0, SI, Na);\nplot S2  = If(Chart and AutoPivots and ShowS2 and  S2_auto_show  and SII &gt; 0, SII, Na);\nplot S3  = If(Chart and AutoPivots and ShowS3 and  S3_auto_show and SIII &gt; 0, SIII, Na);\nplot S4  = If(Chart and AutoPivots and ShowLevel4 and  S4_auto_show and SIV &gt; 0, SIV, Na);\n\n\n#######\n\nplot R5  = If(Chart and AutoPivots and ShowLevel4 and  R5_auto_show  and RV &gt; 0, RV, Na);\nplot R6  = If(Chart and AutoPivots and ShowLevel4 and  R6_auto_show  and RVI &gt; 0, RVI, Na);\nplot R7  = If(Chart and AutoPivots and ShowLevel4 and  R7_auto_show  and RVII &gt; 0, RVII, Na);\nplot R8  = If(Chart and AutoPivots and ShowLevel4 and  R8_auto_show  and RVIII &gt; 0, RVIII, Na);\n\n####\n\n\ninput closeTimeC = 1615;\n#Value Area Cloud\n#def CloudClose = SecondsTillTime(1615) &gt; 0;\ndef CloudClose = SecondsTillTime(closeTimeC) &gt; 0;\ndef Cloud      = OpenTime and CloudClose;\ndef ChartCloud = Cloud and Chart;\ndef CloudTest  = If(CloudOpenOnly, ChartCloud, Chart);\nplot cloudhigh = If(CloudTest and ShowCloud, VAH, Na);\nplot cloudlow  = If(CloudTest and ShowCloud, VAL, Na);\nAddCloud(cloudhigh, cloudlow, Color.GRAY, Color.GRAY);\ndef AfterHours = OpenTime2 and CloudClose;\n\n#Chart Labels\ndef Futures = Between(close, close(\&quot;/es\&quot;) - 15, close(\&quot;/es\&quot;) + 15) or Between(close, close(\&quot;/nq\&quot;) - 15, close(\&quot;/nq\&quot;) + 15);\ndef Label = Chart;# and Futures;\ndef ZeroTest = VAH &gt; 0 and VAL &gt; 0;\ndef PNotZero = PPoint &gt; 0;\ndef ChartLabels;\nswitch (Labels) {\ncase \&quot;Proximity\&quot;:\n    ChartLabels = 1;\ncase \&quot;Off\&quot;:\n    ChartLabels = 0;\ncase \&quot;All\&quot;:\n    ChartLabels = 2;\ncase \&quot;ValueAreaOnly\&quot;:\n    ChartLabels = 3;\n}\n\n\nAddLabel(ChartLabels == 1 and Label and AutoPivots and VArea and ZeroTest, “InsideValue”, Color.WHITE);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and VAreaabove and ZeroTest, “AboveValue”, Color.GREEN);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and VAreabelow and ZeroTest, “BelowValue”, Color.RED);\nAddLabel(ChartLabels == 1 and Label and !AutoPivots and VArea and ZeroTest, “InsideValueArea”, Color.WHITE);\nAddLabel(ChartLabels == 1 and Label and !AutoPivots and VAreaabove and ZeroTest, “AboveValueArea”, Color.GREEN);\nAddLabel(ChartLabels == 1 and Label and !AutoPivots and VAreabelow and ZeroTest, “BelowValueArea”, Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and Between(close, VL, (RI + ((RII - RI) / 2))), \&quot;VH=\&quot; + AsText(VH), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and Between(close, VL, VH), \&quot;POC=\&quot; + AsText(PC), Color.YELLOW);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and Between(close, (SI - ((SI - SII) / 2)), VH), \&quot;VL=\&quot; + AsText(VL), Color.GREEN);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and (close &gt; VH or (Between(RI, VL, VH) and close &gt; VL)), \&quot;R1=\&quot; + AsText(RI), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and close &gt; VH, \&quot;R2=\&quot; + AsText(RII), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and close &gt; (RI + ((RII - RI) / 2)), \&quot;R3=\&quot; + AsText(RIII), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and ShowLevel4 and close &gt; (RII + ((RIII - RII) / 2)), \&quot;R4=\&quot; + AsText(RIV), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and ShowLevel5 and close &gt; (RIII + ((RIV - RIII) / 2)), \&quot;R5=\&quot; + AsText(RV), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and ShowLevel6 and close &gt; (RII + ((RV- RIV) / 2)), \&quot;R6=\&quot; + AsText(RVI), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and ShowLevel7 and close &gt; (RII + ((RVI - RV) / 2)), \&quot;R7=\&quot; + AsText(RVII), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and ShowLevel8 and close &gt; (RII + ((RVII - RVI) / 2)), \&quot;R8=\&quot; + AsText(RVIII), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and ShowPivotPoint and close &gt; SI and close &lt; RI, \&quot;PP=\&quot; + AsText(PP), Color.WHITE);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and (close &lt; VL or (Between(SI, VL, VH) and close &lt; VH)), \&quot;S1=\&quot; + AsText(SI), Color.GREEN);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and close &lt; VL, \&quot;S2=\&quot; + AsText(SII), Color.GREEN);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and close &lt; (SI - ((SI - SII) / 2)), \&quot;S3=\&quot; + AsText(SIII), Color.GREEN);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and ShowLevel4 and close &lt; (SII - ((SII - SIII) / 2)), \&quot;S4=\&quot; + AsText(SIV), Color.GREEN);\n\nAddLabel(ChartLabels == 2 and Label and ZeroTest, \&quot;VH=\&quot; + AsText(VH), Color.RED);\nAddLabel(ChartLabels == 2 and Label and ZeroTest, \&quot;POC=\&quot; + AsText(PC), Color.YELLOW);\nAddLabel(ChartLabels == 2 and Label and ZeroTest, \&quot;VL=\&quot; + AsText(VL), Color.GREEN);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero, \&quot;R1=\&quot; + AsText(RI), Color.RED);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero, \&quot;R2=\&quot; + AsText(RII), Color.RED);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero, \&quot;R3=\&quot; + AsText(RIII), Color.RED);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero and ShowLevel4, \&quot;R4=\&quot; + AsText(RIV), Color.RED);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero and ShowPivotPoint, \&quot;PP=\&quot; + AsText(PP), Color.WHITE);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero, \&quot;S1=\&quot; + AsText(SI), Color.GREEN);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero, \&quot;S2=\&quot; + AsText(SII), Color.GREEN);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero, \&quot;S3=\&quot; + AsText(SIII), Color.GREEN);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero and ShowLevel4, \&quot;S4=\&quot; + AsText(SIV), Color.GREEN);\n\nAddLabel(ChartLabels == 3 and Label and VArea and ZeroTest, “InsideValueArea”, Color.WHITE);\nAddLabel(ChartLabels == 3 and Label and VAreaabove and ZeroTest, “AboveValueArea”, Color.GREEN);\nAddLabel(ChartLabels == 3 and Label and VAreabelow and ZeroTest, \&quot;BelowValueArea”, Color.RED);\nAddLabel(!AfterHours and !Chart and !HideAfterHoursLabel, \&quot;NoShadowPlotAfterHours\&quot;, Color.ORANGE);\n\n#Chart Bubbles\ninput BubbleLeftSide =yes;\ndef  leftLoc =  if BubbleLeftSide then 1 else -1;#\nAddChartBubble(IsNaN(VH[leftLoc]) and ValueBubbles, VH, VH, Color.RED, no);\nAddChartBubble(IsNaN(PC[leftLoc]) and ValueBubbles, PC, PC, Color.YELLOW, no);\nAddChartBubble(IsNaN(VL[leftLoc]) and ValueBubbles, VL, VL, Color.GREEN, no);\nAddChartBubble(IsNaN(S1[leftLoc]) and PivotBubbles, S1, “S1”, Color.WHITE, no);\nAddChartBubble(IsNaN(S2[leftLoc]) and PivotBubbles, S2, “S2”, Color.WHITE, no);\nAddChartBubble(IsNaN(S3[leftLoc]) and PivotBubbles, S3, “S3”, Color.WHITE, no);\nAddChartBubble(IsNaN(S4[leftLoc]) and PivotBubbles and ShowLevel4 and S4_auto_show, S4, “S4”, Color.WHITE, no);\nAddChartBubble(IsNaN(PP[leftLoc]) and ShowPivotPoint and PivotBubbles, PP, “PP”, Color.WHITE, no);\nAddChartBubble(IsNaN(R1[leftLoc]) and PivotBubbles, R1, “R1”, Color.WHITE, no);\nAddChartBubble(IsNaN(R2[leftLoc]) and PivotBubbles, R2, “R2”, Color.WHITE, no);\nAddChartBubble(IsNaN(R3[leftLoc]) and PivotBubbles, R3, “R3”, Color.WHITE, no);\nAddChartBubble(IsNaN(R4[leftLoc]) and PivotBubbles and ShowLevel4, R4, “R4”, Color.WHITE, no);\n\n\n#Opening Range Breakout Functions\ndef ORBopen = SecondsTillTime(945) &lt;= 0;\ndef IsMarketOpen = ORBopen and CloseTime2;\ndef FirstBar = If(GetDay()[1] != GetDay(), GetDay() - 1, 0);\ndef OpenRange = SecondsFromTime(945);\ndef PastOpeningRange = OpenRange &gt;= (OrbTime - 15) * 60;\ndef DisplayedHigh = If(high &gt; DisplayedHigh[1] and IsMarketOpen and ShowORB, high, If(IsMarketOpen and !FirstBar, DisplayedHigh[1], high));\ndef DisplayedLow = If(low &lt; DisplayedLow[1] and IsMarketOpen and ShowORB, low, If(IsMarketOpen and !FirstBar, DisplayedLow[1], low));\ndef ORBHi = If(PastOpeningRange, ORBHi[1], DisplayedHigh);\ndef ORBLo  = If(PastOpeningRange, ORBLo[1], DisplayedLow);\nplot ORBHigh = If(Chart and PastOpeningRange and IsMarketOpen and ShowORB, ORBHi, Na);\nplot ORBLow  = If(Chart and PastOpeningRange and IsMarketOpen and ShowORB, ORBLo, Na);\n\n#Plot Criteria\nORBHigh.SetDefaultColor(Color.MAGENTA);\nORBHigh.SetStyle(Curve.SHORT_DASH);\nORBHigh.HideBubble();\nORBLow.SetDefaultColor(Color.MAGENTA);\nORBLow.SetStyle(Curve.SHORT_DASH);\nORBLow.HideBubble();\nVH.SetDefaultColor(Color.RED);\nPC.SetDefaultColor(Color.YELLOW);\nPC.SetStyle(Curve.LONG_DASH);\nVL.SetDefaultColor(Color.GREEN);\nR4.SetDefaultColor(Color.WHITE);\nR3.SetDefaultColor(Color.WHITE);\nR2.SetDefaultColor(Color.WHITE);\nR1.SetDefaultColor(Color.WHITE);\nPP.SetDefaultColor(Color.WHITE);\nS4.SetDefaultColor(Color.WHITE);\nS3.SetDefaultColor(Color.WHITE);\nS2.SetDefaultColor(Color.WHITE);\nS1.SetDefaultColor(Color.WHITE);\n\ncloudhigh.SetDefaultColor(Color.RED);\ncloudlow.SetDefaultColor(Color.GREEN);\nAddLabel(showVAH , \&quot;vah= \&quot; + AsText(vah), Color.pink);\nAddLabel(showVAH , \&quot;val= \&quot; + AsText(val), Color.light_green);\nAddLabel(showVAH , \&quot;poc= \&quot; + AsText(poc), Color.light_orANGE);\nAddLabel(showVAH , \&quot;pivot= \&quot; + AsText(pivot), Color.pink);\nVH.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nPC.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nVL.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\ncloudhigh.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\ncloudlow.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nPP.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nR1.SetStyle(Curve.SHORT_DASH);\nR1.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nR2.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nR3.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nR4.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nS1.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nS2.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nS3.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nS4.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\n\n\nR1.SetHiding(R1_auto_show);\nR2.SetHiding(R2_auto_show);\nR3.SetHiding(R3_auto_show);\nR4.SetHiding(R4_auto_show);\nS1.SetHiding(S1_auto_show);\nS2.SetHiding(S2_auto_show);\nS3.SetHiding(S3_auto_show);\nS4.SetHiding(!S4_auto_show);\n#S5.SetHiding(!S5_auto_show);\n#AddLabel(yes , \&quot;R44= \&quot; + (S5_auto_show), Color.pink);\n#AddLabel(yes , \&quot;R5= \&quot; + ((RIII + ((RIV - SIII) / 2))), Color.pink);\n\n\n\n&quot;,name=&quot;_8530afbb_30ff_4431_88c9_cca8caf1d61d&quot;}){hidden=&lt;T,inputsMap:TreeMap5{^(&quot;PivotBubbles&quot;,&lt;T),^(&quot;ShowLevel4&quot;,&lt;T),^(&quot;ShowORB&quot;,&lt;T),^(&quot;ShowPivotPoint&quot;,&lt;T),^(&quot;VpocBubbles&quot;,&lt;T)},inputsMap=@TreeMap5,plots{1:{lineStyle=1},6:{lineStyle=1},8:{color=@CustomColor0},11:{color=@CustomColor1}}}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# Original Code From: TD Ameritrade IP Company, Inc. (c) 2009-2020\n# Original StudyName: ATRTrailingStop\n# Type: Study\n\n# blackFLAG FTS SwingArms \n# Edited by: Jose Azcarate \n# blackFLAG Futures Trading - FOR EDUCATIONAL PURPOSES ONLY\n# TWITTER: @blackflagfuture\n# Settings Vary. My preferred setting is 28 / 5  But also use 30 / 8 and 5 / 3.5 depending on strategy.\n\ninput trailType = {default modified, unmodified};\ninput ATRPeriod = 28;\ninput ATRFactor = 5;\ninput firstTrade = {default long, short};\ninput averageType = AverageType.WILDERS;\n\ninput fib1Level = 61.8;\ninput fib2Level = 78.6;\ninput fib3Level = 88.6;\n\nAssert(ATRFactor &gt; 0, \&quot;\'atr factor\' must be positive: \&quot; + ATRFactor);\n\ndef HiLo = Min(high - low, 1.5 * Average(high - low, ATRPeriod));\ndef HRef = if low &lt;= high[1]\n    then high - close[1]\n    else (high - close[1]) - 0.5 * (low - high[1]);\ndef LRef = if high &gt;= low[1]\n    then close[1] - low\n    else (close[1] - low) - 0.5 * (low[1] - high);\n\ndef trueRange;\nswitch (trailType) {\ncase modified:\n    trueRange = Max(HiLo, Max(HRef, LRef));\ncase unmodified:\n    trueRange = TrueRange(high, close, low);\n}\ndef loss = ATRFactor * MovingAverage(averageType, trueRange, ATRPeriod);\n\ndef state = {default init, long, short};\ndef trail;\nswitch (state[1]) {\ncase init:\n    if (!IsNaN(loss)) {\n        switch (firstTrade) {\n        case long:\n            state = state.long;\n            trail = close - loss;\n        case short:\n            state = state.short;\n            trail = close + loss;\n    }\n    } else {\n        state = state.init;\n        trail = Double.NaN;\n    }\ncase long:\n    if (close &gt; trail[1]) {\n        state = state.long;\n        trail = Max(trail[1], close - loss);\n    } else {\n        state = state.short;\n        trail = close + loss;\n    }\ncase short:\n    if (close &lt; trail[1]) {\n        state = state.short;\n        trail = Min(trail[1], close + loss);\n    } else {\n        state = state.long;\n        trail = close - loss;\n    }\n}\n\ndef BuySignal = Crosses(state == state.long, 0, CrossingDirection.ABOVE);\ndef SellSignal = Crosses(state == state.short, 0, CrossingDirection.ABOVE);\n\ndef ex = if BuySignal then high else if SellSignal then low else if state == state.long then Max(ex[1], high) else if state == state.short then Min(ex[1], low) else ex[1];\n\nplot TrailingStop = trail;\n\nTrailingStop.SetPaintingStrategy(PaintingStrategy.POINTS);\nTrailingStop.DefineColor(\&quot;Long\&quot;, Color.GREEN);\nTrailingStop.DefineColor(\&quot;Short\&quot;, Color.RED);\nTrailingStop.AssignValueColor(if state == state.long\n    then TrailingStop.Color(\&quot;Long\&quot;)\n    else TrailingStop.Color(\&quot;Short\&quot;));\n\nplot Extremum = ex;\nExtremum.SetPaintingStrategy(PaintingStrategy.POINTS);\nExtremum.DefineColor(\&quot;HH\&quot;, Color.GREEN);\nExtremum.DefineColor(\&quot;LL\&quot;, Color.RED);\nExtremum.AssignValueColor(if state == state.long\n    then Extremum.Color(\&quot;HH\&quot;)\n    else Extremum.Color(\&quot;LL\&quot;));\nExtremum.Hide();\n\ndef f1 = ex + (trail - ex) * fib1Level / 100;\ndef f2 = ex + (trail - ex) * fib2Level / 100;\ndef f3 = ex + (trail - ex) * fib3Level / 100;\ndef l100 = trail + 0;\n###mahi\ninput  price =close;\nplot buySignalcnfm =  state == state.long and price crosses above f3;\nbuySignalcnfm.setPaintingStrategy(paintingStrategy.BOOLEAN_ARROW_UP); #SetPaintingStrategy(PaintingStrategy.POINTS);\nbuysignalcnfm.setLineWeight(5);\nbuysignalcnfm.SetDefaultColor(Color.pink);\n\n\n#####\nplot Fib1 = f1;\nFib1.SetPaintingStrategy(PaintingStrategy.POINTS);\nFib1.SetDefaultColor(Color.white);\nFib1.Hide();\n\nFib1.DefineColor(\&quot;Fshort\&quot;,  Color.light_red);\nFib1.DefineColor(\&quot;Flong\&quot;,  Color.Light_green);\nFib1.AssignValueColor(if state == state.long\n    then Fib1.Color(\&quot;Flong\&quot;)\n    else Fib1.Color(\&quot;Fshort\&quot;));\n\nplot Fib2 = f2;\nFib2.SetPaintingStrategy(PaintingStrategy.POINTS);\nFib2.SetDefaultColor(Color.white);\nFib2.Hide();\nFib2.DefineColor(\&quot;Fshort\&quot;,  Color.red);\nFib2.DefineColor(\&quot;Flong\&quot;,  Color.green);\nFib2.AssignValueColor(if state == state.long\n    then Fib2.Color(\&quot;Flong\&quot;)\n    else Fib2.Color(\&quot;Fshort\&quot;));\n\n\nplot Fib3 = f3;\nFib3.SetPaintingStrategy(PaintingStrategy.POINTS);\nFib3.SetDefaultColor(Color.white);\nFib3.Hide();\nFib3.AssignValueColor(if state == state.long\n    then Fib1.Color(\&quot;Flong\&quot;)\n    else Fib1.Color(\&quot;Fshort\&quot;));\n\ninput show_cloud = yes;\ndef opacity_inv;\ninput  opacity =20;\nif (!show_cloud)\nthen\n{\n    opacity_inv = 1000;\n}\nelse\n\n{\n    opacity_inv = if (opacity &gt;= 0 and opacity &lt;= 100) then 100 - opacity else 50;\n}\n\nAddCloud(f1, f2, Color.LIGHT_GREEN, Color.LIGHT_RED, no);\nAddCloud(f2, f3, Color.GREEN, Color.RED, no);\nAddCloud(f3, l100, Color.DARK_GREEN, Color.DARK_RED, no);\n\ndef l1 = state[1] == state.long and close crosses below f1[1];\ndef l2 = state[1] == state.long and close crosses below f2[1];\ndef l3 = state[1] == state.long and close crosses below f3[1];\ndef s1 = state[1] == state.short and close crosses above f1[1];\ndef s2 = state[1] == state.short and close crosses above f2[1];\ndef s3 = state[1] == state.short and close crosses above f3[1];\n\ndef atr = Average(TrueRange(high, close, low), 14);\n\nplot LS1 = if l1 then low - atr else Double.NaN;\nplot LS2 = if l2 then low - 1.5 * atr else Double.NaN;\nplot LS3 = if l3 then low - 2 * atr else Double.NaN;\nplot SS1 = if s1 then high + atr else Double.NaN;\nplot SS2 = if s2 then high + 1.5 * atr else Double.NaN;\nplot SS3 = if s3 then high + 2 * atr else Double.NaN;\n\nLS1.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\nLS1.SetDefaultColor(Color.GREEN);\nLS1.SetLineWeight(1);\nLS1.Hide();\nLS2.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\nLS2.SetDefaultColor(Color.GREEN);\nLS2.SetLineWeight(1);\nLS2.Hide();\nLS3.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\nLS3.SetDefaultColor(Color.violet);\nLS3.SetLineWeight(4);\n#LS3.Hide();\n\nSS1.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\nSS1.SetDefaultColor(Color.RED);\nSS1.SetLineWeight(1);\nSS1.Hide();\nSS2.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\nSS2.SetDefaultColor(Color.RED);\nSS2.SetLineWeight(1);\nSS2.Hide();\nSS3.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\nSS3.SetDefaultColor(Color.RED);\nSS3.SetLineWeight(1);\nSS3.Hide();\n\nAlert(l1, \&quot;Price crossed below Fib1 level in long trend\&quot;, Alert.BAR, Sound.Bell);\nAlert(l2, \&quot;Price crossed below Fib2 level in long trend\&quot;, Alert.BAR, Sound.Bell);\nAlert(l3, \&quot;Price crossed below Fib3 level in long trend\&quot;, Alert.BAR, Sound.Bell);\nAlert(s1, \&quot;Price crossed above Fib1 level in short trend\&quot;, Alert.BAR, Sound.Bell);\nAlert(s2, \&quot;Price crossed above Fib2 level in short trend\&quot;, Alert.BAR, Sound.Bell);\nAlert(s3, \&quot;Price crossed above Fib3 level in short trend\&quot;, Alert.BAR, Sound.Bell);\n&quot;,name=&quot;_68c7d159_a093_3f44_a9af_7ff67d7b87bf&quot;}){alerts:LocalAlertArray0{0:{enabled=&lt;F,playSound=&lt;F,sendMessage=&lt;F},1:{enabled=&lt;F,playSound=&lt;F,sendMessage=&lt;F},2:{enabled=&lt;F,playSound=&lt;F,sendMessage=&lt;F},3:{enabled=&lt;F,playSound=&lt;F,sendMessage=&lt;F},4:{enabled=&lt;F,playSound=&lt;F,sendMessage=&lt;F},5:{enabled=&lt;F,playSound=&lt;F,sendMessage=&lt;F}},alerts=@LocalAlertArray0,plots{0:{lineWeight=5,paintingStrategy=0},1:{hiddenLast=&lt;T,paintingStrategy=0,titleHidden=&lt;T},3:{hiding=&lt;F,paintingStrategy=0},4:{hiding=&lt;F,paintingStrategy=0},5:{hiding=&lt;F,lineWeight=2,paintingStrategy=0}}})}},!get(#%4.SubgraphId(&quot;Volume&quot;)){height=80,storableIndicators.+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;#xiuyu 2020\n##volume datas\n\ndeclare on_volume;\n\n#Inputs datas\n\ninput LengthForSecond = 10;\ninput rVOLhigh = 2; #if avg rovl is 2 times\n\ninput show30dayData = yes;\ninput showEnteredLengthRvol = yes;\ninput ShowTodayVolume =  yes;\ninput ShowAvgVolume = yes;\ninput ShowEnteredRVOL = yes;\ninput ShowCurrentBar = yes;\n\n\n\n#Volume Data\ndef ADVol30 = Average(volume(period = AggregationPeriod.DAY), 30)[1];\ndef ADVolEntered = Average(volume(period = AggregationPeriod.DAY), LengthForSecond)[1];\ndef today = volume(period = aggregationPeriod.DAY);\ndef Rvol30 = round(today/Average(volume(period = AggregationPeriod.DAY), 30)[1],2);\ndef RvolEntered = round(today/Average(volume(period = AggregationPeriod.DAY), LengthForSecond)[1],2);\n\n# Labels\n\n#shows 30days data ADV n Rvol\nAddLabel(Show30dayData, \&quot;30 dADV: \&quot; + Round(ADVol30, 0), Color.LIGHT_GRAY);\nAddLabel(Show30dayData,\&quot;30rVol:\&quot; + Rvol30, (if Rvol30 &gt;= rVolhigh then Color.RED else if Rvol30 &gt;= 1 then Color.ORANGE else Color.WHITE) );\n\n#shows user entered datas\nAddLabel(ShowEnteredLengthRvol, LengthForSecond +\&quot; dADV: \&quot; + Round(ADVolEntered, 0), Color.LIGHT_GRAY);\nAddLabel(ShowEnteredRVOL,LengthForSecond + \&quot;rVol:\&quot; + RvolEntered ,(if RvolEntered &gt;= rVOLhigh then Color.RED else if RvolEntered &gt;= 1 then Color.ORANGE else Color.light_GRAY));\n\n#shows todays volume\nAddLabel(ShowTodayVolume, \&quot;Today: \&quot; + today, (if Rvol30 &gt;= rVolhigh then Color.reD else if Rvol30 &gt;= 1 then Color.ORANGE else Color.LIGHT_GRAY));\n\n\n#shows current bar\'s volume\nAddLabel(ShowCurrentBar, \&quot;Cur Bar: \&quot; + volume,color.light_GRAY);\n\n\n&quot;,name=&quot;_7350e5e2_721c_35be_a787_608a2d7c1672&quot;}))},^(#%4.SubgraphId(&quot;Subgraph25&quot;),#%4.SubgraphStorableModel{height=99,storableIndicators.+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# TheoTrade RSI in Laguerre Time Self Adjusting With Fractal Energy\n# Mobius\n# V03.06.15.2016\n# Both Fractal Energy and RSI are plotted. RSI in cyan and FE in yellow. Look for trend exhaustion in the FE and a reversal of RSI or Price compression in FE and an RSI reversal.\n\ndeclare lower;\n\n#Inputs: \ninput nFE = 13;#hint nFE: length for Fractal Energy calculation. \n\n# Variables:\ndef o;\ndef h;\ndef l;\ndef c;\ndef CU1;\ndef CU2;\ndef CU;\ndef CD1;\ndef CD2;\ndef CD;\ndef L0;\ndef L1;\ndef L2;\ndef L3;\nplot RSI;\nplot OS;\nplot OB;\n\n# Calculations\no = (open + close[1]) / 2;\nh = Max(high, close[1]);\nl = Min(low, close[1]);\nc = (o + h + l + close) / 4;\nplot gamma = Log(Sum((Max(high, close[1]) - Min(low, close[1])), nFE) / \n        (Highest(high, nFE) - Lowest(low, nFE)))\n            / Log(nFE);\ngamma.SetDefaultColor(Color.Yellow);\nL0 = (1 – gamma) * c + gamma * L0[1];\nL1 = -gamma * L0 + L0[1] + gamma * L1[1];\nL2 = -gamma * L1 + L1[1] + gamma * L2[1];\nL3 = -gamma * L2 + L2[1] + gamma * L3[1];\nif L0 &gt;= L1\nthen {\n    CU1 = L0 - L1;\n    CD1 = 0;\n} else {\n    CD1 = L1 - L0;\n    CU1 = 0;\n}\nif L1 &gt;= L2\nthen {\n    CU2 = CU1 + L1 - L2;\n    CD2 = CD1;\n} else {\n    CD2 = CD1 + L2 - L1;\n    CU2 = CU1;\n}\nif L2 &gt;= L3\nthen {\n    CU = CU2 + L2 - L3;\n    CD = CD2;\n} else {\n    CU = CU2;\n    CD = CD2 + L3 - L2;\n}\n\nRSI = if CU + CD &lt;&gt; 0 then CU / (CU + CD) else 0;\nRSI.SetDefaultColor(Color.Cyan);\nOS = if IsNaN(close) then Double.NaN else 0.2;\nOS.SetDefaultColor(Color.Gray);\nOS.HideBubble();\nOS.HideTitle();\nOB = if IsNaN(close) then Double.NaN else 0.8;\nOB.SetDefaultColor(Color.Gray);\nOB.HideBubble();\nOB.HideTitle();\nplot FEh = if isNaN(close) then double.nan else .618;\nFEh.SetStyle(Curve.Long_Dash);\nFEh.HideBubble();\nFEh.SetDefaultColor(Color.Dark_Gray);\nFEh.HideTitle();\nplot FEl = if isNaN(close) then double.nan else .382;\nFEl.SetStyle(Curve.Long_Dash);\nFEl.SetDefaultColor(Color.Dark_Gray);\nFEl.HideBubble();\nFEl.HideTitle();\nAddCloud(0, OS, Color.Green, Color.Green);\nAddCloud(OB, 1, Color.Red, Color.Red);\nAlert(RSI crosses below .9, \&quot;\&quot;, Alert.BAR, Sound.Bell);\nAlert(RSI crosses above .1, \&quot;\&quot;, Alert.BAR, Sound.Bell);\n\n# End Code RSI_Laguerre Self Adjusting with Fractal Energy&quot;,name=&quot;_31a475af_ca9a_3990_9a81_9098babc9d60&quot;}){alerts:LocalAlertArray1,alerts=@LocalAlertArray1,hidden=&lt;T,plots{0:{paintingStrategy=5}}})}),^(#%4.SubgraphId(&quot;Subgraph26&quot;),#%4.SubgraphStorableModel{height=80,storableIndicators.+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# TheoTrade RSI in Laguerre Time Self Adjusting With Fractal Energy\n# Mobius\n# V03.06.15.2016\n# Both Fractal Energy and RSI are plotted. RSI in cyan and FE in yellow. Look for trend exhaustion in the FE and a reversal of RSI or Price compression in FE and an RSI reversal.\n\ndeclare lower;\n\n#Inputs: \ninput aggregationPeriod1 =AggregationPeriod.THIRTY_MIN;\n\n#input useOpen =no;\n#def price = if (useOpen) then   open(period = aggregationPeriod1) else close(period = aggregationPeriod1) ;\n\ninput nFE = 13;#hint nFE: length for Fractal Energy calculation. \n\n# Variables:\ndef o;\ndef h;\ndef l;\ndef c;\ndef CU1;\ndef CU2;\ndef CU;\ndef CD1;\ndef CD2;\ndef CD;\ndef L0;\ndef L1;\ndef L2;\ndef L3;\nplot RSI;\nplot OS;\nplot OB;\n\n# Calculations\no = (open(period = aggregationPeriod1) + close(period = aggregationPeriod1)[1]) / 2;\nh = Max(high(period = aggregationPeriod1), close(period = aggregationPeriod1)[1]);\nl = Min(low(period = aggregationPeriod1), close(period = aggregationPeriod1)[1]);\nc = (o + h + l + close(period = aggregationPeriod1)) / 4;\nplot gamma = Log(Sum((Max(high(period = aggregationPeriod1), close(period = aggregationPeriod1)[1]) - Min(low(period = aggregationPeriod1), close(period = aggregationPeriod1)[1])), nFE) / \n        (Highest(high(period = aggregationPeriod1), nFE) - Lowest(low(period = aggregationPeriod1), nFE)))\n            / Log(nFE);\ngamma.SetDefaultColor(Color.Yellow);\nL0 = (1 – gamma) * c + gamma * L0[1];\nL1 = -gamma * L0 + L0[1] + gamma * L1[1];\nL2 = -gamma * L1 + L1[1] + gamma * L2[1];\nL3 = -gamma * L2 + L2[1] + gamma * L3[1];\nif L0 &gt;= L1\nthen {\n    CU1 = L0 - L1;\n    CD1 = 0;\n} else {\n    CD1 = L1 - L0;\n    CU1 = 0;\n}\nif L1 &gt;= L2\nthen {\n    CU2 = CU1 + L1 - L2;\n    CD2 = CD1;\n} else {\n    CD2 = CD1 + L2 - L1;\n    CU2 = CU1;\n}\nif L2 &gt;= L3\nthen {\n    CU = CU2 + L2 - L3;\n    CD = CD2;\n} else {\n    CU = CU2;\n    CD = CD2 + L3 - L2;\n}\n\nRSI = if CU + CD &lt;&gt; 0 then CU / (CU + CD) else 0;\nRSI.SetDefaultColor(Color.Cyan);\nOS = if IsNaN(close(period = aggregationPeriod1)) then Double.NaN else 0.2;\nOS.SetDefaultColor(Color.Gray);\nOS.HideBubble();\nOS.HideTitle();\nOB = if IsNaN(close(period = aggregationPeriod1)) then Double.NaN else 0.8;\nOB.SetDefaultColor(Color.Gray);\nOB.HideBubble();\nOB.HideTitle();\nplot FEh = if isNaN(close(period = aggregationPeriod1)) then double.nan else .618;\nFEh.SetStyle(Curve.Long_Dash);\nFEh.HideBubble();\nFEh.SetDefaultColor(Color.Dark_Gray);\nFEh.HideTitle();\nplot FEl = if isNaN(close(period = aggregationPeriod1)) then double.nan else .382;\nFEl.SetStyle(Curve.Long_Dash);\nFEl.SetDefaultColor(Color.Dark_Gray);\nFEl.HideBubble();\nFEl.HideTitle();\nAddCloud(0, OS, Color.Green, Color.Green);\nAddCloud(OB, 1, Color.Red, Color.Red);\nAlert(RSI crosses below .9, \&quot;\&quot;, Alert.BAR, Sound.Bell);\nAlert(RSI crosses above .1, \&quot;\&quot;, Alert.BAR, Sound.Bell);\n\n# End Code RSI_Laguerre Self Adjusting with Fractal Energy&quot;,name=&quot;_d17145e8_5004_3ac1_8e21_8466363fd097&quot;}){alerts:LocalAlertArray2,alerts=@LocalAlertArray2,hidden=&lt;T,inputsMap:TreeMap6{^(&quot;aggregationPeriod1&quot;,&quot;FIFTEEN_MIN&quot;)},inputsMap=@TreeMap6,plots{0:{paintingStrategy=3}}})}),^(#%4.SubgraphId(&quot;Subgraph28&quot;),#%4.SubgraphStorableModel{height=128,storableIndicators.+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;\n# Standard version of Buy the Dip indicator\n# Assembled by BenTen at UseThinkScript.com\n# Version 1.0\n# &lt;INSTRUCTION&gt;\n# Get support at: https://usethinkscript.com/forums/buy-the-dip.32/\n# &lt;NOTES&gt;\n# Based on the concept of \&quot;Synethetic VIX\&quot; by Larry Williams\n# This software is licensed for individual use only.\n# NOT FOR REDISTRIBUTION *PRIVATE/CONFIDENTIAL*\n# Copyright (c) 2020 useThinkScript LLC\n\ndeclare lower;\n\n\ninput price = open;\ninput length = 22;\ninput z = 0.01;\ninput cnfrmClose = no;\ninput hideBTDPlot = yes;\n\nplot Zeroline = z;\n###\n\n# BTD Plot indicator\n#def BTD = ((high - Lowest(price[1], length)) / Lowest(price[1], length)) * 100;\n\ndef BTD = if cnfrmClose then ((high[1] - Lowest(price[1], length)) / Lowest(price[1], length)) * 100 else  ((high - Lowest(price[1], length)) / Lowest(price[1], length)) * 100;\ndef  BTDsignal_condition = BTD crosses above Zeroline ;\n\n\n# STR Plot indicator\n#def STR = ((low - Highest(close[1], length)) / Highest(close[1], length)) * 100;\ndef STR = if cnfrmClose then ((low[1] - Highest(price[1], length)) / Highest(price[1], length)) * 100 else ((low - Highest(price[1], length)) / Highest(price[1], length)) * 100;\ndef STRsignal_condition = STR crosses below Zeroline ;#within  3 bar;\n\n\ndef Svix =  if cnfrmClose then ((price[1] - Lowest(low[1], length)) / (Highest(high[1], length) - Lowest(low[1], length))) * 100\nelse  ((price - Lowest(low[1], length)) / (Highest(high[1], length) - Lowest(low[1], length))) * 100;\n\n\n\n\n\n#plot\nplot buyDip = BTD;\nplot sellRip = STR;\nplot buySvix = Svix;\n\n\nbuyDip.SetHiding(hideBTDPlot);\nsellRip.SetHiding(hideBTDPlot);\nbuySvix.SetHiding(hideBTDPlot);\n\n#plot DIPsignal1 = if  buythedip crosses above Zeroline then 1 else 0;\nbuyDip.AssignValueColor(Color.PINK);\nsellRip.AssignValueColor(Color.YELLOW);\n\n\n#buythedip3.SetStyle (Curve.SHORT_DASH);\nbuySvix.AssignValueColor(Color.VIOLET);\ninput hidePlot = no;\nbuySvix.SetHiding(hidePlot);#hidePlot(hidePlot);\nZeroline.AssignValueColor(Color.WHITE);\n\nAddLabel(yes, Concat(\&quot;BTD = \&quot;, BTD), Color.ORANGE);\n;\nAddLabel(yes, Concat(\&quot;STR = \&quot;, STR), Color.PINK);\n#AddLabel(yes, Concat(\&quot;Vixf = \&quot;, buythedip2), Color.PINK);\n\nAddLabel(yes, Concat(\&quot;Svix = \&quot;, buySvix), Color.VIOLET );\n\n##SMI, Stochastic Momentum Index \n\ninput over_bought_SMI  = 40.0;\ninput over_sold_SMI = -40.0;\ninput percentDLength = 3;\ninput percentKLength = 5;\n\ndef min_low = Lowest(low, percentKLength);\ndef max_high = Highest(high, percentKLength);\ndef rel_diff = close - (max_high + min_low) / 2;\ndef diff = (max_high - min_low);#/min_low;\n\ndef avgrel = ExpAverage(ExpAverage(rel_diff, percentDLength), percentDLength);\ndef avgdiff = ExpAverage(ExpAverage(diff, percentDLength), percentDLength);\n#def avgBTD= expaverage(expaverage(buythedip, percentDLength), percentDLength);\n#def avgdBTD = expaverage(expaverage(Lowest(price[1], length), percentDLength), percentDLength);\n\n\nplot SMI = if avgdiff != 0 then avgrel / (avgdiff / 2) * 100 else 0;\n#smi.setDefaultColor(getColor(1));\n\nplot AvgSMI = ExpAverage(SMI, percentDLength);\n#avgsmi.setDefaultColor(getcolor(5));\n\n##plot overbought_SMI  = over_bought_SMI ;\n##overbought_SMI .SetDefaultColor(GetColor(5));\n\n##plot oversold_SMI  = over_sold_SMI ;\n##oversold_SMI .SetDefaultColor(GetColor(5));\n#####################################################\n\n#RSI\ninput overBoughtRsi = 70;\ninput overSoldRsi = 30;\ninput rsiLength = 14;\ninput rsiPrice = close;\ndef rsi_val = reference RSI(length = rsiLength, price = rsiPrice );\n####\n\n\n\nAddLabel(yes, \&quot;RSI = \&quot; + rsi_val , if rsi_val &gt; overBoughtRsi  then Color.RED else if rsi_val &lt; overSoldRsi then  Color.GREEN else Color.GRAY);\n\n\n\n#trend reversal\ndef y = rsi_val ;\ninput riReversLength = 2;\ninput lookBack = 2;\n\n\ndef rsi_expAvg = ExpAverage(rsi_val, riReversLength);\n\n#trend reversal\ndef overBoughtReversal = if ((rsi_expAvg &gt; overBoughtRsi)within 2 bar) and  (rsi_expAvg crosses above rsi_val) then price else 0;# if (rsi_expAvg &gt; OverBought and  rsi_expAvg crosses above rsi_val  within 3 bar ) then 40 else 0;\ndef oversoldRevesal = if ((rsi_expAvg &lt; overSoldRsi)within 2 bar) and  (rsi_expAvg crosses below rsi_val within 2 bar) then price else 0;\n\n##############\n########!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n#vwap vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\n#input numDevUp = 2.0;\ninput vwapTimeFrame = {default DAY, WEEK, MONTH};\n\ndef cap = GetAggregationPeriod();\ndef errorInAggregation =\n    vwapTimeFrame == vwapTimeFrame.DAY and cap &gt;= AggregationPeriod.WEEK or\n    vwapTimeFrame == vwapTimeFrame.WEEK and cap &gt;= AggregationPeriod.MONTH;\nAssert(!errorInAggregation, \&quot;timeFrame should be not less than current chart aggregation period\&quot;);\n\ndef yyyyMmDd = GetYYYYMMDD();\ndef periodIndx;\nswitch (vwapTimeFrame) {\ncase DAY:\n    periodIndx = yyyyMmDd;\ncase WEEK:\n    periodIndx = Floor((DaysFromDate(First(yyyyMmDd)) + GetDayOfWeek(First(yyyyMmDd))) / 7);\ncase MONTH:\n    periodIndx = RoundDown(yyyyMmDd / 100, 0);\n}\ndef isPeriodRolled = CompoundValue(1, periodIndx != periodIndx[1], yes);\n\ndef volumeSum;\ndef volumeVwapSum;\ndef volumeVwap2Sum;\n\nif (isPeriodRolled) {\n    volumeSum = volume;\n    volumeVwapSum = volume * vwap;\n    volumeVwap2Sum = volume * Sqr(vwap);\n} else {\n    volumeSum = CompoundValue(1, volumeSum[1] + volume, volume);\n    volumeVwapSum = CompoundValue(1, volumeVwapSum[1] + volume * vwap, volume * vwap);\n    volumeVwap2Sum = CompoundValue(1, volumeVwap2Sum[1] + volume * Sqr(vwap), volume * Sqr(vwap));\n}\ndef vWapprice = volumeVwapSum / volumeSum;\ndef deviation = Sqrt(Max(volumeVwap2Sum / volumeSum - Sqr(vWapprice), 0));\n\ndef VWAP = vWapprice;\n\n\n\ninput vwapCondition = no;\n#input vp=close;\ndef conVwapBuy = if  vwapCondition then  close &gt;= VWAP else 1;\n\n#####^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n\n#\n# FVE logic\n#\ninput maxVolumeCutOff = 2.5;\ndef bn = BarNumber();\ndef nan = Double.NaN;\n\n###Coefficient used in calculation of “Cut Off” value. Lower values mean stronger damping of volume spikes###\n\nAssert(maxVolumeCutOff &gt; 0, \&quot;\'max volume cut off\' must be positive: \&quot; + maxVolumeCutOff);\n\ndef cutOff = 0.2 * StDev(Log(hlc3) - Log(hlc3[1]), 30) * close;\ndef hlcChange = hlc3 - hlc3[1];\ndef avgVolume = Average(volume, 30)[1];\ndef minVolume = Min(volume, avgVolume * maxVolumeCutOff);\ndef dirVolume = if hlcChange &gt; cutOff\n    then minVolume\n    else if hlcChange &lt; -cutOff\n        then -minVolume\n        else 0;\ninput Samples = 14;\n\ndef mf = (close - (high + low) / 2) + hlc3 - hlc3 [1];\ndef fveSum = Sum(dirVolume, Samples);\n\ndef fve = if bn &gt; Samples\n          then (fveSum / (Average(avgVolume, Samples) * Samples)) * 100\n          else nan;\n\n\n\ndef pFVE = fve;\n\ndef pFVE_MA = MovingAverage(AverageType.SIMPLE, fve, 30);\n\ndef pFVE_Bull = if pFVE crosses above pFVE_MA then pFVE  else Double.NaN ;\ndef pFVE_Bear = if pFVE &gt; pFVE_MA and pFVE[1] &gt; pFVE then pFVE else Double.NaN ;\n\n\n\n\n\n#####################################################################################################################################################\n\n\n\n# Simple 2 Period RSI Trading Indicator\n# Assembled by BenTen at useThinkScript.com\n# You are free to use this code for personal use, and make derivative works from it. You are NOT GRANTED permission to use this code (or derivative works) for commercial purposes which includes and is not limited to selling, reselling, or packaging with other commercial indicators. Headers and attribution in this code should remain as provided, and any derivative works should extend the existing headers.\n\n#MACD\n\ninput fastLength = 12;\ninput slowLength = 26;\ninput MACDLength = 9;\ninput displace = 0;\ndef fastAvg = Sum(volume * price, fastLength) / Sum(volume, fastLength);\ndef slowAvg = Sum(volume * price, slowLength) / Sum(volume, slowLength);\ndef Value = fastAvg - slowAvg;\ndef Avg = ExpAverage(Value, MACDLength);\ndef MACD_Diff  = Value - Avg;\n#def ZeroLine = 0;\n\ninput def_cond = no;\ndef MACD_cond_logic = if (def_cond) then MACD_Diff &lt;= 0 else yes;\n\n\n#MACD Pivot reversal\n#input FilterLength=3;\n######################\n#def MACDV_Diff_expAvg = ExpAverage(MACD_Diff, FilterLength);\n#plot oversoldRevesalMACDV =if ((Diff_MACDV &lt; MacdZeroLine)within lookBack bar) and  ( Diff_MACDV crosses above   MACDV_Diff_expAvg within lookBack bar)and Diff_MACDV &gt; Diff_MACDV[1] then 1 else 0;# if (MACDV_Diff_expAvg &gt; OverBought and  MACDV_Diff_expAvg crosses above rsi_val  within 3 bar ) then 40 else 0;\n#plot overBoughtReversalMACDV = if ((Diff_MACDV &gt; MacdZeroLine)within lookBack bar) and  (MACDV_Diff_expAvg crosses above  Diff_MACDV  within lookBack bar)  and Diff_MACDV &lt; Diff_MACDV[1] and Diff_MACDV&gt;0 then 1 else 0;\n\n\n#trend Pivot reversal\ndef twoBarPivotMACD_Buy =  MACD_Diff &gt; MACD_Diff[1] and MACD_Diff[1] &gt; MACD_Diff[2] and MACD_Diff[2] &lt; MACD_Diff[3] and MACD_Diff[3] &lt; MACD_Diff [4];\ndef twoBarPivotMACD_Sell = MACD_Diff &lt; MACD_Diff[1] and MACD_Diff[1] &lt; MACD_Diff[2] and MACD_Diff[2] &gt; MACD_Diff[3] and MACD_Diff[3] &gt; MACD_Diff [4];\n\n\n#def oversoldRevesalMACDV =twoBarPivotMACD_Buy;\n#def overBoughtReversalMACDV= twoBarPivotMACD_Sell; \n\n\n\n#####################\n\n\n\n\n\n\n\n\n\n\n\n\n\n############################\n#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n####^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n\ninput aggPeriod = AggregationPeriod.DAY;\ninput AvgType = AverageType.SIMPLE;\ninput short_len = 10;\ninput mid_len = 21;\ninput long_len = 40;\ninput moving_average = no;\ndef AVG1 = MovingAverage(AvgType, close(period = aggPeriod), short_len);\ndef AVG2 = MovingAverage(AvgType, close(period = aggPeriod), mid_len);\ndef AVG3 = MovingAverage(AvgType, close(period = aggPeriod), long_len);\n#def EMA_condition = if moving_average then (close &gt; AVG1 or close &gt; AVG2 or  close &gt; AVG3) else yes;\ndef EMA_condition = if moving_average then (close &gt; AVG1 ) else yes;\n\nAddLabel( yes, Concat(short_len + \&quot;MA = \&quot;, AVG1), Color.CYAN);\nAddLabel( yes, Concat(mid_len + \&quot;MA = \&quot;, AVG2), Color.LIGHT_ORANGE);\nAddLabel( yes, Concat(long_len + \&quot;MA = \&quot;, AVG3), Color.PINK);\n\n\n####################\n\n    \n#Buy and Sell signals\n\n#def buySignal = if ((rsi_v &lt; overSoldRsi) and (smi crosses above AvgSMI) and buythedip &lt; Zeroline ) then 1 else 0;\ndef BTD_Signal = if ( BTDsignal_condition  and  oversoldRevesal  and MACD_cond_logic and EMA_condition) then 1 else 0;\nplot buy1 = BTD_Signal;\n\ndef SMI_Buy_Signal = if ( (SMI crosses above AvgSMI within lookBack bar) and (oversoldRevesal) and MACD_cond_logic and  EMA_condition) then 1 else 0;\nplot buy2 = SMI_Buy_Signal;\n\ndef  buySvix_Signal = if ( MACD_cond_logic  and  EMA_condition and  oversoldRevesal  and buySvix &lt; Zeroline - 10 ) then 1 else 0;\nplot buy3 = buySvix_Signal;\n\n\n\n\n\ndef STR_Signal = if (  STRsignal_condition and overBoughtReversal ) then 1 else 0;\n\ndef SMI_Sell_Signal = if ( (SMI crosses below AvgSMI within lookBack bar) and (overBoughtReversal)) then 1 else 0;\n#def sellSignal2 = if ((rsi_val  &gt; overBoughtRsi within 3 bar) and (smi crosses below AvgSMI within 3 bar)) then 1 else 0;\n\nplot sell1 = STR_Signal;\nplot sell2 = SMI_Sell_Signal;\n\n#######\n\ndef FVE_buySignal = conVwapBuy and oversoldRevesal and pFVE_Bull  and MACD_cond_logic ;# and Diff &gt;= 0;\n#def sig_buy = pFVE_Bull and Diff &gt;= 0;\nplot buy4 = FVE_buySignal ;\n\n\ndef FVE_sellSignal = overBoughtReversal and pFVE_Bear ;\nplot sell4 = FVE_sellSignal;\nplot buy5 = twoBarPivotMACD_Buy and oversoldRevesal;\nplot sell5 = twoBarPivotMACD_Sell and overBoughtReversal;\n\n####\n#def buySignal2 = if (oversoldRevesal  and buythedip2 &lt; Zeroline ) then 1 else 0;\n\n#def buySignal3 = if ( oversoldRevesal  and buythedip3 &lt; Zeroline - 10 ) then 1 else 0;\n#plot buy3 = buySignal3;\nAddChartBubble(buy1 == 1, buy1, \&quot;B1BTD= \&quot; + price + \&quot;rsi \&quot; + rsi_val, Color.LIGHT_GREEN, no);#Buy the Dip\nAddChartBubble(buy2 == 1, buy2-12, \&quot;B2SMI= \&quot; +  price + \&quot; rsi \&quot; + rsi_val, Color.LIGHT_ORANGE, yes);\nAddChartBubble(buy3 == 1, buy3-24,  \&quot;B3Svix= \&quot; + price + \&quot; rsi \&quot; + rsi_val, Color.LIGHT_GRAY, no);\nAddChartBubble(buy4 == 1, buy4-36,  \&quot;B4FVE= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.YELLOW, yes);\nAddChartBubble(buy5 == 1, buy5+12,  \&quot;B5Macd= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.CYAN, no);\n\nAddChartBubble(sell1 == 1, sell1, \&quot;S1STR= \&quot; + price + \&quot; rsi \&quot; + rsi_val, Color.LIGHT_RED, no);#Buy the Dip\n\nAddChartBubble(sell2 == 1, sell2+12, \&quot;S2SMI= \&quot; + price + \&quot; rsi \&quot; + rsi_val, Color.PINK, no);#Buy the Dip\nAddChartBubble(sell4 == 1, sell4+24, \&quot;S4FVE= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.VIOLET, no);#Buy the Dip\nAddChartBubble(sell5 == 1, sell5+12, \&quot;S5Macd= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.BLUE, yes);#Buy the Dip\n#AddChartBubble(oversoldRevesal , close, rsi_val, Color.blue, no);#Buy the Dip&quot;,name=&quot;_2200e6aa_01ce_453a_8a93_9db5018f50c8&quot;}){hidden=&lt;T,inputsMap:TreeMap7{^(&quot;price&quot;,!%7.FundamentalType.valueOf(*%7.FundamentalType.class,&quot;OHLC4&quot;)),^(&quot;rsiPrice&quot;,&quot;CLOSE&quot;),!get:Integer2(&quot;mid_len&quot;)},inputsMap=@TreeMap7})}),^(#%4.SubgraphId(&quot;Subgraph30&quot;),#%4.SubgraphStorableModel{height=125,storableIndicators.+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;declare lower;\ninput price = close;\n\ninput over_bought = 40.0;\ninput over_sold = -40.0;\ninput percentDLength = 3;\ninput percentKLength = 5;\n\ndef min_low = Lowest(low, percentKLength);\ndef max_high = Highest(high, percentKLength);\ndef rel_diff = price - (max_high + min_low) / 2;\ndef diff = max_high - min_low;\n\ndef avgrel = ExpAverage(ExpAverage(rel_diff, percentDLength), percentDLength);\ndef avgdiff = ExpAverage(ExpAverage(diff, percentDLength), percentDLength);\n\nplot SMI = if avgdiff != 0 then avgrel / (avgdiff / 2) * 100 else 0;\nSMI.SetDefaultColor(GetColor(1));\n\nplot AvgSMI = ExpAverage(SMI, percentDLength);\nAvgSMI.SetDefaultColor(color.cyan);\nplot z= 0;\nz.SetStyle(Curve.SHORT_DASH);\nz.SetDefaultColor(color.yellow);\n\nplot overbought = over_bought;\noverbought.SetDefaultColor(GetColor(5));\n\nplot oversold = over_sold;\noversold.SetDefaultColor(GetColor(5));\n\n\n#AddCloud(-100, over_sold, Color.RED, Color.GREEN);\n#AddCloud(over_bought, 100, Color.GREEN, Color.RED);\n\n#####\ndef cldH= if SMI &gt;= OverBought then SMI else OverBought;\nAddCloud(cldH,OverBought, Color.Green, Color.Green);\n\ndef cldL= if SMI &lt; OverSold then SMI else OverSold;\nAddCloud(cldL,OverSold, Color.RED, Color.RED);\nOverBought.SetDefaultColor(GetColor(7));\nOverSold.SetDefaultColor(GetColor(7));\nSMI.setLineWeight(1);\nAvgSMI.setLineWeight(3);\nOverBought.setStyle(curve.short_dash);\noversold.setStyle(curve.short_dash);\n\n####\n\n\n####$$$$$$$$\n\n\ninput priceSlm = close;\n\ninput superFastLength = 8;\n\ninput fastLengthSlm = 13;\n\ninput slowLengthSlm = 21;\n\ninput displaceSlm = 0;\n\n\ninput averageTypeSlm = AverageType.EXPONENTIAL;\n\ndef mov_avg8 = MovingAverage(averageTypeSlm, priceSlm[-displaceSlm], superFastLength);\n\ndef mov_avg13 = MovingAverage(averageTypeSlm, priceSlm[-displaceSlm], fastLengthSlm);\n\ndef mov_avg21 = MovingAverage(averageTypeSlm, priceSlm[-displaceSlm], slowLengthSlm);\n \n#moving averages\n\ndef Superfast = mov_avg8;\n\ndef Fast = mov_avg13;\n\ndef Slow = mov_avg21;\n\n\ndef buy = mov_avg8 &gt; mov_avg13 and mov_avg13 &gt; mov_avg21 and low &gt; mov_avg8;\n\ndef stopbuy = mov_avg8 &lt;= mov_avg13;\n\ndef buynow = !buy[1] and buy;\n\ndef buysignal = CompoundValue(1, if buynow and !stopbuy then 1 else if buysignal[1] == 1 and stopbuy then 0 else buysignal[1], 0);\n\n\ndef Buy_Signal = buysignal[1] == 0 and buysignal == 1;\n\ndef Momentum_Down = buysignal[1] == 1 and buysignal == 0;\n\n\ndef sell = mov_avg8 &lt; mov_avg13 and mov_avg13 &lt; mov_avg21 and high &lt; mov_avg8;\n\ndef stopsell = mov_avg8 &gt;= mov_avg13;\n\ndef sellnow = !sell[1] and sell;\n\ndef sellsignal = CompoundValue(1, if sellnow and !stopsell then 1 else if sellsignal[1] == 1 and stopsell then 0 else sellsignal[1], 0);\n\n\ndef Sell_Signal = sellsignal[1] == 0 and sellsignal;\n\ndef Momentum_Up = sellsignal[1] == 1 and sellsignal == 0;\n \n# when using this as a custom scan, change the word plot to def\n# then remove the \'#\' from in front of one of the \&quot;plot Scan\&quot; statements below\n########\n\ninput length = 20;\n\ndef HMA = MovingAverage(AverageType.HULL, price, length);\ndef HMA_Up=  HMA &gt; HMA[1];\ndef HMA_Down =! HMA_UP;\n\n###############\n\n#def Colorbars1 = if buysignal == 1 then 1 else if sellsignal == 1 then 2 else if buysignal == 0 or sellsignal == 0 then 3 else 0;\n\n\n\nAvgSMI.definecolor(\&quot;Buy\&quot;, color.dark_green);\n\n\nAvgSMI.definecolor(\&quot;Sell\&quot;, color.red);\n\nAvgSMI.DefineColor(\&quot;Neutral\&quot;, Color.PLUM);\n#RSI.DefineColor(\&quot;NeutralDown\&quot;, Color.orange);\nAvgSMI.definecolor(\&quot;HullMA_up\&quot;, color.blue);\n\nAvgSMI.definecolor(\&quot;HullMA_down\&quot;, color.orange);\n\nAvgSMI.AssignValueColor(if buysignal and HMA_Up then AvgSMI.color(\&quot;Buy\&quot;) else if buysignal and !HMA_Up then AvgSMI.color(\&quot;HullMA_down\&quot;) else if sellsignal and HMA_Down  then AvgSMI.color(\&quot;Sell\&quot;) else  if sellsignal and !HMA_Down  then AvgSMI.color(\&quot;HullMA_up\&quot;) else  AvgSMI.color(\&quot;neutral\&quot;));;#\n# if Momentum_Up then  RSI.color(\&quot;neutralUp\&quot;) else  RSI.color(\&quot;neutraldown\&quot;));\n\n\n\n\n####$$$$$$$$$$$$$$$$\n###############\n\n\n\nplot UpSignal = if (buysignal and SMI crosses above AvgSMI-3 and SMI &lt;40) then SMI-3 else Double.NaN;\nplot DownSignal = if (sellsignal and SMI crosses below AVGSMI+3 and SMI &gt;-40) then SMI+3 else Double.NaN;\ninput showBreakoutSignals =yes;\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\n\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\n\n\n\n\n\n######$$$$\n\n\n#RSI\ninput overBoughtRsi = 75;\ninput overSoldRsi = 25;\ninput rsiLength = 14;\ninput rsiPrice = close;\ninput rsi_th=42;\ndef rsi_val = reference RSI(length = rsiLength, price = rsiPrice );\nPlot rsi_val_normalized = rsi_val-50;\n####\n\n\n\nAddLabel(yes, \&quot;RSI = \&quot; + rsi_val , if rsi_val &gt; overBoughtRsi  then Color.RED else if rsi_val &lt; overSoldRsi then  Color.GREEN else Color.GRAY);\n##########\n#########################RSI\n\n\n\n\n\nrsi_val_normalized.DefineColor(\&quot;OverBought\&quot;, Color.LIGHT_RED);\nrsi_val_normalized.DefineColor(\&quot;Normal\&quot;, GetColor(7));\nrsi_val_normalized.DefineColor(\&quot;OverSold\&quot;, Color.LIGHT_GREEN);\nrsi_val_normalized.DefineColor(\&quot;Below50\&quot;, Color.CYAN);\nrsi_val_normalized.DefineColor(\&quot;Above50\&quot;, Color.PINK);\n\nrsi_val_normalized.AssignValueColor(if rsi_val &gt;= overBoughtRsi then rsi_val_normalized.Color(\&quot;OverBought\&quot;) else if rsi_val &lt;= overSoldRsi then rsi_val_normalized.Color(\&quot;OverSold\&quot;) else if (rsi_val &gt; overSoldRsi and rsi_val &lt; rsi_th) then rsi_val_normalized.Color(\&quot;Below50\&quot;) else if (rsi_val &lt; overBoughtRsi and RSI_val &gt;rsi_th) then rsi_val_normalized.Color(\&quot;Above50\&quot;) else  rsi_val_normalized.Color(\&quot;Normal\&quot;)) ;\n\n\n\n\n\n#########\ndef ImpVol = imp_volatility();\n\nAddLabel(yes, \&quot;iV= \&quot; + ImpVol, Color.GRAY);\n\n#trend reversal\ndef y = rsi_val ;\ninput riReversLength = 2;\ninput lookBack = 2;\n\n\ndef rsi_expAvg = ExpAverage(rsi_val, riReversLength);\n\n#trend reversal\ndef overBoughtReversal = if ((rsi_expAvg &gt; overBoughtRsi)within 2 bar) and  (rsi_expAvg crosses above rsi_val) then price else 0;# if (rsi_expAvg &gt; OverBought and  rsi_expAvg crosses above rsi_val  within 3 bar ) then 40 else 0;\ndef oversoldRevesal = if ((rsi_expAvg &lt; overSoldRsi)within 2 bar) and  (rsi_expAvg crosses below rsi_val within 2 bar) then price else 0;\n\n##############\n########!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n#vwap vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\n\n#####^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n#MACD\n\ninput fastLength = 12;\ninput slowLength = 26;\ninput MACDLength = 9;\ninput displace = 0;\ndef fastAvg = Sum(volume * price, fastLength) / Sum(volume, fastLength);\ndef slowAvg = Sum(volume * price, slowLength) / Sum(volume, slowLength);\ndef Value = fastAvg - slowAvg;\ndef Avg = ExpAverage(Value, MACDLength);\ndef MACD_Diff  = Value - Avg;\n#def ZeroLine = 0;\n\ninput def_cond = no;\ndef MACD_cond_logic = if (def_cond) then MACD_Diff &lt;= 0 else yes;\n\n\n#MACD Pivot reversal\n#input FilterLength=3;\n######################\n#def MACDV_Diff_expAvg = ExpAverage(MACD_Diff, FilterLength);\n#plot oversoldRevesalMACDV =if ((Diff_MACDV &lt; MacdZeroLine)within lookBack bar) and  ( Diff_MACDV crosses above   MACDV_Diff_expAvg within lookBack bar)and Diff_MACDV &gt; Diff_MACDV[1] then 1 else 0;# if (MACDV_Diff_expAvg &gt; OverBought and  MACDV_Diff_expAvg crosses above rsi_val  within 3 bar ) then 40 else 0;\n#plot overBoughtReversalMACDV = if ((Diff_MACDV &gt; MacdZeroLine)within lookBack bar) and  (MACDV_Diff_expAvg crosses above  Diff_MACDV  within lookBack bar)  and Diff_MACDV &lt; Diff_MACDV[1] and Diff_MACDV&gt;0 then 1 else 0;\n\n\n#trend Pivot reversal\ndef twoBarPivotMACD_Buy =  MACD_Diff &gt; MACD_Diff[1] and MACD_Diff[1] &gt; MACD_Diff[2] and MACD_Diff[2] &lt; MACD_Diff[3] and MACD_Diff[3] &lt; MACD_Diff [4];\ndef twoBarPivotMACD_Sell = MACD_Diff &lt; MACD_Diff[1] and MACD_Diff[1] &lt; MACD_Diff[2] and MACD_Diff[2] &gt; MACD_Diff[3] and MACD_Diff[3] &gt; MACD_Diff [4];\n###################\n\n\ndef uptrend = if price &gt; price[1] and price[1] &gt;= price[2] then 1 else 0;\n\n#####################################-----------------\n\n\n\ndef SMI_Buy_Signal = if  (AvgSMI crosses above overbought  within lookBack bar) and SMI &gt;  AvgSMI and (rsi_val &gt; overSoldRsi and rsi_val &lt; overBoughtRsi + 10 ) and (uptrend) then 1 else 0;\nplot buy2 = SMI_Buy_Signal;\n\n#def  buySvix_Signal = if ( MACD_cond_logic  and  EMA_condition and  oversoldRevesal  and buySvix &lt; Zeroline - 10 ) then 1 else 0;\n#plot buy3 = buySvix_Signal;\n\n\n\n\n\n\ndef SMI_Sell_Signal = if ( (SMI crosses below AvgSMI within lookBack bar) and (overBoughtReversal)) then 1 else 0;\n#def sellSignal2 = if ((rsi_val  &gt; overBoughtRsi within 3 bar) and (smi crosses below AvgSMI within 3 bar)) then 1 else 0;\n\n\nplot sell2 = SMI_Sell_Signal;\n\n#######\n\n#def FVE_buySignal = conVwapBuy and oversoldRevesal and pFVE_Bull  and MACD_cond_logic ;# and Diff &gt;= 0;\n#def sig_buy = pFVE_Bull and Diff &gt;= 0;\n#plot buy4 = FVE_buySignal ;\n\n\n#def FVE_sellSignal = overBoughtReversal and pFVE_Bear ;\n#plot sell4 = FVE_sellSignal;\nplot buy5 = twoBarPivotMACD_Buy and oversoldRevesal;\nplot sell5 = twoBarPivotMACD_Sell and overBoughtReversal;\n\n####\n#def buySignal2 = if (oversoldRevesal  and buythedip2 &lt; Zeroline ) then 1 else 0;\n\n#def buySignal3 = if ( oversoldRevesal  and buythedip3 &lt; Zeroline - 10 ) then 1 else 0;\n#plot buy3 = buySignal3;\ninput bubble = no;\nAddChartBubble(bubble and buy2 == 1, buy2, \&quot;B2SMI= \&quot; +  low[1] + \&quot; rsi \&quot; + rsi_val + \&quot; w \&quot; + vwap[1], Color.LIGHT_ORANGE, no);\n#AddChartBubble(buy3 == 1, buy3,  \&quot;B3Svix= \&quot; + price + \&quot; rsi \&quot; + rsi_val, Color.LIGHT_GRAY, no);\n#AddChartBubble(buy4 == 1, buy4,  \&quot;B4FVE= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.YELLOW, no);\nAddChartBubble(bubble and buy5 == 1, buy5,  \&quot;B5Macd= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.CYAN, no);\n\n#AddChartBubble(sell1 == 1, sell1, \&quot;S1STR= \&quot; + price + \&quot; rsi \&quot; + rsi_val, Color.LIGHT_RED, no);#Buy the Dip\n\nAddChartBubble(bubble and sell2 == 1, sell2, \&quot;S2SMI= \&quot; + price + \&quot; rsi \&quot; + rsi_val, Color.PINK, no);#Buy the Dip\n#AddChartBubble(sell4 == 1, sell4, \&quot;S4FVE= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.VIOLET, no);#Buy the Dip\nAddChartBubble(bubble and sell5 == 1, sell5, \&quot;S5Macd= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.BLUE, no);#Buy the Dip\n#AddChartBubble(oversoldRevesal , close, rsi_val, Color.blue, no);#Buy the Dip\n\ndef o = open;\ndef c = close;\ndef h = high;\ndef l = low;\n\nplot d1 = ((h - l) / o) * 100;\nplot d2 = ((h - l) / (c - o)) * 1;\nplot d = ((c - c[1]) / c[1]) * 100;\nd1.Hide();\nd2.Hide();\nd.Hide();\n\n\ninput vfiLength = 130;\ninput averageLength = 100;\ninput trendQualityLength = 63;\ninput maxStiffness = 7;\ninput marketIndex = \&quot;SPY\&quot;;\ninput weightForMoneyFlow = 1.0;\ninput weightForTradingAboveAverage = 1.0;\ninput weightForUptrend = 1.0;\ninput weightForTrendQuality = 1.0;\ninput weightForMarketDirection = 2.0;\ninput showLabel = No;\n\ndef vfi = reference VolumeFlowIndicator(length = vfiLength, \&quot;max volume cut off\&quot; = 2.5);\ndef sma = Average(close, averageLength);\ndef ema = ExpAverage(close(marketIndex), averageLength);\ndef stiffness = Sum(close &lt; sma, trendQualityLength);\n\ndef Score;\ndef MoneyFlow = vfi &gt; 0;\ndef TradingAboveAverage = close &gt; sma;\ndef Uptrend1 = sma &gt; sma[4];\ndef TrendQuality = stiffness &lt;= maxStiffness;\ndef MarketDirection = ema &gt;= ema[2];\n\nScore = weightForMoneyFlow * MoneyFlow + weightForTradingAboveAverage * TradingAboveAverage + weightForUptrend * Uptrend + weightForTrendQuality * TrendQuality + weightForMarketDirection * MarketDirection;\n\n\nAddLabel(showLabel and MoneyFlow, \&quot;Money flow\&quot;, GetColor(2));\nAddLabel(showLabel and TradingAboveAverage, \&quot;Trading above average\&quot;, GetColor(3));\nAddLabel(showLabel and Uptrend1, \&quot;Uptrend\&quot;, GetColor(4));\nAddLabel(showLabel and TrendQuality, \&quot;Trend quality\&quot;,GetColor(5));\nAddLabel(showLabel and TrendQuality, \&quot;Trend quality\&quot;,GetColor(5));\nAddLabel(showLabel and MarketDirection, \&quot;Market direction\&quot;,GetColor(6));\nAddLabel(showLabel , \&quot;Market score \&quot;+ score,GetColor(7));\n\n\n\n&quot;,name=&quot;_7662dae8_fa6f_4a07_aa35_2ec04cb46236&quot;}){hidden=&lt;T,inputsMap:TreeMap8{^(&quot;price&quot;,&quot;CLOSE&quot;),^(&quot;rsiPrice&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap8})}),^(#%4.SubgraphId(&quot;Subgraph32&quot;),#%4.SubgraphStorableModel{height=80,storableIndicators.+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;#CummulativeTick\n \n#hint: The CumulativeTick indicator is designed to be run on a 20 day 5 minute chart of the /ES, /NQ, /TF, or /YM. Running the chart on other instruments may result in the loss of the average lines.\n \ndeclare lower;\ndeclare once_per_bar;\n\ninput openTime = 0930;\ndef pivot1 = 1030;\ndef pivot2 = 1200;\ndef pivot3 = 1330;\ndef pivot4 = 1500;\ninput closeTime = 1600;\ninput symbol = {default \&quot;$TICK\&quot;, \&quot;$TICK/Q\&quot; ,\&quot;AAPL\&quot;};\n\ndef tickData = hlc3(symbol);\nrec CT = if GetDay() != GetDay()[1] then 0 else if SecondsTillTime(openTime) &lt;= 0 and SecondsTillTime(closeTime) &gt;= 0 then CT[1] + tickData else 0;\nplot cumulativeTick = if !IsNaN(tickData) then CT else Double.NaN;\ncumulativeTick.SetStyle(Curve.POINTS);\ncumulativeTick.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);\n\nplot zero = 0;\nzero.SetDefaultColor(Color.WHITE);\nzero.HideBubble();\nzero.HideTitle();\n\ncumulativeTick.AssignValueColor(if cumulativeTick &lt; cumulativeTick [1] then Color.MAGENTA\nelse Color.CYAN);\ncumulativeTick.SetLineWeight(1);\n\nrec ticksAtPivot1 = if SecondsTillTime(pivot1) &lt;= 0 and SecondsTillTime(pivot1)[1] &gt; 0 then cumulativeTick else ticksAtPivot1[1];\nrec ticksAtPivot2 = if SecondsTillTime(pivot2) &lt;= 0 and SecondsTillTime(pivot2)[1] &gt; 0 then cumulativeTick else ticksAtPivot2[1];\nrec ticksAtPivot3 = if SecondsTillTime(pivot3) &lt;= 0 and SecondsTillTime(pivot3)[1] &gt; 0 then cumulativeTick else ticksAtPivot3[1];\nrec ticksAtPivot4 = if SecondsTillTime(pivot4) &lt;= 0 and SecondsTillTime(pivot4)[1] &gt; 0 then cumulativeTick else ticksAtPivot4[1];\nrec ticksAtClose = if SecondsTillTime(closeTime) &lt;= 0 and SecondsTillTime(closeTime)[1] &gt; 0 then cumulativeTick else ticksAtClose[1];\n\ndef positiveDay = if (SecondsTillTime(closeTime) &lt;= 0 and SecondsTillTime(closeTime)[1] &gt; 0) and cumulativeTick &gt; 0 then 1 else 0;\n\ndef negativeDay = if SecondsTillTime(closeTime) &lt;= 0 and SecondsTillTime(closeTime)[1] &gt; 0 and cumulativeTick &lt; 0 then 1 else 0;\n\ndef positiveDayTicksAtPivot1 = if positiveDay then ticksAtPivot1 else 0;\ndef positiveDayTicksAtPivot2 = if positiveDay then ticksAtPivot2 else 0;\ndef positiveDayTicksAtPivot3 = if positiveDay then ticksAtPivot3 else 0;\ndef positiveDayTicksAtPivot4 = if positiveDay then ticksAtPivot4 else 0;\n\ndef negativeDayTicksAtPivot1 = if negativeDay then ticksAtPivot1 else 0;\ndef negativeDayTicksAtPivot2 = if negativeDay then ticksAtPivot2 else 0;\ndef negativeDayTicksAtPivot3 = if negativeDay then ticksAtPivot3 else 0;\ndef negativeDayTicksAtPivot4 = if negativeDay then ticksAtPivot4 else 0;\n\nrec totalPDTAP1 = if !IsNaN(cumulativeTick) then if positiveDay then totalPDTAP1[1] + positiveDayTicksAtPivot1 else totalPDTAP1[1] else totalPDTAP1[1];\nrec totalPDTAP2 = if !IsNaN(cumulativeTick) then if positiveDay then totalPDTAP2[1] + positiveDayTicksAtPivot2 else totalPDTAP2[1] else totalPDTAP2[1];\nrec totalPDTAP3 = if !IsNaN(cumulativeTick) then if positiveDay then totalPDTAP3[1] + positiveDayTicksAtPivot3 else totalPDTAP3[1] else totalPDTAP3[1];\nrec totalPDTAP4 = if !IsNaN(cumulativeTick) then if positiveDay then totalPDTAP4[1] + positiveDayTicksAtPivot4 else totalPDTAP4[1] else totalPDTAP4[1];\n\nrec totalNDTAP1 = if !IsNaN(cumulativeTick) then if negativeDay then totalNDTAP1[1] + negativeDayTicksAtPivot1 else totalNDTAP1[1] else totalNDTAP1[1];\nrec totalNDTAP2 = if !IsNaN(cumulativeTick) then if negativeDay then totalNDTAP2[1] + negativeDayTicksAtPivot2 else totalNDTAP2[1] else totalNDTAP2[1];\nrec totalNDTAP3 = if !IsNaN(cumulativeTick) then if negativeDay then totalNDTAP3[1] + negativeDayTicksAtPivot3 else totalNDTAP3[1] else totalNDTAP3[1];\nrec totalNDTAP4 = if !IsNaN(cumulativeTick) then if negativeDay then totalNDTAP4[1] + negativeDayTicksAtPivot4 else totalNDTAP4[1] else totalNDTAP4[1];\n\n\nrec positiveDays = if !IsNaN(cumulativeTick) then if positiveDay then positiveDays[1] + 1 else positiveDays[1] else positiveDays[1];\nrec negativeDays = if !IsNaN(cumulativeTick) then if negativeDay then negativeDays[1] + 1 else negativeDays[1] else negativeDays[1];\n\n\nplot avePosTickAtPivot1 = HighestAll(if IsNaN(close[-1]) and !IsNaN(close) then totalPDTAP1 / positiveDays else Double.NaN);\nplot avePosTickAtPivot2 = HighestAll(if IsNaN(close[-1]) and !IsNaN(close) then totalPDTAP2 / positiveDays else Double.NaN);\nplot avePosTickAtPivot3 = HighestAll(if IsNaN(close[-1]) and !IsNaN(close) then totalPDTAP3 / positiveDays else Double.NaN);\nplot avePosTickAtPivot4 = HighestAll(if IsNaN(close[-1]) and !IsNaN(close) then totalPDTAP4 / positiveDays else Double.NaN);\n\nplot aveNegTickAtPivot1 = HighestAll(if IsNaN(close[-1]) and !IsNaN(close) then totalNDTAP1 / negativeDays else Double.NaN);\nplot aveNegTickAtPivot2 = HighestAll(if IsNaN(close[-1]) and !IsNaN(close) then totalNDTAP2 / negativeDays else Double.NaN);\nplot aveNegTickAtPivot3 = HighestAll(if IsNaN(close[-1]) and !IsNaN(close) then totalNDTAP3 / negativeDays else Double.NaN);\nplot aveNegTickAtPivot4 = HighestAll(if IsNaN(close[-1]) and !IsNaN(close) then totalNDTAP4 / negativeDays else Double.NaN);\n\navePosTickAtPivot1.SetDefaultColor(Color.DARK_GRAY);\navePosTickAtPivot2.SetDefaultColor(Color.DARK_GRAY);\navePosTickAtPivot3.SetDefaultColor(Color.DARK_GRAY);\navePosTickAtPivot4.SetDefaultColor(Color.DARK_GRAY);\naveNegTickAtPivot1.SetDefaultColor(Color.DARK_GRAY);\naveNegTickAtPivot2.SetDefaultColor(Color.DARK_GRAY);\naveNegTickAtPivot3.SetDefaultColor(Color.DARK_GRAY);\naveNegTickAtPivot4.SetDefaultColor(Color.DARK_GRAY);\n\navePosTickAtPivot1.SetStyle(Curve.FIRM);\navePosTickAtPivot2.SetStyle(Curve.FIRM);\navePosTickAtPivot3.SetStyle(Curve.FIRM);\navePosTickAtPivot4.SetStyle(Curve.FIRM);\naveNegTickAtPivot1.SetStyle(Curve.FIRM);\naveNegTickAtPivot2.SetStyle(Curve.FIRM);\naveNegTickAtPivot3.SetStyle(Curve.FIRM);\naveNegTickAtPivot4.SetStyle(Curve.FIRM);\navePosTickAtPivot1.HideBubble();\navePosTickAtPivot2.HideBubble();\navePosTickAtPivot3.HideBubble();\navePosTickAtPivot4.HideBubble();\naveNegTickAtPivot1.HideBubble();\naveNegTickAtPivot2.HideBubble();\naveNegTickAtPivot3.HideBubble();\naveNegTickAtPivot4.HideBubble();\n\navePosTickAtPivot1.HideTitle();\navePosTickAtPivot2.HideTitle();\navePosTickAtPivot3.HideTitle();\navePosTickAtPivot4.HideTitle();\naveNegTickAtPivot1.HideTitle();\naveNegTickAtPivot2.HideTitle();\naveNegTickAtPivot3.HideTitle();\naveNegTickAtPivot4.HideTitle();\n\n\nAddChartBubble( SecondsTillTime(openTime) == 0 and GetDay() == GetLastDay(), avePosTickAtPivot1, \&quot;+10:30\&quot;, Color.DARK_GRAY, yes);\n#AddChartBubble(SecondsTillTime(openTime) == 0 and GetDay() == GetLastDay(), avePosTickAtPivot2, \&quot;+12:00\&quot;, Color.DARK_GRAY, yes);\n#AddChartBubble(SecondsTillTime(openTime) == 0 and GetDay() == GetLastDay(), avePosTickAtPivot3, \&quot;+13:30\&quot;, Color.DARK_GRAY, yes);\n#AddChartBubble(SecondsTillTime(openTime) == 0 and GetDay() == GetLastDay(), avePosTickAtPivot4, \&quot;+15:00\&quot;, Color.DARK_GRAY, yes);\n\nAddChartBubble(SecondsTillTime(openTime) == 0 and GetDay() == GetLastDay(), aveNegTickAtPivot1, \&quot;-10:30\&quot;, Color.DARK_GRAY, yes);\n#AddChartBubble(SecondsTillTime(openTime) == 0 and GetDay() == GetLastDay(), aveNegTickAtPivot2, \&quot;-12:00\&quot;, Color.DARK_GRAY, yes);\n#AddChartBubble(SecondsTillTime(openTime) == 0 and GetDay() == GetLastDay(), aveNegTickAtPivot3, \&quot;-13:30\&quot;, Color.DARK_GRAY, yes);\n#AddChartBubble(SecondsTillTime(openTime) == 0 and GetDay() == GetLastDay(), aveNegTickAtPivot4, \&quot;-15:00\&quot;, Color.DARK_GRAY, yes);\n\nAddVerticalLine(SecondsTillTime(openTime) == 0 or (GetDay() != GetDay()[1] and (SecondsTillTime(0000) &gt; 0)), \&quot;\&quot;, Color.GRAY, 1);\n\n\ninput UpThreshold = 1000;\ninput DownThreshold = -1000;\n#input DistArrowLevel = 1300;\ninput ShowHiLo = yes;\n\nAddLabel(yes, symbol , Color.white);\nAddLabel(yes, “Cummulative Tick:  ”, if cumulativeTick &gt;= 0 then if cumulativeTick &gt; cumulativeTick[1] then cumulativeTick.Color(\&quot;Positive and Up\&quot;) else cumulativeTick.Color(\&quot;Positive and Down\&quot;) else if cumulativeTick &lt; cumulativeTick[1] then cumulativeTick.Color(\&quot;Negative and Down\&quot;) else cumulativeTick.Color(\&quot;Negative and Up\&quot;));\nAddLabel(cumulativeTick &gt;= 0 ,   \&quot; +” + astext(cumulativeTick), Color.GREEN);\nAddLabel(cumulativeTick &lt; 0 ,   \&quot; \&quot; + astext(cumulativeTick), Color.Light_Red);\nAddLabel(ShowHiLo, “HI ” + AsText(high(symbol, ”Day”, ”LAST”)), Color.ORANGE);\nAddLabel(ShowHiLo, “LO ” + AsText(low(symbol, ”Day”, ”LAST”)), Color.ORANGE);\nAddLabel(close(symbol) &gt;= 0 and close(symbol) &lt;= UpThreshold, close(symbol) + \&quot; ”, Color.GREEN);\nAddLabel(close(symbol) &lt; 0 and close(symbol) &gt;= DownThreshold, close(symbol) + \&quot; ”, Color.RED);\nAddLabel(close(symbol) &gt; UpThreshold, \&quot;Above \&quot; + AsText(UpThreshold) + \&quot;! \&quot; + close(symbol), Color.GREEN);\nAddLabel(close(symbol) &lt; DownThreshold, \&quot;Below \&quot; + AsText(DownThreshold) + \&quot;! \&quot; + close(symbol), Color.RED);\n\ncumulativeTick.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);\ncumulativeTick.SetLineWeight(3);\n\n\ncumulativeTick.DefineColor(\&quot;Positive and Up\&quot;, Color.cyan);\ncumulativeTick.DefineColor(\&quot;Positive and Down\&quot;, Color.magenta);\ncumulativeTick.DefineColor(\&quot;Negative and Down\&quot;,  Color.red);\ncumulativeTick.DefineColor(\&quot;Negative and Up\&quot;, Color.yellow);\ncumulativeTick.AssignValueColor(if cumulativeTick &gt;= 0 then if cumulativeTick &gt; cumulativeTick[1] then cumulativeTick.Color(\&quot;Positive and Up\&quot;) else cumulativeTick.Color(\&quot;Positive and Down\&quot;) else if cumulativeTick &lt; cumulativeTick[1] then cumulativeTick.Color(\&quot;Negative and Down\&quot;) else cumulativeTick.Color(\&quot;Negative and Up\&quot;));\n&quot;,name=&quot;_876b6b8b_e992_4721_89bd_89840c069669&quot;}){hidden=&lt;T,inputsMap:TreeMap9{^(&quot;symbol&quot;,&quot;$TICK/Q&quot;)},inputsMap=@TreeMap9,plots{0:{lineStyle=1,paintingStrategy=17}}})}),^(#%4.SubgraphId(&quot;Subgraph39&quot;),#%4.SubgraphStorableModel{height=80,storableIndicators.+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;#Ctick by @Dalebru 10/24/2015\n#Cumulative tick\n#Can reset to start at beginning of Day, Week, Month, Year, Chart\n#Thanks to futures.io @rmejia for similar code in VWAP_Bands\ndeclare lower;\ninput TimeFrame = {default Day, Week, Month, Year, Chart};\n\n################\n\n\n#input tick =FundamentalType.TICK_COUNT;\ndef tick =Fundamental(FundamentalType.TICK_COUNT);\ninput price1 = FundamentalType.CLOSE;;\n#input aggregationPeriod = AggregationPeriod.DAY;\n\n#def MovAvg = MovingAverage(averageType, Fundamental(price, period = aggregationPeriod), length);\n#def zero = 0;\n#def Diff = close - MovAvg;\n#plot  m= MovAvg;\n#plot p= close;\n\n#plot mySpike = Diff;\n\n##################\n\n\n\n#input symbol = \&quot;$TICK\&quot;;\ninput filter =1;\n#def isInvalid = IsNan(hlc3(symbol));\ndef isInvalid = IsNan(price1);\n#def price = if (isInvalid, 0, hlc3(symbol));\ndef tickCout =tick;\ninput UseUpDownColors = yes;\ndef cap = GetAggregationPeriod();\ndef errorInAggregation =\n    timeFrame == timeFrame.Day and cap &gt;= AggregationPeriod.WEEK or\n    timeFrame == timeFrame.Week and cap &gt;= AggregationPeriod.MONTH;\nAssert(!errorInAggregation, \&quot;timeFrame should be not less than current chart aggregation period\&quot;);\ndef yyyyMmDd = GetYYYYMMDD();\ndef year = GetYear();\ndef periodIndx;\nswitch (timeFrame) \n{\ncase Chart:\n    periodIndx = 0;\ncase Day:\n    periodIndx = yyyyMmDd;\ncase Week:\n    periodIndx = Floor((daysFromDate(first(yyyyMmDd)) + getDayOfWeek(first(yyyyMmDd))) / 7);\ncase Month:\n    periodIndx = roundDown(yyyyMmDd / 100, 0);\ncase Year:\n    periodIndx = Floor(year - First(year));\n}\ndef isPeriodRolled = CompoundValue(filter, periodIndx != periodIndx[1], yes);\ndef cum;\ndef upTick = if close &gt; close[1]  then yes else no;\ndef downTick = if close &lt; close[1]  then yes else no;\ndef nullTick = if close == close[1]  then yes else no;\n#plot Trades = Fundamental(FundamentalType.TICK_COUNT); \nif (isPeriodRolled)\n{\n    cum = tickCout;\n}\nelse\n{\n    #cum = tickCout;\n   cum = if upTick then cum[1] + tickCout else if downTick then  cum[1] - tickCout else  cum[1]  ;\n}\n#plot t =tick;\n#plot Trades = Fundamental(FundamentalType.TICK_COUNT); \n#Trades.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);\nplot CumTick = if isInvalid then Double.NaN else cum;\nCumTick.SetPaintingStrategy(PaintingStrategy.Line);\n#CumTick.SetLineWeight(3);\nCumTick.DefineColor(\&quot;Up\&quot;, Color.Green);\nCumTick.DefineColor(\&quot;Down\&quot;,  Color.Red);\nCumTick.DefineColor(\&quot;Default\&quot;, GetColor(1));\nCumTick.DefineColor(\&quot;Empty\&quot;,  Color.Red);\n\nCumTick.AssignValueColor(if !UseUpDownColors then CumTick.color(\&quot;Default\&quot;) else  if CumTick[0] &gt; CumTick[1] then CumTick.color(\&quot;Up\&quot;) else CumTick.color(\&quot;Down\&quot;));\n#CumTick.SetHiding(isInvalid);\n\nplot zero = 0;\nzero.AssignValueColor(GetColor(3));\n\n\n\n\n\n\n&quot;,name=&quot;_09e471c7_4a42_4a7b_a806_ae792a9fecae&quot;}){hidden=&lt;T,plots{0:{paintingStrategy=17}}})}),^(#%4.SubgraphId(&quot;Subgraph41&quot;),#%4.SubgraphStorableModel{height=80,storableIndicators.+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;declare lower;\n\ninput fastLength = 23;\ninput slowLength = 50;\ninput KPeriod = 10;\ninput DPeriod = 3;\ninput over_bought = 75;\ninput over_sold = 25;\ninput averageType = AverageType.EXPONENTIAL;\ndef price1= open;\ninput rsi_th=42;\ndef length1 =22;\n\ndef macdRsi =   reference MomentumSMA();\n# ((low - Highest(price1[1], length1)) / Highest(price1[1], length1)) * 100;\n#((price1 - Lowest(low[1], length1)) / (Highest(high[1], length1) - Lowest(low[1], length1)));\n#reference RSI(length = 14, price = close );\ndef fastK1rsi = FastKCustom(macdRsi, KPeriod);\ndef fastD1Rsi = MovingAverage(averageType, fastK1rsi, DPeriod);\ndef fastK2rsi = FastKCustom(fastD1Rsi, KPeriod);\n#plot RSIm = fastD1Rsi;#MovingAverage(averageType, fastK2rsi, DPeriod);\n\ninput priceSch =close;\n\ndef macd = MovingAverage(averageType, priceSch, fastLength) - MovingAverage(averageType, priceSch, slowLength);\ndef fastK1 = FastKCustom(macd, KPeriod);\ndef fastD1 = MovingAverage(averageType, fastK1, DPeriod);\ndef fastK2 = FastKCustom(fastD1, KPeriod);\nplot STC = MovingAverage(averageType, fastK2, DPeriod);\n\nplot OverBought = over_bought;\nplot OverSold = over_sold;\n\nSTC.SetDefaultColor(GetColor(8));\nOverBought.SetDefaultColor(GetColor(7));\nOverSold.SetDefaultColor(GetColor(7));\ndef cldH= if STC &gt; OverBought then STC else OverBought;\nAddCloud(cldH,OverBought, Color.Green, Color.Green);\n\ndef cldL= if STC &lt; OverSold then STC else OverSold;\nAddCloud(cldL,OverSold, Color.RED, Color.RED);\nSTC.setlineWeight(3);\nOverBought.setStyle(curve.short_dash);\noversold.setStyle(curve.short_dash);\n####$$$$$$$$\n\n\ninput priceSlm = close;\n\ninput superFastLength = 8;\n\ninput fastLengthSlm = 13;\n\ninput slowLengthSlm = 21;\n\ninput displace = 0;\n\n\ninput averageTypeSlm = AverageType.EXPONENTIAL;\n\ndef mov_avg8 = MovingAverage(averageTypeSlm, priceSlm[-displace], superFastLength);\n\ndef mov_avg13 = MovingAverage(averageTypeSlm, priceSlm[-displace], fastLengthSlm);\n\ndef mov_avg21 = MovingAverage(averageTypeSlm, priceSlm[-displace], slowLengthSlm);\n \n#moving averages\n\ndef Superfast = mov_avg8;\n\ndef Fast = mov_avg13;\n\ndef Slow = mov_avg21;\n\n\ndef buy = mov_avg8 &gt; mov_avg13 and mov_avg13 &gt; mov_avg21 and low &gt; mov_avg8;\n\ndef stopbuy = mov_avg8 &lt;= mov_avg13;\n\ndef buynow = !buy[1] and buy;\n\ndef buysignal = CompoundValue(1, if buynow and !stopbuy then 1 else if buysignal[1] == 1 and stopbuy then 0 else buysignal[1], 0);\n\n\ndef Buy_Signal = buysignal[1] == 0 and buysignal == 1;\n\ndef Momentum_Down = buysignal[1] == 1 and buysignal == 0;\n\n\ndef sell = mov_avg8 &lt; mov_avg13 and mov_avg13 &lt; mov_avg21 and high &lt; mov_avg8;\n\ndef stopsell = mov_avg8 &gt;= mov_avg13;\n\ndef sellnow = !sell[1] and sell;\n\ndef sellsignal = CompoundValue(1, if sellnow and !stopsell then 1 else if sellsignal[1] == 1 and stopsell then 0 else sellsignal[1], 0);\n\n\ndef Sell_Signal = sellsignal[1] == 0 and sellsignal;\n\ndef Momentum_Up = sellsignal[1] == 1 and sellsignal == 0;\n \n# when using this as a custom scan, change the word plot to def\n# then remove the \'#\' from in front of one of the \&quot;plot Scan\&quot; statements below\ndef Colorbars = if buysignal == 1 then 1 else if sellsignal == 1 then -1 else if buysignal == 0 or sellsignal == 0 then 0 else 0;\n\n# use this first Scan plot for SLM Ribbon Momentum UP\n#plot Scan = if Colorbars == 1 then yes else no;\n\n# use this second Scan plot for SLM Ribbon Momentum DOWN\n#plot Scan = if Colorbars == -1 then yes else no;\n\n\n\n\n\n\n###############\n\ndef Colorbars1 = if buysignal == 1 then 1 else if sellsignal == 1 then 2 else if buysignal == 0 or sellsignal == 0 then 3 else 0;\n\n\n\nSTC.definecolor(\&quot;Buy_Signal_Bars\&quot;, color.dark_green);\n\nSTC.definecolor(\&quot;Sell_Signal_Bars\&quot;, color.red);\n\nSTC.definecolor(\&quot;NeutralUp\&quot;, color.plum);\n\nSTC.definecolor(\&quot;NeutralDown\&quot;, color.orange);\n\nSTC.AssignValueColor(if Colorbars1 ==1 then STC.color(\&quot;buy_signal_bars\&quot;) else if colorbars1 ==2 then STC.color(\&quot;Sell_Signal_bars\&quot;) else if Momentum_Up then  STC.color(\&quot;neutralUp\&quot;) else STC.color(\&quot;neutralDown\&quot;) );\n\n\nplot UpSignal = if (buysignal and STC crosses above over_sold) then STC else Double.NaN;\nplot DownSignal = if (sellsignal and STC crosses below over_bought) then STC else Double.NaN;\ninput showBreakoutSignals =yes;\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\n\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\n\n\n\n\n\n\n\n\n\n\n######$$$$\n\n#########################RSI\n\n\ninput length = 14;\ninput over_BoughtRsi = 70;\ninput over_SoldRSI = 30;\ninput priceRsi = close;\ninput priceRsi2 = vwap;\n\n\n\ninput averageTypeRSI = AverageType.WILDERS;\ninput averageTypeRSI2 = AverageType.simple;\n#input showBreakoutSignals = no;\n\ninput showlable = yes;\n\ndef NetChgAvg = MovingAverage(averageTypeRSI, priceRsi - priceRsi[1], length);\ndef TotChgAvg = MovingAverage(averageTypeRSI, AbsValue(priceRsi - priceRsi[1]), length);\ndef ChgRatio = if TotChgAvg != 0 then NetChgAvg / TotChgAvg else 0;\n\nplot RSI = 50 * (ChgRatio + 1);\n\n\ndef NetChgAvg2 = MovingAverage(averageTypeRSI2, priceRsi2 - priceRsi2[1], length+5);\ndef TotChgAvg2 = MovingAverage(averageTypeRSI2, AbsValue(priceRsi2 - priceRsi2[1]), length+5);\ndef ChgRatio2= if TotChgAvg2 != 0 then NetChgAvg2 / TotChgAvg2 else 0;\n\nplot RSI2 = 50 * (ChgRatio2 + 1);\n\n\n\n\n\n\nplot OverSoldR = over_SoldRSI;\nplot OverBoughtR = over_BoughtRsi;\n#plot UpSignal = if RSI crosses above OverSold then OverSold else Double.NaN;\n#plot DownSignal = if RSI crosses below OverBought then OverBought else Double.NaN;\nplot MID = 50;\n\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\nRSI.DefineColor(\&quot;OverBought\&quot;, Color.LIGHT_RED);\nRSI.DefineColor(\&quot;Normal\&quot;, GetColor(7));\nRSI.DefineColor(\&quot;OverSold\&quot;, Color.LIGHT_GREEN);\nRSI.DefineColor(\&quot;Below50\&quot;, Color.CYAN);\nRSI.DefineColor(\&quot;Above50\&quot;, Color.PINK);\n\nRSI.AssignValueColor(if RSI &gt;= over_Bought then RSI.Color(\&quot;OverBought\&quot;) else if RSI &lt;= over_Sold then RSI.Color(\&quot;OverSold\&quot;) else if (RSI &gt; over_Sold and RSI &lt; rsi_th) then RSI.Color(\&quot;Below50\&quot;) else if (RSI &lt; over_Bought and RSI &gt;rsi_th) then RSI.Color(\&quot;Above50\&quot;) else  RSI.Color(\&quot;Normal\&quot;)) ;\nOverSoldR.SetDefaultColor(GetColor(8));\nOverBoughtR.SetDefaultColor(GetColor(8));\n#UpSignal.SetDefaultColor(Color.UPTICK);\n#UpSignal.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\n#DownSignal.SetDefaultColor(Color.DOWNTICK);\n#DownSignal.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\nOverSoldR.hide();\nOverBoughtR.hide();\nmid.hide();\n\nAddLabel(showlable, \&quot;RSI = \&quot; + RSI , if RSI &gt; over_Bought  then Color.RED else if RSI &lt; over_Sold then  Color.GREEN else Color.GRAY);\ndef cldRSIL= if RSI &lt; OverSoldR then RSI else OverSoldR;\nAddCloud(cldRSIL,OverSoldR,  Color.Green, Color.Green);\n\ndef cldRsiH= if RSI &gt; OverBought then RSI else OverBoughtR;\nAddCloud(cldRsiH,OverBoughtR,Color.RED, Color.RED);\n\n\n\ndef ImpVol = imp_volatility();\n\nAddLabel(showlable, \&quot;iV= \&quot; + ImpVol, Color.GRAY);\nMID.DefineColor(\&quot;Mid\&quot;, Color.GREEN);\n\n\n## momentum\n\ndef CloseOpenDiff = if close &gt; open then close - open else 0;\ndef OpenCloseDiff = if close &lt; open then open - close else 0;\ndef avgCloseOpen = Average(CloseOpenDiff, length);\ndef avgOpenClose = Average(OpenCloseDiff, length);\n\n#plot IMI = avgCloseOpen / (avgCloseOpen + avgOpenClose) * 100;\n#IMI.SetDefaultColor(GetColor(8));\n##############################\n\n\n\n#\n# TD Ameritrade IP Company, Inc. (c) 2018-2020\n#\n\n\n\ninput vfiLength = 130;\ninput averageLength = 100;\ninput trendQualityLength = 63;\ninput maxStiffness = 7;\ninput marketIndex = \&quot;SPY\&quot;;\ninput weightForMoneyFlow = 1.0;\ninput weightForTradingAboveAverage = 1.0;\ninput weightForUptrend = 1.0;\ninput weightForTrendQuality = 1.0;\ninput weightForMarketDirection = 2.0;\ninput showLabel = No;\n\ndef vfi = reference VolumeFlowIndicator(length = vfiLength, \&quot;max volume cut off\&quot; = 2.5);\ndef sma = Average(close, averageLength);\ndef ema = ExpAverage(close(marketIndex), averageLength);\ndef stiffness = Sum(close &lt; sma, trendQualityLength);\n\ndef Score;\ndef MoneyFlow = vfi &gt; 0;\ndef TradingAboveAverage = close &gt; sma;\ndef Uptrend = sma &gt; sma[4];\ndef TrendQuality = stiffness &lt;= maxStiffness;\ndef MarketDirection = ema &gt;= ema[2];\n\nScore = weightForMoneyFlow * MoneyFlow + weightForTradingAboveAverage * TradingAboveAverage + weightForUptrend * Uptrend + weightForTrendQuality * TrendQuality + weightForMarketDirection * MarketDirection;\n\n\nAddLabel(showLabel and MoneyFlow, \&quot;Money flow\&quot;, GetColor(2));\nAddLabel(showLabel and TradingAboveAverage, \&quot;Trading above average\&quot;, GetColor(3));\nAddLabel(showLabel and Uptrend, \&quot;Uptrend\&quot;, GetColor(4));\nAddLabel(showLabel and TrendQuality, \&quot;Trend quality\&quot;,GetColor(5));\nAddLabel(showLabel and TrendQuality, \&quot;Trend quality\&quot;,GetColor(5));\nAddLabel(showLabel and MarketDirection, \&quot;Market direction\&quot;,GetColor(6));\nAddLabel(showLabel , \&quot;Market score \&quot;+ score,GetColor(7));&quot;,name=&quot;_ef7ee43b_ddba_4881_809e_96703a28d1ce&quot;}))}),^(#%4.SubgraphId(&quot;Subgraph43&quot;),#%4.SubgraphStorableModel{height=88,storableIndicators.+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;declare lower;\ndef timeFrame = getAggregationPeriod();\ninput aggregationPeriod1 =AggregationPeriod.Two_MIN;\ninput useAggegateForP1 =yes;\n#input aggregationPeriod2 =AggregationPeriod.Fifteen_MIN;\n\n\n# Variables:\ndef price =if (useAggegateForP1) then close(period = aggregationPeriod1) else close;\n\n\n\ninput fastLength = 23;\ninput slowLength = 50;\ninput KPeriod = 10;\ninput DPeriod = 3;\ninput over_bought = 75;\ninput over_sold = 25;\ninput averageType = AverageType.EXPONENTIAL;\n\ndef macd = MovingAverage(averageType, price, fastLength) - MovingAverage(averageType, price, slowLength);\ndef fastK1 = FastKCustom(macd, KPeriod);\ndef fastD1 = MovingAverage(averageType, fastK1, DPeriod);\ndef fastK2 = FastKCustom(fastD1, KPeriod);\nplot STC = MovingAverage(averageType, fastK2, DPeriod);\nplot OverBought = over_bought;\nplot OverSold = over_sold;\n\nSTC.SetDefaultColor(GetColor(8));\nOverBought.SetDefaultColor(GetColor(7));\nOverSold.SetDefaultColor(GetColor(7));\ndef cldH= if STC &gt; OverBought then STC else OverBought;\nAddCloud(cldH,OverBought, Color.Green, Color.Green);\n\ndef cldL= if STC &lt; OverSold then STC else OverSold;\nAddCloud(cldL,OverSold, Color.RED, Color.RED);\n\n\n#########################RSI\n\n\ninput length = 14;\ninput over_BoughtRsi = 70;\ninput over_SoldRSI = 30;\n#input price = close;\n\n\n\ninput averageTypeRSI = AverageType.WILDERS;\ninput showBreakoutSignals = no;\n\ninput showlable = yes;\n\ndef NetChgAvg = MovingAverage(averageTypeRSI, price - price[1], length);\ndef TotChgAvg = MovingAverage(averageTypeRSI, AbsValue(price - price[1]), length);\ndef ChgRatio = if TotChgAvg != 0 then NetChgAvg / TotChgAvg else 0;\n\nplot RSI = 50 * (ChgRatio + 1);\n\n\n\n\n\nplot OverSoldR = over_SoldRSI;\nplot OverBoughtR = over_BoughtRsi;\nplot UpSignal = if RSI crosses above OverSold then OverSold else Double.NaN;\nplot DownSignal = if RSI crosses below OverBought then OverBought else Double.NaN;\nplot MID = 50;\n\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\nRSI.DefineColor(\&quot;OverBought\&quot;, Color.LIGHT_RED);\nRSI.DefineColor(\&quot;Normal\&quot;, GetColor(7));\nRSI.DefineColor(\&quot;OverSold\&quot;, Color.LIGHT_GREEN);\nRSI.DefineColor(\&quot;Below50\&quot;, Color.CYAN);\nRSI.DefineColor(\&quot;Above50\&quot;, Color.PINK);\n\nRSI.AssignValueColor(if RSI &gt;= over_Bought then RSI.Color(\&quot;OverBought\&quot;) else if RSI &lt;= over_Sold then RSI.Color(\&quot;OverSold\&quot;) else if (RSI &gt; over_Sold and RSI &lt; 50) then RSI.Color(\&quot;Below50\&quot;) else if (RSI &lt; over_Bought and RSI &gt; 50) then RSI.Color(\&quot;Above50\&quot;) else  RSI.Color(\&quot;Normal\&quot;)) ;\nOverSoldR.SetDefaultColor(GetColor(8));\nOverBoughtR.SetDefaultColor(GetColor(8));\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\nOverSoldR.hide();\nOverBoughtR.hide();\nmid.hide();\n\n\nAddLabel(showlable, \&quot;RSI = \&quot; + RSI , if RSI &gt; over_Bought  then Color.RED else if RSI &lt; over_Sold then  Color.GREEN else Color.GRAY);\ndef cldRSIL= if RSI &lt; OverSoldR then RSI else OverSoldR;\nAddCloud(cldRSIL,OverSoldR,  Color.Green, Color.Green);\n\ndef cldRsiH= if RSI &gt; OverBought then RSI else OverBoughtR;\nAddCloud(cldRsiH,OverBoughtR,Color.RED, Color.RED);\n\n\n\ndef ImpVol = imp_volatility();\n\nAddLabel(showlable, \&quot;iV= \&quot; + ImpVol, Color.GRAY);\nMID.DefineColor(\&quot;Mid\&quot;, Color.GREEN);\n\ninput vfiLength = 130;\ninput averageLength = 100;\ninput trendQualityLength = 63;\ninput maxStiffness = 7;\ninput marketIndex = \&quot;SPY\&quot;;\ninput weightForMoneyFlow = 1.0;\ninput weightForTradingAboveAverage = 1.0;\ninput weightForUptrend = 1.0;\ninput weightForTrendQuality = 1.0;\ninput weightForMarketDirection = 2.0;\ninput showLabel = No;\n\ndef vfi = reference VolumeFlowIndicator(length = vfiLength, \&quot;max volume cut off\&quot; = 2.5);\ndef sma = Average(close, averageLength);\ndef ema = ExpAverage(close(marketIndex), averageLength);\ndef stiffness = Sum(close &lt; sma, trendQualityLength);\n\ndef Score;\ndef MoneyFlow = vfi &gt; 0;\ndef TradingAboveAverage = close &gt; sma;\ndef Uptrend = sma &gt; sma[4];\ndef TrendQuality = stiffness &lt;= maxStiffness;\ndef MarketDirection = ema &gt;= ema[2];\n\nScore = weightForMoneyFlow * MoneyFlow + weightForTradingAboveAverage * TradingAboveAverage + weightForUptrend * Uptrend + weightForTrendQuality * TrendQuality + weightForMarketDirection * MarketDirection;\n\n\nAddLabel(showLabel and MoneyFlow, \&quot;Money flow\&quot;, GetColor(2));\nAddLabel(showLabel and TradingAboveAverage, \&quot;Trading above average\&quot;, GetColor(3));\nAddLabel(showLabel and Uptrend, \&quot;Uptrend\&quot;, GetColor(4));\nAddLabel(showLabel and TrendQuality, \&quot;Trend quality\&quot;,GetColor(5));\nAddLabel(showLabel and TrendQuality, \&quot;Trend quality\&quot;,GetColor(5));\nAddLabel(showLabel and MarketDirection, \&quot;Market direction\&quot;,GetColor(6));\nAddLabel(showLabel , \&quot;Market score \&quot;+ score,GetColor(7));&quot;,name=&quot;_eda484cd_ddc6_4c0a_bbe5_c38bde0176d0&quot;}){hidden=&lt;T,inputsMap:TreeMap10{^(&quot;aggregationPeriod1&quot;,&quot;THREE_MIN&quot;)},inputsMap=@TreeMap10})}),^(#%4.SubgraphId(&quot;Subgraph45&quot;),#%4.SubgraphStorableModel{height=80,storableIndicators.+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# TEA 2.0 - TOS version - 2015-06-04\n# From Andrew Falde\'s work - LessThanRandom.com \n# Converted from TradeStation to TOS by John Chernicky\n\n#Hint: TEA 2.0 by Andrew Falde at LessThanRandom.com\n\ndeclare lower;\ninput Period = 21; # Bars for Price Analysis\n#Hint Period: Period in number of bars.\ndef Price = close; # Use closing price for calculaltion\ninput Author = \&quot;Andrew Falde - LessThanRandom.com\&quot;;\n\n# Expansion Calculation\ndef ATR = reference ATR(Period, averageType = AverageType.SIMPLE);\ndef StdDev = StDev(data = Price, length = Period);\ndef squeeze = (ATR * .75) - StdDev;\ndef Expansion = If (squeeze &lt; 0, 1, 0);\n\n# Linear Regression \ndef lowest = Lowest(low[1], Period);\ndef highest = Highest(high[1], Period);\ndef EMA = ExpAverage(Price, Period);\ndef Resolve = Price - ((highest + lowest) / 2 + EMA) / 2;\ndef Trendline = LinearRegCurve(0, Period, Resolve);\n\n# Trend Caclulation\n# 1 - Accumulation\n# 2 - Mark Up\n# 3 - Distribution\n# 4 - Mark Down\n# 0 - No Trend\ndef Trend = if Trendline &lt;= 0 and Trendline &gt; Trendline[1] then 1 else (\n            if Trendline &gt; 0 and Trendline &gt; Trendline[1] then 2 else (\n            if Trendline &gt; 0 and Trendline &lt; Trendline[1] then 3 else (\n            if Trendline &lt;= 0 and Trendline &lt; Trendline[1] then 4 else (\n            Double.NaN))));\n\nplot TEA = \n(if Trend == 1 then -1 \nelse (if Trend == 2 then 1 \nelse (if Trend == 3 then 1\nelse (if Trend == 4 then -1 else Double.NaN\n))));\n\nplot Consolidated = (if Expansion == 0 then 0 else Double.NaN);\n\nTEA.AssignValueColor \n(if Trend == 1 then Color.DARK_RED \nelse (if Trend == 2 then Color.GREEN \nelse (if Trend == 3 then Color.DARK_GREEN\nelse (if Trend == 4 then Color.RED else Color.DARK_GRAY\n))));\n\nTEA.SetPaintingStrategy(PaintingStrategy.POINTS);\nTEA.SetLineWeight(4);\n#TEA.HideTitle();\nTEA.HideBubble();\n\nConsolidated.AssignValueColor(Color.BLUE);\nConsolidated.SetPaintingStrategy(PaintingStrategy.POINTS);\nConsolidated.SetLineWeight(4);\n#Consolidated.HideTitle();\nConsolidated.HideBubble();\n\n#AddLabel(yes, \&quot;LessThanRandom.com\&quot;, Color.GRAY);&quot;,name=&quot;_c6ab1c32_c813_3498_9fc7_7e038fe75c19&quot;}){inputsMap:TreeMap11{^(&quot;Period&quot;,38)},inputsMap=@TreeMap11,plots{1:{hiding=&lt;T}}})}),^(#%4.SubgraphId(&quot;Subgraph47&quot;),#%4.SubgraphStorableModel{height=81,storableIndicators.+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;#\n# Hull Moving Average Concavity Divergence\n#  or\n# The Second Derivative of the Hull Moving Average\n#\n# Author: Seth Urion (Mahsume)\n# Version: 2020-02-23 V3\n#\n# This code is licensed (as applicable) under the GPL v3\n#\n# ----------------------\n\ndeclare lower;\n\ninput price = OPEN;\n\ninput HMA_length = 55;\ninput lookback = 2;\n\ndef HMA = HullMovingAvg(length = HMA_length, price = price);\n\ndef delta = HMA[1] - HMA[lookback + 1];\ndef delta_per_bar = delta / lookback;\n\ndef next_bar = HMA[1] + delta_per_bar;\n\ndef concavity = if HMA &gt; next_bar then 1 else -1;\n\nplot zero = 0;\nzero.setdefaultcolor(color.gray);\nzero.setpaintingstrategy(PaintingStrategy.DASHES);\n\nplot divergence = HMA - next_bar;\ndivergence.setDefaultColor(Color.LIME);\ndivergence.SetLineweight(2);\n\nplot cx_up = if divergence crosses above zero then 0 else double.nan;\ncx_up.SetPaintingStrategy(PaintingStrategy.POINTS);\ncx_up.SetDefaultColor(Color.LIGHT_GREEN);\ncx_up.SetLineWeight(4);\n\nplot cx_down = if divergence crosses below zero then 0 else double.nan;\ncx_down.SetPaintingStrategy(PaintingStrategy.POINTS);\ncx_down.SetDefaultColor(Color.RED);\ncx_down.SetLineWeight(4);&quot;,name=&quot;_f6e474e4_a41f_360b_9751_00c871aa84ca&quot;}){inputsMap.!get:Integer3(&quot;HMA_length&quot;)})}),^(#%4.SubgraphId(&quot;Subgraph49&quot;),#%4.SubgraphStorableModel{height=80,storableIndicators.+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# IWO Turning Point Indicator\n# https://www.youtube.com/watch?v=MhME2EV0E_c\n# Credits: Steve Place\n# Get the IWO TurningPoint Indicator Here: https://investingwithoptions.com/tpi-yt/\n\n#The Turning Point Indicator shows you key statistical levels in any market. These levels can then be used to help you choose option trading strikes with the best risk/reward.\n\n# For Options Trading use Daily Chart and 10 Days and 252 as the settings\n\ndeclare lower;input length = 10;input stdLength = 60;plot rolling = (close - close[length])*100/close[length];plot updev = StDev(rolling, stdLength);plot twoupdev = 2*StDev(rolling, stdLength);plot downdev = -StDev(rolling, stdLength);plot twodowndev = -2*StDev(rolling, stdLength);\n\nplot zero = 0;\nzero.setdefaultcolor(color.gray);\nzero.setpaintingstrategy(PaintingStrategy.DASHES);\n&quot;,name=&quot;_87d043e9_29dc_3dfa_a88a_624245923273&quot;}){inputsMap:TreeMap12{^(&quot;length&quot;,@Integer2),^(&quot;stdLength&quot;,@Integer3)},inputsMap=@TreeMap12,plots{0:{lineWeight=2}}})})}}" DEFAULT_TYPE="DASHBOARD" ORDER_ENTRY_EXPANDED="false" ORDER_ENTRY_PINNED_PROPERTY="false" ROW_COUNT="1" SHARED_USER_SCRIPTS="@v6@owner{chartAggregationPeriods:ChartAggregationPeriodArray0,chartAggregationPeriods=@ChartAggregationPeriodArray0}#java.util.HashMap{^(&quot;_60475667_d5a0_4a24_8038_b84ac1548626&quot;,&quot;TheoProjectionPivots&quot;),^(&quot;_f59c642e_bc17_46b6_b151_447e2c413c14&quot;,&quot;rsiLaguerreTime&quot;)}" SYMBOL="ZM" SYMBOL_GROUP="1" VERTICAL="false" VISIBLE="true" WEIGHT="3.0"/>
            <DASHBOARD SYMBOL="/ES" SYMBOL_GROUP="-1" VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <LEVEL_II VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <LIVE_NEWS SYMBOL="UIS" SYMBOL_GROUP="2" VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <PHASE_SCORES VERTICAL="false" VISIBLE="false" WEIGHT="2.0"/>
            <TIME_SALES VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <TRADE CONFIGURATION_NAME="SINGLE" ORDER_RULES_SET="STOCK" ORDER_TYPE="LIMIT" OS_AUTO="false" OS_EXPANDED="true" OS_TIF="DAY" QTY="200.0" QTY_STEP="1.0" TEMPLATE="SINGLE" TRADE_BUTTONS="BUY_MKT;SELL_MKT;MULTI_CANCEL;REVERSE;FLAT;SECOND_LINE;QUANTITY;AUTO_SEND;ORDER_SETUP" VISIBLE="false">
              <OCO_STOP>
                <TRG_0 TRG_ENBL="true" TRG_LINK="ASK_BID" TRG_OFFSET_MODE="TICK" TRG_OT="STOP" TRG_SETUP="10.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AAL="10.0" AAPL="10.0" ADBE="10.0" AMZN="10.0" BA="10.0" BBBY="10.0" CAKE="10.0" CLDR="10.0" CSCO="10.0" EVRG="10.0" GOED="10.0" HTZ="10.0" IDXX="10.0" INTC="10.0" INTU="10.0" LUV="10.0" NIO="10.0" NVDA="10.0" SNAP="10.0" TAP="10.0" TSLA="10.0" UAL="10.0" UIS="10.0" VIX="10.0" WKHS="10.0" ZM="10.0"/>
                </TRG_0>
              </OCO_STOP>
              <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="1.0" TRG_TIF="DAY">
                <OFFSET_PER_SYMBOL AAL="1.0" AAPL="1.0" ADBE="1.0" AMZN="1.0" BA="1.0" BBBY="1.0" CAKE="1.0" CLDR="1.0" CSCO="1.0" EVRG="1.0" GOED="1.0" HTZ="1.0" IDXX="1.0" INTC="1.0" INTU="1.0" LUV="1.0" NIO="1.0" NVDA="1.0" SNAP="1.0" TAP="1.0" TSLA="1.0" UAL="1.0" UIS="1.0" VIX="1.0" WKHS="1.0" ZM="1.0"/>
              </TRG_0>
              <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-1.0" TRG_TIF="DAY">
                <OFFSET_PER_SYMBOL AAL="-1.0" AAPL="-1.0" ADBE="-1.0" AMZN="-1.0" BA="-1.0" BBBY="-1.0" CAKE="-1.0" CLDR="-1.0" CSCO="-1.0" EVRG="-1.0" GOED="-1.0" HTZ="-1.0" IDXX="-1.0" INTC="-1.0" INTU="-1.0" LUV="-1.0" NIO="-1.0" NVDA="-1.0" SNAP="-1.0" TAP="-1.0" TSLA="-1.0" UAL="-1.0" UIS="-1.0" VIX="-1.0" WKHS="-1.0" ZM="-1.0"/>
              </TRG_1>
              <_2>
                <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="2.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AAL="2.0" AAPL="2.0" ADBE="2.0" AMZN="2.0" BA="2.0" BBBY="2.0" CAKE="2.0" CLDR="2.0" CSCO="2.0" EVRG="2.0" GOED="2.0" HTZ="2.0" IDXX="2.0" INTC="2.0" INTU="2.0" LUV="2.0" NIO="2.0" NVDA="2.0" SNAP="2.0" TAP="2.0" TSLA="2.0" UAL="2.0" UIS="2.0" VIX="2.0" WKHS="2.0" ZM="2.0"/>
                </TRG_0>
                <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-2.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AAL="-2.0" AAPL="-2.0" ADBE="-2.0" AMZN="-2.0" BA="-2.0" BBBY="-2.0" CAKE="-2.0" CLDR="-2.0" CSCO="-2.0" EVRG="-2.0" GOED="-2.0" HTZ="-2.0" IDXX="-2.0" INTC="-2.0" INTU="-2.0" LUV="-2.0" NIO="-2.0" NVDA="-2.0" SNAP="-2.0" TAP="-2.0" TSLA="-2.0" UAL="-2.0" UIS="-2.0" VIX="-2.0" WKHS="-2.0" ZM="-2.0"/>
                </TRG_1>
              </_2>
              <_3>
                <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="3.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AAL="3.0" AAPL="3.0" ADBE="3.0" AMZN="3.0" BA="3.0" BBBY="3.0" CAKE="3.0" CLDR="3.0" CSCO="3.0" EVRG="3.0" GOED="3.0" HTZ="3.0" IDXX="3.0" INTC="3.0" INTU="3.0" LUV="3.0" NIO="3.0" NVDA="3.0" SNAP="3.0" TAP="3.0" TSLA="3.0" UAL="3.0" UIS="3.0" VIX="3.0" WKHS="3.0" ZM="3.0"/>
                </TRG_0>
                <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-3.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AAL="-3.0" AAPL="-3.0" ADBE="-3.0" AMZN="-3.0" BA="-3.0" BBBY="-3.0" CAKE="-3.0" CLDR="-3.0" CSCO="-3.0" EVRG="-3.0" GOED="-3.0" HTZ="-3.0" IDXX="-3.0" INTC="-3.0" INTU="-3.0" LUV="-3.0" NIO="-3.0" NVDA="-3.0" SNAP="-3.0" TAP="-3.0" TSLA="-3.0" UAL="-3.0" UIS="-3.0" VIX="-3.0" WKHS="-3.0" ZM="-3.0"/>
                </TRG_1>
              </_3>
            </TRADE>
          </CELL0>
          <CELL1 ROWSPANELWEIGHT="1.0" ROWWEIGHT0="1.5557851239669422" ROWWEIGHT1="0.44421487603305787" SELECTED_TYPE="CHART" SIDEBAR_IS_ACTIVE="true" SYMBOL="AAL" SYMBOL_GROUP="2" TRADE_BUTTONS_MIGRATED="true">
            <ACTIVETRADER CELL_IDS="POSITION_BREAKDOWN;NET_POSITION;AVERAGE_PRICE;PL_OPEN;PL_DAY" COLUMNS="TRADE_AMOUNT:100:,BUY_ORDER:150:,BIDSIZE:60:,PRICE:100:,ASKSIZE:60:,SELL_ORDER:150:" ENABLED="true" SHOW_STUDY_MARKERS="false" SYMBOL=".AAPL201113C120" SYMBOL_GROUP="-1" VERTICAL="false" VISIBLE="false" WEIGHT="2.0" ZOOMING_STEPS="1">
              <POSITION_SUMMARY_PANEL CELL_IDS="POSITION_BREAKDOWN;NET_POSITION;AVERAGE_PRICE;PL_OPEN;PL_DAY" ENABLED="true"/>
              <TRADE_BUTTONS_CONFIG CONFIGURATION_NAME="SINGLE" ORDER_RULES_SET="OPTION" ORDER_TYPE="LIMIT" OS_AUTO="false" OS_EXPANDED="false" OS_TIF="DAY" QTY="5.0" QTY_STEP="1.0" TEMPLATE="SINGLE" TRADE_BUTTONS="BUY_MKT;SELL_MKT;MULTI_CANCEL;REVERSE;FLAT;SECOND_LINE;QUANTITY_WITH_BUTTONS;ORDER_TEMPLATE;AUTO_SEND;ORDER_SETUP">
                <OCO_STOP>
                  <TRG_0 TRG_ENBL="true" TRG_LINK="ASK_BID" TRG_OFFSET_MODE="TICK" TRG_OT="STOP" TRG_SETUP="10.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL AAL="10.0" AAPL="10.0" AMD="10.0" AMZN="10.0" CCL="10.0" CLDR="10.0" CSCO="10.0" HTZ="10.0" LUV="10.0" SNAP="10.0"/>
                  </TRG_0>
                </OCO_STOP>
                <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="1.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AAL="1.0" AAPL="1.0" AMD="1.0" AMZN="1.0" CCL="1.0" CLDR="1.0" CSCO="1.0" HTZ="1.0" LUV="1.0" SNAP="1.0"/>
                </TRG_0>
                <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-1.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AAL="-1.0" AAPL="-1.0" AMD="-1.0" AMZN="-1.0" CCL="-1.0" CLDR="-1.0" CSCO="-1.0" HTZ="-1.0" LUV="-1.0" SNAP="-1.0"/>
                </TRG_1>
                <_2>
                  <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="2.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL AAL="2.0" AAPL="2.0" AMD="2.0" AMZN="2.0" CCL="2.0" CLDR="2.0" CSCO="2.0" HTZ="2.0" LUV="2.0" SNAP="2.0"/>
                  </TRG_0>
                  <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-2.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL AAL="-2.0" AAPL="-2.0" AMD="-2.0" AMZN="-2.0" CCL="-2.0" CLDR="-2.0" CSCO="-2.0" HTZ="-2.0" LUV="-2.0" SNAP="-2.0"/>
                  </TRG_1>
                </_2>
                <_3>
                  <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="3.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL AAL="3.0" AAPL="3.0" AMD="3.0" AMZN="3.0" CCL="3.0" CLDR="3.0" CSCO="3.0" HTZ="3.0" LUV="3.0" SNAP="3.0"/>
                  </TRG_0>
                  <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-3.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL AAL="-3.0" AAPL="-3.0" AMD="-3.0" AMZN="-3.0" CCL="-3.0" CLDR="-3.0" CSCO="-3.0" HTZ="-3.0" LUV="-3.0" SNAP="-3.0"/>
                  </TRG_1>
                </_3>
              </TRADE_BUTTONS_CONFIG>
            </ACTIVETRADER>
            <BIG_BUTTONS VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <CHART CONFIGURATION="@v9@%0:com.devexperts.toschart.model,1:com.devexperts.tos.chartdata,2:com.devexperts.tos.thinkscript.data,3:java.awt,4:com.devexperts.toschart.control.subgraph,5:com.devexperts.toschart.elstudies,6:com.devexperts.toschart.script,7:com.devexperts.tos.thinkscript%owner{chartAggregationPeriods:ChartAggregationPeriodArray0{17::ChartAggregationPeriod0,10::ChartAggregationPeriod1},chartAggregationPeriods=@ChartAggregationPeriodArray0,colors{8::CustomColor0,6::CustomColor1}}#com.devexperts.toschart.core.ChartModel{encodedMixinsState=&quot;{\&quot;common\&quot;:{\&quot;DRAWING_SETS\&quot;:\&quot;{}\&quot;},\&quot;state_props\&quot;:{\&quot;state_type\&quot;:\&quot;REGULAR\&quot;},\&quot;monkey_bars_exp\&quot;:{\&quot;LikefolioMixin\&quot;:\&quot;{\\\&quot;paintingSettings\\\&quot;:{\\\&quot;neutralSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;positiveSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;negativeSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;sentimentSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true}},\\\&quot;shownDivisions\\\&quot;:[],\\\&quot;allDivisions\\\&quot;:[]}\&quot;},\&quot;monkey_bars\&quot;:{},\&quot;seasonality\&quot;:{},\&quot;regular\&quot;:{\&quot;DescriberMixin\&quot;:\&quot;{\\\&quot;visibility\\\&quot;:\\\&quot;HIDE_PANEL\\\&quot;,\\\&quot;studiesMode\\\&quot;:\\\&quot;HIDE_STUDIES\\\&quot;}\&quot;,\&quot;LikefolioMixin\&quot;:\&quot;{\\\&quot;paintingSettings\\\&quot;:{\\\&quot;neutralSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;positiveSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;negativeSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;sentimentSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true}},\\\&quot;shownDivisions\\\&quot;:[],\\\&quot;allDivisions\\\&quot;:[]}\&quot;}}&quot;,encodedPatternsModel=&quot;{\&quot;showPatterns\&quot;:true,\&quot;models\&quot;:[],\&quot;fibModels\&quot;:[]}&quot;,groupId=&quot;default&quot;,styleSettings{chartAggregationSettings{monkeyChartsAggSettings=!%0.TimeFrameAggregationSettings.createTickOrTimeAggregation(!%1.ChartRange.findByCode(&quot;DAY3&quot;),@ChartAggregationPeriod0),priceAggregationSettings.timePeriod:ChartRange0,timeAggregationSettings=!%0.TimeFrameAggregationSettings.createTickOrTimeAggregation(@ChartRange0,@ChartAggregationPeriod1)},commonStyleSettings{colorSettings{backgroundColor=!%2.CustomColor.findByIndex(&quot;108&quot;),candleTypeColors.fillUp=&lt;T,gridTypeColor=#%2.CustomColor(#%3.Color(51,51,255,255)),monkeyProfileTypeColors.defaultRowHeight=&lt;F,mpExpandedTypeColors.defaultRowHeight=&lt;F,volumeColor=#%2.CustomColor(#%3.Color(51,0,255,255))},expansion{down=10,right=12,up=10},fitArrowsToScreen=&lt;F,fitStudiesToScreen=&lt;F,leftAxisEnabled=&lt;F,manualAxisRegulator{maxValue=13.61358069d,minValue=11.75587176d},percentageBubbles=&lt;F,previousRightExpansion=12,shortCuts{^(&quot;Time Zone&quot;,&lt;F),^(&quot;Show Expiration Friday &quot;,&lt;F),^(&quot;Chart mode&quot;,&lt;F),^(&quot;Keep Price Zoom&quot;,&lt;F),^(&quot;enableLeftAxis&quot;,&lt;T),^(&quot;Fit expected price ranges&quot;,&lt;F),^(&quot;emphasizeDigitMPExpanded&quot;,&lt;F),^(&quot;showWicksCandleTrend&quot;,&lt;F),^(&quot;highlightEarnings&quot;,&lt;F),^(&quot;synchronizeCrosshair&quot;,&lt;F),^(&quot;myToolsMode&quot;,&lt;T),^(&quot;seasonalityStyle&quot;,&lt;F),^(&quot;Show Price Subgraph&quot;,&lt;F),^(&quot;closePriceLevel&quot;,&lt;F),^(&quot;Color Volume As Symbol Ticks&quot;,&lt;T),^(&quot;highlightPhantomRBars&quot;,&lt;F),^(&quot;Cross type &quot;,&lt;F),^(&quot;Fit Studies to Screen&quot;,&lt;T),^(&quot;Chart type &quot;,&lt;F),^(&quot;Fit Orders&quot;,&lt;F),^(&quot;Bubbles as Percentage&quot;,&lt;F),^(&quot;hideStatusString&quot;,&lt;F),^(&quot;Show Studies &quot;,&lt;T),^(&quot;showWicksHeikinAshi&quot;,&lt;F),^(&quot;Alerts&quot;,&lt;F),^(&quot;Chart scale&quot;,&lt;F),^(&quot;Fit High/Low&quot;,&lt;F),^(&quot;Orders&quot;,&lt;F),^(&quot;Use Log Scale &quot;,&lt;T),^(&quot;Fit Study Markers to Screen&quot;,&lt;T),^(&quot;Fit Alerts&quot;,&lt;F),^(&quot;Fit patterns&quot;,&lt;F),^(&quot;Percentage View&quot;,&lt;T),^(&quot;Make Auto Zoom &quot;,&lt;F),^(&quot;Show Year Marking Line&quot;,&lt;F),^(&quot;Show Rollover Line&quot;,&lt;T),^(&quot;Show High/Low Bubbles &quot;,&lt;T),^(&quot;Snap mode&quot;,&lt;F),^(&quot;highlightStudies&quot;,&lt;F),^(&quot;Overlapped Volume&quot;,&lt;T),^(&quot;Show Symbol Logo&quot;,&lt;F),^(&quot;Show Last Price Bubble &quot;,&lt;F),^(&quot;emphasizeDigitMP&quot;,&lt;F),^(&quot;Show grid&quot;,&lt;T),^(&quot;databoxMode&quot;,&lt;F),^(&quot;Synchronize Drawings&quot;,&lt;F),^(&quot;showWicksCandle&quot;,&lt;F),^(&quot;Show trades&quot;,&lt;F),^(&quot;highlightSeasons&quot;,&lt;F),^(&quot;Extend Order/Alert Line to Left&quot;,&lt;F)},showDayRollover=&lt;F,showYearMarkingLine=&lt;F,step=1.524390243902439d,volumeColorByTicks=&lt;T},forexStyleSettings.shortCuts.^(&quot;Show Volume Subgraph&quot;,&lt;F),futuresStyleSettings{adjustForContractChanges=&lt;T,highlightExtendedHours=&lt;T,shortCuts{^(&quot;adjustForContractChanges&quot;,&lt;F),^(&quot;Show Open Interest&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,&lt;T),^(&quot;showContractChangeEvents&quot;,&lt;F),^(&quot;futures_daily_close_price&quot;,&lt;F),^(&quot;Show Options&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,&lt;T),^(&quot;startAtMarketOpen&quot;,&lt;F)}},optionsStyleSettings.shortCuts{^(&quot;Show Open Interest&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,&lt;T),^(&quot;Show Theo Price&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,&lt;T),^(&quot;startAtMarketOpen&quot;,&lt;F)},otherStyleSettings.shortCuts{^(&quot;Show Social Sentiment&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,&lt;T),^(&quot;Price type&quot;,&lt;F),^(&quot;Show Options&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,&lt;T),^(&quot;Show Corporate Actions&quot;,&lt;F),^(&quot;Show CNBC Video&quot;,&lt;F),^(&quot;startAtMarketOpen&quot;,&lt;F),^(&quot;adjustForDividends&quot;,&lt;F)},setsIdentifiers.styleSetName=&quot;Style name6&quot;},subgraphModels{!get(#%4.SubgraphId(&quot;Symbol&quot;)){height=402,storableIndicators{+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;input averageType = AverageType.expONENTIAL;\ninput showMovingAvgLable =NO;\ninput useMTF =No;\ninput aggregationPeriod1 =AggregationPeriod.Five_MIN;\n\n\ndef c =close(period = aggregationPeriod1);\ninput price = close;\ninput length1 = 10;\ninput length2 = 20;\ninput length3 = 50;\ninput length4 = 200;\ninput displace = 0;\ninput showAvg3 = no;\ndef priceV = if (!useMTF) then price else close(period = aggregationPeriod1);#(period = aggregationPeriod1));\ninput showAvg4 = no;\n\ninput showBreakoutSignals = no;\n\n\n\n\n#def AvgExp = ExpAverage(price[-displace], length);\nplot Avg1 = MovingAverage(averageType, price[-displace], length1);\nplot Avg2 = MovingAverage(averageType, price[-displace], length2);\nplot Avg3 = MovingAverage(averageType, price[-displace], length3);\nplot Avg4 = MovingAverage(averageType, price[-displace], length4);\n\nAvg3.setHiding(!showAvg3);\nAvg4.setHiding(!showAvg4);\n\ndef uptrend = open &gt;close[1] and close[1]&gt;close[2] ;\ndef downtrend =price &lt; AVg3;\n#plot SMA ( Average(price[-displace], length);\nplot UpSignal = Avg1 crosses above Avg2 and uptrend;\nplot DownSignal = Avg1 crosses below Avg2 and downtrend;\n#Add Label\n\nAddLabel(showMovingAvgLable, \&quot;  \&quot;+ length1+ \&quot;MAvg\&quot; ,Avg1.TakeValueColor ());\nAddLabel(showMovingAvgLable,  astext(Avg1), if Avg1&lt; close then Color.LIGHT_GREEN else if Avg1&gt; close then color.light_red else Color.Light_GRAY);\n\n\nAddLabel(showMovingAvgLable, \&quot;  \&quot;+ length2+ \&quot;MAvg\&quot; ,Avg2.TakeValueColor ());\nAddLabel(showMovingAvgLable,  astext(Avg2), if Avg2&lt; close then Color.LIGHT_GREEN else if Avg2&gt; close then color.light_red else Color.Light_GRAY);\n\nAddLabel(showMovingAvgLable, \&quot;  \&quot;+ length3+ \&quot;MAvg\&quot; ,Avg3.TakeValueColor ());\nAddLabel(showMovingAvgLable,  astext(Avg3), if Avg3&lt; close then Color.LIGHT_GREEN else if Avg3&gt; close then color.light_red else Color.Light_GRAY);\n\n\nAddLabel(showMovingAvgLable, \&quot;  \&quot;+ length4+ \&quot;MAvg\&quot; ,Avg4.TakeValueColor ());\nAddLabel(showMovingAvgLable,  astext(Avg4), if Avg4&lt; close then Color.LIGHT_GREEN else if Avg4&gt; close then color.light_red else Color.Light_GRAY);\n\n\n# Avg1.TakeValueColor ()\n#AddLabel(showMovingAvgLable,  length1+ \&quot;MAvg \&quot; +astext(Avg1) ,Avg1.TakeValueColor ());\n#AddLabel(showMovingAvgLable, astext(Avg1), if Avg1&lt; close then Color.GREEN else if Avg1&gt; close then color.light_red else Color.Light_GRAY);\n\n\n\n#AddLabel(showMovingAvgLable,  length2+ \&quot;MAvg \&quot;+ astext(Avg2) ,Avg2.TakeValueColor ());\n#AddLabel(showMovingAvgLable,  astext(Avg2), if Avg2&lt; close then Color.GREEN else if Avg2&gt; close then color.light_red else Color.Light_GRAY);\n#AddLabel(showMovingAvgLable,  length3+ \&quot;MAvg \&quot; +astext(Avg3),Avg3.TakeValueColor ());\n#AddLabel(showMovingAvgLable, astext(Avg3), if Avg3&lt; close then Color.GREEN else if Avg3&gt; close then color.light_red else Color.Light_GRAY);\n#AddLabel(showMovingAvgLable,  length4+ \&quot;MAvg \&quot; +astext(Avg4),Avg4.TakeValueColor ());\n#AddLabel(showMovingAvgLable, astext(Avg4), if Avg4&lt; close then Color.GREEN else if Avg4&gt; close then color.light_red else Color.Light_GRAY);\ndef bub;\nif !IsNaN(close[-1])\nthen {\n\n    bub = no;#Double.NaN;\n    \n} else {\nbub = yes;\n    \n}\ndef bubb = if  BarNumber() == 20  then yes else no;\n\ninput Show_Mavg_Key=no;\n\n#AddChartBubble(bub, Avg1, \&quot;MAvg\&quot;+ length1+ \&quot;= \&quot; + astext(Avg1), Color.LIGHT_ORANGE, no);\nAddChartBubble(bub and Show_Mavg_Key, Avg1, \&quot;MAvg\&quot;+ length1+ \&quot;= \&quot; + astext(Avg1), Avg1.TakeValueColor (), yes);\nAddChartBubble(bub and Show_Mavg_Key, Avg2, \&quot;MAvg\&quot;+ length2+ \&quot;= \&quot; + astext(Avg2), Avg2.TakeValueColor (), yes);\nAddChartBubble(bub and Show_Mavg_Key, Avg3, \&quot;MAvg\&quot;+ length3+ \&quot;= \&quot; + astext(Avg3), Avg3.TakeValueColor (), yes);\nAddChartBubble(bub and Show_Mavg_Key, Avg4, \&quot;MAvg\&quot;+ length4+ \&quot;= \&quot; + astext(Avg4), Avg4.TakeValueColor (), yes);\n\n#Vwap\ninput vwapTimeFrame = {default DAY, WEEK, MONTH};\ninput numDevDn = -1.5;\ninput numDevUp = 1.5;\ninput vwapLable =no;\n\n\ndef cap = getAggregationPeriod();\ndef errorInAggregation =\n    vwapTimeFrame == vwapTimeFrame.DAY and cap &gt;= AggregationPeriod.WEEK or\n    vwapTimeFrame == vwapTimeFrame.WEEK and cap &gt;= AggregationPeriod.MONTH;\nassert(!errorInAggregation, \&quot;timeFrame should be not less than current chart aggregation period\&quot;);\n\ndef yyyyMmDd = getYyyyMmDd();\ndef periodIndx;\nswitch (vwapTimeFrame) {\ncase DAY:\n    periodIndx = yyyyMmDd;\ncase WEEK:\n    periodIndx = Floor((daysFromDate(first(yyyyMmDd)) + getDayOfWeek(first(yyyyMmDd))) / 7);\ncase MONTH:\n    periodIndx = roundDown(yyyyMmDd / 100, 0);\n}\ndef isPeriodRolled = compoundValue(1, periodIndx != periodIndx[1], yes);\n\ndef volumeSum;\ndef volumeVwapSum;\ndef volumeVwap2Sum;\n\nif (isPeriodRolled) {\n    volumeSum = volume;\n    volumeVwapSum = volume * vwap;\n    volumeVwap2Sum = volume * Sqr(vwap);\n} else {\n    volumeSum = compoundValue(1, volumeSum[1] + volume, volume);\n    volumeVwapSum = compoundValue(1, volumeVwapSum[1] + volume * vwap, volume * vwap);\n    volumeVwap2Sum = compoundValue(1, volumeVwap2Sum[1] + volume * Sqr(vwap), volume * Sqr(vwap));\n}\ndef VWprice = volumeVwapSum / volumeSum;\ndef deviation = Sqrt(Max(volumeVwap2Sum / volumeSum - Sqr(VWprice), 0));\n\nplot VWAP = VWprice;\nplot UpperBand = VWprice + numDevUp * deviation;\nplot LowerBand = VWprice + numDevDn * deviation;\n\nVWAP.setDefaultColor(getColor(0));\nUpperBand.setDefaultColor(getColor(0));\nLowerBand.setDefaultColor(getColor(0));\n\nUpperBand.SetStyle(Curve.MEDIUM_DASH);\nLowerBand.SetStyle(Curve.MEDIUM_DASH);\n\n\nvwap.hide();\n#UpperBand.hide();\n#LowerBand.hide();\n\n#vwap\n\nAddLabel(vwapLable, \&quot;VWAP= \&quot; + astext(VWAP), if VWAP&lt; close then Color.LIGHT_GREEN else if VWAP&gt; close then color.LIGHT_red else Color.GRAY);\n#AddLabel(vwapLable, \&quot;VWAP= \&quot; + astext(VWAP), Color.White);\ndef vwDif= close- VWAP;\n#AddLabel(yes, \&quot; \&quot;+astext(vwDif), if vwDif&gt; 0 then Color.LIGHT_GREEN else if vwDif&lt; 0 then color.LIGHT_red else Color.GRAY);\nAddLabel(vwapLable and vwDif&gt;0, \&quot; +\&quot;+astext(vwDif),  Color.LIGHT_GREEN );\nAddLabel(vwapLable and vwDif&lt;=0, \&quot; \&quot;+astext(vwDif),  if vwDif&lt; 0 then color.LIGHT_red else Color.LIGHT_GRAY);\n#RSI\ninput overBoughtRsi = 70;\ninput overSoldRsi = 30;\ninput rsiLength = 14;\ninput rsiPrice = close;\ndef rsi_val = reference RSI(length = rsiLength, price = rsiPrice );\n####\n\n\n\nAddLabel(yes, \&quot;RSI = \&quot; + astext(rsi_val) , if rsi_val &gt; overBoughtRsi  then Color.RED else if rsi_val &lt; overSoldRsi then  Color.GREEN else Color.light_GRAY);\n\n\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\nAvg1.SetDefaultColor(color.white);\nAvg2.SetDefaultColor(color.cyan);\nAvg3.SetDefaultColor(color.light_red);\nAvg4.SetDefaultColor(color.pink);\n#avg3.SetStyle(Curve.MEDIUM_DASH);\n#avg4.SetStyle(Curve.MEDIUM_DASH);\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);\n&quot;,name=&quot;_686a0d47_2dc7_4466_91d6_64cf4907bd2a&quot;}){hidden=&lt;T,inputsMap:TreeMap0{^(&quot;length1&quot;,9),^(&quot;price&quot;,&quot;CLOSE&quot;),^(&quot;rsiPrice&quot;,&quot;CLOSE&quot;),!get:Integer0(&quot;overBoughtRsi&quot;)},inputsMap=@TreeMap0}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;###############################################################################################################################################\n################################################################################################################################################\n#\n# Author: Kory Gill, [USER=212]@korygill[/USER]\n#\n# Created from idea on https://usethinkscript.com/threads/finite-volume-elements.593/\n# Original idea is from http://mkatsanos.com/FVE.html\n#\n# VERSION HISTORY (sortable date and time (your local time is fine), and your initials\n# 20190907-1200-KG    - Created.\n\n###############################################################################\n### NORMALIZATION (Volume Damping adaptation) by Ramon Del Villar AKA PElonsax\n### 7/20/2020 #################################################################\n###############################################################################\n# The damping logic is taken directly from VFI #\n\n#declare once_per_bar;\n\n\n#################################################################$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n\n#########################################%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%$$$$$$$$$$$$$$$$$\n\n\n\n#\n# inputs\n#\ninput RSI_prev = 2; #previous bar to check\ninput def_cond = no;\ninput Samples = 14;\n\n\n\n#vwap vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\n#input numDevUp = 2.0;\ninput vwapTimeFrame = {default DAY, WEEK, MONTH};\n\ndef cap = getAggregationPeriod();\ndef errorInAggregation =\n    vwapTimeFrame == vwapTimeFrame.DAY and cap &gt;= AggregationPeriod.WEEK or\n    vwapTimeFrame== vwapTimeFrame.WEEK and cap &gt;= AggregationPeriod.MONTH;\nassert(!errorInAggregation, \&quot;timeFrame should be not less than current chart aggregation period\&quot;);\n\ndef yyyyMmDd = getYyyyMmDd();\ndef periodIndx;\nswitch (vwapTimeFrame) {\ncase DAY:\n    periodIndx = yyyyMmDd;\ncase WEEK:\n    periodIndx = Floor((daysFromDate(first(yyyyMmDd)) + getDayOfWeek(first(yyyyMmDd))) / 7);\ncase MONTH:\n    periodIndx = roundDown(yyyyMmDd / 100, 0);\n}\ndef isPeriodRolled = compoundValue(1, periodIndx != periodIndx[1], yes);\n\ndef volumeSum;\ndef volumeVwapSum;\ndef volumeVwap2Sum;\n\nif (isPeriodRolled) {\n    volumeSum = volume;\n    volumeVwapSum = volume * vwap;\n    volumeVwap2Sum = volume * Sqr(vwap);\n} else {\n    volumeSum = compoundValue(1, volumeSum[1] + volume, volume);\n    volumeVwapSum = compoundValue(1, volumeVwapSum[1] + volume * vwap, volume * vwap);\n    volumeVwap2Sum = compoundValue(1, volumeVwap2Sum[1] + volume * Sqr(vwap), volume * Sqr(vwap));\n}\ndef vWapprice = volumeVwapSum / volumeSum;\ndef deviation = Sqrt(Max(volumeVwap2Sum / volumeSum - Sqr(vWapprice), 0));\n\ndef VWAP = vWapprice;\n\n\n\ninput vwapCondition =no;\n#input vp=close;\ndef conVwapBuy =if  vwapCondition then  close &gt;= VWAp else 1;\n\n#####^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n\n#\n# FVE logic\n#\ndef bn = BarNumber();\ndef nan = double.NaN;\n\n\ninput maxVolumeCutOff = 2.5;\n###Coefficient used in calculation of “Cut Off” value. Lower values mean stronger damping of volume spikes###\n\nAssert(maxVolumeCutOff &gt; 0, \&quot;\'max volume cut off\' must be positive: \&quot; + maxVolumeCutOff);\n\ndef cutOff = 0.2 * StDev(Log(hlc3) - Log(hlc3[1]), 30) * close;\ndef hlcChange = hlc3 - hlc3[1];\ndef avgVolume = Average(volume, 30)[1];\ndef minVolume = Min(volume, avgVolume * maxVolumeCutOff);\ndef dirVolume = if hlcChange &gt; cutOff\n    then minVolume\n    else if hlcChange &lt; -cutOff\n        then -minVolume\n        else 0;\n\n\ndef mf = (close - (high+low)/2) + hlc3 - hlc3 [1];\ndef fveSum = Sum(dirVolume, Samples);\n\ndef fve = if bn &gt; Samples\n          then (fveSum / (Average(avgVolume, Samples) * Samples)) * 100\n          else nan;\n\n\n#\n# plots\n#\ndef pFVE = fve;\n\ndef pFVE_MA = MovingAverage(AverageType.SIMPLE, fve, 30);\n#pFVE_MA.SetDefaultColor(Color.Gray);\n#PFVE_MA.SetPaintingStrategy(PaintingStrategy.DASHES);\n\ndef zeroLine = 0;\ndef pFVE_Bull = if pFVE crosses above pFVE_MA then pFVE  else double.NaN ;\ndef pFVE_Bear = if pFVE &gt; pFVE_MA and pFVE[1] &gt; pFVE then pFVE else double.NaN ;\n\n#format plot \n\n#zeroLine.SetDefaultColor(Color.White);\n#pFVE.AssignValueColor(if pFVE &gt; pFVE_MA then color.green else color.red) ;\n#pFVE.SetLineWeight(3);\n\n\n#pFVE_Bull.SetPaintingStrategy(PaintingStrategy.SQUARES);\n#pFVE_Bull.SetLineWeight(5);\n#pFVE_Bull.SetDefaultColor(color.dark_green) ;\n\n#pFVE_Bear.SetPaintingStrategy(PaintingStrategy.SQUARES);\n#pFVE_Bear.SetLineWeight(5);\n#pFVE_Bear.SetDefaultColor(color.white) ;\n\n#AddCloud(pFVE, pFVE_MA, color.light_green, color.pink);\n\n\n\n#####################################################################################################################################################\n\n\n\n# Simple 2 Period RSI Trading Indicator\n# Assembled by BenTen at useThinkScript.com\n# You are free to use this code for personal use, and make derivative works from it. You are NOT GRANTED permission to use this code (or derivative works) for commercial purposes which includes and is not limited to selling, reselling, or packaging with other commercial indicators. Headers and attribution in this code should remain as provided, and any derivative works should extend the existing headers.\n\n#MACD\ninput price = close;\n#input length_macd = 14;\ninput displace = 0;\n#input showBreakoutSignals = no;\ninput crossingType = {default above, below};\n\ninput fastLength = 12;\ninput slowLength = 26;\ninput MACDLength = 9;\ndef fastAvg = Sum(volume * price, fastLength) / Sum(volume, fastLength);\ndef slowAvg = Sum(volume * price, slowLength) / Sum(volume, slowLength);\ndef Value = fastAvg - slowAvg;\ndef Avg = ExpAverage(Value, MACDLength);\ndef MACD_Diff  = Value - Avg;\n#def ZeroLine = 0;\n\n# RSI\ninput rsiLength = 14;\ninput overBought = 80;\ninput overSold = 28;\ninput rsiBuyLevel =40;\ninput averageType = AverageType.WILDERS;\ndef NetChgAvg = MovingAverage(averageType, price - price[1], RSIlength);\ndef TotChgAvg = MovingAverage(averageType, AbsValue(price - price[1]), RSIlength);\ndef ChgRatio = if TotChgAvg != 0 then NetChgAvg / TotChgAvg else 0;\ndef RSI = 50 * (ChgRatio + 1);\n#def OverSold = overSold;\n#def OverBought = overBought;\n\n#test\n#plot p= VWAp;#(period= AggregationPeriod.DAY);\n\n####################################\n\ndef cond_logic = if (def_cond) then MACD_Diff &lt;= 0 else yes;\n######\n#def sig_buy = Crosses(RSI(length = RSIlength, averageType = averageType).RSI, over_Sold, crossingType == crossingType.above) within RSI_prev bars and pFVE_Bull and cond_logic; # and Diff &lt;= 0;\ndef sig_buy = conVwapBuy and RSI&lt; rsiBuyLevel and pFVE_Bull  and cond_logic ;# and Diff &gt;= 0;\n#def sig_buy = pFVE_Bull and Diff &gt;= 0;\nplot signal_buy = sig_buy ;\n\n\ndef sig_sell = Crosses(RSI(length = RSIlength, averageType = averageType).RSI, overBought, crossingType == crossingType.below) within RSI_prev bars and pFVE_Bear ;\nplot signal_sell = sig_sell;\n\nsignal_buy.DefineColor(\&quot;Above\&quot;, Color.YELLOW);\nsignal_buy.DefineColor(\&quot;Below\&quot;, GetColor(8));\nsignal_buy.AssignValueColor(if crossingType == crossingType.above then signal_buy.Color(\&quot;Above\&quot;) else signal_buy.Color(\&quot;Below\&quot;));\nsignal_buy.setlineWeight(5);\nsignal_buy.SetPaintingStrategy(if crossingType == crossingType.above\n    then PaintingStrategy.BOOLEAN_ARROW_UP\n    else PaintingStrategy.BOOLEAN_ARROW_DOWN);\n\nsignal_sell.DefineColor(\&quot;Above\&quot;, Color.VIOLET);\nsignal_sell.DefineColor(\&quot;Below\&quot;, GetColor(8));\nsignal_sell.AssignValueColor(if crossingType == crossingType.above then signal_sell.Color(\&quot;Above\&quot;) else signal_sell.Color(\&quot;Below\&quot;));\n\nsignal_sell.SetPaintingStrategy(if crossingType == crossingType.above\n    then PaintingStrategy.BOOLEAN_ARROW_DOWN\n    else PaintingStrategy.BOOLEAN_ARROW_UP);\nsignal_sell.setlineWeight(5);\ninput bubble =no; \nAddChartBubble(bubble and sig_sell == 1, price, \&quot;S= \&quot; + price + \&quot; rsi \&quot; + RSI, Color.VIOLET, no);&quot;,name=&quot;_259d509b_f440_4edf_840b_2df1df75ab8c&quot;}){inputsMap{!get:Integer1(&quot;rsiBuyLevel&quot;),!get:Integer2(&quot;fastLength&quot;)}}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;input price = close;\ninput displace = 0;\ninput length = 20;\ninput Num_Dev_Dn = -2.0;\ninput Num_Dev_up = 2.0;\ninput averageType = AverageType.Simple;\n\ndef sDev = stdev(data = price[-displace], length = length);\n\nplot MidLine = MovingAverage(averageType, data = price[-displace], length = length);\nplot LowerBand = MidLine + num_Dev_Dn * sDev;\nplot UpperBand = MidLine + num_Dev_Up * sDev;\n\nLowerBand.SetDefaultColor(GetColor(0));\nMidLine.SetDefaultColor(GetColor(1));\nUpperBand.SetDefaultColor(GetColor(5));\n\n#############################\n\nAddCloud(UpperBand, Midline, Color.Green, Color.light_Green);\nAddCloud(LowerBand, Midline, Color.Red, Color.light_Red);\n\n\n####$$$$$$$$\n\n\ninput priceSlm = close;\n\ninput superFastLength = 8;\n\ninput fastLengthSlm = 13;\n\ninput slowLengthSlm = 21;\n\n\n\n\ninput averageTypeSlm = AverageType.EXPONENTIAL;\n\ndef mov_avg8 = MovingAverage(averageTypeSlm, priceSlm[-displace], superFastLength);\n\ndef mov_avg13 = MovingAverage(averageTypeSlm, priceSlm[-displace], fastLengthSlm);\n\ndef mov_avg21 = MovingAverage(averageTypeSlm, priceSlm[-displace], slowLengthSlm);\n \n#moving averages\n\ndef Superfast = mov_avg8;\n\ndef Fast = mov_avg13;\n\ndef Slow = mov_avg21;\n\n\ndef buy = mov_avg8 &gt; mov_avg13 and mov_avg13 &gt; mov_avg21 and low &gt; mov_avg8;\n\ndef stopbuy = mov_avg8 &lt;= mov_avg13;\n\ndef buynow = !buy[1] and buy;\n\ndef buysignal = CompoundValue(1, if buynow and !stopbuy then 1 else if buysignal[1] == 1 and stopbuy then 0 else buysignal[1], 0);\n\n\ndef Buy_Signal = buysignal[1] == 0 and buysignal == 1;\n\ndef Momentum_Down = buysignal[1] == 1 and buysignal == 0;\n\n\ndef sell = mov_avg8 &lt; mov_avg13 and mov_avg13 &lt; mov_avg21 and high &lt; mov_avg8;\n\ndef stopsell = mov_avg8 &gt;= mov_avg13;\n\ndef sellnow = !sell[1] and sell;\n\ndef sellsignal = CompoundValue(1, if sellnow and !stopsell then 1 else if sellsignal[1] == 1 and stopsell then 0 else sellsignal[1], 0);\n\n\ndef Sell_Signal = sellsignal[1] == 0 and sellsignal;\n\ndef Momentum_Up = sellsignal[1] == 1 and sellsignal == 0;\n \n# when using this as a custom scan, change the word plot to def\n# then remove the \'#\' from in front of one of the \&quot;plot Scan\&quot; statements below\ndef Colorbars = if buysignal == 1 then 1 else if sellsignal == 1 then -1 else if buysignal == 0 or sellsignal == 0 then 0 else 0;\n\n# use this first Scan plot for SLM Ribbon Momentum UP\n#plot Scan = if Colorbars == 1 then yes else no;\n\n# use this second Scan plot for SLM Ribbon Momentum DOWN\n#plot Scan = if Colorbars == -1 then yes else no;\n\n\n\n\n\n\n###############\n\ndef Colorbars1 = if buysignal == 1 then 1 else if sellsignal == 1 then 2 else if buysignal == 0 or sellsignal == 0 then 3 else 0;\n\ninput lengthHma = 20;\n\ndef HMA = MovingAverage(AverageType.HULL, price, lengthHma);\ndef HMA_Up=  HMA &gt; HMA[1];\ndef HMA_Down =! HMA_UP;\n\n###############\n\n#def Colorbars1 = if buysignal == 1 then 1 else if sellsignal == 1 then 2 else if buysignal == 0 or sellsignal == 0 then 3 else 0;\n\n\n\nMidLine.definecolor(\&quot;Buy\&quot;, color.dark_green);\n\n\nMidLine.definecolor(\&quot;Sell\&quot;, color.red);\n\nMidLine.definecolor(\&quot;Neutral\&quot;, Color.PLUM);\n#MidLine.definecolor(\&quot;NeutralDown\&quot;, Color.orange);\nMidLine.definecolor(\&quot;HullMA_up\&quot;, color.blue);\n\nMidLine.definecolor(\&quot;HullMA_down\&quot;, color.orange);\n\nMidLine.AssignValueColor(if buysignal and HMA_Up then MidLine.color(\&quot;Buy\&quot;) else if buysignal and !HMA_Up then MidLine.color(\&quot;HullMA_down\&quot;) else if sellsignal and HMA_Down  then MidLine.color(\&quot;Sell\&quot;) else  if sellsignal and !HMA_Down  then MidLine.color(\&quot;HullMA_up\&quot;) else  MidLine.color(\&quot;neutral\&quot;));;#\n# if Momentum_Up then  RSI.color(\&quot;neutralUp\&quot;) else  RSI.color(\&quot;neutraldown\&quot;));\n\n\n\n\n\n\n\n#MidLine.definecolor(\&quot;Buy_Signal_Bars\&quot;, color.dark_green);\n\n#MidLine.definecolor(\&quot;Sell_Signal_Bars\&quot;, color.red);\n\n#MidLine.definecolor(\&quot;NeutralUp\&quot;, color.plum);\n\n#MidLine.definecolor(\&quot;NeutralDown\&quot;, color.orange);\n\n#MidLine.AssignValueColor(if Colorbars1 ==1 then MidLine.color(\&quot;buy_signal_bars\&quot;) else if colorbars1 ==2 then #MidLine.color(\&quot;Sell_Signal_bars\&quot;) else if Momentum_Up then  MidLine.color(\&quot;neutralUp\&quot;) else MidLine.color(\&quot;neutralDown\&quot;) );\n\n\nplot UpSignal = if (buysignal and price crosses above MidLine) then LowerBand else Double.NaN;\nplot DownSignal = if (sellsignal and price crosses below MidLine) then UpperBand else Double.NaN;\ninput showBreakoutSignals =no;\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\n\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\n\n\n\nMidLine.setlineWeight(3);\n\n\n\n\n\n\n######$$$$&quot;,name=&quot;_cbc1e041_e9b4_4664_b964_97e197ec9dfd&quot;}){hidden=&lt;T,inputsMap:TreeMap1{^(&quot;price&quot;,&quot;CLOSE&quot;),^(&quot;priceSlm&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap1}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;def showProfile = no;\ninput showLines = no;\ninput VaPrevious =yes;\ninput show_VA_cloud = yes;\ninput opacity = 20;\n\ndef opacity_inv ;#= if (opacity &gt;= 0 and opacity &lt;= 100) then 100 - opacity else 50;\n#input showCloud= yes;\ninput pricePerRowHeightMode = {default AUTOMATIC, TICKSIZE, CUSTOM};\ndef customRowHeight = 1.0;\ninput timePerProfile = { CHART, MINUTE, FIVE_MINUTE, TEN_MINUTE, FIFTEEN_MINUTE,THIRTY_MINUTE,  default HOUR, TWO_HOUR, FOUR_HOUR, DAY, TWO_DAY, THREE_DAY, FOUR_DAY, WEEK, TWO_WEEK, THREE_WEEK, MONTH, \&quot;OPT EXP\&quot;, BAR};\ninput multiplier = 1;\n\n\ninput triggerUpperVaLimitHigh = 5;\ninput triggerUpperVaLimitLow = -5;\ninput triggerLowerVaLimitHigh = 5;\ninput triggerLowerVaLimitLow = -5;\n#input triggerLowerVaLimit = 20;\n#input triggerLowerVaRange = 10;\n\ndef onExpansion = no;\ninput profiles = 50;\ninput showPointOfControl = no;\ninput showValueArea = no;\ninput valueAreaPercent = 70;\n\n\n\n\ndef period;\ndef yyyymmdd = GetYYYYMMDD();\ndef seconds = SecondsFromTime(0);\ndef month = GetYear() * 12 + GetMonth();\ndef day_number = DaysFromDate(First(yyyymmdd)) + GetDayOfWeek(First(yyyymmdd));\ndef dom = GetDayOfMonth(yyyymmdd);\ndef dow = GetDayOfWeek(yyyymmdd - dom + 1);\ndef expthismonth = (if dow &gt; 5 then 27 else 20) - dow;\ndef exp_opt = month + (dom &gt; expthismonth);\nswitch (timePerProfile) {\ncase CHART:\n    period = 0;\ncase MINUTE:\n    period = Floor(seconds / 60 + day_number * 24 * 60);\ncase FIVE_MINUTE:\n    period = Floor(seconds / 60 + day_number * 24 * 60);\ncase TEN_MINUTE:\n    period = Floor(seconds / 60 + day_number * 24 * 60);\ncase FIFTEEN_MINUTE:\n    period = Floor(seconds / 60 + day_number * 24 * 60);\ncase THIRTY_MINUTE:\n    period = Floor(seconds / (30 * 60) + day_number * 24 * 60);\ncase HOUR:\n    period = Floor(seconds / 3600 + day_number * 24);\ncase TWO_HOUR:\n    period = Floor(seconds / (2 * 3600) + day_number * 24);\ncase FOUR_HOUR:\n    period = Floor(seconds / (4 * 3600) + day_number * 24);\ncase DAY:\n    period = CountTradingDays(Min(First(yyyymmdd), yyyymmdd), yyyymmdd) - 1;\ncase TWO_DAY:\n    period = 2 * (CountTradingDays(Min(First(yyyymmdd), yyyymmdd), yyyymmdd) - 1);\ncase THREE_DAY:\n    period = 3 * (CountTradingDays(Min(First(yyyymmdd), yyyymmdd), yyyymmdd) - 1);\ncase FOUR_DAY:\n    period = 4 * (CountTradingDays(Min(First(yyyymmdd), yyyymmdd), yyyymmdd) - 1);\ncase WEEK:\n    period = Floor(day_number / 7);\ncase TWO_WEEK:\n    period = Floor(day_number / 14);\ncase THREE_WEEK:\n    period = Floor(day_number / 21);\ncase MONTH:\n    period = Floor(month - First(month));\ncase \&quot;OPT EXP\&quot;:\n    period = exp_opt - First(exp_opt);\ncase BAR:\n    period = BarNumber() - 1;\n}\n\ndef count;\nif VaPrevious\n{\n\n\n count = CompoundValue(1, if !(period != period[1]) then count[1] + 1 else 1, 1);\n}\nelse\n{\n count = CompoundValue(1, if period != period[1] then (count[1] + period - period[1]) % multiplier else count[1], 0);\n}\ndef cond = count &lt; count[1] + period - period[1];\n\n\ndef height;\nswitch (pricePerRowHeightMode) {\ncase AUTOMATIC:\n    height = PricePerRow.AUTOMATIC;\ncase TICKSIZE:\n    height = PricePerRow.TICKSIZE;\ncase CUSTOM:\n    height = customRowHeight;\n}\n\n#####vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\ninput PlotStartTime = 0930;#Hint PlotStartTime: Move to earlier time to shift bubbles to the left.\n\ndef Na = Double.NaN;\n#Previous Day Functions\ndef Day   = GetDayOfWeek(GetYYYYMMDD());\ndef CloseTime = SecondsTillTime(1600) &gt;= 0;\ndef OpenTime = SecondsFromTime(0930) &gt;= 0;\ndef RegHrs = CloseTime and OpenTime;\ndef PLow  =  CompoundValue(1, If(Day == Day[1] and RegHrs and low &lt; PLow[1], low, If(SecondsFromTime(0930) &lt;= 0 and RegHrs, low, PLow[1])), low);\ndef PHigh = CompoundValue(1, If(Day == Day[1] and RegHrs and high &gt; PHigh[1], high, If(SecondsFromTime(0930) &lt;= 0 and RegHrs, high, PHigh[1])), high);\ndef PrevLow  = low(period = AggregationPeriod.THIRTY_MIN);\ndef PrevHigh = high(period = AggregationPeriod.THIRTY_MIN);\n##################\n#Prior Day Profile - counting formula by functionform\nrec count1 = CompoundValue(1, if !(GetDay() != GetDay()[1]) then count1[1] + 1 else 1, 1);\ndef priorperiod = if IsNaN(count[1]) then 1 else Max(count, count[1]);\ndef priorperiod1 = if IsNaN(count1[1]) then 1 else Max(count1, count1[1]);\n#profile vol1 = VolumeProfile(\&quot;startNewProfile\&quot; = GetDay() != GetDay()[1], \&quot;onExpansion\&quot; = no);\nprofile vol1 = VolumeProfile(\&quot;startNewProfile\&quot; = period != period[1], \&quot;onExpansion\&quot; = no);\n#period - period[1];\ndef vahprior = vol1.GetHighestValueArea();\ndef pocprior = vol1.GetPointOfControl();\ndef valprior = vol1.GetLowestValueArea();\n\ndef vahprev = GetValue(vahprior, priorperiod);\ndef pocprev = GetValue(pocprior, priorperiod);\ndef valprev = GetValue(valprior, priorperiod);\n\n\n\n#vol.Show(if showProfile then GlobalColor(\&quot;Profile\&quot;) else Color.CURRENT, if showPointOfControl then GlobalColor(\&quot;Point Of Control\&quot;) else Color.CURRENT, if showValueArea then GlobalColor(\&quot;Value Area\&quot;) else Color.CURRENT, opacity);\n#profile vol = VolumeProfile(\&quot;startNewProfile\&quot; = cond, \&quot;onExpansion\&quot; = no);\n#vol.Show(if showProfile then GlobalColor(\&quot;Profile\&quot;) else Color.CURRENT, if showPointOfControl then GlobalColor(\&quot;Point Of Control\&quot;) else Color.CURRENT, if showValueArea then GlobalColor(\&quot;Value Area\&quot;) else Color.CURRENT, opacity);\ndef VAH = vahprev;\ndef VAL = valprev;\ndef POC = pocprev;\n\n\n############\n#Value Area Functions\ndef Pivot = hlc3(period = period)[1];\ndef PPoint = If(Pivot &gt; 0, Pivot, Na);\ndef VArea  = Between(close, VAL, VAH);\ndef VAreaabove  = close &gt; VAH;\ndef VAreabelow  = close &lt; VAL;\n\n#Time Functions\ndef CloseTime2 = SecondsTillTime(1600) &gt;= 0;\ndef OpenTime2 = SecondsFromTime(PlotStartTime) &gt;= 0;\ndef MarketOpen = OpenTime2 and CloseTime2;\ndef NewDay = IsNaN(close(period = “Day”)[-1]);\ninput  Chart  =yes;# MarketOpen;# and NewDay;\n#Value Area Cloud\ndef CloudClose = SecondsTillTime(1615) &gt; 0;\ndef Cloud      =1;#OpenTime and CloudClose;\ndef ChartCloud = Cloud and Chart;\ndef CloudTest  =If(1, ChartCloud, Chart);#If(CloudOpenOnly, ChartCloud, Chart);\n\n#Plots\nplot VH  = If(Chart and VAH &gt; 0, VAH, Na);\nplot PC  = If(Chart and POC &gt; 0, POC, Na);\nplot VL  = If(Chart and VAL &gt; 0, VAL, Na);\n#plot cloudhigh = If(CloudTest and ShowCloud, VAH, Na);\n#plot cloudlow  = If(CloudTest and ShowCloud, VAL, Na);\n#AddCloud(cloudhigh, cloudlow, Color.GRAY, Color.GRAY);\n#AddCloud(VH, VL, Color.GRAY, Color.GRAY);\n\n####@\ndef VAHigh= VH;\ndef VALow= VL;\n\n#####^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n#profile vol = VolumeProfile(\&quot;startNewProfile\&quot; = cond, \&quot;onExpansion\&quot; = onExpansion, \&quot;numberOfProfiles\&quot; = profiles, \&quot;pricePerRow\&quot; = height, \&quot;value area percent\&quot; = valueAreaPercent);\n##$profile vol = VolumeProfile(\&quot;startNewProfile\&quot; = period != period[1], \&quot;onExpansion\&quot; = no);\n##$def con = CompoundValue(1, onExpansion, no);\n##$def pc = if IsNaN(vol.GetPointOfControl()) and con then pc[1] else vol.GetPointOfControl();\n##$def hVA = if IsNaN(vol.GetHighestValueArea()) and con then hVA[1] else vol.GetHighestValueArea();\n##$def lVA = if IsNaN(vol.GetLowestValueArea()) and con then lVA[1] else vol.GetLowestValueArea();\n\n##$def hProfile = if IsNaN(vol.GetHighest()) and con then hProfile[1] else vol.GetHighest();\n##$def lProfile = if IsNaN(vol.GetLowest()) and con then lProfile[1] else vol.GetLowest();\n##$def plotsDomain = IsNaN(close) == onExpansion;\n\n#plot POC = if plotsDomain then pc else Double.NaN;\n#plot ProfileHigh = if plotsDomain then hProfile else Double.NaN;\n#plot ProfileLow = if plotsDomain then lProfile else Double.NaN;\n##$plot VAHigh = if plotsDomain then hVA else Double.NaN;\n##$plot VALow = if plotsDomain then lVA else Double.NaN;\n\nDefineGlobalColor(\&quot;Profile\&quot;, GetColor(1));\nDefineGlobalColor(\&quot;Point Of Control\&quot;, GetColor(5));\nDefineGlobalColor(\&quot;Value Area\&quot;, GetColor(8));\n\n#if showProfile then\n\nvol1.Show(if showProfile then GlobalColor(\&quot;Profile\&quot;) else Color.CURRENT, if showPointOfControl then GlobalColor(\&quot;Point Of Control\&quot;) else Color.CURRENT, if showValueArea then GlobalColor(\&quot;Value Area\&quot;) else Color.CURRENT, opacity);\n\n#else\n\n#Vol.();\n\n#POC.SetDefaultColor(GlobalColor(\&quot;Point Of Control\&quot;));\n#POC.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\n#VAHigh.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\n#VALow.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\n#VAHigh.SetDefaultColor(GlobalColor(\&quot;Value Area\&quot;));\n#VALow.SetDefaultColor(GlobalColor(\&quot;Value Area\&quot;));\n#ProfileHigh.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\n#ProfileLow.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\n#ProfileHigh.SetDefaultColor(GetColor(3));\n#ProfileLow.SetDefaultColor(GetColor(3));\n#ProfileHigh.Hide();\n\n\n#############################################\n#def oneVol = Roundup(( VAHigh - VALow) / VAHigh, 2);\ndef oneVol = RoundUp(( VAHigh - VALow) / 100, 2);\n#def LowerVaLimit = VALow + offset * (triggerLowerVaLimit);\n#lProfile;#POC;#lProfile;#VALow;#*VAHigh;#(*POC ;\ndef upperValimitH = VAHigh + oneVol * (triggerUpperVaLimitHigh);\ndef upperValimitL = VAHigh + oneVol * (triggerUpperVaLimitLow);\n\ndef lowerValimitH = VALow + oneVol * (triggerLowerVaLimitHigh);\ndef lowerValimitL = VALow + oneVol * (triggerLowerVaLimitLow);\n#triggerUpperVaLimitlow = if triggerUpperVaLimitlow&gt;=0 then triggerUpperVaLimitlow =-5 else triggerUpperVaLimitlow= triggerUpperVaLimitlow;\n\nplot VA_high_short = upperValimitH;\nplot VA_high_long = upperValimitL;\n\nplot VA_low_short = lowerValimitL;\nplot VA_low_long = lowerValimitH;\n\n#AddCloud(VA_high_long, VA_high_short, Color.LIGHT_RED, Color.LIGHT_RED);\n#AddCloud(VA_high_long, VA_high_short, Color.LIGHT_RED, Color.LIGHT_RED);\n\n#VA_low_short.SetPaintingStrategy(PaintingStrategy.DASHES);\n#VA_low_long.SetDefaultColor(Color.BLUE);\nVA_low_short.SetHiding(!showLines);\nVA_low_short.SetPaintingStrategy(PaintingStrategy.DASHES);\nVA_low_short.SetDefaultColor(Color.RED);\nVA_low_long.SetHiding(!showLines);\nVA_low_long.SetPaintingStrategy(PaintingStrategy.DASHES);\nVA_low_long.SetDefaultColor(Color.GREEN);\n\n\n\nVA_high_short.SetHiding(!showLines);\nVA_high_short.SetPaintingStrategy(PaintingStrategy.DASHES);\nVA_high_short.SetDefaultColor(Color.RED);\nVA_high_long.SetHiding(!showLines);\nVA_high_long.SetPaintingStrategy(PaintingStrategy.DASHES);\nVA_high_long.SetDefaultColor(Color.GREEN);\n\nif (!show_VA_cloud)\nthen\n{\n    opacity_inv = 1000;\n}\nelse\n\n{\n    opacity_inv = if (opacity &gt;= 0 and opacity &lt;= 100) then 100 - opacity else 50;\n}\nAddCloud(VA_low_short,  VA_low_long,  CreateColor(144 * opacity_inv / 100, 240, 144 * opacity_inv / 100),  CreateColor(144 * opacity_inv / 100, 240, 144 * opacity_inv / 100));\n\nAddCloud(VA_high_short,   VA_high_long,  CreateColor(204, 184 * opacity_inv / 100, 202 * opacity_inv / 100),   CreateColor(204, 184 * opacity_inv / 100, 202 * opacity_inv / 100));\n\n\n#################\ninput showLable = no;\ninput timeFrame = {default DAY, \&quot;2 DAYS\&quot;, \&quot;3 DAYS\&quot;, \&quot;4 DAYS\&quot;, WEEK, MONTH, \&quot;OPT EXP\&quot;};\n #AddChartBubble(high == high(period = timeFrame), high, \&quot;High of \&quot; + timeFrame + \&quot;: \&quot; + high, Color.GREEN, showLable);\n #AddChartBubble(low == low(period = timeFrame), low, \&quot;Low of \&quot; + timeFrame + \&quot;: \&quot; + low, Color.PINK, showLable);\n #AddChartBubble(GetYYYYMMDD() != GetYYYYMMDD()[1], high, \&quot;O: \&quot; + open(period = \&quot;DAY\&quot;) + \&quot;\\nChg: \&quot; + ( open(period = \&quot;DAY\&quot;) - open(period = \&quot;DAY\&quot;)[1] ), Color.PLUM, showLable);\n\n#AddChartBubble(GetYYYYMMDD() != GetYYYYMMDD()[1], high, \&quot;oneVol: \&quot; + oneVol + \&quot;\\nPOH: \&quot; +  VAHigh+ \&quot;\\nPOL: \&quot; +  VALow, Color.orange, yes);\n\nVH.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nPC.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nVL.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nVH.SetDefaultColor(Color.RED);\nPC.SetDefaultColor(Color.YELLOW);\nPC.SetStyle(Curve.LONG_DASH);\nVL.SetDefaultColor(Color.GREEN);\n\n\n\n\n#Pivot Functions\ndef Res1  = (2 * PPoint) - PrevLow;\ndef Supp1 = (2 * PPoint) - PrevHigh;\ndef Res2  = PPoint + (Res1 - Supp1); # def Res2  = PPoint + (Res1 - Supp1);\ndef Supp2 = PPoint - (Res1 - Supp1);\ndef Res3  = PPoint + (Res2 - Supp2);# def Res3  = PrevHigh + 2 * (PPoint - PrevLow);\ndef Supp3 = PPoint - (Res2 - Supp2);#PrevLow - 2 * (PrevHigh - PPoint);\ndef Res4  = PrevHigh + 3 * (PPoint - PrevLow);\ndef Supp4 = PrevLow - 3 * (PrevHigh - PPoint);\ndef Res5  = PrevHigh + 4 * (PPoint - PrevLow);\ndef Supp5 = PrevLow - 4 * (PrevHigh - PPoint);\ndef Res6  = PrevHigh + 5 * (PPoint - PrevLow);\ndef Supp6 = PrevLow - 5 * (PrevHigh - PPoint);\ndef Res7  = PrevHigh + 6 * (PPoint - PrevLow);\ndef Supp7 = PrevLow - 6 * (PrevHigh - PPoint);\ndef Res8  = PrevHigh + 7 * (PPoint - PrevLow);\ndef Supp8 = PrevLow - 7 * (PrevHigh - PPoint);\n\n#Rounding Functions\ndef RI   = RoundDown(Res1, 0) - ((Round(((RoundDown(Res1, 0) - Res1) / 0.25), 0)) * 0.25);\ndef SI   = RoundDown(Supp1, 0) - ((Round(((RoundDown(Supp1, 0) - Supp1) / 0.25), 0)) * 0.25);\ndef RII  = RoundDown(Res2, 0) - ((Round(((RoundDown(Res2, 0) - Res2) / 0.25), 0)) * 0.25);\ndef SII  = RoundDown(Supp2, 0) - ((Round(((RoundDown(Supp2, 0) - Supp2) / 0.25), 0)) * 0.25);\ndef RIII = RoundDown(Res3, 0) - ((Round(((RoundDown(Res3, 0) - Res3) / 0.25), 0)) * 0.25);\ndef SIII = RoundDown(Supp3, 0) - ((Round(((RoundDown(Supp3, 0) - Supp3) / 0.25), 0)) * 0.25);\ndef RIV  = RoundDown(Res4, 0) - ((Round(((RoundDown(Res4, 0) - Res4) / 0.25), 0)) * 0.25);\ndef SIV  = RoundDown(Supp4, 0) - ((Round(((RoundDown(Supp4, 0) - Supp4) / 0.25), 0)) * 0.25);\ndef PivP = RoundDown(PPoint, 0) - ((Round(((RoundDown(PPoint, 0) - PPoint) / 0.25), 0)) * 0.25);\ndef RV  = RoundDown(Res5, 0) - ((Round(((RoundDown(Res5, 0) - Res5) / 0.25), 0)) * 0.25);\ndef SV  = RoundDown(Supp5, 0) - ((Round(((RoundDown(Supp5, 0) - Supp5) / 0.25), 0)) * 0.25);\ndef RVI  = RoundDown(Res6, 0) - ((Round(((RoundDown(Res6, 0) - Res6) / 0.25), 0)) * 0.25);\ndef SVI  = RoundDown(Supp6, 0) - ((Round(((RoundDown(Supp6, 0) - Supp6) / 0.25), 0)) * 0.25);\ndef RVII  = RoundDown(Res7, 0) - ((Round(((RoundDown(Res7, 0) - Res7) / 0.25), 0)) * 0.25);\ndef SVII  = RoundDown(Supp7, 0) - ((Round(((RoundDown(Supp7, 0) - Supp7) / 0.25), 0)) * 0.25);\ndef RVIII  = RoundDown(Res8, 0) - ((Round(((RoundDown(Res8, 0) - Res8) / 0.25), 0)) * 0.25);\ndef SVIII  = RoundDown(Supp8, 0) - ((Round(((RoundDown(Supp8, 0) - Supp8) / 0.25), 0)) * 0.25);\n\n\n##\ndef R1_auto_show = (Between(RI, VL, VH) and close &gt; VL);\ndef S1_auto_show = (close &lt; VL or (Between(SI, VL, VH) and close &lt; VH));\n\ndef R2_auto_show = close &gt; VH;\ndef S2_auto_show = close &lt; VL;\n\ndef R3_auto_show = close &gt; (RI + ((RII - RI) / 2));\ndef S3_auto_show = close &lt; (SI - ((SI - SII) / 2));\n\ndef R4_auto_show = close &gt; (RII + ((RIII - RII) / 2));\ndef S4_auto_show =  close &lt; (SII - ((SII - SIII) / 2));\n\ndef R5_auto_show =  close &gt; (RIII + ((RIV - SIII) / 2));\ndef S5_auto_show =  close &lt; (SIII - ((SIII - SIV) / 2));\n\ndef R6_auto_show =  close &gt; (RIV + ((RV - SIV) / 2));\ndef S6_auto_show =  close &lt; (SIV - ((SVI - SV) / 2));\n\ndef R7_auto_show =  close &gt; (RV + ((RVI - SV) / 2));\ndef S7_auto_show =  close &lt; (SV- ((SV - SVI) / 2));\n\ndef R8_auto_show =  close &gt; (RVI + ((RVII - SIII) / 2));\ndef S8_auto_show =  close &lt; (SVI - ((SVI - SVII) / 2));\n#plot Pivots\n\n#AddLabel(yes , \&quot;day_number= \&quot; + (day_number), Color.pink);\n#AddLabel(yes , \&quot;period= \&quot; + (period), Color.pink);\n\n#plot test =PrevLow;\n&quot;,name=&quot;_d49e3a91_fd7a_414f_b507_d0dfaea0694e&quot;}){inputsMap:TreeMap2{^(&quot;timePerProfile&quot;,&quot;WEEK&quot;),!get:Integer3(&quot;triggerLowerVaLimitHigh&quot;)},inputsMap=@TreeMap2,plots{1:{lineStyle=1}}}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;## START STUDY\n## Anchored_VWAP_STOPS\n## linus, 2014-03-10, v0.1\n \n#hint: VWAP stops anchored off FractalTrader pivots.\n \n#hint n: Lookback period for finding swing highs, lows.\ninput n = 10;\n \n#hint ticks: Offset VWAP lines by this number of ticks.\ninput ticks = 2.0;\n \ndef bnOK = barNumber() &gt; n;\n \ndef isHigher = fold i = 1 to n + 1 with p = 1 \n               while p do high &gt; GetValue(high, -i);\n \ndef HH = if bnOK and isHigher \n         and high == Highest(high, n) \n         then high else Double.NaN;\n \ndef isLower = fold j = 1 to n + 1 with q = 1\n              while q do low &lt; GetValue(low, -j);\n \ndef LL = if bnOK and isLower \n         and low == Lowest(low, n) \n         then low else Double.NaN;\n \ndef PivH = if HH &gt; 0 then HH else Double.NaN;\ndef PivL = if LL &gt; 0 then LL else Double.NaN;\n \nrec dir = compoundValue(1, if !isNaN(PivL) then 1 else if !isNaN(PivH) then -1 else dir[1], 0);\n \nplot Up = dir crosses above 0;\nUp.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nUp.SetLineWeight(3);\nUp.SetDefaultColor(Color.WHITE);\n \nplot Dn = dir crosses below 0;\nDn.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);\nDn.SetLineWeight(3);\nDn.SetDefaultColor(Color.ORANGE);\n \ndef LocH = (high + (tickSize() * ticks)) * volume;\ndef LocL = (low - (tickSize() * ticks)) * volume;\nrec PH;\nrec VH;\nrec PL;\nrec VL;\n \nif Dn {\n    PH = LocH;\n    VH = volume;    \n} else {\n    PH = compoundValue(1, LocH + PH[1], Double.NaN);\n    VH = compoundValue(1, volume + VH[1], Double.NaN);\n}\nif Up  {\n    PL = LocL;\n    VL = volume;\n} else {\n    PL = compoundValue(1, LocL + PL[1], Double.NaN);\n    VL = compoundValue(1, volume + VL[1], Double.NaN);\n}\n \nplot VwapH = if Dn then Double.NaN else PH / VH;\nplot VwapL = if Up then Double.NaN else PL / VL;\n \nVwapH.SetDefaultColor(Color.DARK_RED);\nVwapL.SetDefaultColor(Color.Yellow);\nvwapH.setlineWeight(5);\nvwapL.setlineWeight(5);\n \n## END STUDY\n \n#Note: /ES 5m chart of the Anchored_VWAP_STOPS study.\n&quot;,name=&quot;_163cc979_a667_47d6_b9c2_0327d28018bc&quot;}){hidden=&lt;T}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;## START STUDY\n## Anchored_VWAP2\n## linus, 2014-03-10, v0.1\n\n#10:24 linus: it carries over the previous pivot\'s lines for high, low and close. (it plots vwaps of the high, low and close that are reset each time a new pivot is found.)\n#10:25 linus: i wrote it to experiment with vwap as stops. (the high and low vwaps that can be offset by the ticks input.)\n#10:25 linus: but it should serve as an example of how to reset the vwaps based on a signal.\n#10:35 linus: #hint: VWAP stops anchored off  fractalTrader pivots.\n#10:37 linus: the code calculates the pivots as PivH and PivL, and then restarts the high, low and close vwaps when it finds a new pivot.  Otherwise it continues to calculate the high, low and close vwaps.\n#10:37 linus: the dashed vwap plots are the saved from the previous pivot, and the solid vwap plots are since the last pivot.\n\n\n#hint: VWAP stops anchored off  fractalTrader pivots.\n\n#hint n: Lookback period for finding swing highs, lows.\ninput n = 20;\n\n#hint ticks: Offset High/Low VWAP lines by this number of ticks.\ninput ticks = 2.0;\n\ndef bnOK = barNumber() &gt; n;\n\ndef isHigher = fold i = 1 to n + 1 with p = 1 \n               while p do high &gt; GetValue(high, -i);\n\ndef HH = if bnOK and isHigher \n         and high == Highest(high, n) \n         then high else Double.NaN;\n\ndef isLower = fold j = 1 to n + 1 with q = 1\n              while q do low &lt; GetValue(low, -j);\n\ndef LL = if bnOK and isLower \n         and low == Lowest(low, n) \n         then low else Double.NaN;\n\ndef PivH = if HH &gt; 0 then HH else Double.NaN;\ndef PivL = if LL &gt; 0 then LL else Double.NaN;\n\nplot Up = !isNaN(PivL);\nUp.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nUp.SetLineWeight(3);\nUp.SetDefaultColor(Color.WHITE);\n\nplot Dn = !isNaN(PivH);\nDn.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);\nDn.SetLineWeight(3);\nDn.SetDefaultColor(Color.ORANGE);\n\ndef LocH = (high + (tickSize() * ticks)) * volume;\ndef LocL = (low - (tickSize() * ticks)) * volume;\ndef LocC = close * volume;\n\nrec PC;\nrec VC;\nrec PC2;\nrec VC2;\nrec PH;\nrec VH;\nrec PL;\nrec VL;\nrec PH2;\nrec VH2;\nrec PL2;\nrec VL2;\n\nif Dn or Up {\n    PC = LocC;\n    VC = volume;\n    PC2 = PC[1];\n    VC2 = VC[1];\n} else {\n    PC = compoundValue(1, LocC + PC[1], Double.NaN);\n    VC = compoundValue(1, volume + VC[1], Double.NaN);\n    PC2 = compoundValue(1, LocC + PC2[1], Double.NaN);\n    VC2 = compoundValue(1, volume + VC2[1], Double.NaN);\n}\n\nif Dn {\n    PH = LocH;\n    VH = volume;\n    PH2 = PH[1];\n    VH2 = VH[1];\n} else {\n    PH = compoundValue(1, LocH + PH[1], Double.NaN);\n    VH = compoundValue(1, volume + VH[1], Double.NaN);\n    PH2 = compoundValue(1, LocH + PH2[1], Double.NaN);\n    VH2 = compoundValue(1, volume + VH2[1], Double.NaN);\n}\nif Up  {\n    PL = LocL;\n    VL = volume;\n    PL2 = PL[1];\n    VL2 = VL[1];\n} else {\n    PL = compoundValue(1, LocL + PL[1], Double.NaN);\n    VL = compoundValue(1, volume + VL[1], Double.NaN);\n    PL2 = compoundValue(1, LocL + PL2[1], Double.NaN);\n    VL2 = compoundValue(1, volume + VL2[1], Double.NaN);\n}\n\nplot VwapC = if Dn or Up then Double.NaN else PC / VC;\nplot VwapC2 = if Dn or Up then Double.NaN else PC2 / VC2;\nplot VwapH = if Dn then Double.NaN else PH / VH;\nplot VwapL = if Up then Double.NaN else PL / VL;\nplot VwapH2 = if Dn then Double.NaN else PH2 / VH2;\nplot VwapL2 = if Up then Double.NaN else PL2 / VL2;\n\nVwapC.SetDefaultColor(Color.YELLOW);\nVwapC.SetLineWeight(2);\nVwapC.HideBubble();\n\nVwapC2.SetDefaultColor(Color.YELLOW);\nVwapC2.SetLineWeight(2);\nVwapC2.SetStyle(Curve.SHORT_DASH);\nVwapC2.HideBubble();\n\nVwapH.SetDefaultColor(Color.DARK_RED);\nVwapH.HideBubble();\n\nVwapL.SetDefaultColor(Color.DARK_GREEN);\nVwapL.HideBubble();\n\nVwapH2.SetDefaultColor(Color.DARK_RED);\nVwapH2.SetStyle(Curve.SHORT_DASH);\nVwapH2.HideBubble();\n\nVwapL2.SetDefaultColor(Color.DARK_GREEN);\nVwapL2.SetStyle(Curve.SHORT_DASH);\nVwapL2.HideBubble();\n\n## END STUDY\n&quot;,name=&quot;_169b5427_c15c_4df4_97a4_78b992191cf3&quot;}){hidden=&lt;T}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;### xiuyu vwap cross signal with abnormal volume\n\n#declare hide_on_daily;\n\n####\n#MTF\ndef tFrame = GetAggregationPeriod();\ninput timeFrame = {default DAY, WEEK, MONTH};\ninput aggregationPeriod = AggregationPeriod.HOUR;\ninput useAutoAggegate = yes;\n\n\n\n# Variables:\n#def  =if (useAutoAggegate) then open(period = aggregationPeriod1) else open;\n\ndef AutoAGG = if tFrame &lt;  AggregationPeriod.DAY then AggregationPeriod.DAY\n             else if  tFrame &lt; AggregationPeriod.WEEK then AggregationPeriod.WEEK\n                  else AggregationPeriod.MONTH;\ndef AGG = if (!useAutoAggegate) then aggregationPeriod else AutoAGG;\n\ndef testTimeFrames = if tFrame &lt; AGG  then yes else no;\n\n#AddLabel(useAutoAggegate, if testTimeFrames  then \&quot;Time Frames Are Correct\&quot; else \&quot;Time Frames Are \n\ninput length = 10; #average volume lenght\ninput volMinimum = 50000;\ninput showPriceColor = yes;\ninput factor = 1.50; #show what factors to avgvolume \ninput nDevUp = 2.0;\ninput nDevDn = -2.0;\n\ndef avgvolume = Average(volume, length) * factor;\n\n\n#plot vwap = reference VWAP( AGG);\n#######\n\n\ndef cap = GetAggregationPeriod();\ndef errorInAggregation =\n    timeFrame == timeFrame.DAY and cap &gt;= AggregationPeriod.WEEK or\n    timeFrame == timeFrame.WEEK and cap &gt;= AggregationPeriod.MONTH;\nAssert(!errorInAggregation, \&quot;timeFrame should be not less than current chart aggregation period\&quot;);\n\ndef yyyyMmDd = GetYYYYMMDD();\ndef periodIndx;\nswitch (timeFrame) {\ncase DAY:\n    periodIndx = yyyyMmDd;\ncase WEEK:\n    periodIndx = Floor((DaysFromDate(First(yyyyMmDd)) + GetDayOfWeek(First(yyyyMmDd))) / 7);\ncase MONTH:\n    periodIndx = RoundDown(yyyyMmDd / 100, 0);\n}\ndef isPeriodRolled = CompoundValue(1, periodIndx != periodIndx[1], yes);\n\ndef volumeSum;\ndef volumeVwapSum;\ndef volumeVwap2Sum;\n\nif (isPeriodRolled) {\n    volumeSum = volume;\n    volumeVwapSum = volume * vwap;\n    volumeVwap2Sum = volume * Sqr(vwap);\n} else {\n    volumeSum = CompoundValue(1, volumeSum[1] + volume, volume);\n    volumeVwapSum = CompoundValue(1, volumeVwapSum[1] + volume * vwap, volume * vwap);\n    volumeVwap2Sum = CompoundValue(1, volumeVwap2Sum[1] + volume * Sqr(vwap), volume * Sqr(vwap));\n}\ndef price = volumeVwapSum / volumeSum;\ndef deviation = Sqrt(Max(volumeVwap2Sum / volumeSum - Sqr(price), 0));\n\nplot VWAP = price;\nplot UpperBand = price + nDevUp * deviation;\nplot LowerBand = price + nDevDn * deviation;\nplot UpperBand2 = price + (1+nDevUp) * deviation;\nplot LowerBand2 = price +(-1+ nDevDn) * deviation;\ndef sdvP1=  price + deviation;\ndef sdvN1=  price - deviation;\n#####\n\n\nplot SD1up =close[1] crosses above sdvp1 and ( open&lt; close) and low&gt;sdvp1;\nSD1up.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nSD1up.SetDefaultColor(Color.graY);\nSD1up.SetLineWeight(2);\nAssignPriceColor(if SD1up and showPriceColor and open&lt; close then Color.violet else Color.CURRENT);\n\nAddLabel(yes, \&quot;VWAP= \&quot; + astext(VWAP), if VWAP&lt; close then Color.LIGHT_GREEN else if VWAP&gt; close then color.LIGHT_red else Color.GRAY);\n#AddLabel(yes, \&quot;VWAP= \&quot; + astext(VWAP), Color.White);\ndef vwDif= close- VWAP;\n#AddLabel(yes, \&quot; \&quot;+astext(vwDif), if vwDif&gt; 0 then Color.LIGHT_GREEN else if vwDif&lt; 0 then color.LIGHT_red else Color.GRAY);\nAddLabel(yes and vwDif&gt;0, \&quot; +\&quot;+astext(vwDif),  Color.LIGHT_GREEN );\nAddLabel(yes and vwDif&lt;=0, \&quot; \&quot;+astext(vwDif),  if vwDif&lt; 0 then color.LIGHT_red else Color.LIGHT_GRAY);\n\ninput vwapLableAll =yes;\nAddLabel(vwapLableAll, \&quot;VWAP +1= \&quot; + astext(sdvP1), if sdvP1&lt; close then Color.LIGHT_GREEN else if sdvP1&gt; close then color.LIGHT_red else Color.GRAY);\n\nAddLabel(vwapLableAll, \&quot;VWAP +2= \&quot; + astext(UpperBand), if UpperBand&lt; close then Color.LIGHT_GREEN else if UpperBand&gt; close then color.LIGHT_red else Color.GRAY);\nAddLabel(vwapLableAll, \&quot;VWAP +3= \&quot; + astext(UpperBand2), if UpperBand2&lt; close then Color.LIGHT_GREEN else if UpperBand2&gt; close then color.LIGHT_red else Color.GRAY);\n\nAddLabel(vwapLableAll, \&quot;VWAP -1= \&quot; + astext(sdvN1), if sdvN1&lt; close then Color.LIGHT_GREEN else if sdvN1&gt; close then color.LIGHT_red else Color.GRAY);\nAddLabel(vwapLableAll, \&quot;VWAP -2= \&quot; + astext(LowerBand), if LowerBand&lt; close then Color.LIGHT_GREEN else if LowerBand&gt; close then color.LIGHT_red else Color.GRAY);\nAddLabel(vwapLableAll, \&quot;VWAP -3= \&quot; + astext(LowerBand2), if LowerBand2&lt; close then Color.LIGHT_GREEN else if LowerBand2&gt; close then color.LIGHT_red else Color.GRAY);\n\n#AddLabel(vwapLableAll, \&quot;VWAP R= \&quot; + astext(upperBand/sdvN1 -1)+\&quot;  \&quot;+astext(upperBand/lowerBand -1)+\&quot;  \&quot;+astext(upperBand2/lowerBand2 -1), if LowerBand&lt; close then Color.LIGHT_GREEN else if LowerBand&gt; close then color.LIGHT_red else Color.GRAY);\n\nAddLabel(vwapLableAll, \&quot;VWAP R= \&quot; + astext(upperBand/sdvN1 -1)+\&quot;  \&quot;+astext(upperBand/lowerBand -1)+\&quot;  \&quot;+astext(upperBand2/lowerBand2 -1), if LowerBand&lt; close then Color.LIGHT_GREEN else if LowerBand&gt; close then color.LIGHT_red else Color.GRAY);\n\n\n\ndef volCheck = volume &gt;= avgvolume &amp;&amp; volume &gt;= volMinimum &amp;&amp; volume &gt;= volume[1];\ndef isCross =  close crosses VWAP;\ndef abnormalSignal = isCross and volCheck;\n\n\nVWAP.SetDefaultColor(color.white);#(GetColor(0));\nplot signalup = if abnormalSignal and close &gt; VWAP then low else Double.NaN;\nsignalup.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nsignalup.SetDefaultColor(Color.CYAN);\nsignalup.SetLineWeight(2);\n\nplot signaldown =  if abnormalSignal and close &lt; VWAP then high else Double.NaN;\nsignaldown.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);\nsignaldown.SetDefaultColor(Color.CYAN);\nsignaldown.SetLineWeight(2);\n\nAssignPriceColor(if abnormalSignal and showPriceColor then Color.CYAN else Color.CURRENT);\n\n\n#####\nvwap.SetStyle(Curve.POINTS);\nUpperBand.SetDefaultColor(GetColor(0));\nLowerBand.SetDefaultColor(GetColor(0));\n\nUpperBand.SetStyle(Curve.POINTS);\nLowerBand.SetStyle(Curve.POINTS);\n\nUpperBand2.SetDefaultColor(Color.YELLOW);\nLowerBand2.SetDefaultColor(Color.YELLOW);\n\nUpperBand2.SetStyle(Curve.SHORT_DASH);\nLowerBand2.SetStyle(Curve.SHORT_DASH);\n#input AutoHide=yes;\n#def hideLower = if AutoHide then close &gt;vwap  else 0;;\n#def hideUpper = if AutoHide then  close &lt;vwap  else 0;#- deviation\n#addLabel(yes, \&quot;hide U\&quot;+hideUpper +\&quot; L\&quot;+hideLower);\n#UpperBand.setHiding(hideUpper);\n#LowerBand.setHiding(hideLower);\n#UpperBand.Hide();\n#LowerBand.Hide();\n#UpperBand2.Hide();\n#LowerBand2.Hide();&quot;,name=&quot;_740dc265_6e6e_38a5_ba0e_c0a058a5d552&quot;}){plots{0:{lineStyle=1,paintingStrategy=2},1:{lineStyle=3},2:{lineStyle=3}}}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# @new\n# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2009-2021\n#\n# Source code isn\'t available.\n\nplot slowAvg = Double.NaN;\nplot fastAvg = Double.NaN;\nplot BuySignal = Double.NaN;\nplot SellSignal = Double.NaN;&quot;,name=&quot;PPS&quot;})),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;#start\n\n#hint: &lt;b&gt;Ask SLM Ribbon&lt;/b&gt;\\nThe Ask SLM Ribbon is a momentum indicator that uses a combination of three exponential moving averages. When the averages are in alinement, with the \&quot;superfast\&quot; moving average above the \&quot;fast\&quot; moving average and the fast moving average above the \&quot;slow\&quot; moving average, the momentum condition is positive. A \&quot;buy signal\&quot; is generated, with an up arrow, when above conditions are met and a \&quot;clear bar\&quot; occurs; with the low of that bar is above all of the moving averages. The positive momentum ends if the superfast moving average touches the fast moving average; then condition is considered neutral and an oppostive arrow will appear. Negative momentum and a \&quot;Sell signal\&quot; are the opposite of the bullish conditions. \\n \\n\\n--------------------------------------------------------------------------------\\nVolume bars can be colored to match the Chart by clicking on Style&gt;Settings&gt;Appearance&gt;Common, and color symbol as ticks  \\n\n\n\n# Variables:\n\n \n\n#input price = close;\ninput color_bars=no;\n\ninput useHeikinAshi =no;\n\ninput superfast_length = 4;\n\ninput fast_length = 7;\n\ninput slow_length =17;\n\n\ninput displace = 0;\ninput averageTypeSuperfast = AverageType.simple;\ninput averageTypefast = AverageType.simple;\ninput averageTypeSlow = AverageType.EXPONENTIAL;\n\ndef priceSupperFast ;\ndef priceFast ;\ndef priceSlow ;\n#Heikin Ashi\ndef haClose = (open+high+low+close)/4; #Heikin Ashi Close: The arithmetic mean of the current high, low, open, and close prices.\ndef haOpen = (haOpen[1] + haClose[1])/2  ;# Heikin Ashi Open: The midpoint of the previous candle.\ndef haHigh = max(high, max( haOpen, haClose) ) ;#Heikin Ashi High: The highest of the following: the actual high, the Heikin Ashi Open, or the Heikin Ashi Close.\ndef haLow = Min(low,min( haOpen, haClose));# Heikin Ashi Low: The lowest of the following: the actual low, the Heikin Ashi Open, or the Heikin Ashi Close.\n\nif useHeikinAshi \n\n then\n {\n  priceSupperFast = (haHigh +haLow+ haclose)/3;\n  priceFast = haclose;\n  priceSlow = haclose;\n }\nelse\n {\n  priceSupperFast = HLC3;\n  priceFast = close;\n  priceSlow = close;\n }\n\n\n\ndef mov_avg_superFast = MovingAverage(averageTypeSuperfast, priceSupperFast[-displace], superfast_length);\ndef mov_avg_Fast = MovingAverage(averageTypefast, priceFast[-displace], fast_length);\ndef mov_avg_Slow = MovingAverage(averageTypeSlow, priceSlow[-displace], slow_length);\n\n#moving averages\nPlot Superfast = mov_avg_superFast;\nplot Fast = mov_avg_Fast;\nplot Slow = mov_avg_Slow;\nSuperfast.setdefaultColor(color.cyan);\nFast.setdefaultColor(color.gray);\nSlow.setdefaultColor(color.blue);\n\n\n \n\ndef buy = mov_avg_superFast &gt; mov_avg_Fast and mov_avg_Fast &gt; mov_avg_Slow and low &gt; mov_avg_superFast;\n\ndef stopbuy = mov_avg_superFast &lt;= mov_avg_Fast;\n\ndef buynow = !buy[1] and buy;\n\ndef buysignal = CompoundValue(1, if buynow and !stopbuy then 1 else if buysignal[1]==1 and stopbuy then 0 else buysignal[1], 0);\n\n \n\nplot Buy_Signal = buysignal[1] == 0 and buysignal==1;\nBuy_signal.setpaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nBuy_signal.setdefaultColor(color.dark_GREEN);\nBuy_signal.hidetitle();\n#Alert(condition = buysignal[1] == 0 and buysignal == 1, text = \&quot;Buy Signal\&quot;, sound = Sound.Bell, \&quot;alert type\&quot; = Alert.BAR);\n\nplot Momentum_Down = buysignal[1] ==1 and buysignal==0;\nMomentum_down.setpaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);\nMomentum_Down.setdefaultColor(color.plum);\nMomentum_down.hidetitle();\n\n#Alert(condition = buysignal[1] == 1 and buysignal == 0, text = \&quot;Momentum_Down\&quot;, sound = Sound.Bell, \&quot;alert type\&quot; = Alert.BAR);\ndef sell = mov_avg_superFast &lt; mov_avg_Fast and mov_avg_Fast &lt; mov_avg_Slow and high &lt; mov_avg_superFast;\ndef stopsell = mov_avg_superFast &gt;= mov_avg_Fast;\n\ndef sellnow = !sell[1] and sell;\n\ndef sellsignal = CompoundValue(1, if sellnow and !stopsell then 1 else if sellsignal[1]==1 and stopsell then 0 else sellsignal[1], 0);\n\n \n\nPlot Sell_Signal = sellsignal[1] ==0 and sellsignal;\n\nSell_signal.setpaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_down);\n\nsell_signal.setDefaultColor(color.red);\n\nSell_signal.hidetitle();\n\n#Alert(condition = sellsignal[1] == 0 and sellsignal == 1, text = \&quot;Sell Signal\&quot;, sound = Sound.Bell, \&quot;alert type\&quot; = Alert.BAR);\n\n \n\nPlot Momentum_Up = sellsignal[1]==1 and sellSignal==0;\n\nMomentum_up.setpaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_up);\n\nMomentum_up.setDefaultColor(color.plum);\n\nMomentum_up.hidetitle();\n\n#Alert(condition = sellsignal[1] == 1 and sellSignal == 0, text = \&quot;Momentum_Up\&quot;, sound = Sound.Bell, \&quot;alert type\&quot; = Alert.BAR);\ninput priceHma = close;\n input lengthHma = 20;\n\ndef HMA = MovingAverage(AverageType.HULL, priceHma, lengthHma);\ndef HMA_Up=  HMA &gt; HMA[1];\ndef HMA_Down =! HMA_UP;\n\nplot Colorbars = if buysignal and HMA_Up then 1 else if  buysignal and !HMA_Up then  2 else if sellsignal and HMA_Down then 3  else if sellsignal and !HMA_Down then  4 else if !buysignal or !sellsignal then 5 else 0;\n\ncolorbars.setHiding(1);\n\nColorbars.definecolor(\&quot;Buy\&quot;, color.dark_green);\n\nColorbars.definecolor(\&quot;Sell\&quot;, color.red);\n\nColorbars.definecolor(\&quot;Neutral\&quot;, color.plum);\nColorbars.definecolor(\&quot;HullMA_up\&quot;, color.blue);\n\nColorbars.definecolor(\&quot;HullMA_down\&quot;, color.orange);\n\n\n\n\n\n\n\n\n###############\n\n#def Colorbars1 = if buysignal == 1 then 1 else if sellsignal == 1 then 2 else if buysignal == 0 or sellsignal == 0 then 3 else 0;\n\n\n\n\n\n\n\n\n \n\nAssignPriceColor(if Colorbars ==1 and color_bars then colorbars.color(\&quot;Buy\&quot;) else if colorbars ==2 and color_bars  then colorbars.color(\&quot;HullMA_down\&quot;) else if colorbars ==3 and color_bars  then colorbars.color(\&quot;Sell\&quot;)  else if colorbars ==4 and color_bars  then colorbars.color(\&quot;HullMA_up\&quot;)else if color_bars  then colorbars.color(\&quot;neutral\&quot;) else  Color.CURRENT);\n\n#end&quot;,name=&quot;_f0b875df_d13b_465c_aa4b_eb86cf6026c9&quot;}){hidden=&lt;T,inputsMap:TreeMap3{^(&quot;averageTypefast&quot;,&quot;EXPONENTIAL&quot;),^(&quot;averageTypeSuperfast&quot;,&quot;EXPONENTIAL&quot;),^(&quot;priceHma&quot;,&quot;CLOSE&quot;),!get:Integer4(&quot;fast_length&quot;)},inputsMap=@TreeMap3,plots{0:{lineStyle=3},1:{lineStyle=3},2:{lineStyle=3},3:{color=@CustomColor0,lineWeight=3}}})}},!get(#%4.SubgraphId(&quot;Volume&quot;)){height=80,storableIndicators.+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# Modified by Mahi\n# Second Mod by Ramon DV\n\ndeclare on_volume;\n\n#Inputs\n\ninput ShowDayAvg = yes;\ninput AvgDayVolLength = 30;\ninput ShowTodayVolume = yes;\ninput ShowTodayVolumeProjection = yes;\ninput ShowPercentOfDayAvg = yes;\ninput UnusualVolumePercent = 200;\ninput ShowBarAvg = yes;\ninput AvgBarVolLength = 30;\ninput ShowCurrentBar = yes;\ninput ShowPercentOfBarAvg = yes;\ninput ShowSellVolumePercent = yes;\ninput ShowBuyVolumePercent = yes;\ninput AvgType = AverageType.SIMPLE;\n\ndef O = open;\ndef H = high;\ndef C = close;\ndef L = low;\ndef V = volume;\ndef buying = V * (C - L) / (H - L);\ndef selling = V * (H - C) / (H - L);\n\ndef O_day = open(period = AggregationPeriod.DAY);\ndef H_day = high(period = AggregationPeriod.DAY);\ndef C_day = close(period = AggregationPeriod.DAY);\ndef L_day = low(period = AggregationPeriod.DAY);\n\ndef selling_day = V * (H_day - C_day) / (H_day - L_day);\ndef buying_day = V * (C_day - L_day) / (H_day - L_day);\n# Selling Volume pressure\n\nplot SellVol = selling;\nSellVol.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);\nSellVol.SetDefaultColor(Color.RED);\nSellVol.HideTitle();\nSellVol.HideBubble();\nSellVol.SetLineWeight(5);\n\n# Total Volume\n# Buying Volume pressure\n\nplot BuyVol = buying + selling; # plot in the background of selling volume\nBuyVol.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);\nBuyVol.SetDefaultColor(Color.DARK_GREEN);\nBuyVol.HideTitle();\nBuyVol.HideBubble();\nBuyVol.SetLineWeight(5);\n\n#Volume Data\n\ndef DayVol = volume(period = “DAY”);\ndef AvgDayVol = MovingAverage(AvgType, DayVol[1], AvgDayVolLength);\ndef percentOfDay = Round((DayVol / AvgDayVol) * 100, 0);\n\n\ndef AvgBarVol = MovingAverage(AvgType, volume[1], AvgBarVolLength);\ndef percentOfBar = Round((volume / AvgBarVol) * 100, 0);\ndef SellVolPercent = Round((selling / volume) * 100, 0);\ndef BuyVolPercent = 100 - SellVolPercent;\n\ndef SellVolPercent_day = Round((selling_day / volume) * 100, 0);\ndef BuyVolPercent_day = 100 - SellVolPercent_day;\n\n# Labels\n\nAddLabel(ShowDayAvg, \&quot;Avg “ + AvgDayVolLength + “ Days: \&quot; + Round(AvgDayVol, 0), Color.LIGHT_GRAY);\n\nAddLabel(ShowTodayVolume, \&quot;Today: \&quot; + DayVol, (if percentOfDay &gt;= UnusualVolumePercent then Color.GREEN else if percentOfDay &gt;= 100 then Color.ORANGE else Color.LIGHT_GRAY));\n\nAddLabel(ShowPercentOfDayAvg, percentOfDay + \&quot;%\&quot;, (if percentOfDay &gt;= UnusualVolumePercent then Color.GREEN else if percentOfDay &gt;= 100 then Color.ORANGE else Color.WHITE) );\n\nAddLabel(ShowBarAvg, \&quot;Avg “ + AvgBarVolLength + ” Bars: \&quot; + Round(AvgBarVol, 0), Color.LIGHT_GRAY);\n\nAddLabel(ShowCurrentBar, \&quot;Cur Bar: \&quot; + volume, (if percentOfBar &gt;= UnusualVolumePercent then Color.GREEN else if percentOfBar &gt;= 100 then Color.ORANGE else Color.LIGHT_GRAY));\n\nAddLabel(ShowPercentOfBarAvg, percentOfBar + \&quot;%\&quot;, (if percentOfBar &gt;= UnusualVolumePercent then Color.GREEN else if percentOfBar &gt;= 100 then Color.ORANGE else Color.WHITE) );\n\n\nAddLabel(ShowSellVolumePercent and (SellVolPercent &gt; BuyVolPercent) , \&quot;Cur Bar Sell %: \&quot; + SellVolPercent, if SellVolPercent &gt; BuyVolPercent then Color.RED else Color.GRAY);\nAddLabel(ShowBuyVolumePercent and (SellVolPercent &lt;= BuyVolPercent), \&quot;Cur Bar Buy %: \&quot; + BuyVolPercent, if BuyVolPercent &gt; SellVolPercent then Color.GREEN else Color.GRAY);\n\n\n# PriceOpen.Hide();\ninput length = 50;\n\nplot Vol = volume;\nplot VolAvg = Average(volume, length);\n\nVol.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);\nVol.SetLineWeight(3);\nVol.DefineColor(\&quot;Up\&quot;, Color.UPTICK);\nVol.DefineColor(\&quot;Down\&quot;, Color.DOWNTICK);\nVol.AssignValueColor(if close &gt; close[1] then Vol.Color(\&quot;Up\&quot;) else if close &lt; close[1] then Vol.Color(\&quot;Down\&quot;) else GetColor(1));\nVolAvg.SetDefaultColor(GetColor(8));\n\n\n#########################################################\n\n#def rth = (RegularTradingEnd(GetYYYYMMDD()) - RegularTradingStart(GetYYYYMMDD())) / AggregationPeriod.HOUR;\ndef rth = (RegularTradingEnd(GetYYYYMMDD()) - RegularTradingStart(GetYYYYMMDD())) / AggregationPeriod.MIN;\ndef MarketNotClosed = GetTime() &lt;= RegularTradingEnd (GetYYYYMMDD());\n# def eod = ((  RegularTradingEnd (GetYYYYMMDD()) - GetTime() ) / AggregationPeriod.MIN);\ndef eod = if MarketNotClosed then ((  RegularTradingEnd (GetYYYYMMDD()) - GetTime() ) / AggregationPeriod.MIN) else ((  RegularTradingEnd (GetYYYYMMDD())  ) / AggregationPeriod.MIN);\n\ndef DayVol_Projetion = volume(period = “DAY”) * rth / (rth - eod);\ndef percentOfDayProjection = Round((DayVol_Projetion / AvgDayVol) * 100, 0);\nAddLabel(ShowBuyVolumePercent, \&quot;Day Buy %: \&quot; + BuyVolPercent_day, if BuyVolPercent_day &gt; SellVolPercent_day then Color.GREEN else Color.GRAY);\n\nAddLabel(ShowTodayVolumeProjection, \&quot;Est. Vol: \&quot; + Round(DayVol_Projetion, 0) , if DayVol_Projetion &gt; AvgDayVol * 1.5  then Color.GREEN else Color.GRAY);\n\nAddLabel(ShowTodayVolumeProjection,  percentOfDayProjection  + \&quot;%\&quot;, if DayVol_Projetion &gt; AvgDayVol * 1.5  then Color.GREEN else Color.GRAY);\n\ndef y = GetTime() / AggregationPeriod.MIN;\n#eod =2;\n#AddLabel(yes, \&quot;RTH duration (min): \&quot; + rth);\n#AddLabel(yes, \&quot;EOD duration (min): \&quot; + eod);\n#AddLabel(yes, \&quot;Market Not closed: \&quot; + y);\n\n#######&quot;,name=&quot;_3561862d_5455_4870_b26e_b0e3a91d177d&quot;}))},^(#%4.SubgraphId(&quot;Subgraph7&quot;),#%4.SubgraphStorableModel{height=274,storableIndicators{+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence:ScriptEssence0{body=&quot;declare lower;\n\ninput fastLength = 23;\ninput slowLength = 50;\ninput KPeriod = 10;\ninput DPeriod = 3;\ninput over_bought = 75;\ninput over_sold = 25;\ninput averageType = AverageType.EXPONENTIAL;\ndef price1= open;\ninput rsi_th=42;\ndef length1 =22;\n\ndef macdRsi =   reference MomentumSMA();\n# ((low - Highest(price1[1], length1)) / Highest(price1[1], length1)) * 100;\n#((price1 - Lowest(low[1], length1)) / (Highest(high[1], length1) - Lowest(low[1], length1)));\n#reference RSI(length = 14, price = close );\ndef fastK1rsi = FastKCustom(macdRsi, KPeriod);\ndef fastD1Rsi = MovingAverage(averageType, fastK1rsi, DPeriod);\ndef fastK2rsi = FastKCustom(fastD1Rsi, KPeriod);\n#plot RSIm = fastD1Rsi;#MovingAverage(averageType, fastK2rsi, DPeriod);\n\ninput priceSch =close;\n\ndef macd = MovingAverage(averageType, priceSch, fastLength) - MovingAverage(averageType, priceSch, slowLength);\ndef fastK1 = FastKCustom(macd, KPeriod);\ndef fastD1 = MovingAverage(averageType, fastK1, DPeriod);\ndef fastK2 = FastKCustom(fastD1, KPeriod);\nplot STC = MovingAverage(averageType, fastK2, DPeriod);\n\nplot OverBought = over_bought;\nplot OverSold = over_sold;\n\nSTC.SetDefaultColor(GetColor(8));\nOverBought.SetDefaultColor(GetColor(7));\nOverSold.SetDefaultColor(GetColor(7));\ndef cldH= if STC &gt; OverBought then STC else OverBought;\nAddCloud(cldH,OverBought, Color.Green, Color.Green);\n\ndef cldL= if STC &lt; OverSold then STC else OverSold;\nAddCloud(cldL,OverSold, Color.RED, Color.RED);\nSTC.setlineWeight(3);\nOverBought.setStyle(curve.short_dash);\noversold.setStyle(curve.short_dash);\n####$$$$$$$$\n\n\ninput priceSlm = close;\n\ninput superFastLength = 8;\n\ninput fastLengthSlm = 13;\n\ninput slowLengthSlm = 21;\n\ninput displace = 0;\n\n\ninput averageTypeSlm = AverageType.EXPONENTIAL;\n\ndef mov_avg8 = MovingAverage(averageTypeSlm, priceSlm[-displace], superFastLength);\n\ndef mov_avg13 = MovingAverage(averageTypeSlm, priceSlm[-displace], fastLengthSlm);\n\ndef mov_avg21 = MovingAverage(averageTypeSlm, priceSlm[-displace], slowLengthSlm);\n \n#moving averages\n\ndef Superfast = mov_avg8;\n\ndef Fast = mov_avg13;\n\ndef Slow = mov_avg21;\n\n\ndef buy = mov_avg8 &gt; mov_avg13 and mov_avg13 &gt; mov_avg21 and low &gt; mov_avg8;\n\ndef stopbuy = mov_avg8 &lt;= mov_avg13;\n\ndef buynow = !buy[1] and buy;\n\ndef buysignal = CompoundValue(1, if buynow and !stopbuy then 1 else if buysignal[1] == 1 and stopbuy then 0 else buysignal[1], 0);\n\n\ndef Buy_Signal = buysignal[1] == 0 and buysignal == 1;\n\ndef Momentum_Down = buysignal[1] == 1 and buysignal == 0;\n\n\ndef sell = mov_avg8 &lt; mov_avg13 and mov_avg13 &lt; mov_avg21 and high &lt; mov_avg8;\n\ndef stopsell = mov_avg8 &gt;= mov_avg13;\n\ndef sellnow = !sell[1] and sell;\n\ndef sellsignal = CompoundValue(1, if sellnow and !stopsell then 1 else if sellsignal[1] == 1 and stopsell then 0 else sellsignal[1], 0);\n\n\ndef Sell_Signal = sellsignal[1] == 0 and sellsignal;\n\ndef Momentum_Up = sellsignal[1] == 1 and sellsignal == 0;\n \n# when using this as a custom scan, change the word plot to def\n# then remove the \'#\' from in front of one of the \&quot;plot Scan\&quot; statements below\ndef Colorbars = if buysignal == 1 then 1 else if sellsignal == 1 then -1 else if buysignal == 0 or sellsignal == 0 then 0 else 0;\n\n# use this first Scan plot for SLM Ribbon Momentum UP\n#plot Scan = if Colorbars == 1 then yes else no;\n\n# use this second Scan plot for SLM Ribbon Momentum DOWN\n#plot Scan = if Colorbars == -1 then yes else no;\n\n\n\n\n\n\n###############\n\ndef Colorbars1 = if buysignal == 1 then 1 else if sellsignal == 1 then 2 else if buysignal == 0 or sellsignal == 0 then 3 else 0;\n\n\n\nSTC.definecolor(\&quot;Buy_Signal_Bars\&quot;, color.dark_green);\n\nSTC.definecolor(\&quot;Sell_Signal_Bars\&quot;, color.red);\n\nSTC.definecolor(\&quot;NeutralUp\&quot;, color.plum);\n\nSTC.definecolor(\&quot;NeutralDown\&quot;, color.orange);\n\nSTC.AssignValueColor(if Colorbars1 ==1 then STC.color(\&quot;buy_signal_bars\&quot;) else if colorbars1 ==2 then STC.color(\&quot;Sell_Signal_bars\&quot;) else if Momentum_Up then  STC.color(\&quot;neutralUp\&quot;) else STC.color(\&quot;neutralDown\&quot;) );\n\n\nplot UpSignal = if (buysignal and STC crosses above over_sold) then STC else Double.NaN;\nplot DownSignal = if (sellsignal and STC crosses below over_bought) then STC else Double.NaN;\ninput showBreakoutSignals =yes;\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\n\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\n\n\n\n\n\n\n\n\n\n\n######$$$$\n\n#########################RSI\n\n\ninput length = 14;\ninput over_BoughtRsi = 70;\ninput over_SoldRSI = 30;\ninput priceRsi = close;\ninput priceRsi2 = vwap;\n\n\n\ninput averageTypeRSI = AverageType.WILDERS;\ninput averageTypeRSI2 = AverageType.simple;\n#input showBreakoutSignals = no;\n\ninput showlable = yes;\n\ndef NetChgAvg = MovingAverage(averageTypeRSI, priceRsi - priceRsi[1], length);\ndef TotChgAvg = MovingAverage(averageTypeRSI, AbsValue(priceRsi - priceRsi[1]), length);\ndef ChgRatio = if TotChgAvg != 0 then NetChgAvg / TotChgAvg else 0;\n\nplot RSI = 50 * (ChgRatio + 1);\n\n\ndef NetChgAvg2 = MovingAverage(averageTypeRSI2, priceRsi2 - priceRsi2[1], length+5);\ndef TotChgAvg2 = MovingAverage(averageTypeRSI2, AbsValue(priceRsi2 - priceRsi2[1]), length+5);\ndef ChgRatio2= if TotChgAvg2 != 0 then NetChgAvg2 / TotChgAvg2 else 0;\n\nplot RSI2 = 50 * (ChgRatio2 + 1);\n\n\n\n\n\n\nplot OverSoldR = over_SoldRSI;\nplot OverBoughtR = over_BoughtRsi;\n#plot UpSignal = if RSI crosses above OverSold then OverSold else Double.NaN;\n#plot DownSignal = if RSI crosses below OverBought then OverBought else Double.NaN;\nplot MID = 50;\n\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\nRSI.DefineColor(\&quot;OverBought\&quot;, Color.LIGHT_RED);\nRSI.DefineColor(\&quot;Normal\&quot;, GetColor(7));\nRSI.DefineColor(\&quot;OverSold\&quot;, Color.LIGHT_GREEN);\nRSI.DefineColor(\&quot;Below50\&quot;, Color.CYAN);\nRSI.DefineColor(\&quot;Above50\&quot;, Color.PINK);\n\nRSI.AssignValueColor(if RSI &gt;= over_Bought then RSI.Color(\&quot;OverBought\&quot;) else if RSI &lt;= over_Sold then RSI.Color(\&quot;OverSold\&quot;) else if (RSI &gt; over_Sold and RSI &lt; rsi_th) then RSI.Color(\&quot;Below50\&quot;) else if (RSI &lt; over_Bought and RSI &gt;rsi_th) then RSI.Color(\&quot;Above50\&quot;) else  RSI.Color(\&quot;Normal\&quot;)) ;\nOverSoldR.SetDefaultColor(GetColor(8));\nOverBoughtR.SetDefaultColor(GetColor(8));\n#UpSignal.SetDefaultColor(Color.UPTICK);\n#UpSignal.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\n#DownSignal.SetDefaultColor(Color.DOWNTICK);\n#DownSignal.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\nOverSoldR.hide();\nOverBoughtR.hide();\nmid.hide();\n\nAddLabel(showlable, \&quot;RSI = \&quot; + RSI , if RSI &gt; over_Bought  then Color.RED else if RSI &lt; over_Sold then  Color.GREEN else Color.GRAY);\ndef cldRSIL= if RSI &lt; OverSoldR then RSI else OverSoldR;\nAddCloud(cldRSIL,OverSoldR,  Color.Green, Color.Green);\n\ndef cldRsiH= if RSI &gt; OverBought then RSI else OverBoughtR;\nAddCloud(cldRsiH,OverBoughtR,Color.RED, Color.RED);\n\n\n\ndef ImpVol = imp_volatility();\n\nAddLabel(showlable, \&quot;iV= \&quot; + ImpVol, Color.GRAY);\nMID.DefineColor(\&quot;Mid\&quot;, Color.GREEN);\n\n\n## momentum\n\ndef CloseOpenDiff = if close &gt; open then close - open else 0;\ndef OpenCloseDiff = if close &lt; open then open - close else 0;\ndef avgCloseOpen = Average(CloseOpenDiff, length);\ndef avgOpenClose = Average(OpenCloseDiff, length);\n\n#plot IMI = avgCloseOpen / (avgCloseOpen + avgOpenClose) * 100;\n#IMI.SetDefaultColor(GetColor(8));\n##############################\n\n\n\n#\n# TD Ameritrade IP Company, Inc. (c) 2018-2020\n#\n\n\n\ninput vfiLength = 130;\ninput averageLength = 100;\ninput trendQualityLength = 63;\ninput maxStiffness = 7;\ninput marketIndex = \&quot;SPY\&quot;;\ninput weightForMoneyFlow = 1.0;\ninput weightForTradingAboveAverage = 1.0;\ninput weightForUptrend = 1.0;\ninput weightForTrendQuality = 1.0;\ninput weightForMarketDirection = 2.0;\ninput showLabel = No;\n\ndef vfi = reference VolumeFlowIndicator(length = vfiLength, \&quot;max volume cut off\&quot; = 2.5);\ndef sma = Average(close, averageLength);\ndef ema = ExpAverage(close(marketIndex), averageLength);\ndef stiffness = Sum(close &lt; sma, trendQualityLength);\n\ndef Score;\ndef MoneyFlow = vfi &gt; 0;\ndef TradingAboveAverage = close &gt; sma;\ndef Uptrend = sma &gt; sma[4];\ndef TrendQuality = stiffness &lt;= maxStiffness;\ndef MarketDirection = ema &gt;= ema[2];\n\nScore = weightForMoneyFlow * MoneyFlow + weightForTradingAboveAverage * TradingAboveAverage + weightForUptrend * Uptrend + weightForTrendQuality * TrendQuality + weightForMarketDirection * MarketDirection;\n\n\nAddLabel(showLabel and MoneyFlow, \&quot;Money flow\&quot;, GetColor(2));\nAddLabel(showLabel and TradingAboveAverage, \&quot;Trading above average\&quot;, GetColor(3));\nAddLabel(showLabel and Uptrend, \&quot;Uptrend\&quot;, GetColor(4));\nAddLabel(showLabel and TrendQuality, \&quot;Trend quality\&quot;,GetColor(5));\nAddLabel(showLabel and TrendQuality, \&quot;Trend quality\&quot;,GetColor(5));\nAddLabel(showLabel and MarketDirection, \&quot;Market direction\&quot;,GetColor(6));\nAddLabel(showLabel , \&quot;Market score \&quot;+ score,GetColor(7));&quot;,name=&quot;_ef7ee43b_ddba_4881_809e_96703a28d1ce&quot;}){hidden=&lt;T,inputsMap:TreeMap4{^(&quot;priceRsi&quot;,&quot;CLOSE&quot;),^(&quot;priceRsi2&quot;,&quot;VWAP&quot;),^(&quot;priceSlm&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap4,plots{5:{hiding=&lt;T}}}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# @new\n# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2008-2021\n#\n\ndeclare lower;\n\ninput price = close;\ninput momentumLength = 28;\ninput smaLength = 28;\n\nassert(momentumLength &gt; 0, \&quot;\'momentum length\' must be positive: \&quot; + momentumLength);\n\nplot Momentum = price - price[momentumLength];\nplot Avg = Average(data = Momentum, length = smaLength);\nplot ZeroLine = 0;\n\nMomentum.SetDefaultColor(GetColor(1));\nAvg.SetDefaultColor(GetColor(5));\nZeroLine.SetDefaultColor(GetColor(0));&quot;,name=&quot;MomentumSMA&quot;}){hidden=&lt;T,inputsMap:TreeMap5{^(&quot;price&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap5,leftAxis=&lt;T,plots{0:{color=@CustomColor1},1:{color=@CustomColor0,lineStyle=3}}})}}),^(#%4.SubgraphId(&quot;Subgraph11&quot;),#%4.SubgraphStorableModel{height=165,storableIndicators.+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;declare lower;\ninput price = close;\n\ninput over_bought = 40.0;\ninput over_sold = -40.0;\ninput percentDLength = 3;\ninput percentKLength = 5;\n\ndef min_low = Lowest(low, percentKLength);\ndef max_high = Highest(high, percentKLength);\ndef rel_diff = price - (max_high + min_low) / 2;\ndef diff = max_high - min_low;\n\ndef avgrel = ExpAverage(ExpAverage(rel_diff, percentDLength), percentDLength);\ndef avgdiff = ExpAverage(ExpAverage(diff, percentDLength), percentDLength);\n\nplot SMI = if avgdiff != 0 then avgrel / (avgdiff / 2) * 100 else 0;\nSMI.SetDefaultColor(GetColor(1));\n\nplot AvgSMI = ExpAverage(SMI, percentDLength);\nAvgSMI.SetDefaultColor(color.cyan);\nplot z= 0;\nz.SetStyle(Curve.SHORT_DASH);\nz.SetDefaultColor(color.yellow);\n\nplot overbought = over_bought;\noverbought.SetDefaultColor(GetColor(5));\n\nplot oversold = over_sold;\noversold.SetDefaultColor(GetColor(5));\n\n\n#AddCloud(-100, over_sold, Color.RED, Color.GREEN);\n#AddCloud(over_bought, 100, Color.GREEN, Color.RED);\n\n#####\ndef cldH= if SMI &gt;= OverBought then SMI else OverBought;\nAddCloud(cldH,OverBought, Color.Green, Color.Green);\n\ndef cldL= if SMI &lt; OverSold then SMI else OverSold;\nAddCloud(cldL,OverSold, Color.RED, Color.RED);\nOverBought.SetDefaultColor(GetColor(7));\nOverSold.SetDefaultColor(GetColor(7));\nSMI.setLineWeight(1);\nAvgSMI.setLineWeight(3);\nOverBought.setStyle(curve.short_dash);\noversold.setStyle(curve.short_dash);\n\n####\n\n\n####$$$$$$$$\n\n\ninput priceSlm = close;\n\ninput superFastLength = 8;\n\ninput fastLengthSlm = 13;\n\ninput slowLengthSlm = 21;\n\ninput displaceSlm = 0;\n\n\ninput averageTypeSlm = AverageType.EXPONENTIAL;\n\ndef mov_avg8 = MovingAverage(averageTypeSlm, priceSlm[-displaceSlm], superFastLength);\n\ndef mov_avg13 = MovingAverage(averageTypeSlm, priceSlm[-displaceSlm], fastLengthSlm);\n\ndef mov_avg21 = MovingAverage(averageTypeSlm, priceSlm[-displaceSlm], slowLengthSlm);\n \n#moving averages\n\ndef Superfast = mov_avg8;\n\ndef Fast = mov_avg13;\n\ndef Slow = mov_avg21;\n\n\ndef buy = mov_avg8 &gt; mov_avg13 and mov_avg13 &gt; mov_avg21 and low &gt; mov_avg8;\n\ndef stopbuy = mov_avg8 &lt;= mov_avg13;\n\ndef buynow = !buy[1] and buy;\n\ndef buysignal = CompoundValue(1, if buynow and !stopbuy then 1 else if buysignal[1] == 1 and stopbuy then 0 else buysignal[1], 0);\n\n\ndef Buy_Signal = buysignal[1] == 0 and buysignal == 1;\n\ndef Momentum_Down = buysignal[1] == 1 and buysignal == 0;\n\n\ndef sell = mov_avg8 &lt; mov_avg13 and mov_avg13 &lt; mov_avg21 and high &lt; mov_avg8;\n\ndef stopsell = mov_avg8 &gt;= mov_avg13;\n\ndef sellnow = !sell[1] and sell;\n\ndef sellsignal = CompoundValue(1, if sellnow and !stopsell then 1 else if sellsignal[1] == 1 and stopsell then 0 else sellsignal[1], 0);\n\n\ndef Sell_Signal = sellsignal[1] == 0 and sellsignal;\n\ndef Momentum_Up = sellsignal[1] == 1 and sellsignal == 0;\n \n# when using this as a custom scan, change the word plot to def\n# then remove the \'#\' from in front of one of the \&quot;plot Scan\&quot; statements below\n########\n\ninput length = 20;\n\ndef HMA = MovingAverage(AverageType.HULL, price, length);\ndef HMA_Up=  HMA &gt; HMA[1];\ndef HMA_Down =! HMA_UP;\n\n###############\n\n#def Colorbars1 = if buysignal == 1 then 1 else if sellsignal == 1 then 2 else if buysignal == 0 or sellsignal == 0 then 3 else 0;\n\n\n\nAvgSMI.definecolor(\&quot;Buy\&quot;, color.dark_green);\n\n\nAvgSMI.definecolor(\&quot;Sell\&quot;, color.red);\n\nAvgSMI.DefineColor(\&quot;Neutral\&quot;, Color.PLUM);\n#RSI.DefineColor(\&quot;NeutralDown\&quot;, Color.orange);\nAvgSMI.definecolor(\&quot;HullMA_up\&quot;, color.blue);\n\nAvgSMI.definecolor(\&quot;HullMA_down\&quot;, color.orange);\n\nAvgSMI.AssignValueColor(if buysignal and HMA_Up then AvgSMI.color(\&quot;Buy\&quot;) else if buysignal and !HMA_Up then AvgSMI.color(\&quot;HullMA_down\&quot;) else if sellsignal and HMA_Down  then AvgSMI.color(\&quot;Sell\&quot;) else  if sellsignal and !HMA_Down  then AvgSMI.color(\&quot;HullMA_up\&quot;) else  AvgSMI.color(\&quot;neutral\&quot;));;#\n# if Momentum_Up then  RSI.color(\&quot;neutralUp\&quot;) else  RSI.color(\&quot;neutraldown\&quot;));\n\n\n\n\n####$$$$$$$$$$$$$$$$\n###############\n\n\n\nplot UpSignal = if (buysignal and SMI crosses above AvgSMI-3 and SMI &lt;40) then SMI-3 else Double.NaN;\nplot DownSignal = if (sellsignal and SMI crosses below AVGSMI+3 and SMI &gt;-40) then SMI+3 else Double.NaN;\ninput showBreakoutSignals =yes;\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\n\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\n\n\n\n\n\n######$$$$\n\n\n#RSI\ninput overBoughtRsi = 75;\ninput overSoldRsi = 25;\ninput rsiLength = 14;\ninput rsiPrice = close;\ninput rsi_th=42;\ndef rsi_val = reference RSI(length = rsiLength, price = rsiPrice );\nPlot rsi_val_normalized = rsi_val-50;\n####\n\n\n\nAddLabel(yes, \&quot;RSI = \&quot; + rsi_val , if rsi_val &gt; overBoughtRsi  then Color.RED else if rsi_val &lt; overSoldRsi then  Color.GREEN else Color.GRAY);\n##########\n#########################RSI\n\n\n\n\n\nrsi_val_normalized.DefineColor(\&quot;OverBought\&quot;, Color.LIGHT_RED);\nrsi_val_normalized.DefineColor(\&quot;Normal\&quot;, GetColor(7));\nrsi_val_normalized.DefineColor(\&quot;OverSold\&quot;, Color.LIGHT_GREEN);\nrsi_val_normalized.DefineColor(\&quot;Below50\&quot;, Color.CYAN);\nrsi_val_normalized.DefineColor(\&quot;Above50\&quot;, Color.PINK);\n\nrsi_val_normalized.AssignValueColor(if rsi_val &gt;= overBoughtRsi then rsi_val_normalized.Color(\&quot;OverBought\&quot;) else if rsi_val &lt;= overSoldRsi then rsi_val_normalized.Color(\&quot;OverSold\&quot;) else if (rsi_val &gt; overSoldRsi and rsi_val &lt; rsi_th) then rsi_val_normalized.Color(\&quot;Below50\&quot;) else if (rsi_val &lt; overBoughtRsi and RSI_val &gt;rsi_th) then rsi_val_normalized.Color(\&quot;Above50\&quot;) else  rsi_val_normalized.Color(\&quot;Normal\&quot;)) ;\n\n\n\n\n\n#########\ndef ImpVol = imp_volatility();\n\nAddLabel(yes, \&quot;iV= \&quot; + ImpVol, Color.GRAY);\n\n#trend reversal\ndef y = rsi_val ;\ninput riReversLength = 2;\ninput lookBack = 2;\n\n\ndef rsi_expAvg = ExpAverage(rsi_val, riReversLength);\n\n#trend reversal\ndef overBoughtReversal = if ((rsi_expAvg &gt; overBoughtRsi)within 2 bar) and  (rsi_expAvg crosses above rsi_val) then price else 0;# if (rsi_expAvg &gt; OverBought and  rsi_expAvg crosses above rsi_val  within 3 bar ) then 40 else 0;\ndef oversoldRevesal = if ((rsi_expAvg &lt; overSoldRsi)within 2 bar) and  (rsi_expAvg crosses below rsi_val within 2 bar) then price else 0;\n\n##############\n########!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n#vwap vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\n\n#####^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n#MACD\n\ninput fastLength = 12;\ninput slowLength = 26;\ninput MACDLength = 9;\ninput displace = 0;\ndef fastAvg = Sum(volume * price, fastLength) / Sum(volume, fastLength);\ndef slowAvg = Sum(volume * price, slowLength) / Sum(volume, slowLength);\ndef Value = fastAvg - slowAvg;\ndef Avg = ExpAverage(Value, MACDLength);\ndef MACD_Diff  = Value - Avg;\n#def ZeroLine = 0;\n\ninput def_cond = no;\ndef MACD_cond_logic = if (def_cond) then MACD_Diff &lt;= 0 else yes;\n\n\n#MACD Pivot reversal\n#input FilterLength=3;\n######################\n#def MACDV_Diff_expAvg = ExpAverage(MACD_Diff, FilterLength);\n#plot oversoldRevesalMACDV =if ((Diff_MACDV &lt; MacdZeroLine)within lookBack bar) and  ( Diff_MACDV crosses above   MACDV_Diff_expAvg within lookBack bar)and Diff_MACDV &gt; Diff_MACDV[1] then 1 else 0;# if (MACDV_Diff_expAvg &gt; OverBought and  MACDV_Diff_expAvg crosses above rsi_val  within 3 bar ) then 40 else 0;\n#plot overBoughtReversalMACDV = if ((Diff_MACDV &gt; MacdZeroLine)within lookBack bar) and  (MACDV_Diff_expAvg crosses above  Diff_MACDV  within lookBack bar)  and Diff_MACDV &lt; Diff_MACDV[1] and Diff_MACDV&gt;0 then 1 else 0;\n\n\n#trend Pivot reversal\ndef twoBarPivotMACD_Buy =  MACD_Diff &gt; MACD_Diff[1] and MACD_Diff[1] &gt; MACD_Diff[2] and MACD_Diff[2] &lt; MACD_Diff[3] and MACD_Diff[3] &lt; MACD_Diff [4];\ndef twoBarPivotMACD_Sell = MACD_Diff &lt; MACD_Diff[1] and MACD_Diff[1] &lt; MACD_Diff[2] and MACD_Diff[2] &gt; MACD_Diff[3] and MACD_Diff[3] &gt; MACD_Diff [4];\n###################\n\n\ndef uptrend = if price &gt; price[1] and price[1] &gt;= price[2] then 1 else 0;\n\n#####################################-----------------\n\n\n\ndef SMI_Buy_Signal = if  (AvgSMI crosses above overbought  within lookBack bar) and SMI &gt;  AvgSMI and (rsi_val &gt; overSoldRsi and rsi_val &lt; overBoughtRsi + 10 ) and (uptrend) then 1 else 0;\nplot buy2 = SMI_Buy_Signal;\n\n#def  buySvix_Signal = if ( MACD_cond_logic  and  EMA_condition and  oversoldRevesal  and buySvix &lt; Zeroline - 10 ) then 1 else 0;\n#plot buy3 = buySvix_Signal;\n\n\n\n\n\n\ndef SMI_Sell_Signal = if ( (SMI crosses below AvgSMI within lookBack bar) and (overBoughtReversal)) then 1 else 0;\n#def sellSignal2 = if ((rsi_val  &gt; overBoughtRsi within 3 bar) and (smi crosses below AvgSMI within 3 bar)) then 1 else 0;\n\n\nplot sell2 = SMI_Sell_Signal;\n\n#######\n\n#def FVE_buySignal = conVwapBuy and oversoldRevesal and pFVE_Bull  and MACD_cond_logic ;# and Diff &gt;= 0;\n#def sig_buy = pFVE_Bull and Diff &gt;= 0;\n#plot buy4 = FVE_buySignal ;\n\n\n#def FVE_sellSignal = overBoughtReversal and pFVE_Bear ;\n#plot sell4 = FVE_sellSignal;\nplot buy5 = twoBarPivotMACD_Buy and oversoldRevesal;\nplot sell5 = twoBarPivotMACD_Sell and overBoughtReversal;\n\n####\n#def buySignal2 = if (oversoldRevesal  and buythedip2 &lt; Zeroline ) then 1 else 0;\n\n#def buySignal3 = if ( oversoldRevesal  and buythedip3 &lt; Zeroline - 10 ) then 1 else 0;\n#plot buy3 = buySignal3;\ninput bubble = no;\nAddChartBubble(bubble and buy2 == 1, buy2, \&quot;B2SMI= \&quot; +  low[1] + \&quot; rsi \&quot; + rsi_val + \&quot; w \&quot; + vwap[1], Color.LIGHT_ORANGE, no);\n#AddChartBubble(buy3 == 1, buy3,  \&quot;B3Svix= \&quot; + price + \&quot; rsi \&quot; + rsi_val, Color.LIGHT_GRAY, no);\n#AddChartBubble(buy4 == 1, buy4,  \&quot;B4FVE= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.YELLOW, no);\nAddChartBubble(bubble and buy5 == 1, buy5,  \&quot;B5Macd= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.CYAN, no);\n\n#AddChartBubble(sell1 == 1, sell1, \&quot;S1STR= \&quot; + price + \&quot; rsi \&quot; + rsi_val, Color.LIGHT_RED, no);#Buy the Dip\n\nAddChartBubble(bubble and sell2 == 1, sell2, \&quot;S2SMI= \&quot; + price + \&quot; rsi \&quot; + rsi_val, Color.PINK, no);#Buy the Dip\n#AddChartBubble(sell4 == 1, sell4, \&quot;S4FVE= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.VIOLET, no);#Buy the Dip\nAddChartBubble(bubble and sell5 == 1, sell5, \&quot;S5Macd= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.BLUE, no);#Buy the Dip\n#AddChartBubble(oversoldRevesal , close, rsi_val, Color.blue, no);#Buy the Dip\n\ndef o = open;\ndef c = close;\ndef h = high;\ndef l = low;\n\nplot d1 = ((h - l) / o) * 100;\nplot d2 = ((h - l) / (c - o)) * 1;\nplot d = ((c - c[1]) / c[1]) * 100;\nd1.Hide();\nd2.Hide();\nd.Hide();\n\n\ninput vfiLength = 130;\ninput averageLength = 100;\ninput trendQualityLength = 63;\ninput maxStiffness = 7;\ninput marketIndex = \&quot;SPY\&quot;;\ninput weightForMoneyFlow = 1.0;\ninput weightForTradingAboveAverage = 1.0;\ninput weightForUptrend = 1.0;\ninput weightForTrendQuality = 1.0;\ninput weightForMarketDirection = 2.0;\ninput showLabel = No;\n\ndef vfi = reference VolumeFlowIndicator(length = vfiLength, \&quot;max volume cut off\&quot; = 2.5);\ndef sma = Average(close, averageLength);\ndef ema = ExpAverage(close(marketIndex), averageLength);\ndef stiffness = Sum(close &lt; sma, trendQualityLength);\n\ndef Score;\ndef MoneyFlow = vfi &gt; 0;\ndef TradingAboveAverage = close &gt; sma;\ndef Uptrend1 = sma &gt; sma[4];\ndef TrendQuality = stiffness &lt;= maxStiffness;\ndef MarketDirection = ema &gt;= ema[2];\n\nScore = weightForMoneyFlow * MoneyFlow + weightForTradingAboveAverage * TradingAboveAverage + weightForUptrend * Uptrend + weightForTrendQuality * TrendQuality + weightForMarketDirection * MarketDirection;\n\n\nAddLabel(showLabel and MoneyFlow, \&quot;Money flow\&quot;, GetColor(2));\nAddLabel(showLabel and TradingAboveAverage, \&quot;Trading above average\&quot;, GetColor(3));\nAddLabel(showLabel and Uptrend1, \&quot;Uptrend\&quot;, GetColor(4));\nAddLabel(showLabel and TrendQuality, \&quot;Trend quality\&quot;,GetColor(5));\nAddLabel(showLabel and TrendQuality, \&quot;Trend quality\&quot;,GetColor(5));\nAddLabel(showLabel and MarketDirection, \&quot;Market direction\&quot;,GetColor(6));\nAddLabel(showLabel , \&quot;Market score \&quot;+ score,GetColor(7));\n\n\n\n&quot;,name=&quot;_7662dae8_fa6f_4a07_aa35_2ec04cb46236&quot;}){hidden=&lt;T,inputsMap:TreeMap6{^(&quot;price&quot;,&quot;CLOSE&quot;),^(&quot;rsiPrice&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap6})}),^(#%4.SubgraphId(&quot;Subgraph13&quot;),#%4.SubgraphStorableModel{height=158,storableIndicators.+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;declare lower;\ndef timeFrame = getAggregationPeriod();\ninput aggregationPeriod1 =AggregationPeriod.Two_MIN;\ninput useAggegateForP1 =yes;\n#input aggregationPeriod2 =AggregationPeriod.Fifteen_MIN;\n\n\n# Variables:\ndef price =if (useAggegateForP1) then close(period = aggregationPeriod1) else close;\n\n\n\ninput fastLength = 23;\ninput slowLength = 50;\ninput KPeriod = 10;\ninput DPeriod = 3;\ninput over_bought = 75;\ninput over_sold = 25;\ninput averageType = AverageType.EXPONENTIAL;\n\ndef macd = MovingAverage(averageType, price, fastLength) - MovingAverage(averageType, price, slowLength);\ndef fastK1 = FastKCustom(macd, KPeriod);\ndef fastD1 = MovingAverage(averageType, fastK1, DPeriod);\ndef fastK2 = FastKCustom(fastD1, KPeriod);\nplot STC = MovingAverage(averageType, fastK2, DPeriod);\nplot OverBought = over_bought;\nplot OverSold = over_sold;\n\nSTC.SetDefaultColor(GetColor(8));\nOverBought.SetDefaultColor(GetColor(7));\nOverSold.SetDefaultColor(GetColor(7));\ndef cldH= if STC &gt; OverBought then STC else OverBought;\nAddCloud(cldH,OverBought, Color.Green, Color.Green);\n\ndef cldL= if STC &lt; OverSold then STC else OverSold;\nAddCloud(cldL,OverSold, Color.RED, Color.RED);\n\n\n#########################RSI\n\n\ninput length = 14;\ninput over_BoughtRsi = 70;\ninput over_SoldRSI = 30;\n#input price = close;\n\n\n\ninput averageTypeRSI = AverageType.WILDERS;\ninput showBreakoutSignals = no;\n\ninput showlable = yes;\n\ndef NetChgAvg = MovingAverage(averageTypeRSI, price - price[1], length);\ndef TotChgAvg = MovingAverage(averageTypeRSI, AbsValue(price - price[1]), length);\ndef ChgRatio = if TotChgAvg != 0 then NetChgAvg / TotChgAvg else 0;\n\nplot RSI = 50 * (ChgRatio + 1);\n\n\n\n\n\nplot OverSoldR = over_SoldRSI;\nplot OverBoughtR = over_BoughtRsi;\nplot UpSignal = if RSI crosses above OverSold then OverSold else Double.NaN;\nplot DownSignal = if RSI crosses below OverBought then OverBought else Double.NaN;\nplot MID = 50;\n\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\nRSI.DefineColor(\&quot;OverBought\&quot;, Color.LIGHT_RED);\nRSI.DefineColor(\&quot;Normal\&quot;, GetColor(7));\nRSI.DefineColor(\&quot;OverSold\&quot;, Color.LIGHT_GREEN);\nRSI.DefineColor(\&quot;Below50\&quot;, Color.CYAN);\nRSI.DefineColor(\&quot;Above50\&quot;, Color.PINK);\n\nRSI.AssignValueColor(if RSI &gt;= over_Bought then RSI.Color(\&quot;OverBought\&quot;) else if RSI &lt;= over_Sold then RSI.Color(\&quot;OverSold\&quot;) else if (RSI &gt; over_Sold and RSI &lt; 50) then RSI.Color(\&quot;Below50\&quot;) else if (RSI &lt; over_Bought and RSI &gt; 50) then RSI.Color(\&quot;Above50\&quot;) else  RSI.Color(\&quot;Normal\&quot;)) ;\nOverSoldR.SetDefaultColor(GetColor(8));\nOverBoughtR.SetDefaultColor(GetColor(8));\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\nOverSoldR.hide();\nOverBoughtR.hide();\nmid.hide();\n\n\nAddLabel(showlable, \&quot;RSI = \&quot; + RSI , if RSI &gt; over_Bought  then Color.RED else if RSI &lt; over_Sold then  Color.GREEN else Color.GRAY);\ndef cldRSIL= if RSI &lt; OverSoldR then RSI else OverSoldR;\nAddCloud(cldRSIL,OverSoldR,  Color.Green, Color.Green);\n\ndef cldRsiH= if RSI &gt; OverBought then RSI else OverBoughtR;\nAddCloud(cldRsiH,OverBoughtR,Color.RED, Color.RED);\n\n\n\ndef ImpVol = imp_volatility();\n\nAddLabel(showlable, \&quot;iV= \&quot; + ImpVol, Color.GRAY);\nMID.DefineColor(\&quot;Mid\&quot;, Color.GREEN);\n\ninput vfiLength = 130;\ninput averageLength = 100;\ninput trendQualityLength = 63;\ninput maxStiffness = 7;\ninput marketIndex = \&quot;SPY\&quot;;\ninput weightForMoneyFlow = 1.0;\ninput weightForTradingAboveAverage = 1.0;\ninput weightForUptrend = 1.0;\ninput weightForTrendQuality = 1.0;\ninput weightForMarketDirection = 2.0;\ninput showLabel = No;\n\ndef vfi = reference VolumeFlowIndicator(length = vfiLength, \&quot;max volume cut off\&quot; = 2.5);\ndef sma = Average(close, averageLength);\ndef ema = ExpAverage(close(marketIndex), averageLength);\ndef stiffness = Sum(close &lt; sma, trendQualityLength);\n\ndef Score;\ndef MoneyFlow = vfi &gt; 0;\ndef TradingAboveAverage = close &gt; sma;\ndef Uptrend = sma &gt; sma[4];\ndef TrendQuality = stiffness &lt;= maxStiffness;\ndef MarketDirection = ema &gt;= ema[2];\n\nScore = weightForMoneyFlow * MoneyFlow + weightForTradingAboveAverage * TradingAboveAverage + weightForUptrend * Uptrend + weightForTrendQuality * TrendQuality + weightForMarketDirection * MarketDirection;\n\n\nAddLabel(showLabel and MoneyFlow, \&quot;Money flow\&quot;, GetColor(2));\nAddLabel(showLabel and TradingAboveAverage, \&quot;Trading above average\&quot;, GetColor(3));\nAddLabel(showLabel and Uptrend, \&quot;Uptrend\&quot;, GetColor(4));\nAddLabel(showLabel and TrendQuality, \&quot;Trend quality\&quot;,GetColor(5));\nAddLabel(showLabel and TrendQuality, \&quot;Trend quality\&quot;,GetColor(5));\nAddLabel(showLabel and MarketDirection, \&quot;Market direction\&quot;,GetColor(6));\nAddLabel(showLabel , \&quot;Market score \&quot;+ score,GetColor(7));&quot;,name=&quot;_eda484cd_ddc6_4c0a_bbe5_c38bde0176d0&quot;}){hidden=&lt;T,inputsMap:TreeMap7{^(&quot;aggregationPeriod1&quot;,&quot;THREE_MIN&quot;)},inputsMap=@TreeMap7})}),^(#%4.SubgraphId(&quot;Subgraph18&quot;),#%4.SubgraphStorableModel{height=117,storableIndicators.+(!%5.CompiledStudy.resolveStudy(@ScriptEssence0){hidden=&lt;T,inputsMap:TreeMap8{^(&quot;DPeriod&quot;,@Integer3),^(&quot;fastLength&quot;,@Integer1),^(&quot;priceRsi&quot;,&quot;CLOSE&quot;),^(&quot;priceRsi2&quot;,&quot;VWAP&quot;),^(&quot;priceSlm&quot;,&quot;CLOSE&quot;),^(&quot;slowLength&quot;,@Integer0)},inputsMap=@TreeMap8})}),^(#%4.SubgraphId(&quot;Subgraph39&quot;),#%4.SubgraphStorableModel{height=80,storableIndicators.+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;#Follow @KRose_TDA on twitter for updates to this and other scripts\n#this script provides 2 moving averages of the study chosen\n#default study in OnBalanceVolume Volume\ndeclare lower;\n#place the study desired after reference in the line below you must include the brackets \&quot;()\&quot;\n#Initial study is OnBalanceVolume\n#plot MyStudy = reference OnBalanceVolume();\ninput price = hlc3;\ndef OBV = TotalSum(Sign(close - close[1]) * volume);\nplot data =OBV;\ndata.SetDefaultColor(GetColor(4));\ninput fast_length = 9;\n\ninput slow_length = 13;\n\ninput displace = 0;\ninput showDiffOBVtoSlow = No;\ninput showDiffOBVtoFast = Yes;\ninput showDiffFastToSlow = no;\n\n################\ninput averageType = AverageType.SIMPLE;\n\nplot mov_slow = MovingAverage(averageType, data[-displace], slow_length);\n\nplot mov_fast = MovingAverage(averageType, data[-displace], fast_length);\n\n\n\n###############################\nmov_fast.SetDefaultColor(Color.CYAN);\n\nmov_slow.SetDefaultColor(Color.LIGHT_RED);\nmov_slow.SetStyle(Curve.SHORT_DASH);\n\n\n\nplot Diff = if (showDiffOBVtoFast) then  data - mov_fast else if (showDiffOBVtoSlow) then data - mov_slow else  mov_fast - mov_slow;\n\n\n\n\n#Diff.SetHiding (!showDiffOBVtoFast);\n#Diff2.SetHiding (!showDiffOBVtoSlow);\n\nDiff.AssignValueColor(if Diff &gt;= 0 then Color.UPTICK else Color.DOWNTICK);\n\nDiff.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);\n\n\n\n#####signals\ndef buy = mov_Fast &gt; mov_slow and data&gt; data[1] ;\n\ndef stopbuy = mov_Fast &lt;= mov_slow;\n\ndef buynow = !buy[1] and buy;\n\ndef buysignal = CompoundValue(1, if buynow and !stopbuy then 1 else if buysignal[1]==1 and stopbuy then 0 else buysignal[1], 0);\n\n \n\nplot Buy_Signal = buysignal[1] == 0 and buysignal==1;\n\nBuy_signal.setpaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\n\nBuy_signal.setdefaultColor(color.dark_GREEN);\n\nBuy_signal.hidetitle();\n\n#Alert(condition = buysignal[1] == 0 and buysignal == 1, text = \&quot;Buy Signal\&quot;, sound = Sound.Bell, \&quot;alert type\&quot; = Alert.BAR);\n\n \n\nplot Momentum_Down = buysignal[1] ==1 and buysignal==0;\n\nMomentum_down.setpaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);\n\nMomentum_Down.setdefaultColor(color.plum);\n\nMomentum_down.hidetitle();\n\n#Alert(condition = buysignal[1] == 1 and buysignal == 0, text = \&quot;Momentum_Down\&quot;, sound = Sound.Bell, \&quot;alert type\&quot; = Alert.BAR);\n\n\n\n\n\ndef sell = mov_Fast &lt; mov_slow ;\n\ndef stopsell = mov_Fast &gt;= mov_slow;\n\ndef sellnow = !sell[1] and sell;\n\ndef sellsignal = CompoundValue(1, if sellnow and !stopsell then 1 else if sellsignal[1]==1 and stopsell then 0 else sellsignal[1], 0);\n\n \n\nPlot Sell_Signal = sellsignal[1] ==0 and sellsignal;\n\nSell_signal.setpaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_down);\n\nsell_signal.setDefaultColor(color.red);\n\nSell_signal.hidetitle();\n\n#Alert(condition = sellsignal[1] == 0 and sellsignal == 1, text = \&quot;Sell Signal\&quot;, sound = Sound.Bell, \&quot;alert type\&quot; = Alert.BAR);\n\n \n\nPlot Momentum_Up = sellsignal[1]==1 and sellSignal==0;\n\nMomentum_up.setpaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_up);\n\nMomentum_up.setDefaultColor(color.plum);\n\nMomentum_up.hidetitle();\n\n&quot;,name=&quot;_9513fc47_bb6f_4bfd_9d32_22c72ed76059&quot;}){inputsMap:TreeMap9{^(&quot;fast_length&quot;,6),^(&quot;price&quot;,!%7.FundamentalType.valueOf(*%7.FundamentalType.class,&quot;HL2&quot;)),^(&quot;showDiffFastToSlow&quot;,&lt;T),^(&quot;slow_length&quot;,@Integer2)},inputsMap=@TreeMap9,plots{0:{hiding=&lt;T},1:{hiding=&lt;T},2:{hiding=&lt;T}}})}),^(#%4.SubgraphId(&quot;Subgraph51&quot;),#%4.SubgraphStorableModel{height=80,storableIndicators.+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# OBV/OBV_MA  by MerryDay 5/24/20\n#When the OBV (On Balance Volume) crosses OBV’s 20-period moving average, the divergence signal of a trend reversal is confirmed. While research indicates a default of 20 is norm, I have been using a 34 period.  The difference is slight.\n# If the OBV is greater than the OBV ma then a green cloud appears under the OBV.\n\ndeclare lower;\ninput length = 20; #default = 20\n\nplot OBV = TotalSum(Sign(close - close[1]) * volume);\nplot OBVma = Average(OBV, length);\n\ndef aboveMA   = OBV &gt;= OBVma ;\n\n\n## LIPSTICK ##\nDefineGlobalColor(\&quot;LabelGreen\&quot;, CreateColor(0, 190, 0)) ;\nDefineGlobalColor(\&quot;PaleGreen\&quot;, CreateColor(180, 220, 180)) ;\nDefineGlobalColor(\&quot;PaleRed\&quot;, CreateColor (220, 200, 200)) ;\nDefineGlobalColor(\&quot;DullGold\&quot;, CreateColor(220, 220, 128)) ;\nDefineGlobalColor(\&quot;BlueJeans\&quot;, CreateColor(0, 150, 200)) ;\nOBVma.SetDefaultColor(GlobalColor(\&quot;DullGold\&quot;));\nOBVma.SetLineWeight(3);\nOBVma.HideBubble();\nOBVma.HideTitle();\n\nOBV.SetPaintingStrategy(PaintingStrategy.LINE_VS_TRIANGLES);\nOBV.SetLineWeight(2);\nOBV.HideBubble();\nOBV.HideTitle();\nOBV.DefineColor(\&quot;Up\&quot;, GlobalColor(\&quot;LabelGreen\&quot;));\nOBV.DefineColor(\&quot;Weak\&quot;, Color.LIGHT_GRAY);\nOBV.DefineColor(\&quot;Down\&quot;, GlobalColor(\&quot;PaleRed\&quot;));\nOBV.AssignValueColor(if OBV &gt; OBVma  then OBV.Color(\&quot;Up\&quot;) else OBV.Color(\&quot;Down\&quot;));\n\nplot OBVlow = if  OBV crosses below OBVma then 1 else 0;\nOBVlow.hide();\n\nplot crossup = if OBV crosses above OBVma then OBV else double.NaN;\ncrossup.HideBubble() ;\ncrossup.HideTitle() ;\ncrossup.SetPaintingStrategy(PaintingStrategy.TRIANGLES);\ncrossup.SetLineWeight(5);\ncrossup.SetDefaultColor(color.blue) ;\nplot crossdown = if OBV crosses below OBVma then OBV else double.NaN;\ncrossdown.HideBubble() ;\ncrossdown.HideTitle() ;\ncrossdown.SetPaintingStrategy(PaintingStrategy.TRIANGLES);\ncrossdown.SetLineWeight(5);\ncrossdown.SetDefaultColor(color.pink) ;\n\nAddCloud(OBV, OBVma, Color.LIGHT_GREEN, Color.PINK);\n\n#Alert(crosses_above_MA, \&quot;What\'s going to happen?\&quot; + GetSymbol(), Alert.BAR, Sound.bell);\nDefineGlobalColor(\&quot;MyCyan\&quot;, CreateColor(150, 0, 255)) ;\nDefineGlobalColor(\&quot;Sell\&quot;, CreateColor(255, 150, 0)) ;\n\n\n# End of OBV/OBV_MA &quot;,name=&quot;_5a6a53b8_41ce_3ef6_a10e_07a88a720b77&quot;}))}),^(#%4.SubgraphId(&quot;Subgraph53&quot;),#%4.SubgraphStorableModel{height=283,storableIndicators.+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# FiniteVolumeElements_FVE\n#\n# Author: Kory Gill, [USER=212]@korygill[/USER]\n#\n# Created from idea on https://usethinkscript.com/threads/finite-volume-elements.593/\n# Original idea is from http://mkatsanos.com/FVE.html\n#\n# VERSION HISTORY (sortable date and time (your local time is fine), and your initials\n# 20190907-1200-KG    - Created.\n\n###############################################################################\n### NORMALIZATION (Volume Damping adaptation) by Ramon Del Villar AKA PElonsax\n### 7/20/2020 #################################################################\n###############################################################################\n# The damping logic is taken directly from VFI #\n\n#declare once_per_bar;\ndeclare lower;\ninput AGG = aggregationPeriod.FIVE_MIN;\ninput CutOffAG = 0.003;\ninput Samples_Used = 22;\ndef samplesAG = Samples_Used * (AGG/60000);\n\n\n#\n# inputs\n#\ninput Samples = 22;\n\n#\n# logic\n#\ndef bn = BarNumber();\ndef nan = double.NaN;\n\n\ninput maxVolumeCutOff = 2.5;\n###Coefficient used in calculation of “Cut Off” value. Lower values mean stronger damping of volume spikes###\n\nAssert(maxVolumeCutOff &gt; 0, \&quot;\'max volume cut off\' must be positive: \&quot; + maxVolumeCutOff);\n\n####\ndef timeFrame = getAggregationPeriod();\ndef testTimeFrames = if timeFrame &lt; AGG  then yes else no;\n\nAddLabel(yes, if testTimeFrames  then \&quot;Time Frames Are Correct\&quot; else \&quot;Time Frames Are Wrong\&quot;, if testTimeFrames  then color.GREEN else color.RED);\n\n\n\ndef cutOff = 0.2 * StDev(Log(hlc3(period = AGG)) - Log(hlc3(period = AGG)[1]), 30) * close(period = AGG);\ndef hlcChange = hlc3(period = AGG) - hlc3(period = AGG)[1];\ndef avgVolume = Average(volume(period = AGG), 30)[1];\ndef minVolume = Min(volume(period = AGG), avgVolume * maxVolumeCutOff);\ndef dirVolume = if hlcChange &gt; cutOff\n    then minVolume\n    else if hlcChange &lt; -cutOff\n        then -minVolume\n        else 0;\n\n\ndef mf = (close(period = AGG) - (high(period = AGG)+low(period = AGG))/2) + hlc3(period = AGG) - hlc3(period = AGG) [1];\ndef fveSum = Sum(dirVolume, samplesAG);\n\ndef fve = if bn &gt; samplesAG\n          then (fveSum / (Average(avgVolume, samplesAG) * samplesAG)) * 100\n          else nan;\n\n\n#\n# plots\n#\nplot pFVE = fve;\n\nplot pFVE_MA = MovingAverage(AverageType.SIMPLE, fve, 30);\npFVE_MA.SetDefaultColor(Color.Gray);\nPFVE_MA.SetPaintingStrategy(PaintingStrategy.DASHES);\n\nplot zeroLine = 0;\nzeroLine.SetDefaultColor(Color.White);\npFVE.AssignValueColor(if pFVE &gt; pFVE_MA then color.green else color.red) ;\npFVE.SetLineWeight(3);\n\nplot pFVE_Bull = if pFVE crosses above pFVE_MA then pFVE else double.NaN ;\npFVE_Bull.SetPaintingStrategy(PaintingStrategy.SQUARES);\npFVE_Bull.SetLineWeight(5);\npFVE_Bull.SetDefaultColor(color.dark_green) ;\n\nplot pFVE_Bear = if pFVE &gt; pFVE_MA and pFVE[1] &gt; pFVE then pFVE else double.NaN ;\npFVE_Bear.SetPaintingStrategy(PaintingStrategy.SQUARES);\npFVE_Bear.SetLineWeight(5);\npFVE_Bear.SetDefaultColor(color.white) ;\n\nAddCloud(pFVE, pFVE_MA, color.light_green, color.pink);\n\n#MTF################\n&quot;,name=&quot;_35c55107_b06b_4f2d_9692_9d04d4d233d0&quot;}){hidden=&lt;T})}),^(#%4.SubgraphId(&quot;Subgraph55&quot;),#%4.SubgraphStorableModel{height=80,storableIndicators.+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;declare lower;\ndeclare zerobase;\n\ninput length = 14;\ninput numDev = 2.0;\ninput numDev2 = 3.0;\ninput allowNegativeValues = no;\ninput price =close;\n\ndef rawRelPrice = (price - Average(price, length)) / StDev(price, length);\nplot Relprice = if allowNegativeValues then rawRelPrice else Max(0, rawRelPrice);\nplot StDevLevel = numDev;\nplot StDevLevel2 = numDev2;\n\nRelprice.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);\nRelprice.SetLineWeight(3);\nRelprice.DefineColor(\&quot;Above2\&quot;, GetColor(0));\nRelprice.DefineColor(\&quot;Above3\&quot;, GetColor(1));\nRelprice.DefineColor(\&quot;Below\&quot;, GetColor(2));\nRelprice.AssignValueColor(if  Relprice &gt;= numDev2 then Relprice.Color(\&quot;Above3\&quot;) else if Relprice &gt;= numDev then Relprice.Color(\&quot;Above2\&quot;) else Relprice.Color(\&quot;Below\&quot;));\nStDevLevel.SetDefaultColor(GetColor(7));\nStDevLevel.SetStyle(Curve.SHORT_DASH);\nStDevLevel2.SetDefaultColor(GetColor(7));\nStDevLevel2.SetStyle(Curve.SHORT_DASH);&quot;,name=&quot;_d695cb43_1a60_4ba9_8b95_07a832b1793f&quot;}))}),^(#%4.SubgraphId(&quot;Subgraph65&quot;),#%4.SubgraphStorableModel{height=80,storableIndicators.+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2008-2021\n#\n\ndeclare lower;\n\ninput stDevLength = 10;\ninput averageLength = 14;\ninput averageType = AverageType.EXPONENTIAL;\n\ndef stDevHi = stDev(high, stDevLength);\ndef stDevLo = stDev(low, stDevLength);\n\ndef avgStDevHiUp = MovingAverage(averageType, if high &gt; high[1] then stDevHi else 0, averageLength);\ndef avgStDevHiDown = MovingAverage(averageType, if high &lt; high[1] then stDevHi else 0, averageLength);\n\ndef avgStDevLoUp = MovingAverage(averageType, if low &gt; low[1] then stDevLo else 0, averageLength);\ndef avgStDevLoDown = MovingAverage(averageType, if low &lt; low[1] then stDevLo else 0, averageLength);\n\ndef rviHi = if avgStDevHiUp + avgStDevHiDown == 0 then 50 else 100 * avgStDevHiUp / (avgStDevHiUp + avgStDevHiDown);\ndef rviLo = if avgStDevLoUp + avgStDevLoDown == 0 then 50 else 100 * avgStDevLoUp / (avgStDevLoUp + avgStDevLoDown);\n\nplot RVI = (rviHi + rviLo) / 2;\nplot OverBought = 70;\nplot OverSold = 30;\n\nRVI.setDefaultColor(GetColor(1));\nOverBought.setDefaultColor(GetColor(5));\nOverSold.setDefaultColor(GetColor(5));&quot;,name=&quot;RelativeVolatilityIndex&quot;}))}),^(#%4.SubgraphId(&quot;Subgraph67&quot;),#%4.SubgraphStorableModel{height=80,storableIndicators.+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2007-2021\n#\n\ndeclare lower;\n\ninput length = 20;\ninput momentum = 5;\n\nassert(momentum &gt; 0, \&quot;\'momentum\' must be positive: \&quot; + momentum);\n\ndef emaInc = ExpAverage(Max(close - close[momentum], 0), length);\ndef emaDec = ExpAverage(Max(close[momentum] - close, 0), length);\nplot RMI = if emaDec == 0 then 0 else 100 - 100 / (1 + emaInc / emaDec);\nplot OverBought = 70;\nplot OverSold = 30;\n\nRMI.SetDefaultColor(GetColor(1));\nOverBought.SetDefaultColor(GetColor(8));\nOverSold.SetDefaultColor(GetColor(8));&quot;,name=&quot;RelativeMomentumIndex&quot;}){inputsMap:TreeMap10{^(&quot;momentum&quot;,@Integer4)},inputsMap=@TreeMap10})})}}" SYMBOL="AAL" SYMBOL_GROUP="2" VERTICAL="false" VISIBLE="true" WEIGHT="3.0"/>
            <DASHBOARD SYMBOL="AAPL" SYMBOL_GROUP="2" VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <LEVEL_II SYMBOL="AAPL" SYMBOL_GROUP="2" VERTICAL="false" VISIBLE="false" WEIGHT="1.0">
              <SORTING COLUMN="BID" ORDER="-1"/>
              <SORTING1 COLUMN="ASK" ORDER="1"/>
            </LEVEL_II>
            <LIVE_NEWS VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <PHASE_SCORES VERTICAL="false" VISIBLE="false" WEIGHT="2.0"/>
            <TIME_SALES VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <TRADE CONFIGURATION_NAME="SINGLE" ORDER_RULES_SET="STOCK" ORDER_TYPE="LIMIT" OS_AUTO="false" OS_EXPANDED="false" OS_TIF="DAY" QTY="100.0" QTY_STEP="1.0" TEMPLATE="SINGLE" TRADE_BUTTONS="BUY_MKT;SELL_MKT;MULTI_CANCEL;REVERSE;FLAT;SECOND_LINE;QUANTITY;AUTO_SEND;ORDER_SETUP" VISIBLE="false">
              <OCO_STOP>
                <TRG_0 TRG_ENBL="true" TRG_LINK="ASK_BID" TRG_OFFSET_MODE="TICK" TRG_OT="STOP" TRG_SETUP="10.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AAL="10.0" AAPL="10.0" AMD="10.0" AMZN="10.0" CCL="10.0" CLDR="10.0" CSCO="10.0" HTZ="10.0" LUV="10.0" SAVA="10.0" SNAP="10.0" VJET="10.0" ZM="10.0"/>
                </TRG_0>
              </OCO_STOP>
              <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="1.0" TRG_TIF="DAY">
                <OFFSET_PER_SYMBOL AAL="1.0" AAPL="1.0" AMD="1.0" AMZN="1.0" CCL="1.0" CLDR="1.0" CSCO="1.0" HTZ="1.0" LUV="1.0" SAVA="1.0" SNAP="1.0" VJET="1.0" ZM="1.0"/>
              </TRG_0>
              <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-1.0" TRG_TIF="DAY">
                <OFFSET_PER_SYMBOL AAL="-1.0" AAPL="-1.0" AMD="-1.0" AMZN="-1.0" CCL="-1.0" CLDR="-1.0" CSCO="-1.0" HTZ="-1.0" LUV="-1.0" SAVA="-1.0" SNAP="-1.0" VJET="-1.0" ZM="-1.0"/>
              </TRG_1>
              <_2>
                <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="2.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AAL="2.0" AAPL="2.0" AMD="2.0" AMZN="2.0" CCL="2.0" CLDR="2.0" CSCO="2.0" HTZ="2.0" LUV="2.0" SAVA="2.0" SNAP="2.0" VJET="2.0" ZM="2.0"/>
                </TRG_0>
                <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-2.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AAL="-2.0" AAPL="-2.0" AMD="-2.0" AMZN="-2.0" CCL="-2.0" CLDR="-2.0" CSCO="-2.0" HTZ="-2.0" LUV="-2.0" SAVA="-2.0" SNAP="-2.0" VJET="-2.0" ZM="-2.0"/>
                </TRG_1>
              </_2>
              <_3>
                <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="3.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AAL="3.0" AAPL="3.0" AMD="3.0" AMZN="3.0" CCL="3.0" CLDR="3.0" CSCO="3.0" HTZ="3.0" LUV="3.0" SAVA="3.0" SNAP="3.0" VJET="3.0" ZM="3.0"/>
                </TRG_0>
                <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-3.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AAL="-3.0" AAPL="-3.0" AMD="-3.0" AMZN="-3.0" CCL="-3.0" CLDR="-3.0" CSCO="-3.0" HTZ="-3.0" LUV="-3.0" SAVA="-3.0" SNAP="-3.0" VJET="-3.0" ZM="-3.0"/>
                </TRG_1>
              </_3>
            </TRADE>
          </CELL1>
          <GROUPING_POS_STMT_SIZE_MODEL COMMON_COLUMN_RATIOS="0.3333333333333333;0.3333333333333333;0.3333333333333333" SECTION_RATIOS="0.15151515151515152;0.5252525252525253;0.32323232323232326">
            <MIDDLE_COLUMN_RATIOS>
              <ACCEPTOR_F17C396C36A6BB4F1C424CE6F38A2F09D711E4EE9875EFCFCD829E447C25E2B3 RATIOS="0.15730337078651685;0.16853932584269662;0.2247191011235955;0.2247191011235955;0.2247191011235955"/>
            </MIDDLE_COLUMN_RATIOS>
          </GROUPING_POS_STMT_SIZE_MODEL>
          <MODELNODE0 COUNT="2" ROWLAYOUT="true" TYPE="SPLIT" WEIGHT="0.0">
            <MODELNODE0 COMPOSITENAME="CELL0" NAME="0" TYPE="LEAF" WEIGHT="0.5"/>
            <MODELNODE1 COMPOSITENAME="CELL1" NAME="1" TYPE="LEAF" WEIGHT="0.5"/>
          </MODELNODE0>
          <POSITION1 EXPANDED="true"/>
          <POSITION_TABLE POSITION_TABLE="QTY,DAYS,TRADE_PRICE,MARK_PRICE,MARK_CHANGE"/>
        </FOREX_TRADER>
        <FRED FRED_CATALOGUE="{&quot;selectedLevel&quot;:&quot;first_level&quot;,&quot;columns&quot;:[]}" FRED_CHART="{&quot;subscriptionKey&quot;:{&quot;instrument&quot;:{&quot;symbol&quot;:&quot;&quot;,&quot;description&quot;:&quot;&quot;,&quot;frequencyType&quot;:&quot;DAILY&quot;,&quot;parentCategoryIds&quot;:[],&quot;fredUnits&quot;:&quot;&quot;,&quot;fredUnitsShort&quot;:&quot;&quot;,&quot;observationStartDate&quot;:0,&quot;observationEndDate&quot;:0,&quot;popularity&quot;:0,&quot;seasonalAdjustmentType&quot;:&quot;NOT_APPLICABLE&quot;},&quot;transformationParameters&quot;:{&quot;frequency&quot;:&quot;DEFAULT&quot;,&quot;aggregation&quot;:&quot;AVERAGE&quot;,&quot;unit&quot;:&quot;DEFAULT&quot;,&quot;indexDate&quot;:0},&quot;timeRange&quot;:{}},&quot;paintingSettings&quot;:{&quot;chartType&quot;:&quot;LINE&quot;,&quot;plotColor&quot;:{&quot;palette&quot;:&quot;fred&quot;,&quot;index&quot;:1},&quot;backgroundColor&quot;:{&quot;palette&quot;:&quot;fred&quot;,&quot;index&quot;:0},&quot;showGrid&quot;:true,&quot;shadeRecession&quot;:true,&quot;gridColor&quot;:{&quot;palette&quot;:&quot;fred&quot;,&quot;index&quot;:2},&quot;crossType&quot;:&quot;FULL_CROSS&quot;,&quot;crossColor&quot;:{&quot;palette&quot;:&quot;fred&quot;,&quot;index&quot;:3}}}" FRED_STATE="CATEGORIES" ORDER_ENTRY_EXPANDED="false" SYMBOL_GROUP="-1"/>
        <FUNDAMENTALS ORDER_ENTRY_EXPANDED="false" SYMBOL_GROUP="2">
          <DEFAULT/>
          <ETF>
            <BY_THE_NUMBERS ANNUAL_MODE="ANNUAL" EXPANDED="true" INDEX="2" SWITCHED_ON="true"/>
            <COMPANY_DETAILS EXPANDED="true" INDEX="3" SWITCHED_ON="true"/>
            <COMPANY_PROFILE EXPANDED="true" INDEX="1" SWITCHED_ON="true"/>
            <ETFHOLDINGSTABLE COLUMNS_CONFIG="Seahorse SYMBOL_AND_DESCRIPTION::F:F,Seahorse WEIGHTING::F:F,Seahorse SHARES::F:F,Seahorse AVG_COST::F:F,Seahorse VENDOR_PRICE::F:F,Seahorse PL_OPEN::F:F,Seahorse NET_LIQ::F:F,Seahorse LOCATION::F:F,Seahorse INVESTMENT::F:F,Seahorse ASSET_GROUP::F:F"/>
            <FUND_WEIGHTING EXPANDED="true" INDEX="0" SWITCHED_ON="true"/>
            <OVERVIEW EXPANDED="true" INDEX="0"/>
            <WHAT_DRIVES_THE_STOCK EXPANDED="true" INDEX="4" SWITCHED_ON="true">
              <SANKEY_CHART SANKEY_CHART_NODE=""/>
              <TREFISUSERMODIFICATIONS TREFISVALUEFORMATTER="SANKEY_PERCENT_VALUE_FORMATTER"/>
            </WHAT_DRIVES_THE_STOCK>
          </ETF>
          <FUTURES>
            <CONTRACT_PROFILE EXPANDED="true" INDEX="0" SWITCHED_ON="true"/>
            <OVERVIEW EXPANDED="true" INDEX="0"/>
            <SORTING/>
          </FUTURES>
          <STOCK>
            <BY_THE_NUMBERS ANNUAL_MODE="QUARTERLY" EXPANDED="true" INDEX="1" SWITCHED_ON="true"/>
            <COMPANY_DETAILS EXPANDED="true" INDEX="2" SWITCHED_ON="true"/>
            <COMPANY_PROFILE EXPANDED="true" INDEX="0" SWITCHED_ON="true"/>
            <OVERVIEW EXPANDED="true" INDEX="0"/>
            <TREFIS_DRIVERS_PANEL/>
            <WHAT_DRIVES_THE_STOCK EXPANDED="true" INDEX="3" SWITCHED_ON="true">
              <SANKEY_CHART SANKEY_CHART_NODE="idAMD.1360,"/>
              <TREFISUSERMODIFICATIONS AAL="{&quot;modifiedDrivers&quot;:{},&quot;values&quot;:{}}" AAPL="{&quot;modifiedDrivers&quot;:{},&quot;values&quot;:{}}" AMD="{&quot;modifiedDrivers&quot;:{},&quot;values&quot;:{}}" CSCO="{&quot;modifiedDrivers&quot;:{},&quot;values&quot;:{}}" INTC="{&quot;modifiedDrivers&quot;:{},&quot;values&quot;:{}}" LUV="{&quot;modifiedDrivers&quot;:{},&quot;values&quot;:{}}" MSFT="{&quot;modifiedDrivers&quot;:{},&quot;values&quot;:{}}" MU="{&quot;modifiedDrivers&quot;:{},&quot;values&quot;:{}}" NVDA="{&quot;modifiedDrivers&quot;:{},&quot;values&quot;:{}}" QSR="{&quot;modifiedDrivers&quot;:{},&quot;values&quot;:{}}" SIRI="{&quot;modifiedDrivers&quot;:{},&quot;values&quot;:{}}" T="{&quot;modifiedDrivers&quot;:{},&quot;values&quot;:{}}" TREFISVALUEFORMATTER="SANKEY_ABSOLUTE_VALUE_FORMATTER" TSLA="{&quot;modifiedDrivers&quot;:{},&quot;values&quot;:{}}"/>
            </WHAT_DRIVES_THE_STOCK>
          </STOCK>
        </FUNDAMENTALS>
        <FUTURES_TRADER COLUMN_COUNT="2" CURRENT_GRID_NAME="don3" DEFAULT_TYPE="DASHBOARD" ORDER_ENTRY_EXPANDED="false" ROW_COUNT="2">
          <CELL0 ROWSPANELWEIGHT="1.0" ROWWEIGHT0="1.0" ROWWEIGHT1="1.0" SELECTED_TYPE="CHART" SIDEBAR_IS_ACTIVE="true" SYMBOL="ZM" SYMBOL_GROUP="1" TRADE_BUTTONS_MIGRATED="true">
            <ACTIVETRADER VERTICAL="false" VISIBLE="false" WEIGHT="2.0"/>
            <BIG_BUTTONS VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <CHART COLUMN_COUNT="1" CONFIGURATION="@v9@%0:com.devexperts.toschart.model,1:com.devexperts.tos.chartdata,2:com.devexperts.tos.thinkscript.data,3:java.awt,4:com.devexperts.toschart.control.subgraph,5:com.devexperts.toschart.elstudies,6:com.devexperts.toschart.script%owner{chartAggregationPeriods:ChartAggregationPeriodArray0{15::ChartAggregationPeriod0},chartAggregationPeriods=@ChartAggregationPeriodArray0}#com.devexperts.toschart.core.ChartModel{disabledMessageTypes.+(!%0.BuiltinExplanationMessage$MessageType.findByCode(1)),encodedMixinsState=&quot;{\&quot;common\&quot;:{\&quot;DRAWING_SETS\&quot;:\&quot;{}\&quot;},\&quot;state_props\&quot;:{\&quot;state_type\&quot;:\&quot;REGULAR\&quot;},\&quot;monkey_bars_exp\&quot;:{\&quot;LikefolioMixin\&quot;:\&quot;{\\\&quot;paintingSettings\\\&quot;:{\\\&quot;neutralSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;positiveSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;negativeSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;sentimentSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true}},\\\&quot;shownDivisions\\\&quot;:[],\\\&quot;allDivisions\\\&quot;:[]}\&quot;},\&quot;monkey_bars\&quot;:{},\&quot;seasonality\&quot;:{},\&quot;regular\&quot;:{\&quot;DescriberMixin\&quot;:\&quot;{\\\&quot;visibility\\\&quot;:\\\&quot;HIDE_PANEL\\\&quot;,\\\&quot;studiesMode\\\&quot;:\\\&quot;HIDE_STUDIES\\\&quot;}\&quot;,\&quot;LikefolioMixin\&quot;:\&quot;{\\\&quot;paintingSettings\\\&quot;:{\\\&quot;neutralSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;positiveSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;negativeSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;sentimentSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true}},\\\&quot;shownDivisions\\\&quot;:[],\\\&quot;allDivisions\\\&quot;:[]}\&quot;}}&quot;,encodedPatternsModel=&quot;{\&quot;showPatterns\&quot;:true,\&quot;models\&quot;:[]}&quot;,groupId=&quot;default&quot;,styleSettings{activeTool=2,chartAggregationSettings.timeAggregationSettings=!%0.TimeFrameAggregationSettings.createTickOrTimeAggregation(!%1.ChartRange.findByCode(&quot;DAY10&quot;),@ChartAggregationPeriod0),commonStyleSettings{colorSettings{backgroundColor=#%2.CustomColor(#%3.Color(0,0,0,255)),monkeyProfileTypeColors.defaultRowHeight=&lt;F,mpExpandedTypeColors.defaultRowHeight=&lt;F,volumeColor=#%2.CustomColor(#%3.Color(0,0,0,255))},expansion.right=10,fitOrdersToScreen=&lt;T,keepPriceZoom=&lt;T,leftAxisRegulator{maxValue=805926.78632479d,minValue=-33029.78632479d},manualAxisRegulator{maxValue=514.966875d,minValue=346.441875d},myToolsPanelPined=&lt;T,previousRightExpansion=115,shortCuts{^(&quot;Time Zone&quot;,&lt;F),^(&quot;Show Expiration Friday &quot;,&lt;F),^(&quot;Keep Price Zoom&quot;,&lt;F),^(&quot;enableLeftAxis&quot;,&lt;F),!get:Boolean0(&quot;Chart mode&quot;),^(&quot;Fit expected price ranges&quot;,@Boolean0),^(&quot;emphasizeDigitMPExpanded&quot;,&lt;F),^(&quot;showWicksCandleTrend&quot;,&lt;F),^(&quot;highlightEarnings&quot;,&lt;F),^(&quot;synchronizeCrosshair&quot;,&lt;F),^(&quot;myToolsMode&quot;,&lt;F),^(&quot;seasonalityStyle&quot;,&lt;F),^(&quot;Show Price Subgraph&quot;,&lt;F),^(&quot;closePriceLevel&quot;,&lt;F),^(&quot;Color Volume As Symbol Ticks&quot;,&lt;F),^(&quot;highlightPhantomRBars&quot;,&lt;F),^(&quot;Cross type &quot;,&lt;F),^(&quot;Fit Studies to Screen&quot;,@Boolean0),^(&quot;Chart type &quot;,&lt;F),^(&quot;Fit Orders&quot;,&lt;F),^(&quot;Bubbles as Percentage&quot;,&lt;F),^(&quot;hideStatusString&quot;,&lt;F),^(&quot;Show Studies &quot;,&lt;F),^(&quot;showWicksHeikinAshi&quot;,&lt;F),^(&quot;Alerts&quot;,&lt;F),^(&quot;Chart scale&quot;,&lt;F),^(&quot;Fit High/Low&quot;,&lt;F),^(&quot;Orders&quot;,&lt;F),^(&quot;Use Log Scale &quot;,&lt;F),^(&quot;Fit Study Markers to Screen&quot;,@Boolean0),^(&quot;Fit Alerts&quot;,&lt;F),^(&quot;Fit patterns&quot;,&lt;F),^(&quot;Percentage View&quot;,&lt;F),^(&quot;Make Auto Zoom &quot;,&lt;F),^(&quot;Show Year Marking Line&quot;,&lt;F),^(&quot;Show Rollover Line&quot;,&lt;F),^(&quot;Show High/Low Bubbles &quot;,&lt;F),^(&quot;Snap mode&quot;,&lt;F),^(&quot;highlightStudies&quot;,&lt;F),^(&quot;Overlapped Volume&quot;,&lt;F),^(&quot;Show Symbol Logo&quot;,&lt;F),^(&quot;Show Last Price Bubble &quot;,&lt;F),^(&quot;emphasizeDigitMP&quot;,&lt;F),^(&quot;Show grid&quot;,@Boolean0),^(&quot;showWicksCandle&quot;,&lt;F),^(&quot;Show trades&quot;,&lt;F),^(&quot;highlightSeasons&quot;,&lt;F),^(&quot;Extend Order/Alert Line to Left&quot;,&lt;F)},showGrid=&lt;F,showTradeExecution=&lt;T,step=3.3783783783783785d,volumeColorByTicks=&lt;T},forexStyleSettings.shortCuts.^(&quot;Show Volume Subgraph&quot;,&lt;F),futuresStyleSettings{highlightExtendedHours=&lt;T,shortCuts{^(&quot;adjustForContractChanges&quot;,&lt;F),^(&quot;Show Open Interest&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,&lt;F),^(&quot;showContractChangeEvents&quot;,&lt;F),^(&quot;futures_daily_close_price&quot;,&lt;F),^(&quot;Show Options&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,&lt;F),^(&quot;startAtMarketOpen&quot;,&lt;F)},tradingHoursOnly=&lt;T},optionsStyleSettings{shortCuts{^(&quot;Show Open Interest&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,&lt;F),^(&quot;Show Theo Price&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,&lt;F),^(&quot;startAtMarketOpen&quot;,&lt;F)},startAggregationAtMarketOpen=&lt;F},otherStyleSettings{shortCuts{^(&quot;Show Social Sentiment&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,@Boolean0),^(&quot;Show Options&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,&lt;F),^(&quot;Show Corporate Actions&quot;,&lt;F),^(&quot;Show CNBC Video&quot;,&lt;F),^(&quot;startAtMarketOpen&quot;,@Boolean0),^(&quot;adjustForDividends&quot;,&lt;F)},startAggregationAtMarketOpen=&lt;F,tradingHoursOnly=&lt;T},setsIdentifiers{studySetName=&quot;&quot;,styleSetName=&quot;Style name&quot;}},subgraphModels{!get(#%4.SubgraphId(&quot;Symbol&quot;)){height=236,storableIndicators{+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# V01.08.2012 TheoTrade Projection Pivots \n# mobius\n\ndeclare Once_Per_Bar;\n\ninput n = 21;\ninput showLines = no;\ninput showValues = no;\ninput showBarNumbers = no;\n\n   def h = high;\n   def l = low;\n   def bar = barNumber();\n   def PH;\n   def PL;\n   def hh = fold i = 1 to n + 1 \n            with p = 1\n            while p \n            do h &gt; getValue(h, -i); \n       PH = if (bar &gt; n and \n                h == highest(h, n) and \n                hh) \n            then h \n            else double.NaN;\n   def ll = fold j = 1 to n + 1 \n            with q = 1\n            while q \n            do l &lt; getValue(low, -j);\n       PL = if (bar &gt; n and \n                l == lowest(l, n) and \n                ll) \n            then l \n            else double.NaN;\n   def PHBar = if !isNaN(PH) \n               then bar \n               else PHBar[1];\n   def PLBar = if !isNaN(PL) \n               then bar \n               else PLBar[1];\n   def PHL = if !isNaN(PH) \n             then PH \n             else PHL[1];\n   def priorPHBar = if PHL != PHL[1] \n                    then PHBar[1] \n                    else priorPHBar[1];\n   def PLL = if !isNaN(PL) \n             then PL \n             else PLL[1];\n   def priorPLBar = if PLL != PLL[1] \n                    then PLBar[1] \n                    else priorPLBar[1];\n   def HighPivots = bar &gt;= highestAll(priorPHBar);\n   def LowPivots = bar &gt;= highestAll(priorPLBar);\n   def FirstRpoint = if HighPivots \n                     then bar - PHBar \n                     else 0;\n   def PriorRpoint = if HighPivots \n                     then bar - PriorPHBar \n                     else 0;\n   def RSlope = (getvalue(PH, FirstRpoint) - getvalue(PH, PriorRpoint)) \n                       / (PHBar - PriorPHBar); \n   def FirstSpoint = if LowPivots \n                     then bar - PLBar \n                     else 0;\n   def PriorSpoint = if LowPivots \n                     then bar - PriorPLBar \n                     else 0;\n   def SSlope = (getvalue(PL, FirstSpoint) - getvalue(PL, PriorSpoint)) \n                   / (PLBar - PriorPLBar);\n   def RExtend = if bar == highestall(PHBar) \n                 then 1 \n                 else RExtend[1];\n   def SExtend = if bar == highestall(PLBar) \n                 then 1 \n                 else SExtend[1];\n\n  plot pivotHigh = if HighPivots \n                   then PH \n                   else double.NaN;\n       pivotHigh.SetDefaultColor(GetColor(1));\n       pivotHigh.setPaintingStrategy(PaintingStrategy.VALUES_ABOVE);\n       pivotHigh.setHiding(!showValues);\n  plot pivotHighLine = if PHL &gt; 0 and \n                          HighPivots \n                       then PHL \n                       else double.NaN;\n       pivotHighLine.SetPaintingStrategy(PaintingStrategy.DASHES);\n       pivotHighLine.setHiding(!showLines);\n  plot RLine = pivotHigh;\n       RLine.enableApproximation();\n       RLine.SetDefaultColor(GetColor(7));\n       RLine.SetStyle(Curve.Short_DASH);\n  plot RExtension = if RExtend \n                    then (bar - PHBar) * RSlope + PHL \n                    else double.NaN;\n       RExtension.SetStyle(Curve.Short_DASH);\n       RExtension.SetDefaultColor(GetColor(7));\n  plot pivotLow = if LowPivots \n                  then PL \n                  else double.NaN;\n       pivotLow.setDefaultColor(GetColor(4));\n       pivotLow.setPaintingStrategy(PaintingStrategy.VALUES_BELOW);\n       pivotLow.setHiding(!showValues);\n  plot pivotLowLine = if PLL &gt; 0 and \n                         LowPivots \n                      then PLL \n                      else double.NaN;\n       pivotLowLine.SetPaintingStrategy(PaintingStrategy.DASHES);\n       pivotLowLine.setHiding(!showLines);\n  plot SupportLine = pivotLow;\n       SupportLine.enableApproximation();\n       SupportLine.SetDefaultColor(GetColor(7));\n       SUpportLine.SetStyle(Curve.Short_DASH);\n  plot SupportExtension = if SExtend \n                          then (bar - PLBar) * SSlope + PLL \n                          else double.NaN;\n       SupportExtension.SetDefaultColor(GetColor(7));\n       SupportExtension.SetStyle(Curve.Short_DASH);\n  plot BN = bar;\n       BN.SetDefaultColor(GetColor(0));\n       BN.setHiding(!showBarNumbers);\n       BN.SetPaintingStrategy(PaintingStrategy.VALUES_BELOW);\n  plot PivotDot = if !isNaN(pivotHigh) \n                  then pivotHigh \n                  else if !isNaN(pivotLow) \n                  then pivotLow \n                  else double.NaN;\n       pivotDot.SetDefaultColor(GetColor(7));\n       pivotDot.SetPaintingStrategy(PaintingStrategy.POINTS);\n       pivotDot.SetLineWeight(3);\n\n# End Code TheoTrade Projection Pivots&quot;,name=&quot;_49a3de57_939d_3d32_ae11_eba6a6e1d2ae&quot;})),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# AD Label\n# Mobius\n# Chat Room Request 04.26.2016\n\ninput SYMB = \&quot;$ADSPD\&quot;;\n\ndef AD = close(symbol = SYMB);\nAddLabel(1, \&quot;AD: \&quot; + SYMB + \&quot; = \&quot; +  AD, color.white);\n# End Code&quot;,name=&quot;_0ae813a8_e2bd_414c_a234_9f47c1cda822&quot;})),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;#hint: yakBro daily ATR 2020\n#yakbro.com\n\ndeclare upper;\n\ninput atrLength =5;\ninput averageType = AverageType.WILDERS;\ninput Period = AggregationPeriod.DAY;\ninput atrLength2 =5;\n\ninput Period2 = AggregationPeriod.HOUR;\ninput offset = 0;\ninput prctOfDr = 50;\ninput showATR = yes;\ninput showTodayRS = yes; #show strength to today\'s range\n\ndef ATR = MovingAverage(averageType, TrueRange(high(period= Period), close(period = Period), low(period = Period)), ATRlength)[offset];\ndef ATR2 = MovingAverage(averageType, TrueRange(high(period= Period2), close(period = Period2), low(period = Period2)), ATRlength2)[offset];\ndef todayHigh = high(period = Period);\ndef todayLow = low(period = Period);\ndef DR = todayHigh - todayLow;#current range\ndef a = todayLow + DR * prctOfDr/100;#.5; #50% of DR price\ndef b = close(period=Period) - todayLow; #last close price to DR\ndef x = b / DR * 100; #current DR range\ndef rangeDiff = roundUp(ATR - DR); #Range left\n\n#labels\nAddLabel(showATR, \&quot;ATR: \&quot;+Round(DR,2)+ \&quot;/ ATR(\&quot;+atrLength+\&quot;):\&quot;+Round(ATR,2), (if DR &gt; ATR then Color.downtick else Color.LIGHT_GRAY));\n\nAddLabel(showATR, \&quot;Diff:\&quot; +absValue(rangeDiff),if rangeDiff &lt; 0 then Color.downtick else color.green);\nAddLabel(showATR, \&quot;/ ATR2(\&quot;+atrLength2+\&quot;):\&quot;+Round(ATR2,2), (if DR &gt; ATR2 then Color.downtick else Color.LIGHT_GRAY));\nAddLabel(showTodayRS,\&quot;RS: \&quot;+round(x,2) + \&quot;%\&quot;,if x &gt;70 then Color.GREEN else if x&gt;60 then color.LIGHT_GREEN else if x&gt;40 then color.orange else color.red);\n\n&quot;,name=&quot;_843536f6_4cec_345a_b9ad_7b0f7d848b54&quot;}){hidden=&lt;T}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;input PR_Target1 = 3219;\r\ninput PR_Target2= 3186;\r\ninput PR_Target3= 3175;\r\ninput PR_Target4= 3136;\ninput PR_Target5 = 3117;\r\ninput PR_Target6 = 3092;\r\ninput PR_Target7 = 3070;\r\ninput PR_Target8 = 3057;\r\ninput PR_Target9 = 3032;\r\ninput PR_Target10 = 3006;\r\ninput PR_Target11 = 2992;\r\ninput PR_Target12 = 2970;\r\ninput PR_Target13 = 2944;\r\ninput PR_Target14 = 2932;\ninput PR_Target15 = 2910;\r\ninput PR_Target16 = 2886;\r\ninput PR_Target17 = 2858;\ninput PR_Target18 = 3206;\n\nplot Target1 = PR_Target1;\r\nplot Target2 = PR_Target2;\nplot Target3 = PR_Target3;\nplot Target4 = PR_Target4;\nplot Target5 = PR_Target5;\nplot Target6 = PR_Target6;\nplot Target7 = PR_Target7;\nplot Target8 = PR_Target8;\nplot Target9 = PR_Target9;\nplot Target10 = PR_Target10;\nplot Target11 = PR_Target11;\nplot Target12 = PR_Target12;\nplot Target13 = PR_Target13;\nplot Target14 = PR_Target14;\nplot Target15 = PR_Target15;\r\nplot Target16 = PR_Target16;\nplot Target17 = PR_Target17;\nplot Target18 = PR_Target18;\n\nTarget1.setstyle(curve.short_DASH);\nTarget2.setstyle(curve.short_DASH);\nTarget3.setstyle(curve.short_DASH);\nTarget4.setstyle(curve.short_DASH);\nTarget5.setstyle(curve.short_DASH);\nTarget6.setstyle(curve.short_DASH);\nTarget7.setstyle(curve.short_DASH);\nTarget8.setstyle(curve.short_DASH);\nTarget9.setstyle(curve.short_DASH);\nTarget10.setstyle(curve.short_DASH);\nTarget11.setstyle(curve.short_DASH);\nTarget12.setstyle(curve.short_DASH);\nTarget13.setstyle(curve.short_DASH);\nTarget14.setstyle(curve.short_DASH);\nTarget15.setstyle(curve.short_DASH);\nTarget16.setstyle(curve.short_DASH);\nTarget17.setstyle(curve.short_DASH);\nTarget18.setstyle(curve.short_DASH);\n\n\r\ntarget1.setdefaultcolor(GetColor(0));\ntarget2.setdefaultcolor(GetColor(0));\ntarget3.setdefaultcolor(GetColor(0));\ntarget4.setdefaultcolor(GetColor(0));\ntarget5.setdefaultcolor(GetColor(0));\ntarget6.setdefaultcolor(GetColor(0));\ntarget7.setdefaultcolor(GetColor(0));\ntarget8.setdefaultcolor(GetColor(0));\ntarget9.setdefaultcolor(GetColor(0));\ntarget10.setdefaultcolor(GetColor(0));\ntarget11.setdefaultcolor(GetColor(0));\ntarget12.setdefaultcolor(GetColor(0));\ntarget13.setdefaultcolor(GetColor(0));\ntarget14.setdefaultcolor(GetColor(0));\ntarget15.setdefaultcolor(GetColor(0));\ntarget16.setdefaultcolor(GetColor(0));\ntarget17.setdefaultcolor(GetColor(0));\ntarget18.setdefaultcolor(GetColor(0));\n\r\n\nTarget1.hideTitle();\nTarget2.hideTitle();\nTarget3.hideTitle();\nTarget4.hideTitle();\nTarget5.hideTitle();\nTarget6.hideTitle();\nTarget7.hideTitle();\nTarget8.hideTitle();\nTarget9.hideTitle();\nTarget10.hideTitle();\nTarget11.hideTitle();\nTarget12.hideTitle();\nTarget13.hideTitle();\nTarget14.hideTitle();\nTarget15.hideTitle();\nTarget16.hideTitle();\nTarget17.hideTitle();\nTarget18.hideTitle();\n\nTarget1.hidebubble();\nTarget2.hidebubble();\nTarget3.hidebubble();\nTarget4.hidebubble();\nTarget5.hidebubble();\nTarget6.hidebubble();\nTarget7.hidebubble();\nTarget8.hidebubble();\nTarget9.hidebubble();\nTarget10.hidebubble();\nTarget11.hidebubble();\nTarget12.hidebubble();\nTarget13.hidebubble();\nTarget14.hidebubble();\nTarget15.hidebubble();\nTarget16.hidebubble();\nTarget17.hidebubble();\nTarget18.hidebubble();\n\n\n\n\n&quot;,name=&quot;_aeaa7103_ce8a_3533_9e24_b4800ad42a47&quot;}){hidden=&lt;T}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;### xiuyu vwap cross signal with abnormal volume\n\n#declare hide_on_daily;\n\n####\n#MTF\ndef tFrame = GetAggregationPeriod();\ninput timeFrame = {default DAY, WEEK, MONTH};\ninput aggregationPeriod = AggregationPeriod.HOUR;\ninput useAutoAggegate = yes;\n\n\n\n# Variables:\n#def  =if (useAutoAggegate) then open(period = aggregationPeriod1) else open;\n\ndef AutoAGG = if tFrame &lt;  AggregationPeriod.DAY then AggregationPeriod.DAY\n             else if  tFrame &lt; AggregationPeriod.WEEK then AggregationPeriod.WEEK\n                  else AggregationPeriod.MONTH;\ndef AGG = if (!useAutoAggegate) then aggregationPeriod else AutoAGG;\n\ndef testTimeFrames = if tFrame &lt; AGG  then yes else no;\n\n#AddLabel(useAutoAggegate, if testTimeFrames  then \&quot;Time Frames Are Correct\&quot; else \&quot;Time Frames Are \n\ninput length = 10; #average volume lenght\ninput volMinimum = 50000;\ninput showPriceColor = yes;\ninput factor = 1.50; #show what factors to avgvolume \ninput nDevUp = 2.0;\ninput nDevDn = -2.0;\n\ndef avgvolume = Average(volume, length) * factor;\n\n\n#plot vwap = reference VWAP( AGG);\n#######\n\n\ndef cap = GetAggregationPeriod();\ndef errorInAggregation =\n    timeFrame == timeFrame.DAY and cap &gt;= AggregationPeriod.WEEK or\n    timeFrame == timeFrame.WEEK and cap &gt;= AggregationPeriod.MONTH;\nAssert(!errorInAggregation, \&quot;timeFrame should be not less than current chart aggregation period\&quot;);\n\ndef yyyyMmDd = GetYYYYMMDD();\ndef periodIndx;\nswitch (timeFrame) {\ncase DAY:\n    periodIndx = yyyyMmDd;\ncase WEEK:\n    periodIndx = Floor((DaysFromDate(First(yyyyMmDd)) + GetDayOfWeek(First(yyyyMmDd))) / 7);\ncase MONTH:\n    periodIndx = RoundDown(yyyyMmDd / 100, 0);\n}\ndef isPeriodRolled = CompoundValue(1, periodIndx != periodIndx[1], yes);\n\ndef volumeSum;\ndef volumeVwapSum;\ndef volumeVwap2Sum;\n\nif (isPeriodRolled) {\n    volumeSum = volume;\n    volumeVwapSum = volume * vwap;\n    volumeVwap2Sum = volume * Sqr(vwap);\n} else {\n    volumeSum = CompoundValue(1, volumeSum[1] + volume, volume);\n    volumeVwapSum = CompoundValue(1, volumeVwapSum[1] + volume * vwap, volume * vwap);\n    volumeVwap2Sum = CompoundValue(1, volumeVwap2Sum[1] + volume * Sqr(vwap), volume * Sqr(vwap));\n}\ndef price = volumeVwapSum / volumeSum;\ndef deviation = Sqrt(Max(volumeVwap2Sum / volumeSum - Sqr(price), 0));\n\nplot VWAP = price;\nplot UpperBand = price + nDevUp * deviation;\nplot LowerBand = price + nDevDn * deviation;\nplot UpperBand2 = price + (1+nDevUp) * deviation;\nplot LowerBand2 = price +(-1+ nDevDn) * deviation;\ndef sdvP1=  price + deviation;\ndef sdvN1=  price - deviation;\n#####\n\n\nplot SD1up =close[1] crosses above sdvp1 and ( open&lt; close) and low&gt;sdvp1;\nSD1up.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nSD1up.SetDefaultColor(Color.graY);\nSD1up.SetLineWeight(2);\nAssignPriceColor(if SD1up and showPriceColor and open&lt; close then Color.violet else Color.CURRENT);\n\nAddLabel(yes, \&quot;VWAP= \&quot; + astext(VWAP), if VWAP&lt; close then Color.LIGHT_GREEN else if VWAP&gt; close then color.LIGHT_red else Color.GRAY);\n#AddLabel(yes, \&quot;VWAP= \&quot; + astext(VWAP), Color.White);\ndef vwDif= close- VWAP;\n#AddLabel(yes, \&quot; \&quot;+astext(vwDif), if vwDif&gt; 0 then Color.LIGHT_GREEN else if vwDif&lt; 0 then color.LIGHT_red else Color.GRAY);\nAddLabel(yes and vwDif&gt;0, \&quot; +\&quot;+astext(vwDif),  Color.LIGHT_GREEN );\nAddLabel(yes and vwDif&lt;=0, \&quot; \&quot;+astext(vwDif),  if vwDif&lt; 0 then color.LIGHT_red else Color.LIGHT_GRAY);\n\ninput vwapLableAll =yes;\nAddLabel(vwapLableAll, \&quot;VWAP +1= \&quot; + astext(sdvP1), if sdvP1&lt; close then Color.LIGHT_GREEN else if sdvP1&gt; close then color.LIGHT_red else Color.GRAY);\n\nAddLabel(vwapLableAll, \&quot;VWAP +2= \&quot; + astext(UpperBand), if UpperBand&lt; close then Color.LIGHT_GREEN else if UpperBand&gt; close then color.LIGHT_red else Color.GRAY);\nAddLabel(vwapLableAll, \&quot;VWAP +3= \&quot; + astext(UpperBand2), if UpperBand2&lt; close then Color.LIGHT_GREEN else if UpperBand2&gt; close then color.LIGHT_red else Color.GRAY);\n\nAddLabel(vwapLableAll, \&quot;VWAP -1= \&quot; + astext(sdvN1), if sdvN1&lt; close then Color.LIGHT_GREEN else if sdvN1&gt; close then color.LIGHT_red else Color.GRAY);\nAddLabel(vwapLableAll, \&quot;VWAP -2= \&quot; + astext(LowerBand), if LowerBand&lt; close then Color.LIGHT_GREEN else if LowerBand&gt; close then color.LIGHT_red else Color.GRAY);\nAddLabel(vwapLableAll, \&quot;VWAP -3= \&quot; + astext(LowerBand2), if LowerBand2&lt; close then Color.LIGHT_GREEN else if LowerBand2&gt; close then color.LIGHT_red else Color.GRAY);\n\n#AddLabel(vwapLableAll, \&quot;VWAP R= \&quot; + astext(upperBand/sdvN1 -1)+\&quot;  \&quot;+astext(upperBand/lowerBand -1)+\&quot;  \&quot;+astext(upperBand2/lowerBand2 -1), if LowerBand&lt; close then Color.LIGHT_GREEN else if LowerBand&gt; close then color.LIGHT_red else Color.GRAY);\n\nAddLabel(vwapLableAll, \&quot;VWAP R= \&quot; + astext(upperBand/sdvN1 -1)+\&quot;  \&quot;+astext(upperBand/lowerBand -1)+\&quot;  \&quot;+astext(upperBand2/lowerBand2 -1), if LowerBand&lt; close then Color.LIGHT_GREEN else if LowerBand&gt; close then color.LIGHT_red else Color.GRAY);\n\n\n\ndef volCheck = volume &gt;= avgvolume &amp;&amp; volume &gt;= volMinimum &amp;&amp; volume &gt;= volume[1];\ndef isCross =  close crosses VWAP;\ndef abnormalSignal = isCross and volCheck;\n\n\nVWAP.SetDefaultColor(color.white);#(GetColor(0));\nplot signalup = if abnormalSignal and close &gt; VWAP then low else Double.NaN;\nsignalup.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nsignalup.SetDefaultColor(Color.CYAN);\nsignalup.SetLineWeight(2);\n\nplot signaldown =  if abnormalSignal and close &lt; VWAP then high else Double.NaN;\nsignaldown.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);\nsignaldown.SetDefaultColor(Color.CYAN);\nsignaldown.SetLineWeight(2);\n\nAssignPriceColor(if abnormalSignal and showPriceColor then Color.CYAN else Color.CURRENT);\n\n\n#####\nvwap.SetStyle(Curve.POINTS);\nUpperBand.SetDefaultColor(GetColor(0));\nLowerBand.SetDefaultColor(GetColor(0));\n\nUpperBand.SetStyle(Curve.POINTS);\nLowerBand.SetStyle(Curve.POINTS);\n\nUpperBand2.SetDefaultColor(Color.YELLOW);\nLowerBand2.SetDefaultColor(Color.YELLOW);\n\nUpperBand2.SetStyle(Curve.SHORT_DASH);\nLowerBand2.SetStyle(Curve.SHORT_DASH);\n#input AutoHide=yes;\n#def hideLower = if AutoHide then close &gt;vwap  else 0;;\n#def hideUpper = if AutoHide then  close &lt;vwap  else 0;#- deviation\n#addLabel(yes, \&quot;hide U\&quot;+hideUpper +\&quot; L\&quot;+hideLower);\n#UpperBand.setHiding(hideUpper);\n#LowerBand.setHiding(hideLower);\n#UpperBand.Hide();\n#LowerBand.Hide();\n#UpperBand2.Hide();\n#LowerBand2.Hide();&quot;,name=&quot;_740dc265_6e6e_38a5_ba0e_c0a058a5d552&quot;}){inputsMap:TreeMap0{^(&quot;volMinimum&quot;,500000)},inputsMap=@TreeMap0,plots{0:{paintingStrategy=2}}}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;input averageType = AverageType.expONENTIAL;\ninput showMovingAvgLable =NO;\ninput useMTF =No;\ninput aggregationPeriod1 =AggregationPeriod.Five_MIN;\n\n\ndef c =close(period = aggregationPeriod1);\ninput price = close;\ninput length1 = 10;\ninput length2 = 20;\ninput length3 = 50;\ninput length4 = 200;\ninput displace = 0;\ninput showAvg3 = no;\ndef priceV = if (!useMTF) then price else close(period = aggregationPeriod1);#(period = aggregationPeriod1));\ninput showAvg4 = no;\n\ninput showBreakoutSignals = no;\n\n\n\n\n#def AvgExp = ExpAverage(price[-displace], length);\nplot Avg1 = MovingAverage(averageType, price[-displace], length1);\nplot Avg2 = MovingAverage(averageType, price[-displace], length2);\nplot Avg3 = MovingAverage(averageType, price[-displace], length3);\nplot Avg4 = MovingAverage(averageType, price[-displace], length4);\n\nAvg3.setHiding(!showAvg3);\nAvg4.setHiding(!showAvg4);\n\ndef uptrend = open &gt;close[1] and close[1]&gt;close[2] ;\ndef downtrend =price &lt; AVg3;\n#plot SMA ( Average(price[-displace], length);\nplot UpSignal = Avg1 crosses above Avg2 and uptrend;\nplot DownSignal = Avg1 crosses below Avg2 and downtrend;\n#Add Label\n\nAddLabel(showMovingAvgLable, \&quot;  \&quot;+ length1+ \&quot;MAvg\&quot; ,Avg1.TakeValueColor ());\nAddLabel(showMovingAvgLable,  astext(Avg1), if Avg1&lt; close then Color.LIGHT_GREEN else if Avg1&gt; close then color.light_red else Color.Light_GRAY);\n\n\nAddLabel(showMovingAvgLable, \&quot;  \&quot;+ length2+ \&quot;MAvg\&quot; ,Avg2.TakeValueColor ());\nAddLabel(showMovingAvgLable,  astext(Avg2), if Avg2&lt; close then Color.LIGHT_GREEN else if Avg2&gt; close then color.light_red else Color.Light_GRAY);\n\nAddLabel(showMovingAvgLable, \&quot;  \&quot;+ length3+ \&quot;MAvg\&quot; ,Avg3.TakeValueColor ());\nAddLabel(showMovingAvgLable,  astext(Avg3), if Avg3&lt; close then Color.LIGHT_GREEN else if Avg3&gt; close then color.light_red else Color.Light_GRAY);\n\n\nAddLabel(showMovingAvgLable, \&quot;  \&quot;+ length4+ \&quot;MAvg\&quot; ,Avg4.TakeValueColor ());\nAddLabel(showMovingAvgLable,  astext(Avg4), if Avg4&lt; close then Color.LIGHT_GREEN else if Avg4&gt; close then color.light_red else Color.Light_GRAY);\n\n\n# Avg1.TakeValueColor ()\n#AddLabel(showMovingAvgLable,  length1+ \&quot;MAvg \&quot; +astext(Avg1) ,Avg1.TakeValueColor ());\n#AddLabel(showMovingAvgLable, astext(Avg1), if Avg1&lt; close then Color.GREEN else if Avg1&gt; close then color.light_red else Color.Light_GRAY);\n\n\n\n#AddLabel(showMovingAvgLable,  length2+ \&quot;MAvg \&quot;+ astext(Avg2) ,Avg2.TakeValueColor ());\n#AddLabel(showMovingAvgLable,  astext(Avg2), if Avg2&lt; close then Color.GREEN else if Avg2&gt; close then color.light_red else Color.Light_GRAY);\n#AddLabel(showMovingAvgLable,  length3+ \&quot;MAvg \&quot; +astext(Avg3),Avg3.TakeValueColor ());\n#AddLabel(showMovingAvgLable, astext(Avg3), if Avg3&lt; close then Color.GREEN else if Avg3&gt; close then color.light_red else Color.Light_GRAY);\n#AddLabel(showMovingAvgLable,  length4+ \&quot;MAvg \&quot; +astext(Avg4),Avg4.TakeValueColor ());\n#AddLabel(showMovingAvgLable, astext(Avg4), if Avg4&lt; close then Color.GREEN else if Avg4&gt; close then color.light_red else Color.Light_GRAY);\ndef bub;\nif !IsNaN(close[-1])\nthen {\n\n    bub = no;#Double.NaN;\n    \n} else {\nbub = yes;\n    \n}\ndef bubb = if  BarNumber() == 20  then yes else no;\n\ninput Show_Mavg_Key=no;\n\n#AddChartBubble(bub, Avg1, \&quot;MAvg\&quot;+ length1+ \&quot;= \&quot; + astext(Avg1), Color.LIGHT_ORANGE, no);\nAddChartBubble(bub and Show_Mavg_Key, Avg1, \&quot;MAvg\&quot;+ length1+ \&quot;= \&quot; + astext(Avg1), Avg1.TakeValueColor (), yes);\nAddChartBubble(bub and Show_Mavg_Key, Avg2, \&quot;MAvg\&quot;+ length2+ \&quot;= \&quot; + astext(Avg2), Avg2.TakeValueColor (), yes);\nAddChartBubble(bub and Show_Mavg_Key, Avg3, \&quot;MAvg\&quot;+ length3+ \&quot;= \&quot; + astext(Avg3), Avg3.TakeValueColor (), yes);\nAddChartBubble(bub and Show_Mavg_Key, Avg4, \&quot;MAvg\&quot;+ length4+ \&quot;= \&quot; + astext(Avg4), Avg4.TakeValueColor (), yes);\n\n#Vwap\ninput vwapTimeFrame = {default DAY, WEEK, MONTH};\ninput numDevDn = -1.5;\ninput numDevUp = 1.5;\ninput vwapLable =no;\n\n\ndef cap = getAggregationPeriod();\ndef errorInAggregation =\n    vwapTimeFrame == vwapTimeFrame.DAY and cap &gt;= AggregationPeriod.WEEK or\n    vwapTimeFrame == vwapTimeFrame.WEEK and cap &gt;= AggregationPeriod.MONTH;\nassert(!errorInAggregation, \&quot;timeFrame should be not less than current chart aggregation period\&quot;);\n\ndef yyyyMmDd = getYyyyMmDd();\ndef periodIndx;\nswitch (vwapTimeFrame) {\ncase DAY:\n    periodIndx = yyyyMmDd;\ncase WEEK:\n    periodIndx = Floor((daysFromDate(first(yyyyMmDd)) + getDayOfWeek(first(yyyyMmDd))) / 7);\ncase MONTH:\n    periodIndx = roundDown(yyyyMmDd / 100, 0);\n}\ndef isPeriodRolled = compoundValue(1, periodIndx != periodIndx[1], yes);\n\ndef volumeSum;\ndef volumeVwapSum;\ndef volumeVwap2Sum;\n\nif (isPeriodRolled) {\n    volumeSum = volume;\n    volumeVwapSum = volume * vwap;\n    volumeVwap2Sum = volume * Sqr(vwap);\n} else {\n    volumeSum = compoundValue(1, volumeSum[1] + volume, volume);\n    volumeVwapSum = compoundValue(1, volumeVwapSum[1] + volume * vwap, volume * vwap);\n    volumeVwap2Sum = compoundValue(1, volumeVwap2Sum[1] + volume * Sqr(vwap), volume * Sqr(vwap));\n}\ndef VWprice = volumeVwapSum / volumeSum;\ndef deviation = Sqrt(Max(volumeVwap2Sum / volumeSum - Sqr(VWprice), 0));\n\nplot VWAP = VWprice;\nplot UpperBand = VWprice + numDevUp * deviation;\nplot LowerBand = VWprice + numDevDn * deviation;\n\nVWAP.setDefaultColor(getColor(0));\nUpperBand.setDefaultColor(getColor(0));\nLowerBand.setDefaultColor(getColor(0));\n\nUpperBand.SetStyle(Curve.MEDIUM_DASH);\nLowerBand.SetStyle(Curve.MEDIUM_DASH);\n\n\nvwap.hide();\n#UpperBand.hide();\n#LowerBand.hide();\n\n#vwap\n\nAddLabel(vwapLable, \&quot;VWAP= \&quot; + astext(VWAP), if VWAP&lt; close then Color.LIGHT_GREEN else if VWAP&gt; close then color.LIGHT_red else Color.GRAY);\n#AddLabel(vwapLable, \&quot;VWAP= \&quot; + astext(VWAP), Color.White);\ndef vwDif= close- VWAP;\n#AddLabel(yes, \&quot; \&quot;+astext(vwDif), if vwDif&gt; 0 then Color.LIGHT_GREEN else if vwDif&lt; 0 then color.LIGHT_red else Color.GRAY);\nAddLabel(vwapLable and vwDif&gt;0, \&quot; +\&quot;+astext(vwDif),  Color.LIGHT_GREEN );\nAddLabel(vwapLable and vwDif&lt;=0, \&quot; \&quot;+astext(vwDif),  if vwDif&lt; 0 then color.LIGHT_red else Color.LIGHT_GRAY);\n#RSI\ninput overBoughtRsi = 70;\ninput overSoldRsi = 30;\ninput rsiLength = 14;\ninput rsiPrice = close;\ndef rsi_val = reference RSI(length = rsiLength, price = rsiPrice );\n####\n\n\n\nAddLabel(yes, \&quot;RSI = \&quot; + astext(rsi_val) , if rsi_val &gt; overBoughtRsi  then Color.RED else if rsi_val &lt; overSoldRsi then  Color.GREEN else Color.light_GRAY);\n\n\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\nAvg1.SetDefaultColor(color.white);\nAvg2.SetDefaultColor(color.cyan);\nAvg3.SetDefaultColor(color.light_red);\nAvg4.SetDefaultColor(color.pink);\n#avg3.SetStyle(Curve.MEDIUM_DASH);\n#avg4.SetStyle(Curve.MEDIUM_DASH);\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);\n&quot;,name=&quot;_686a0d47_2dc7_4466_91d6_64cf4907bd2a&quot;}){inputsMap:TreeMap1{^(&quot;price&quot;,&quot;CLOSE&quot;),^(&quot;rsiPrice&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap1,plots{6:{paintingStrategy=2}}})}},!get(#%4.SubgraphId(&quot;Volume&quot;)){height=94,storableIndicators.+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;#xiuyu 2020\n##volume datas\n\ndeclare on_volume;\n\n#Inputs datas\n\ninput LengthForSecond = 10;\ninput rVOLhigh = 2; #if avg rovl is 2 times\n\ninput show30dayData = yes;\ninput showEnteredLengthRvol = yes;\ninput ShowTodayVolume =  yes;\ninput ShowAvgVolume = yes;\ninput ShowEnteredRVOL = yes;\ninput ShowCurrentBar = yes;\n\n\n\n#Volume Data\ndef ADVol30 = Average(volume(period = AggregationPeriod.DAY), 30)[1];\ndef ADVolEntered = Average(volume(period = AggregationPeriod.DAY), LengthForSecond)[1];\ndef today = volume(period = aggregationPeriod.DAY);\ndef Rvol30 = round(today/Average(volume(period = AggregationPeriod.DAY), 30)[1],2);\ndef RvolEntered = round(today/Average(volume(period = AggregationPeriod.DAY), LengthForSecond)[1],2);\n\n# Labels\n\n#shows 30days data ADV n Rvol\nAddLabel(Show30dayData, \&quot;30 dADV: \&quot; + Round(ADVol30, 0), Color.LIGHT_GRAY);\nAddLabel(Show30dayData,\&quot;30rVol:\&quot; + Rvol30, (if Rvol30 &gt;= rVolhigh then Color.RED else if Rvol30 &gt;= 1 then Color.ORANGE else Color.WHITE) );\n\n#shows user entered datas\nAddLabel(ShowEnteredLengthRvol, LengthForSecond +\&quot; dADV: \&quot; + Round(ADVolEntered, 0), Color.LIGHT_GRAY);\nAddLabel(ShowEnteredRVOL,LengthForSecond + \&quot;rVol:\&quot; + RvolEntered ,(if RvolEntered &gt;= rVOLhigh then Color.RED else if RvolEntered &gt;= 1 then Color.ORANGE else Color.light_GRAY));\n\n#shows todays volume\nAddLabel(ShowTodayVolume, \&quot;Today: \&quot; + today, (if Rvol30 &gt;= rVolhigh then Color.reD else if Rvol30 &gt;= 1 then Color.ORANGE else Color.LIGHT_GRAY));\n\n\n#shows current bar\'s volume\nAddLabel(ShowCurrentBar, \&quot;Cur Bar: \&quot; + volume,color.light_GRAY);\n\n\n&quot;,name=&quot;_7350e5e2_721c_35be_a787_608a2d7c1672&quot;}))},^(#%4.SubgraphId(&quot;Subgraph1&quot;),#%4.SubgraphStorableModel{height=95,storableIndicators.+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# TheoTrade RSI in Laguerre Time Self Adjusting With Fractal Energy\n# Mobius\n# V03.06.15.2016\n# Both Fractal Energy and RSI are plotted. RSI in cyan and FE in yellow. Look for trend exhaustion in the FE and a reversal of RSI or Price compression in FE and an RSI reversal.\n\ndeclare lower;\n\n#Inputs: \ninput aggregationPeriod1 =AggregationPeriod.THIRTY_MIN;\n\n#input useOpen =no;\n#def price = if (useOpen) then   open(period = aggregationPeriod1) else close(period = aggregationPeriod1) ;\n\ninput nFE = 13;#hint nFE: length for Fractal Energy calculation. \n\n# Variables:\ndef o;\ndef h;\ndef l;\ndef c;\ndef CU1;\ndef CU2;\ndef CU;\ndef CD1;\ndef CD2;\ndef CD;\ndef L0;\ndef L1;\ndef L2;\ndef L3;\nplot RSI;\nplot OS;\nplot OB;\n\n# Calculations\no = (open(period = aggregationPeriod1) + close(period = aggregationPeriod1)[1]) / 2;\nh = Max(high(period = aggregationPeriod1), close(period = aggregationPeriod1)[1]);\nl = Min(low(period = aggregationPeriod1), close(period = aggregationPeriod1)[1]);\nc = (o + h + l + close(period = aggregationPeriod1)) / 4;\nplot gamma = Log(Sum((Max(high(period = aggregationPeriod1), close(period = aggregationPeriod1)[1]) - Min(low(period = aggregationPeriod1), close(period = aggregationPeriod1)[1])), nFE) / \n        (Highest(high(period = aggregationPeriod1), nFE) - Lowest(low(period = aggregationPeriod1), nFE)))\n            / Log(nFE);\ngamma.SetDefaultColor(Color.Yellow);\nL0 = (1 – gamma) * c + gamma * L0[1];\nL1 = -gamma * L0 + L0[1] + gamma * L1[1];\nL2 = -gamma * L1 + L1[1] + gamma * L2[1];\nL3 = -gamma * L2 + L2[1] + gamma * L3[1];\nif L0 &gt;= L1\nthen {\n    CU1 = L0 - L1;\n    CD1 = 0;\n} else {\n    CD1 = L1 - L0;\n    CU1 = 0;\n}\nif L1 &gt;= L2\nthen {\n    CU2 = CU1 + L1 - L2;\n    CD2 = CD1;\n} else {\n    CD2 = CD1 + L2 - L1;\n    CU2 = CU1;\n}\nif L2 &gt;= L3\nthen {\n    CU = CU2 + L2 - L3;\n    CD = CD2;\n} else {\n    CU = CU2;\n    CD = CD2 + L3 - L2;\n}\n\nRSI = if CU + CD &lt;&gt; 0 then CU / (CU + CD) else 0;\nRSI.SetDefaultColor(Color.Cyan);\nOS = if IsNaN(close(period = aggregationPeriod1)) then Double.NaN else 0.2;\nOS.SetDefaultColor(Color.Gray);\nOS.HideBubble();\nOS.HideTitle();\nOB = if IsNaN(close(period = aggregationPeriod1)) then Double.NaN else 0.8;\nOB.SetDefaultColor(Color.Gray);\nOB.HideBubble();\nOB.HideTitle();\nplot FEh = if isNaN(close(period = aggregationPeriod1)) then double.nan else .618;\nFEh.SetStyle(Curve.Long_Dash);\nFEh.HideBubble();\nFEh.SetDefaultColor(Color.Dark_Gray);\nFEh.HideTitle();\nplot FEl = if isNaN(close(period = aggregationPeriod1)) then double.nan else .382;\nFEl.SetStyle(Curve.Long_Dash);\nFEl.SetDefaultColor(Color.Dark_Gray);\nFEl.HideBubble();\nFEl.HideTitle();\nAddCloud(0, OS, Color.Green, Color.Green);\nAddCloud(OB, 1, Color.Red, Color.Red);\nAlert(RSI crosses below .9, \&quot;\&quot;, Alert.BAR, Sound.Bell);\nAlert(RSI crosses above .1, \&quot;\&quot;, Alert.BAR, Sound.Bell);\n\n# End Code RSI_Laguerre Self Adjusting with Fractal Energy&quot;,name=&quot;_d17145e8_5004_3ac1_8e21_8466363fd097&quot;}){alerts:LocalAlertArray0,alerts=@LocalAlertArray0})}),^(#%4.SubgraphId(&quot;Subgraph3&quot;),#%4.SubgraphStorableModel{height=80,storableIndicators.+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# RSI-Laguerre Self Adjusting With Fractal Energy Gaussian Price Filter\n# Mobius\n# V01.12.2016\n# Both Fractal Energy and RSI are plotted. RSI in cyan and FE in yellow. Look for trend exhaustion in the FE and a reversal of RSI or Price compression in FE and an RSI reversal.\n\ndeclare lower;\n\n#Inputs: \ninput nFE = 8;#hint nFE: length for Fractal Energy calculation. \ninput AlertOn = no;\ninput Glength  = 13;\ninput betaDev =  8;\ninput data = close;\n\ndef w = (2 * Double.Pi / Glength);\ndef beta = (1 - Cos(w)) / (Power(1.414, 2.0 / betaDev) - 1 );\ndef alpha = (-beta + Sqrt(beta * beta + 2 * beta));\ndef Go = Power(alpha, 4) * open + \n             4 * (1 – alpha) * Go[1] – 6 * Power( 1 - alpha, 2 ) * Go[2] + \n             4 * Power( 1 - alpha, 3 ) * Go[3] - Power( 1 - alpha, 4 ) * Go[4];\ndef Gh = Power(alpha, 4) * high + \n             4 * (1 – alpha) * Gh[1] – 6 * Power( 1 - alpha, 2 ) * Gh[2] + \n             4 * Power( 1 - alpha, 3 ) * Gh[3] - Power( 1 - alpha, 4 ) * Gh[4];\ndef Gl = Power(alpha, 4) * low + \n             4 * (1 – alpha) * Gl[1] – 6 * Power( 1 - alpha, 2 ) * Gl[2] + \n             4 * Power( 1 - alpha, 3 ) * Gl[3] - Power( 1 - alpha, 4 ) * Gl[4];\ndef Gc = Power(alpha, 4) * data + \n             4 * (1 – alpha) * Gc[1] – 6 * Power( 1 - alpha, 2 ) * Gc[2] + \n             4 * Power( 1 - alpha, 3 ) * Gc[3] - Power( 1 - alpha, 4 ) * Gc[4];\n# Variables:\ndef o;\ndef h;\ndef l;\ndef c;\ndef CU1;\ndef CU2;\ndef CU;\ndef CD1;\ndef CD2;\ndef CD;\ndef L0;\ndef L1;\ndef L2;\ndef L3;\nplot RSI;\nplot OS;\nplot OB;\nplot M;\n\n# Calculations\no = (Go + Gc[1]) / 2;\nh = Max(Gh, Gc[1]);\nl = Min(Gl, Gc[1]);\nc = (o + h + l + Gc) / 4;\nplot gamma = Log(Sum((Max(Gh, Gc[1]) - Min(Gl, Gc[1])), nFE) / \n        (Highest(gh, nFE) - Lowest(Gl, nFE)))\n            / Log(nFE);\ngamma.SetDefaultColor(Color.Yellow);\nL0 = (1 – gamma) * Gc + gamma * L0[1];\nL1 = -gamma * L0 + L0[1] + gamma * L1[1];\nL2 = -gamma * L1 + L1[1] + gamma * L2[1];\nL3 = -gamma * L2 + L2[1] + gamma * L3[1];\nif L0 &gt;= L1\nthen {\n    CU1 = L0 - L1;\n    CD1 = 0;\n} else {\n    CD1 = L1 - L0;\n    CU1 = 0;\n}\nif L1 &gt;= L2\nthen {\n    CU2 = CU1 + L1 - L2;\n    CD2 = CD1;\n} else {\n    CD2 = CD1 + L2 - L1;\n    CU2 = CU1;\n}\nif L2 &gt;= L3\nthen {\n    CU = CU2 + L2 - L3;\n    CD = CD2;\n} else {\n    CU = CU2;\n    CD = CD2 + L3 - L2;\n}\n\nRSI = if CU + CD &lt;&gt; 0 then CU / (CU + CD) else 0;\nRSI.SetDefaultColor(Color.Cyan);\nOS = if IsNaN(c) then Double.NaN else 0.2;\nOS.SetDefaultColor(Color.gray);\nOS.HideBubble();\nOS.HideTitle();\nOB = if IsNaN(c) then Double.NaN else 0.8;\nOB.SetDefaultColor(Color.gray);\nOB.HideBubble();\nOB.HideTitle();\nM = if IsNaN(c) then Double.NaN else 0.5;\nM.SetStyle(Curve.long_dash);\nM.SetDefaultColor(Color.Gray);\nM.HideBubble();\nM.HideTitle();\nplot FEh = if isNaN(c) then double.nan else .618;\nFEh.SetStyle(Curve.short_DASH);\nFEh.HideBubble();\nFEh.SetDefaultColor(Color.GRAY);\nFEh.HideTitle();\nplot FEl = if isNaN(c) then double.nan else .382;\nFEl.SetStyle(Curve.short_DASH);\nFEl.SetDefaultColor(Color.GRAY);\nFEl.HideBubble();\nFEl.HideTitle();\nAddCloud(0, OS, Color.RED, Color.green);\nAddCloud(OB, 1, Color.Green, Color.red);\nAlert(AlertOn and RSI crosses below .8, \&quot;\&quot;, Alert.BAR, Sound.Bell);\nAlert(AlertOn and RSI crosses above .2, \&quot;\&quot;, Alert.BAR, Sound.Bell);\n\n# End Code RSI_Laguerre Self Adjusting with Fractal Energy\n\n&quot;,name=&quot;_1bcebf6d_e1e3_39b0_b6f6_9d12427299d9&quot;}){alerts:LocalAlertArray1,alerts=@LocalAlertArray1})})}}" DEFAULT_TYPE="DASHBOARD" ORDER_ENTRY_EXPANDED="false" ORDER_ENTRY_PINNED_PROPERTY="false" ROW_COUNT="1" SHARED_USER_SCRIPTS="@v6@owner{chartAggregationPeriods:ChartAggregationPeriodArray0,chartAggregationPeriods=@ChartAggregationPeriodArray0}#java.util.HashMap{^(&quot;_60475667_d5a0_4a24_8038_b84ac1548626&quot;,&quot;TheoProjectionPivots&quot;),^(&quot;_f59c642e_bc17_46b6_b151_447e2c413c14&quot;,&quot;rsiLaguerreTime&quot;)}" SYMBOL="ZM" SYMBOL_GROUP="1" VERTICAL="false" VISIBLE="true" WEIGHT="3.0"/>
            <DASHBOARD SYMBOL="/ES" SYMBOL_GROUP="-1" VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <LEVEL_II VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <LIVE_NEWS VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <PHASE_SCORES VERTICAL="false" VISIBLE="false" WEIGHT="2.0"/>
            <TIME_SALES VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <TRADE CONFIGURATION_NAME="SINGLE" ORDER_RULES_SET="STOCK" ORDER_TYPE="LIMIT" OS_AUTO="false" OS_EXPANDED="false" OS_TIF="DAY" QTY="100.0" QTY_STEP="1.0" TEMPLATE="SINGLE" TRADE_BUTTONS="BUY_MKT;SELL_MKT;MULTI_CANCEL;REVERSE;FLAT;SECOND_LINE;QUANTITY;AUTO_SEND;ORDER_SETUP" VISIBLE="false">
              <OCO_STOP>
                <TRG_0 TRG_ENBL="true" TRG_LINK="ASK_BID" TRG_OFFSET_MODE="TICK" TRG_OT="STOP" TRG_SETUP="10.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AAL="10.0" AAPL="10.0" TGT="10.0" ZM="10.0"/>
                </TRG_0>
              </OCO_STOP>
              <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="1.0" TRG_TIF="DAY">
                <OFFSET_PER_SYMBOL AAL="1.0" AAPL="1.0" TGT="1.0" ZM="1.0"/>
              </TRG_0>
              <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-1.0" TRG_TIF="DAY">
                <OFFSET_PER_SYMBOL AAL="-1.0" AAPL="-1.0" TGT="-1.0" ZM="-1.0"/>
              </TRG_1>
              <_2>
                <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="2.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AAL="2.0" AAPL="2.0" TGT="2.0" ZM="2.0"/>
                </TRG_0>
                <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-2.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AAL="-2.0" AAPL="-2.0" TGT="-2.0" ZM="-2.0"/>
                </TRG_1>
              </_2>
              <_3>
                <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="3.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AAL="3.0" AAPL="3.0" TGT="3.0" ZM="3.0"/>
                </TRG_0>
                <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-3.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AAL="-3.0" AAPL="-3.0" TGT="-3.0" ZM="-3.0"/>
                </TRG_1>
              </_3>
            </TRADE>
          </CELL0>
          <CELL1 ROWSPANELWEIGHT="1.0" ROWWEIGHT0="1.0" ROWWEIGHT1="1.0" SELECTED_TYPE="DASHBOARD" SIDEBAR_IS_ACTIVE="true" SYMBOL_GROUP="-1" TRADE_BUTTONS_MIGRATED="true">
            <ACTIVETRADER VERTICAL="false" VISIBLE="false" WEIGHT="2.0"/>
            <BIG_BUTTONS VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <CHART VERTICAL="false" VISIBLE="false" WEIGHT="3.0"/>
            <DASHBOARD SYMBOL_GROUP="-1" VERTICAL="false" VISIBLE="true" WEIGHT="1.0"/>
            <LEVEL_II VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <LIVE_NEWS VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <PHASE_SCORES VERTICAL="false" VISIBLE="false" WEIGHT="2.0"/>
            <TIME_SALES VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <TRADE CONFIGURATION_NAME="SINGLE" OS_AUTO="false" OS_EXPANDED="false" OS_TIF="DAY" TEMPLATE="SINGLE" TRADE_BUTTONS="POSITION;WORKING_ORDERS;SECOND_LINE;ORDER_TEMPLATE;ORDER_SETUP" VISIBLE="true">
              <OCO_STOP>
                <TRG_0 TRG_ENBL="true" TRG_LINK="ASK_BID" TRG_OFFSET_MODE="TICK" TRG_OT="STOP" TRG_SETUP="10.0" TRG_TIF="DAY"/>
              </OCO_STOP>
              <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="1.0" TRG_TIF="DAY"/>
              <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-1.0" TRG_TIF="DAY"/>
              <_2>
                <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="2.0" TRG_TIF="DAY"/>
                <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-2.0" TRG_TIF="DAY"/>
              </_2>
              <_3>
                <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="3.0" TRG_TIF="DAY"/>
                <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-3.0" TRG_TIF="DAY"/>
              </_3>
            </TRADE>
          </CELL1>
          <CELL2 ROWSPANELWEIGHT="1.0" ROWWEIGHT0="1.0" ROWWEIGHT1="1.0" SELECTED_TYPE="DASHBOARD" SIDEBAR_IS_ACTIVE="true" SYMBOL_GROUP="-1" TRADE_BUTTONS_MIGRATED="true">
            <ACTIVETRADER VERTICAL="false" VISIBLE="false" WEIGHT="2.0"/>
            <BIG_BUTTONS VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <CHART VERTICAL="false" VISIBLE="false" WEIGHT="3.0"/>
            <DASHBOARD SYMBOL_GROUP="-1" VERTICAL="false" VISIBLE="true" WEIGHT="1.0"/>
            <LEVEL_II VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <LIVE_NEWS VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <PHASE_SCORES VERTICAL="false" VISIBLE="false" WEIGHT="2.0"/>
            <TIME_SALES VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <TRADE CONFIGURATION_NAME="SINGLE" OS_AUTO="false" OS_EXPANDED="false" OS_TIF="DAY" TEMPLATE="SINGLE" TRADE_BUTTONS="POSITION;WORKING_ORDERS;SECOND_LINE;ORDER_TEMPLATE;ORDER_SETUP" VISIBLE="true">
              <OCO_STOP>
                <TRG_0 TRG_ENBL="true" TRG_LINK="ASK_BID" TRG_OFFSET_MODE="TICK" TRG_OT="STOP" TRG_SETUP="10.0" TRG_TIF="DAY"/>
              </OCO_STOP>
              <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="1.0" TRG_TIF="DAY"/>
              <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-1.0" TRG_TIF="DAY"/>
              <_2>
                <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="2.0" TRG_TIF="DAY"/>
                <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-2.0" TRG_TIF="DAY"/>
              </_2>
              <_3>
                <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="3.0" TRG_TIF="DAY"/>
                <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-3.0" TRG_TIF="DAY"/>
              </_3>
            </TRADE>
          </CELL2>
          <CELL3 ROWSPANELWEIGHT="1.0" ROWWEIGHT0="1.0" ROWWEIGHT1="1.0" SELECTED_TYPE="DASHBOARD" SIDEBAR_IS_ACTIVE="true" SYMBOL_GROUP="-1" TRADE_BUTTONS_MIGRATED="true">
            <ACTIVETRADER VERTICAL="false" VISIBLE="false" WEIGHT="2.0"/>
            <BIG_BUTTONS VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <CHART VERTICAL="false" VISIBLE="false" WEIGHT="3.0"/>
            <DASHBOARD SYMBOL_GROUP="-1" VERTICAL="false" VISIBLE="true" WEIGHT="1.0"/>
            <LEVEL_II VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <LIVE_NEWS VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <PHASE_SCORES VERTICAL="false" VISIBLE="false" WEIGHT="2.0"/>
            <TIME_SALES VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <TRADE CONFIGURATION_NAME="SINGLE" OS_AUTO="false" OS_EXPANDED="false" OS_TIF="DAY" TEMPLATE="SINGLE" TRADE_BUTTONS="POSITION;WORKING_ORDERS;SECOND_LINE;ORDER_TEMPLATE;ORDER_SETUP" VISIBLE="true">
              <OCO_STOP>
                <TRG_0 TRG_ENBL="true" TRG_LINK="ASK_BID" TRG_OFFSET_MODE="TICK" TRG_OT="STOP" TRG_SETUP="10.0" TRG_TIF="DAY"/>
              </OCO_STOP>
              <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="1.0" TRG_TIF="DAY"/>
              <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-1.0" TRG_TIF="DAY"/>
              <_2>
                <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="2.0" TRG_TIF="DAY"/>
                <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-2.0" TRG_TIF="DAY"/>
              </_2>
              <_3>
                <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="3.0" TRG_TIF="DAY"/>
                <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-3.0" TRG_TIF="DAY"/>
              </_3>
            </TRADE>
          </CELL3>
          <GROUPING_POS_STMT_SIZE_MODEL COMMON_COLUMN_RATIOS="0.3333333333333333;0.3333333333333333;0.3333333333333333" SECTION_RATIOS="0.15151515151515152;0.5252525252525253;0.32323232323232326">
            <MIDDLE_COLUMN_RATIOS>
              <ACCEPTOR_3CD77CBA48969437B3885A830F941EE2FD7B5BB0420F21BEBAEB4F46EAE7D4B0 RATIOS="0.15730337078651685;0.16853932584269662;0.2247191011235955;0.2247191011235955;0.2247191011235955"/>
            </MIDDLE_COLUMN_RATIOS>
          </GROUPING_POS_STMT_SIZE_MODEL>
          <MODELNODE0 COUNT="2" ROWLAYOUT="false" TYPE="SPLIT" WEIGHT="0.0">
            <MODELNODE0 COUNT="2" ROWLAYOUT="true" TYPE="SPLIT" WEIGHT="0.5010224948875256">
              <MODELNODE0 COMPOSITENAME="CELL0" NAME="0" TYPE="LEAF" WEIGHT="0.5"/>
              <MODELNODE1 COMPOSITENAME="CELL1" NAME="1" TYPE="LEAF" WEIGHT="0.5"/>
            </MODELNODE0>
            <MODELNODE1 COUNT="2" ROWLAYOUT="true" TYPE="SPLIT" WEIGHT="0.49897750511247446">
              <MODELNODE0 COMPOSITENAME="CELL2" NAME="2" TYPE="LEAF" WEIGHT="0.5"/>
              <MODELNODE1 COMPOSITENAME="CELL3" NAME="3" TYPE="LEAF" WEIGHT="0.5"/>
            </MODELNODE1>
          </MODELNODE0>
          <POSITION1 EXPANDED="true"/>
          <POSITION_TABLE POSITION_TABLE="QTY,DAYS,TRADE_PRICE,MARK_PRICE,MARK_CHANGE"/>
        </FUTURES_TRADER>
        <GADGETS>
          <SCRATCHPAD DOC="&lt;html id=&quot;scratchpad&quot;&gt;&lt;/html&gt;"/>
        </GADGETS>
        <GADGET_STACK_LAYOUT SCROLL_POSITION="0">
          <GADGET0 EXPANDED="false" GADGET_NAME="Account Info" LOCKED="true">
            <ACTIVE_ACCOUNT COMPONENTS="OPTION_BP,FX_BP,NET_LIQ,DTBP,DT_LEFT,UNSETTLED_CASH,CASH_AND_MONEY_MARKET_FUNDS,INTRADAY_LIQ_FUNDS,AVAILABLE_FUNDS_FOR_TRADING,FUTURES_VOLUME_MTD" ITEM_DISPLAY_MODE="HIDE_UNSED"/>
          </GADGET0>
          <GADGET1 EXPANDED="true" GADGET_NAME="Live News" HEIGHT="174" LOCKED="false">
            <LIVE_NEWS SYMBOL="DCTH" SYMBOL_FILTER_WATCHLIST="0" SYMBOL_GROUP="2">
              <SORTING COLUMN="TIME" ORDER="-1"/>
            </LIVE_NEWS>
          </GADGET1>
          <GADGET2 EXPANDED="true" GADGET_NAME="Watchlist" HEIGHT="221" LOCKED="false">
            <SORTING COLUMN="SYMBOL" ORDER="1"/>
            <WATCHLIST COLUMNS="SYMBOL:122:,LAST:50:,LOW:45:,HIGH:43:,NET_CHANGE:38:,PERCENT_CHANGE:35:,CUSTOM8:29:,&lt;arrow&gt;:11:F:F" COMPLEX_COLUMNS="CUSTOM7:S,CUSTOM8:S,CUSTOM5:S,CUSTOM6:S,CUSTOM4:S,CUSTOM1:S,CUSTOM2:S,CUSTOM9:S,CUSTOM17:S,CUSTOM16:S,CUSTOM26:S,CUSTOM14:S,CUSTOM13:S,CUSTOM24:S,ADX:S,CUSTOM23:S,CUSTOM11:S,CUSTOM22:S,CUSTOM10:S,CUSTOM19:S,CUSTOM18:S" SYMBOL_GROUP="2" WATCH_LIST_ID="142848338"/>
          </GADGET2>
          <GADGET3 EXPANDED="true" GADGET_NAME="Watchlist" HEIGHT="152" LOCKED="false">
            <SORTING/>
            <WATCHLIST COLUMNS="SYMBOL:50:,LAST:46:,LOW:20:,HIGH:20:,NET_CHANGE:51:,PERCENT_CHANGE:20:,CUSTOM8:20:,&lt;arrow&gt;:11:F:F" COMPLEX_COLUMNS="CUSTOM7:S,CUSTOM8:S,CUSTOM5:S,CUSTOM6:S,CUSTOM4:S,CUSTOM1:S,CUSTOM2:S,CUSTOM9:S,CUSTOM17:S,CUSTOM16:S,CUSTOM26:S,CUSTOM14:S,CUSTOM13:S,CUSTOM24:S,ADX:S,CUSTOM23:S,CUSTOM11:S,CUSTOM22:S,CUSTOM10:S,CUSTOM19:S,CUSTOM18:S" SYMBOL_GROUP="2" WATCH_LIST_ID="144683145"/>
          </GADGET3>
          <GADGET4 EXPANDED="true" GADGET_NAME="Watchlist" HEIGHT="152" LOCKED="false">
            <SORTING/>
            <WATCHLIST COLUMNS="SYMBOL:50:,LAST:46:,NET_CHANGE:51:,BID:43:,ASK:43:,&lt;arrow&gt;:11:F:F" COMPLEX_COLUMNS="CUSTOM7:S,CUSTOM8:S,CUSTOM5:S,CUSTOM6:S,CUSTOM4:S,CUSTOM1:S,CUSTOM2:S,CUSTOM9:S,CUSTOM17:S,CUSTOM16:S,CUSTOM26:S,CUSTOM14:S,CUSTOM13:S,CUSTOM24:S,ADX:S,CUSTOM23:S,CUSTOM11:S,CUSTOM22:S,CUSTOM10:S,CUSTOM19:S,CUSTOM18:S" SYMBOL_GROUP="2" WATCH_LIST_ID="132155999"/>
          </GADGET4>
          <GADGET5 EXPANDED="true" GADGET_NAME="Quick Chart" HEIGHT="302" LOCKED="false">
            <QUICK_CHART_GADGET>
              <CHART CONFIGURATION="@v9@%0:com.devexperts.tos.chartdata,1:com.devexperts.tos.thinkscript.constants,2:com.devexperts.tos.thinkscript.data,3:com.devexperts.toschart.control.subgraph,4:com.devexperts.toschart.elstudies,5:com.devexperts.toschart.script%owner{chartAggregationPeriods:ChartAggregationPeriodArray0{17::ChartAggregationPeriod0},chartAggregationPeriods=@ChartAggregationPeriodArray0}#com.devexperts.toschart.core.ChartModel{encodedMixinsState=&quot;{\&quot;common\&quot;:{\&quot;DRAWING_SETS\&quot;:\&quot;{}\&quot;},\&quot;state_props\&quot;:{\&quot;state_type\&quot;:\&quot;REGULAR\&quot;},\&quot;monkey_bars_exp\&quot;:{\&quot;LikefolioMixin\&quot;:\&quot;{\\\&quot;paintingSettings\\\&quot;:{\\\&quot;neutralSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;positiveSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;negativeSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;sentimentSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true}},\\\&quot;shownDivisions\\\&quot;:[],\\\&quot;allDivisions\\\&quot;:[]}\&quot;},\&quot;monkey_bars\&quot;:{},\&quot;seasonality\&quot;:{},\&quot;regular\&quot;:{\&quot;DescriberMixin\&quot;:\&quot;{\\\&quot;visibility\\\&quot;:\\\&quot;HIDE_PANEL\\\&quot;,\\\&quot;studiesMode\\\&quot;:\\\&quot;HIDE_STUDIES\\\&quot;}\&quot;,\&quot;LikefolioMixin\&quot;:\&quot;{\\\&quot;paintingSettings\\\&quot;:{\\\&quot;neutralSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;positiveSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;negativeSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;sentimentSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true}},\\\&quot;shownDivisions\\\&quot;:[],\\\&quot;allDivisions\\\&quot;:[]}\&quot;}}&quot;,encodedPatternsModel=&quot;{\&quot;showPatterns\&quot;:true,\&quot;models\&quot;:[],\&quot;fibModels\&quot;:[]}&quot;,groupId=&quot;default&quot;,styleSettings{chartAggregationSettings.timeAggregationSettings=!com.devexperts.toschart.model.TimeFrameAggregationSettings.createTickOrTimeAggregation(!%0.ChartRange.findByCode(&quot;DAY90&quot;),@ChartAggregationPeriod0),commonStyleSettings{chartModeName:ChartModeName0,chartModes.!get(@ChartModeName0){chartPaintingType=!java.lang.Enum.valueOf(*%1.ChartPaintingType.class,&quot;CANDLE_TREND&quot;)},colorSettings{backgroundColor=!%2.CustomColor.findByIndex(&quot;101&quot;),candleTypeColors.fillUp=&lt;T,monkeyProfileTypeColors.defaultRowHeight=&lt;F,mpExpandedTypeColors.defaultRowHeight=&lt;F},expansion.right=23,fitArrowsToScreen=&lt;F,fitStudiesToScreen=&lt;F,leftAxisRegulator{maxValue=21.34114905d,minValue=16.81218429d},manualAxisRegulator{maxValue=21.30683616d,minValue=11.29426554d},overlappedVolume=&lt;T,previousRightExpansion=23,shortCuts{^(&quot;Time Zone&quot;,&lt;F),^(&quot;Show Expiration Friday &quot;,&lt;F),^(&quot;Keep Price Zoom&quot;,&lt;F),^(&quot;enableLeftAxis&quot;,&lt;F),^(&quot;Fit expected price ranges&quot;,&lt;F),^(&quot;emphasizeDigitMPExpanded&quot;,&lt;F),^(&quot;showWicksCandleTrend&quot;,&lt;F),^(&quot;highlightEarnings&quot;,&lt;F),^(&quot;synchronizeCrosshair&quot;,&lt;F),^(&quot;myToolsMode&quot;,&lt;F),^(&quot;seasonalityStyle&quot;,&lt;F),^(&quot;Show Price Subgraph&quot;,&lt;F),^(&quot;closePriceLevel&quot;,&lt;F),^(&quot;Color Volume As Symbol Ticks&quot;,&lt;F),^(&quot;highlightPhantomRBars&quot;,&lt;F),^(&quot;Cross type &quot;,&lt;F),^(&quot;Fit Studies to Screen&quot;,&lt;F),^(&quot;Fit Orders&quot;,&lt;F),^(&quot;Bubbles as Percentage&quot;,&lt;F),^(&quot;hideStatusString&quot;,&lt;F),^(&quot;Show Studies &quot;,&lt;F),^(&quot;showWicksHeikinAshi&quot;,&lt;F),^(&quot;Alerts&quot;,&lt;F),^(&quot;Chart scale&quot;,&lt;F),^(&quot;Fit High/Low&quot;,&lt;F),^(&quot;Orders&quot;,&lt;F),^(&quot;Use Log Scale &quot;,&lt;F),^(&quot;Fit Study Markers to Screen&quot;,&lt;F),^(&quot;Fit Alerts&quot;,&lt;F),^(&quot;Fit patterns&quot;,&lt;F),^(&quot;Percentage View&quot;,&lt;F),^(&quot;Make Auto Zoom &quot;,&lt;F),^(&quot;Show Year Marking Line&quot;,&lt;F),^(&quot;Show Rollover Line&quot;,&lt;F),^(&quot;Show High/Low Bubbles &quot;,&lt;F),^(&quot;Snap mode&quot;,&lt;F),^(&quot;highlightStudies&quot;,&lt;F),^(&quot;Overlapped Volume&quot;,&lt;F),^(&quot;Show Symbol Logo&quot;,&lt;F),^(&quot;Show Last Price Bubble &quot;,&lt;F),^(&quot;emphasizeDigitMP&quot;,&lt;F),^(&quot;Snap crosshairs to&quot;,&lt;F),^(&quot;Show grid&quot;,&lt;F),^(&quot;showWicksCandle&quot;,&lt;F),^(&quot;Show trades&quot;,&lt;F),^(&quot;highlightSeasons&quot;,&lt;F),^(&quot;Snap drawings to&quot;,&lt;F),^(&quot;Extend Order/Alert Line to Left&quot;,&lt;F),!get:Boolean0(&quot;Chart mode&quot;)},showBubbles=&lt;F,showExpFriday=&lt;F,showGrid=&lt;F,step=3.134796238244514d,volumeColorByTicks=&lt;T},forexStyleSettings.shortCuts.^(&quot;Show Volume Subgraph&quot;,&lt;F),futuresStyleSettings{highlightExtendedHours=&lt;T,shortCuts{^(&quot;adjustForContractChanges&quot;,&lt;F),^(&quot;Show Open Interest&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,@Boolean0),^(&quot;showContractChangeEvents&quot;,&lt;F),^(&quot;futures_daily_close_price&quot;,&lt;F),^(&quot;Show Options&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,&lt;F),^(&quot;startAtMarketOpen&quot;,&lt;F)},tradingHoursOnly=&lt;T},optionsStyleSettings.shortCuts{^(&quot;Show Open Interest&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,@Boolean0),^(&quot;Show Theo Price&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,&lt;F),^(&quot;startAtMarketOpen&quot;,&lt;F)},otherStyleSettings{shortCuts{^(&quot;Show Social Sentiment&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,@Boolean0),^(&quot;Show Options&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,&lt;F),^(&quot;Show Corporate Actions&quot;,&lt;F),^(&quot;Show CNBC Video&quot;,&lt;F),^(&quot;startAtMarketOpen&quot;,&lt;F),^(&quot;adjustForDividends&quot;,&lt;F)},showCorpActions=&lt;F,startAggregationAtMarketOpen=&lt;F,tradingHoursOnly=&lt;T},setsIdentifiers.styleSetName=&quot;DEF_X_STYLE&quot;},subgraphModels{!get(#%3.SubgraphId(&quot;Symbol&quot;)){height=225,storableIndicators{+(!%4.CompiledStudy.resolveStudy(#%5.ScriptEssence{body=&quot;###############################################################################################################################################\n################################################################################################################################################\n#\n# Author: Kory Gill, [USER=212]@korygill[/USER]\n#\n# Created from idea on https://usethinkscript.com/threads/finite-volume-elements.593/\n# Original idea is from http://mkatsanos.com/FVE.html\n#\n# VERSION HISTORY (sortable date and time (your local time is fine), and your initials\n# 20190907-1200-KG    - Created.\n\n###############################################################################\n### NORMALIZATION (Volume Damping adaptation) by Ramon Del Villar AKA PElonsax\n### 7/20/2020 #################################################################\n###############################################################################\n# The damping logic is taken directly from VFI #\n\n#declare once_per_bar;\n\n\n#################################################################$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n\n#########################################%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%$$$$$$$$$$$$$$$$$\n\n\n\n#\n# inputs\n#\ninput RSI_prev = 2; #previous bar to check\ninput def_cond = no;\ninput Samples = 14;\n\n\n\n#vwap vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\n#input numDevUp = 2.0;\ninput vwapTimeFrame = {default DAY, WEEK, MONTH};\n\ndef cap = getAggregationPeriod();\ndef errorInAggregation =\n    vwapTimeFrame == vwapTimeFrame.DAY and cap &gt;= AggregationPeriod.WEEK or\n    vwapTimeFrame== vwapTimeFrame.WEEK and cap &gt;= AggregationPeriod.MONTH;\nassert(!errorInAggregation, \&quot;timeFrame should be not less than current chart aggregation period\&quot;);\n\ndef yyyyMmDd = getYyyyMmDd();\ndef periodIndx;\nswitch (vwapTimeFrame) {\ncase DAY:\n    periodIndx = yyyyMmDd;\ncase WEEK:\n    periodIndx = Floor((daysFromDate(first(yyyyMmDd)) + getDayOfWeek(first(yyyyMmDd))) / 7);\ncase MONTH:\n    periodIndx = roundDown(yyyyMmDd / 100, 0);\n}\ndef isPeriodRolled = compoundValue(1, periodIndx != periodIndx[1], yes);\n\ndef volumeSum;\ndef volumeVwapSum;\ndef volumeVwap2Sum;\n\nif (isPeriodRolled) {\n    volumeSum = volume;\n    volumeVwapSum = volume * vwap;\n    volumeVwap2Sum = volume * Sqr(vwap);\n} else {\n    volumeSum = compoundValue(1, volumeSum[1] + volume, volume);\n    volumeVwapSum = compoundValue(1, volumeVwapSum[1] + volume * vwap, volume * vwap);\n    volumeVwap2Sum = compoundValue(1, volumeVwap2Sum[1] + volume * Sqr(vwap), volume * Sqr(vwap));\n}\ndef vWapprice = volumeVwapSum / volumeSum;\ndef deviation = Sqrt(Max(volumeVwap2Sum / volumeSum - Sqr(vWapprice), 0));\n\ndef VWAP = vWapprice;\n\n\n\ninput vwapCondition =no;\n#input vp=close;\ndef conVwapBuy =if  vwapCondition then  close &gt;= VWAp else 1;\n\n#####^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n\n#\n# FVE logic\n#\ndef bn = BarNumber();\ndef nan = double.NaN;\n\n\ninput maxVolumeCutOff = 2.5;\n###Coefficient used in calculation of “Cut Off” value. Lower values mean stronger damping of volume spikes###\n\nAssert(maxVolumeCutOff &gt; 0, \&quot;\'max volume cut off\' must be positive: \&quot; + maxVolumeCutOff);\n\ndef cutOff = 0.2 * StDev(Log(hlc3) - Log(hlc3[1]), 30) * close;\ndef hlcChange = hlc3 - hlc3[1];\ndef avgVolume = Average(volume, 30)[1];\ndef minVolume = Min(volume, avgVolume * maxVolumeCutOff);\ndef dirVolume = if hlcChange &gt; cutOff\n    then minVolume\n    else if hlcChange &lt; -cutOff\n        then -minVolume\n        else 0;\n\n\ndef mf = (close - (high+low)/2) + hlc3 - hlc3 [1];\ndef fveSum = Sum(dirVolume, Samples);\n\ndef fve = if bn &gt; Samples\n          then (fveSum / (Average(avgVolume, Samples) * Samples)) * 100\n          else nan;\n\n\n#\n# plots\n#\ndef pFVE = fve;\n\ndef pFVE_MA = MovingAverage(AverageType.SIMPLE, fve, 30);\n#pFVE_MA.SetDefaultColor(Color.Gray);\n#PFVE_MA.SetPaintingStrategy(PaintingStrategy.DASHES);\n\ndef zeroLine = 0;\ndef pFVE_Bull = if pFVE crosses above pFVE_MA then pFVE  else double.NaN ;\ndef pFVE_Bear = if pFVE &gt; pFVE_MA and pFVE[1] &gt; pFVE then pFVE else double.NaN ;\n\n#format plot \n\n#zeroLine.SetDefaultColor(Color.White);\n#pFVE.AssignValueColor(if pFVE &gt; pFVE_MA then color.green else color.red) ;\n#pFVE.SetLineWeight(3);\n\n\n#pFVE_Bull.SetPaintingStrategy(PaintingStrategy.SQUARES);\n#pFVE_Bull.SetLineWeight(5);\n#pFVE_Bull.SetDefaultColor(color.dark_green) ;\n\n#pFVE_Bear.SetPaintingStrategy(PaintingStrategy.SQUARES);\n#pFVE_Bear.SetLineWeight(5);\n#pFVE_Bear.SetDefaultColor(color.white) ;\n\n#AddCloud(pFVE, pFVE_MA, color.light_green, color.pink);\n\n\n\n#####################################################################################################################################################\n\n\n\n# Simple 2 Period RSI Trading Indicator\n# Assembled by BenTen at useThinkScript.com\n# You are free to use this code for personal use, and make derivative works from it. You are NOT GRANTED permission to use this code (or derivative works) for commercial purposes which includes and is not limited to selling, reselling, or packaging with other commercial indicators. Headers and attribution in this code should remain as provided, and any derivative works should extend the existing headers.\n\n#MACD\ninput price = close;\n#input length_macd = 14;\ninput displace = 0;\n#input showBreakoutSignals = no;\ninput crossingType = {default above, below};\n\ninput fastLength = 12;\ninput slowLength = 26;\ninput MACDLength = 9;\ndef fastAvg = Sum(volume * price, fastLength) / Sum(volume, fastLength);\ndef slowAvg = Sum(volume * price, slowLength) / Sum(volume, slowLength);\ndef Value = fastAvg - slowAvg;\ndef Avg = ExpAverage(Value, MACDLength);\ndef MACD_Diff  = Value - Avg;\n#def ZeroLine = 0;\n\n# RSI\ninput rsiLength = 14;\ninput overBought = 80;\ninput overSold = 28;\ninput rsiBuyLevel =40;\ninput averageType = AverageType.WILDERS;\ndef NetChgAvg = MovingAverage(averageType, price - price[1], RSIlength);\ndef TotChgAvg = MovingAverage(averageType, AbsValue(price - price[1]), RSIlength);\ndef ChgRatio = if TotChgAvg != 0 then NetChgAvg / TotChgAvg else 0;\ndef RSI = 50 * (ChgRatio + 1);\n#def OverSold = overSold;\n#def OverBought = overBought;\n\n#test\n#plot p= VWAp;#(period= AggregationPeriod.DAY);\n\n####################################\n\ndef cond_logic = if (def_cond) then MACD_Diff &lt;= 0 else yes;\n######\n#def sig_buy = Crosses(RSI(length = RSIlength, averageType = averageType).RSI, over_Sold, crossingType == crossingType.above) within RSI_prev bars and pFVE_Bull and cond_logic; # and Diff &lt;= 0;\ndef sig_buy = conVwapBuy and RSI&lt; rsiBuyLevel and pFVE_Bull  and cond_logic ;# and Diff &gt;= 0;\n#def sig_buy = pFVE_Bull and Diff &gt;= 0;\nplot signal_buy = sig_buy ;\n\n\ndef sig_sell = Crosses(RSI(length = RSIlength, averageType = averageType).RSI, overBought, crossingType == crossingType.below) within RSI_prev bars and pFVE_Bear ;\nplot signal_sell = sig_sell;\n\nsignal_buy.DefineColor(\&quot;Above\&quot;, Color.YELLOW);\nsignal_buy.DefineColor(\&quot;Below\&quot;, GetColor(8));\nsignal_buy.AssignValueColor(if crossingType == crossingType.above then signal_buy.Color(\&quot;Above\&quot;) else signal_buy.Color(\&quot;Below\&quot;));\nsignal_buy.setlineWeight(5);\nsignal_buy.SetPaintingStrategy(if crossingType == crossingType.above\n    then PaintingStrategy.BOOLEAN_ARROW_UP\n    else PaintingStrategy.BOOLEAN_ARROW_DOWN);\n\nsignal_sell.DefineColor(\&quot;Above\&quot;, Color.VIOLET);\nsignal_sell.DefineColor(\&quot;Below\&quot;, GetColor(8));\nsignal_sell.AssignValueColor(if crossingType == crossingType.above then signal_sell.Color(\&quot;Above\&quot;) else signal_sell.Color(\&quot;Below\&quot;));\n\nsignal_sell.SetPaintingStrategy(if crossingType == crossingType.above\n    then PaintingStrategy.BOOLEAN_ARROW_DOWN\n    else PaintingStrategy.BOOLEAN_ARROW_UP);\nsignal_sell.setlineWeight(5);\ninput bubble =no; \nAddChartBubble(bubble and sig_sell == 1, price, \&quot;S= \&quot; + price + \&quot; rsi \&quot; + RSI, Color.VIOLET, no);&quot;,name=&quot;_259d509b_f440_4edf_840b_2df1df75ab8c&quot;}){inputsMap:TreeMap0{^(&quot;price&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap0,plots{0:{lineWeight=4},1:{lineWeight=4}}}),+(!%4.CompiledStudy.resolveStudy(#%5.ScriptEssence{body=&quot;#start\n\n#hint: &lt;b&gt;Ask SLM Ribbon&lt;/b&gt;\\nThe Ask SLM Ribbon is a momentum indicator that uses a combination of three exponential moving averages. When the averages are in alinement, with the \&quot;superfast\&quot; moving average above the \&quot;fast\&quot; moving average and the fast moving average above the \&quot;slow\&quot; moving average, the momentum condition is positive. A \&quot;buy signal\&quot; is generated, with an up arrow, when above conditions are met and a \&quot;clear bar\&quot; occurs; with the low of that bar is above all of the moving averages. The positive momentum ends if the superfast moving average touches the fast moving average; then condition is considered neutral and an oppostive arrow will appear. Negative momentum and a \&quot;Sell signal\&quot; are the opposite of the bullish conditions. \\n \\n\\n--------------------------------------------------------------------------------\\nVolume bars can be colored to match the Chart by clicking on Style&gt;Settings&gt;Appearance&gt;Common, and color symbol as ticks  \\n\n\n \n\ninput price = close;\n\ninput superfast_length = 8;\n\ninput fast_length = 13;\n\ninput slow_length = 21;\n\ninput displace = 0;\ninput paint_bar = no;\n\n################\ninput averageType = AverageType.EXPONENTIAL;\n\ndef mov_avg8 = MovingAverage(averageType, price[-displace], superfast_length);\n\ndef mov_avg13 = MovingAverage(averageType, price[-displace], fast_length);\n\ndef mov_avg21 = MovingAverage(averageType, price[-displace], slow_length);\n\n \n\n#moving averages\n\nplot Superfast = mov_avg8;\n\nplot Fast = mov_avg13;\n\nplot Slow = mov_avg21;\n\n\n\ndef buy = mov_avg8 &gt; mov_avg13 and mov_avg13 &gt; mov_avg21 and low &gt; mov_avg8;\n\ndef stopbuy = mov_avg8 &lt;= mov_avg13;\n\ndef buynow = !buy[1] and buy;\n\ndef buysignal = CompoundValue(1, if buynow and !stopbuy then 1 else if buysignal[1] == 1 and stopbuy then 0 else buysignal[1], 0);\n\n\n\nplot Buy_Signal = buysignal[1] == 0 and buysignal == 1;\n\nBuy_Signal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\n\nBuy_Signal.SetDefaultColor(Color.DARK_GREEN);\n\nBuy_Signal.HideTitle();\nBuy_Signal.SetLineWeight(3);\nAlert(condition = buysignal[1] == 0 and buysignal == 1, text = \&quot;Buy Signal\&quot;, sound = Sound.Bell, \&quot;alert type\&quot; = Alert.BAR);\n\n\n\nplot Momentum_Down = buysignal[1] == 1 and buysignal == 0;\n\nMomentum_Down.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);\n\nMomentum_Down.SetDefaultColor(Color.PLUM);\n\nMomentum_Down.HideTitle();\n\nMomentum_Down.SetLineWeight(3);\nAlert(condition = buysignal[1] == 1 and buysignal == 0, text = \&quot;Momentum_Down\&quot;, sound = Sound.Bell, \&quot;alert type\&quot; = Alert.BAR);\n\n\n\ndef sell = mov_avg8 &lt; mov_avg13 and mov_avg13 &lt; mov_avg21 and high &lt; mov_avg8;\n\ndef stopsell = mov_avg8 &gt;= mov_avg13;\n\ndef sellnow = !sell[1] and sell;\n\ndef sellsignal = CompoundValue(1, if sellnow and !stopsell then 1 else if sellsignal[1] == 1 and stopsell then 0 else sellsignal[1], 0);\n\n\n\n\nplot Sell_Signal = sellsignal[1] == 0 and sellsignal;\n\nSell_Signal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);\n\nSell_Signal.SetDefaultColor(Color.RED);\n\nSell_Signal.HideTitle();\nSell_Signal.SetLineWeight(3);\nAlert(condition = sellsignal[1] == 0 and sellsignal == 1, text = \&quot;Sell Signal\&quot;, sound = Sound.Bell, \&quot;alert type\&quot; = Alert.BAR);\n\n\n\nplot Momentum_Up = sellsignal[1] == 1 and sellsignal == 0;\n\nMomentum_Up.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\n\nMomentum_Up.SetDefaultColor(Color.BLUE);\n\nMomentum_Up.HideTitle();\n\nMomentum_Up.SetLineWeight(3);\nAlert(condition = sellsignal[1] == 1 and sellsignal == 0, text = \&quot;Momentum_Up\&quot;, sound = Sound.Bell, \&quot;alert type\&quot; = Alert.BAR);\n\n\n\nplot Colorbars = if buysignal == 1 then 1 else if sellsignal == 1 then 2 else if buysignal == 0 or sellsignal == 0 then 3 else 0;\n\n#Colorbars.SetHiding(!paint_bar);\n\n#Colorbars.DefineColor(\&quot;Buy_Signal_Bars\&quot;, Color.DARK_GREEN);\n\n#Colorbars.DefineColor(\&quot;Sell_Signal_Bars\&quot;, Color.RED);\n\n#Colorbars.DefineColor(\&quot;Neutral\&quot;, Color.PLUM);\n#Colorbars.SetHiding(!paint_bar);\n\n\nAssignPriceColor(if Colorbars == 1 then Colorbars.Color(\&quot;buy_signal_bars\&quot;) else if Colorbars == 2 then Colorbars.Color(\&quot;Sell_Signal_bars\&quot;) else  Colorbars.Color(\&quot;neutral\&quot;));\n\n############################################\n\n#Superfast.SetDefaultColor(GetColor(0));\n#Fast.SetDefaultColor(GetColor(1));\n#Slow.SetDefaultColor(GetColor(5));\n\n\nSuperfast.SetDefaultColor( Color.Cyan);\n\nFast.SetDefaultColor( Color.Gray);\n\nSlow.SetDefaultColor(GetColor(5));\nSlow.SetStyle(Curve.Medium_DASH);\n\n\n\n\n#end&quot;,name=&quot;_d32b15e4_bf81_441f_be67_162a0593b898&quot;}){alerts:LocalAlertArray0,alerts=@LocalAlertArray0,inputsMap:TreeMap1{^(&quot;price&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap1})}},!get(#%3.SubgraphId(&quot;Volume&quot;)){height=109,storableIndicators.+(!%4.CompiledStudy.resolveStudy(#%5.ScriptEssence{body=&quot;# Modified by Mahi\n# Second Mod by Ramon DV\n\ndeclare on_volume;\n\n#Inputs\n\ninput ShowDayAvg = yes;\ninput AvgDayVolLength = 30;\ninput ShowTodayVolume = yes;\ninput ShowTodayVolumeProjection = yes;\ninput ShowPercentOfDayAvg = yes;\ninput UnusualVolumePercent = 200;\ninput ShowBarAvg = yes;\ninput AvgBarVolLength = 30;\ninput ShowCurrentBar = yes;\ninput ShowPercentOfBarAvg = yes;\ninput ShowSellVolumePercent = yes;\ninput ShowBuyVolumePercent = yes;\ninput AvgType = AverageType.SIMPLE;\n\ndef O = open;\ndef H = high;\ndef C = close;\ndef L = low;\ndef V = volume;\ndef buying = V * (C - L) / (H - L);\ndef selling = V * (H - C) / (H - L);\n\ndef O_day = open(period = AggregationPeriod.DAY);\ndef H_day = high(period = AggregationPeriod.DAY);\ndef C_day = close(period = AggregationPeriod.DAY);\ndef L_day = low(period = AggregationPeriod.DAY);\n\ndef selling_day = V * (H_day - C_day) / (H_day - L_day);\ndef buying_day = V * (C_day - L_day) / (H_day - L_day);\n# Selling Volume pressure\n\nplot SellVol = selling;\nSellVol.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);\nSellVol.SetDefaultColor(Color.RED);\nSellVol.HideTitle();\nSellVol.HideBubble();\nSellVol.SetLineWeight(5);\n\n# Total Volume\n# Buying Volume pressure\n\nplot BuyVol = buying + selling; # plot in the background of selling volume\nBuyVol.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);\nBuyVol.SetDefaultColor(Color.DARK_GREEN);\nBuyVol.HideTitle();\nBuyVol.HideBubble();\nBuyVol.SetLineWeight(5);\n\n#Volume Data\n\ndef DayVol = volume(period = “DAY”);\ndef AvgDayVol = MovingAverage(AvgType, DayVol[1], AvgDayVolLength);\ndef percentOfDay = Round((DayVol / AvgDayVol) * 100, 0);\n\n\ndef AvgBarVol = MovingAverage(AvgType, volume[1], AvgBarVolLength);\ndef percentOfBar = Round((volume / AvgBarVol) * 100, 0);\ndef SellVolPercent = Round((selling / volume) * 100, 0);\ndef BuyVolPercent = 100 - SellVolPercent;\n\ndef SellVolPercent_day = Round((selling_day / volume) * 100, 0);\ndef BuyVolPercent_day = 100 - SellVolPercent_day;\n\n# Labels\n\nAddLabel(ShowDayAvg, \&quot;Avg “ + AvgDayVolLength + “ Days: \&quot; + Round(AvgDayVol, 0), Color.LIGHT_GRAY);\n\nAddLabel(ShowTodayVolume, \&quot;Today: \&quot; + DayVol, (if percentOfDay &gt;= UnusualVolumePercent then Color.GREEN else if percentOfDay &gt;= 100 then Color.ORANGE else Color.LIGHT_GRAY));\n\nAddLabel(ShowPercentOfDayAvg, percentOfDay + \&quot;%\&quot;, (if percentOfDay &gt;= UnusualVolumePercent then Color.GREEN else if percentOfDay &gt;= 100 then Color.ORANGE else Color.WHITE) );\n\nAddLabel(ShowBarAvg, \&quot;Avg “ + AvgBarVolLength + ” Bars: \&quot; + Round(AvgBarVol, 0), Color.LIGHT_GRAY);\n\nAddLabel(ShowCurrentBar, \&quot;Cur Bar: \&quot; + volume, (if percentOfBar &gt;= UnusualVolumePercent then Color.GREEN else if percentOfBar &gt;= 100 then Color.ORANGE else Color.LIGHT_GRAY));\n\nAddLabel(ShowPercentOfBarAvg, percentOfBar + \&quot;%\&quot;, (if percentOfBar &gt;= UnusualVolumePercent then Color.GREEN else if percentOfBar &gt;= 100 then Color.ORANGE else Color.WHITE) );\n\n\nAddLabel(ShowSellVolumePercent and (SellVolPercent &gt; BuyVolPercent) , \&quot;Cur Bar Sell %: \&quot; + SellVolPercent, if SellVolPercent &gt; BuyVolPercent then Color.RED else Color.GRAY);\nAddLabel(ShowBuyVolumePercent and (SellVolPercent &lt;= BuyVolPercent), \&quot;Cur Bar Buy %: \&quot; + BuyVolPercent, if BuyVolPercent &gt; SellVolPercent then Color.GREEN else Color.GRAY);\n\n\n# PriceOpen.Hide();\ninput length = 50;\n\nplot Vol = volume;\nplot VolAvg = Average(volume, length);\n\nVol.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);\nVol.SetLineWeight(3);\nVol.DefineColor(\&quot;Up\&quot;, Color.UPTICK);\nVol.DefineColor(\&quot;Down\&quot;, Color.DOWNTICK);\nVol.AssignValueColor(if close &gt; close[1] then Vol.Color(\&quot;Up\&quot;) else if close &lt; close[1] then Vol.Color(\&quot;Down\&quot;) else GetColor(1));\nVolAvg.SetDefaultColor(GetColor(8));\n\n\n#########################################################\n\n#def rth = (RegularTradingEnd(GetYYYYMMDD()) - RegularTradingStart(GetYYYYMMDD())) / AggregationPeriod.HOUR;\ndef rth = (RegularTradingEnd(GetYYYYMMDD()) - RegularTradingStart(GetYYYYMMDD())) / AggregationPeriod.MIN;\ndef MarketNotClosed = GetTime() &lt;= RegularTradingEnd (GetYYYYMMDD());\n# def eod = ((  RegularTradingEnd (GetYYYYMMDD()) - GetTime() ) / AggregationPeriod.MIN);\ndef eod = if MarketNotClosed then ((  RegularTradingEnd (GetYYYYMMDD()) - GetTime() ) / AggregationPeriod.MIN) else ((  RegularTradingEnd (GetYYYYMMDD())  ) / AggregationPeriod.MIN);\n\ndef DayVol_Projetion = volume(period = “DAY”) * rth / (rth - eod);\ndef percentOfDayProjection = Round((DayVol_Projetion / AvgDayVol) * 100, 0);\nAddLabel(ShowBuyVolumePercent, \&quot;Day Buy %: \&quot; + BuyVolPercent_day, if BuyVolPercent_day &gt; SellVolPercent_day then Color.GREEN else Color.GRAY);\n\nAddLabel(ShowTodayVolumeProjection, \&quot;Est. Vol: \&quot; + Round(DayVol_Projetion, 0) , if DayVol_Projetion &gt; AvgDayVol * 1.5  then Color.GREEN else Color.GRAY);\n\nAddLabel(ShowTodayVolumeProjection,  percentOfDayProjection  + \&quot;%\&quot;, if DayVol_Projetion &gt; AvgDayVol * 1.5  then Color.GREEN else Color.GRAY);\n\ndef y = GetTime() / AggregationPeriod.MIN;\n#eod =2;\n#AddLabel(yes, \&quot;RTH duration (min): \&quot; + rth);\n#AddLabel(yes, \&quot;EOD duration (min): \&quot; + eod);\n#AddLabel(yes, \&quot;Market Not closed: \&quot; + y);\n\n#######&quot;,name=&quot;_3561862d_5455_4870_b26e_b0e3a91d177d&quot;}){plots{2:{hiding=&lt;T}}})},^(#%3.SubgraphId(&quot;Subgraph3&quot;),#%3.SubgraphStorableModel{height=109,storableIndicators.+(!%4.CompiledStudy.resolveStudy(#%5.ScriptEssence{body=&quot;declare lower;\n\n################\n\n\n\n\n\n#######\n\n\n\n\n\n\ninput price = close;\n\ninput superfast_length = 8;\n\ninput fast_length = 13;\n\ninput slow_length = 21;\n\ninput displace = 0;\n\n################\ninput averageType = AverageType.EXPONENTIAL;\n\ndef mov_avg8 = MovingAverage(averageType, price[-displace], superfast_length);\n\ndef mov_avg13 = MovingAverage(averageType, price[-displace], fast_length);\n\ndef mov_avg21 = MovingAverage(averageType, price[-displace], slow_length);\n \n#moving averages\n\ndef Superfast = mov_avg8;\n\ndef Fast = mov_avg13;\n\ndef Slow = mov_avg21;\n\n\ndef buy = mov_avg8 &gt; mov_avg13 and mov_avg13 &gt; mov_avg21 and low &gt; mov_avg8;\n\ndef stopbuy = mov_avg8 &lt;= mov_avg13;\n\ndef buynow = !buy[1] and buy;\n\ndef buysignal = CompoundValue(1, if buynow and !stopbuy then 1 else if buysignal[1] == 1 and stopbuy then 0 else buysignal[1], 0);\n\n\ndef Buy_Signal = buysignal[1] == 0 and buysignal == 1;\n\ndef Momentum_Down = buysignal[1] == 1 and buysignal == 0;\n\n\ndef sell = mov_avg8 &lt; mov_avg13 and mov_avg13 &lt; mov_avg21 and high &lt; mov_avg8;\n\ndef stopsell = mov_avg8 &gt;= mov_avg13;\n\ndef sellnow = !sell[1] and sell;\n\ndef sellsignal = CompoundValue(1, if sellnow and !stopsell then 1 else if sellsignal[1] == 1 and stopsell then 0 else sellsignal[1], 0);\n\n\ndef Sell_Signal = sellsignal[1] == 0 and sellsignal;\n\ndef Momentum_Up = sellsignal[1] == 1 and sellsignal == 0;\n \n# when using this as a custom scan, change the word plot to def\n# then remove the \'#\' from in front of one of the \&quot;plot Scan\&quot; statements below\ndef Colorbars = if buysignal == 1 then 1 else if sellsignal == 1 then -1 else if buysignal == 0 or sellsignal == 0 then 0 else 0;\n\n# use this first Scan plot for SLM Ribbon Momentum UP\n#plot Scan = if Colorbars == 1 then yes else no;\n\n# use this second Scan plot for SLM Ribbon Momentum DOWN\n#plot Scan = if Colorbars == -1 then yes else no;\n\n\n\ninput length = 14;\n\ndef MaxBound = HighestWeighted(high, length, LinearRegressionSlope(price = high, length = length));\ndef MinBound = LowestWeighted(low, length, LinearRegressionSlope(price = low, length = length));\ndef diff = MaxBound - MinBound;\n\nplot PROSC = if diff != 0 then 100 * (close - MinBound) / diff else 0;\nplot OverBought = 75;\nplot OverSold = 25;\nplot z =50;\nz.SetDefaultColor(color.gray);\n\nPROSC.SetDefaultColor(GetColor(8));\nOverBought.SetDefaultColor(GetColor(5));\nOverSold.SetDefaultColor(GetColor(5));\n\n\n###############\n\ndef Colorbars1 = if buysignal ==1 then 1 else if sellsignal ==1 then 2 else if buysignal ==0 or sellsignal==0 then 3 else 0;\n\n\n\nPROSC.definecolor(\&quot;Buy_Signal_Bars\&quot;, color.dark_green);\n\nPROSC.definecolor(\&quot;Sell_Signal_Bars\&quot;, color.red);\n\nPROSC.definecolor(\&quot;Neutral\&quot;, color.plum);\n\nPROSC.AssignValueColor(if Colorbars1 ==1 then PROSC.color(\&quot;buy_signal_bars\&quot;) else if colorbars1 ==2 then PROSC.color(\&quot;Sell_Signal_bars\&quot;) else  PROSC.color(\&quot;neutral\&quot;));\nPROSC.setlineWeight(2);\nOverBought.hide();\nOverSold.hide();\n\n\n\n\n\nAddCloud(0, OverSold, Color.RED, Color.light_green);\nAddCloud(OverBought, 100, Color.Green, Color.light_red);\n\n\nplot UpSignal = if (buysignal and PROSC crosses above OverSold) then OverSold else Double.NaN;\nplot DownSignal = if (sellsignal and PROSC crosses below OverBought) then OverBought else Double.NaN;\nplot DownSignal2 = if (( Momentum_Down or sellsignal) and PROSC  crosses below OverSold) then OverSold else Double.NaN;\n\nplot UpSignal2 = if ( Momentum_Up and PROSC&gt;= overbought) then overbought else Double.NaN;\ninput showBreakoutSignals =yes;\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\n\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\nUpSignal2.SetDefaultColor(Color.plum);\nUpSignal2.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\n\nDownSignal2.SetDefaultColor(Color.plum);\nDownSignal2.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\n\n\n\n&quot;,name=&quot;_bc0d152e_88dc_44b4_99a7_78acd8502e84&quot;}))}),^(#%3.SubgraphId(&quot;Subgraph7&quot;),#%3.SubgraphStorableModel{height=109,storableIndicators.+(!%4.CompiledStudy.resolveStudy(#%5.ScriptEssence{body=&quot;# RSI-Laguerre Self Adjusting With Fractal Energy Gaussian Price Filter\n# Mobius\n# V01.12.2016\n# Both Fractal Energy and RSI are plotted. RSI in cyan and FE in yellow. Look for trend exhaustion in the FE and a reversal of RSI or Price compression in FE and an RSI reversal.\n\ndeclare lower;\n\n#Inputs: \ninput nFE = 8;#hint nFE: length for Fractal Energy calculation. \ninput AlertOn = no;\ninput Glength  = 13;\ninput betaDev =  8;\ninput data = close;\n\ndef w = (2 * Double.Pi / Glength);\ndef beta = (1 - Cos(w)) / (Power(1.414, 2.0 / betaDev) - 1 );\ndef alpha = (-beta + Sqrt(beta * beta + 2 * beta));\ndef Go = Power(alpha, 4) * open + \n             4 * (1 – alpha) * Go[1] – 6 * Power( 1 - alpha, 2 ) * Go[2] + \n             4 * Power( 1 - alpha, 3 ) * Go[3] - Power( 1 - alpha, 4 ) * Go[4];\ndef Gh = Power(alpha, 4) * high + \n             4 * (1 – alpha) * Gh[1] – 6 * Power( 1 - alpha, 2 ) * Gh[2] + \n             4 * Power( 1 - alpha, 3 ) * Gh[3] - Power( 1 - alpha, 4 ) * Gh[4];\ndef Gl = Power(alpha, 4) * low + \n             4 * (1 – alpha) * Gl[1] – 6 * Power( 1 - alpha, 2 ) * Gl[2] + \n             4 * Power( 1 - alpha, 3 ) * Gl[3] - Power( 1 - alpha, 4 ) * Gl[4];\ndef Gc = Power(alpha, 4) * data + \n             4 * (1 – alpha) * Gc[1] – 6 * Power( 1 - alpha, 2 ) * Gc[2] + \n             4 * Power( 1 - alpha, 3 ) * Gc[3] - Power( 1 - alpha, 4 ) * Gc[4];\n# Variables:\ndef o;\ndef h;\ndef l;\ndef c;\ndef CU1;\ndef CU2;\ndef CU;\ndef CD1;\ndef CD2;\ndef CD;\ndef L0;\ndef L1;\ndef L2;\ndef L3;\nplot RSI;\nplot OS;\nplot OB;\nplot M;\n\n# Calculations\no = (Go + Gc[1]) / 2;\nh = Max(Gh, Gc[1]);\nl = Min(Gl, Gc[1]);\nc = (o + h + l + Gc) / 4;\nplot gamma = Log(Sum((Max(Gh, Gc[1]) - Min(Gl, Gc[1])), nFE) / \n        (Highest(Gh, nFE) - Lowest(Gl, nFE)))\n            / Log(nFE);\ngamma.SetDefaultColor(Color.YELLOW);\nL0 = (1 – gamma) * Gc + gamma * L0[1];\nL1 = -gamma * L0 + L0[1] + gamma * L1[1];\nL2 = -gamma * L1 + L1[1] + gamma * L2[1];\nL3 = -gamma * L2 + L2[1] + gamma * L3[1];\nif L0 &gt;= L1\nthen {\n    CU1 = L0 - L1;\n    CD1 = 0;\n} else {\n    CD1 = L1 - L0;\n    CU1 = 0;\n}\nif L1 &gt;= L2\nthen {\n    CU2 = CU1 + L1 - L2;\n    CD2 = CD1;\n} else {\n    CD2 = CD1 + L2 - L1;\n    CU2 = CU1;\n}\nif L2 &gt;= L3\nthen {\n    CU = CU2 + L2 - L3;\n    CD = CD2;\n} else {\n    CU = CU2;\n    CD = CD2 + L3 - L2;\n}\n\nRSI = if CU + CD &lt;&gt; 0 then CU / (CU + CD) else 0;\nRSI.SetDefaultColor(Color.CYAN);\nOS = if IsNaN(c) then Double.NaN else 0.2;\nOS.SetDefaultColor(Color.GRAY);\nOS.HideBubble();\nOS.HideTitle();\nOB = if IsNaN(c) then Double.NaN else 0.8;\nOB.SetDefaultColor(Color.GRAY);\nOB.HideBubble();\nOB.HideTitle();\nM = if IsNaN(c) then Double.NaN else 0.5;\nM.SetStyle(Curve.LONG_DASH);\nM.SetDefaultColor(Color.GRAY);\nM.HideBubble();\nM.HideTitle();\nplot FEh = if IsNaN(c) then Double.NaN else .618;\nFEh.SetStyle(Curve.SHORT_DASH);\nFEh.HideBubble();\nFEh.SetDefaultColor(Color.GRAY);\nFEh.HideTitle();\nplot FEl = if IsNaN(c) then Double.NaN else .382;\nFEl.SetStyle(Curve.SHORT_DASH);\nFEl.SetDefaultColor(Color.GRAY);\nFEl.HideBubble();\nFEl.HideTitle();\nAddCloud(0, OS, Color.RED, Color.GREEN);\nAddCloud(OB, 1, Color.GREEN, Color.RED);\nAlert(AlertOn and RSI crosses below .8, \&quot;\&quot;, Alert.BAR, Sound.Bell);\nAlert(AlertOn and RSI crosses above .2, \&quot;\&quot;, Alert.BAR, Sound.Bell);\n\n#######\n\n#SLIM ribon\ninput price = close;\n\ninput superfast_length =4;\n\ninput fast_length = 7;\n\ninput slow_length = 21;\n\ninput displace = 0;\n\n################\ninput averageTypeSuperfast = AverageType.simple;\ninput averageTypefast = AverageType.simple;\ninput averageTypeSlow = AverageType.EXPONENTIAL;\n\ninput  priceSupperFast = hlc3 ;\ninput priceFast  = close ;\ninput priceSlow  = close ;\n\ndef mov_avg_superFast = MovingAverage(averageTypeSuperfast, priceSupperFast[-displace], superfast_length);\ndef mov_avg_Fast = MovingAverage(averageTypefast, priceFast[-displace], fast_length);\ndef mov_avg_Slow = MovingAverage(averageTypeSlow, priceSlow[-displace], slow_length);\n\n#moving averages\ndef Superfast = mov_avg_superFast;\ndef Fast = mov_avg_Fast;\ndef Slow = mov_avg_Slow;\n\n################################\ndef buy = mov_avg_superFast &gt; mov_avg_Fast and mov_avg_Fast &gt; mov_avg_Slow and low &gt; mov_avg_superFast;\n\ndef stopbuy = mov_avg_superFast &lt;= mov_avg_Fast;\n\ndef buynow = !buy[1] and buy;\n\ndef buysignal = CompoundValue(1, if buynow and !stopbuy then 1 else if buysignal[1] == 1 and stopbuy then 0 else buysignal[1], 0);\n\n\ndef Buy_Signal = buysignal[1] == 0 and buysignal == 1;\n\ndef Momentum_Down = buysignal[1] == 1 and buysignal == 0;\n\n\ndef sell = mov_avg_superFast &lt; mov_avg_Fast and mov_avg_Fast &lt; mov_avg_Slow and high &lt; mov_avg_superFast;\n\ndef stopsell = mov_avg_superFast &gt;= mov_avg_Fast;\n\n\n\n###########################\ndef sellnow = !sell[1] and sell;\n\ndef sellsignal = CompoundValue(1, if sellnow and !stopsell then 1 else if sellsignal[1] == 1 and stopsell then 0 else sellsignal[1], 0);\n\n\ndef Sell_Signal = sellsignal[1] == 0 and sellsignal;\n\ndef Momentum_Up = sellsignal[1] == 1 and sellsignal == 0;\n \n# when using this as a custom scan, change the word plot to def\n# then remove the \'#\' from in front of one of the \&quot;plot Scan\&quot; statements below\ndef Colorbars = if buysignal == 1 then 1 else if sellsignal == 1 then -1 else if buysignal == 0 or sellsignal == 0 then 0 else 0;\n\n# use this first Scan plot for SLM Ribbon Momentum UP\n#plot Scan = if Colorbars == 1 then yes else no;\n\n# use this second Scan plot for SLM Ribbon Momentum DOWN\n#plot Scan = if Colorbars == -1 then yes else no;\n\ninput length = 19;\n\ndef HMA = MovingAverage(AverageType.HULL, price, length)[-displace];\ndef HMA_Up=  HMA &gt; HMA[1];\ndef HMA_Down =! HMA_UP;\n\n###############\n\n#def Colorbars1 = if buysignal == 1 then 1 else if sellsignal == 1 then 2 else if buysignal == 0 or sellsignal == 0 then 3 else 0;\n\n\n\nRSI.definecolor(\&quot;Buy\&quot;, color.dark_green);\n\n\nRSI.definecolor(\&quot;Sell\&quot;, color.red);\n\nRSI.DefineColor(\&quot;Neutral\&quot;, Color.PLUM);\n#RSI.DefineColor(\&quot;NeutralDown\&quot;, Color.orange);\nRSI.definecolor(\&quot;HullMA_up\&quot;, color.blue);\n\nRSI.definecolor(\&quot;HullMA_down\&quot;, color.orange);\n\nRSI.AssignValueColor(if buysignal and HMA_Up then RSI.color(\&quot;Buy\&quot;) else if buysignal and !HMA_Up then RSI.color(\&quot;HullMA_down\&quot;) else if sellsignal and HMA_Down  then RSI.color(\&quot;Sell\&quot;) else  if sellsignal and !HMA_Down  then RSI.color(\&quot;HullMA_up\&quot;) else  RSI.color(\&quot;neutral\&quot;));;#\n# if Momentum_Up then  RSI.color(\&quot;neutralUp\&quot;) else  RSI.color(\&quot;neutraldown\&quot;));\n\n\n\n\n####$$$$$$$$$$$$$$$$\n###############\n\n\n\n\nplot UpSignal = if (buysignal and RSI crosses above OS) then RSI-0.1 else Double.NaN;\nplot DownSignal = if (sellsignal and RSI crosses below OB) then RSI+0.1 else Double.NaN;\ninput showBreakoutSignals =yes;\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\n\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\n\n\n\n\n\n\n\n\n\n# End Code RSI_Laguerre Self Adjusting with Fractal Energy&quot;,name=&quot;_94f3daa4_27de_42e1_9e1c_1f3e66613988&quot;}){alerts:LocalAlertArray1,alerts=@LocalAlertArray1})})}}" SYMBOL="DCTH" SYMBOL_GROUP="2"/>
            </QUICK_CHART_GADGET>
          </GADGET5>
          <GADGET6 EXPANDED="true" GADGET_NAME="Quick Quote" HEIGHT="46" LOCKED="false">
            <QUICK_QUOTE/>
            <SORTING/>
          </GADGET6>
        </GADGET_STACK_LAYOUT>
        <HELP ORDER_ENTRY_EXPANDED="false"/>
        <HELP_GROUP ORDER_ENTRY_EXPANDED="false" SELECTED_LAYOUT="HELP"/>
        <HOMESCREEN DIVIDER_LOCATION="573" ORDER_ENTRY_EXPANDED="false">
          <TICKERTAPE WATCHLISTID="500"/>
          <TRADER_TV_VIDEO_PANEL STREAM_NAME="TDA_TV_STREAM" VOLUME_LEVEL="100"/>
          <WIDGET_DASHBOARD COLUMNS="2" ROWS="3">
            <WIDGET_FRAME0 WIDGET_NAME="MARKET_OPENS_CLOSES_IN">
              <WIDGET>
                <OPENCLOSE EXCHANGEID="100"/>
              </WIDGET>
            </WIDGET_FRAME0>
            <WIDGET_FRAME1 WIDGET_NAME="ORDERS">
              <WIDGET VIEW="CHART"/>
            </WIDGET_FRAME1>
            <WIDGET_FRAME2 WIDGET_NAME="VIDEO"/>
            <WIDGET_FRAME3 WIDGET_NAME="PL_OPEN">
              <WIDGET METRICS="PL_OPEN"/>
            </WIDGET_FRAME3>
            <WIDGET_FRAME4 WIDGET_NAME="WATCHLIST_HEAT_MAP"/>
          </WIDGET_DASHBOARD>
        </HOMESCREEN>
        <INDIVIDUALS_COLUMN_MANAGER CUSTOM_OVERRIDES="3426767#2146483648:;end;-1#2146483648:;end;" SYSTEM_OVERRIDES="3426767#2146483648:;end;-1#2146483648:;end;"/>
        <INVESTOOLS/>
        <ISE_SPREADS ORDER_ENTRY_EXPANDED="false" SYMBOL_GROUP="-1"/>
        <LEARNING_CENTER ORDER_ENTRY_EXPANDED="false"/>
        <MARKET_WATCH_GROUP ORDER_ENTRY_EXPANDED="false" SELECTED_LAYOUT="VISUALIZE"/>
        <MEDIA_PLAYER AUTO_STREAM_SWITCH="true" MUTED="false" VOLUME="0.3333333333333333"/>
        <MERGEDALIKE_COLUMN_MANAGER CUSTOM_OVERRIDES="" SYSTEM_OVERRIDES=""/>
        <MONITOR ORDER_ENTRY_EXPANDED="false">
          <GROUPINGPOSITIONSORTINGMODEL/>
          <MONITOR_CONTENT>
            <FOREX/>
            <FOREX1/>
            <FOREX2 EXPANDED="true"/>
            <GLOBAL_BETA_MODEL/>
            <GROUPING_POSITION_LIST>
              <EXPANDED/>
            </GROUPING_POSITION_LIST>
            <GROUPING_POS_STMT_SIZE_MODEL COMMON_COLUMN_RATIOS="0.3333333333333333;0.3333333333333333;0.3333333333333333" SECTION_RATIOS="0.15639810426540285;0.5497630331753555;0.2938388625592417">
              <MIDDLE_COLUMN_RATIOS>
                <ACCEPTOR_DC937B59892604F5A86AC96936CD7FF09E25F18AE6B758E8014A24C7FA039E91 RATIOS="0.10852713178294572;0.11627906976744186;0.15503875968992248;0.15503875968992248;0.15503875968992248;0.15503875968992248;0.15503875968992248"/>
              </MIDDLE_COLUMN_RATIOS>
            </GROUPING_POS_STMT_SIZE_MODEL>
            <GROUPING_POS_STMT_SIZE_MODEL1 COMMON_COLUMN_RATIOS="0.3333333333333333;0.3333333333333333;0.3333333333333333" SECTION_RATIOS="0.15151515151515152;0.5252525252525253;0.32323232323232326">
              <MIDDLE_COLUMN_RATIOS>
                <ACCEPTOR_F17C396C36A6BB4F1C424CE6F38A2F09D711E4EE9875EFCFCD829E447C25E2B3 RATIOS="0.15730337078651685;0.16853932584269662;0.2247191011235955;0.2247191011235955;0.2247191011235955"/>
              </MIDDLE_COLUMN_RATIOS>
            </GROUPING_POS_STMT_SIZE_MODEL1>
            <NONE/>
            <NONE1 EXPANDED="true"/>
            <NONE_INNER/>
            <SYMBOL_SELECTOR SYMBOL_GROUP="-1"/>
            <TRADEACTIVITYPANEL>
              <CANCELLED_ORDERS EXPANDED="false"/>
              <FILLED_ORDERS EXPANDED="true"/>
              <ROLLING_STRATEGIES EXPANDED="true"/>
              <SORTING COLUMN="EXEC_TIME" ORDER="1"/>
              <SORTING1 COLUMN="INSTR" ORDER="-1"/>
              <SORTING2/>
              <SWITCH POSITION="0"/>
              <SWITCH1 POSITION="0"/>
              <SWITCH2 POSITION="0"/>
              <SWITCH3 POSITION="0"/>
              <WORKING_ORDERS EXPANDED="true"/>
            </TRADEACTIVITYPANEL>
          </MONITOR_CONTENT>
        </MONITOR>
        <OPTION_HACKER CRITERIA="WATCH:@60;EXCLUDE:;FILTER:DELTA::;FILTER:DAYS_TO_EXP::;SHOW:OPTIONS;SORT:SYMBOL;LIMIT:50;" INDICES_IL="SYMBOL:66:,DESCRIPTION:67:,LAST:67:,NET_CHANGE:66:,PERCENT_CHANGE:67:,VOLUME:66:,BID:67:,ASK:66:,HIGH:67:,LOW:66:,DELTA:52:,GAMMA:52:,THETA:52:,VEGA:52:,&lt;arrow&gt;:11:F:F" LIMITS="DELTA|N|N:DAYS_TO_EXP|N|N" ORDER_ENTRY_EXPANDED="false">
          <ALL_COND_GROUP HEIGHT="92" HIDDEN="false"/>
          <ANY_COND_GROUP HEIGHT="40" HIDDEN="false"/>
          <NONE_COND_GROUP HEIGHT="40" HIDDEN="false"/>
          <SETUP_SCAN EXPANDED="true"/>
        </OPTION_HACKER>
        <ORDERBOOKPANEL SELECTED_TAB="0"/>
        <ORDERBOOK_STRATEGY_TABLE_SORTING/>
        <ORDER_AND_STRATEGY_BOOK EXPANDED="true"/>
        <ORDER_ENTRY_AND_ORDER_QUEUE>
          <GROUP MARKER="SINGLE">
            <ORDER_0 ORDER="SELL -10 AAPL 100 (Weeklys) 9 APR 21 127 CALL @.85 LMT"/>
          </GROUP>
        </ORDER_ENTRY_AND_ORDER_QUEUE>
        <ORDER_ENTRY_AND_SAVED_ORDERS EXPANDED="true"/>
        <PAIRS_TRADER/>
        <POSITION_GROUP_MANAGER SYSTEM_POSITION_GROUPS="Equities and Equity Options:QTY,DAYS,TRADE_PRICE,MARK_PRICE,MARK_CHANGE;Large-Cap:QTY,DAYS,TRADE_PRICE,MARK_PRICE,MARK_CHANGE;Position:QTY,DAYS,TRADE_PRICE,MARK_PRICE,MARK_CHANGE;Others:QTY,DAYS,TRADE_PRICE,MARK_PRICE,MARK_CHANGE;Mid-Cap:QTY,DAYS,TRADE_PRICE,MARK_PRICE,MARK_CHANGE;Futures and Futures Options:QTY,DAYS,TRADE_PRICE,MARK_PRICE,MARK_CHANGE;None:QTY,DAYS,TRADE_PRICE,MARK_PRICE,MARK_CHANGE,PL_YEAR,PERCENT_CHANGE;Small-Cap:QTY,DAYS,TRADE_PRICE,MARK_PRICE,MARK_CHANGE;Micro-Cap:QTY,DAYS,TRADE_PRICE,MARK_PRICE,MARK_CHANGE;Forex:QTY,DAYS,TRADE_PRICE,MARK_PRICE,MARK_CHANGE"/>
        <PRICE_CONTROL CONDITION="1" CONDITION_LOCKED="false" PRICE="11.7" UNLOCKED="false"/>
        <PT_MESSAGE DISABLED="false"/>
        <QUOTES ORDER_ENTRY_EXPANDED="false">
          <FULLQUOTEPANEL COLUMNS="SYMBOL:20:,DESCRIPTION:20:,QUOTE_TREND:20:,LAST:20:,NET_CHANGE:20:,BID:20:,BID_SIZE:20:,ASK:20:,ASK_SIZE:20:,VOLUME:20:,OPEN:20:,HIGH:20:,LOW:20:,52HIGH:20:,52LOW:20:,&lt;arrow&gt;:11:F:F" FULL_QUOTES_WL_ID="127607685" SYMBOL_GROUP="-1"/>
        </QUOTES>
        <ROLLING_STRATEGIES ORDER_ENTRY_EXPANDED="false">
          <ELIGIBLE_CCR_POSITION2 EXPANDED="true"/>
          <ELIGIBLE_POSITIONS ELIGIBLE_POSITIONS="QTY,DAYS,TRADE_PRICE,MARK_PRICE,MARK_CHANGE"/>
          <GROUPING_POS_STMT_SIZE_MODEL COMMON_COLUMN_RATIOS="0.3333333333333333;0.3333333333333333;0.3333333333333333" SECTION_RATIOS="0.15151515151515152;0.5252525252525253;0.32323232323232326">
            <MIDDLE_COLUMN_RATIOS>
              <ACCEPTOR_4936ACC0D4848E1C2AABE3260C94427781322593BCC53CFDB912D6B121183878 RATIOS="0.15730337078651685;0.16853932584269662;0.2247191011235955;0.2247191011235955;0.2247191011235955"/>
            </MIDDLE_COLUMN_RATIOS>
          </GROUPING_POS_STMT_SIZE_MODEL>
          <ROLLING_STRATEGIES EXPANDED="true"/>
          <SWITCH POSITION="0"/>
        </ROLLING_STRATEGIES>
        <ROLLOVER ORDER_ENTRY_EXPANDED="false">
          <OVERNIGHTRATEPANEL COLUMNS="SYMBOL:1:,LONG_CLOSE_PRICE:1:,LONG_PL:1:,CONVERTED_LONG_PL:1:,SHORT_PL:1:,CONVERTED_SHORT_PL:1:,&lt;arrow&gt;:11:F:F" SYMBOL_GROUP="-1" VIEW_MODE="ALL" WATCH_LIST_ID="56"/>
        </ROLLOVER>
        <SCANNER CRITERIA="WATCH:@51;EXCLUDE:;FILTER:LAST:0.8:200;FILTER:VOLUME:500000:;THINKSCRIPT_NEW_FILTER_?plot defaultPlot = &#10;BollingerBandsCrossover(&quot;length&quot; = 11, &quot;band&quot; = &quot;lower&quot;, &quot;average type&quot; = &quot;EXPONENTIAL&quot;) within 2 bars&#10;|$_?D;THINKSCRIPT_NEW_FILTER_?Gap__UP(price1 = CLOSE, percentage = 1.0, price2 = CLOSE)_?D;SHOW:STOCKS;SORT:-VOLUME;LIMIT:100;" INDICES_IL="DESCRIPTION:218:,SYMBOL:99:,LAST:64:,52HIGH:54:,NET_CHANGE:103:,PERCENT_CHANGE:104:,VOLUME:115:,HIGH:88:,LOW:86:,MARKET_CAP:102:,VOL_INDEX:82:,OPTION_VOLUME_INDEX:94:,I.IND_SECTOR:88:,NAME:82:,52LOW:65:,&lt;arrow&gt;:11:F:F" LIMITS="LAST|N|N:VOLUME|N|N" ORDER_ENTRY_EXPANDED="false" QUERY_CONFIG="144683145:16169752:0:0:Gap Up BB *">
          <ALL_COND_GROUP HEIGHT="157" HIDDEN="false"/>
          <ANY_COND_GROUP HEIGHT="40" HIDDEN="true"/>
          <NONE_COND_GROUP HEIGHT="40" HIDDEN="true"/>
          <SETUP_SCAN EXPANDED="true"/>
          <SORTING COLUMN="PERCENT_CHANGE" ORDER="-1"/>
          <WATCHLIST/>
        </SCANNER>
        <SCAN_GROUP ORDER_ENTRY_EXPANDED="false" SELECTED_LAYOUT="Scanner"/>
        <SCREEN_SHOW RECORDING_VOLUME="0.333333"/>
        <SHARED_CONFIGS ORDER_ENTRY_EXPANDED="false">
          <SHARED_CONFIG_FILTER_PANEL IS_DATE_RANGE_SELECTED="false"/>
          <SHARED_CONFIG_ITEMS_FILTER CREATED_BEFORE_DAY_ID="18715" ITEM_TYPES="GRID_GROUP,WORKSPACE_GROUP,WATCHLIST_GROUP,ORDER_TEMPLATE_GROUP,ALERT_TEMPLATE_GROUP,CHART_GROUP,QUERY_GROUP,SCRIPT_STUDY_GROUP,SCRIPT_STRATEGY_GROUP,SCRIPT_QUOTE_GROUP,SCRIPT_ALERT_GROUP,FLEXIBLE_GROUP,TREFIS_GROUP,FRED_GROUP,ORDER_GROUP,COLOR_SCHEME_GROUP,PHASE_SCORES_GROUP,SIMPLE_CHART_GROUP" MIGRATED_TO_ORDER_GROUP="true" PERIOD="7" SHOW_HIDDEN="false" USER_NAME=""/>
        </SHARED_CONFIGS>
        <SORTING/>
        <SORTING1/>
        <SORTING2/>
        <SORTING3/>
        <SORTING4/>
        <SORTING5/>
        <SOUNDS/>
        <SPREADS ORDER_ENTRY_EXPANDED="false" SYMBOL_GROUP="-1"/>
        <SPREAD_HACKER CRITERIA="SPREADWATCH:@51;FILTER:UNDERLYING_PRICE:1:20;FILTER:PROFIT_PROB::;FILTER:MAX_PROFIT::;SORT:-PROFIT_PROB;LIMIT:50;" ORDER_ENTRY_EXPANDED="false">
          <ALL_COND_GROUP HEIGHT="118" HIDDEN="false"/>
          <SETUP_SCAN EXPANDED="true"/>
        </SPREAD_HACKER>
        <SWITCH POSITION="0"/>
        <SYSTEM/>
        <THINK_BACK DIVIDER1="180" DIVIDER2="274" ORDER_ENTRY_EXPANDED="false" SYMBOL_GROUP="1">
          <DROPDOWN EXPANDED="false"/>
          <DROPDOWN1 EXPANDED="true"/>
          <FUTURES EXPANDED="true"/>
          <OPTIONS_CHART_PANEL DELTA_SUBGRAPH="false" HIGHLIGHT_TICKS="false" LOCK_TIME_AXIS="false" PALETTE="ff66ff,ffff,3f002f,d4d4d4,ebea00,ff3600,bf00,666666,c5a000,ffffff,ed7400,c0bfff,f3c500,659fc2,ea88ff,f3c500" PERCENT_AXIS="false" PRODUCT_DEPTH_MODE="OPTIONS">
            <COMBO_CHECK_BOX COLORS="" SELECTION=""/>
            <FUTURES_CURVES CURVES_COUNT="0"/>
            <OPTIONS_CHART_CONTROLS STRIKE_COUNT="All" VALUE="IMPL_VOL" VALUE2="IMPL_VOL" VIEW="ALL"/>
          </OPTIONS_CHART_PANEL>
          <OPTION_CHAIN EXPANDED="true"/>
          <PRODUCT_DEPTH EXPANDED="false"/>
          <QSHEETPANEL QSHEET_CONFIGURATION_COLUMNS="LAST,MARK" STRIKE_QTY="4">
            <ALLPRODUCTSPANELSMODEL>
              <OPTION_CHAIN ORDERING="2" SWITCHED_ON="true"/>
              <OPTION_STATISTICS ORDERING="3" SWITCHED_ON="true"/>
              <OPTION_TIME_AND_SALES ORDERING="4" SWITCHED_ON="true"/>
              <TRADE_GRID ORDERING="1" SWITCHED_ON="true"/>
              <UNDERLYING ORDERING="0" SWITCHED_ON="true"/>
              <WIDGET_360 ORDERING="5" SWITCHED_ON="true"/>
            </ALLPRODUCTSPANELSMODEL>
            <OPTIONS_SELECT TEMPLATE_FILTER_NAME="Single">
              <FUTURES_FILTER_NAME ALL_DELIVERABLES="true" ALL_EXCHANGES="true" ALL_EXPIRATION_DAYS="true" ALL_EXPIRATION_TYPES="true" ALL_SIDES="true" ALL_STRIKES="true" SELECTED_DELIVERABLES="REGULAR" SELECTED_EXCHANGES="COMPOSITE" SELECTED_EXPIRATION_TYPES="REGULAR" SELECTED_SIDE="BOTH" THEO_ADJ_TYPE="DOLLAR" THEO_DATE="18402" THEO_VOL_ADJ="0.0">
                <THEO_ADJ_VALUES_NAME DOLLAR="0.0" PERCENT="0.0" SIGMA="0.0"/>
              </FUTURES_FILTER_NAME>
              <STOCK_FILTER_NAME ALL_DELIVERABLES="true" ALL_EXCHANGES="true" ALL_EXPIRATION_DAYS="true" ALL_EXPIRATION_TYPES="true" ALL_SIDES="true" ALL_STRIKES="true" SELECTED_DELIVERABLES="REGULAR" SELECTED_EXCHANGES="COMPOSITE" SELECTED_EXPIRATION_TYPES="REGULAR" SELECTED_SIDE="BOTH" THEO_ADJ_TYPE="DOLLAR" THEO_DATE="18703" THEO_VOL_ADJ="0.0">
                <THEO_ADJ_VALUES_NAME DOLLAR="0.0" PERCENT="0.0" SIGMA="0.0"/>
              </STOCK_FILTER_NAME>
            </OPTIONS_SELECT>
          </QSHEETPANEL>
          <THINKBACKSIMPANEL>
            <TRADES COLUMNS="SIMULATION_VIEW_PL:29:F:F,SPREAD:60:,LEG_SIDE:40:,LEG_QTY:77:,I.SYMBOL_SPC:72:,I.EXPIRATION:66:,I.STRIKE:55:,I.TYPE:55:,SIMULATION_TIME:77:,PRICE:99:,PRICE_MODE:22:,SIM_DELTA:50:,SIM_THETA:50:,SIMULATION_PL:80:,DELETE:17:F:F,&lt;arrow&gt;:11:F:F"/>
          </THINKBACKSIMPANEL>
          <UNDERLYING1 EXPANDED="true"/>
          <UNDERLYING_PANEL FUTURES_DISPLAYING_MODE="ACTIVE ONLY"/>
        </THINK_BACK>
        <TOOLS_GROUP ORDER_ENTRY_EXPANDED="false" SELECTED_LAYOUT="SHARED CONFIGS"/>
        <TOS_CHARTS COLUMN_COUNT="2" CURRENT_GRID_NAME="mah_anchor3d" DEFAULT_TYPE="DASHBOARD" MAXIMIZED_INDEX="0" ORDER_ENTRY_EXPANDED="false" ROW_COUNT="1">
          <CELL0 ROWSPANELWEIGHT="1.0" ROWWEIGHT0="1.0" ROWWEIGHT1="1.0" SELECTED_TYPE="CHART" SIDEBAR_IS_ACTIVE="true" SYMBOL=".AAPL210401C122" SYMBOL_GROUP="3" TRADE_BUTTONS_MIGRATED="true">
            <ACTIVETRADER CELL_IDS="POSITION_BREAKDOWN;NET_POSITION;AVERAGE_PRICE;PL_OPEN;PL_DAY" COLUMNS="TRADE_AMOUNT:100:,BUY_ORDER:150:,BIDSIZE:60:,PRICE:100:,ASKSIZE:60:,SELL_ORDER:150:" ENABLED="true" SHOW_STUDY_MARKERS="false" SYMBOL=".AAPL210401C122" SYMBOL_GROUP="3" SYNC_AT_AND_CHART_CROSSHAIR="true" VERTICAL="false" VISIBLE="true" WEIGHT="2.0" ZOOMING_STEPS="1">
              <POSITION_SUMMARY_PANEL CELL_IDS="POSITION_BREAKDOWN;NET_POSITION;AVERAGE_PRICE;PL_OPEN;PL_DAY" ENABLED="true"/>
              <TRADE_BUTTONS_CONFIG CONFIGURATION_NAME="SINGLE" ORDER_RULES_SET="OPTION" ORDER_TYPE="LIMIT" OS_AUTO="false" OS_EXPANDED="true" OS_TIF="DAY" QTY="10.0" QTY_STEP="1.0" TEMPLATE="SINGLE" TRADE_BUTTONS="BUY_MKT;SELL_MKT;MULTI_CANCEL;REVERSE;FLAT;SECOND_LINE;QUANTITY_WITH_BUTTONS;ORDER_TEMPLATE;AUTO_SEND;ORDER_SETUP">
                <OCO_STOP>
                  <TRG_0 TRG_ENBL="true" TRG_LINK="ASK_BID" TRG_OFFSET_MODE="TICK" TRG_OT="STOP" TRG_SETUP="10.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL AAL="10.0" AAPL="10.0" ADBE="10.0" AFI="10.0" AMC="10.0" AMCR="10.0" AMRS="10.0" AMZN="10.0" ANTE="10.0" ARLO="10.0" AXL="10.0" BA="10.0" BBBY="10.0" BBD="10.0" BMY="10.0" BSGM="10.0" BXRX="10.0" CAKE="10.0" CCI="10.0" CCJ="10.0" CHNG="10.0" CHX="10.0" CIDM="10.0" CLBS="10.0" CLDR="10.0" CLSN="10.0" CNNE="10.0" CRBP="10.0" CSCO="10.0" DIS="10.0" DISCK="10.0" DNN="10.0" DPW="10.0" DS="10.0" EMAN="10.0" ETSY="10.0" EVRG="10.0" EW="10.0" EWA="10.0" FAST="10.0" FCAC="10.0" FSR="10.0" FUSE="10.0" GEL="10.0" GME="10.0" GOCO="10.0" GOED="10.0" HBI="10.0" HPQ="10.0" HPR="10.0" HTZ="10.0" HUGE="10.0" HYLN="10.0" IDEX="10.0" IDXX="10.0" IGSB="10.0" INFI="10.0" INO="10.0" INTC="10.0" INTU="10.0" IZEA="10.0" JE="10.0" KEYS="10.0" LCI="10.0" LKQ="10.0" LUV="10.0" MARA="10.0" MBT="10.0" MDII="10.0" MMDA1="10.0" MRIN="10.0" MSFT="10.0" MU="10.0" NGD="10.0" NIO="10.0" NLOK="10.0" NLSN="10.0" NNVC="10.0" NOK="10.0" NVDA="10.0" OGI="10.0" OPEN="10.0" OPGN="10.0" OTIS="10.0" PAA="10.0" PAAS="10.0" PERI="10.0" PFF="10.0" PGX="10.0" POTX="10.0" PPG="10.0" PTE="10.0" RAD="10.0" RKT="10.0" RP="10.0" RPAY="10.0" RRD="10.0" RSX="10.0" SAVA="10.0" SIOX="10.0" SITC="10.0" SIVR="10.0" SKLZ="10.0" SLQT="10.0" SNAP="10.0" SOS="10.0" SPX="10.0" SQ="10.0" SWK="10.0" TAP="10.0" TGTX="10.0" TSLA="10.0" TZA="10.0" U="10.0" UAL="10.0" UAMY="10.0" UEC="10.0" UIS="10.0" USWS="10.0" UUUU="10.0" UXIN="10.0" VALE="10.0" VEU="10.0" VIX="10.0" VJET="10.0" VTRS="10.0" VWO="10.0" WETF="10.0" WKHS="10.0" X="10.0" XL="10.0" XLP="10.0" XLU="10.0" ZM="10.0"/>
                  </TRG_0>
                </OCO_STOP>
                <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="1.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AAL="1.0" AAPL="1.0" ADBE="1.0" AFI="1.0" AMC="1.0" AMCR="1.0" AMRS="1.0" AMZN="1.0" ANTE="1.0" ARLO="1.0" AXL="1.0" BA="1.0" BBBY="1.0" BBD="1.0" BMY="1.0" BSGM="1.0" BXRX="1.0" CAKE="1.0" CCI="1.0" CCJ="1.0" CHNG="1.0" CHX="1.0" CIDM="1.0" CLBS="1.0" CLDR="1.0" CLSN="1.0" CNNE="1.0" CRBP="1.0" CSCO="1.0" DIS="1.0" DISCK="1.0" DNN="1.0" DPW="1.0" DS="1.0" EMAN="1.0" ETSY="1.0" EVRG="1.0" EW="1.0" EWA="1.0" FAST="1.0" FCAC="1.0" FSR="1.0" FUSE="1.0" GEL="1.0" GME="1.0" GOCO="1.0" GOED="1.0" HBI="1.0" HPQ="1.0" HPR="1.0" HTZ="1.0" HUGE="1.0" HYLN="1.0" IDEX="1.0" IDXX="1.0" IGSB="1.0" INFI="1.0" INO="1.0" INTC="1.0" INTU="1.0" IZEA="1.0" JE="1.0" KEYS="1.0" LCI="1.0" LKQ="1.0" LUV="1.0" MARA="1.0" MBT="1.0" MDII="1.0" MMDA1="1.0" MRIN="1.0" MSFT="1.0" MU="1.0" NGD="1.0" NIO="1.0" NLOK="1.0" NLSN="1.0" NNVC="1.0" NOK="1.0" NVDA="1.0" OGI="1.0" OPEN="1.0" OPGN="1.0" OTIS="1.0" PAA="1.0" PAAS="1.0" PERI="1.0" PFF="1.0" PGX="1.0" POTX="1.0" PPG="1.0" PTE="1.0" RAD="1.0" RKT="1.0" RP="1.0" RPAY="1.0" RRD="1.0" RSX="1.0" SAVA="1.0" SIOX="1.0" SITC="1.0" SIVR="1.0" SKLZ="1.0" SLQT="1.0" SNAP="1.0" SOS="1.0" SPX="1.0" SQ="1.0" SWK="1.0" TAP="1.0" TGTX="1.0" TSLA="1.0" TZA="1.0" U="1.0" UAL="1.0" UAMY="1.0" UEC="1.0" UIS="1.0" USWS="1.0" UUUU="1.0" UXIN="1.0" VALE="1.0" VEU="1.0" VIX="1.0" VJET="1.0" VTRS="1.0" VWO="1.0" WETF="1.0" WKHS="1.0" X="1.0" XL="1.0" XLP="1.0" XLU="1.0" ZM="1.0"/>
                </TRG_0>
                <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-1.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AAL="-1.0" AAPL="-1.0" ADBE="-1.0" AFI="-1.0" AMC="-1.0" AMCR="-1.0" AMRS="-1.0" AMZN="-1.0" ANTE="-1.0" ARLO="-1.0" AXL="-1.0" BA="-1.0" BBBY="-1.0" BBD="-1.0" BMY="-1.0" BSGM="-1.0" BXRX="-1.0" CAKE="-1.0" CCI="-1.0" CCJ="-1.0" CHNG="-1.0" CHX="-1.0" CIDM="-1.0" CLBS="-1.0" CLDR="-1.0" CLSN="-1.0" CNNE="-1.0" CRBP="-1.0" CSCO="-1.0" DIS="-1.0" DISCK="-1.0" DNN="-1.0" DPW="-1.0" DS="-1.0" EMAN="-1.0" ETSY="-1.0" EVRG="-1.0" EW="-1.0" EWA="-1.0" FAST="-1.0" FCAC="-1.0" FSR="-1.0" FUSE="-1.0" GEL="-1.0" GME="-1.0" GOCO="-1.0" GOED="-1.0" HBI="-1.0" HPQ="-1.0" HPR="-1.0" HTZ="-1.0" HUGE="-1.0" HYLN="-1.0" IDEX="-1.0" IDXX="-1.0" IGSB="-1.0" INFI="-1.0" INO="-1.0" INTC="-1.0" INTU="-1.0" IZEA="-1.0" JE="-1.0" KEYS="-1.0" LCI="-1.0" LKQ="-1.0" LUV="-1.0" MARA="-1.0" MBT="-1.0" MDII="-1.0" MMDA1="-1.0" MRIN="-1.0" MSFT="-1.0" MU="-1.0" NGD="-1.0" NIO="-1.0" NLOK="-1.0" NLSN="-1.0" NNVC="-1.0" NOK="-1.0" NVDA="-1.0" OGI="-1.0" OPEN="-1.0" OPGN="-1.0" OTIS="-1.0" PAA="-1.0" PAAS="-1.0" PERI="-1.0" PFF="-1.0" PGX="-1.0" POTX="-1.0" PPG="-1.0" PTE="-1.0" RAD="-1.0" RKT="-1.0" RP="-1.0" RPAY="-1.0" RRD="-1.0" RSX="-1.0" SAVA="-1.0" SIOX="-1.0" SITC="-1.0" SIVR="-1.0" SKLZ="-1.0" SLQT="-1.0" SNAP="-1.0" SOS="-1.0" SPX="-1.0" SQ="-1.0" SWK="-1.0" TAP="-1.0" TGTX="-1.0" TSLA="-1.0" TZA="-1.0" U="-1.0" UAL="-1.0" UAMY="-1.0" UEC="-1.0" UIS="-1.0" USWS="-1.0" UUUU="-1.0" UXIN="-1.0" VALE="-1.0" VEU="-1.0" VIX="-1.0" VJET="-1.0" VTRS="-1.0" VWO="-1.0" WETF="-1.0" WKHS="-1.0" X="-1.0" XL="-1.0" XLP="-1.0" XLU="-1.0" ZM="-1.0"/>
                </TRG_1>
                <_2>
                  <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="2.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL AAL="2.0" AAPL="2.0" ADBE="2.0" AFI="2.0" AMC="2.0" AMCR="2.0" AMRS="2.0" AMZN="2.0" ANTE="2.0" ARLO="2.0" AXL="2.0" BA="2.0" BBBY="2.0" BBD="2.0" BMY="2.0" BSGM="2.0" BXRX="2.0" CAKE="2.0" CCI="2.0" CCJ="2.0" CHNG="2.0" CHX="2.0" CIDM="2.0" CLBS="2.0" CLDR="2.0" CLSN="2.0" CNNE="2.0" CRBP="2.0" CSCO="2.0" DIS="2.0" DISCK="2.0" DNN="2.0" DPW="2.0" DS="2.0" EMAN="2.0" ETSY="2.0" EVRG="2.0" EW="2.0" EWA="2.0" FAST="2.0" FCAC="2.0" FSR="2.0" FUSE="2.0" GEL="2.0" GME="2.0" GOCO="2.0" GOED="2.0" HBI="2.0" HPQ="2.0" HPR="2.0" HTZ="2.0" HUGE="2.0" HYLN="2.0" IDEX="2.0" IDXX="2.0" IGSB="2.0" INFI="2.0" INO="2.0" INTC="2.0" INTU="2.0" IZEA="2.0" JE="2.0" KEYS="2.0" LCI="2.0" LKQ="2.0" LUV="2.0" MARA="2.0" MBT="2.0" MDII="2.0" MMDA1="2.0" MRIN="2.0" MSFT="2.0" MU="2.0" NGD="2.0" NIO="2.0" NLOK="2.0" NLSN="2.0" NNVC="2.0" NOK="2.0" NVDA="2.0" OGI="2.0" OPEN="2.0" OPGN="2.0" OTIS="2.0" PAA="2.0" PAAS="2.0" PERI="2.0" PFF="2.0" PGX="2.0" POTX="2.0" PPG="2.0" PTE="2.0" RAD="2.0" RKT="2.0" RP="2.0" RPAY="2.0" RRD="2.0" RSX="2.0" SAVA="2.0" SIOX="2.0" SITC="2.0" SIVR="2.0" SKLZ="2.0" SLQT="2.0" SNAP="2.0" SOS="2.0" SPX="2.0" SQ="2.0" SWK="2.0" TAP="2.0" TGTX="2.0" TSLA="2.0" TZA="2.0" U="2.0" UAL="2.0" UAMY="2.0" UEC="2.0" UIS="2.0" USWS="2.0" UUUU="2.0" UXIN="2.0" VALE="2.0" VEU="2.0" VIX="2.0" VJET="2.0" VTRS="2.0" VWO="2.0" WETF="2.0" WKHS="2.0" X="2.0" XL="2.0" XLP="2.0" XLU="2.0" ZM="2.0"/>
                  </TRG_0>
                  <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-2.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL AAL="-2.0" AAPL="-2.0" ADBE="-2.0" AFI="-2.0" AMC="-2.0" AMCR="-2.0" AMRS="-2.0" AMZN="-2.0" ANTE="-2.0" ARLO="-2.0" AXL="-2.0" BA="-2.0" BBBY="-2.0" BBD="-2.0" BMY="-2.0" BSGM="-2.0" BXRX="-2.0" CAKE="-2.0" CCI="-2.0" CCJ="-2.0" CHNG="-2.0" CHX="-2.0" CIDM="-2.0" CLBS="-2.0" CLDR="-2.0" CLSN="-2.0" CNNE="-2.0" CRBP="-2.0" CSCO="-2.0" DIS="-2.0" DISCK="-2.0" DNN="-2.0" DPW="-2.0" DS="-2.0" EMAN="-2.0" ETSY="-2.0" EVRG="-2.0" EW="-2.0" EWA="-2.0" FAST="-2.0" FCAC="-2.0" FSR="-2.0" FUSE="-2.0" GEL="-2.0" GME="-2.0" GOCO="-2.0" GOED="-2.0" HBI="-2.0" HPQ="-2.0" HPR="-2.0" HTZ="-2.0" HUGE="-2.0" HYLN="-2.0" IDEX="-2.0" IDXX="-2.0" IGSB="-2.0" INFI="-2.0" INO="-2.0" INTC="-2.0" INTU="-2.0" IZEA="-2.0" JE="-2.0" KEYS="-2.0" LCI="-2.0" LKQ="-2.0" LUV="-2.0" MARA="-2.0" MBT="-2.0" MDII="-2.0" MMDA1="-2.0" MRIN="-2.0" MSFT="-2.0" MU="-2.0" NGD="-2.0" NIO="-2.0" NLOK="-2.0" NLSN="-2.0" NNVC="-2.0" NOK="-2.0" NVDA="-2.0" OGI="-2.0" OPEN="-2.0" OPGN="-2.0" OTIS="-2.0" PAA="-2.0" PAAS="-2.0" PERI="-2.0" PFF="-2.0" PGX="-2.0" POTX="-2.0" PPG="-2.0" PTE="-2.0" RAD="-2.0" RKT="-2.0" RP="-2.0" RPAY="-2.0" RRD="-2.0" RSX="-2.0" SAVA="-2.0" SIOX="-2.0" SITC="-2.0" SIVR="-2.0" SKLZ="-2.0" SLQT="-2.0" SNAP="-2.0" SOS="-2.0" SPX="-2.0" SQ="-2.0" SWK="-2.0" TAP="-2.0" TGTX="-2.0" TSLA="-2.0" TZA="-2.0" U="-2.0" UAL="-2.0" UAMY="-2.0" UEC="-2.0" UIS="-2.0" USWS="-2.0" UUUU="-2.0" UXIN="-2.0" VALE="-2.0" VEU="-2.0" VIX="-2.0" VJET="-2.0" VTRS="-2.0" VWO="-2.0" WETF="-2.0" WKHS="-2.0" X="-2.0" XL="-2.0" XLP="-2.0" XLU="-2.0" ZM="-2.0"/>
                  </TRG_1>
                </_2>
                <_3>
                  <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="3.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL AAL="3.0" AAPL="3.0" ADBE="3.0" AFI="3.0" AMC="3.0" AMCR="3.0" AMRS="3.0" AMZN="3.0" ANTE="3.0" ARLO="3.0" AXL="3.0" BA="3.0" BBBY="3.0" BBD="3.0" BMY="3.0" BSGM="3.0" BXRX="3.0" CAKE="3.0" CCI="3.0" CCJ="3.0" CHNG="3.0" CHX="3.0" CIDM="3.0" CLBS="3.0" CLDR="3.0" CLSN="3.0" CNNE="3.0" CRBP="3.0" CSCO="3.0" DIS="3.0" DISCK="3.0" DNN="3.0" DPW="3.0" DS="3.0" EMAN="3.0" ETSY="3.0" EVRG="3.0" EW="3.0" EWA="3.0" FAST="3.0" FCAC="3.0" FSR="3.0" FUSE="3.0" GEL="3.0" GME="3.0" GOCO="3.0" GOED="3.0" HBI="3.0" HPQ="3.0" HPR="3.0" HTZ="3.0" HUGE="3.0" HYLN="3.0" IDEX="3.0" IDXX="3.0" IGSB="3.0" INFI="3.0" INO="3.0" INTC="3.0" INTU="3.0" IZEA="3.0" JE="3.0" KEYS="3.0" LCI="3.0" LKQ="3.0" LUV="3.0" MARA="3.0" MBT="3.0" MDII="3.0" MMDA1="3.0" MRIN="3.0" MSFT="3.0" MU="3.0" NGD="3.0" NIO="3.0" NLOK="3.0" NLSN="3.0" NNVC="3.0" NOK="3.0" NVDA="3.0" OGI="3.0" OPEN="3.0" OPGN="3.0" OTIS="3.0" PAA="3.0" PAAS="3.0" PERI="3.0" PFF="3.0" PGX="3.0" POTX="3.0" PPG="3.0" PTE="3.0" RAD="3.0" RKT="3.0" RP="3.0" RPAY="3.0" RRD="3.0" RSX="3.0" SAVA="3.0" SIOX="3.0" SITC="3.0" SIVR="3.0" SKLZ="3.0" SLQT="3.0" SNAP="3.0" SOS="3.0" SPX="3.0" SQ="3.0" SWK="3.0" TAP="3.0" TGTX="3.0" TSLA="3.0" TZA="3.0" U="3.0" UAL="3.0" UAMY="3.0" UEC="3.0" UIS="3.0" USWS="3.0" UUUU="3.0" UXIN="3.0" VALE="3.0" VEU="3.0" VIX="3.0" VJET="3.0" VTRS="3.0" VWO="3.0" WETF="3.0" WKHS="3.0" X="3.0" XL="3.0" XLP="3.0" XLU="3.0" ZM="3.0"/>
                  </TRG_0>
                  <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-3.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL AAL="-3.0" AAPL="-3.0" ADBE="-3.0" AFI="-3.0" AMC="-3.0" AMCR="-3.0" AMRS="-3.0" AMZN="-3.0" ANTE="-3.0" ARLO="-3.0" AXL="-3.0" BA="-3.0" BBBY="-3.0" BBD="-3.0" BMY="-3.0" BSGM="-3.0" BXRX="-3.0" CAKE="-3.0" CCI="-3.0" CCJ="-3.0" CHNG="-3.0" CHX="-3.0" CIDM="-3.0" CLBS="-3.0" CLDR="-3.0" CLSN="-3.0" CNNE="-3.0" CRBP="-3.0" CSCO="-3.0" DIS="-3.0" DISCK="-3.0" DNN="-3.0" DPW="-3.0" DS="-3.0" EMAN="-3.0" ETSY="-3.0" EVRG="-3.0" EW="-3.0" EWA="-3.0" FAST="-3.0" FCAC="-3.0" FSR="-3.0" FUSE="-3.0" GEL="-3.0" GME="-3.0" GOCO="-3.0" GOED="-3.0" HBI="-3.0" HPQ="-3.0" HPR="-3.0" HTZ="-3.0" HUGE="-3.0" HYLN="-3.0" IDEX="-3.0" IDXX="-3.0" IGSB="-3.0" INFI="-3.0" INO="-3.0" INTC="-3.0" INTU="-3.0" IZEA="-3.0" JE="-3.0" KEYS="-3.0" LCI="-3.0" LKQ="-3.0" LUV="-3.0" MARA="-3.0" MBT="-3.0" MDII="-3.0" MMDA1="-3.0" MRIN="-3.0" MSFT="-3.0" MU="-3.0" NGD="-3.0" NIO="-3.0" NLOK="-3.0" NLSN="-3.0" NNVC="-3.0" NOK="-3.0" NVDA="-3.0" OGI="-3.0" OPEN="-3.0" OPGN="-3.0" OTIS="-3.0" PAA="-3.0" PAAS="-3.0" PERI="-3.0" PFF="-3.0" PGX="-3.0" POTX="-3.0" PPG="-3.0" PTE="-3.0" RAD="-3.0" RKT="-3.0" RP="-3.0" RPAY="-3.0" RRD="-3.0" RSX="-3.0" SAVA="-3.0" SIOX="-3.0" SITC="-3.0" SIVR="-3.0" SKLZ="-3.0" SLQT="-3.0" SNAP="-3.0" SOS="-3.0" SPX="-3.0" SQ="-3.0" SWK="-3.0" TAP="-3.0" TGTX="-3.0" TSLA="-3.0" TZA="-3.0" U="-3.0" UAL="-3.0" UAMY="-3.0" UEC="-3.0" UIS="-3.0" USWS="-3.0" UUUU="-3.0" UXIN="-3.0" VALE="-3.0" VEU="-3.0" VIX="-3.0" VJET="-3.0" VTRS="-3.0" VWO="-3.0" WETF="-3.0" WKHS="-3.0" X="-3.0" XL="-3.0" XLP="-3.0" XLU="-3.0" ZM="-3.0"/>
                  </TRG_1>
                </_3>
              </TRADE_BUTTONS_CONFIG>
            </ACTIVETRADER>
            <BIG_BUTTONS VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <CHART COLUMN_COUNT="1" CONFIGURATION="@v9@%0:com.devexperts.toschart.model,1:com.devexperts.tos.chartdata,2:com.devexperts.tos.thinkscript.data,3:java.awt,4:com.devexperts.toschart.control.subgraph,5:com.devexperts.toschart.elstudies,6:com.devexperts.toschart.script,7:com.devexperts.tos.thinkscript%owner{chartAggregationPeriods:ChartAggregationPeriodArray0{9::ChartAggregationPeriod0},chartAggregationPeriods=@ChartAggregationPeriodArray0}#com.devexperts.toschart.core.ChartModel{disabledMessageTypes.+(!%0.BuiltinExplanationMessage$MessageType.findByCode(1)),encodedMixinsState=&quot;{\&quot;common\&quot;:{\&quot;DRAWING_SETS\&quot;:\&quot;{}\&quot;},\&quot;state_props\&quot;:{\&quot;state_type\&quot;:\&quot;REGULAR\&quot;},\&quot;monkey_bars_exp\&quot;:{\&quot;LikefolioMixin\&quot;:\&quot;{\\\&quot;paintingSettings\\\&quot;:{\\\&quot;neutralSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;positiveSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;negativeSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;sentimentSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true}},\\\&quot;shownDivisions\\\&quot;:[],\\\&quot;allDivisions\\\&quot;:[]}\&quot;},\&quot;monkey_bars\&quot;:{},\&quot;seasonality\&quot;:{},\&quot;regular\&quot;:{\&quot;DescriberMixin\&quot;:\&quot;{\\\&quot;visibility\\\&quot;:\\\&quot;HIDE_PANEL\\\&quot;,\\\&quot;studiesMode\\\&quot;:\\\&quot;HIDE_STUDIES\\\&quot;}\&quot;,\&quot;LikefolioMixin\&quot;:\&quot;{\\\&quot;paintingSettings\\\&quot;:{\\\&quot;neutralSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;positiveSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;negativeSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;sentimentSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true}},\\\&quot;shownDivisions\\\&quot;:[],\\\&quot;allDivisions\\\&quot;:[]}\&quot;}}&quot;,encodedPatternsModel=&quot;{\&quot;showPatterns\&quot;:true,\&quot;models\&quot;:[]}&quot;,groupId=&quot;default&quot;,styleSettings{activeTool=2,chartAggregationSettings.timeAggregationSettings=!%0.TimeFrameAggregationSettings.createTickOrTimeAggregation(!%1.ChartRange.findByCode(&quot;DAY4&quot;),@ChartAggregationPeriod0),commonStyleSettings{colorSettings{backgroundColor=!%2.CustomColor.findByIndex(&quot;108&quot;),candleTypeColors.fillUp=&lt;T,gridTypeColor=#%2.CustomColor(#%3.Color(51,51,255,255)),monkeyProfileTypeColors.defaultRowHeight=&lt;F,mpExpandedTypeColors.defaultRowHeight=&lt;F,volumeColor=#%2.CustomColor(#%3.Color(51,0,255,255))},expansion{down=10,right=10,up=10},fitArrowsToScreen=&lt;F,fitStudiesToScreen=&lt;F,leftAxisEnabled=&lt;F,manualAxisRegulator{maxValue=2.55364458d,minValue=-0.14364458d},overlappedVolume=&lt;T,percentageBubbles=&lt;F,previousRightExpansion=10,shortCuts{^(&quot;Time Zone&quot;,&lt;F),^(&quot;Show Expiration Friday &quot;,&lt;F),^(&quot;Chart mode&quot;,&lt;F),^(&quot;Keep Price Zoom&quot;,&lt;F),^(&quot;enableLeftAxis&quot;,&lt;T),^(&quot;Fit expected price ranges&quot;,&lt;F),^(&quot;emphasizeDigitMPExpanded&quot;,&lt;F),^(&quot;showWicksCandleTrend&quot;,&lt;F),^(&quot;highlightEarnings&quot;,&lt;F),^(&quot;synchronizeCrosshair&quot;,&lt;F),^(&quot;myToolsMode&quot;,&lt;T),^(&quot;seasonalityStyle&quot;,&lt;F),^(&quot;Show Price Subgraph&quot;,&lt;F),^(&quot;closePriceLevel&quot;,&lt;F),^(&quot;Color Volume As Symbol Ticks&quot;,&lt;T),^(&quot;highlightPhantomRBars&quot;,&lt;F),^(&quot;Cross type &quot;,&lt;F),^(&quot;Fit Studies to Screen&quot;,&lt;T),^(&quot;Fit Orders&quot;,&lt;F),^(&quot;Bubbles as Percentage&quot;,&lt;F),^(&quot;hideStatusString&quot;,&lt;F),^(&quot;Show Studies &quot;,&lt;F),^(&quot;showWicksHeikinAshi&quot;,&lt;F),^(&quot;Alerts&quot;,&lt;F),^(&quot;Chart scale&quot;,&lt;F),^(&quot;Fit High/Low&quot;,&lt;F),^(&quot;Orders&quot;,&lt;F),^(&quot;Use Log Scale &quot;,&lt;T),^(&quot;Fit Study Markers to Screen&quot;,&lt;T),^(&quot;Fit Alerts&quot;,&lt;F),^(&quot;Fit patterns&quot;,&lt;F),^(&quot;Percentage View&quot;,&lt;T),^(&quot;Make Auto Zoom &quot;,&lt;F),^(&quot;Show Year Marking Line&quot;,&lt;F),^(&quot;Show Rollover Line&quot;,&lt;T),^(&quot;Show High/Low Bubbles &quot;,&lt;T),^(&quot;Snap mode&quot;,&lt;F),^(&quot;highlightStudies&quot;,&lt;F),^(&quot;Overlapped Volume&quot;,&lt;T),^(&quot;Show Symbol Logo&quot;,&lt;F),^(&quot;Show Last Price Bubble &quot;,&lt;F),^(&quot;emphasizeDigitMP&quot;,&lt;F),^(&quot;Snap crosshairs to&quot;,&lt;F),^(&quot;Show grid&quot;,&lt;T),^(&quot;databoxMode&quot;,&lt;F),^(&quot;Synchronize Drawings&quot;,&lt;F),^(&quot;showWicksCandle&quot;,&lt;F),^(&quot;Show trades&quot;,&lt;F),^(&quot;highlightSeasons&quot;,&lt;F),^(&quot;Snap drawings to&quot;,&lt;F),^(&quot;Extend Order/Alert Line to Left&quot;,&lt;F)},showBubbles=&lt;F,showDayRollover=&lt;F,showTradeExecution=&lt;T,showYearMarkingLine=&lt;F,step=1.2077294685990339d},forexStyleSettings.shortCuts.^(&quot;Show Volume Subgraph&quot;,&lt;F),futuresStyleSettings{adjustForContractChanges=&lt;T,highlightExtendedHours=&lt;T,shortCuts{^(&quot;adjustForContractChanges&quot;,&lt;F),^(&quot;Show Open Interest&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,&lt;T),^(&quot;showContractChangeEvents&quot;,&lt;F),^(&quot;futures_daily_close_price&quot;,&lt;F),^(&quot;Show Options&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,&lt;T),^(&quot;startAtMarketOpen&quot;,&lt;F)}},optionsStyleSettings{shortCuts{^(&quot;Show Open Interest&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,&lt;T),^(&quot;Show Theo Price&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,&lt;T),^(&quot;startAtMarketOpen&quot;,&lt;F)},showTheoPrice=&lt;F,tradingHoursOnly=&lt;T},otherStyleSettings.shortCuts{^(&quot;Show Social Sentiment&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,&lt;T),^(&quot;Price type&quot;,&lt;F),^(&quot;Show Options&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,&lt;T),^(&quot;Show Corporate Actions&quot;,&lt;F),^(&quot;Show CNBC Video&quot;,&lt;F),^(&quot;startAtMarketOpen&quot;,&lt;F),^(&quot;adjustForDividends&quot;,&lt;F)},setsIdentifiers.styleSetName=&quot;Style name6&quot;},subgraphModels{!get(#%4.SubgraphId(&quot;Symbol&quot;)){height=560,storableIndicators{+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# AD Label\n# Mobius\n# Chat Room Request 04.26.2016\n\ninput SYMB = \&quot;$ADSPD\&quot;;\n\ndef Data = close(symbol = \&quot;$ADSPD\&quot;, period = AggregationPeriod.WEEK);\naddLabel(1, \&quot;AD = \&quot; + Data, if Data &lt; 0 \nthen color.red\nelse color.green);\n# End Code&quot;,name=&quot;_36736c7b_da04_3b0b_9378_380c438f3e0d&quot;})),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;### xiuyu vwap cross signal with abnormal volume\n\n#declare hide_on_daily;\n\n####\n#MTF\ndef tFrame = GetAggregationPeriod();\ninput timeFrame = {default DAY, WEEK, MONTH};\ninput aggregationPeriod = AggregationPeriod.HOUR;\ninput useAutoAggegate = yes;\n\n\n\n# Variables:\n#def  =if (useAutoAggegate) then open(period = aggregationPeriod1) else open;\n\ndef AutoAGG = if tFrame &lt;  AggregationPeriod.DAY then AggregationPeriod.DAY\n             else if  tFrame &lt; AggregationPeriod.WEEK then AggregationPeriod.WEEK\n                  else AggregationPeriod.MONTH;\ndef AGG = if (!useAutoAggegate) then aggregationPeriod else AutoAGG;\n\ndef testTimeFrames = if tFrame &lt; AGG  then yes else no;\n\n#AddLabel(useAutoAggegate, if testTimeFrames  then \&quot;Time Frames Are Correct\&quot; else \&quot;Time Frames Are \n\ninput length = 10; #average volume lenght\ninput volMinimum = 50000;\ninput showPriceColor = yes;\ninput factor = 1.50; #show what factors to avgvolume \ninput nDevUp = 2.0;\ninput nDevDn = -2.0;\n\ndef avgvolume = Average(volume, length) * factor;\n\n\n#plot vwap = reference VWAP( AGG);\n#######\n\n\ndef cap = GetAggregationPeriod();\ndef errorInAggregation =\n    timeFrame == timeFrame.DAY and cap &gt;= AggregationPeriod.WEEK or\n    timeFrame == timeFrame.WEEK and cap &gt;= AggregationPeriod.MONTH;\nAssert(!errorInAggregation, \&quot;timeFrame should be not less than current chart aggregation period\&quot;);\n\ndef yyyyMmDd = GetYYYYMMDD();\ndef periodIndx;\nswitch (timeFrame) {\ncase DAY:\n    periodIndx = yyyyMmDd;\ncase WEEK:\n    periodIndx = Floor((DaysFromDate(First(yyyyMmDd)) + GetDayOfWeek(First(yyyyMmDd))) / 7);\ncase MONTH:\n    periodIndx = RoundDown(yyyyMmDd / 100, 0);\n}\ndef isPeriodRolled = CompoundValue(1, periodIndx != periodIndx[1], yes);\n\ndef volumeSum;\ndef volumeVwapSum;\ndef volumeVwap2Sum;\n\nif (isPeriodRolled) {\n    volumeSum = volume;\n    volumeVwapSum = volume * vwap;\n    volumeVwap2Sum = volume * Sqr(vwap);\n} else {\n    volumeSum = CompoundValue(1, volumeSum[1] + volume, volume);\n    volumeVwapSum = CompoundValue(1, volumeVwapSum[1] + volume * vwap, volume * vwap);\n    volumeVwap2Sum = CompoundValue(1, volumeVwap2Sum[1] + volume * Sqr(vwap), volume * Sqr(vwap));\n}\ndef price = volumeVwapSum / volumeSum;\ndef deviation = Sqrt(Max(volumeVwap2Sum / volumeSum - Sqr(price), 0));\n\nplot VWAP = price;\nplot UpperBand = price + nDevUp * deviation;\nplot LowerBand = price + nDevDn * deviation;\nplot UpperBand2 = price + (1+nDevUp) * deviation;\nplot LowerBand2 = price +(-1+ nDevDn) * deviation;\ndef sdvP1=  price + deviation;\ndef sdvN1=  price - deviation;\n#####\n\n\nplot SD1up =close[1] crosses above sdvp1 and ( open&lt; close) and low&gt;sdvp1;\nSD1up.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nSD1up.SetDefaultColor(Color.graY);\nSD1up.SetLineWeight(2);\nAssignPriceColor(if SD1up and showPriceColor and open&lt; close then Color.violet else Color.CURRENT);\n\nAddLabel(yes, \&quot;VWAP= \&quot; + astext(VWAP), if VWAP&lt; close then Color.LIGHT_GREEN else if VWAP&gt; close then color.LIGHT_red else Color.GRAY);\n#AddLabel(yes, \&quot;VWAP= \&quot; + astext(VWAP), Color.White);\ndef vwDif= close- VWAP;\n#AddLabel(yes, \&quot; \&quot;+astext(vwDif), if vwDif&gt; 0 then Color.LIGHT_GREEN else if vwDif&lt; 0 then color.LIGHT_red else Color.GRAY);\nAddLabel(yes and vwDif&gt;0, \&quot; +\&quot;+astext(vwDif),  Color.LIGHT_GREEN );\nAddLabel(yes and vwDif&lt;=0, \&quot; \&quot;+astext(vwDif),  if vwDif&lt; 0 then color.LIGHT_red else Color.LIGHT_GRAY);\n\ninput vwapLableAll =yes;\nAddLabel(vwapLableAll, \&quot;VWAP +1= \&quot; + astext(sdvP1), if sdvP1&lt; close then Color.LIGHT_GREEN else if sdvP1&gt; close then color.LIGHT_red else Color.GRAY);\n\nAddLabel(vwapLableAll, \&quot;VWAP +2= \&quot; + astext(UpperBand), if UpperBand&lt; close then Color.LIGHT_GREEN else if UpperBand&gt; close then color.LIGHT_red else Color.GRAY);\nAddLabel(vwapLableAll, \&quot;VWAP +3= \&quot; + astext(UpperBand2), if UpperBand2&lt; close then Color.LIGHT_GREEN else if UpperBand2&gt; close then color.LIGHT_red else Color.GRAY);\n\nAddLabel(vwapLableAll, \&quot;VWAP -1= \&quot; + astext(sdvN1), if sdvN1&lt; close then Color.LIGHT_GREEN else if sdvN1&gt; close then color.LIGHT_red else Color.GRAY);\nAddLabel(vwapLableAll, \&quot;VWAP -2= \&quot; + astext(LowerBand), if LowerBand&lt; close then Color.LIGHT_GREEN else if LowerBand&gt; close then color.LIGHT_red else Color.GRAY);\nAddLabel(vwapLableAll, \&quot;VWAP -3= \&quot; + astext(LowerBand2), if LowerBand2&lt; close then Color.LIGHT_GREEN else if LowerBand2&gt; close then color.LIGHT_red else Color.GRAY);\n\n#AddLabel(vwapLableAll, \&quot;VWAP R= \&quot; + astext(upperBand/sdvN1 -1)+\&quot;  \&quot;+astext(upperBand/lowerBand -1)+\&quot;  \&quot;+astext(upperBand2/lowerBand2 -1), if LowerBand&lt; close then Color.LIGHT_GREEN else if LowerBand&gt; close then color.LIGHT_red else Color.GRAY);\n\nAddLabel(vwapLableAll, \&quot;VWAP R= \&quot; + astext(upperBand/sdvN1 -1)+\&quot;  \&quot;+astext(upperBand/lowerBand -1)+\&quot;  \&quot;+astext(upperBand2/lowerBand2 -1), if LowerBand&lt; close then Color.LIGHT_GREEN else if LowerBand&gt; close then color.LIGHT_red else Color.GRAY);\n\n\n\ndef volCheck = volume &gt;= avgvolume &amp;&amp; volume &gt;= volMinimum &amp;&amp; volume &gt;= volume[1];\ndef isCross =  close crosses VWAP;\ndef abnormalSignal = isCross and volCheck;\n\n\nVWAP.SetDefaultColor(color.white);#(GetColor(0));\nplot signalup = if abnormalSignal and close &gt; VWAP then low else Double.NaN;\nsignalup.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nsignalup.SetDefaultColor(Color.CYAN);\nsignalup.SetLineWeight(2);\n\nplot signaldown =  if abnormalSignal and close &lt; VWAP then high else Double.NaN;\nsignaldown.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);\nsignaldown.SetDefaultColor(Color.CYAN);\nsignaldown.SetLineWeight(2);\n\nAssignPriceColor(if abnormalSignal and showPriceColor then Color.CYAN else Color.CURRENT);\n\n\n#####\nvwap.SetStyle(Curve.POINTS);\nUpperBand.SetDefaultColor(GetColor(0));\nLowerBand.SetDefaultColor(GetColor(0));\n\nUpperBand.SetStyle(Curve.POINTS);\nLowerBand.SetStyle(Curve.POINTS);\n\nUpperBand2.SetDefaultColor(Color.YELLOW);\nLowerBand2.SetDefaultColor(Color.YELLOW);\n\nUpperBand2.SetStyle(Curve.SHORT_DASH);\nLowerBand2.SetStyle(Curve.SHORT_DASH);\n#input AutoHide=yes;\n#def hideLower = if AutoHide then close &gt;vwap  else 0;;\n#def hideUpper = if AutoHide then  close &lt;vwap  else 0;#- deviation\n#addLabel(yes, \&quot;hide U\&quot;+hideUpper +\&quot; L\&quot;+hideLower);\n#UpperBand.setHiding(hideUpper);\n#LowerBand.setHiding(hideLower);\n#UpperBand.Hide();\n#LowerBand.Hide();\n#UpperBand2.Hide();\n#LowerBand2.Hide();&quot;,name=&quot;_740dc265_6e6e_38a5_ba0e_c0a058a5d552&quot;}){inputsMap:TreeMap0{^(&quot;volMinimum&quot;,500000)},inputsMap=@TreeMap0,plots{0:{paintingStrategy=2}}}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;\ninput fastLength = 12;\ninput slowLength = 26;\ninput MACDLength = 9;\n\n\ninput crossingType = {default above, below};\n#RSI\n\n\ninput over_Bought = 77;\ninput over_Sold = 20;\ninput RSIlength = 14;\ninput RSI_prev = 3; #previous bar to check\ninput averageType_rsi = AverageType.WILDERS;\n\ninput price = close;\ninput displace = 0;\n\n\n\n\n# Start EMA\n#MACDvolume weighted\n\ndef fastAvg = Sum(volume * price, fastLength) / Sum(volume, fastLength);\ndef slowAvg = Sum(volume * price, slowLength) / Sum(volume, slowLength);\ndef Value = fastAvg - slowAvg;\ndef Avg = ExpAverage(Value, MACDLength);\ndef Diff = Value - Avg;\ndef ZeroLine = 0;\n\n\n#############################################################################\n\n#def rsi_v = RSI(length = length, averageType = averageType_rsi);\ndef OverSold = over_Sold;\ndef OverBought = over_Bought;\n\ndef emaBull = price &gt; Avg;\ndef emaBear = price &lt; Avg;\n\n\n#############\n\n\n#def NetChgAvg = MovingAverage(averageType_rsi, price - price[1], length);\n#def TotChgAvg = MovingAverage(averageType_rsi, AbsValue(price - price[1]), length);\n\ndef NetChgAvg = MovingAverage(averageType_rsi, price - price[1], RSIlength);\ndef TotChgAvg = MovingAverage(averageType_rsi, AbsValue(price - price[1]), RSIlength);\ndef ChgRatio = if TotChgAvg != 0 then NetChgAvg / TotChgAvg else 0;\n\ndef RSI = 50 * (ChgRatio + 1);\n\n\n#################\n\n\n# Define Warning Signals\n#def bullish = RSI(length = RSIlength, averageType = averageType) &lt; over_Sold and emaBull and Value &gt;=0;\n#def bearish = RSI(length = RSIlength, averageType = averageType) &gt; over_Bought and emaBear and Value &lt;=0;\n#def bullish = (RSI crosses above over_Sold)  within 2 bars and   Diff &lt; Diff[1] and Diff &lt;= 0 and Value &gt;= 0;\n#def bearish = (RSI crosses below over_Bought) within 2 bars and  Diff &lt; Diff[1] and Diff &gt;= 0  and Value &lt;= 0;\n#############&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;\n\ndef sig_buy = ((RSI crosses above over_Sold)  within RSI_prev bars )and Diff &gt;= Diff[1] and Diff[1] &gt;= Diff[2]  and Diff &lt;= 0;# and Value &lt;= 0;\nplot signal_buy = sig_buy;\n\n\ndef sig_sell = ((RSI crosses below over_Bought) within RSI_prev bars) and  Diff &lt; Diff[1] and Diff[1] &gt;= Diff[2] and Diff &gt;= 0 ;# and Value &gt;= 0;\nplot signal_sell = sig_sell;\n\n\n\nsignal_buy.DefineColor(\&quot;Above\&quot;, GetColor(6));\nsignal_buy.DefineColor(\&quot;Below\&quot;, GetColor(8));\nsignal_buy.AssignValueColor(if crossingType == crossingType.above then signal_buy.Color(\&quot;Above\&quot;) else signal_buy.Color(\&quot;Below\&quot;));\nsignal_buy.setlineWeight(5);\nsignal_buy.SetPaintingStrategy(if crossingType == crossingType.above\n    then PaintingStrategy.BOOLEAN_ARROW_UP\n    else PaintingStrategy.BOOLEAN_ARROW_DOWN);\n\n#########\nsignal_sell.DefineColor(\&quot;Above\&quot;, GetColor(5));\nsignal_sell.DefineColor(\&quot;Below\&quot;, GetColor(8));\nsignal_sell.AssignValueColor(if crossingType == crossingType.above then signal_sell.Color(\&quot;Above\&quot;) else signal_sell.Color(\&quot;Below\&quot;));\n\nsignal_sell.SetPaintingStrategy(if crossingType == crossingType.above\n    then PaintingStrategy.BOOLEAN_ARROW_DOWN\n    else PaintingStrategy.BOOLEAN_ARROW_UP);\nsignal_sell.setlineWeight(5);\ninput bubble =no; \nAddChartBubble(bubble and sig_sell == 1, price, \&quot;S= \&quot; + price + \&quot; rsi \&quot; + RSI, GetColor(5), no);\n\n###########################****************&quot;,name=&quot;_9a9ffdba_4673_4d6a_a832_38adc7c18676&quot;}){inputsMap{!get:Integer0(&quot;over_Bought&quot;),!get:Integer1(&quot;MACDLength&quot;)}}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;###############################################################################################################################################\n################################################################################################################################################\n#\n# Author: Kory Gill, [USER=212]@korygill[/USER]\n#\n# Created from idea on https://usethinkscript.com/threads/finite-volume-elements.593/\n# Original idea is from http://mkatsanos.com/FVE.html\n#\n# VERSION HISTORY (sortable date and time (your local time is fine), and your initials\n# 20190907-1200-KG    - Created.\n\n###############################################################################\n### NORMALIZATION (Volume Damping adaptation) by Ramon Del Villar AKA PElonsax\n### 7/20/2020 #################################################################\n###############################################################################\n# The damping logic is taken directly from VFI #\n\n#declare once_per_bar;\n\n\n#################################################################$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n\n#########################################%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%$$$$$$$$$$$$$$$$$\n\n\n\n#\n# inputs\n#\ninput RSI_prev = 2; #previous bar to check\ninput def_cond = no;\ninput Samples = 14;\n\n\n\n#vwap vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\n#input numDevUp = 2.0;\ninput vwapTimeFrame = {default DAY, WEEK, MONTH};\n\ndef cap = getAggregationPeriod();\ndef errorInAggregation =\n    vwapTimeFrame == vwapTimeFrame.DAY and cap &gt;= AggregationPeriod.WEEK or\n    vwapTimeFrame== vwapTimeFrame.WEEK and cap &gt;= AggregationPeriod.MONTH;\nassert(!errorInAggregation, \&quot;timeFrame should be not less than current chart aggregation period\&quot;);\n\ndef yyyyMmDd = getYyyyMmDd();\ndef periodIndx;\nswitch (vwapTimeFrame) {\ncase DAY:\n    periodIndx = yyyyMmDd;\ncase WEEK:\n    periodIndx = Floor((daysFromDate(first(yyyyMmDd)) + getDayOfWeek(first(yyyyMmDd))) / 7);\ncase MONTH:\n    periodIndx = roundDown(yyyyMmDd / 100, 0);\n}\ndef isPeriodRolled = compoundValue(1, periodIndx != periodIndx[1], yes);\n\ndef volumeSum;\ndef volumeVwapSum;\ndef volumeVwap2Sum;\n\nif (isPeriodRolled) {\n    volumeSum = volume;\n    volumeVwapSum = volume * vwap;\n    volumeVwap2Sum = volume * Sqr(vwap);\n} else {\n    volumeSum = compoundValue(1, volumeSum[1] + volume, volume);\n    volumeVwapSum = compoundValue(1, volumeVwapSum[1] + volume * vwap, volume * vwap);\n    volumeVwap2Sum = compoundValue(1, volumeVwap2Sum[1] + volume * Sqr(vwap), volume * Sqr(vwap));\n}\ndef vWapprice = volumeVwapSum / volumeSum;\ndef deviation = Sqrt(Max(volumeVwap2Sum / volumeSum - Sqr(vWapprice), 0));\n\ndef VWAP = vWapprice;\n\n\n\ninput vwapCondition =no;\n#input vp=close;\ndef conVwapBuy =if  vwapCondition then  close &gt;= VWAp else 1;\n\n#####^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n\n#\n# FVE logic\n#\ndef bn = BarNumber();\ndef nan = double.NaN;\n\n\ninput maxVolumeCutOff = 2.5;\n###Coefficient used in calculation of “Cut Off” value. Lower values mean stronger damping of volume spikes###\n\nAssert(maxVolumeCutOff &gt; 0, \&quot;\'max volume cut off\' must be positive: \&quot; + maxVolumeCutOff);\n\ndef cutOff = 0.2 * StDev(Log(hlc3) - Log(hlc3[1]), 30) * close;\ndef hlcChange = hlc3 - hlc3[1];\ndef avgVolume = Average(volume, 30)[1];\ndef minVolume = Min(volume, avgVolume * maxVolumeCutOff);\ndef dirVolume = if hlcChange &gt; cutOff\n    then minVolume\n    else if hlcChange &lt; -cutOff\n        then -minVolume\n        else 0;\n\n\ndef mf = (close - (high+low)/2) + hlc3 - hlc3 [1];\ndef fveSum = Sum(dirVolume, Samples);\n\ndef fve = if bn &gt; Samples\n          then (fveSum / (Average(avgVolume, Samples) * Samples)) * 100\n          else nan;\n\n\n#\n# plots\n#\ndef pFVE = fve;\n\ndef pFVE_MA = MovingAverage(AverageType.SIMPLE, fve, 30);\n#pFVE_MA.SetDefaultColor(Color.Gray);\n#PFVE_MA.SetPaintingStrategy(PaintingStrategy.DASHES);\n\ndef zeroLine = 0;\ndef pFVE_Bull = if pFVE crosses above pFVE_MA then pFVE  else double.NaN ;\ndef pFVE_Bear = if pFVE &gt; pFVE_MA and pFVE[1] &gt; pFVE then pFVE else double.NaN ;\n\n#format plot \n\n#zeroLine.SetDefaultColor(Color.White);\n#pFVE.AssignValueColor(if pFVE &gt; pFVE_MA then color.green else color.red) ;\n#pFVE.SetLineWeight(3);\n\n\n#pFVE_Bull.SetPaintingStrategy(PaintingStrategy.SQUARES);\n#pFVE_Bull.SetLineWeight(5);\n#pFVE_Bull.SetDefaultColor(color.dark_green) ;\n\n#pFVE_Bear.SetPaintingStrategy(PaintingStrategy.SQUARES);\n#pFVE_Bear.SetLineWeight(5);\n#pFVE_Bear.SetDefaultColor(color.white) ;\n\n#AddCloud(pFVE, pFVE_MA, color.light_green, color.pink);\n\n\n\n#####################################################################################################################################################\n\n\n\n# Simple 2 Period RSI Trading Indicator\n# Assembled by BenTen at useThinkScript.com\n# You are free to use this code for personal use, and make derivative works from it. You are NOT GRANTED permission to use this code (or derivative works) for commercial purposes which includes and is not limited to selling, reselling, or packaging with other commercial indicators. Headers and attribution in this code should remain as provided, and any derivative works should extend the existing headers.\n\n#MACD\ninput price = close;\n#input length_macd = 14;\ninput displace = 0;\n#input showBreakoutSignals = no;\ninput crossingType = {default above, below};\n\ninput fastLength = 12;\ninput slowLength = 26;\ninput MACDLength = 9;\ndef fastAvg = Sum(volume * price, fastLength) / Sum(volume, fastLength);\ndef slowAvg = Sum(volume * price, slowLength) / Sum(volume, slowLength);\ndef Value = fastAvg - slowAvg;\ndef Avg = ExpAverage(Value, MACDLength);\ndef MACD_Diff  = Value - Avg;\n#def ZeroLine = 0;\n\n# RSI\ninput rsiLength = 14;\ninput overBought = 80;\ninput overSold = 28;\ninput rsiBuyLevel =40;\ninput averageType = AverageType.WILDERS;\ndef NetChgAvg = MovingAverage(averageType, price - price[1], RSIlength);\ndef TotChgAvg = MovingAverage(averageType, AbsValue(price - price[1]), RSIlength);\ndef ChgRatio = if TotChgAvg != 0 then NetChgAvg / TotChgAvg else 0;\ndef RSI = 50 * (ChgRatio + 1);\n#def OverSold = overSold;\n#def OverBought = overBought;\n\n#test\n#plot p= VWAp;#(period= AggregationPeriod.DAY);\n\n####################################\n\ndef cond_logic = if (def_cond) then MACD_Diff &lt;= 0 else yes;\n######\n#def sig_buy = Crosses(RSI(length = RSIlength, averageType = averageType).RSI, over_Sold, crossingType == crossingType.above) within RSI_prev bars and pFVE_Bull and cond_logic; # and Diff &lt;= 0;\ndef sig_buy = conVwapBuy and RSI&lt; rsiBuyLevel and pFVE_Bull  and cond_logic ;# and Diff &gt;= 0;\n#def sig_buy = pFVE_Bull and Diff &gt;= 0;\nplot signal_buy = sig_buy ;\n\n\ndef sig_sell = Crosses(RSI(length = RSIlength, averageType = averageType).RSI, overBought, crossingType == crossingType.below) within RSI_prev bars and pFVE_Bear ;\nplot signal_sell = sig_sell;\n\nsignal_buy.DefineColor(\&quot;Above\&quot;, Color.YELLOW);\nsignal_buy.DefineColor(\&quot;Below\&quot;, GetColor(8));\nsignal_buy.AssignValueColor(if crossingType == crossingType.above then signal_buy.Color(\&quot;Above\&quot;) else signal_buy.Color(\&quot;Below\&quot;));\nsignal_buy.setlineWeight(5);\nsignal_buy.SetPaintingStrategy(if crossingType == crossingType.above\n    then PaintingStrategy.BOOLEAN_ARROW_UP\n    else PaintingStrategy.BOOLEAN_ARROW_DOWN);\n\nsignal_sell.DefineColor(\&quot;Above\&quot;, Color.VIOLET);\nsignal_sell.DefineColor(\&quot;Below\&quot;, GetColor(8));\nsignal_sell.AssignValueColor(if crossingType == crossingType.above then signal_sell.Color(\&quot;Above\&quot;) else signal_sell.Color(\&quot;Below\&quot;));\n\nsignal_sell.SetPaintingStrategy(if crossingType == crossingType.above\n    then PaintingStrategy.BOOLEAN_ARROW_DOWN\n    else PaintingStrategy.BOOLEAN_ARROW_UP);\nsignal_sell.setlineWeight(5);\ninput bubble =no; \nAddChartBubble(bubble and sig_sell == 1, price, \&quot;S= \&quot; + price + \&quot; rsi \&quot; + RSI, Color.VIOLET, no);&quot;,name=&quot;_259d509b_f440_4edf_840b_2df1df75ab8c&quot;}){inputsMap:TreeMap1{^(&quot;overBought&quot;,@Integer0),^(&quot;price&quot;,!%7.FundamentalType.valueOf(*%7.FundamentalType.class,&quot;OPEN&quot;))},inputsMap=@TreeMap1}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;def loc = isNaN(close[3]) and !isNaN(close[4]);\nplot Highest_All = HighestAll(if high == HighestAll(high)\n                              then high\n                              else double.nan);\nHighest_ALL.SetStyle(Curve.LONG_DASH);\nHighest_All.SetDefaultColor(Color.gray);\nHighest_All.HideBubble();\nHighest_All.HideTitle();\naddChartBubble(loc, Highest_ALL, \&quot;ATH\&quot;, color.gray, no);\n#plot OnePercent = HighestAll(if close crosses HighestAll(high) * #.99\n#                           then HighestAll(high) * .99\n#                           else double.nan);\n#OnePercent.SetStyle(Curve.LONG_DASH);\n#OnePercent.SetDefaultColor(Color.gray);\n#OnePercent.HideBubble();\n#OnePercent.HideTitle();\n#addChartBubble(loc, OnePercent, \&quot;1%\&quot;, color.gray, no);\n#plot TwoPercent = HighestAll(if close crosses HighestALl(high) * #.98\n#                             then HighestAll(high) * .98\n#                             else double.nan);\n#TwoPercent.SetStyle(Curve.LONG_DASH);\n#TwoPercent.SetDefaultColor(Color.gray);\n#TwoPercent.HideBubble();\n#TwoPercent.HideTitle();\n#addChartBubble(loc, TwoPercent, \&quot;2%\&quot;, color.gray, no);\nplot FivePercent = HighestAll(if close crosses HighestALl(high) * .95\n                             then HighestAll(high) * .95\n                             else double.nan);\nFivePercent.SetStyle(Curve.LONG_DASH);\nFivePercent.SetDefaultColor(Color.liME);\nFivePercent.HideBubble();\nFivePercent.HideTitle();\naddChartBubble(loc, FivePercent, \&quot;5%\&quot;, color.lime, no);\nplot TenPercent =  HighestAll(if close crosses HighestALl(high) * .9\n                             then HighestAll(high) * .9\n                             else double.nan);\nTenPercent.SetStyle(Curve.LONG_DASH);\nTenPercent.SetDefaultColor(Color.lighT_ORANGE);\nTenPercent.HideBubble();\nTenPercent.HideTitle();\naddChartBubble(loc, TenPercent, \&quot;10%\&quot;, color.lighT_ORANGE, no);\nplot TwentyPercent =  HighestAll(if close crosses HighestALl(high) * .8\n                             then HighestAll(high) * .8\n                             else double.nan);\nTwentyPercent.SetStyle(Curve.LONG_DASH);\nTwentyPercent.SetDefaultColor(Color.lighT_RED);\nTwentyPercent.HideBubble();\nTwentyPercent.HideTitle();\naddChartBubble(loc, TwentyPercent, \&quot;20%\&quot;, color.lIGHT_RED, no);&quot;,name=&quot;_13dbc1dc_6181_3e17_ba02_f4c3cf860983&quot;}){hidden=&lt;T}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;#hint: yakBro daily ATR 2020\n#yakbro.com\n\ndeclare upper;\n\ninput atrLength =5;\ninput averageType = AverageType.WILDERS;\ninput Period = AggregationPeriod.DAY;\ninput atrLength2 =5;\n\ninput Period2 = AggregationPeriod.HOUR;\ninput offset = 0;\ninput prctOfDr = 50;\ninput showATR = yes;\ninput showTodayRS = yes; #show strength to today\'s range\n\ndef ATR = MovingAverage(averageType, TrueRange(high(period= Period), close(period = Period), low(period = Period)), ATRlength)[offset];\ndef ATR2 = MovingAverage(averageType, TrueRange(high(period= Period2), close(period = Period2), low(period = Period2)), ATRlength2)[offset];\ndef todayHigh = high(period = Period);\ndef todayLow = low(period = Period);\ndef DR = todayHigh - todayLow;#current range\ndef a = todayLow + DR * prctOfDr/100;#.5; #50% of DR price\ndef b = close(period=Period) - todayLow; #last close price to DR\ndef x = b / DR * 100; #current DR range\ndef rangeDiff = roundUp(ATR - DR); #Range left\n\n#labels\nAddLabel(showATR, \&quot;ATR: \&quot;+Round(DR,2)+ \&quot;/ ATR(\&quot;+atrLength+\&quot;):\&quot;+Round(ATR,2), (if DR &gt; ATR then Color.downtick else Color.LIGHT_GRAY));\n\nAddLabel(showATR, \&quot;Diff:\&quot; +absValue(rangeDiff),if rangeDiff &lt; 0 then Color.downtick else color.green);\nAddLabel(showATR, \&quot;/ ATR2(\&quot;+atrLength2+\&quot;):\&quot;+Round(ATR2,2), (if DR &gt; ATR2 then Color.downtick else Color.LIGHT_GRAY));\nAddLabel(showTodayRS,\&quot;RS: \&quot;+round(x,2) + \&quot;%\&quot;,if x &gt;70 then Color.GREEN else if x&gt;60 then color.LIGHT_GREEN else if x&gt;40 then color.orange else color.red);\n\n&quot;,name=&quot;_843536f6_4cec_345a_b9ad_7b0f7d848b54&quot;}){inputsMap:TreeMap2{^(&quot;atrLength2&quot;,@Integer1),^(&quot;Period2&quot;,&quot;THIRTY_MIN&quot;)},inputsMap=@TreeMap2}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;def showProfile = no;\ninput showLines = no;\ninput VaPrevious =yes;\ninput show_VA_cloud = yes;\ninput opacity = 20;\n\ndef opacity_inv ;#= if (opacity &gt;= 0 and opacity &lt;= 100) then 100 - opacity else 50;\n#input showCloud= yes;\ninput pricePerRowHeightMode = {default AUTOMATIC, TICKSIZE, CUSTOM};\ndef customRowHeight = 1.0;\ninput timePerProfile = { CHART, MINUTE, FIVE_MINUTE, TEN_MINUTE, FIFTEEN_MINUTE,THIRTY_MINUTE,  default HOUR, TWO_HOUR, FOUR_HOUR, DAY, TWO_DAY, THREE_DAY, FOUR_DAY, WEEK, TWO_WEEK, THREE_WEEK, MONTH, \&quot;OPT EXP\&quot;, BAR};\ninput multiplier = 1;\n\n\ninput triggerUpperVaLimitHigh = 5;\ninput triggerUpperVaLimitLow = -5;\ninput triggerLowerVaLimitHigh = 5;\ninput triggerLowerVaLimitLow = -5;\n#input triggerLowerVaLimit = 20;\n#input triggerLowerVaRange = 10;\n\ndef onExpansion = no;\ninput profiles = 50;\ninput showPointOfControl = no;\ninput showValueArea = no;\ninput valueAreaPercent = 70;\n\n\n\n\ndef period;\ndef yyyymmdd = GetYYYYMMDD();\ndef seconds = SecondsFromTime(0);\ndef month = GetYear() * 12 + GetMonth();\ndef day_number = DaysFromDate(First(yyyymmdd)) + GetDayOfWeek(First(yyyymmdd));\ndef dom = GetDayOfMonth(yyyymmdd);\ndef dow = GetDayOfWeek(yyyymmdd - dom + 1);\ndef expthismonth = (if dow &gt; 5 then 27 else 20) - dow;\ndef exp_opt = month + (dom &gt; expthismonth);\nswitch (timePerProfile) {\ncase CHART:\n    period = 0;\ncase MINUTE:\n    period = Floor(seconds / 60 + day_number * 24 * 60);\ncase FIVE_MINUTE:\n    period = Floor(seconds / 60 + day_number * 24 * 60);\ncase TEN_MINUTE:\n    period = Floor(seconds / 60 + day_number * 24 * 60);\ncase FIFTEEN_MINUTE:\n    period = Floor(seconds / 60 + day_number * 24 * 60);\ncase THIRTY_MINUTE:\n    period = Floor(seconds / (30 * 60) + day_number * 24 * 60);\ncase HOUR:\n    period = Floor(seconds / 3600 + day_number * 24);\ncase TWO_HOUR:\n    period = Floor(seconds / (2 * 3600) + day_number * 24);\ncase FOUR_HOUR:\n    period = Floor(seconds / (4 * 3600) + day_number * 24);\ncase DAY:\n    period = CountTradingDays(Min(First(yyyymmdd), yyyymmdd), yyyymmdd) - 1;\ncase TWO_DAY:\n    period = 2 * (CountTradingDays(Min(First(yyyymmdd), yyyymmdd), yyyymmdd) - 1);\ncase THREE_DAY:\n    period = 3 * (CountTradingDays(Min(First(yyyymmdd), yyyymmdd), yyyymmdd) - 1);\ncase FOUR_DAY:\n    period = 4 * (CountTradingDays(Min(First(yyyymmdd), yyyymmdd), yyyymmdd) - 1);\ncase WEEK:\n    period = Floor(day_number / 7);\ncase TWO_WEEK:\n    period = Floor(day_number / 14);\ncase THREE_WEEK:\n    period = Floor(day_number / 21);\ncase MONTH:\n    period = Floor(month - First(month));\ncase \&quot;OPT EXP\&quot;:\n    period = exp_opt - First(exp_opt);\ncase BAR:\n    period = BarNumber() - 1;\n}\n\ndef count;\nif VaPrevious\n{\n\n\n count = CompoundValue(1, if !(period != period[1]) then count[1] + 1 else 1, 1);\n}\nelse\n{\n count = CompoundValue(1, if period != period[1] then (count[1] + period - period[1]) % multiplier else count[1], 0);\n}\ndef cond = count &lt; count[1] + period - period[1];\n\n\ndef height;\nswitch (pricePerRowHeightMode) {\ncase AUTOMATIC:\n    height = PricePerRow.AUTOMATIC;\ncase TICKSIZE:\n    height = PricePerRow.TICKSIZE;\ncase CUSTOM:\n    height = customRowHeight;\n}\n\n#####vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\ninput PlotStartTime = 0930;#Hint PlotStartTime: Move to earlier time to shift bubbles to the left.\n\ndef Na = Double.NaN;\n#Previous Day Functions\ndef Day   = GetDayOfWeek(GetYYYYMMDD());\ndef CloseTime = SecondsTillTime(1600) &gt;= 0;\ndef OpenTime = SecondsFromTime(0930) &gt;= 0;\ndef RegHrs = CloseTime and OpenTime;\ndef PLow  =  CompoundValue(1, If(Day == Day[1] and RegHrs and low &lt; PLow[1], low, If(SecondsFromTime(0930) &lt;= 0 and RegHrs, low, PLow[1])), low);\ndef PHigh = CompoundValue(1, If(Day == Day[1] and RegHrs and high &gt; PHigh[1], high, If(SecondsFromTime(0930) &lt;= 0 and RegHrs, high, PHigh[1])), high);\ndef PrevLow  = low(period = AggregationPeriod.THIRTY_MIN);\ndef PrevHigh = high(period = AggregationPeriod.THIRTY_MIN);\n##################\n#Prior Day Profile - counting formula by functionform\nrec count1 = CompoundValue(1, if !(GetDay() != GetDay()[1]) then count1[1] + 1 else 1, 1);\ndef priorperiod = if IsNaN(count[1]) then 1 else Max(count, count[1]);\ndef priorperiod1 = if IsNaN(count1[1]) then 1 else Max(count1, count1[1]);\n#profile vol1 = VolumeProfile(\&quot;startNewProfile\&quot; = GetDay() != GetDay()[1], \&quot;onExpansion\&quot; = no);\nprofile vol1 = VolumeProfile(\&quot;startNewProfile\&quot; = period != period[1], \&quot;onExpansion\&quot; = no);\n#period - period[1];\ndef vahprior = vol1.GetHighestValueArea();\ndef pocprior = vol1.GetPointOfControl();\ndef valprior = vol1.GetLowestValueArea();\n\ndef vahprev = GetValue(vahprior, priorperiod);\ndef pocprev = GetValue(pocprior, priorperiod);\ndef valprev = GetValue(valprior, priorperiod);\n\n\n\n#vol.Show(if showProfile then GlobalColor(\&quot;Profile\&quot;) else Color.CURRENT, if showPointOfControl then GlobalColor(\&quot;Point Of Control\&quot;) else Color.CURRENT, if showValueArea then GlobalColor(\&quot;Value Area\&quot;) else Color.CURRENT, opacity);\n#profile vol = VolumeProfile(\&quot;startNewProfile\&quot; = cond, \&quot;onExpansion\&quot; = no);\n#vol.Show(if showProfile then GlobalColor(\&quot;Profile\&quot;) else Color.CURRENT, if showPointOfControl then GlobalColor(\&quot;Point Of Control\&quot;) else Color.CURRENT, if showValueArea then GlobalColor(\&quot;Value Area\&quot;) else Color.CURRENT, opacity);\ndef VAH = vahprev;\ndef VAL = valprev;\ndef POC = pocprev;\n\n\n############\n#Value Area Functions\ndef Pivot = hlc3(period = period)[1];\ndef PPoint = If(Pivot &gt; 0, Pivot, Na);\ndef VArea  = Between(close, VAL, VAH);\ndef VAreaabove  = close &gt; VAH;\ndef VAreabelow  = close &lt; VAL;\n\n#Time Functions\ndef CloseTime2 = SecondsTillTime(1600) &gt;= 0;\ndef OpenTime2 = SecondsFromTime(PlotStartTime) &gt;= 0;\ndef MarketOpen = OpenTime2 and CloseTime2;\ndef NewDay = IsNaN(close(period = “Day”)[-1]);\ninput  Chart  =yes;# MarketOpen;# and NewDay;\n#Value Area Cloud\ndef CloudClose = SecondsTillTime(1615) &gt; 0;\ndef Cloud      =1;#OpenTime and CloudClose;\ndef ChartCloud = Cloud and Chart;\ndef CloudTest  =If(1, ChartCloud, Chart);#If(CloudOpenOnly, ChartCloud, Chart);\n\n#Plots\nplot VH  = If(Chart and VAH &gt; 0, VAH, Na);\nplot PC  = If(Chart and POC &gt; 0, POC, Na);\nplot VL  = If(Chart and VAL &gt; 0, VAL, Na);\n#plot cloudhigh = If(CloudTest and ShowCloud, VAH, Na);\n#plot cloudlow  = If(CloudTest and ShowCloud, VAL, Na);\n#AddCloud(cloudhigh, cloudlow, Color.GRAY, Color.GRAY);\n#AddCloud(VH, VL, Color.GRAY, Color.GRAY);\n\n####@\ndef VAHigh= VH;\ndef VALow= VL;\n\n#####^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n#profile vol = VolumeProfile(\&quot;startNewProfile\&quot; = cond, \&quot;onExpansion\&quot; = onExpansion, \&quot;numberOfProfiles\&quot; = profiles, \&quot;pricePerRow\&quot; = height, \&quot;value area percent\&quot; = valueAreaPercent);\n##$profile vol = VolumeProfile(\&quot;startNewProfile\&quot; = period != period[1], \&quot;onExpansion\&quot; = no);\n##$def con = CompoundValue(1, onExpansion, no);\n##$def pc = if IsNaN(vol.GetPointOfControl()) and con then pc[1] else vol.GetPointOfControl();\n##$def hVA = if IsNaN(vol.GetHighestValueArea()) and con then hVA[1] else vol.GetHighestValueArea();\n##$def lVA = if IsNaN(vol.GetLowestValueArea()) and con then lVA[1] else vol.GetLowestValueArea();\n\n##$def hProfile = if IsNaN(vol.GetHighest()) and con then hProfile[1] else vol.GetHighest();\n##$def lProfile = if IsNaN(vol.GetLowest()) and con then lProfile[1] else vol.GetLowest();\n##$def plotsDomain = IsNaN(close) == onExpansion;\n\n#plot POC = if plotsDomain then pc else Double.NaN;\n#plot ProfileHigh = if plotsDomain then hProfile else Double.NaN;\n#plot ProfileLow = if plotsDomain then lProfile else Double.NaN;\n##$plot VAHigh = if plotsDomain then hVA else Double.NaN;\n##$plot VALow = if plotsDomain then lVA else Double.NaN;\n\nDefineGlobalColor(\&quot;Profile\&quot;, GetColor(1));\nDefineGlobalColor(\&quot;Point Of Control\&quot;, GetColor(5));\nDefineGlobalColor(\&quot;Value Area\&quot;, GetColor(8));\n\n#if showProfile then\n\nvol1.Show(if showProfile then GlobalColor(\&quot;Profile\&quot;) else Color.CURRENT, if showPointOfControl then GlobalColor(\&quot;Point Of Control\&quot;) else Color.CURRENT, if showValueArea then GlobalColor(\&quot;Value Area\&quot;) else Color.CURRENT, opacity);\n\n#else\n\n#Vol.();\n\n#POC.SetDefaultColor(GlobalColor(\&quot;Point Of Control\&quot;));\n#POC.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\n#VAHigh.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\n#VALow.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\n#VAHigh.SetDefaultColor(GlobalColor(\&quot;Value Area\&quot;));\n#VALow.SetDefaultColor(GlobalColor(\&quot;Value Area\&quot;));\n#ProfileHigh.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\n#ProfileLow.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\n#ProfileHigh.SetDefaultColor(GetColor(3));\n#ProfileLow.SetDefaultColor(GetColor(3));\n#ProfileHigh.Hide();\n\n\n#############################################\n#def oneVol = Roundup(( VAHigh - VALow) / VAHigh, 2);\ndef oneVol = RoundUp(( VAHigh - VALow) / 100, 2);\n#def LowerVaLimit = VALow + offset * (triggerLowerVaLimit);\n#lProfile;#POC;#lProfile;#VALow;#*VAHigh;#(*POC ;\ndef upperValimitH = VAHigh + oneVol * (triggerUpperVaLimitHigh);\ndef upperValimitL = VAHigh + oneVol * (triggerUpperVaLimitLow);\n\ndef lowerValimitH = VALow + oneVol * (triggerLowerVaLimitHigh);\ndef lowerValimitL = VALow + oneVol * (triggerLowerVaLimitLow);\n#triggerUpperVaLimitlow = if triggerUpperVaLimitlow&gt;=0 then triggerUpperVaLimitlow =-5 else triggerUpperVaLimitlow= triggerUpperVaLimitlow;\n\nplot VA_high_short = upperValimitH;\nplot VA_high_long = upperValimitL;\n\nplot VA_low_short = lowerValimitL;\nplot VA_low_long = lowerValimitH;\n\n#AddCloud(VA_high_long, VA_high_short, Color.LIGHT_RED, Color.LIGHT_RED);\n#AddCloud(VA_high_long, VA_high_short, Color.LIGHT_RED, Color.LIGHT_RED);\n\n#VA_low_short.SetPaintingStrategy(PaintingStrategy.DASHES);\n#VA_low_long.SetDefaultColor(Color.BLUE);\nVA_low_short.SetHiding(!showLines);\nVA_low_short.SetPaintingStrategy(PaintingStrategy.DASHES);\nVA_low_short.SetDefaultColor(Color.RED);\nVA_low_long.SetHiding(!showLines);\nVA_low_long.SetPaintingStrategy(PaintingStrategy.DASHES);\nVA_low_long.SetDefaultColor(Color.GREEN);\n\n\n\nVA_high_short.SetHiding(!showLines);\nVA_high_short.SetPaintingStrategy(PaintingStrategy.DASHES);\nVA_high_short.SetDefaultColor(Color.RED);\nVA_high_long.SetHiding(!showLines);\nVA_high_long.SetPaintingStrategy(PaintingStrategy.DASHES);\nVA_high_long.SetDefaultColor(Color.GREEN);\n\nif (!show_VA_cloud)\nthen\n{\n    opacity_inv = 1000;\n}\nelse\n\n{\n    opacity_inv = if (opacity &gt;= 0 and opacity &lt;= 100) then 100 - opacity else 50;\n}\nAddCloud(VA_low_short,  VA_low_long,  CreateColor(144 * opacity_inv / 100, 240, 144 * opacity_inv / 100),  CreateColor(144 * opacity_inv / 100, 240, 144 * opacity_inv / 100));\n\nAddCloud(VA_high_short,   VA_high_long,  CreateColor(204, 184 * opacity_inv / 100, 202 * opacity_inv / 100),   CreateColor(204, 184 * opacity_inv / 100, 202 * opacity_inv / 100));\n\n\n#################\ninput showLable = no;\ninput timeFrame = {default DAY, \&quot;2 DAYS\&quot;, \&quot;3 DAYS\&quot;, \&quot;4 DAYS\&quot;, WEEK, MONTH, \&quot;OPT EXP\&quot;};\n #AddChartBubble(high == high(period = timeFrame), high, \&quot;High of \&quot; + timeFrame + \&quot;: \&quot; + high, Color.GREEN, showLable);\n #AddChartBubble(low == low(period = timeFrame), low, \&quot;Low of \&quot; + timeFrame + \&quot;: \&quot; + low, Color.PINK, showLable);\n #AddChartBubble(GetYYYYMMDD() != GetYYYYMMDD()[1], high, \&quot;O: \&quot; + open(period = \&quot;DAY\&quot;) + \&quot;\\nChg: \&quot; + ( open(period = \&quot;DAY\&quot;) - open(period = \&quot;DAY\&quot;)[1] ), Color.PLUM, showLable);\n\n#AddChartBubble(GetYYYYMMDD() != GetYYYYMMDD()[1], high, \&quot;oneVol: \&quot; + oneVol + \&quot;\\nPOH: \&quot; +  VAHigh+ \&quot;\\nPOL: \&quot; +  VALow, Color.orange, yes);\n\nVH.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nPC.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nVL.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nVH.SetDefaultColor(Color.RED);\nPC.SetDefaultColor(Color.YELLOW);\nPC.SetStyle(Curve.LONG_DASH);\nVL.SetDefaultColor(Color.GREEN);\n\n\n\n\n#Pivot Functions\ndef Res1  = (2 * PPoint) - PrevLow;\ndef Supp1 = (2 * PPoint) - PrevHigh;\ndef Res2  = PPoint + (Res1 - Supp1); # def Res2  = PPoint + (Res1 - Supp1);\ndef Supp2 = PPoint - (Res1 - Supp1);\ndef Res3  = PPoint + (Res2 - Supp2);# def Res3  = PrevHigh + 2 * (PPoint - PrevLow);\ndef Supp3 = PPoint - (Res2 - Supp2);#PrevLow - 2 * (PrevHigh - PPoint);\ndef Res4  = PrevHigh + 3 * (PPoint - PrevLow);\ndef Supp4 = PrevLow - 3 * (PrevHigh - PPoint);\ndef Res5  = PrevHigh + 4 * (PPoint - PrevLow);\ndef Supp5 = PrevLow - 4 * (PrevHigh - PPoint);\ndef Res6  = PrevHigh + 5 * (PPoint - PrevLow);\ndef Supp6 = PrevLow - 5 * (PrevHigh - PPoint);\ndef Res7  = PrevHigh + 6 * (PPoint - PrevLow);\ndef Supp7 = PrevLow - 6 * (PrevHigh - PPoint);\ndef Res8  = PrevHigh + 7 * (PPoint - PrevLow);\ndef Supp8 = PrevLow - 7 * (PrevHigh - PPoint);\n\n#Rounding Functions\ndef RI   = RoundDown(Res1, 0) - ((Round(((RoundDown(Res1, 0) - Res1) / 0.25), 0)) * 0.25);\ndef SI   = RoundDown(Supp1, 0) - ((Round(((RoundDown(Supp1, 0) - Supp1) / 0.25), 0)) * 0.25);\ndef RII  = RoundDown(Res2, 0) - ((Round(((RoundDown(Res2, 0) - Res2) / 0.25), 0)) * 0.25);\ndef SII  = RoundDown(Supp2, 0) - ((Round(((RoundDown(Supp2, 0) - Supp2) / 0.25), 0)) * 0.25);\ndef RIII = RoundDown(Res3, 0) - ((Round(((RoundDown(Res3, 0) - Res3) / 0.25), 0)) * 0.25);\ndef SIII = RoundDown(Supp3, 0) - ((Round(((RoundDown(Supp3, 0) - Supp3) / 0.25), 0)) * 0.25);\ndef RIV  = RoundDown(Res4, 0) - ((Round(((RoundDown(Res4, 0) - Res4) / 0.25), 0)) * 0.25);\ndef SIV  = RoundDown(Supp4, 0) - ((Round(((RoundDown(Supp4, 0) - Supp4) / 0.25), 0)) * 0.25);\ndef PivP = RoundDown(PPoint, 0) - ((Round(((RoundDown(PPoint, 0) - PPoint) / 0.25), 0)) * 0.25);\ndef RV  = RoundDown(Res5, 0) - ((Round(((RoundDown(Res5, 0) - Res5) / 0.25), 0)) * 0.25);\ndef SV  = RoundDown(Supp5, 0) - ((Round(((RoundDown(Supp5, 0) - Supp5) / 0.25), 0)) * 0.25);\ndef RVI  = RoundDown(Res6, 0) - ((Round(((RoundDown(Res6, 0) - Res6) / 0.25), 0)) * 0.25);\ndef SVI  = RoundDown(Supp6, 0) - ((Round(((RoundDown(Supp6, 0) - Supp6) / 0.25), 0)) * 0.25);\ndef RVII  = RoundDown(Res7, 0) - ((Round(((RoundDown(Res7, 0) - Res7) / 0.25), 0)) * 0.25);\ndef SVII  = RoundDown(Supp7, 0) - ((Round(((RoundDown(Supp7, 0) - Supp7) / 0.25), 0)) * 0.25);\ndef RVIII  = RoundDown(Res8, 0) - ((Round(((RoundDown(Res8, 0) - Res8) / 0.25), 0)) * 0.25);\ndef SVIII  = RoundDown(Supp8, 0) - ((Round(((RoundDown(Supp8, 0) - Supp8) / 0.25), 0)) * 0.25);\n\n\n##\ndef R1_auto_show = (Between(RI, VL, VH) and close &gt; VL);\ndef S1_auto_show = (close &lt; VL or (Between(SI, VL, VH) and close &lt; VH));\n\ndef R2_auto_show = close &gt; VH;\ndef S2_auto_show = close &lt; VL;\n\ndef R3_auto_show = close &gt; (RI + ((RII - RI) / 2));\ndef S3_auto_show = close &lt; (SI - ((SI - SII) / 2));\n\ndef R4_auto_show = close &gt; (RII + ((RIII - RII) / 2));\ndef S4_auto_show =  close &lt; (SII - ((SII - SIII) / 2));\n\ndef R5_auto_show =  close &gt; (RIII + ((RIV - SIII) / 2));\ndef S5_auto_show =  close &lt; (SIII - ((SIII - SIV) / 2));\n\ndef R6_auto_show =  close &gt; (RIV + ((RV - SIV) / 2));\ndef S6_auto_show =  close &lt; (SIV - ((SVI - SV) / 2));\n\ndef R7_auto_show =  close &gt; (RV + ((RVI - SV) / 2));\ndef S7_auto_show =  close &lt; (SV- ((SV - SVI) / 2));\n\ndef R8_auto_show =  close &gt; (RVI + ((RVII - SIII) / 2));\ndef S8_auto_show =  close &lt; (SVI - ((SVI - SVII) / 2));\n#plot Pivots\n\n#AddLabel(yes , \&quot;day_number= \&quot; + (day_number), Color.pink);\n#AddLabel(yes , \&quot;period= \&quot; + (period), Color.pink);\n\n#plot test =PrevLow;\n&quot;,name=&quot;_d49e3a91_fd7a_414f_b507_d0dfaea0694e&quot;}){hidden=&lt;T,plots{1:{lineStyle=1}}}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# Upper study of Buy the Dip indicator\n# Assembled by BenTen at UseThinkScript.com\n# Version 1.0\n# &lt;INSTRUCTION&gt;\n# Get support at: https://usethinkscript.com/forums/buy-the-dip.32/\n# &lt;NOTES&gt;\n#Start\n#hint:&lt;b&gt;Buy The Dip&lt;/b&gt;\n# Based on the concept of \&quot;Synethetic VIX\&quot; by Larry Williams\n# This software is licensed for individual use only.\n# NOT FOR REDISTRIBUTION *PRIVATE/CONFIDENTIAL*\n# Copyright (c) 2020 useThinkScript LLC\n# Include MTF moving average that you can find here: https://usethinkscript.com/threads/multi-timeframe-mtf-moving-average-indicator-for-thinkorswim.135/\ninput aggregationPeriod1 = AggregationPeriod.THIRTY_MIN;\ninput aggregationPeriod2 = AggregationPeriod.HOUR;\ninput aggregationPeriod3 = AggregationPeriod.FOUR_HOURS;\ninput lenBTD = 22;\ninput mAvgPeriod = AggregationPeriod.DAY;\ninput AvgType = AverageType.SIMPLE;\ninput price = FundamentalType.CLOSE;#{default CLOSE, open};\ninput useCloseForBTD = yes;\ndef showMmovingAverage = no;\ninput bubbles = yes;\ninput showMeter = yes;\ninput showMtfMeter = yes;\ninput AutoHideMtfMeter = Yes;\n\ninput showMovAvgLabels = yes;\ndef timeFrame = getAggregationPeriod();\n def shortTimeFrame = timeFrame &lt; AggregationPeriod.FIVE_MIN;\ninput short_len = 50;\ninput long_len = 200;\ninput z = 0.1;\ndef Zeroline = z;\n\n\n\n\n\n# MTFindicator\n# MTF 1\ndef h = high;\ndef c = if useCloseForBTD then close else price;\n\n\n# MTF 2\ndef h2 = high(period = aggregationPeriod1);\ndef c2 = if useCloseForBTD then  close(period = aggregationPeriod1) else open(period = aggregationPeriod1);\n\n# MTF 3\n\ndef h3 = high(period = aggregationPeriod2);\ndef c3 = if useCloseForBTD then  close(period = aggregationPeriod2) else open(period = aggregationPeriod2);\n\n# MTF 4\n\ndef h4 = high(period = aggregationPeriod3);\ndef c4 = if useCloseForBTD then  close(period = aggregationPeriod2) else open(period = aggregationPeriod3);\n\n# indicator\ndef BTD = ((h - Lowest(close[1], lenBTD)) / Lowest(c[1], lenBTD)) * 100;\ndef BTD2 = ((h2 - Lowest(c2[1], lenBTD)) / Lowest(c2[1], lenBTD)) * 100;\ndef BTD3 = ((h3 - Lowest(c3[1], lenBTD)) / Lowest(c3[1], lenBTD)) * 100;\ndef BTD4 = ((h4 - Lowest(c4[1], lenBTD)) / Lowest(c4[1], lenBTD)) * 100;\n\n\n\n\n#\n#RSI\n#RSI\n\ninput overBoughtRsi = 70;\ninput overSoldRsi = 35;\ninput rsiLength = 14;\ninput rsiCondition = yes;\n#input rsiPrice = close;\ndef rsi1 = reference RSI(length = rsiLength, price = c );\ndef rsi2 = reference RSI(length = rsiLength, price = c2 );\ndef rsi3 = reference RSI(length = rsiLength, price = c3 );\ndef rsi4 = reference RSI(length = rsiLength, price = c4 );\n####\n\n\ndef rsiLogic1 = if (rsiCondition) then rsi1 &lt;= overSoldRsi else yes;\ndef rsiLogic2 = if (rsiCondition) then rsi2 &lt;= overSoldRsi else yes;\ndef rsiLogic3 = if (rsiCondition) then rsi3 &lt;= overSoldRsi else yes;\ndef rsiLogic4 = if (rsiCondition) then rsi4 &lt;= overSoldRsi else yes;\n\n\n\n#moving Average\n\n\ndef AVG1 = MovingAverage(AvgType, close(period = mAvgPeriod), short_len);\ndef AVG2 = MovingAverage(AvgType, close(period = mAvgPeriod), long_len);\ndef EMA_condition = close &gt; AVG1 or close &gt; AVG2;\nplot average1 = if showMmovingAverage then AVG1 else Double.NaN;\nplot average2 = if showMmovingAverage then AVG2 else Double.NaN;\n\n\n#signal\ndef BTDsignal = BTD crosses below Zeroline and rsiLogic1 and EMA_condition;\ndef BTDsignal2 = BTD2 crosses below Zeroline and rsiLogic2 and EMA_condition;\ndef BTDsignal3 = BTD3 crosses below Zeroline and rsiLogic3 and EMA_condition;\ndef BTDsignal4 = BTD4 crosses below Zeroline and rsiLogic4 and EMA_condition;\n\n\n# Plot indicator\n#def buythedip = BTD;\n#def Zeroline = z;\n\n#plot signal2_above = buythedip crosses above Zeroline;\n\n# Customize higher timeframe moving averages\naverage1.AssignValueColor(Color.CYAN);\naverage2.AssignValueColor(Color.PINK);\n\nAddLabel(showMeter   , Concat(\&quot;BTD = \&quot;, AsText( BTD)), Color.WHITE);\nAddLabel(showMtfMeter and (!AutoHideMtfMeter or BTD2 &lt; 1 ), Concat(\&quot;BTD2 = \&quot;, AsText( BTD2)), Color.LIGHT_GREEN);\nAddLabel(showMtfMeter  and (!AutoHideMtfMeter or BTD3 &lt; 1), Concat(\&quot;BTD3 = \&quot;, AsText( BTD3)), Color.ORANGE);\nAddLabel(showMtfMeter  and (!AutoHideMtfMeter or BTD4 &lt; 1), Concat(\&quot;BTD4 = \&quot;, AsText( BTD4)), Color.LIGHT_GREEN);\nAddLabel(showMovAvgLabels and yes, short_len+Concat(\&quot;MA= \&quot;, AsText( AVG1)), Color.CYAN);\nAddLabel(showMovAvgLabels and yes, long_len+Concat(\&quot;MA= \&quot;, AsText( AVG2)), Color.PINK);\n\nAddChartBubble(!shortTimeFrame and bubbles and BTDsignal and EMA_condition, low, \&quot;BTD1^ \&quot; + AsText(close) + \&quot; rsi=\&quot; + AsText(rsi1), Color.LIGHT_GREEN, no);#Buy the Dip\n\nAddChartBubble(!shortTimeFrame and bubbles and BTDsignal2 and EMA_condition, low, \&quot;BTD2^ \&quot; + AsText(close) + \&quot; rsi=\&quot; + AsText(rsi2), Color.GREEN, no);#Buy the Dip\nAddChartBubble(bubbles and BTDsignal3 and EMA_condition, low, \&quot;BTD3^ \&quot; + AsText(close) + \&quot; rsi=\&quot; + AsText(rsi3), Color.LIGHT_ORANGE, no);#Buy the Dip\nAddChartBubble(bubbles and BTDsignal4 and EMA_condition, low, \&quot;BTD4^ \&quot; + AsText(close) + \&quot;  rsi=\&quot; + AsText(rsi4), Color.YELLOW, no);#Buy the Dip\n\n\ndef strongBuy  = (BTDsignal+ BTDsignal2 +BTDsignal2+ BTDsignal3+BTDsignal4)&gt;=2 ; \n plot scan = strongBuy;\nscan.hide();\n#end&quot;,name=&quot;_1919350f_52d9_4911_8a8e_c23a6cc398a3&quot;}){inputsMap:TreeMap3{^(&quot;bubbles&quot;,&lt;F)},inputsMap=@TreeMap3}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;#start\n\n#hint: &lt;b&gt;Ask SLM Ribbon&lt;/b&gt;\\nThe Ask SLM Ribbon is a momentum indicator that uses a combination of three exponential moving averages. When the averages are in alinement, with the \&quot;superfast\&quot; moving average above the \&quot;fast\&quot; moving average and the fast moving average above the \&quot;slow\&quot; moving average, the momentum condition is positive. A \&quot;buy signal\&quot; is generated, with an up arrow, when above conditions are met and a \&quot;clear bar\&quot; occurs; with the low of that bar is above all of the moving averages. The positive momentum ends if the superfast moving average touches the fast moving average; then condition is considered neutral and an oppostive arrow will appear. Negative momentum and a \&quot;Sell signal\&quot; are the opposite of the bullish conditions. \\n \\n\\n--------------------------------------------------------------------------------\\nVolume bars can be colored to match the Chart by clicking on Style&gt;Settings&gt;Appearance&gt;Common, and color symbol as ticks  \\n\n\n\n# Variables:\n\n \n\n#input price = close;\ninput color_bars=no;\n\ninput useHeikinAshi =no;\n\ninput superfast_length = 4;\n\ninput fast_length = 7;\n\ninput slow_length =17;\n\n\ninput displace = 0;\ninput averageTypeSuperfast = AverageType.simple;\ninput averageTypefast = AverageType.simple;\ninput averageTypeSlow = AverageType.EXPONENTIAL;\n\ndef priceSupperFast ;\ndef priceFast ;\ndef priceSlow ;\n#Heikin Ashi\ndef haClose = (open+high+low+close)/4; #Heikin Ashi Close: The arithmetic mean of the current high, low, open, and close prices.\ndef haOpen = (haOpen[1] + haClose[1])/2  ;# Heikin Ashi Open: The midpoint of the previous candle.\ndef haHigh = max(high, max( haOpen, haClose) ) ;#Heikin Ashi High: The highest of the following: the actual high, the Heikin Ashi Open, or the Heikin Ashi Close.\ndef haLow = Min(low,min( haOpen, haClose));# Heikin Ashi Low: The lowest of the following: the actual low, the Heikin Ashi Open, or the Heikin Ashi Close.\n\nif useHeikinAshi \n\n then\n {\n  priceSupperFast = (haHigh +haLow+ haclose)/3;\n  priceFast = haclose;\n  priceSlow = haclose;\n }\nelse\n {\n  priceSupperFast = HLC3;\n  priceFast = close;\n  priceSlow = close;\n }\n\n\n\ndef mov_avg_superFast = MovingAverage(averageTypeSuperfast, priceSupperFast[-displace], superfast_length);\ndef mov_avg_Fast = MovingAverage(averageTypefast, priceFast[-displace], fast_length);\ndef mov_avg_Slow = MovingAverage(averageTypeSlow, priceSlow[-displace], slow_length);\n\n#moving averages\nPlot Superfast = mov_avg_superFast;\nplot Fast = mov_avg_Fast;\nplot Slow = mov_avg_Slow;\nSuperfast.setdefaultColor(color.yellow);\nFast.setdefaultColor(color.cyan);\nSlow.setdefaultColor(color.blue);\n\n\n \n\ndef buy = mov_avg_superFast &gt; mov_avg_Fast and mov_avg_Fast &gt; mov_avg_Slow and hlc3 &gt; mov_avg_superFast;\n\ndef stopbuy = mov_avg_superFast &lt;= mov_avg_Fast or  hlc3 &lt; mov_avg_Fast;\n\ndef buynow = !buy[1] and buy;\n\ndef buysignal = CompoundValue(1, if buynow and !stopbuy then 1 else if buysignal[1]==1 and stopbuy then 0 else buysignal[1], 0);\n\n \n\nplot Buy_Signal = buysignal[1] == 0 and buysignal==1;\nBuy_signal.setpaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nBuy_signal.setdefaultColor(color.dark_GREEN);\nBuy_signal.hidetitle();\n#Alert(condition = buysignal[1] == 0 and buysignal == 1, text = \&quot;Buy Signal\&quot;, sound = Sound.Bell, \&quot;alert type\&quot; = Alert.BAR);\n\nplot Momentum_Down = buysignal[1] ==1 and buysignal==0;\nMomentum_down.setpaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);\nMomentum_Down.setdefaultColor(color.plum);\nMomentum_down.hidetitle();\n\n#Alert(condition = buysignal[1] == 1 and buysignal == 0, text = \&quot;Momentum_Down\&quot;, sound = Sound.Bell, \&quot;alert type\&quot; = Alert.BAR);\ndef sell = mov_avg_superFast &lt; mov_avg_Fast and mov_avg_Fast &lt; mov_avg_Slow and high &lt; mov_avg_superFast;\ndef stopsell = mov_avg_superFast &gt;= mov_avg_Fast or  close &gt; mov_avg_Fast;;\n\ndef sellnow = !sell[1] and sell;\n\ndef sellsignal = CompoundValue(1, if sellnow and !stopsell then 1 else if sellsignal[1]==1 and stopsell then 0 else sellsignal[1], 0);\n\n \n\nPlot Sell_Signal = sellsignal[1] ==0 and sellsignal;\n\nSell_signal.setpaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_down);\n\nsell_signal.setDefaultColor(color.red);\n\nSell_signal.hidetitle();\n\n#Alert(condition = sellsignal[1] == 0 and sellsignal == 1, text = \&quot;Sell Signal\&quot;, sound = Sound.Bell, \&quot;alert type\&quot; = Alert.BAR);\n\n \n\nPlot Momentum_Up = sellsignal[1]==1 and sellSignal==0;\n\nMomentum_up.setpaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_up);\n\nMomentum_up.setDefaultColor(color.plum);\n\nMomentum_up.hidetitle();\n\n#Alert(condition = sellsignal[1] == 1 and sellSignal == 0, text = \&quot;Momentum_Up\&quot;, sound = Sound.Bell, \&quot;alert type\&quot; = Alert.BAR);\ninput priceHma = close;\n input lengthHma = 20;\n\ndef HMA = MovingAverage(AverageType.HULL, priceHma, lengthHma);\ndef HMA_Up=  HMA &gt; HMA[1];\ndef HMA_Down =! HMA_UP;\n\nplot Colorbars = if buysignal and HMA_Up then 1 else if  buysignal and !HMA_Up then  2 else if sellsignal and HMA_Down then 3  else if sellsignal and !HMA_Down then  4 else if !buysignal or !sellsignal then 5 else 0;\n\ncolorbars.setHiding(1);\n\nColorbars.definecolor(\&quot;Buy\&quot;, color.dark_green);\n\nColorbars.definecolor(\&quot;Sell\&quot;, color.red);\n\nColorbars.definecolor(\&quot;Neutral\&quot;, color.plum);\nColorbars.definecolor(\&quot;HullMA_up\&quot;, color.blue);\n\nColorbars.definecolor(\&quot;HullMA_down\&quot;, color.orange);\n\n\n\n\n\n\n\n\n###############\n\n#def Colorbars1 = if buysignal == 1 then 1 else if sellsignal == 1 then 2 else if buysignal == 0 or sellsignal == 0 then 3 else 0;\n\n\n\n\n\n\n\n\n \n\nAssignPriceColor(if Colorbars ==1 and color_bars then colorbars.color(\&quot;Buy\&quot;) else if colorbars ==2 and color_bars  then colorbars.color(\&quot;HullMA_down\&quot;) else if colorbars ==3 and color_bars  then colorbars.color(\&quot;Sell\&quot;)  else if colorbars ==4 and color_bars  then colorbars.color(\&quot;HullMA_up\&quot;)else if color_bars  then colorbars.color(\&quot;neutral\&quot;) else  Color.CURRENT);\n\n#end&quot;,name=&quot;_f0b875df_d13b_465c_aa4b_eb86cf6026c9&quot;}){inputsMap:TreeMap4{^(&quot;priceHma&quot;,&quot;CLOSE&quot;),^(&quot;slow_length&quot;,11)},inputsMap=@TreeMap4}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# Trend Pivots\n# Mobius\n# V01.01.29.2019\n# Uses trend of higher highs with higher lows and trend of lower lows with lower highs to locate pivots. Distance for trend is set by the user. Confirmation of a reversal from pivots is set with a multiple of the pivot bars range. That multiple is also a user input.\n# Trading Rules\n# 1) Trade when price crosses and closes outside the pivot Confirmation line. At that point looking for best entry. Min trade is 2 contracts\n# 2) Know your risk point before entering trade. Typical risk point is the pivot line itself. If your risk is crossed look for an exit. Never use hard stops - you\'ll often get out for little or no loss\n# 3) Know your Risk off point before entering. Typical Risk Off is an ATR multiple. Offer Risk Off as soon as possible for a Risk Free trade\n# 4) set mental stop one tick above entry when Risk Off is achieved\n# 5) if trade continues your way move mental stop for your runner to last support / resistance each time a new support / resistance is hit.\n\ninput n = 5;\ninput R_Mult = .7;\n\ndef o = open;\ndef h = high;\ndef l = low;\ndef c = close;\ndef x = BarNumber();\ndef nan = Double.NaN;\ndef ts = tickSize();\ndef tr = TrueRange(h, c, l);\ndef hh = if Sum(h &gt; h[1], n) &gt;= n and \n            Sum(l &gt; l[1], n) &gt;= n-1\n         then h\n         else if h &gt; hh[1]\n              then h\n              else hh[1];\ndef xh = if h == hh\n         then x\n         else nan;\nplot hh_ = if x &gt;= HighestAll(xh)\n           then HighestAll(if IsNaN(c[-1])\n                           then hh\n                           else nan)\n           else nan;\n     hh_.SetDefaultColor(Color.RED);\n     hh_.HideTitle();\n     hh_.HideBubble();\ndef hR = if h == hh\n         then Round(Average(tr, n)/TickSize(), 0)*TickSize()\n         else hR[1];\ndef PrevL = if h == hh\n            then l[1]\n            else PrevL[1];\nplot STO = if x &gt;= HighestAll(xh)\n           then HighestAll(if IsNaN(c[-1])\n           then Round((Max(PrevL, hh_ - (hR * R_Mult))) / ts, 0) * ts\n                           else nan)\n           else nan;\n     STO.SetDefaultColor(Color.RED);\n     STO.HideTitle();\n     STO.HideBubble();\nplot STO_RO = if x &gt;= HighestAll(xh)\n              then HighestAll(if isNaN(c[-1])\n                              then STO - Min(hR, TickSize() * 16)\n                              else nan)\n              else nan;\n     STO_RO.SetStyle(Curve.Long_Dash);\n     STO_RO.SetDefaultColor(Color.White);\n     STO_RO.HideBubble();\n     STO_RO.HideTitle();\nAddChartBubble(x == HighestAll(x), STO_RO, \&quot;RO\&quot;, STO_RO.TakeValueColor(), 0);\ndef ll = if Sum(l &lt; l[1], n) &gt;= n and \n            Sum(h &lt; h[1], n) &gt;= n-1\n         then l\n         else if l &lt; ll[1]\n              then l\n              else ll[1];\ndef xl = if l == ll\n         then x\n         else nan;\nplot ll_ = if x &gt;= HighestAll(xl)\n           then HighestAll(if IsNaN(c[-1])\n                           then ll\n                           else nan)\n           else nan;\n     ll_.SetDefaultColor(Color.GREEN);\n     ll_.HideTitle();\n     ll_.HideBubble();\ndef lR = if l == ll\n         then Round(Average(tr, n)/TickSize(), 0)*TickSize()\n         else lR[1];\ndef PrevH = if l == ll\n            then h[1]\n            else PrevH[1];\nplot BTO = if x &gt;= HighestAll(xl)\n           then HighestAll(if IsNaN(c[-1])\n           then Round((Min(PrevH, ll_ + (lR * R_Mult))) / ts, 0) * ts\n                           else nan)\n           else nan;\n     BTO.SetDefaultColor(Color.GREEN);\n     BTO.HideTitle();\n     BTO.HideBubble();\nplot BTO_RO = if x &gt;= HighestAll(xl)\n              then HighestAll(if isNaN(c[-1])\n                              then BTO + Min(lR, TickSize() * 16)\n                              else nan)\n              else nan;\n     BTO_RO.SetStyle(Curve.Long_Dash);\n     BTO_RO.SetDefaultColor(Color.White);\n     BTO_RO.HideBubble();\n     BTO_RO.HideTitle();\nAddChartBubble(x == HighestAll(x), BTO_RO, \&quot;RO\&quot;, BTO_RO.TakeValueColor(), 1);\nAddCloud(STO, hh_, Color.LIGHT_RED, Color.LIGHT_RED);\nAddCloud(ll_, BTO, Color.LIGHT_GREEN, Color.LIGHT_GREEN);\nAlert(c crosses below STO, \&quot;\&quot;, Alert.Bar, Sound.Bell);\nAlert(c crosses above BTO, \&quot;\&quot;, Alert.Bar, Sound.Ding);\n# End Code Trend Pivots &quot;,name=&quot;_bdb90595_db2e_3040_abcc_53876b8695e2&quot;}){alerts:LocalAlertArray0,alerts=@LocalAlertArray0})}},!get(#%4.SubgraphId(&quot;Volume&quot;)){height=80,storableIndicators{+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;#xiuyu 2020\n##volume datas\n\ndeclare on_volume;\n\n#Inputs datas\n\ninput LengthForSecond = 10;\ninput rVOLhigh = 2; #if avg rovl is 2 times\n\ninput show30dayData = yes;\ninput showEnteredLengthRvol = yes;\ninput ShowTodayVolume =  yes;\ninput ShowAvgVolume = yes;\ninput ShowEnteredRVOL = yes;\ninput ShowCurrentBar = yes;\n\n\n\n#Volume Data\ndef ADVol30 = Average(volume(period = AggregationPeriod.DAY), 30)[1];\ndef ADVolEntered = Average(volume(period = AggregationPeriod.DAY), LengthForSecond)[1];\ndef today = volume(period = aggregationPeriod.DAY);\ndef Rvol30 = round(today/Average(volume(period = AggregationPeriod.DAY), 30)[1],2);\ndef RvolEntered = round(today/Average(volume(period = AggregationPeriod.DAY), LengthForSecond)[1],2);\n\n# Labels\n\n#shows 30days data ADV n Rvol\nAddLabel(Show30dayData, \&quot;30 dADV: \&quot; + Round(ADVol30, 0), Color.LIGHT_GRAY);\nAddLabel(Show30dayData,\&quot;30rVol:\&quot; + Rvol30, (if Rvol30 &gt;= rVolhigh then Color.RED else if Rvol30 &gt;= 1 then Color.ORANGE else Color.WHITE) );\n\n#shows user entered datas\nAddLabel(ShowEnteredLengthRvol, LengthForSecond +\&quot; dADV: \&quot; + Round(ADVolEntered, 0), Color.LIGHT_GRAY);\nAddLabel(ShowEnteredRVOL,LengthForSecond + \&quot;rVol:\&quot; + RvolEntered ,(if RvolEntered &gt;= rVOLhigh then Color.RED else if RvolEntered &gt;= 1 then Color.ORANGE else Color.light_GRAY));\n\n#shows todays volume\nAddLabel(ShowTodayVolume, \&quot;Today: \&quot; + today, (if Rvol30 &gt;= rVolhigh then Color.reD else if Rvol30 &gt;= 1 then Color.ORANGE else Color.LIGHT_GRAY));\n\n\n#shows current bar\'s volume\nAddLabel(ShowCurrentBar, \&quot;Cur Bar: \&quot; + volume,color.light_GRAY);\n\n\n&quot;,name=&quot;_7350e5e2_721c_35be_a787_608a2d7c1672&quot;})),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2008-2021\n#\n\ndeclare real_size;\ndeclare on_volume;\ndeclare hide_on_intraday;\n\nplot Data = open_interest();&quot;,name=&quot;OpenInterest&quot;}))}},^(#%4.SubgraphId(&quot;Subgraph25&quot;),#%4.SubgraphStorableModel{height=99,storableIndicators.+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# TheoTrade RSI in Laguerre Time Self Adjusting With Fractal Energy\n# Mobius\n# V03.06.15.2016\n# Both Fractal Energy and RSI are plotted. RSI in cyan and FE in yellow. Look for trend exhaustion in the FE and a reversal of RSI or Price compression in FE and an RSI reversal.\n\ndeclare lower;\n\n#Inputs: \ninput nFE = 13;#hint nFE: length for Fractal Energy calculation. \n\n# Variables:\ndef o;\ndef h;\ndef l;\ndef c;\ndef CU1;\ndef CU2;\ndef CU;\ndef CD1;\ndef CD2;\ndef CD;\ndef L0;\ndef L1;\ndef L2;\ndef L3;\nplot RSI;\nplot OS;\nplot OB;\n\n# Calculations\no = (open + close[1]) / 2;\nh = Max(high, close[1]);\nl = Min(low, close[1]);\nc = (o + h + l + close) / 4;\nplot gamma = Log(Sum((Max(high, close[1]) - Min(low, close[1])), nFE) / \n        (Highest(high, nFE) - Lowest(low, nFE)))\n            / Log(nFE);\ngamma.SetDefaultColor(Color.Yellow);\nL0 = (1 – gamma) * c + gamma * L0[1];\nL1 = -gamma * L0 + L0[1] + gamma * L1[1];\nL2 = -gamma * L1 + L1[1] + gamma * L2[1];\nL3 = -gamma * L2 + L2[1] + gamma * L3[1];\nif L0 &gt;= L1\nthen {\n    CU1 = L0 - L1;\n    CD1 = 0;\n} else {\n    CD1 = L1 - L0;\n    CU1 = 0;\n}\nif L1 &gt;= L2\nthen {\n    CU2 = CU1 + L1 - L2;\n    CD2 = CD1;\n} else {\n    CD2 = CD1 + L2 - L1;\n    CU2 = CU1;\n}\nif L2 &gt;= L3\nthen {\n    CU = CU2 + L2 - L3;\n    CD = CD2;\n} else {\n    CU = CU2;\n    CD = CD2 + L3 - L2;\n}\n\nRSI = if CU + CD &lt;&gt; 0 then CU / (CU + CD) else 0;\nRSI.SetDefaultColor(Color.Cyan);\nOS = if IsNaN(close) then Double.NaN else 0.2;\nOS.SetDefaultColor(Color.Gray);\nOS.HideBubble();\nOS.HideTitle();\nOB = if IsNaN(close) then Double.NaN else 0.8;\nOB.SetDefaultColor(Color.Gray);\nOB.HideBubble();\nOB.HideTitle();\nplot FEh = if isNaN(close) then double.nan else .618;\nFEh.SetStyle(Curve.Long_Dash);\nFEh.HideBubble();\nFEh.SetDefaultColor(Color.Dark_Gray);\nFEh.HideTitle();\nplot FEl = if isNaN(close) then double.nan else .382;\nFEl.SetStyle(Curve.Long_Dash);\nFEl.SetDefaultColor(Color.Dark_Gray);\nFEl.HideBubble();\nFEl.HideTitle();\nAddCloud(0, OS, Color.Green, Color.Green);\nAddCloud(OB, 1, Color.Red, Color.Red);\nAlert(RSI crosses below .9, \&quot;\&quot;, Alert.BAR, Sound.Bell);\nAlert(RSI crosses above .1, \&quot;\&quot;, Alert.BAR, Sound.Bell);\n\n# End Code RSI_Laguerre Self Adjusting with Fractal Energy&quot;,name=&quot;_31a475af_ca9a_3990_9a81_9098babc9d60&quot;}){alerts:LocalAlertArray1,alerts=@LocalAlertArray1,hidden=&lt;T,plots{0:{paintingStrategy=5}}})}),^(#%4.SubgraphId(&quot;Subgraph26&quot;),#%4.SubgraphStorableModel{height=80,storableIndicators.+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# TheoTrade RSI in Laguerre Time Self Adjusting With Fractal Energy\n# Mobius\n# V03.06.15.2016\n# Both Fractal Energy and RSI are plotted. RSI in cyan and FE in yellow. Look for trend exhaustion in the FE and a reversal of RSI or Price compression in FE and an RSI reversal.\n\ndeclare lower;\n\n#Inputs: \ninput aggregationPeriod1 =AggregationPeriod.THIRTY_MIN;\n\n#input useOpen =no;\n#def price = if (useOpen) then   open(period = aggregationPeriod1) else close(period = aggregationPeriod1) ;\n\ninput nFE = 13;#hint nFE: length for Fractal Energy calculation. \n\n# Variables:\ndef o;\ndef h;\ndef l;\ndef c;\ndef CU1;\ndef CU2;\ndef CU;\ndef CD1;\ndef CD2;\ndef CD;\ndef L0;\ndef L1;\ndef L2;\ndef L3;\nplot RSI;\nplot OS;\nplot OB;\n\n# Calculations\no = (open(period = aggregationPeriod1) + close(period = aggregationPeriod1)[1]) / 2;\nh = Max(high(period = aggregationPeriod1), close(period = aggregationPeriod1)[1]);\nl = Min(low(period = aggregationPeriod1), close(period = aggregationPeriod1)[1]);\nc = (o + h + l + close(period = aggregationPeriod1)) / 4;\nplot gamma = Log(Sum((Max(high(period = aggregationPeriod1), close(period = aggregationPeriod1)[1]) - Min(low(period = aggregationPeriod1), close(period = aggregationPeriod1)[1])), nFE) / \n        (Highest(high(period = aggregationPeriod1), nFE) - Lowest(low(period = aggregationPeriod1), nFE)))\n            / Log(nFE);\ngamma.SetDefaultColor(Color.Yellow);\nL0 = (1 – gamma) * c + gamma * L0[1];\nL1 = -gamma * L0 + L0[1] + gamma * L1[1];\nL2 = -gamma * L1 + L1[1] + gamma * L2[1];\nL3 = -gamma * L2 + L2[1] + gamma * L3[1];\nif L0 &gt;= L1\nthen {\n    CU1 = L0 - L1;\n    CD1 = 0;\n} else {\n    CD1 = L1 - L0;\n    CU1 = 0;\n}\nif L1 &gt;= L2\nthen {\n    CU2 = CU1 + L1 - L2;\n    CD2 = CD1;\n} else {\n    CD2 = CD1 + L2 - L1;\n    CU2 = CU1;\n}\nif L2 &gt;= L3\nthen {\n    CU = CU2 + L2 - L3;\n    CD = CD2;\n} else {\n    CU = CU2;\n    CD = CD2 + L3 - L2;\n}\n\nRSI = if CU + CD &lt;&gt; 0 then CU / (CU + CD) else 0;\nRSI.SetDefaultColor(Color.Cyan);\nOS = if IsNaN(close(period = aggregationPeriod1)) then Double.NaN else 0.2;\nOS.SetDefaultColor(Color.Gray);\nOS.HideBubble();\nOS.HideTitle();\nOB = if IsNaN(close(period = aggregationPeriod1)) then Double.NaN else 0.8;\nOB.SetDefaultColor(Color.Gray);\nOB.HideBubble();\nOB.HideTitle();\nplot FEh = if isNaN(close(period = aggregationPeriod1)) then double.nan else .618;\nFEh.SetStyle(Curve.Long_Dash);\nFEh.HideBubble();\nFEh.SetDefaultColor(Color.Dark_Gray);\nFEh.HideTitle();\nplot FEl = if isNaN(close(period = aggregationPeriod1)) then double.nan else .382;\nFEl.SetStyle(Curve.Long_Dash);\nFEl.SetDefaultColor(Color.Dark_Gray);\nFEl.HideBubble();\nFEl.HideTitle();\nAddCloud(0, OS, Color.Green, Color.Green);\nAddCloud(OB, 1, Color.Red, Color.Red);\nAlert(RSI crosses below .9, \&quot;\&quot;, Alert.BAR, Sound.Bell);\nAlert(RSI crosses above .1, \&quot;\&quot;, Alert.BAR, Sound.Bell);\n\n# End Code RSI_Laguerre Self Adjusting with Fractal Energy&quot;,name=&quot;_d17145e8_5004_3ac1_8e21_8466363fd097&quot;}){alerts:LocalAlertArray2,alerts=@LocalAlertArray2,hidden=&lt;T,inputsMap:TreeMap5{^(&quot;aggregationPeriod1&quot;,&quot;FIFTEEN_MIN&quot;)},inputsMap=@TreeMap5,plots{0:{paintingStrategy=3}}})}),^(#%4.SubgraphId(&quot;Subgraph28&quot;),#%4.SubgraphStorableModel{height=128,storableIndicators.+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;\n# Standard version of Buy the Dip indicator\n# Assembled by BenTen at UseThinkScript.com\n# Version 1.0\n# &lt;INSTRUCTION&gt;\n# Get support at: https://usethinkscript.com/forums/buy-the-dip.32/\n# &lt;NOTES&gt;\n# Based on the concept of \&quot;Synethetic VIX\&quot; by Larry Williams\n# This software is licensed for individual use only.\n# NOT FOR REDISTRIBUTION *PRIVATE/CONFIDENTIAL*\n# Copyright (c) 2020 useThinkScript LLC\n\ndeclare lower;\n\n\ninput price = open;\ninput length = 22;\ninput z = 0.01;\ninput cnfrmClose = no;\ninput hideBTDPlot = yes;\n\nplot Zeroline = z;\n###\n\n# BTD Plot indicator\n#def BTD = ((high - Lowest(price[1], length)) / Lowest(price[1], length)) * 100;\n\ndef BTD = if cnfrmClose then ((high[1] - Lowest(price[1], length)) / Lowest(price[1], length)) * 100 else  ((high - Lowest(price[1], length)) / Lowest(price[1], length)) * 100;\ndef  BTDsignal_condition = BTD crosses above Zeroline ;\n\n\n# STR Plot indicator\n#def STR = ((low - Highest(close[1], length)) / Highest(close[1], length)) * 100;\ndef STR = if cnfrmClose then ((low[1] - Highest(price[1], length)) / Highest(price[1], length)) * 100 else ((low - Highest(price[1], length)) / Highest(price[1], length)) * 100;\ndef STRsignal_condition = STR crosses below Zeroline ;#within  3 bar;\n\n\ndef Svix =  if cnfrmClose then ((price[1] - Lowest(low[1], length)) / (Highest(high[1], length) - Lowest(low[1], length))) * 100\nelse  ((price - Lowest(low[1], length)) / (Highest(high[1], length) - Lowest(low[1], length))) * 100;\n\n\n\n\n\n#plot\nplot buyDip = BTD;\nplot sellRip = STR;\nplot buySvix = Svix;\n\n\nbuyDip.SetHiding(hideBTDPlot);\nsellRip.SetHiding(hideBTDPlot);\nbuySvix.SetHiding(hideBTDPlot);\n\n#plot DIPsignal1 = if  buythedip crosses above Zeroline then 1 else 0;\nbuyDip.AssignValueColor(Color.PINK);\nsellRip.AssignValueColor(Color.YELLOW);\n\n\n#buythedip3.SetStyle (Curve.SHORT_DASH);\nbuySvix.AssignValueColor(Color.VIOLET);\ninput hidePlot = no;\nbuySvix.SetHiding(hidePlot);#hidePlot(hidePlot);\nZeroline.AssignValueColor(Color.WHITE);\n\nAddLabel(yes, Concat(\&quot;BTD = \&quot;, BTD), Color.ORANGE);\n;\nAddLabel(yes, Concat(\&quot;STR = \&quot;, STR), Color.PINK);\n#AddLabel(yes, Concat(\&quot;Vixf = \&quot;, buythedip2), Color.PINK);\n\nAddLabel(yes, Concat(\&quot;Svix = \&quot;, buySvix), Color.VIOLET );\n\n##SMI, Stochastic Momentum Index \n\ninput over_bought_SMI  = 40.0;\ninput over_sold_SMI = -40.0;\ninput percentDLength = 3;\ninput percentKLength = 5;\n\ndef min_low = Lowest(low, percentKLength);\ndef max_high = Highest(high, percentKLength);\ndef rel_diff = close - (max_high + min_low) / 2;\ndef diff = (max_high - min_low);#/min_low;\n\ndef avgrel = ExpAverage(ExpAverage(rel_diff, percentDLength), percentDLength);\ndef avgdiff = ExpAverage(ExpAverage(diff, percentDLength), percentDLength);\n#def avgBTD= expaverage(expaverage(buythedip, percentDLength), percentDLength);\n#def avgdBTD = expaverage(expaverage(Lowest(price[1], length), percentDLength), percentDLength);\n\n\nplot SMI = if avgdiff != 0 then avgrel / (avgdiff / 2) * 100 else 0;\n#smi.setDefaultColor(getColor(1));\n\nplot AvgSMI = ExpAverage(SMI, percentDLength);\n\ninput Buyth=-40;\n\ninput thCondition = {default \&quot;blw\&quot; , \&quot;abv\&quot;};\ndef cond;\ndef Na = Double.Nan;\n\nswitch (thCondition)\n{\n case blw: \n    cond = 1;\ncase abv :\n   cond = 0;\n}\nplot buySmi;\nplot sellsmi;\n\nif cond \n{\n buySmi = if SMI crosses above AvgSMI and SMI &lt;Buyth and SMI&lt;over_bought_SMI then SMI* 0.996 else Na;\n#sell = if SMI crosses below AvgSMI and SMI &gt;Sth and SMI&lt;80 then 1 else 0;\n}\nelse{\n buySmi = if SMI crosses above AvgSMI and SMI &gt;Buyth and SMI&lt;60 then Smi* 0.996 else na;\n\n\n}\n\n\n\nsellSmi = if SMI crosses below AvgSMI and SMI &gt;60 and SMI&lt;80 then smi* 1.004 else na;\n\nSellSmi.setpaintingStrategy(PaintingStrategy.ARROW_down);\n\nsellSmi.setDefaultColor(color.red);\nBuySmi.setpaintingStrategy(PaintingStrategy.ARROW_up);\n\nBuySmi.setDefaultColor(color.Light_green);\n\n#avgsmi.setDefaultColor(getcolor(5));\n\n##plot overbought_SMI  = over_bought_SMI ;\n##overbought_SMI .SetDefaultColor(GetColor(5));\n\n##plot oversold_SMI  = over_sold_SMI ;\n##oversold_SMI .SetDefaultColor(GetColor(5));\n#####################################################\n\n#RSI\ninput overBoughtRsi = 70;\ninput overSoldRsi = 30;\ninput rsiLength = 14;\ninput rsiPrice = close;\ndef rsi_val = reference RSI(length = rsiLength, price = rsiPrice );\n####\n\n\n\nAddLabel(yes, \&quot;RSI = \&quot; + rsi_val , if rsi_val &gt; overBoughtRsi  then Color.RED else if rsi_val &lt; overSoldRsi then  Color.GREEN else Color.GRAY);\n\n\n\n#trend reversal\ndef y = rsi_val ;\ninput riReversLength = 2;\ninput lookBack = 2;\n\n\ndef rsi_expAvg = ExpAverage(rsi_val, riReversLength);\n\n#trend reversal\ndef overBoughtReversal = if ((rsi_expAvg &gt; overBoughtRsi)within 2 bar) and  (rsi_expAvg crosses above rsi_val) then price else 0;# if (rsi_expAvg &gt; OverBought and  rsi_expAvg crosses above rsi_val  within 3 bar ) then 40 else 0;\ndef oversoldRevesal = if ((rsi_expAvg &lt; overSoldRsi)within 2 bar) and  (rsi_expAvg crosses below rsi_val within 2 bar) then price else 0;\n\n##############\n########!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n#vwap vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\n#input numDevUp = 2.0;\ninput vwapTimeFrame = {default DAY, WEEK, MONTH};\n\ndef cap = GetAggregationPeriod();\ndef errorInAggregation =\n    vwapTimeFrame == vwapTimeFrame.DAY and cap &gt;= AggregationPeriod.WEEK or\n    vwapTimeFrame == vwapTimeFrame.WEEK and cap &gt;= AggregationPeriod.MONTH;\nAssert(!errorInAggregation, \&quot;timeFrame should be not less than current chart aggregation period\&quot;);\n\ndef yyyyMmDd = GetYYYYMMDD();\ndef periodIndx;\nswitch (vwapTimeFrame) {\ncase DAY:\n    periodIndx = yyyyMmDd;\ncase WEEK:\n    periodIndx = Floor((DaysFromDate(First(yyyyMmDd)) + GetDayOfWeek(First(yyyyMmDd))) / 7);\ncase MONTH:\n    periodIndx = RoundDown(yyyyMmDd / 100, 0);\n}\ndef isPeriodRolled = CompoundValue(1, periodIndx != periodIndx[1], yes);\n\ndef volumeSum;\ndef volumeVwapSum;\ndef volumeVwap2Sum;\n\nif (isPeriodRolled) {\n    volumeSum = volume;\n    volumeVwapSum = volume * vwap;\n    volumeVwap2Sum = volume * Sqr(vwap);\n} else {\n    volumeSum = CompoundValue(1, volumeSum[1] + volume, volume);\n    volumeVwapSum = CompoundValue(1, volumeVwapSum[1] + volume * vwap, volume * vwap);\n    volumeVwap2Sum = CompoundValue(1, volumeVwap2Sum[1] + volume * Sqr(vwap), volume * Sqr(vwap));\n}\ndef vWapprice = volumeVwapSum / volumeSum;\ndef deviation = Sqrt(Max(volumeVwap2Sum / volumeSum - Sqr(vWapprice), 0));\n\ndef VWAP = vWapprice;\n\n\n\ninput vwapCondition = no;\n#input vp=close;\ndef conVwapBuy = if  vwapCondition then  close &gt;= VWAP else 1;\n\n#####^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n\n#\n# FVE logic\n#\ninput maxVolumeCutOff = 2.5;\ndef bn = BarNumber();\ndef nan = Double.NaN;\n\n###Coefficient used in calculation of “Cut Off” value. Lower values mean stronger damping of volume spikes###\n\nAssert(maxVolumeCutOff &gt; 0, \&quot;\'max volume cut off\' must be positive: \&quot; + maxVolumeCutOff);\n\ndef cutOff = 0.2 * StDev(Log(hlc3) - Log(hlc3[1]), 30) * close;\ndef hlcChange = hlc3 - hlc3[1];\ndef avgVolume = Average(volume, 30)[1];\ndef minVolume = Min(volume, avgVolume * maxVolumeCutOff);\ndef dirVolume = if hlcChange &gt; cutOff\n    then minVolume\n    else if hlcChange &lt; -cutOff\n        then -minVolume\n        else 0;\ninput Samples = 14;\n\ndef mf = (close - (high + low) / 2) + hlc3 - hlc3 [1];\ndef fveSum = Sum(dirVolume, Samples);\n\ndef fve = if bn &gt; Samples\n          then (fveSum / (Average(avgVolume, Samples) * Samples)) * 100\n          else nan;\n\n\n\ndef pFVE = fve;\n\ndef pFVE_MA = MovingAverage(AverageType.SIMPLE, fve, 30);\n\ndef pFVE_Bull = if pFVE crosses above pFVE_MA then pFVE  else Double.NaN ;\ndef pFVE_Bear = if pFVE &gt; pFVE_MA and pFVE[1] &gt; pFVE then pFVE else Double.NaN ;\n\n\n\n\n\n#####################################################################################################################################################\n\n\n\n# Simple 2 Period RSI Trading Indicator\n# Assembled by BenTen at useThinkScript.com\n# You are free to use this code for personal use, and make derivative works from it. You are NOT GRANTED permission to use this code (or derivative works) for commercial purposes which includes and is not limited to selling, reselling, or packaging with other commercial indicators. Headers and attribution in this code should remain as provided, and any derivative works should extend the existing headers.\n\n#MACD\n\ninput fastLength = 12;\ninput slowLength = 26;\ninput MACDLength = 9;\ninput displace = 0;\ndef fastAvg = Sum(volume * price, fastLength) / Sum(volume, fastLength);\ndef slowAvg = Sum(volume * price, slowLength) / Sum(volume, slowLength);\ndef Value = fastAvg - slowAvg;\ndef Avg = ExpAverage(Value, MACDLength);\ndef MACD_Diff  = Value - Avg;\n#def ZeroLine = 0;\n\ninput def_cond = no;\ndef MACD_cond_logic = if (def_cond) then MACD_Diff &lt;= 0 else yes;\n\n\n#MACD Pivot reversal\n#input FilterLength=3;\n######################\n#def MACDV_Diff_expAvg = ExpAverage(MACD_Diff, FilterLength);\n#plot oversoldRevesalMACDV =if ((Diff_MACDV &lt; MacdZeroLine)within lookBack bar) and  ( Diff_MACDV crosses above   MACDV_Diff_expAvg within lookBack bar)and Diff_MACDV &gt; Diff_MACDV[1] then 1 else 0;# if (MACDV_Diff_expAvg &gt; OverBought and  MACDV_Diff_expAvg crosses above rsi_val  within 3 bar ) then 40 else 0;\n#plot overBoughtReversalMACDV = if ((Diff_MACDV &gt; MacdZeroLine)within lookBack bar) and  (MACDV_Diff_expAvg crosses above  Diff_MACDV  within lookBack bar)  and Diff_MACDV &lt; Diff_MACDV[1] and Diff_MACDV&gt;0 then 1 else 0;\n\n\n#trend Pivot reversal\ndef twoBarPivotMACD_Buy =  MACD_Diff &gt; MACD_Diff[1] and MACD_Diff[1] &gt; MACD_Diff[2] and MACD_Diff[2] &lt; MACD_Diff[3] and MACD_Diff[3] &lt; MACD_Diff [4];\ndef twoBarPivotMACD_Sell = MACD_Diff &lt; MACD_Diff[1] and MACD_Diff[1] &lt; MACD_Diff[2] and MACD_Diff[2] &gt; MACD_Diff[3] and MACD_Diff[3] &gt; MACD_Diff [4];\n\n\n#def oversoldRevesalMACDV =twoBarPivotMACD_Buy;\n#def overBoughtReversalMACDV= twoBarPivotMACD_Sell; \n\n\n\n#####################\n\n\n\n\n\n\n\n\n\n\n\n\n\n############################\n#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n####^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n\ninput aggPeriod = AggregationPeriod.DAY;\ninput AvgType = AverageType.SIMPLE;\ninput short_len = 10;\ninput mid_len = 21;\ninput long_len = 40;\ninput moving_average = no;\ndef AVG1 = MovingAverage(AvgType, close(period = aggPeriod), short_len);\ndef AVG2 = MovingAverage(AvgType, close(period = aggPeriod), mid_len);\ndef AVG3 = MovingAverage(AvgType, close(period = aggPeriod), long_len);\n#def EMA_condition = if moving_average then (close &gt; AVG1 or close &gt; AVG2 or  close &gt; AVG3) else yes;\ndef EMA_condition = if moving_average then (close &gt; AVG1 ) else yes;\n\nAddLabel( yes, Concat(short_len + \&quot;MA = \&quot;, AVG1), Color.CYAN);\nAddLabel( yes, Concat(mid_len + \&quot;MA = \&quot;, AVG2), Color.LIGHT_ORANGE);\nAddLabel( yes, Concat(long_len + \&quot;MA = \&quot;, AVG3), Color.PINK);\n\n\n####################\n\n    \n#Buy and Sell signals\n\n#def buySignal = if ((rsi_v &lt; overSoldRsi) and (smi crosses above AvgSMI) and buythedip &lt; Zeroline ) then 1 else 0;\ndef BTD_Signal = if ( BTDsignal_condition  and  oversoldRevesal  and MACD_cond_logic and EMA_condition) then 1 else 0;\nplot buy1 = BTD_Signal;\n\ndef SMI_Buy_Signal = if ( (SMI crosses above AvgSMI within lookBack bar) and (oversoldRevesal) and MACD_cond_logic and  EMA_condition) then 1 else 0;\nplot buy2 = SMI_Buy_Signal;\n\ndef  buySvix_Signal = if ( MACD_cond_logic  and  EMA_condition and  oversoldRevesal  and buySvix &lt; Zeroline - 10 ) then 1 else 0;\nplot buy3 = buySvix_Signal;\n\n\n\n\n\ndef STR_Signal = if (  STRsignal_condition and overBoughtReversal ) then 1 else 0;\n\ndef SMI_Sell_Signal = if ( (SMI crosses below AvgSMI within lookBack bar) and (overBoughtReversal)) then 1 else 0;\n#def sellSignal2 = if ((rsi_val  &gt; overBoughtRsi within 3 bar) and (smi crosses below AvgSMI within 3 bar)) then 1 else 0;\n\nplot sell1 = STR_Signal;\nplot sell2 = SMI_Sell_Signal;\n\n#######\n\ndef FVE_buySignal = conVwapBuy and oversoldRevesal and pFVE_Bull  and MACD_cond_logic ;# and Diff &gt;= 0;\n#def sig_buy = pFVE_Bull and Diff &gt;= 0;\nplot buy4 = FVE_buySignal ;\n\n\ndef FVE_sellSignal = overBoughtReversal and pFVE_Bear ;\nplot sell4 = FVE_sellSignal;\nplot buy5 = twoBarPivotMACD_Buy and oversoldRevesal;\nplot sell5 = twoBarPivotMACD_Sell and overBoughtReversal;\n\n####\n#def buySignal2 = if (oversoldRevesal  and buythedip2 &lt; Zeroline ) then 1 else 0;\n\n#def buySignal3 = if ( oversoldRevesal  and buythedip3 &lt; Zeroline - 10 ) then 1 else 0;\n#plot buy3 = buySignal3;\nAddChartBubble(buy1 == 1, buy1, \&quot;B1BTD= \&quot; + price + \&quot;rsi \&quot; + rsi_val, Color.LIGHT_GREEN, no);#Buy the Dip\nAddChartBubble(buy2 == 1, buy2-12, \&quot;B2SMI= \&quot; +  price + \&quot; rsi \&quot; + rsi_val, Color.LIGHT_ORANGE, yes);\nAddChartBubble(buy3 == 1, buy3-24,  \&quot;B3Svix= \&quot; + price + \&quot; rsi \&quot; + rsi_val, Color.LIGHT_GRAY, no);\nAddChartBubble(buy4 == 1, buy4-36,  \&quot;B4FVE= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.YELLOW, yes);\nAddChartBubble(buy5 == 1, buy5+12,  \&quot;B5Macd= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.CYAN, no);\n\nAddChartBubble(sell1 == 1, sell1, \&quot;S1STR= \&quot; + price + \&quot; rsi \&quot; + rsi_val, Color.LIGHT_RED, no);#Buy the Dip\n\nAddChartBubble(sell2 == 1, sell2+12, \&quot;S2SMI= \&quot; + price + \&quot; rsi \&quot; + rsi_val, Color.PINK, no);#Buy the Dip\nAddChartBubble(sell4 == 1, sell4+24, \&quot;S4FVE= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.VIOLET, no);#Buy the Dip\nAddChartBubble(sell5 == 1, sell5+12, \&quot;S5Macd= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.BLUE, yes);#Buy the Dip\n#AddChartBubble(oversoldRevesal , close, rsi_val, Color.blue, no);#Buy the Dip&quot;,name=&quot;_2200e6aa_01ce_453a_8a93_9db5018f50c8&quot;}){hidden=&lt;T,inputsMap:TreeMap6{^(&quot;price&quot;,!%7.FundamentalType.valueOf(*%7.FundamentalType.class,&quot;OHLC4&quot;)),^(&quot;rsiPrice&quot;,&quot;CLOSE&quot;),!get:Integer2(&quot;mid_len&quot;)},inputsMap=@TreeMap6})}),^(#%4.SubgraphId(&quot;Subgraph30&quot;),#%4.SubgraphStorableModel{height=125,storableIndicators.+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;declare lower;\ninput priceSmi = hlc3;\ninput price = close;\n\ninput over_bought = 40.0;\ninput over_sold = -40.0;\ninput percentDLength = 4;\ninput percentKLength = 5;\n\ndef min_low = Lowest(low, percentKLength);\ndef max_high = Highest(high, percentKLength);\ndef rel_diff = priceSmi - (max_high + min_low) / 2;\ndef diff = max_high - min_low;\n\ndef avgrel = ExpAverage(ExpAverage(rel_diff, percentDLength), percentDLength);\ndef avgdiff = ExpAverage(ExpAverage(diff, percentDLength), percentDLength);\n\nplot SMI = if avgdiff != 0 then avgrel / (avgdiff / 2) * 100 else 0;\nSMI.SetDefaultColor(GetColor(1));\n\nplot AvgSMI = ExpAverage(SMI, percentDLength);\nAvgSMI.SetDefaultColor(Color.CYAN);\nplot z = 0;\nz.SetStyle(Curve.SHORT_DASH);\nz.SetDefaultColor(Color.YELLOW);\n\nplot overbought = over_bought;\noverbought.SetDefaultColor(GetColor(5));\n\nplot oversold = over_sold;\noversold.SetDefaultColor(GetColor(5));\n\ninput Buyth=-40;\n\ninput thCondition = {default \&quot;blw\&quot; , \&quot;abv\&quot;};\ndef cond;\ndef Na = Double.Nan;\n\nswitch (thCondition)\n{\n case blw: \n    cond = 1;\ncase abv :\n   cond = 0;\n}\nplot buySmi;\nplot sellsmi;\n\nif cond \n{\n buySmi = if SMI crosses above AvgSMI and SMI &lt;Buyth and SMI&lt;over_bought then SMI* 0.996 else Na;\n#sell = if SMI crosses below AvgSMI and SMI &gt;Sth and SMI&lt;80 then 1 else 0;\n}\nelse{\n buySmi = if SMI crosses above AvgSMI and SMI &gt;Buyth and SMI&lt;60 then Smi* 0.996 else na;\n\n\n}\n\n\n\nsellSmi = if SMI crosses below AvgSMI and SMI &gt;60 and SMI&lt;80 then smi* 1.004 else na;\n\nSellSmi.setpaintingStrategy(PaintingStrategy.ARROW_down);\n\nsellSmi.setDefaultColor(color.pink);\nBuySmi.setpaintingStrategy(PaintingStrategy.ARROW_up);\n\nBuySmi.setDefaultColor(color.yellow);\nBuySMI.SetLineWeight(3);\nSellSMI.SetLineWeight(3);\n\n\n#AddCloud(-100, over_sold, Color.RED, Color.GREEN);\n#AddCloud(over_bought, 100, Color.GREEN, Color.RED);\n\n#####\ndef cldH = if SMI &gt;= overbought then SMI else overbought;\nAddCloud(cldH, overbought, Color.GREEN, Color.GREEN);\n\ndef cldL = if SMI &lt; oversold then SMI else oversold;\nAddCloud(cldL, oversold, Color.RED, Color.RED);\noverbought.SetDefaultColor(GetColor(7));\noversold.SetDefaultColor(GetColor(7));\nSMI.SetLineWeight(1);\nAvgSMI.SetLineWeight(3);\noverbought.SetStyle(Curve.SHORT_DASH);\noversold.SetStyle(Curve.SHORT_DASH);\n\n####\n\n\n####$$$$$$$$\n\n\ninput priceSlm = close;\n\ninput superFastLength = 8;\n\ninput fastLengthSlm = 13;\n\ninput slowLengthSlm = 21;\n\ninput displaceSlm = 0;\n\n\ninput averageTypeSlm = AverageType.EXPONENTIAL;\n\ndef mov_avg8 = MovingAverage(averageTypeSlm, priceSlm[-displaceSlm], superFastLength);\n\ndef mov_avg13 = MovingAverage(averageTypeSlm, priceSlm[-displaceSlm], fastLengthSlm);\n\ndef mov_avg21 = MovingAverage(averageTypeSlm, priceSlm[-displaceSlm], slowLengthSlm);\n \n#moving averages\n\ndef Superfast = mov_avg8;\n\ndef Fast = mov_avg13;\n\ndef Slow = mov_avg21;\n\n\ndef buy = mov_avg8 &gt; mov_avg13 and mov_avg13 &gt; mov_avg21 and low &gt; mov_avg8;\n\ndef stopbuy = mov_avg8 &lt;= mov_avg13;\n\ndef buynow = !buy[1] and buy;\n\ndef buysignal = CompoundValue(1, if buynow and !stopbuy then 1 else if buysignal[1] == 1 and stopbuy then 0 else buysignal[1], 0);\n\n\ndef Buy_Signal = buysignal[1] == 0 and buysignal == 1;\n\ndef Momentum_Down = buysignal[1] == 1 and buysignal == 0;\n\n\ndef sell = mov_avg8 &lt; mov_avg13 and mov_avg13 &lt; mov_avg21 and high &lt; mov_avg8;\n\ndef stopsell = mov_avg8 &gt;= mov_avg13;\n\ndef sellnow = !sell[1] and sell;\n\ndef sellsignal = CompoundValue(1, if sellnow and !stopsell then 1 else if sellsignal[1] == 1 and stopsell then 0 else sellsignal[1], 0);\n\n\ndef Sell_Signal = sellsignal[1] == 0 and sellsignal;\n\ndef Momentum_Up = sellsignal[1] == 1 and sellsignal == 0;\n \n# when using this as a custom scan, change the word plot to def\n# then remove the \'#\' from in front of one of the \&quot;plot Scan\&quot; statements below\n########\n\ninput length = 20;\ninput priceHMA = close;\n\ndef HMA = MovingAverage(AverageType.HULL, priceHMA, length);\ndef HMA_Up =  HMA &gt; HMA[1];\ndef HMA_Down = ! HMA_Up;\n\n###############\n\n#def Colorbars1 = if buysignal == 1 then 1 else if sellsignal == 1 then 2 else if buysignal == 0 or sellsignal == 0 then 3 else 0;\n\n\n\nAvgSMI.DefineColor(\&quot;Buy\&quot;, Color.DARK_GREEN);\n\n\nAvgSMI.DefineColor(\&quot;Sell\&quot;, Color.RED);\n\nAvgSMI.DefineColor(\&quot;Neutral\&quot;, Color.PLUM);\n#RSI.DefineColor(\&quot;NeutralDown\&quot;, Color.orange);\nAvgSMI.DefineColor(\&quot;HullMA_up\&quot;, Color.BLUE);\n\nAvgSMI.DefineColor(\&quot;HullMA_down\&quot;, Color.ORANGE);\n\nAvgSMI.AssignValueColor(if buysignal and HMA_Up then AvgSMI.Color(\&quot;Buy\&quot;) else if buysignal and !HMA_Up then AvgSMI.Color(\&quot;HullMA_down\&quot;) else if sellsignal and HMA_Down  then AvgSMI.Color(\&quot;Sell\&quot;) else  if sellsignal and !HMA_Down  then AvgSMI.Color(\&quot;HullMA_up\&quot;) else  AvgSMI.Color(\&quot;neutral\&quot;));\n;#\n# if Momentum_Up then  RSI.color(\&quot;neutralUp\&quot;) else  RSI.color(\&quot;neutraldown\&quot;));\n\n\n\n\n\n####$$$$$$$$$$$$$$$$\n###############\n\n\n\n#plot UpSignal = if (buysignal and SMI crosses above AvgSMI-3 and SMI &lt;40) then SMI-3 else Double.NaN;\n\nplot UpSignal = if ((buysignal or Momentum_Up) and SMI crosses above AvgSMI ) then SMI - 3 else Double.NaN;\nplot DownSignal = if (sellsignal and SMI crosses below AvgSMI + 3 and SMI &gt; over_bought) then SMI + 3 else Double.NaN;\ninput showBreakoutSignals = yes;\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\n\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\n\n\n\n\n\n######$$$$\n\n\n#RSI\ninput overBoughtRsi = 75;\ninput overSoldRsi = 25;\ninput rsiLength = 14;\ninput rsiPrice = close;\ninput rsi_th = 42;\ndef rsi_val = reference RSI(length = rsiLength, price = rsiPrice );\nplot rsi_val_normalized = rsi_val - 50;\n####\n\n\n\nAddLabel(yes, \&quot;RSI = \&quot; + rsi_val , if rsi_val &gt; overBoughtRsi  then Color.RED else if rsi_val &lt; overSoldRsi then  Color.GREEN else Color.GRAY);\n##########\n#########################RSI\n\n\n\n\n\nrsi_val_normalized.DefineColor(\&quot;OverBought\&quot;, Color.LIGHT_RED);\nrsi_val_normalized.DefineColor(\&quot;Normal\&quot;, GetColor(7));\nrsi_val_normalized.DefineColor(\&quot;OverSold\&quot;, Color.LIGHT_GREEN);\nrsi_val_normalized.DefineColor(\&quot;Below50\&quot;, Color.CYAN);\nrsi_val_normalized.DefineColor(\&quot;Above50\&quot;, Color.PINK);\n\nrsi_val_normalized.AssignValueColor(if rsi_val &gt;= overBoughtRsi then rsi_val_normalized.Color(\&quot;OverBought\&quot;) else if rsi_val &lt;= overSoldRsi then rsi_val_normalized.Color(\&quot;OverSold\&quot;) else if (rsi_val &gt; overSoldRsi and rsi_val &lt; rsi_th) then rsi_val_normalized.Color(\&quot;Below50\&quot;) else if (rsi_val &lt; overBoughtRsi and rsi_val &gt; rsi_th) then rsi_val_normalized.Color(\&quot;Above50\&quot;) else  rsi_val_normalized.Color(\&quot;Normal\&quot;)) ;\n\n\n\n\n\n#########\ndef ImpVol = imp_volatility();\n\nAddLabel(yes, \&quot;iV= \&quot; + ImpVol, Color.GRAY);\n\n#trend reversal\ndef y = rsi_val ;\ninput riReversLength = 2;\ninput lookBack = 2;\n\n\ndef rsi_expAvg = ExpAverage(rsi_val, riReversLength);\n\n#trend reversal\ndef overBoughtReversal = if ((rsi_expAvg &gt; overBoughtRsi)within 2 bar) and  (rsi_expAvg crosses above rsi_val) then price else 0;# if (rsi_expAvg &gt; OverBought and  rsi_expAvg crosses above rsi_val  within 3 bar ) then 40 else 0;\ndef oversoldRevesal = if ((rsi_expAvg &lt; overSoldRsi)within 2 bar) and  (rsi_expAvg crosses below rsi_val within 2 bar) then price else 0;\n\n##############\n########!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n#vwap vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\n\n#####^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n#MACD\n\ninput fastLength = 12;\ninput slowLength = 26;\ninput MACDLength = 9;\ninput displace = 0;\ndef fastAvg = Sum(volume * price, fastLength) / Sum(volume, fastLength);\ndef slowAvg = Sum(volume * price, slowLength) / Sum(volume, slowLength);\ndef Value = fastAvg - slowAvg;\ndef Avg = ExpAverage(Value, MACDLength);\ndef MACD_Diff  = Value - Avg;\n#def ZeroLine = 0;\n\ninput def_cond = no;\ndef MACD_cond_logic = if (def_cond) then MACD_Diff &lt;= 0 else yes;\n\n\n#MACD Pivot reversal\n#input FilterLength=3;\n######################\n#def MACDV_Diff_expAvg = ExpAverage(MACD_Diff, FilterLength);\n#plot oversoldRevesalMACDV =if ((Diff_MACDV &lt; MacdZeroLine)within lookBack bar) and  ( Diff_MACDV crosses above   MACDV_Diff_expAvg within lookBack bar)and Diff_MACDV &gt; Diff_MACDV[1] then 1 else 0;# if (MACDV_Diff_expAvg &gt; OverBought and  MACDV_Diff_expAvg crosses above rsi_val  within 3 bar ) then 40 else 0;\n#plot overBoughtReversalMACDV = if ((Diff_MACDV &gt; MacdZeroLine)within lookBack bar) and  (MACDV_Diff_expAvg crosses above  Diff_MACDV  within lookBack bar)  and Diff_MACDV &lt; Diff_MACDV[1] and Diff_MACDV&gt;0 then 1 else 0;\n\n\n#trend Pivot reversal\ndef twoBarPivotMACD_Buy =  MACD_Diff &gt; MACD_Diff[1] and MACD_Diff[1] &gt; MACD_Diff[2] and MACD_Diff[2] &lt; MACD_Diff[3] and MACD_Diff[3] &lt; MACD_Diff [4];\ndef twoBarPivotMACD_Sell = MACD_Diff &lt; MACD_Diff[1] and MACD_Diff[1] &lt; MACD_Diff[2] and MACD_Diff[2] &gt; MACD_Diff[3] and MACD_Diff[3] &gt; MACD_Diff [4];\n###################\n\n\ndef uptrend = if price &gt; price[1] and price[1] &gt;= price[2] then 1 else 0;\n\n#####################################-----------------\n\n\n\ndef SMI_Buy_Signal = if  (AvgSMI crosses above overbought  within lookBack bar) and SMI &gt;  AvgSMI and (rsi_val &gt; overSoldRsi and rsi_val &lt; overBoughtRsi + 10 ) and (uptrend) then 1 else 0;\n\n\nplot buy2 = SMI_Buy_Signal;\n\n#def  buySvix_Signal = if ( MACD_cond_logic  and  EMA_condition and  oversoldRevesal  and buySvix &lt; Zeroline - 10 ) then 1 else 0;\n#plot buy3 = buySvix_Signal;\n\n\n\n\n\n\ndef SMI_Sell_Signal = if ( (SMI crosses below AvgSMI within lookBack bar) and (overBoughtReversal)) then 1 else 0;\n#def sellSignal2 = if ((rsi_val  &gt; overBoughtRsi within 3 bar) and (smi crosses below AvgSMI within 3 bar)) then 1 else 0;\n\n\nplot sell2 = SMI_Sell_Signal;\n\n#######\n\n#def FVE_buySignal = conVwapBuy and oversoldRevesal and pFVE_Bull  and MACD_cond_logic ;# and Diff &gt;= 0;\n#def sig_buy = pFVE_Bull and Diff &gt;= 0;\n#plot buy4 = FVE_buySignal ;\n\n\n#def FVE_sellSignal = overBoughtReversal and pFVE_Bear ;\n#plot sell4 = FVE_sellSignal;\nplot buy5 = twoBarPivotMACD_Buy and oversoldRevesal;\nplot sell5 = twoBarPivotMACD_Sell and overBoughtReversal;\n\n####\n#def buySignal2 = if (oversoldRevesal  and buythedip2 &lt; Zeroline ) then 1 else 0;\n\n#def buySignal3 = if ( oversoldRevesal  and buythedip3 &lt; Zeroline - 10 ) then 1 else 0;\n#plot buy3 = buySignal3;\ninput bubble = no;\nAddChartBubble(bubble and buy2 == 1, buy2, \&quot;B2SMI= \&quot; +  low[1] + \&quot; rsi \&quot; + rsi_val + \&quot; w \&quot; + vwap[1], Color.LIGHT_ORANGE, no);\n#AddChartBubble(buy3 == 1, buy3,  \&quot;B3Svix= \&quot; + price + \&quot; rsi \&quot; + rsi_val, Color.LIGHT_GRAY, no);\n#AddChartBubble(buy4 == 1, buy4,  \&quot;B4FVE= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.YELLOW, no);\nAddChartBubble(bubble and buy5 == 1, buy5,  \&quot;B5Macd= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.CYAN, no);\n\n#AddChartBubble(sell1 == 1, sell1, \&quot;S1STR= \&quot; + price + \&quot; rsi \&quot; + rsi_val, Color.LIGHT_RED, no);#Buy the Dip\n\nAddChartBubble(bubble and sell2 == 1, sell2, \&quot;S2SMI= \&quot; + price + \&quot; rsi \&quot; + rsi_val, Color.PINK, no);#Buy the Dip\n#AddChartBubble(sell4 == 1, sell4, \&quot;S4FVE= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.VIOLET, no);#Buy the Dip\nAddChartBubble(bubble and sell5 == 1, sell5, \&quot;S5Macd= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.BLUE, no);#Buy the Dip\n#AddChartBubble(oversoldRevesal , close, rsi_val, Color.blue, no);#Buy the Dip\n\ndef o = open;\ndef c = close;\ndef h = high;\ndef l = low;\n\nplot d1 = ((h - l) / o) * 100;\nplot d2 = ((h - l) / (c - o)) * 1;\nplot d = ((c - c[1]) / c[1]) * 100;\nd1.Hide();\nd2.Hide();\nd.Hide();\n\n\ninput vfiLength = 130;\ninput averageLength = 100;\ninput trendQualityLength = 63;\ninput maxStiffness = 7;\ninput marketIndex = \&quot;SPY\&quot;;\ninput weightForMoneyFlow = 1.0;\ninput weightForTradingAboveAverage = 1.0;\ninput weightForUptrend = 1.0;\ninput weightForTrendQuality = 1.0;\ninput weightForMarketDirection = 2.0;\ninput showLabel = No;\n\ndef vfi = reference VolumeFlowIndicator(length = vfiLength, \&quot;max volume cut off\&quot; = 2.5);\ndef sma = Average(close, averageLength);\ndef ema = ExpAverage(close(marketIndex), averageLength);\ndef stiffness = Sum(close &lt; sma, trendQualityLength);\n\ndef Score;\ndef MoneyFlow = vfi &gt; 0;\ndef TradingAboveAverage = close &gt; sma;\ndef Uptrend1 = sma &gt; sma[4];\ndef TrendQuality = stiffness &lt;= maxStiffness;\ndef MarketDirection = ema &gt;= ema[2];\n\nScore = weightForMoneyFlow * MoneyFlow + weightForTradingAboveAverage * TradingAboveAverage + weightForUptrend * uptrend + weightForTrendQuality * TrendQuality + weightForMarketDirection * MarketDirection;\n\n\nAddLabel(showLabel and MoneyFlow, \&quot;Money flow\&quot;, GetColor(2));\nAddLabel(showLabel and TradingAboveAverage, \&quot;Trading above average\&quot;, GetColor(3));\nAddLabel(showLabel and Uptrend1, \&quot;Uptrend\&quot;, GetColor(4));\nAddLabel(showLabel and TrendQuality, \&quot;Trend quality\&quot;, GetColor(5));\nAddLabel(showLabel and TrendQuality, \&quot;Trend quality\&quot;, GetColor(5));\nAddLabel(showLabel and MarketDirection, \&quot;Market direction\&quot;, GetColor(6));\nAddLabel(showLabel , \&quot;Market score \&quot; + Score, GetColor(7));&quot;,name=&quot;_7662dae8_fa6f_4a07_aa35_2ec04cb46236&quot;}){hidden=&lt;T,inputsMap:TreeMap7{^(&quot;price&quot;,&quot;CLOSE&quot;),^(&quot;rsiPrice&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap7})}),^(#%4.SubgraphId(&quot;Subgraph32&quot;),#%4.SubgraphStorableModel{height=80,storableIndicators.+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;#CummulativeTick\n \n#hint: The CumulativeTick indicator is designed to be run on a 20 day 5 minute chart of the /ES, /NQ, /TF, or /YM. Running the chart on other instruments may result in the loss of the average lines.\n \ndeclare lower;\ndeclare once_per_bar;\n\ninput openTime = 0930;\ndef pivot1 = 1030;\ndef pivot2 = 1200;\ndef pivot3 = 1330;\ndef pivot4 = 1500;\ninput closeTime = 1600;\ninput symbol = {default \&quot;$TICK\&quot;, \&quot;$TICK/Q\&quot; ,\&quot;AAPL\&quot;};\n\ndef tickData = hlc3(symbol);\nrec CT = if GetDay() != GetDay()[1] then 0 else if SecondsTillTime(openTime) &lt;= 0 and SecondsTillTime(closeTime) &gt;= 0 then CT[1] + tickData else 0;\nplot cumulativeTick = if !IsNaN(tickData) then CT else Double.NaN;\ncumulativeTick.SetStyle(Curve.POINTS);\ncumulativeTick.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);\n\nplot zero = 0;\nzero.SetDefaultColor(Color.WHITE);\nzero.HideBubble();\nzero.HideTitle();\n\ncumulativeTick.AssignValueColor(if cumulativeTick &lt; cumulativeTick [1] then Color.MAGENTA\nelse Color.CYAN);\ncumulativeTick.SetLineWeight(1);\n\nrec ticksAtPivot1 = if SecondsTillTime(pivot1) &lt;= 0 and SecondsTillTime(pivot1)[1] &gt; 0 then cumulativeTick else ticksAtPivot1[1];\nrec ticksAtPivot2 = if SecondsTillTime(pivot2) &lt;= 0 and SecondsTillTime(pivot2)[1] &gt; 0 then cumulativeTick else ticksAtPivot2[1];\nrec ticksAtPivot3 = if SecondsTillTime(pivot3) &lt;= 0 and SecondsTillTime(pivot3)[1] &gt; 0 then cumulativeTick else ticksAtPivot3[1];\nrec ticksAtPivot4 = if SecondsTillTime(pivot4) &lt;= 0 and SecondsTillTime(pivot4)[1] &gt; 0 then cumulativeTick else ticksAtPivot4[1];\nrec ticksAtClose = if SecondsTillTime(closeTime) &lt;= 0 and SecondsTillTime(closeTime)[1] &gt; 0 then cumulativeTick else ticksAtClose[1];\n\ndef positiveDay = if (SecondsTillTime(closeTime) &lt;= 0 and SecondsTillTime(closeTime)[1] &gt; 0) and cumulativeTick &gt; 0 then 1 else 0;\n\ndef negativeDay = if SecondsTillTime(closeTime) &lt;= 0 and SecondsTillTime(closeTime)[1] &gt; 0 and cumulativeTick &lt; 0 then 1 else 0;\n\ndef positiveDayTicksAtPivot1 = if positiveDay then ticksAtPivot1 else 0;\ndef positiveDayTicksAtPivot2 = if positiveDay then ticksAtPivot2 else 0;\ndef positiveDayTicksAtPivot3 = if positiveDay then ticksAtPivot3 else 0;\ndef positiveDayTicksAtPivot4 = if positiveDay then ticksAtPivot4 else 0;\n\ndef negativeDayTicksAtPivot1 = if negativeDay then ticksAtPivot1 else 0;\ndef negativeDayTicksAtPivot2 = if negativeDay then ticksAtPivot2 else 0;\ndef negativeDayTicksAtPivot3 = if negativeDay then ticksAtPivot3 else 0;\ndef negativeDayTicksAtPivot4 = if negativeDay then ticksAtPivot4 else 0;\n\nrec totalPDTAP1 = if !IsNaN(cumulativeTick) then if positiveDay then totalPDTAP1[1] + positiveDayTicksAtPivot1 else totalPDTAP1[1] else totalPDTAP1[1];\nrec totalPDTAP2 = if !IsNaN(cumulativeTick) then if positiveDay then totalPDTAP2[1] + positiveDayTicksAtPivot2 else totalPDTAP2[1] else totalPDTAP2[1];\nrec totalPDTAP3 = if !IsNaN(cumulativeTick) then if positiveDay then totalPDTAP3[1] + positiveDayTicksAtPivot3 else totalPDTAP3[1] else totalPDTAP3[1];\nrec totalPDTAP4 = if !IsNaN(cumulativeTick) then if positiveDay then totalPDTAP4[1] + positiveDayTicksAtPivot4 else totalPDTAP4[1] else totalPDTAP4[1];\n\nrec totalNDTAP1 = if !IsNaN(cumulativeTick) then if negativeDay then totalNDTAP1[1] + negativeDayTicksAtPivot1 else totalNDTAP1[1] else totalNDTAP1[1];\nrec totalNDTAP2 = if !IsNaN(cumulativeTick) then if negativeDay then totalNDTAP2[1] + negativeDayTicksAtPivot2 else totalNDTAP2[1] else totalNDTAP2[1];\nrec totalNDTAP3 = if !IsNaN(cumulativeTick) then if negativeDay then totalNDTAP3[1] + negativeDayTicksAtPivot3 else totalNDTAP3[1] else totalNDTAP3[1];\nrec totalNDTAP4 = if !IsNaN(cumulativeTick) then if negativeDay then totalNDTAP4[1] + negativeDayTicksAtPivot4 else totalNDTAP4[1] else totalNDTAP4[1];\n\n\nrec positiveDays = if !IsNaN(cumulativeTick) then if positiveDay then positiveDays[1] + 1 else positiveDays[1] else positiveDays[1];\nrec negativeDays = if !IsNaN(cumulativeTick) then if negativeDay then negativeDays[1] + 1 else negativeDays[1] else negativeDays[1];\n\n\nplot avePosTickAtPivot1 = HighestAll(if IsNaN(close[-1]) and !IsNaN(close) then totalPDTAP1 / positiveDays else Double.NaN);\nplot avePosTickAtPivot2 = HighestAll(if IsNaN(close[-1]) and !IsNaN(close) then totalPDTAP2 / positiveDays else Double.NaN);\nplot avePosTickAtPivot3 = HighestAll(if IsNaN(close[-1]) and !IsNaN(close) then totalPDTAP3 / positiveDays else Double.NaN);\nplot avePosTickAtPivot4 = HighestAll(if IsNaN(close[-1]) and !IsNaN(close) then totalPDTAP4 / positiveDays else Double.NaN);\n\nplot aveNegTickAtPivot1 = HighestAll(if IsNaN(close[-1]) and !IsNaN(close) then totalNDTAP1 / negativeDays else Double.NaN);\nplot aveNegTickAtPivot2 = HighestAll(if IsNaN(close[-1]) and !IsNaN(close) then totalNDTAP2 / negativeDays else Double.NaN);\nplot aveNegTickAtPivot3 = HighestAll(if IsNaN(close[-1]) and !IsNaN(close) then totalNDTAP3 / negativeDays else Double.NaN);\nplot aveNegTickAtPivot4 = HighestAll(if IsNaN(close[-1]) and !IsNaN(close) then totalNDTAP4 / negativeDays else Double.NaN);\n\navePosTickAtPivot1.SetDefaultColor(Color.DARK_GRAY);\navePosTickAtPivot2.SetDefaultColor(Color.DARK_GRAY);\navePosTickAtPivot3.SetDefaultColor(Color.DARK_GRAY);\navePosTickAtPivot4.SetDefaultColor(Color.DARK_GRAY);\naveNegTickAtPivot1.SetDefaultColor(Color.DARK_GRAY);\naveNegTickAtPivot2.SetDefaultColor(Color.DARK_GRAY);\naveNegTickAtPivot3.SetDefaultColor(Color.DARK_GRAY);\naveNegTickAtPivot4.SetDefaultColor(Color.DARK_GRAY);\n\navePosTickAtPivot1.SetStyle(Curve.FIRM);\navePosTickAtPivot2.SetStyle(Curve.FIRM);\navePosTickAtPivot3.SetStyle(Curve.FIRM);\navePosTickAtPivot4.SetStyle(Curve.FIRM);\naveNegTickAtPivot1.SetStyle(Curve.FIRM);\naveNegTickAtPivot2.SetStyle(Curve.FIRM);\naveNegTickAtPivot3.SetStyle(Curve.FIRM);\naveNegTickAtPivot4.SetStyle(Curve.FIRM);\navePosTickAtPivot1.HideBubble();\navePosTickAtPivot2.HideBubble();\navePosTickAtPivot3.HideBubble();\navePosTickAtPivot4.HideBubble();\naveNegTickAtPivot1.HideBubble();\naveNegTickAtPivot2.HideBubble();\naveNegTickAtPivot3.HideBubble();\naveNegTickAtPivot4.HideBubble();\n\navePosTickAtPivot1.HideTitle();\navePosTickAtPivot2.HideTitle();\navePosTickAtPivot3.HideTitle();\navePosTickAtPivot4.HideTitle();\naveNegTickAtPivot1.HideTitle();\naveNegTickAtPivot2.HideTitle();\naveNegTickAtPivot3.HideTitle();\naveNegTickAtPivot4.HideTitle();\n\n\nAddChartBubble( SecondsTillTime(openTime) == 0 and GetDay() == GetLastDay(), avePosTickAtPivot1, \&quot;+10:30\&quot;, Color.DARK_GRAY, yes);\n#AddChartBubble(SecondsTillTime(openTime) == 0 and GetDay() == GetLastDay(), avePosTickAtPivot2, \&quot;+12:00\&quot;, Color.DARK_GRAY, yes);\n#AddChartBubble(SecondsTillTime(openTime) == 0 and GetDay() == GetLastDay(), avePosTickAtPivot3, \&quot;+13:30\&quot;, Color.DARK_GRAY, yes);\n#AddChartBubble(SecondsTillTime(openTime) == 0 and GetDay() == GetLastDay(), avePosTickAtPivot4, \&quot;+15:00\&quot;, Color.DARK_GRAY, yes);\n\nAddChartBubble(SecondsTillTime(openTime) == 0 and GetDay() == GetLastDay(), aveNegTickAtPivot1, \&quot;-10:30\&quot;, Color.DARK_GRAY, yes);\n#AddChartBubble(SecondsTillTime(openTime) == 0 and GetDay() == GetLastDay(), aveNegTickAtPivot2, \&quot;-12:00\&quot;, Color.DARK_GRAY, yes);\n#AddChartBubble(SecondsTillTime(openTime) == 0 and GetDay() == GetLastDay(), aveNegTickAtPivot3, \&quot;-13:30\&quot;, Color.DARK_GRAY, yes);\n#AddChartBubble(SecondsTillTime(openTime) == 0 and GetDay() == GetLastDay(), aveNegTickAtPivot4, \&quot;-15:00\&quot;, Color.DARK_GRAY, yes);\n\nAddVerticalLine(SecondsTillTime(openTime) == 0 or (GetDay() != GetDay()[1] and (SecondsTillTime(0000) &gt; 0)), \&quot;\&quot;, Color.GRAY, 1);\n\n\ninput UpThreshold = 1000;\ninput DownThreshold = -1000;\n#input DistArrowLevel = 1300;\ninput ShowHiLo = yes;\n\nAddLabel(yes, symbol , Color.white);\nAddLabel(yes, “Cummulative Tick:  ”, if cumulativeTick &gt;= 0 then if cumulativeTick &gt; cumulativeTick[1] then cumulativeTick.Color(\&quot;Positive and Up\&quot;) else cumulativeTick.Color(\&quot;Positive and Down\&quot;) else if cumulativeTick &lt; cumulativeTick[1] then cumulativeTick.Color(\&quot;Negative and Down\&quot;) else cumulativeTick.Color(\&quot;Negative and Up\&quot;));\nAddLabel(cumulativeTick &gt;= 0 ,   \&quot; +” + astext(cumulativeTick), Color.GREEN);\nAddLabel(cumulativeTick &lt; 0 ,   \&quot; \&quot; + astext(cumulativeTick), Color.Light_Red);\nAddLabel(ShowHiLo, “HI ” + AsText(high(symbol, ”Day”, ”LAST”)), Color.ORANGE);\nAddLabel(ShowHiLo, “LO ” + AsText(low(symbol, ”Day”, ”LAST”)), Color.ORANGE);\nAddLabel(close(symbol) &gt;= 0 and close(symbol) &lt;= UpThreshold, close(symbol) + \&quot; ”, Color.GREEN);\nAddLabel(close(symbol) &lt; 0 and close(symbol) &gt;= DownThreshold, close(symbol) + \&quot; ”, Color.RED);\nAddLabel(close(symbol) &gt; UpThreshold, \&quot;Above \&quot; + AsText(UpThreshold) + \&quot;! \&quot; + close(symbol), Color.GREEN);\nAddLabel(close(symbol) &lt; DownThreshold, \&quot;Below \&quot; + AsText(DownThreshold) + \&quot;! \&quot; + close(symbol), Color.RED);\n\ncumulativeTick.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);\ncumulativeTick.SetLineWeight(3);\n\n\ncumulativeTick.DefineColor(\&quot;Positive and Up\&quot;, Color.cyan);\ncumulativeTick.DefineColor(\&quot;Positive and Down\&quot;, Color.magenta);\ncumulativeTick.DefineColor(\&quot;Negative and Down\&quot;,  Color.red);\ncumulativeTick.DefineColor(\&quot;Negative and Up\&quot;, Color.yellow);\ncumulativeTick.AssignValueColor(if cumulativeTick &gt;= 0 then if cumulativeTick &gt; cumulativeTick[1] then cumulativeTick.Color(\&quot;Positive and Up\&quot;) else cumulativeTick.Color(\&quot;Positive and Down\&quot;) else if cumulativeTick &lt; cumulativeTick[1] then cumulativeTick.Color(\&quot;Negative and Down\&quot;) else cumulativeTick.Color(\&quot;Negative and Up\&quot;));\n&quot;,name=&quot;_876b6b8b_e992_4721_89bd_89840c069669&quot;}){hidden=&lt;T,inputsMap:TreeMap8{^(&quot;symbol&quot;,&quot;$TICK/Q&quot;)},inputsMap=@TreeMap8,plots{0:{lineStyle=1,paintingStrategy=17}}})}),^(#%4.SubgraphId(&quot;Subgraph39&quot;),#%4.SubgraphStorableModel{height=80,storableIndicators.+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;#Ctick by @Dalebru 10/24/2015\n#Cumulative tick\n#Can reset to start at beginning of Day, Week, Month, Year, Chart\n#Thanks to futures.io @rmejia for similar code in VWAP_Bands\ndeclare lower;\ninput TimeFrame = {default Day, Week, Month, Year, Chart};\n\n################\n\n\n#input tick =FundamentalType.TICK_COUNT;\ndef tick =Fundamental(FundamentalType.TICK_COUNT);\ninput price1 = FundamentalType.CLOSE;;\n#input aggregationPeriod = AggregationPeriod.DAY;\n\n#def MovAvg = MovingAverage(averageType, Fundamental(price, period = aggregationPeriod), length);\n#def zero = 0;\n#def Diff = close - MovAvg;\n#plot  m= MovAvg;\n#plot p= close;\n\n#plot mySpike = Diff;\n\n##################\n\n\n\n#input symbol = \&quot;$TICK\&quot;;\ninput filter =1;\n#def isInvalid = IsNan(hlc3(symbol));\ndef isInvalid = IsNan(price1);\n#def price = if (isInvalid, 0, hlc3(symbol));\ndef tickCout =tick;\ninput UseUpDownColors = yes;\ndef cap = GetAggregationPeriod();\ndef errorInAggregation =\n    timeFrame == timeFrame.Day and cap &gt;= AggregationPeriod.WEEK or\n    timeFrame == timeFrame.Week and cap &gt;= AggregationPeriod.MONTH;\nAssert(!errorInAggregation, \&quot;timeFrame should be not less than current chart aggregation period\&quot;);\ndef yyyyMmDd = GetYYYYMMDD();\ndef year = GetYear();\ndef periodIndx;\nswitch (timeFrame) \n{\ncase Chart:\n    periodIndx = 0;\ncase Day:\n    periodIndx = yyyyMmDd;\ncase Week:\n    periodIndx = Floor((daysFromDate(first(yyyyMmDd)) + getDayOfWeek(first(yyyyMmDd))) / 7);\ncase Month:\n    periodIndx = roundDown(yyyyMmDd / 100, 0);\ncase Year:\n    periodIndx = Floor(year - First(year));\n}\ndef isPeriodRolled = CompoundValue(filter, periodIndx != periodIndx[1], yes);\ndef cum;\ndef upTick = if close &gt; close[1]  then yes else no;\ndef downTick = if close &lt; close[1]  then yes else no;\ndef nullTick = if close == close[1]  then yes else no;\n#plot Trades = Fundamental(FundamentalType.TICK_COUNT); \nif (isPeriodRolled)\n{\n    cum = tickCout;\n}\nelse\n{\n    #cum = tickCout;\n   cum = if upTick then cum[1] + tickCout else if downTick then  cum[1] - tickCout else  cum[1]  ;\n}\n#plot t =tick;\n#plot Trades = Fundamental(FundamentalType.TICK_COUNT); \n#Trades.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);\nplot CumTick = if isInvalid then Double.NaN else cum;\nCumTick.SetPaintingStrategy(PaintingStrategy.Line);\n#CumTick.SetLineWeight(3);\nCumTick.DefineColor(\&quot;Up\&quot;, Color.Green);\nCumTick.DefineColor(\&quot;Down\&quot;,  Color.Red);\nCumTick.DefineColor(\&quot;Default\&quot;, GetColor(1));\nCumTick.DefineColor(\&quot;Empty\&quot;,  Color.Red);\n\nCumTick.AssignValueColor(if !UseUpDownColors then CumTick.color(\&quot;Default\&quot;) else  if CumTick[0] &gt; CumTick[1] then CumTick.color(\&quot;Up\&quot;) else CumTick.color(\&quot;Down\&quot;));\n#CumTick.SetHiding(isInvalid);\n\nplot zero = 0;\nzero.AssignValueColor(GetColor(3));\n\n\n\n\n\n\n&quot;,name=&quot;_09e471c7_4a42_4a7b_a806_ae792a9fecae&quot;}){hidden=&lt;T,plots{0:{paintingStrategy=17}}})}),^(#%4.SubgraphId(&quot;Subgraph41&quot;),#%4.SubgraphStorableModel{height=117,storableIndicators.+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;declare lower;\n\ninput fastLength = 23;\ninput slowLength = 50;\ninput KPeriod = 10;\ninput DPeriod = 3;\ninput over_bought = 75;\ninput over_sold = 25;\ninput averageType = AverageType.EXPONENTIAL;\ndef price1= open;\ninput rsi_th=42;\ndef length1 =22;\n\ndef macdRsi =   reference MomentumSMA();\n# ((low - Highest(price1[1], length1)) / Highest(price1[1], length1)) * 100;\n#((price1 - Lowest(low[1], length1)) / (Highest(high[1], length1) - Lowest(low[1], length1)));\n#reference RSI(length = 14, price = close );\ndef fastK1rsi = FastKCustom(macdRsi, KPeriod);\ndef fastD1Rsi = MovingAverage(averageType, fastK1rsi, DPeriod);\ndef fastK2rsi = FastKCustom(fastD1Rsi, KPeriod);\n#plot RSIm = fastD1Rsi;#MovingAverage(averageType, fastK2rsi, DPeriod);\n\ninput priceSch =close;\n\ndef macd = MovingAverage(averageType, priceSch, fastLength) - MovingAverage(averageType, priceSch, slowLength);\ndef fastK1 = FastKCustom(macd, KPeriod);\ndef fastD1 = MovingAverage(averageType, fastK1, DPeriod);\ndef fastK2 = FastKCustom(fastD1, KPeriod);\nplot STC = MovingAverage(averageType, fastK2, DPeriod);\n\nplot OverBought = over_bought;\nplot OverSold = over_sold;\n\nSTC.SetDefaultColor(GetColor(8));\nOverBought.SetDefaultColor(GetColor(7));\nOverSold.SetDefaultColor(GetColor(7));\ndef cldH= if STC &gt; OverBought then STC else OverBought;\nAddCloud(cldH,OverBought, Color.Green, Color.Green);\n\ndef cldL= if STC &lt; OverSold then STC else OverSold;\nAddCloud(cldL,OverSold, Color.RED, Color.RED);\nSTC.setlineWeight(3);\nOverBought.setStyle(curve.short_dash);\noversold.setStyle(curve.short_dash);\n####$$$$$$$$\n\n\ninput priceSlm = close;\n\ninput superFastLength = 8;\n\ninput fastLengthSlm = 13;\n\ninput slowLengthSlm = 21;\n\ninput displace = 0;\n\n\ninput averageTypeSlm = AverageType.EXPONENTIAL;\n\ndef mov_avg8 = MovingAverage(averageTypeSlm, priceSlm[-displace], superFastLength);\n\ndef mov_avg13 = MovingAverage(averageTypeSlm, priceSlm[-displace], fastLengthSlm);\n\ndef mov_avg21 = MovingAverage(averageTypeSlm, priceSlm[-displace], slowLengthSlm);\n \n#moving averages\n\ndef Superfast = mov_avg8;\n\ndef Fast = mov_avg13;\n\ndef Slow = mov_avg21;\n\n\ndef buy = mov_avg8 &gt; mov_avg13 and mov_avg13 &gt; mov_avg21 and low &gt; mov_avg8;\n\ndef stopbuy = mov_avg8 &lt;= mov_avg13;\n\ndef buynow = !buy[1] and buy;\n\ndef buysignal = CompoundValue(1, if buynow and !stopbuy then 1 else if buysignal[1] == 1 and stopbuy then 0 else buysignal[1], 0);\n\n\ndef Buy_Signal = buysignal[1] == 0 and buysignal == 1;\n\ndef Momentum_Down = buysignal[1] == 1 and buysignal == 0;\n\n\ndef sell = mov_avg8 &lt; mov_avg13 and mov_avg13 &lt; mov_avg21 and high &lt; mov_avg8;\n\ndef stopsell = mov_avg8 &gt;= mov_avg13;\n\ndef sellnow = !sell[1] and sell;\n\ndef sellsignal = CompoundValue(1, if sellnow and !stopsell then 1 else if sellsignal[1] == 1 and stopsell then 0 else sellsignal[1], 0);\n\n\ndef Sell_Signal = sellsignal[1] == 0 and sellsignal;\n\ndef Momentum_Up = sellsignal[1] == 1 and sellsignal == 0;\n \n# when using this as a custom scan, change the word plot to def\n# then remove the \'#\' from in front of one of the \&quot;plot Scan\&quot; statements below\ndef Colorbars = if buysignal == 1 then 1 else if sellsignal == 1 then -1 else if buysignal == 0 or sellsignal == 0 then 0 else 0;\n\n# use this first Scan plot for SLM Ribbon Momentum UP\n#plot Scan = if Colorbars == 1 then yes else no;\n\n# use this second Scan plot for SLM Ribbon Momentum DOWN\n#plot Scan = if Colorbars == -1 then yes else no;\n\n\n\n\n\n\n###############\n\ndef Colorbars1 = if buysignal == 1 then 1 else if sellsignal == 1 then 2 else if buysignal == 0 or sellsignal == 0 then 3 else 0;\n\n\n\nSTC.definecolor(\&quot;Buy_Signal_Bars\&quot;, color.dark_green);\n\nSTC.definecolor(\&quot;Sell_Signal_Bars\&quot;, color.red);\n\nSTC.definecolor(\&quot;NeutralUp\&quot;, color.plum);\n\nSTC.definecolor(\&quot;NeutralDown\&quot;, color.orange);\n\nSTC.AssignValueColor(if Colorbars1 ==1 then STC.color(\&quot;buy_signal_bars\&quot;) else if colorbars1 ==2 then STC.color(\&quot;Sell_Signal_bars\&quot;) else if Momentum_Up then  STC.color(\&quot;neutralUp\&quot;) else STC.color(\&quot;neutralDown\&quot;) );\n\n\nplot UpSignal = if (buysignal and STC crosses above over_sold) then STC else Double.NaN;\nplot DownSignal = if (sellsignal and STC crosses below over_bought) then STC else Double.NaN;\ninput showBreakoutSignals =yes;\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\n\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\n\n\n\n\n\n\n\n\n\n\n######$$$$\n\n#########################RSI\n\n\ninput length = 14;\ninput over_BoughtRsi = 70;\ninput over_SoldRSI = 30;\ninput priceRsi = close;\ninput priceRsi2 = vwap;\n\n\n\ninput averageTypeRSI = AverageType.WILDERS;\ninput averageTypeRSI2 = AverageType.simple;\n#input showBreakoutSignals = no;\n\ninput showlable = yes;\n\ndef NetChgAvg = MovingAverage(averageTypeRSI, priceRsi - priceRsi[1], length);\ndef TotChgAvg = MovingAverage(averageTypeRSI, AbsValue(priceRsi - priceRsi[1]), length);\ndef ChgRatio = if TotChgAvg != 0 then NetChgAvg / TotChgAvg else 0;\n\nplot RSI = 50 * (ChgRatio + 1);\n\n\ndef NetChgAvg2 = MovingAverage(averageTypeRSI2, priceRsi2 - priceRsi2[1], length+5);\ndef TotChgAvg2 = MovingAverage(averageTypeRSI2, AbsValue(priceRsi2 - priceRsi2[1]), length+5);\ndef ChgRatio2= if TotChgAvg2 != 0 then NetChgAvg2 / TotChgAvg2 else 0;\n\nplot RSI2 = 50 * (ChgRatio2 + 1);\n\n\n\n\n\n\nplot OverSoldR = over_SoldRSI;\nplot OverBoughtR = over_BoughtRsi;\n#plot UpSignal = if RSI crosses above OverSold then OverSold else Double.NaN;\n#plot DownSignal = if RSI crosses below OverBought then OverBought else Double.NaN;\nplot MID = 50;\n\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\nRSI.DefineColor(\&quot;OverBought\&quot;, Color.LIGHT_RED);\nRSI.DefineColor(\&quot;Normal\&quot;, GetColor(7));\nRSI.DefineColor(\&quot;OverSold\&quot;, Color.LIGHT_GREEN);\nRSI.DefineColor(\&quot;Below50\&quot;, Color.CYAN);\nRSI.DefineColor(\&quot;Above50\&quot;, Color.PINK);\n\nRSI.AssignValueColor(if RSI &gt;= over_Bought then RSI.Color(\&quot;OverBought\&quot;) else if RSI &lt;= over_Sold then RSI.Color(\&quot;OverSold\&quot;) else if (RSI &gt; over_Sold and RSI &lt; rsi_th) then RSI.Color(\&quot;Below50\&quot;) else if (RSI &lt; over_Bought and RSI &gt;rsi_th) then RSI.Color(\&quot;Above50\&quot;) else  RSI.Color(\&quot;Normal\&quot;)) ;\nOverSoldR.SetDefaultColor(GetColor(8));\nOverBoughtR.SetDefaultColor(GetColor(8));\n#UpSignal.SetDefaultColor(Color.UPTICK);\n#UpSignal.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\n#DownSignal.SetDefaultColor(Color.DOWNTICK);\n#DownSignal.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\nOverSoldR.hide();\nOverBoughtR.hide();\nmid.hide();\n\nAddLabel(showlable, \&quot;RSI = \&quot; + RSI , if RSI &gt; over_Bought  then Color.RED else if RSI &lt; over_Sold then  Color.GREEN else Color.GRAY);\ndef cldRSIL= if RSI &lt; OverSoldR then RSI else OverSoldR;\nAddCloud(cldRSIL,OverSoldR,  Color.Green, Color.Green);\n\ndef cldRsiH= if RSI &gt; OverBought then RSI else OverBoughtR;\nAddCloud(cldRsiH,OverBoughtR,Color.RED, Color.RED);\n\n\n\ndef ImpVol = imp_volatility();\n\nAddLabel(showlable, \&quot;iV= \&quot; + ImpVol, Color.GRAY);\nMID.DefineColor(\&quot;Mid\&quot;, Color.GREEN);\n\n\n## momentum\n\ndef CloseOpenDiff = if close &gt; open then close - open else 0;\ndef OpenCloseDiff = if close &lt; open then open - close else 0;\ndef avgCloseOpen = Average(CloseOpenDiff, length);\ndef avgOpenClose = Average(OpenCloseDiff, length);\n\n#plot IMI = avgCloseOpen / (avgCloseOpen + avgOpenClose) * 100;\n#IMI.SetDefaultColor(GetColor(8));\n##############################\n\n\n\n#\n# TD Ameritrade IP Company, Inc. (c) 2018-2020\n#\n\n\n\ninput vfiLength = 130;\ninput averageLength = 100;\ninput trendQualityLength = 63;\ninput maxStiffness = 7;\ninput marketIndex = \&quot;SPY\&quot;;\ninput weightForMoneyFlow = 1.0;\ninput weightForTradingAboveAverage = 1.0;\ninput weightForUptrend = 1.0;\ninput weightForTrendQuality = 1.0;\ninput weightForMarketDirection = 2.0;\ninput showLabel = No;\n\ndef vfi = reference VolumeFlowIndicator(length = vfiLength, \&quot;max volume cut off\&quot; = 2.5);\ndef sma = Average(close, averageLength);\ndef ema = ExpAverage(close(marketIndex), averageLength);\ndef stiffness = Sum(close &lt; sma, trendQualityLength);\n\ndef Score;\ndef MoneyFlow = vfi &gt; 0;\ndef TradingAboveAverage = close &gt; sma;\ndef Uptrend = sma &gt; sma[4];\ndef TrendQuality = stiffness &lt;= maxStiffness;\ndef MarketDirection = ema &gt;= ema[2];\n\nScore = weightForMoneyFlow * MoneyFlow + weightForTradingAboveAverage * TradingAboveAverage + weightForUptrend * Uptrend + weightForTrendQuality * TrendQuality + weightForMarketDirection * MarketDirection;\n\n\nAddLabel(showLabel and MoneyFlow, \&quot;Money flow\&quot;, GetColor(2));\nAddLabel(showLabel and TradingAboveAverage, \&quot;Trading above average\&quot;, GetColor(3));\nAddLabel(showLabel and Uptrend, \&quot;Uptrend\&quot;, GetColor(4));\nAddLabel(showLabel and TrendQuality, \&quot;Trend quality\&quot;,GetColor(5));\nAddLabel(showLabel and TrendQuality, \&quot;Trend quality\&quot;,GetColor(5));\nAddLabel(showLabel and MarketDirection, \&quot;Market direction\&quot;,GetColor(6));\nAddLabel(showLabel , \&quot;Market score \&quot;+ score,GetColor(7));&quot;,name=&quot;_ef7ee43b_ddba_4881_809e_96703a28d1ce&quot;}))}),^(#%4.SubgraphId(&quot;Subgraph43&quot;),#%4.SubgraphStorableModel{height=88,storableIndicators.+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;declare lower;\ndef timeFrame = getAggregationPeriod();\ninput aggregationPeriod1 =AggregationPeriod.Two_MIN;\ninput useAggegateForP1 =yes;\n#input aggregationPeriod2 =AggregationPeriod.Fifteen_MIN;\n\n\n# Variables:\ndef price =if (useAggegateForP1) then close(period = aggregationPeriod1) else close;\n\n\n\ninput fastLength = 23;\ninput slowLength = 50;\ninput KPeriod = 10;\ninput DPeriod = 3;\ninput over_bought = 75;\ninput over_sold = 25;\ninput averageType = AverageType.EXPONENTIAL;\n\ndef macd = MovingAverage(averageType, price, fastLength) - MovingAverage(averageType, price, slowLength);\ndef fastK1 = FastKCustom(macd, KPeriod);\ndef fastD1 = MovingAverage(averageType, fastK1, DPeriod);\ndef fastK2 = FastKCustom(fastD1, KPeriod);\nplot STC = MovingAverage(averageType, fastK2, DPeriod);\nplot OverBought = over_bought;\nplot OverSold = over_sold;\n\nSTC.SetDefaultColor(GetColor(8));\nOverBought.SetDefaultColor(GetColor(7));\nOverSold.SetDefaultColor(GetColor(7));\ndef cldH= if STC &gt; OverBought then STC else OverBought;\nAddCloud(cldH,OverBought, Color.Green, Color.Green);\n\ndef cldL= if STC &lt; OverSold then STC else OverSold;\nAddCloud(cldL,OverSold, Color.RED, Color.RED);\n\n\n#########################RSI\n\n\ninput length = 14;\ninput over_BoughtRsi = 70;\ninput over_SoldRSI = 30;\n#input price = close;\n\n\n\ninput averageTypeRSI = AverageType.WILDERS;\ninput showBreakoutSignals = no;\n\ninput showlable = yes;\n\ndef NetChgAvg = MovingAverage(averageTypeRSI, price - price[1], length);\ndef TotChgAvg = MovingAverage(averageTypeRSI, AbsValue(price - price[1]), length);\ndef ChgRatio = if TotChgAvg != 0 then NetChgAvg / TotChgAvg else 0;\n\nplot RSI = 50 * (ChgRatio + 1);\n\n\n\n\n\nplot OverSoldR = over_SoldRSI;\nplot OverBoughtR = over_BoughtRsi;\nplot UpSignal = if RSI crosses above OverSold then OverSold else Double.NaN;\nplot DownSignal = if RSI crosses below OverBought then OverBought else Double.NaN;\nplot MID = 50;\n\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\nRSI.DefineColor(\&quot;OverBought\&quot;, Color.LIGHT_RED);\nRSI.DefineColor(\&quot;Normal\&quot;, GetColor(7));\nRSI.DefineColor(\&quot;OverSold\&quot;, Color.LIGHT_GREEN);\nRSI.DefineColor(\&quot;Below50\&quot;, Color.CYAN);\nRSI.DefineColor(\&quot;Above50\&quot;, Color.PINK);\n\nRSI.AssignValueColor(if RSI &gt;= over_Bought then RSI.Color(\&quot;OverBought\&quot;) else if RSI &lt;= over_Sold then RSI.Color(\&quot;OverSold\&quot;) else if (RSI &gt; over_Sold and RSI &lt; 50) then RSI.Color(\&quot;Below50\&quot;) else if (RSI &lt; over_Bought and RSI &gt; 50) then RSI.Color(\&quot;Above50\&quot;) else  RSI.Color(\&quot;Normal\&quot;)) ;\nOverSoldR.SetDefaultColor(GetColor(8));\nOverBoughtR.SetDefaultColor(GetColor(8));\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\nOverSoldR.hide();\nOverBoughtR.hide();\nmid.hide();\n\n\nAddLabel(showlable, \&quot;RSI = \&quot; + RSI , if RSI &gt; over_Bought  then Color.RED else if RSI &lt; over_Sold then  Color.GREEN else Color.GRAY);\ndef cldRSIL= if RSI &lt; OverSoldR then RSI else OverSoldR;\nAddCloud(cldRSIL,OverSoldR,  Color.Green, Color.Green);\n\ndef cldRsiH= if RSI &gt; OverBought then RSI else OverBoughtR;\nAddCloud(cldRsiH,OverBoughtR,Color.RED, Color.RED);\n\n\n\ndef ImpVol = imp_volatility();\n\nAddLabel(showlable, \&quot;iV= \&quot; + ImpVol, Color.GRAY);\nMID.DefineColor(\&quot;Mid\&quot;, Color.GREEN);\n\ninput vfiLength = 130;\ninput averageLength = 100;\ninput trendQualityLength = 63;\ninput maxStiffness = 7;\ninput marketIndex = \&quot;SPY\&quot;;\ninput weightForMoneyFlow = 1.0;\ninput weightForTradingAboveAverage = 1.0;\ninput weightForUptrend = 1.0;\ninput weightForTrendQuality = 1.0;\ninput weightForMarketDirection = 2.0;\ninput showLabel = No;\n\ndef vfi = reference VolumeFlowIndicator(length = vfiLength, \&quot;max volume cut off\&quot; = 2.5);\ndef sma = Average(close, averageLength);\ndef ema = ExpAverage(close(marketIndex), averageLength);\ndef stiffness = Sum(close &lt; sma, trendQualityLength);\n\ndef Score;\ndef MoneyFlow = vfi &gt; 0;\ndef TradingAboveAverage = close &gt; sma;\ndef Uptrend = sma &gt; sma[4];\ndef TrendQuality = stiffness &lt;= maxStiffness;\ndef MarketDirection = ema &gt;= ema[2];\n\nScore = weightForMoneyFlow * MoneyFlow + weightForTradingAboveAverage * TradingAboveAverage + weightForUptrend * Uptrend + weightForTrendQuality * TrendQuality + weightForMarketDirection * MarketDirection;\n\n\nAddLabel(showLabel and MoneyFlow, \&quot;Money flow\&quot;, GetColor(2));\nAddLabel(showLabel and TradingAboveAverage, \&quot;Trading above average\&quot;, GetColor(3));\nAddLabel(showLabel and Uptrend, \&quot;Uptrend\&quot;, GetColor(4));\nAddLabel(showLabel and TrendQuality, \&quot;Trend quality\&quot;,GetColor(5));\nAddLabel(showLabel and TrendQuality, \&quot;Trend quality\&quot;,GetColor(5));\nAddLabel(showLabel and MarketDirection, \&quot;Market direction\&quot;,GetColor(6));\nAddLabel(showLabel , \&quot;Market score \&quot;+ score,GetColor(7));&quot;,name=&quot;_eda484cd_ddc6_4c0a_bbe5_c38bde0176d0&quot;}){hidden=&lt;T,inputsMap:TreeMap9{^(&quot;aggregationPeriod1&quot;,&quot;THREE_MIN&quot;)},inputsMap=@TreeMap9})}),^(#%4.SubgraphId(&quot;Subgraph45&quot;),#%4.SubgraphStorableModel{height=118,storableIndicators.+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# TEA 2.0 - TOS version - 2015-06-04\n# From Andrew Falde\'s work - LessThanRandom.com \n# Converted from TradeStation to TOS by John Chernicky\n\n#Hint: TEA 2.0 by Andrew Falde at LessThanRandom.com\n\ndeclare lower;\ninput Period = 21; # Bars for Price Analysis\n#Hint Period: Period in number of bars.\ndef Price = close; # Use closing price for calculaltion\ninput Author = \&quot;Andrew Falde - LessThanRandom.com\&quot;;\n\n# Expansion Calculation\ndef ATR = reference ATR(Period, averageType = AverageType.SIMPLE);\ndef StdDev = StDev(data = Price, length = Period);\ndef squeeze = (ATR * .75) - StdDev;\ndef Expansion = If (squeeze &lt; 0, 1, 0);\n\n# Linear Regression \ndef lowest = Lowest(low[1], Period);\ndef highest = Highest(high[1], Period);\ndef EMA = ExpAverage(Price, Period);\ndef Resolve = Price - ((highest + lowest) / 2 + EMA) / 2;\ndef Trendline = LinearRegCurve(0, Period, Resolve);\n\n# Trend Caclulation\n# 1 - Accumulation\n# 2 - Mark Up\n# 3 - Distribution\n# 4 - Mark Down\n# 0 - No Trend\ndef Trend = if Trendline &lt;= 0 and Trendline &gt; Trendline[1] then 1 else (\n            if Trendline &gt; 0 and Trendline &gt; Trendline[1] then 2 else (\n            if Trendline &gt; 0 and Trendline &lt; Trendline[1] then 3 else (\n            if Trendline &lt;= 0 and Trendline &lt; Trendline[1] then 4 else (\n            Double.NaN))));\n\nplot TEA = \n(if Trend == 1 then -1 \nelse (if Trend == 2 then 1 \nelse (if Trend == 3 then 1\nelse (if Trend == 4 then -1 else Double.NaN\n))));\n\nplot Consolidated = (if Expansion == 0 then 0 else Double.NaN);\n\nTEA.AssignValueColor \n(if Trend == 1 then Color.DARK_RED \nelse (if Trend == 2 then Color.GREEN \nelse (if Trend == 3 then Color.DARK_GREEN\nelse (if Trend == 4 then Color.RED else Color.DARK_GRAY\n))));\n\nTEA.SetPaintingStrategy(PaintingStrategy.POINTS);\nTEA.SetLineWeight(4);\n#TEA.HideTitle();\nTEA.HideBubble();\n\nConsolidated.AssignValueColor(Color.BLUE);\nConsolidated.SetPaintingStrategy(PaintingStrategy.POINTS);\nConsolidated.SetLineWeight(4);\n#Consolidated.HideTitle();\nConsolidated.HideBubble();\n\n#AddLabel(yes, \&quot;LessThanRandom.com\&quot;, Color.GRAY);&quot;,name=&quot;_c6ab1c32_c813_3498_9fc7_7e038fe75c19&quot;}){inputsMap:TreeMap10{^(&quot;Period&quot;,38)},inputsMap=@TreeMap10,plots{1:{hiding=&lt;T}}})}),^(#%4.SubgraphId(&quot;Subgraph49&quot;),#%4.SubgraphStorableModel{height=118,storableIndicators.+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# IWO Turning Point Indicator\n# https://www.youtube.com/watch?v=MhME2EV0E_c\n# Credits: Steve Place\n# Get the IWO TurningPoint Indicator Here: https://investingwithoptions.com/tpi-yt/\n\n#The Turning Point Indicator shows you key statistical levels in any market. These levels can then be used to help you choose option trading strikes with the best risk/reward.\n\n# For Options Trading use Daily Chart and 10 Days and 252 as the settings\n\ndeclare lower;input length = 10;input stdLength = 60;plot rolling = (close - close[length])*100/close[length];plot updev = StDev(rolling, stdLength);plot twoupdev = 2*StDev(rolling, stdLength);plot downdev = -StDev(rolling, stdLength);plot twodowndev = -2*StDev(rolling, stdLength);\n\nplot zero = 0;\nzero.setdefaultcolor(color.gray);\nzero.setpaintingstrategy(PaintingStrategy.DASHES);\n&quot;,name=&quot;_87d043e9_29dc_3dfa_a88a_624245923273&quot;}){inputsMap:TreeMap11{^(&quot;length&quot;,@Integer2),^(&quot;stdLength&quot;,55)},inputsMap=@TreeMap11,plots{0:{lineWeight=2}}})})}}" DEFAULT_TYPE="DASHBOARD" ORDER_ENTRY_EXPANDED="false" ORDER_ENTRY_PINNED_PROPERTY="false" ROW_COUNT="1" SHARED_USER_SCRIPTS="@v6@owner{chartAggregationPeriods:ChartAggregationPeriodArray0,chartAggregationPeriods=@ChartAggregationPeriodArray0}#java.util.HashMap{^(&quot;_60475667_d5a0_4a24_8038_b84ac1548626&quot;,&quot;TheoProjectionPivots&quot;),^(&quot;_f59c642e_bc17_46b6_b151_447e2c413c14&quot;,&quot;rsiLaguerreTime&quot;)}" SYMBOL=".AAPL210401C122" SYMBOL_GROUP="3" VERTICAL="false" VISIBLE="true" WEIGHT="3.0"/>
            <DASHBOARD SYMBOL="/ES" SYMBOL_GROUP="-1" VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <LEVEL_II VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <LIVE_NEWS SYMBOL="UIS" SYMBOL_GROUP="2" VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <PHASE_SCORES VERTICAL="false" VISIBLE="false" WEIGHT="2.0"/>
            <TIME_SALES VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <TRADE CONFIGURATION_NAME="SINGLE" ORDER_RULES_SET="OPTION" ORDER_TYPE="LIMIT" OS_AUTO="false" OS_EXPANDED="true" OS_TIF="DAY" QTY="10.0" QTY_STEP="1.0" TEMPLATE="SINGLE" TRADE_BUTTONS="BUY_MKT;SELL_MKT;MULTI_CANCEL;REVERSE;FLAT;SECOND_LINE;QUANTITY;AUTO_SEND;ORDER_SETUP" VISIBLE="false">
              <OCO_STOP>
                <TRG_0 TRG_ENBL="true" TRG_LINK="ASK_BID" TRG_OFFSET_MODE="TICK" TRG_OT="STOP" TRG_SETUP="10.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AAL="10.0" AAPL="10.0" ADBE="10.0" AFI="10.0" AMC="10.0" AMCR="10.0" AMRS="10.0" AMZN="10.0" ANTE="10.0" ARLO="10.0" AXL="10.0" BA="10.0" BBBY="10.0" BBD="10.0" BMY="10.0" BSGM="10.0" BXRX="10.0" CAKE="10.0" CCI="10.0" CCJ="10.0" CHNG="10.0" CHX="10.0" CIDM="10.0" CLBS="10.0" CLDR="10.0" CLSN="10.0" CNNE="10.0" CRBP="10.0" CSCO="10.0" DIS="10.0" DISCK="10.0" DNN="10.0" DPW="10.0" DS="10.0" EMAN="10.0" ETSY="10.0" EVRG="10.0" EW="10.0" EWA="10.0" FAST="10.0" FCAC="10.0" FSR="10.0" FUSE="10.0" GEL="10.0" GME="10.0" GOCO="10.0" GOED="10.0" HBI="10.0" HPQ="10.0" HPR="10.0" HTZ="10.0" HUGE="10.0" HYLN="10.0" IDEX="10.0" IDXX="10.0" IGSB="10.0" INFI="10.0" INO="10.0" INTC="10.0" INTU="10.0" IZEA="10.0" JE="10.0" KEYS="10.0" LCI="10.0" LKQ="10.0" LUV="10.0" MARA="10.0" MBT="10.0" MDII="10.0" MMDA1="10.0" MRIN="10.0" MSFT="10.0" MU="10.0" NGD="10.0" NIO="10.0" NLOK="10.0" NLSN="10.0" NNVC="10.0" NOK="10.0" NVDA="10.0" OGI="10.0" OPEN="10.0" OPGN="10.0" OTIS="10.0" PAA="10.0" PAAS="10.0" PERI="10.0" PFF="10.0" PGX="10.0" POTX="10.0" PPG="10.0" PTE="10.0" RAD="10.0" RKT="10.0" RP="10.0" RPAY="10.0" RRD="10.0" RSX="10.0" SAVA="10.0" SIOX="10.0" SITC="10.0" SIVR="10.0" SKLZ="10.0" SLQT="10.0" SNAP="10.0" SOS="10.0" SPX="10.0" SQ="10.0" SWK="10.0" TAP="10.0" TGTX="10.0" TSLA="10.0" TZA="10.0" U="10.0" UAL="10.0" UAMY="10.0" UEC="10.0" UIS="10.0" USWS="10.0" UUUU="10.0" UXIN="10.0" VALE="10.0" VEU="10.0" VIX="10.0" VJET="10.0" VTRS="10.0" VWO="10.0" WETF="10.0" WKHS="10.0" X="10.0" XL="10.0" XLP="10.0" XLU="10.0" ZM="10.0"/>
                </TRG_0>
              </OCO_STOP>
              <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="1.0" TRG_TIF="DAY">
                <OFFSET_PER_SYMBOL AAL="1.0" AAPL="1.0" ADBE="1.0" AFI="1.0" AMC="1.0" AMCR="1.0" AMRS="1.0" AMZN="1.0" ANTE="1.0" ARLO="1.0" AXL="1.0" BA="1.0" BBBY="1.0" BBD="1.0" BMY="1.0" BSGM="1.0" BXRX="1.0" CAKE="1.0" CCI="1.0" CCJ="1.0" CHNG="1.0" CHX="1.0" CIDM="1.0" CLBS="1.0" CLDR="1.0" CLSN="1.0" CNNE="1.0" CRBP="1.0" CSCO="1.0" DIS="1.0" DISCK="1.0" DNN="1.0" DPW="1.0" DS="1.0" EMAN="1.0" ETSY="1.0" EVRG="1.0" EW="1.0" EWA="1.0" FAST="1.0" FCAC="1.0" FSR="1.0" FUSE="1.0" GEL="1.0" GME="1.0" GOCO="1.0" GOED="1.0" HBI="1.0" HPQ="1.0" HPR="1.0" HTZ="1.0" HUGE="1.0" HYLN="1.0" IDEX="1.0" IDXX="1.0" IGSB="1.0" INFI="1.0" INO="1.0" INTC="1.0" INTU="1.0" IZEA="1.0" JE="1.0" KEYS="1.0" LCI="1.0" LKQ="1.0" LUV="1.0" MARA="1.0" MBT="1.0" MDII="1.0" MMDA1="1.0" MRIN="1.0" MSFT="1.0" MU="1.0" NGD="1.0" NIO="1.0" NLOK="1.0" NLSN="1.0" NNVC="1.0" NOK="1.0" NVDA="1.0" OGI="1.0" OPEN="1.0" OPGN="1.0" OTIS="1.0" PAA="1.0" PAAS="1.0" PERI="1.0" PFF="1.0" PGX="1.0" POTX="1.0" PPG="1.0" PTE="1.0" RAD="1.0" RKT="1.0" RP="1.0" RPAY="1.0" RRD="1.0" RSX="1.0" SAVA="1.0" SIOX="1.0" SITC="1.0" SIVR="1.0" SKLZ="1.0" SLQT="1.0" SNAP="1.0" SOS="1.0" SPX="1.0" SQ="1.0" SWK="1.0" TAP="1.0" TGTX="1.0" TSLA="1.0" TZA="1.0" U="1.0" UAL="1.0" UAMY="1.0" UEC="1.0" UIS="1.0" USWS="1.0" UUUU="1.0" UXIN="1.0" VALE="1.0" VEU="1.0" VIX="1.0" VJET="1.0" VTRS="1.0" VWO="1.0" WETF="1.0" WKHS="1.0" X="1.0" XL="1.0" XLP="1.0" XLU="1.0" ZM="1.0"/>
              </TRG_0>
              <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-1.0" TRG_TIF="DAY">
                <OFFSET_PER_SYMBOL AAL="-1.0" AAPL="-1.0" ADBE="-1.0" AFI="-1.0" AMC="-1.0" AMCR="-1.0" AMRS="-1.0" AMZN="-1.0" ANTE="-1.0" ARLO="-1.0" AXL="-1.0" BA="-1.0" BBBY="-1.0" BBD="-1.0" BMY="-1.0" BSGM="-1.0" BXRX="-1.0" CAKE="-1.0" CCI="-1.0" CCJ="-1.0" CHNG="-1.0" CHX="-1.0" CIDM="-1.0" CLBS="-1.0" CLDR="-1.0" CLSN="-1.0" CNNE="-1.0" CRBP="-1.0" CSCO="-1.0" DIS="-1.0" DISCK="-1.0" DNN="-1.0" DPW="-1.0" DS="-1.0" EMAN="-1.0" ETSY="-1.0" EVRG="-1.0" EW="-1.0" EWA="-1.0" FAST="-1.0" FCAC="-1.0" FSR="-1.0" FUSE="-1.0" GEL="-1.0" GME="-1.0" GOCO="-1.0" GOED="-1.0" HBI="-1.0" HPQ="-1.0" HPR="-1.0" HTZ="-1.0" HUGE="-1.0" HYLN="-1.0" IDEX="-1.0" IDXX="-1.0" IGSB="-1.0" INFI="-1.0" INO="-1.0" INTC="-1.0" INTU="-1.0" IZEA="-1.0" JE="-1.0" KEYS="-1.0" LCI="-1.0" LKQ="-1.0" LUV="-1.0" MARA="-1.0" MBT="-1.0" MDII="-1.0" MMDA1="-1.0" MRIN="-1.0" MSFT="-1.0" MU="-1.0" NGD="-1.0" NIO="-1.0" NLOK="-1.0" NLSN="-1.0" NNVC="-1.0" NOK="-1.0" NVDA="-1.0" OGI="-1.0" OPEN="-1.0" OPGN="-1.0" OTIS="-1.0" PAA="-1.0" PAAS="-1.0" PERI="-1.0" PFF="-1.0" PGX="-1.0" POTX="-1.0" PPG="-1.0" PTE="-1.0" RAD="-1.0" RKT="-1.0" RP="-1.0" RPAY="-1.0" RRD="-1.0" RSX="-1.0" SAVA="-1.0" SIOX="-1.0" SITC="-1.0" SIVR="-1.0" SKLZ="-1.0" SLQT="-1.0" SNAP="-1.0" SOS="-1.0" SPX="-1.0" SQ="-1.0" SWK="-1.0" TAP="-1.0" TGTX="-1.0" TSLA="-1.0" TZA="-1.0" U="-1.0" UAL="-1.0" UAMY="-1.0" UEC="-1.0" UIS="-1.0" USWS="-1.0" UUUU="-1.0" UXIN="-1.0" VALE="-1.0" VEU="-1.0" VIX="-1.0" VJET="-1.0" VTRS="-1.0" VWO="-1.0" WETF="-1.0" WKHS="-1.0" X="-1.0" XL="-1.0" XLP="-1.0" XLU="-1.0" ZM="-1.0"/>
              </TRG_1>
              <_2>
                <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="2.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AAL="2.0" AAPL="2.0" ADBE="2.0" AFI="2.0" AMC="2.0" AMCR="2.0" AMRS="2.0" AMZN="2.0" ANTE="2.0" ARLO="2.0" AXL="2.0" BA="2.0" BBBY="2.0" BBD="2.0" BMY="2.0" BSGM="2.0" BXRX="2.0" CAKE="2.0" CCI="2.0" CCJ="2.0" CHNG="2.0" CHX="2.0" CIDM="2.0" CLBS="2.0" CLDR="2.0" CLSN="2.0" CNNE="2.0" CRBP="2.0" CSCO="2.0" DIS="2.0" DISCK="2.0" DNN="2.0" DPW="2.0" DS="2.0" EMAN="2.0" ETSY="2.0" EVRG="2.0" EW="2.0" EWA="2.0" FAST="2.0" FCAC="2.0" FSR="2.0" FUSE="2.0" GEL="2.0" GME="2.0" GOCO="2.0" GOED="2.0" HBI="2.0" HPQ="2.0" HPR="2.0" HTZ="2.0" HUGE="2.0" HYLN="2.0" IDEX="2.0" IDXX="2.0" IGSB="2.0" INFI="2.0" INO="2.0" INTC="2.0" INTU="2.0" IZEA="2.0" JE="2.0" KEYS="2.0" LCI="2.0" LKQ="2.0" LUV="2.0" MARA="2.0" MBT="2.0" MDII="2.0" MMDA1="2.0" MRIN="2.0" MSFT="2.0" MU="2.0" NGD="2.0" NIO="2.0" NLOK="2.0" NLSN="2.0" NNVC="2.0" NOK="2.0" NVDA="2.0" OGI="2.0" OPEN="2.0" OPGN="2.0" OTIS="2.0" PAA="2.0" PAAS="2.0" PERI="2.0" PFF="2.0" PGX="2.0" POTX="2.0" PPG="2.0" PTE="2.0" RAD="2.0" RKT="2.0" RP="2.0" RPAY="2.0" RRD="2.0" RSX="2.0" SAVA="2.0" SIOX="2.0" SITC="2.0" SIVR="2.0" SKLZ="2.0" SLQT="2.0" SNAP="2.0" SOS="2.0" SPX="2.0" SQ="2.0" SWK="2.0" TAP="2.0" TGTX="2.0" TSLA="2.0" TZA="2.0" U="2.0" UAL="2.0" UAMY="2.0" UEC="2.0" UIS="2.0" USWS="2.0" UUUU="2.0" UXIN="2.0" VALE="2.0" VEU="2.0" VIX="2.0" VJET="2.0" VTRS="2.0" VWO="2.0" WETF="2.0" WKHS="2.0" X="2.0" XL="2.0" XLP="2.0" XLU="2.0" ZM="2.0"/>
                </TRG_0>
                <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-2.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AAL="-2.0" AAPL="-2.0" ADBE="-2.0" AFI="-2.0" AMC="-2.0" AMCR="-2.0" AMRS="-2.0" AMZN="-2.0" ANTE="-2.0" ARLO="-2.0" AXL="-2.0" BA="-2.0" BBBY="-2.0" BBD="-2.0" BMY="-2.0" BSGM="-2.0" BXRX="-2.0" CAKE="-2.0" CCI="-2.0" CCJ="-2.0" CHNG="-2.0" CHX="-2.0" CIDM="-2.0" CLBS="-2.0" CLDR="-2.0" CLSN="-2.0" CNNE="-2.0" CRBP="-2.0" CSCO="-2.0" DIS="-2.0" DISCK="-2.0" DNN="-2.0" DPW="-2.0" DS="-2.0" EMAN="-2.0" ETSY="-2.0" EVRG="-2.0" EW="-2.0" EWA="-2.0" FAST="-2.0" FCAC="-2.0" FSR="-2.0" FUSE="-2.0" GEL="-2.0" GME="-2.0" GOCO="-2.0" GOED="-2.0" HBI="-2.0" HPQ="-2.0" HPR="-2.0" HTZ="-2.0" HUGE="-2.0" HYLN="-2.0" IDEX="-2.0" IDXX="-2.0" IGSB="-2.0" INFI="-2.0" INO="-2.0" INTC="-2.0" INTU="-2.0" IZEA="-2.0" JE="-2.0" KEYS="-2.0" LCI="-2.0" LKQ="-2.0" LUV="-2.0" MARA="-2.0" MBT="-2.0" MDII="-2.0" MMDA1="-2.0" MRIN="-2.0" MSFT="-2.0" MU="-2.0" NGD="-2.0" NIO="-2.0" NLOK="-2.0" NLSN="-2.0" NNVC="-2.0" NOK="-2.0" NVDA="-2.0" OGI="-2.0" OPEN="-2.0" OPGN="-2.0" OTIS="-2.0" PAA="-2.0" PAAS="-2.0" PERI="-2.0" PFF="-2.0" PGX="-2.0" POTX="-2.0" PPG="-2.0" PTE="-2.0" RAD="-2.0" RKT="-2.0" RP="-2.0" RPAY="-2.0" RRD="-2.0" RSX="-2.0" SAVA="-2.0" SIOX="-2.0" SITC="-2.0" SIVR="-2.0" SKLZ="-2.0" SLQT="-2.0" SNAP="-2.0" SOS="-2.0" SPX="-2.0" SQ="-2.0" SWK="-2.0" TAP="-2.0" TGTX="-2.0" TSLA="-2.0" TZA="-2.0" U="-2.0" UAL="-2.0" UAMY="-2.0" UEC="-2.0" UIS="-2.0" USWS="-2.0" UUUU="-2.0" UXIN="-2.0" VALE="-2.0" VEU="-2.0" VIX="-2.0" VJET="-2.0" VTRS="-2.0" VWO="-2.0" WETF="-2.0" WKHS="-2.0" X="-2.0" XL="-2.0" XLP="-2.0" XLU="-2.0" ZM="-2.0"/>
                </TRG_1>
              </_2>
              <_3>
                <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="3.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AAL="3.0" AAPL="3.0" ADBE="3.0" AFI="3.0" AMC="3.0" AMCR="3.0" AMRS="3.0" AMZN="3.0" ANTE="3.0" ARLO="3.0" AXL="3.0" BA="3.0" BBBY="3.0" BBD="3.0" BMY="3.0" BSGM="3.0" BXRX="3.0" CAKE="3.0" CCI="3.0" CCJ="3.0" CHNG="3.0" CHX="3.0" CIDM="3.0" CLBS="3.0" CLDR="3.0" CLSN="3.0" CNNE="3.0" CRBP="3.0" CSCO="3.0" DIS="3.0" DISCK="3.0" DNN="3.0" DPW="3.0" DS="3.0" EMAN="3.0" ETSY="3.0" EVRG="3.0" EW="3.0" EWA="3.0" FAST="3.0" FCAC="3.0" FSR="3.0" FUSE="3.0" GEL="3.0" GME="3.0" GOCO="3.0" GOED="3.0" HBI="3.0" HPQ="3.0" HPR="3.0" HTZ="3.0" HUGE="3.0" HYLN="3.0" IDEX="3.0" IDXX="3.0" IGSB="3.0" INFI="3.0" INO="3.0" INTC="3.0" INTU="3.0" IZEA="3.0" JE="3.0" KEYS="3.0" LCI="3.0" LKQ="3.0" LUV="3.0" MARA="3.0" MBT="3.0" MDII="3.0" MMDA1="3.0" MRIN="3.0" MSFT="3.0" MU="3.0" NGD="3.0" NIO="3.0" NLOK="3.0" NLSN="3.0" NNVC="3.0" NOK="3.0" NVDA="3.0" OGI="3.0" OPEN="3.0" OPGN="3.0" OTIS="3.0" PAA="3.0" PAAS="3.0" PERI="3.0" PFF="3.0" PGX="3.0" POTX="3.0" PPG="3.0" PTE="3.0" RAD="3.0" RKT="3.0" RP="3.0" RPAY="3.0" RRD="3.0" RSX="3.0" SAVA="3.0" SIOX="3.0" SITC="3.0" SIVR="3.0" SKLZ="3.0" SLQT="3.0" SNAP="3.0" SOS="3.0" SPX="3.0" SQ="3.0" SWK="3.0" TAP="3.0" TGTX="3.0" TSLA="3.0" TZA="3.0" U="3.0" UAL="3.0" UAMY="3.0" UEC="3.0" UIS="3.0" USWS="3.0" UUUU="3.0" UXIN="3.0" VALE="3.0" VEU="3.0" VIX="3.0" VJET="3.0" VTRS="3.0" VWO="3.0" WETF="3.0" WKHS="3.0" X="3.0" XL="3.0" XLP="3.0" XLU="3.0" ZM="3.0"/>
                </TRG_0>
                <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-3.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AAL="-3.0" AAPL="-3.0" ADBE="-3.0" AFI="-3.0" AMC="-3.0" AMCR="-3.0" AMRS="-3.0" AMZN="-3.0" ANTE="-3.0" ARLO="-3.0" AXL="-3.0" BA="-3.0" BBBY="-3.0" BBD="-3.0" BMY="-3.0" BSGM="-3.0" BXRX="-3.0" CAKE="-3.0" CCI="-3.0" CCJ="-3.0" CHNG="-3.0" CHX="-3.0" CIDM="-3.0" CLBS="-3.0" CLDR="-3.0" CLSN="-3.0" CNNE="-3.0" CRBP="-3.0" CSCO="-3.0" DIS="-3.0" DISCK="-3.0" DNN="-3.0" DPW="-3.0" DS="-3.0" EMAN="-3.0" ETSY="-3.0" EVRG="-3.0" EW="-3.0" EWA="-3.0" FAST="-3.0" FCAC="-3.0" FSR="-3.0" FUSE="-3.0" GEL="-3.0" GME="-3.0" GOCO="-3.0" GOED="-3.0" HBI="-3.0" HPQ="-3.0" HPR="-3.0" HTZ="-3.0" HUGE="-3.0" HYLN="-3.0" IDEX="-3.0" IDXX="-3.0" IGSB="-3.0" INFI="-3.0" INO="-3.0" INTC="-3.0" INTU="-3.0" IZEA="-3.0" JE="-3.0" KEYS="-3.0" LCI="-3.0" LKQ="-3.0" LUV="-3.0" MARA="-3.0" MBT="-3.0" MDII="-3.0" MMDA1="-3.0" MRIN="-3.0" MSFT="-3.0" MU="-3.0" NGD="-3.0" NIO="-3.0" NLOK="-3.0" NLSN="-3.0" NNVC="-3.0" NOK="-3.0" NVDA="-3.0" OGI="-3.0" OPEN="-3.0" OPGN="-3.0" OTIS="-3.0" PAA="-3.0" PAAS="-3.0" PERI="-3.0" PFF="-3.0" PGX="-3.0" POTX="-3.0" PPG="-3.0" PTE="-3.0" RAD="-3.0" RKT="-3.0" RP="-3.0" RPAY="-3.0" RRD="-3.0" RSX="-3.0" SAVA="-3.0" SIOX="-3.0" SITC="-3.0" SIVR="-3.0" SKLZ="-3.0" SLQT="-3.0" SNAP="-3.0" SOS="-3.0" SPX="-3.0" SQ="-3.0" SWK="-3.0" TAP="-3.0" TGTX="-3.0" TSLA="-3.0" TZA="-3.0" U="-3.0" UAL="-3.0" UAMY="-3.0" UEC="-3.0" UIS="-3.0" USWS="-3.0" UUUU="-3.0" UXIN="-3.0" VALE="-3.0" VEU="-3.0" VIX="-3.0" VJET="-3.0" VTRS="-3.0" VWO="-3.0" WETF="-3.0" WKHS="-3.0" X="-3.0" XL="-3.0" XLP="-3.0" XLU="-3.0" ZM="-3.0"/>
                </TRG_1>
              </_3>
            </TRADE>
          </CELL0>
          <CELL1 ROWSPANELWEIGHT="1.0" ROWWEIGHT0="1.5557851239669422" ROWWEIGHT1="0.44421487603305787" SELECTED_TYPE="CHART" SIDEBAR_IS_ACTIVE="true" SYMBOL="MSFT" SYMBOL_GROUP="2" TRADE_BUTTONS_MIGRATED="true">
            <ACTIVETRADER CELL_IDS="POSITION_BREAKDOWN;NET_POSITION;AVERAGE_PRICE;PL_OPEN;PL_DAY" COLUMNS="TRADE_AMOUNT:43:,BUY_ORDER:59:,BIDSIZE:20:,PRICE:69:,ASKSIZE:24:,SELL_ORDER:48:" ENABLED="true" SHOW_STUDY_MARKERS="false" SYMBOL="AAPL" SYMBOL_GROUP="2" SYNC_AT_AND_CHART_CROSSHAIR="true" VERTICAL="false" VISIBLE="false" WEIGHT="1.4930182599355533" ZOOMING_STEPS="1">
              <POSITION_SUMMARY_PANEL CELL_IDS="POSITION_BREAKDOWN;NET_POSITION;AVERAGE_PRICE;PL_OPEN;PL_DAY" ENABLED="true"/>
              <TRADE_BUTTONS_CONFIG CONFIGURATION_NAME="SINGLE" ORDER_RULES_SET="STOCK" ORDER_TYPE="LIMIT" OS_AUTO="false" OS_EXPANDED="false" OS_TIF="DAY" QTY="100.0" QTY_STEP="1.0" TEMPLATE="SINGLE" TRADE_BUTTONS="BUY_MKT;SELL_MKT;MULTI_CANCEL;REVERSE;FLAT;SECOND_LINE;QUANTITY_WITH_BUTTONS;ORDER_TEMPLATE;AUTO_SEND;ORDER_SETUP">
                <OCO_STOP>
                  <TRG_0 TRG_ENBL="true" TRG_LINK="ASK_BID" TRG_OFFSET_MODE="TICK" TRG_OT="STOP" TRG_SETUP="10.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL AAL="10.0" AAPL="10.0" AFI="10.0" AMC="10.0" AMD="10.0" AMZN="10.0" ANTE="10.0" ARLO="10.0" AXL="10.0" BBD="10.0" BMY="10.0" BSGM="10.0" BXRX="10.0" CCJ="10.0" CCL="10.0" CHNG="10.0" CHX="10.0" CIDM="10.0" CLBS="10.0" CLDR="10.0" CLSN="10.0" CRBP="10.0" CSCO="10.0" DIS="10.0" DISCK="10.0" DNN="10.0" DPW="10.0" DS="10.0" EMAN="10.0" ETSY="10.0" EW="10.0" EWA="10.0" FCAC="10.0" FSR="10.0" FUSE="10.0" GME="10.0" GOCO="10.0" HBI="10.0" HPQ="10.0" HPR="10.0" HTZ="10.0" HUGE="10.0" HYLN="10.0" IDEX="10.0" IGSB="10.0" INFI="10.0" INO="10.0" INTC="10.0" IZEA="10.0" JE="10.0" KEYS="10.0" LCI="10.0" LKQ="10.0" LUV="10.0" MBT="10.0" MDII="10.0" MMDA1="10.0" MRIN="10.0" NGD="10.0" NIO="10.0" NLOK="10.0" NLSN="10.0" NNVC="10.0" NOK="10.0" OGI="10.0" OPEN="10.0" OPGN="10.0" PAAS="10.0" PERI="10.0" PGX="10.0" POTX="10.0" RAD="10.0" RKT="10.0" RP="10.0" RRD="10.0" RSX="10.0" SAVA="10.0" SIOX="10.0" SITC="10.0" SIVR="10.0" SKLZ="10.0" SLQT="10.0" SNAP="10.0" SOS="10.0" SQ="10.0" TGTX="10.0" TSLA="10.0" TZA="10.0" U="10.0" UAMY="10.0" UEC="10.0" USWS="10.0" UUUU="10.0" VJET="10.0" VTRS="10.0" WETF="10.0" X="10.0" XL="10.0" XLP="10.0" XLU="10.0" ZM="10.0"/>
                  </TRG_0>
                </OCO_STOP>
                <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="1.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AAL="1.0" AAPL="1.0" AFI="1.0" AMC="1.0" AMD="1.0" AMZN="1.0" ANTE="1.0" ARLO="1.0" AXL="1.0" BBD="1.0" BMY="1.0" BSGM="1.0" BXRX="1.0" CCJ="1.0" CCL="1.0" CHNG="1.0" CHX="1.0" CIDM="1.0" CLBS="1.0" CLDR="1.0" CLSN="1.0" CRBP="1.0" CSCO="1.0" DIS="1.0" DISCK="1.0" DNN="1.0" DPW="1.0" DS="1.0" EMAN="1.0" ETSY="1.0" EW="1.0" EWA="1.0" FCAC="1.0" FSR="1.0" FUSE="1.0" GME="1.0" GOCO="1.0" HBI="1.0" HPQ="1.0" HPR="1.0" HTZ="1.0" HUGE="1.0" HYLN="1.0" IDEX="1.0" IGSB="1.0" INFI="1.0" INO="1.0" INTC="1.0" IZEA="1.0" JE="1.0" KEYS="1.0" LCI="1.0" LKQ="1.0" LUV="1.0" MBT="1.0" MDII="1.0" MMDA1="1.0" MRIN="1.0" NGD="1.0" NIO="1.0" NLOK="1.0" NLSN="1.0" NNVC="1.0" NOK="1.0" OGI="1.0" OPEN="1.0" OPGN="1.0" PAAS="1.0" PERI="1.0" PGX="1.0" POTX="1.0" RAD="1.0" RKT="1.0" RP="1.0" RRD="1.0" RSX="1.0" SAVA="1.0" SIOX="1.0" SITC="1.0" SIVR="1.0" SKLZ="1.0" SLQT="1.0" SNAP="1.0" SOS="1.0" SQ="1.0" TGTX="1.0" TSLA="1.0" TZA="1.0" U="1.0" UAMY="1.0" UEC="1.0" USWS="1.0" UUUU="1.0" VJET="1.0" VTRS="1.0" WETF="1.0" X="1.0" XL="1.0" XLP="1.0" XLU="1.0" ZM="1.0"/>
                </TRG_0>
                <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-1.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AAL="-1.0" AAPL="-1.0" AFI="-1.0" AMC="-1.0" AMD="-1.0" AMZN="-1.0" ANTE="-1.0" ARLO="-1.0" AXL="-1.0" BBD="-1.0" BMY="-1.0" BSGM="-1.0" BXRX="-1.0" CCJ="-1.0" CCL="-1.0" CHNG="-1.0" CHX="-1.0" CIDM="-1.0" CLBS="-1.0" CLDR="-1.0" CLSN="-1.0" CRBP="-1.0" CSCO="-1.0" DIS="-1.0" DISCK="-1.0" DNN="-1.0" DPW="-1.0" DS="-1.0" EMAN="-1.0" ETSY="-1.0" EW="-1.0" EWA="-1.0" FCAC="-1.0" FSR="-1.0" FUSE="-1.0" GME="-1.0" GOCO="-1.0" HBI="-1.0" HPQ="-1.0" HPR="-1.0" HTZ="-1.0" HUGE="-1.0" HYLN="-1.0" IDEX="-1.0" IGSB="-1.0" INFI="-1.0" INO="-1.0" INTC="-1.0" IZEA="-1.0" JE="-1.0" KEYS="-1.0" LCI="-1.0" LKQ="-1.0" LUV="-1.0" MBT="-1.0" MDII="-1.0" MMDA1="-1.0" MRIN="-1.0" NGD="-1.0" NIO="-1.0" NLOK="-1.0" NLSN="-1.0" NNVC="-1.0" NOK="-1.0" OGI="-1.0" OPEN="-1.0" OPGN="-1.0" PAAS="-1.0" PERI="-1.0" PGX="-1.0" POTX="-1.0" RAD="-1.0" RKT="-1.0" RP="-1.0" RRD="-1.0" RSX="-1.0" SAVA="-1.0" SIOX="-1.0" SITC="-1.0" SIVR="-1.0" SKLZ="-1.0" SLQT="-1.0" SNAP="-1.0" SOS="-1.0" SQ="-1.0" TGTX="-1.0" TSLA="-1.0" TZA="-1.0" U="-1.0" UAMY="-1.0" UEC="-1.0" USWS="-1.0" UUUU="-1.0" VJET="-1.0" VTRS="-1.0" WETF="-1.0" X="-1.0" XL="-1.0" XLP="-1.0" XLU="-1.0" ZM="-1.0"/>
                </TRG_1>
                <_2>
                  <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="2.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL AAL="2.0" AAPL="2.0" AFI="2.0" AMC="2.0" AMD="2.0" AMZN="2.0" ANTE="2.0" ARLO="2.0" AXL="2.0" BBD="2.0" BMY="2.0" BSGM="2.0" BXRX="2.0" CCJ="2.0" CCL="2.0" CHNG="2.0" CHX="2.0" CIDM="2.0" CLBS="2.0" CLDR="2.0" CLSN="2.0" CRBP="2.0" CSCO="2.0" DIS="2.0" DISCK="2.0" DNN="2.0" DPW="2.0" DS="2.0" EMAN="2.0" ETSY="2.0" EW="2.0" EWA="2.0" FCAC="2.0" FSR="2.0" FUSE="2.0" GME="2.0" GOCO="2.0" HBI="2.0" HPQ="2.0" HPR="2.0" HTZ="2.0" HUGE="2.0" HYLN="2.0" IDEX="2.0" IGSB="2.0" INFI="2.0" INO="2.0" INTC="2.0" IZEA="2.0" JE="2.0" KEYS="2.0" LCI="2.0" LKQ="2.0" LUV="2.0" MBT="2.0" MDII="2.0" MMDA1="2.0" MRIN="2.0" NGD="2.0" NIO="2.0" NLOK="2.0" NLSN="2.0" NNVC="2.0" NOK="2.0" OGI="2.0" OPEN="2.0" OPGN="2.0" PAAS="2.0" PERI="2.0" PGX="2.0" POTX="2.0" RAD="2.0" RKT="2.0" RP="2.0" RRD="2.0" RSX="2.0" SAVA="2.0" SIOX="2.0" SITC="2.0" SIVR="2.0" SKLZ="2.0" SLQT="2.0" SNAP="2.0" SOS="2.0" SQ="2.0" TGTX="2.0" TSLA="2.0" TZA="2.0" U="2.0" UAMY="2.0" UEC="2.0" USWS="2.0" UUUU="2.0" VJET="2.0" VTRS="2.0" WETF="2.0" X="2.0" XL="2.0" XLP="2.0" XLU="2.0" ZM="2.0"/>
                  </TRG_0>
                  <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-2.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL AAL="-2.0" AAPL="-2.0" AFI="-2.0" AMC="-2.0" AMD="-2.0" AMZN="-2.0" ANTE="-2.0" ARLO="-2.0" AXL="-2.0" BBD="-2.0" BMY="-2.0" BSGM="-2.0" BXRX="-2.0" CCJ="-2.0" CCL="-2.0" CHNG="-2.0" CHX="-2.0" CIDM="-2.0" CLBS="-2.0" CLDR="-2.0" CLSN="-2.0" CRBP="-2.0" CSCO="-2.0" DIS="-2.0" DISCK="-2.0" DNN="-2.0" DPW="-2.0" DS="-2.0" EMAN="-2.0" ETSY="-2.0" EW="-2.0" EWA="-2.0" FCAC="-2.0" FSR="-2.0" FUSE="-2.0" GME="-2.0" GOCO="-2.0" HBI="-2.0" HPQ="-2.0" HPR="-2.0" HTZ="-2.0" HUGE="-2.0" HYLN="-2.0" IDEX="-2.0" IGSB="-2.0" INFI="-2.0" INO="-2.0" INTC="-2.0" IZEA="-2.0" JE="-2.0" KEYS="-2.0" LCI="-2.0" LKQ="-2.0" LUV="-2.0" MBT="-2.0" MDII="-2.0" MMDA1="-2.0" MRIN="-2.0" NGD="-2.0" NIO="-2.0" NLOK="-2.0" NLSN="-2.0" NNVC="-2.0" NOK="-2.0" OGI="-2.0" OPEN="-2.0" OPGN="-2.0" PAAS="-2.0" PERI="-2.0" PGX="-2.0" POTX="-2.0" RAD="-2.0" RKT="-2.0" RP="-2.0" RRD="-2.0" RSX="-2.0" SAVA="-2.0" SIOX="-2.0" SITC="-2.0" SIVR="-2.0" SKLZ="-2.0" SLQT="-2.0" SNAP="-2.0" SOS="-2.0" SQ="-2.0" TGTX="-2.0" TSLA="-2.0" TZA="-2.0" U="-2.0" UAMY="-2.0" UEC="-2.0" USWS="-2.0" UUUU="-2.0" VJET="-2.0" VTRS="-2.0" WETF="-2.0" X="-2.0" XL="-2.0" XLP="-2.0" XLU="-2.0" ZM="-2.0"/>
                  </TRG_1>
                </_2>
                <_3>
                  <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="3.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL AAL="3.0" AAPL="3.0" AFI="3.0" AMC="3.0" AMD="3.0" AMZN="3.0" ANTE="3.0" ARLO="3.0" AXL="3.0" BBD="3.0" BMY="3.0" BSGM="3.0" BXRX="3.0" CCJ="3.0" CCL="3.0" CHNG="3.0" CHX="3.0" CIDM="3.0" CLBS="3.0" CLDR="3.0" CLSN="3.0" CRBP="3.0" CSCO="3.0" DIS="3.0" DISCK="3.0" DNN="3.0" DPW="3.0" DS="3.0" EMAN="3.0" ETSY="3.0" EW="3.0" EWA="3.0" FCAC="3.0" FSR="3.0" FUSE="3.0" GME="3.0" GOCO="3.0" HBI="3.0" HPQ="3.0" HPR="3.0" HTZ="3.0" HUGE="3.0" HYLN="3.0" IDEX="3.0" IGSB="3.0" INFI="3.0" INO="3.0" INTC="3.0" IZEA="3.0" JE="3.0" KEYS="3.0" LCI="3.0" LKQ="3.0" LUV="3.0" MBT="3.0" MDII="3.0" MMDA1="3.0" MRIN="3.0" NGD="3.0" NIO="3.0" NLOK="3.0" NLSN="3.0" NNVC="3.0" NOK="3.0" OGI="3.0" OPEN="3.0" OPGN="3.0" PAAS="3.0" PERI="3.0" PGX="3.0" POTX="3.0" RAD="3.0" RKT="3.0" RP="3.0" RRD="3.0" RSX="3.0" SAVA="3.0" SIOX="3.0" SITC="3.0" SIVR="3.0" SKLZ="3.0" SLQT="3.0" SNAP="3.0" SOS="3.0" SQ="3.0" TGTX="3.0" TSLA="3.0" TZA="3.0" U="3.0" UAMY="3.0" UEC="3.0" USWS="3.0" UUUU="3.0" VJET="3.0" VTRS="3.0" WETF="3.0" X="3.0" XL="3.0" XLP="3.0" XLU="3.0" ZM="3.0"/>
                  </TRG_0>
                  <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-3.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL AAL="-3.0" AAPL="-3.0" AFI="-3.0" AMC="-3.0" AMD="-3.0" AMZN="-3.0" ANTE="-3.0" ARLO="-3.0" AXL="-3.0" BBD="-3.0" BMY="-3.0" BSGM="-3.0" BXRX="-3.0" CCJ="-3.0" CCL="-3.0" CHNG="-3.0" CHX="-3.0" CIDM="-3.0" CLBS="-3.0" CLDR="-3.0" CLSN="-3.0" CRBP="-3.0" CSCO="-3.0" DIS="-3.0" DISCK="-3.0" DNN="-3.0" DPW="-3.0" DS="-3.0" EMAN="-3.0" ETSY="-3.0" EW="-3.0" EWA="-3.0" FCAC="-3.0" FSR="-3.0" FUSE="-3.0" GME="-3.0" GOCO="-3.0" HBI="-3.0" HPQ="-3.0" HPR="-3.0" HTZ="-3.0" HUGE="-3.0" HYLN="-3.0" IDEX="-3.0" IGSB="-3.0" INFI="-3.0" INO="-3.0" INTC="-3.0" IZEA="-3.0" JE="-3.0" KEYS="-3.0" LCI="-3.0" LKQ="-3.0" LUV="-3.0" MBT="-3.0" MDII="-3.0" MMDA1="-3.0" MRIN="-3.0" NGD="-3.0" NIO="-3.0" NLOK="-3.0" NLSN="-3.0" NNVC="-3.0" NOK="-3.0" OGI="-3.0" OPEN="-3.0" OPGN="-3.0" PAAS="-3.0" PERI="-3.0" PGX="-3.0" POTX="-3.0" RAD="-3.0" RKT="-3.0" RP="-3.0" RRD="-3.0" RSX="-3.0" SAVA="-3.0" SIOX="-3.0" SITC="-3.0" SIVR="-3.0" SKLZ="-3.0" SLQT="-3.0" SNAP="-3.0" SOS="-3.0" SQ="-3.0" TGTX="-3.0" TSLA="-3.0" TZA="-3.0" U="-3.0" UAMY="-3.0" UEC="-3.0" USWS="-3.0" UUUU="-3.0" VJET="-3.0" VTRS="-3.0" WETF="-3.0" X="-3.0" XL="-3.0" XLP="-3.0" XLU="-3.0" ZM="-3.0"/>
                  </TRG_1>
                </_3>
              </TRADE_BUTTONS_CONFIG>
            </ACTIVETRADER>
            <BIG_BUTTONS VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <CHART CONFIGURATION="@v9@%0:com.devexperts.toschart.model,1:com.devexperts.tos.chartdata,2:com.devexperts.tos.thinkscript.data,3:java.awt,4:com.devexperts.toschart.control.subgraph,5:com.devexperts.toschart.elstudies,6:com.devexperts.toschart.script,7:com.devexperts.tos.thinkscript%owner{chartAggregationPeriods:ChartAggregationPeriodArray0{17::ChartAggregationPeriod0,15::ChartAggregationPeriod1},chartAggregationPeriods=@ChartAggregationPeriodArray0,colors{0::CustomColor0,8::CustomColor1,6::CustomColor2}}#com.devexperts.toschart.core.ChartModel{encodedMixinsState=&quot;{\&quot;common\&quot;:{\&quot;DRAWING_SETS\&quot;:\&quot;{}\&quot;},\&quot;state_props\&quot;:{\&quot;state_type\&quot;:\&quot;REGULAR\&quot;},\&quot;monkey_bars_exp\&quot;:{\&quot;LikefolioMixin\&quot;:\&quot;{\\\&quot;paintingSettings\\\&quot;:{\\\&quot;neutralSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;positiveSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;negativeSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;sentimentSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true}},\\\&quot;shownDivisions\\\&quot;:[],\\\&quot;allDivisions\\\&quot;:[]}\&quot;},\&quot;monkey_bars\&quot;:{},\&quot;seasonality\&quot;:{},\&quot;regular\&quot;:{\&quot;DescriberMixin\&quot;:\&quot;{\\\&quot;visibility\\\&quot;:\\\&quot;HIDE_PANEL\\\&quot;,\\\&quot;studiesMode\\\&quot;:\\\&quot;HIDE_STUDIES\\\&quot;}\&quot;,\&quot;LikefolioMixin\&quot;:\&quot;{\\\&quot;paintingSettings\\\&quot;:{\\\&quot;neutralSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;positiveSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;negativeSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;sentimentSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true}},\\\&quot;shownDivisions\\\&quot;:[],\\\&quot;allDivisions\\\&quot;:[]}\&quot;}}&quot;,encodedPatternsModel=&quot;{\&quot;showPatterns\&quot;:true,\&quot;models\&quot;:[],\&quot;fibModels\&quot;:[]}&quot;,groupId=&quot;default&quot;,styleSettings{chartAggregationSettings{monkeyChartsAggSettings=!%0.TimeFrameAggregationSettings.createTickOrTimeAggregation(!%1.ChartRange.findByCode(&quot;DAY3&quot;),@ChartAggregationPeriod0),timeAggregationSettings=!%0.TimeFrameAggregationSettings.createTickOrTimeAggregation(!%1.ChartRange.findByCode(&quot;DAY5&quot;),@ChartAggregationPeriod1)},commonStyleSettings{colorSettings{backgroundColor=!%2.CustomColor.findByIndex(&quot;101&quot;),candleTypeColors.fillUp=&lt;T,cursorColor=#%2.CustomColor(#%3.Color(102,0,255,255)),gridTypeColor=#%2.CustomColor(#%3.Color(51,0,153,255)),monkeyProfileTypeColors.defaultRowHeight=&lt;F,mpExpandedTypeColors.defaultRowHeight=&lt;F,volumeColor=#%2.CustomColor(#%3.Color(51,0,255,255))},expansion{down=10,right=12,up=10},fitArrowsToScreen=&lt;F,fitStudiesToScreen=&lt;F,leftAxisEnabled=&lt;F,manualAxisRegulator{maxValue=244.9982977d,minValue=229.00742599d},overlappedVolume=&lt;T,percentageBubbles=&lt;F,previousRightExpansion=12,shortCuts{^(&quot;Time Zone&quot;,&lt;F),^(&quot;Show Expiration Friday &quot;,&lt;F),^(&quot;Chart mode&quot;,&lt;F),^(&quot;Keep Price Zoom&quot;,&lt;F),^(&quot;enableLeftAxis&quot;,&lt;T),^(&quot;Fit expected price ranges&quot;,&lt;F),^(&quot;emphasizeDigitMPExpanded&quot;,&lt;F),^(&quot;showWicksCandleTrend&quot;,&lt;F),^(&quot;highlightEarnings&quot;,&lt;F),^(&quot;synchronizeCrosshair&quot;,&lt;F),^(&quot;myToolsMode&quot;,&lt;T),^(&quot;seasonalityStyle&quot;,&lt;F),^(&quot;Show Price Subgraph&quot;,&lt;F),^(&quot;closePriceLevel&quot;,&lt;F),^(&quot;Color Volume As Symbol Ticks&quot;,&lt;T),^(&quot;highlightPhantomRBars&quot;,&lt;F),^(&quot;Cross type &quot;,&lt;F),^(&quot;Fit Studies to Screen&quot;,&lt;T),^(&quot;Fit Orders&quot;,&lt;F),^(&quot;Bubbles as Percentage&quot;,&lt;F),^(&quot;hideStatusString&quot;,&lt;F),^(&quot;Show Studies &quot;,&lt;T),^(&quot;showWicksHeikinAshi&quot;,&lt;F),^(&quot;Alerts&quot;,&lt;F),^(&quot;Chart scale&quot;,&lt;F),^(&quot;Fit High/Low&quot;,&lt;F),^(&quot;Orders&quot;,&lt;F),^(&quot;Use Log Scale &quot;,&lt;T),^(&quot;Fit Study Markers to Screen&quot;,&lt;T),^(&quot;Fit Alerts&quot;,&lt;F),^(&quot;Fit patterns&quot;,&lt;F),^(&quot;Percentage View&quot;,&lt;T),^(&quot;Make Auto Zoom &quot;,&lt;F),^(&quot;Show Year Marking Line&quot;,&lt;F),^(&quot;Show Rollover Line&quot;,&lt;T),^(&quot;Show High/Low Bubbles &quot;,&lt;T),^(&quot;Snap mode&quot;,&lt;F),^(&quot;highlightStudies&quot;,&lt;F),^(&quot;Overlapped Volume&quot;,&lt;T),^(&quot;Show Symbol Logo&quot;,&lt;F),^(&quot;Show Last Price Bubble &quot;,&lt;F),^(&quot;emphasizeDigitMP&quot;,&lt;F),^(&quot;Snap crosshairs to&quot;,&lt;F),^(&quot;Show grid&quot;,&lt;T),^(&quot;databoxMode&quot;,&lt;F),^(&quot;Synchronize Drawings&quot;,&lt;F),^(&quot;showWicksCandle&quot;,&lt;F),^(&quot;Show trades&quot;,&lt;F),^(&quot;highlightSeasons&quot;,&lt;F),^(&quot;Snap drawings to&quot;,&lt;F),^(&quot;Extend Order/Alert Line to Left&quot;,&lt;F)},showYearMarkingLine=&lt;F,step=5.9523809523809526d},forexStyleSettings.shortCuts.^(&quot;Show Volume Subgraph&quot;,&lt;F),futuresStyleSettings{adjustForContractChanges=&lt;T,highlightExtendedHours=&lt;T,shortCuts{^(&quot;adjustForContractChanges&quot;,&lt;F),^(&quot;Show Open Interest&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,&lt;T),^(&quot;showContractChangeEvents&quot;,&lt;F),^(&quot;futures_daily_close_price&quot;,&lt;F),^(&quot;Show Options&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,&lt;T),^(&quot;startAtMarketOpen&quot;,&lt;F)}},optionsStyleSettings.shortCuts{^(&quot;Show Open Interest&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,&lt;T),^(&quot;Show Theo Price&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,&lt;T),^(&quot;startAtMarketOpen&quot;,&lt;F)},otherStyleSettings{shortCuts{^(&quot;Show Social Sentiment&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,&lt;T),^(&quot;Price type&quot;,&lt;F),^(&quot;Show Options&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,&lt;T),^(&quot;Show Corporate Actions&quot;,&lt;F),^(&quot;Show CNBC Video&quot;,&lt;F),^(&quot;startAtMarketOpen&quot;,&lt;F),^(&quot;adjustForDividends&quot;,&lt;F)},tradingHoursOnly=&lt;T},setsIdentifiers.styleSetName=&quot;Style name6&quot;},subgraphModels{!get(#%4.SubgraphId(&quot;Symbol&quot;)){height=357,storableIndicators{+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;###############################################################################################################################################\n################################################################################################################################################\n#\n# Author: Kory Gill, [USER=212]@korygill[/USER]\n#\n# Created from idea on https://usethinkscript.com/threads/finite-volume-elements.593/\n# Original idea is from http://mkatsanos.com/FVE.html\n#\n# VERSION HISTORY (sortable date and time (your local time is fine), and your initials\n# 20190907-1200-KG    - Created.\n\n###############################################################################\n### NORMALIZATION (Volume Damping adaptation) by Ramon Del Villar AKA PElonsax\n### 7/20/2020 #################################################################\n###############################################################################\n# The damping logic is taken directly from VFI #\n\n#declare once_per_bar;\n\n\n#################################################################$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n\n#########################################%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%$$$$$$$$$$$$$$$$$\n\n\n\n#\n# inputs\n#\ninput RSI_prev = 2; #previous bar to check\ninput def_cond = no;\ninput Samples = 14;\n\n\n\n#vwap vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\n#input numDevUp = 2.0;\ninput vwapTimeFrame = {default DAY, WEEK, MONTH};\n\ndef cap = getAggregationPeriod();\ndef errorInAggregation =\n    vwapTimeFrame == vwapTimeFrame.DAY and cap &gt;= AggregationPeriod.WEEK or\n    vwapTimeFrame== vwapTimeFrame.WEEK and cap &gt;= AggregationPeriod.MONTH;\nassert(!errorInAggregation, \&quot;timeFrame should be not less than current chart aggregation period\&quot;);\n\ndef yyyyMmDd = getYyyyMmDd();\ndef periodIndx;\nswitch (vwapTimeFrame) {\ncase DAY:\n    periodIndx = yyyyMmDd;\ncase WEEK:\n    periodIndx = Floor((daysFromDate(first(yyyyMmDd)) + getDayOfWeek(first(yyyyMmDd))) / 7);\ncase MONTH:\n    periodIndx = roundDown(yyyyMmDd / 100, 0);\n}\ndef isPeriodRolled = compoundValue(1, periodIndx != periodIndx[1], yes);\n\ndef volumeSum;\ndef volumeVwapSum;\ndef volumeVwap2Sum;\n\nif (isPeriodRolled) {\n    volumeSum = volume;\n    volumeVwapSum = volume * vwap;\n    volumeVwap2Sum = volume * Sqr(vwap);\n} else {\n    volumeSum = compoundValue(1, volumeSum[1] + volume, volume);\n    volumeVwapSum = compoundValue(1, volumeVwapSum[1] + volume * vwap, volume * vwap);\n    volumeVwap2Sum = compoundValue(1, volumeVwap2Sum[1] + volume * Sqr(vwap), volume * Sqr(vwap));\n}\ndef vWapprice = volumeVwapSum / volumeSum;\ndef deviation = Sqrt(Max(volumeVwap2Sum / volumeSum - Sqr(vWapprice), 0));\n\ndef VWAP = vWapprice;\n\n\n\ninput vwapCondition =no;\n#input vp=close;\ndef conVwapBuy =if  vwapCondition then  close &gt;= VWAp else 1;\n\n#####^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n\n#\n# FVE logic\n#\ndef bn = BarNumber();\ndef nan = double.NaN;\n\n\ninput maxVolumeCutOff = 2.5;\n###Coefficient used in calculation of “Cut Off” value. Lower values mean stronger damping of volume spikes###\n\nAssert(maxVolumeCutOff &gt; 0, \&quot;\'max volume cut off\' must be positive: \&quot; + maxVolumeCutOff);\n\ndef cutOff = 0.2 * StDev(Log(hlc3) - Log(hlc3[1]), 30) * close;\ndef hlcChange = hlc3 - hlc3[1];\ndef avgVolume = Average(volume, 30)[1];\ndef minVolume = Min(volume, avgVolume * maxVolumeCutOff);\ndef dirVolume = if hlcChange &gt; cutOff\n    then minVolume\n    else if hlcChange &lt; -cutOff\n        then -minVolume\n        else 0;\n\n\ndef mf = (close - (high+low)/2) + hlc3 - hlc3 [1];\ndef fveSum = Sum(dirVolume, Samples);\n\ndef fve = if bn &gt; Samples\n          then (fveSum / (Average(avgVolume, Samples) * Samples)) * 100\n          else nan;\n\n\n#\n# plots\n#\ndef pFVE = fve;\n\ndef pFVE_MA = MovingAverage(AverageType.SIMPLE, fve, 30);\n#pFVE_MA.SetDefaultColor(Color.Gray);\n#PFVE_MA.SetPaintingStrategy(PaintingStrategy.DASHES);\n\ndef zeroLine = 0;\ndef pFVE_Bull = if pFVE crosses above pFVE_MA then pFVE  else double.NaN ;\ndef pFVE_Bear = if pFVE &gt; pFVE_MA and pFVE[1] &gt; pFVE then pFVE else double.NaN ;\n\n#format plot \n\n#zeroLine.SetDefaultColor(Color.White);\n#pFVE.AssignValueColor(if pFVE &gt; pFVE_MA then color.green else color.red) ;\n#pFVE.SetLineWeight(3);\n\n\n#pFVE_Bull.SetPaintingStrategy(PaintingStrategy.SQUARES);\n#pFVE_Bull.SetLineWeight(5);\n#pFVE_Bull.SetDefaultColor(color.dark_green) ;\n\n#pFVE_Bear.SetPaintingStrategy(PaintingStrategy.SQUARES);\n#pFVE_Bear.SetLineWeight(5);\n#pFVE_Bear.SetDefaultColor(color.white) ;\n\n#AddCloud(pFVE, pFVE_MA, color.light_green, color.pink);\n\n\n\n#####################################################################################################################################################\n\n\n\n# Simple 2 Period RSI Trading Indicator\n# Assembled by BenTen at useThinkScript.com\n# You are free to use this code for personal use, and make derivative works from it. You are NOT GRANTED permission to use this code (or derivative works) for commercial purposes which includes and is not limited to selling, reselling, or packaging with other commercial indicators. Headers and attribution in this code should remain as provided, and any derivative works should extend the existing headers.\n\n#MACD\ninput price = close;\n#input length_macd = 14;\ninput displace = 0;\n#input showBreakoutSignals = no;\ninput crossingType = {default above, below};\n\ninput fastLength = 12;\ninput slowLength = 26;\ninput MACDLength = 9;\ndef fastAvg = Sum(volume * price, fastLength) / Sum(volume, fastLength);\ndef slowAvg = Sum(volume * price, slowLength) / Sum(volume, slowLength);\ndef Value = fastAvg - slowAvg;\ndef Avg = ExpAverage(Value, MACDLength);\ndef MACD_Diff  = Value - Avg;\n#def ZeroLine = 0;\n\n# RSI\ninput rsiLength = 14;\ninput overBought = 80;\ninput overSold = 28;\ninput rsiBuyLevel =40;\ninput averageType = AverageType.WILDERS;\ndef NetChgAvg = MovingAverage(averageType, price - price[1], RSIlength);\ndef TotChgAvg = MovingAverage(averageType, AbsValue(price - price[1]), RSIlength);\ndef ChgRatio = if TotChgAvg != 0 then NetChgAvg / TotChgAvg else 0;\ndef RSI = 50 * (ChgRatio + 1);\n#def OverSold = overSold;\n#def OverBought = overBought;\n\n#test\n#plot p= VWAp;#(period= AggregationPeriod.DAY);\n\n####################################\n\ndef cond_logic = if (def_cond) then MACD_Diff &lt;= 0 else yes;\n######\n#def sig_buy = Crosses(RSI(length = RSIlength, averageType = averageType).RSI, over_Sold, crossingType == crossingType.above) within RSI_prev bars and pFVE_Bull and cond_logic; # and Diff &lt;= 0;\ndef sig_buy = conVwapBuy and RSI&lt; rsiBuyLevel and pFVE_Bull  and cond_logic ;# and Diff &gt;= 0;\n#def sig_buy = pFVE_Bull and Diff &gt;= 0;\nplot signal_buy = sig_buy ;\n\n\ndef sig_sell = Crosses(RSI(length = RSIlength, averageType = averageType).RSI, overBought, crossingType == crossingType.below) within RSI_prev bars and pFVE_Bear ;\nplot signal_sell = sig_sell;\n\nsignal_buy.DefineColor(\&quot;Above\&quot;, Color.YELLOW);\nsignal_buy.DefineColor(\&quot;Below\&quot;, GetColor(8));\nsignal_buy.AssignValueColor(if crossingType == crossingType.above then signal_buy.Color(\&quot;Above\&quot;) else signal_buy.Color(\&quot;Below\&quot;));\nsignal_buy.setlineWeight(5);\nsignal_buy.SetPaintingStrategy(if crossingType == crossingType.above\n    then PaintingStrategy.BOOLEAN_ARROW_UP\n    else PaintingStrategy.BOOLEAN_ARROW_DOWN);\n\nsignal_sell.DefineColor(\&quot;Above\&quot;, Color.VIOLET);\nsignal_sell.DefineColor(\&quot;Below\&quot;, GetColor(8));\nsignal_sell.AssignValueColor(if crossingType == crossingType.above then signal_sell.Color(\&quot;Above\&quot;) else signal_sell.Color(\&quot;Below\&quot;));\n\nsignal_sell.SetPaintingStrategy(if crossingType == crossingType.above\n    then PaintingStrategy.BOOLEAN_ARROW_DOWN\n    else PaintingStrategy.BOOLEAN_ARROW_UP);\nsignal_sell.setlineWeight(5);\ninput bubble =no; \nAddChartBubble(bubble and sig_sell == 1, price, \&quot;S= \&quot; + price + \&quot; rsi \&quot; + RSI, Color.VIOLET, no);&quot;,name=&quot;_259d509b_f440_4edf_840b_2df1df75ab8c&quot;}){inputsMap:TreeMap0{^(&quot;price&quot;,&quot;CLOSE&quot;),!get:Integer0(&quot;rsiBuyLevel&quot;),!get:Integer1(&quot;fastLength&quot;)},inputsMap=@TreeMap0}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;input price = close;\ninput displace = 0;\ninput length = 20;\ninput Num_Dev_Dn = -2.0;\ninput Num_Dev_up = 2.0;\ninput averageType = AverageType.Simple;\ninput showCloud= yes;\n\ndef sDev = stdev(data = price[-displace], length = length);\n\nplot MidLine = MovingAverage(averageType, data = price[-displace], length = length);\nplot LowerBand = MidLine + num_Dev_Dn * sDev;\nplot UpperBand = MidLine + num_Dev_Up * sDev;\n\nLowerBand.SetDefaultColor(GetColor(0));\nMidLine.SetDefaultColor(GetColor(1));\nUpperBand.SetDefaultColor(GetColor(5));\n\n#############################\ndef Na = Double.NaN;\n\ndef cloudhigh = If( ShowCloud, UpperBand, Na);\ndef cloudlow  = If(ShowCloud, LowerBand, Na);\n#AddCloud(cloudhigh, cloudlow, Color.GRAY, Color.GRAY);\n\n\nAddCloud(cloudhigh, Midline, Color.Green, Color.light_Green);\nAddCloud(cloudlow, Midline, Color.Red, Color.light_Red);\n\n\n####$$$$$$$$\n\n\ninput priceSlm = close;\n\ninput superFastLength = 8;\n\ninput fastLengthSlm = 13;\n\ninput slowLengthSlm = 21;\n\n\n\n\ninput averageTypeSlm = AverageType.EXPONENTIAL;\n\ndef mov_avg8 = MovingAverage(averageTypeSlm, priceSlm[-displace], superFastLength);\n\ndef mov_avg13 = MovingAverage(averageTypeSlm, priceSlm[-displace], fastLengthSlm);\n\ndef mov_avg21 = MovingAverage(averageTypeSlm, priceSlm[-displace], slowLengthSlm);\n \n#moving averages\n\ndef Superfast = mov_avg8;\n\ndef Fast = mov_avg13;\n\ndef Slow = mov_avg21;\n\n\ndef buy = mov_avg8 &gt; mov_avg13 and mov_avg13 &gt; mov_avg21 and low &gt; mov_avg8;\n\ndef stopbuy = mov_avg8 &lt;= mov_avg13;\n\ndef buynow = !buy[1] and buy;\n\ndef buysignal = CompoundValue(1, if buynow and !stopbuy then 1 else if buysignal[1] == 1 and stopbuy then 0 else buysignal[1], 0);\n\n\ndef Buy_Signal = buysignal[1] == 0 and buysignal == 1;\n\ndef Momentum_Down = buysignal[1] == 1 and buysignal == 0;\n\n\ndef sell = mov_avg8 &lt; mov_avg13 and mov_avg13 &lt; mov_avg21 and high &lt; mov_avg8;\n\ndef stopsell = mov_avg8 &gt;= mov_avg13;\n\ndef sellnow = !sell[1] and sell;\n\ndef sellsignal = CompoundValue(1, if sellnow and !stopsell then 1 else if sellsignal[1] == 1 and stopsell then 0 else sellsignal[1], 0);\n\n\ndef Sell_Signal = sellsignal[1] == 0 and sellsignal;\n\ndef Momentum_Up = sellsignal[1] == 1 and sellsignal == 0;\n \n# when using this as a custom scan, change the word plot to def\n# then remove the \'#\' from in front of one of the \&quot;plot Scan\&quot; statements below\ndef Colorbars = if buysignal == 1 then 1 else if sellsignal == 1 then -1 else if buysignal == 0 or sellsignal == 0 then 0 else 0;\n\n# use this first Scan plot for SLM Ribbon Momentum UP\n#plot Scan = if Colorbars == 1 then yes else no;\n\n# use this second Scan plot for SLM Ribbon Momentum DOWN\n#plot Scan = if Colorbars == -1 then yes else no;\n\n\n\n\n\n\n###############\n\ndef Colorbars1 = if buysignal == 1 then 1 else if sellsignal == 1 then 2 else if buysignal == 0 or sellsignal == 0 then 3 else 0;\n\ninput lengthHma = 20;\n\ndef HMA = MovingAverage(AverageType.HULL, price, lengthHma);\ndef HMA_Up=  HMA &gt; HMA[1];\ndef HMA_Down =! HMA_UP;\n\n###############\n\n#def Colorbars1 = if buysignal == 1 then 1 else if sellsignal == 1 then 2 else if buysignal == 0 or sellsignal == 0 then 3 else 0;\n\n\n\nMidLine.definecolor(\&quot;Buy\&quot;, color.dark_green);\n\n\nMidLine.definecolor(\&quot;Sell\&quot;, color.red);\n\nMidLine.definecolor(\&quot;Neutral\&quot;, Color.PLUM);\n#MidLine.definecolor(\&quot;NeutralDown\&quot;, Color.orange);\nMidLine.definecolor(\&quot;HullMA_up\&quot;, color.blue);\n\nMidLine.definecolor(\&quot;HullMA_down\&quot;, color.orange);\n\nMidLine.AssignValueColor(if buysignal and HMA_Up then MidLine.color(\&quot;Buy\&quot;) else if buysignal and !HMA_Up then MidLine.color(\&quot;HullMA_down\&quot;) else if sellsignal and HMA_Down  then MidLine.color(\&quot;Sell\&quot;) else  if sellsignal and !HMA_Down  then MidLine.color(\&quot;HullMA_up\&quot;) else  MidLine.color(\&quot;neutral\&quot;));;#\n# if Momentum_Up then  RSI.color(\&quot;neutralUp\&quot;) else  RSI.color(\&quot;neutraldown\&quot;));\n\n\n\n\n\n\n\n#MidLine.definecolor(\&quot;Buy_Signal_Bars\&quot;, color.dark_green);\n\n#MidLine.definecolor(\&quot;Sell_Signal_Bars\&quot;, color.red);\n\n#MidLine.definecolor(\&quot;NeutralUp\&quot;, color.plum);\n\n#MidLine.definecolor(\&quot;NeutralDown\&quot;, color.orange);\n\n#MidLine.AssignValueColor(if Colorbars1 ==1 then MidLine.color(\&quot;buy_signal_bars\&quot;) else if colorbars1 ==2 then #MidLine.color(\&quot;Sell_Signal_bars\&quot;) else if Momentum_Up then  MidLine.color(\&quot;neutralUp\&quot;) else MidLine.color(\&quot;neutralDown\&quot;) );\n\n\nplot UpSignal = if (buysignal and price crosses above MidLine) then LowerBand else Double.NaN;\nplot DownSignal = if (sellsignal and price crosses below MidLine) then UpperBand else Double.NaN;\ninput showBreakoutSignals =no;\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\n\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\n\n\n\nMidLine.setlineWeight(3);\n\n\n\n\n\n\n######$$$$&quot;,name=&quot;_cbc1e041_e9b4_4664_b964_97e197ec9dfd&quot;}){hidden=&lt;T,inputsMap:TreeMap1{^(&quot;price&quot;,&quot;CLOSE&quot;),^(&quot;priceSlm&quot;,&quot;CLOSE&quot;),!get:Integer2(&quot;fastLengthSlm&quot;)},inputsMap=@TreeMap1}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;## START STUDY\n## Anchored_VWAP_STOPS\n## linus, 2014-03-10, v0.1\n \n#hint: VWAP stops anchored off FractalTrader pivots.\n \n#hint n: Lookback period for finding swing highs, lows.\ninput n = 10;\n \n#hint ticks: Offset VWAP lines by this number of ticks.\ninput ticks = 2.0;\n \ndef bnOK = barNumber() &gt; n;\n \ndef isHigher = fold i = 1 to n + 1 with p = 1 \n               while p do high &gt; GetValue(high, -i);\n \ndef HH = if bnOK and isHigher \n         and high == Highest(high, n) \n         then high else Double.NaN;\n \ndef isLower = fold j = 1 to n + 1 with q = 1\n              while q do low &lt; GetValue(low, -j);\n \ndef LL = if bnOK and isLower \n         and low == Lowest(low, n) \n         then low else Double.NaN;\n \ndef PivH = if HH &gt; 0 then HH else Double.NaN;\ndef PivL = if LL &gt; 0 then LL else Double.NaN;\n \nrec dir = compoundValue(1, if !isNaN(PivL) then 1 else if !isNaN(PivH) then -1 else dir[1], 0);\n \nplot Up = dir crosses above 0;\nUp.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nUp.SetLineWeight(3);\nUp.SetDefaultColor(Color.WHITE);\n \nplot Dn = dir crosses below 0;\nDn.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);\nDn.SetLineWeight(3);\nDn.SetDefaultColor(Color.ORANGE);\n \ndef LocH = (high + (tickSize() * ticks)) * volume;\ndef LocL = (low - (tickSize() * ticks)) * volume;\nrec PH;\nrec VH;\nrec PL;\nrec VL;\n \nif Dn {\n    PH = LocH;\n    VH = volume;    \n} else {\n    PH = compoundValue(1, LocH + PH[1], Double.NaN);\n    VH = compoundValue(1, volume + VH[1], Double.NaN);\n}\nif Up  {\n    PL = LocL;\n    VL = volume;\n} else {\n    PL = compoundValue(1, LocL + PL[1], Double.NaN);\n    VL = compoundValue(1, volume + VL[1], Double.NaN);\n}\n \nplot VwapH = if Dn then Double.NaN else PH / VH;\nplot VwapL = if Up then Double.NaN else PL / VL;\n \nVwapH.SetDefaultColor(Color.DARK_RED);\nVwapL.SetDefaultColor(Color.Yellow);\nvwapH.setlineWeight(5);\nvwapL.setlineWeight(5);\n \n## END STUDY\n \n#Note: /ES 5m chart of the Anchored_VWAP_STOPS study.\n&quot;,name=&quot;_163cc979_a667_47d6_b9c2_0327d28018bc&quot;}){hidden=&lt;T}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;## START STUDY\n## Anchored_VWAP2\n## linus, 2014-03-10, v0.1\n\n#10:24 linus: it carries over the previous pivot\'s lines for high, low and close. (it plots vwaps of the high, low and close that are reset each time a new pivot is found.)\n#10:25 linus: i wrote it to experiment with vwap as stops. (the high and low vwaps that can be offset by the ticks input.)\n#10:25 linus: but it should serve as an example of how to reset the vwaps based on a signal.\n#10:35 linus: #hint: VWAP stops anchored off  fractalTrader pivots.\n#10:37 linus: the code calculates the pivots as PivH and PivL, and then restarts the high, low and close vwaps when it finds a new pivot.  Otherwise it continues to calculate the high, low and close vwaps.\n#10:37 linus: the dashed vwap plots are the saved from the previous pivot, and the solid vwap plots are since the last pivot.\n\n\n#hint: VWAP stops anchored off  fractalTrader pivots.\n\n#hint n: Lookback period for finding swing highs, lows.\ninput n = 20;\n\n#hint ticks: Offset High/Low VWAP lines by this number of ticks.\ninput ticks = 2.0;\n\ndef bnOK = barNumber() &gt; n;\n\ndef isHigher = fold i = 1 to n + 1 with p = 1 \n               while p do high &gt; GetValue(high, -i);\n\ndef HH = if bnOK and isHigher \n         and high == Highest(high, n) \n         then high else Double.NaN;\n\ndef isLower = fold j = 1 to n + 1 with q = 1\n              while q do low &lt; GetValue(low, -j);\n\ndef LL = if bnOK and isLower \n         and low == Lowest(low, n) \n         then low else Double.NaN;\n\ndef PivH = if HH &gt; 0 then HH else Double.NaN;\ndef PivL = if LL &gt; 0 then LL else Double.NaN;\n\nplot Up = !isNaN(PivL);\nUp.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nUp.SetLineWeight(3);\nUp.SetDefaultColor(Color.WHITE);\n\nplot Dn = !isNaN(PivH);\nDn.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);\nDn.SetLineWeight(3);\nDn.SetDefaultColor(Color.ORANGE);\n\ndef LocH = (high + (tickSize() * ticks)) * volume;\ndef LocL = (low - (tickSize() * ticks)) * volume;\ndef LocC = close * volume;\n\nrec PC;\nrec VC;\nrec PC2;\nrec VC2;\nrec PH;\nrec VH;\nrec PL;\nrec VL;\nrec PH2;\nrec VH2;\nrec PL2;\nrec VL2;\n\nif Dn or Up {\n    PC = LocC;\n    VC = volume;\n    PC2 = PC[1];\n    VC2 = VC[1];\n} else {\n    PC = compoundValue(1, LocC + PC[1], Double.NaN);\n    VC = compoundValue(1, volume + VC[1], Double.NaN);\n    PC2 = compoundValue(1, LocC + PC2[1], Double.NaN);\n    VC2 = compoundValue(1, volume + VC2[1], Double.NaN);\n}\n\nif Dn {\n    PH = LocH;\n    VH = volume;\n    PH2 = PH[1];\n    VH2 = VH[1];\n} else {\n    PH = compoundValue(1, LocH + PH[1], Double.NaN);\n    VH = compoundValue(1, volume + VH[1], Double.NaN);\n    PH2 = compoundValue(1, LocH + PH2[1], Double.NaN);\n    VH2 = compoundValue(1, volume + VH2[1], Double.NaN);\n}\nif Up  {\n    PL = LocL;\n    VL = volume;\n    PL2 = PL[1];\n    VL2 = VL[1];\n} else {\n    PL = compoundValue(1, LocL + PL[1], Double.NaN);\n    VL = compoundValue(1, volume + VL[1], Double.NaN);\n    PL2 = compoundValue(1, LocL + PL2[1], Double.NaN);\n    VL2 = compoundValue(1, volume + VL2[1], Double.NaN);\n}\n\nplot VwapC = if Dn or Up then Double.NaN else PC / VC;\nplot VwapC2 = if Dn or Up then Double.NaN else PC2 / VC2;\nplot VwapH = if Dn then Double.NaN else PH / VH;\nplot VwapL = if Up then Double.NaN else PL / VL;\nplot VwapH2 = if Dn then Double.NaN else PH2 / VH2;\nplot VwapL2 = if Up then Double.NaN else PL2 / VL2;\n\nVwapC.SetDefaultColor(Color.YELLOW);\nVwapC.SetLineWeight(2);\nVwapC.HideBubble();\n\nVwapC2.SetDefaultColor(Color.YELLOW);\nVwapC2.SetLineWeight(2);\nVwapC2.SetStyle(Curve.SHORT_DASH);\nVwapC2.HideBubble();\n\nVwapH.SetDefaultColor(Color.DARK_RED);\nVwapH.HideBubble();\n\nVwapL.SetDefaultColor(Color.DARK_GREEN);\nVwapL.HideBubble();\n\nVwapH2.SetDefaultColor(Color.DARK_RED);\nVwapH2.SetStyle(Curve.SHORT_DASH);\nVwapH2.HideBubble();\n\nVwapL2.SetDefaultColor(Color.DARK_GREEN);\nVwapL2.SetStyle(Curve.SHORT_DASH);\nVwapL2.HideBubble();\n\n## END STUDY\n&quot;,name=&quot;_169b5427_c15c_4df4_97a4_78b992191cf3&quot;}){hidden=&lt;T}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# @new\n# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2009-2021\n#\n# Source code isn\'t available.\n\nplot slowAvg = Double.NaN;\nplot fastAvg = Double.NaN;\nplot BuySignal = Double.NaN;\nplot SellSignal = Double.NaN;&quot;,name=&quot;PPS&quot;}){hidden=&lt;T}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# OBV/OBV_MA  by MerryDay 5/24/20\n#When the OBV (On Balance Volume) crosses OBV’s 20-period moving average, the divergence signal of a trend reversal is confirmed. While research indicates a default of 20 is norm, I have been using a 34 period.  The difference is slight.\n# If the OBV is greater than the OBV ma then a green cloud appears under the OBV.\n\n#declare lower;\ninput priceSupperFast = HLC3;\ninput priceFast = close;\ninput priceSlow = close;\n\ninput superfast_length = 4;\ninput fast_length = 7;\ninput slow_length =14;\ninput obv_length =14;\ninput displace = 0;\ninput averageTypeSuperfast = AverageType.simple;\ninput averageTypefast = AverageType.simple;\ninput averageTypeSlow = AverageType.EXPONENTIAL;\n\n\ndef mov_avg_superFast = MovingAverage(averageTypeSuperfast, priceSupperFast[-displace], superfast_length);\ndef mov_avg_Fast = MovingAverage(averageTypefast, priceFast[-displace], fast_length);\ndef mov_avg_Slow = MovingAverage(averageTypeSlow, priceSlow[-displace], slow_length);\n\n \n\n\n \n\n#moving averages\n\nPlot Superfast = mov_avg_superFast;\n\nplot Fast = mov_avg_Fast;\n\nplot Slow = mov_avg_Slow;\nSuperfast.setdefaultColor(color.cyan);\nFast.setdefaultColor(color.gray);\nSlow.setdefaultColor(color.blue);\n\n\n \n\ndef buy = mov_avg_superFast &gt; mov_avg_Fast and mov_avg_Fast &gt; mov_avg_Slow and low &gt; mov_avg_superFast;\n\ndef stopbuy = mov_avg_superFast &lt;= mov_avg_Fast;\n\ndef buynow = !buy[1] and buy;\n\ndef buysignal = CompoundValue(1, if buynow and !stopbuy then 1 else if buysignal[1]==1 and stopbuy then 0 else buysignal[1], 0);\n\n \n\nplot Buy_Signal = buysignal[1] == 0 and buysignal==1;\n\nBuy_signal.setpaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\n\nBuy_signal.setdefaultColor(color.dark_GREEN);\n\nBuy_signal.hidetitle();\n\n#Alert(condition = buysignal[1] == 0 and buysignal == 1, text = \&quot;Buy Signal\&quot;, sound = Sound.Bell, \&quot;alert type\&quot; = Alert.BAR);\n\n \n\nplot Momentum_Down = buysignal[1] ==1 and buysignal==0;\n\nMomentum_down.setpaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);\n\nMomentum_Down.setdefaultColor(color.plum);\n\nMomentum_down.hidetitle();\n\n#Alert(condition = buysignal[1] == 1 and buysignal == 0, text = \&quot;Momentum_Down\&quot;, sound = Sound.Bell, \&quot;alert type\&quot; = Alert.BAR);\n\n \n\ndef sell = mov_avg_superFast &lt; mov_avg_Fast and mov_avg_Fast &lt; mov_avg_Slow and high &lt; mov_avg_superFast;\n\ndef stopsell = mov_avg_superFast &gt;= mov_avg_Fast;\n\ndef sellnow = !sell[1] and sell;\n\ndef sellsignal = CompoundValue(1, if sellnow and !stopsell then 1 else if sellsignal[1]==1 and stopsell then 0 else sellsignal[1], 0);\n\n \n\nPlot Sell_Signal = sellsignal[1] ==0 and sellsignal;\n\nSell_signal.setpaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_down);\n\nsell_signal.setDefaultColor(color.red);\n\nSell_signal.hidetitle();\n\n#Alert(condition = sellsignal[1] == 0 and sellsignal == 1, text = \&quot;Sell Signal\&quot;, sound = Sound.Bell, \&quot;alert type\&quot; = Alert.BAR);\n\n \n\nPlot Momentum_Up = sellsignal[1]==1 and sellSignal==0;\n\nMomentum_up.setpaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_up);\n\nMomentum_up.setDefaultColor(color.plum);\n\nMomentum_up.hidetitle();\n\n\n\n\n#input length = 20; #default = 20\n#input price =hlc3;\n\nplot OBV = TotalSum(Sign(priceSlow - priceSlow[1]) * volume);\nplot OBVma = Average(OBV, obv_length);;#MovingAverage(averageTypeSlow, OBV[-displace], slow_length);#\n\ndef aboveMA   = OBV &gt;= OBVma ;\n\n\n## LIPSTICK ##\nDefineGlobalColor(\&quot;LabelGreen\&quot;, CreateColor(0, 190, 0)) ;\nDefineGlobalColor(\&quot;PaleGreen\&quot;, CreateColor(180, 220, 180)) ;\nDefineGlobalColor(\&quot;PaleRed\&quot;, CreateColor (220, 200, 200)) ;\nDefineGlobalColor(\&quot;DullGold\&quot;, CreateColor(220, 220, 128)) ;\nDefineGlobalColor(\&quot;BlueJeans\&quot;, CreateColor(0, 150, 200)) ;\nOBVma.SetDefaultColor(GlobalColor(\&quot;DullGold\&quot;));\nOBVma.SetLineWeight(3);\nOBVma.HideBubble();\nOBVma.HideTitle();\n\nOBV.SetPaintingStrategy(PaintingStrategy.LINE_VS_TRIANGLES);\nOBV.SetLineWeight(2);\nOBV.HideBubble();\nOBV.HideTitle();\nOBV.DefineColor(\&quot;Up\&quot;, GlobalColor(\&quot;LabelGreen\&quot;));\nOBV.DefineColor(\&quot;Weak\&quot;, Color.LIGHT_GRAY);\nOBV.DefineColor(\&quot;Down\&quot;, GlobalColor(\&quot;PaleRed\&quot;));\nOBV.AssignValueColor(if OBV &gt; OBVma  then OBV.Color(\&quot;Up\&quot;) else OBV.Color(\&quot;Down\&quot;));\n\nplot OBVlow = if  OBV crosses below OBVma then 1 else 0;\nOBVlow.hide();\n\nplot crossup = if OBV crosses above OBVma and fast&gt;=slow  then priceSlow else double.NaN;\ncrossup.HideBubble() ;\ncrossup.HideTitle() ;\ncrossup.SetPaintingStrategy(PaintingStrategy.TRIANGLES);\ncrossup.SetLineWeight(5);\ncrossup.SetDefaultColor(color.blue) ;\nplot crossdown = if OBV crosses below OBVma and fast&lt;=slow then priceSlow else double.NaN;\ncrossdown.HideBubble() ;\ncrossdown.HideTitle() ;\ncrossdown.SetPaintingStrategy(PaintingStrategy.TRIANGLES);\ncrossdown.SetLineWeight(5);\ncrossdown.SetDefaultColor(color.pink) ;\n\n#AddCloud(OBV, OBVma, Color.LIGHT_GREEN, Color.PINK);\n\n#Alert(crosses_above_MA, \&quot;What\'s going to happen?\&quot; + GetSymbol(), Alert.BAR, Sound.bell);\nDefineGlobalColor(\&quot;MyCyan\&quot;, CreateColor(150, 0, 255)) ;\nDefineGlobalColor(\&quot;Sell\&quot;, CreateColor(255, 150, 0)) ;\n\n\n# End of OBV/OBV_MA &quot;,name=&quot;_261b5963_24e6_4aa3_8280_cc2c101883c0&quot;}){hidden=&lt;T,inputsMap:TreeMap2{^(&quot;priceFast&quot;,&quot;CLOSE&quot;),^(&quot;priceSlow&quot;,&quot;CLOSE&quot;),^(&quot;priceSupperFast&quot;,&quot;(H+L+C)/3&quot;),!get:Integer3(&quot;fast_length&quot;)},inputsMap=@TreeMap2,plots{0:{hiding=&lt;T},1:{hiding=&lt;T},2:{hiding=&lt;T},3:{hiding=&lt;T},4:{hiding=&lt;T},5:{hiding=&lt;T},6:{hiding=&lt;T},7:{hiding=&lt;T},8:{hiding=&lt;T},10:{paintingStrategy=10},11:{paintingStrategy=9}}}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# @new\n# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2011-2021\n#\n\ninput numDevDn = -2.0;\ninput numDevUp = 2.0;\ninput timeFrame = {default DAY, WEEK, MONTH};\n\ndef cap = getAggregationPeriod();\ndef errorInAggregation =\n    timeFrame == timeFrame.DAY and cap &gt;= AggregationPeriod.WEEK or\n    timeFrame == timeFrame.WEEK and cap &gt;= AggregationPeriod.MONTH;\nassert(!errorInAggregation, \&quot;timeFrame should be not less than current chart aggregation period\&quot;);\n\ndef yyyyMmDd = getYyyyMmDd();\ndef periodIndx;\nswitch (timeFrame) {\ncase DAY:\n    periodIndx = yyyyMmDd;\ncase WEEK:\n    periodIndx = Floor((daysFromDate(first(yyyyMmDd)) + getDayOfWeek(first(yyyyMmDd))) / 7);\ncase MONTH:\n    periodIndx = roundDown(yyyyMmDd / 100, 0);\n}\ndef isPeriodRolled = compoundValue(1, periodIndx != periodIndx[1], yes);\n\ndef volumeSum;\ndef volumeVwapSum;\ndef volumeVwap2Sum;\n\nif (isPeriodRolled) {\n    volumeSum = volume;\n    volumeVwapSum = volume * vwap;\n    volumeVwap2Sum = volume * Sqr(vwap);\n} else {\n    volumeSum = compoundValue(1, volumeSum[1] + volume, volume);\n    volumeVwapSum = compoundValue(1, volumeVwapSum[1] + volume * vwap, volume * vwap);\n    volumeVwap2Sum = compoundValue(1, volumeVwap2Sum[1] + volume * Sqr(vwap), volume * Sqr(vwap));\n}\ndef price = volumeVwapSum / volumeSum;\ndef deviation = Sqrt(Max(volumeVwap2Sum / volumeSum - Sqr(price), 0));\n\nplot VWAP = price;\nplot UpperBand = price + numDevUp * deviation;\nplot LowerBand = price + numDevDn * deviation;\n\nVWAP.setDefaultColor(getColor(0));\nUpperBand.setDefaultColor(getColor(2));\nLowerBand.setDefaultColor(getColor(4));&quot;,name=&quot;VWAP&quot;}){hidden=&lt;T,inputsMap:TreeMap3{^(&quot;timeFrame&quot;,&quot;WEEK&quot;)},inputsMap=@TreeMap3,plots{0:{lineStyle=3},1:{color=@CustomColor0,lineStyle=3},2:{color=@CustomColor0,lineStyle=3}}}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;#start\n\n#hint: &lt;b&gt;Ask SLM Ribbon&lt;/b&gt;\\nThe Ask SLM Ribbon is a momentum indicator that uses a combination of three exponential moving averages. When the averages are in alinement, with the \&quot;superfast\&quot; moving average above the \&quot;fast\&quot; moving average and the fast moving average above the \&quot;slow\&quot; moving average, the momentum condition is positive. A \&quot;buy signal\&quot; is generated, with an up arrow, when above conditions are met and a \&quot;clear bar\&quot; occurs; with the low of that bar is above all of the moving averages. The positive momentum ends if the superfast moving average touches the fast moving average; then condition is considered neutral and an oppostive arrow will appear. Negative momentum and a \&quot;Sell signal\&quot; are the opposite of the bullish conditions. \\n \\n\\n--------------------------------------------------------------------------------\\nVolume bars can be colored to match the Chart by clicking on Style&gt;Settings&gt;Appearance&gt;Common, and color symbol as ticks  \\n\n\n\n# Variables:\n\n \n\n#input price = close;\ninput color_bars=no;\n\ninput useHeikinAshi =no;\n\ninput superfast_length = 4;\n\ninput fast_length = 7;\n\ninput slow_length =17;\n\n\ninput displace = 0;\ninput averageTypeSuperfast = AverageType.simple;\ninput averageTypefast = AverageType.simple;\ninput averageTypeSlow = AverageType.EXPONENTIAL;\n\ndef priceSupperFast ;\ndef priceFast ;\ndef priceSlow ;\n#Heikin Ashi\ndef haClose = (open+high+low+close)/4; #Heikin Ashi Close: The arithmetic mean of the current high, low, open, and close prices.\ndef haOpen = (haOpen[1] + haClose[1])/2  ;# Heikin Ashi Open: The midpoint of the previous candle.\ndef haHigh = max(high, max( haOpen, haClose) ) ;#Heikin Ashi High: The highest of the following: the actual high, the Heikin Ashi Open, or the Heikin Ashi Close.\ndef haLow = Min(low,min( haOpen, haClose));# Heikin Ashi Low: The lowest of the following: the actual low, the Heikin Ashi Open, or the Heikin Ashi Close.\n\nif useHeikinAshi \n\n then\n {\n  priceSupperFast = (haHigh +haLow+ haclose)/3;\n  priceFast = haclose;\n  priceSlow = haclose;\n }\nelse\n {\n  priceSupperFast = HLC3;\n  priceFast = close;\n  priceSlow = close;\n }\n\n\n\ndef mov_avg_superFast = MovingAverage(averageTypeSuperfast, priceSupperFast[-displace], superfast_length);\ndef mov_avg_Fast = MovingAverage(averageTypefast, priceFast[-displace], fast_length);\ndef mov_avg_Slow = MovingAverage(averageTypeSlow, priceSlow[-displace], slow_length);\n\n#moving averages\nPlot Superfast = mov_avg_superFast;\nplot Fast = mov_avg_Fast;\nplot Slow = mov_avg_Slow;\nSuperfast.setdefaultColor(color.yellow);\nFast.setdefaultColor(color.cyan);\nSlow.setdefaultColor(color.blue);\n\n\n \n\ndef buy = mov_avg_superFast &gt; mov_avg_Fast and mov_avg_Fast &gt; mov_avg_Slow and hlc3 &gt; mov_avg_superFast;\n\ndef stopbuy = mov_avg_superFast &lt;= mov_avg_Fast or  hlc3 &lt; mov_avg_Fast;\n\ndef buynow = !buy[1] and buy;\n\ndef buysignal = CompoundValue(1, if buynow and !stopbuy then 1 else if buysignal[1]==1 and stopbuy then 0 else buysignal[1], 0);\n\n \n\nplot Buy_Signal = buysignal[1] == 0 and buysignal==1;\nBuy_signal.setpaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nBuy_signal.setdefaultColor(color.dark_GREEN);\nBuy_signal.hidetitle();\n#Alert(condition = buysignal[1] == 0 and buysignal == 1, text = \&quot;Buy Signal\&quot;, sound = Sound.Bell, \&quot;alert type\&quot; = Alert.BAR);\n\nplot Momentum_Down = buysignal[1] ==1 and buysignal==0;\nMomentum_down.setpaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);\nMomentum_Down.setdefaultColor(color.plum);\nMomentum_down.hidetitle();\n\n#Alert(condition = buysignal[1] == 1 and buysignal == 0, text = \&quot;Momentum_Down\&quot;, sound = Sound.Bell, \&quot;alert type\&quot; = Alert.BAR);\ndef sell = mov_avg_superFast &lt; mov_avg_Fast and mov_avg_Fast &lt; mov_avg_Slow and high &lt; mov_avg_superFast;\ndef stopsell = mov_avg_superFast &gt;= mov_avg_Fast or  close &gt; mov_avg_Fast;;\n\ndef sellnow = !sell[1] and sell;\n\ndef sellsignal = CompoundValue(1, if sellnow and !stopsell then 1 else if sellsignal[1]==1 and stopsell then 0 else sellsignal[1], 0);\n\n \n\nPlot Sell_Signal = sellsignal[1] ==0 and sellsignal;\n\nSell_signal.setpaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_down);\n\nsell_signal.setDefaultColor(color.red);\n\nSell_signal.hidetitle();\n\n#Alert(condition = sellsignal[1] == 0 and sellsignal == 1, text = \&quot;Sell Signal\&quot;, sound = Sound.Bell, \&quot;alert type\&quot; = Alert.BAR);\n\n \n\nPlot Momentum_Up = sellsignal[1]==1 and sellSignal==0;\n\nMomentum_up.setpaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_up);\n\nMomentum_up.setDefaultColor(color.plum);\n\nMomentum_up.hidetitle();\n\n#Alert(condition = sellsignal[1] == 1 and sellSignal == 0, text = \&quot;Momentum_Up\&quot;, sound = Sound.Bell, \&quot;alert type\&quot; = Alert.BAR);\ninput priceHma = close;\n input lengthHma = 20;\n\ndef HMA = MovingAverage(AverageType.HULL, priceHma, lengthHma);\ndef HMA_Up=  HMA &gt; HMA[1];\ndef HMA_Down =! HMA_UP;\n\nplot Colorbars = if buysignal and HMA_Up then 1 else if  buysignal and !HMA_Up then  2 else if sellsignal and HMA_Down then 3  else if sellsignal and !HMA_Down then  4 else if !buysignal or !sellsignal then 5 else 0;\n\ncolorbars.setHiding(1);\n\nColorbars.definecolor(\&quot;Buy\&quot;, color.dark_green);\n\nColorbars.definecolor(\&quot;Sell\&quot;, color.red);\n\nColorbars.definecolor(\&quot;Neutral\&quot;, color.plum);\nColorbars.definecolor(\&quot;HullMA_up\&quot;, color.blue);\n\nColorbars.definecolor(\&quot;HullMA_down\&quot;, color.orange);\n\n\n\n\n\n\n\n\n###############\n\n#def Colorbars1 = if buysignal == 1 then 1 else if sellsignal == 1 then 2 else if buysignal == 0 or sellsignal == 0 then 3 else 0;\n\n\n\n\n\n\n\n\n \n\nAssignPriceColor(if Colorbars ==1 and color_bars then colorbars.color(\&quot;Buy\&quot;) else if colorbars ==2 and color_bars  then colorbars.color(\&quot;HullMA_down\&quot;) else if colorbars ==3 and color_bars  then colorbars.color(\&quot;Sell\&quot;)  else if colorbars ==4 and color_bars  then colorbars.color(\&quot;HullMA_up\&quot;)else if color_bars  then colorbars.color(\&quot;neutral\&quot;) else  Color.CURRENT);\n\n#end&quot;,name=&quot;_f0b875df_d13b_465c_aa4b_eb86cf6026c9&quot;}){inputsMap:TreeMap4{^(&quot;lengthHma&quot;,17),^(&quot;priceHma&quot;,&quot;CLOSE&quot;),^(&quot;slow_length&quot;,@Integer2)},inputsMap=@TreeMap4,plots{3:{color=@CustomColor1,lineWeight=3}}}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# OvernightHiLowLines_mobius_jq\n# GlobeX or Overnight High / Low without Fibonacci Values \n# Based on code by Mobius # V01.2012 \n# cosmetic alterations by Johnny Quotron\n#    1. removal of fib lines\n#    2. paint ONL bubble below the line\n#    3. addition of other comments\n#    4. addition of bubbles in the expansion area if desired\n#\n# Restrictions:  Hi / Low lines are not drawn for non-traded indicies such as VIX or TNX..JQ\n\ndeclare hide_on_daily;\ninput PlotOverNightExtremes = yes;\ninput DisplayPriceBubbleOnHiLowBar = yes;\ninput DisplayPriceBubbleOnRightEdge = yes;  #Haven\'t figured this out yet..JQ\n\ndef o = open;\ndef h = high;\ndef l = low;\ndef c = close;\ndef v = volume;\ndef bar = BarNumber();\ndef GlobeX = GetTime() &lt; RegularTradingStart(GetYYYYMMDD());\n\ndef vol = if GlobeX and !GlobeX[1]\nthen v\nelse if GlobeX\nthen vol[1] + v\nelse Double.NaN;\n\ndef GlobeX_Volume = vol;\n\ndef ONhigh = if GlobeX and !GlobeX[1]\nthen h\nelse if GlobeX and\nh &gt; ONhigh[1]\nthen h\nelse ONhigh[1];\n\ndef ONhighBar = if GlobeX and h == ONhigh\nthen bar\nelse Double.NaN;\n\ndef ONlow = if GlobeX and !GlobeX[1]\nthen l\nelse if GlobeX and\nl &lt; ONlow[1]\nthen l\nelse ONlow[1];\n\ndef ONlowBar = if GlobeX and l == ONlow\nthen bar\nelse Double.NaN;\n\ndef OverNightHigh = if BarNumber() == HighestAll(ONhighBar)\nthen ONhigh\nelse OverNightHigh[1];\n\ndef OverNightLow = if BarNumber() == HighestAll(ONlowBar)\nthen ONlow\nelse OverNightLow[1];\n\n\n#\nplot ONH = if OverNightHigh &gt; 0\nthen OverNightHigh\nelse Double.NaN;\n\nONH.SetHiding(!PlotOverNightExtremes);\nONH.SetPaintingStrategy(PaintingStrategy.SQUARES);\nONH.SetDefaultColor(Color.BLUE);\nONH.HideBubble();\nONH.HideTitle();\n\n#\nplot ONL = if OverNightLow &gt; 0 \nthen OverNightLow\nelse Double.NaN;\n\nONL.SetHiding(!PlotOverNightExtremes);\nONL.SetPaintingStrategy(PaintingStrategy.SQUARES);\nONL.SetDefaultColor(Color.LIGHT_GRAY);\nONL.HideBubble();\nONL.HideTitle();\n\n\n# Bubble code\n#AddChartBubble(bar == ONhighBar and PlotOverNightExtremes and DisplayPriceBubbleOnHiLowBar, ONH, \&quot;ONH: \&quot; + ONH, createColor(204,204,255));\n#AddChartBubble(bar == ONlowBar and PlotOverNightExtremes and DisplayPriceBubbleOnHiLowBar, ONL, \&quot;ONL: \&quot; + ONL, createColor(204,204,255),no);  #designated that the bubble be painted below the ONL line.  2018-04-07 JQ \n\n\nAddChartBubble(barNumber() == highestAll(barnumber()) and  PlotOverNightExtremes and DisplayPriceBubbleOnRightEdge, ONH, \&quot;ONH: \&quot; + ONH, createColor(204,204,255));\nAddChartBubble(barNumber() == highestAll(barnumber()) and PlotOverNightExtremes and DisplayPriceBubbleOnRightEdge, ONL, \&quot;ONL: \&quot; + ONL, createColor(204,204,255),no); \ninput showLable =yes;\nAddLabel(showLable, \&quot;ONL= \&quot; + astext(ONL), if ONL&lt; close then Color.LIGHT_GREEN else if ONL&gt; close then color.LIGHT_red else Color.GRAY);\nAddLabel(showLable, \&quot;ONH= \&quot; + astext(ONH), if ONH&lt; close then Color.LIGHT_GREEN else if ONH&gt; close then color.LIGHT_red else Color.GRAY);\n# End Code GlobeX or Overnight High / Low without Fibonacci Values &quot;,name=&quot;_2b139ce2_bb93_4663_acef_0fb6255d8008&quot;}){plots{0:{lineStyle=3,paintingStrategy=0},1:{color=#%2.CustomColor(#%3.Color(0,0,255,255)),lineStyle=3,paintingStrategy=0}}}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2008-2021\n#\n\ninput marketThreshold = 0.0025;\ninput timeFrame = {default DAY, \&quot;2 DAYS\&quot;, \&quot;3 DAYS\&quot;, \&quot;4 DAYS\&quot;, WEEK, MONTH, \&quot;OPT EXP\&quot;, QUARTER, YEAR};\ninput showOnlyToday = no;\ninput applyPersonsLevelsFilter = yes;\n\nassert(marketThreshold &gt;= 0, \&quot;\'market threshold\' must not be negative: \&quot; + marketThreshold);\n\ndef marketType = {default DISABLED, NEUTRAL, BEARISH, BULLISH};\n\ndef PP2 = high(period = timeFrame)[2] + low(period = timeFrame)[2] + close(period = timeFrame)[2];\n\nmarketType = if !applyPersonsLevelsFilter then marketType.DISABLED else\nif PP2[-1] &gt; (PP2[-1] + PP2 + PP2[1]) / 3 + marketThreshold then marketType.BULLISH else\nif PP2[-1] &lt; (PP2[-1] + PP2 + PP2[1]) / 3 - marketThreshold then marketType.BEARISH else marketType.NEUTRAL;\n\nplot R3;\nplot R2;\nplot R1;\nplot RR;\nplot PP;\nplot SS;\nplot S1;\nplot S2;\nplot S3;\n\nif showOnlyToday and !IsNaN(close(period = timeFrame)[-1])\nthen {\n    R1 = Double.NaN;\n    R2 = Double.NaN;\n    R3 = Double.NaN;\n    PP = Double.NaN;\n    S1 = Double.NaN;\n    S2 = Double.NaN;\n    S3 = Double.NaN;\n} else {\n    PP = (high(period = timeFrame)[1] + low(period = timeFrame)[1] + close(period = timeFrame)[1]) / 3;\n    R1 = 2 * PP - low(period = timeFrame)[1];\n    R2 = PP + high(period = timeFrame)[1] - low(period = timeFrame)[1];\n    R3 = R2 + high(period = timeFrame)[1] - low(period = timeFrame)[1];\n    S1 = 2 * PP - high(period = timeFrame)[1];\n    S2 = PP - high(period = timeFrame)[1] + low(period = timeFrame)[1];\n    S3 = S2 - high(period = timeFrame)[1] + low(period = timeFrame)[1];\n}\n\nRR = if (marketType == marketType.BEARISH or marketType == marketType.NEUTRAL) then R1 else R2;\nSS = if (marketType == marketType.BULLISH or marketType == marketType.NEUTRAL) then S1 else S2;\n\nRR.setHiding(!applyPersonsLevelsFilter);\nR1.setHiding(applyPersonsLevelsFilter);\nR2.setHiding(applyPersonsLevelsFilter);\nR3.hide();\nSS.setHiding(!applyPersonsLevelsFilter);\nS1.setHiding(applyPersonsLevelsFilter);\nS2.setHiding(applyPersonsLevelsFilter);\nS3.hide();\n\nPP.SetDefaultColor(GetColor(0));\nR1.SetDefaultColor(GetColor(5));\nR2.SetDefaultColor(GetColor(5));\nR3.SetDefaultColor(GetColor(5));\nS1.SetDefaultColor(GetColor(6));\nS2.SetDefaultColor(GetColor(6));\nS3.SetDefaultColor(GetColor(6));\n\nSS.DefineColor(\&quot;S1\&quot;, GetColor(6));\nSS.DefineColor(\&quot;S2\&quot;, GetColor(6));\nSS.AssignValueColor(if SS == S1 then SS.color(\&quot;S1\&quot;) else SS.color(\&quot;S2\&quot;));\n\nRR.DefineColor(\&quot;R1\&quot;, GetColor(5));\nRR.DefineColor(\&quot;R2\&quot;, GetColor(5));\nRR.AssignValueColor(if RR == R1 then RR.color(\&quot;R1\&quot;) else RR.color(\&quot;R2\&quot;));\n\nPP.SetStyle(Curve.SHORT_DASH);\nRR.SetStyle(Curve.SHORT_DASH);\nR1.SetStyle(Curve.SHORT_DASH);\nR2.SetStyle(Curve.SHORT_DASH);\nR3.SetStyle(Curve.SHORT_DASH);\nSS.SetStyle(Curve.SHORT_DASH);\nS1.SetStyle(Curve.SHORT_DASH);\nS2.SetStyle(Curve.SHORT_DASH);\nS3.SetStyle(Curve.SHORT_DASH);\n\ndef paintingStrategy = if timeframe == timeframe.WEEK then PaintingStrategy.LINE_VS_TRIANGLES else if timeFrame == timeFrame.MONTH or timeFrame == timeFrame.\&quot;OPT EXP\&quot; or timeFrame == timeFrame.QUARTER or timeFrame == timeFrame.YEAR then PaintingStrategy.LINE_VS_SQUARES else PaintingStrategy.LINE_VS_POINTS;\n\nPP.SetPaintingStrategy(paintingStrategy);\nRR.SetPaintingStrategy(paintingStrategy);\nR1.SetPaintingStrategy(paintingStrategy);\nR2.SetPaintingStrategy(paintingStrategy);\nR3.SetPaintingStrategy(paintingStrategy);\nSS.SetPaintingStrategy(paintingStrategy);\nS1.SetPaintingStrategy(paintingStrategy);\nS2.SetPaintingStrategy(paintingStrategy);\nS3.SetPaintingStrategy(paintingStrategy);&quot;,name=&quot;PersonsPivots&quot;}){hidden=&lt;T,inputsMap:TreeMap5{^(&quot;timeFrame&quot;,&quot;WEEK&quot;)},inputsMap=@TreeMap5,plots{1:{hiding=&lt;T},2:{hiding=&lt;T}}}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;### xiuyu vwap cross signal with abnormal volume\n\n#declare hide_on_daily;\n\n####\n#MTF\ndef tFrame = GetAggregationPeriod();\ninput timeFrame = {default DAY, WEEK, MONTH};\ninput aggregationPeriod = AggregationPeriod.HOUR;\ninput useAutoAggegate = yes;\n\n\n\n# Variables:\n#def  =if (useAutoAggegate) then open(period = aggregationPeriod1) else open;\n\ndef AutoAGG = if tFrame &lt;  AggregationPeriod.DAY then AggregationPeriod.DAY\n             else if  tFrame &lt; AggregationPeriod.WEEK then AggregationPeriod.WEEK\n                  else AggregationPeriod.MONTH;\ndef AGG = if (!useAutoAggegate) then aggregationPeriod else AutoAGG;\n\ndef testTimeFrames = if tFrame &lt; AGG  then yes else no;\n\n#AddLabel(useAutoAggegate, if testTimeFrames  then \&quot;Time Frames Are Correct\&quot; else \&quot;Time Frames Are \n\ninput length = 10; #average volume lenght\ninput volMinimum = 50000;\ninput showPriceColor = yes;\ninput factor = 1.50; #show what factors to avgvolume \ninput nDevUp = 2.0;\ninput nDevDn = -2.0;\n\ndef avgvolume = Average(volume, length) * factor;\n\n\n#plot vwap = reference VWAP( AGG);\n#######\n\n\ndef cap = GetAggregationPeriod();\ndef errorInAggregation =\n    timeFrame == timeFrame.DAY and cap &gt;= AggregationPeriod.WEEK or\n    timeFrame == timeFrame.WEEK and cap &gt;= AggregationPeriod.MONTH;\nAssert(!errorInAggregation, \&quot;timeFrame should be not less than current chart aggregation period\&quot;);\n\ndef yyyyMmDd = GetYYYYMMDD();\ndef periodIndx;\nswitch (timeFrame) {\ncase DAY:\n    periodIndx = yyyyMmDd;\ncase WEEK:\n    periodIndx = Floor((DaysFromDate(First(yyyyMmDd)) + GetDayOfWeek(First(yyyyMmDd))) / 7);\ncase MONTH:\n    periodIndx = RoundDown(yyyyMmDd / 100, 0);\n}\ndef isPeriodRolled = CompoundValue(1, periodIndx != periodIndx[1], yes);\n\ndef volumeSum;\ndef volumeVwapSum;\ndef volumeVwap2Sum;\n\nif (isPeriodRolled) {\n    volumeSum = volume;\n    volumeVwapSum = volume * vwap;\n    volumeVwap2Sum = volume * Sqr(vwap);\n} else {\n    volumeSum = CompoundValue(1, volumeSum[1] + volume, volume);\n    volumeVwapSum = CompoundValue(1, volumeVwapSum[1] + volume * vwap, volume * vwap);\n    volumeVwap2Sum = CompoundValue(1, volumeVwap2Sum[1] + volume * Sqr(vwap), volume * Sqr(vwap));\n}\ndef price = volumeVwapSum / volumeSum;\ndef deviation = Sqrt(Max(volumeVwap2Sum / volumeSum - Sqr(price), 0));\n\nplot VWAP = price;\nplot UpperBand = price + nDevUp * deviation;\nplot LowerBand = price + nDevDn * deviation;\nplot UpperBand2 = price + (1+nDevUp) * deviation;\nplot LowerBand2 = price +(-1+ nDevDn) * deviation;\ndef sdvP1=  price + deviation;\ndef sdvN1=  price - deviation;\n#####\n\n\nplot SD1up =close[1] crosses above sdvp1 and ( open&lt; close) and low&gt;sdvp1;\nSD1up.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nSD1up.SetDefaultColor(Color.graY);\nSD1up.SetLineWeight(2);\nAssignPriceColor(if SD1up and showPriceColor and open&lt; close then Color.violet else Color.CURRENT);\n\nAddLabel(yes, \&quot;VWAP= \&quot; + astext(VWAP), if VWAP&lt; close then Color.LIGHT_GREEN else if VWAP&gt; close then color.LIGHT_red else Color.GRAY);\n#AddLabel(yes, \&quot;VWAP= \&quot; + astext(VWAP), Color.White);\ndef vwDif= close- VWAP;\n#AddLabel(yes, \&quot; \&quot;+astext(vwDif), if vwDif&gt; 0 then Color.LIGHT_GREEN else if vwDif&lt; 0 then color.LIGHT_red else Color.GRAY);\nAddLabel(yes and vwDif&gt;0, \&quot; +\&quot;+astext(vwDif),  Color.LIGHT_GREEN );\nAddLabel(yes and vwDif&lt;=0, \&quot; \&quot;+astext(vwDif),  if vwDif&lt; 0 then color.LIGHT_red else Color.LIGHT_GRAY);\n\ninput vwapLableAll =yes;\nAddLabel(vwapLableAll, \&quot;VWAP +1= \&quot; + astext(sdvP1), if sdvP1&lt; close then Color.LIGHT_GREEN else if sdvP1&gt; close then color.LIGHT_red else Color.GRAY);\n\nAddLabel(vwapLableAll, \&quot;VWAP +2= \&quot; + astext(UpperBand), if UpperBand&lt; close then Color.LIGHT_GREEN else if UpperBand&gt; close then color.LIGHT_red else Color.GRAY);\nAddLabel(vwapLableAll, \&quot;VWAP +3= \&quot; + astext(UpperBand2), if UpperBand2&lt; close then Color.LIGHT_GREEN else if UpperBand2&gt; close then color.LIGHT_red else Color.GRAY);\n\nAddLabel(vwapLableAll, \&quot;VWAP -1= \&quot; + astext(sdvN1), if sdvN1&lt; close then Color.LIGHT_GREEN else if sdvN1&gt; close then color.LIGHT_red else Color.GRAY);\nAddLabel(vwapLableAll, \&quot;VWAP -2= \&quot; + astext(LowerBand), if LowerBand&lt; close then Color.LIGHT_GREEN else if LowerBand&gt; close then color.LIGHT_red else Color.GRAY);\nAddLabel(vwapLableAll, \&quot;VWAP -3= \&quot; + astext(LowerBand2), if LowerBand2&lt; close then Color.LIGHT_GREEN else if LowerBand2&gt; close then color.LIGHT_red else Color.GRAY);\n\n#AddLabel(vwapLableAll, \&quot;VWAP R= \&quot; + astext(upperBand/sdvN1 -1)+\&quot;  \&quot;+astext(upperBand/lowerBand -1)+\&quot;  \&quot;+astext(upperBand2/lowerBand2 -1), if LowerBand&lt; close then Color.LIGHT_GREEN else if LowerBand&gt; close then color.LIGHT_red else Color.GRAY);\n\nAddLabel(vwapLableAll, \&quot;VWAP R= \&quot; + astext(upperBand/sdvN1 -1)+\&quot;  \&quot;+astext(upperBand/lowerBand -1)+\&quot;  \&quot;+astext(upperBand2/lowerBand2 -1), if LowerBand&lt; close then Color.LIGHT_GREEN else if LowerBand&gt; close then color.LIGHT_red else Color.GRAY);\n\n\n\ndef volCheck = volume &gt;= avgvolume &amp;&amp; volume &gt;= volMinimum &amp;&amp; volume &gt;= volume[1];\ndef isCross =  close crosses VWAP;\ndef abnormalSignal = isCross and volCheck;\n\n\nVWAP.SetDefaultColor(color.white);#(GetColor(0));\nplot signalup = if abnormalSignal and close &gt; VWAP then low else Double.NaN;\nsignalup.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nsignalup.SetDefaultColor(Color.CYAN);\nsignalup.SetLineWeight(2);\n\nplot signaldown =  if abnormalSignal and close &lt; VWAP then high else Double.NaN;\nsignaldown.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);\nsignaldown.SetDefaultColor(Color.CYAN);\nsignaldown.SetLineWeight(2);\n\nAssignPriceColor(if abnormalSignal and showPriceColor then Color.CYAN else Color.CURRENT);\n\n\n#####\nvwap.SetStyle(Curve.POINTS);\nUpperBand.SetDefaultColor(GetColor(0));\nLowerBand.SetDefaultColor(GetColor(0));\n\nUpperBand.SetStyle(Curve.POINTS);\nLowerBand.SetStyle(Curve.POINTS);\n\nUpperBand2.SetDefaultColor(Color.YELLOW);\nLowerBand2.SetDefaultColor(Color.YELLOW);\n\nUpperBand2.SetStyle(Curve.SHORT_DASH);\nLowerBand2.SetStyle(Curve.SHORT_DASH);\n#input AutoHide=yes;\n#def hideLower = if AutoHide then close &gt;vwap  else 0;;\n#def hideUpper = if AutoHide then  close &lt;vwap  else 0;#- deviation\n#addLabel(yes, \&quot;hide U\&quot;+hideUpper +\&quot; L\&quot;+hideLower);\n#UpperBand.setHiding(hideUpper);\n#LowerBand.setHiding(hideLower);\n#UpperBand.Hide();\n#LowerBand.Hide();\n#UpperBand2.Hide();\n#LowerBand2.Hide();&quot;,name=&quot;_740dc265_6e6e_38a5_ba0e_c0a058a5d552&quot;}){plots{0:{lineStyle=1,paintingStrategy=2},1:{lineStyle=3},2:{lineStyle=3}}}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;#ShadowTrader_VA_Pivots\n#ShadowTrader (Copyright ShadowTrader), a division of ShadowTrader Technologies, LLC. 2017. All rights reserved. This ShadowTrader Script is for educational purposes only.  ShadowTrader is not responsible for the use,  functionality or the performance of this Script. This work is copyrighted by ShadowTrader and all rights of this work under the license are reserved. Use of the ShadowTrader licensed code is for private use only and any other use are prohibited. By exercising any of the rights herein, you are accepting the terms of this license. You have a non-exclusive right to use or alter the ShadowTrader code. Use of this ShadowTrader Script other than as provided for in this license is prohibited. Any redistribution is strictly prohibited and will be enforced.\n\n# A big ShadowTrader thank you to Justin Lane Williams for initially creating this script for us.\n#08/31/11: Total redesign, added automated Pivot values, proximity plotting, new features.\n#09/12/11: Added “ShowLevel4” option due to recent volitility. Will plot S4 &amp; R4.\n#12/11/11: Added “AfterHours” option to turn off plot after hours.\n#12/21/11: Bug fixes due to TOS upgrades. Removed “AfterHours”, not workin correctly.\n#01/25/12: Enter daily inputs as 4 digits and script will interpret.\n# -added rounding to make the pivots appear as they do on the show.\n#01/26/12: Removed ability to truncate inputs due to it only being accurate 99% of time.\n#02/02/12: Small update to make sure \&quot;Auto Pivots\&quot; menu option functioned properly.\n#06/07/12: Added (6)VPOC inputs, should be manually entered/deleted, displays when applicable.\n#06/25/12: Removed some code and fixed a few bugs.\n#07/09/12: Fixed one small but important bug.\n#07/13/12: Added value bubbles, removed proximity plot function.\n#08/13/12: Removed a lot of superfluous code plus a few upgrades.\n#08/15/12: Fixed a bug that was giving false numbers.\n#08/30/12: Fixed a bug that wasn\'t plotting the NQ profile.\n#09/02/12: Reordered inputs and removed \&quot;LabelESonly\&quot; input.\n#12/28/12: Made the plot hide on daily charts and updated code to current standards.\n#01/04/13: Fixed a rare bug that hides labels if using tick charts.\n#01/28/13: Added ability to hide each individual level.\n#02/09/21 :mahiby customized for  \n# Pivot values will be off the day following market holidays and possibly the day after rollover.\n# On these days make \&quot;AutoPivots=No\&quot; and manually draw pivots. Change back to \&quot;AutoPivots=Yes\&quot; the day after.\n\ninput PivotTimeFrame =  { \&quot;15 MIN\&quot; ,  \&quot;30 MIN\&quot;,  \&quot;1 HOUR\&quot;, \&quot;2 HOURs\&quot;,  \&quot;4 HOURs\&quot;, default \&quot;DAY\&quot;,  \&quot;2 DAYS\&quot;, \&quot;3 DAYS\&quot;, \&quot;4 DAYS\&quot;, WEEK, MONTH, \&quot;OPT EXP\&quot;, QUARTER, YEAR}; #AggregationPeriod.DAY;#\ninput ProfileTimeFrame = { CHART,  FIVE_MINUTE, TEN_MINUTE, FIFTEEN_MINUTE, THIRTY_MINUTE,   HOUR, TWO_HOUR, FOUR_HOUR, default DAY, TWO_DAY, THREE_DAY, FOUR_DAY, WEEK, TWO_WEEK, THREE_WEEK, MONTH, \&quot;OPT EXP\&quot;, BAR};\ninput ShowCloud1  = yes;#Hint ShowCloud: Shows the value area as a cloud.\ninput ShowCloud2  = yes;#Hint ShowCloud: Shows the value area as a cloud.\ninput showOnlyToday = no;\ninput VaPrevious = yes;\ninput AutoPivots = yes;#Hint AutoPivots: Turns off pivot lines, value area stays on.\ninput showVAH = no;\ninput Labels = {default \&quot;Proximity\&quot;, \&quot;Off\&quot;, \&quot;All\&quot;, \&quot;ValueAreaOnly\&quot;};#Hint Labels: Labels at top of chart.\ninput ShowPivotPoint = yes;#Hint ShowPivotPoint: Hides Pivot Point plot.\ninput ShowLevel4 = yes;#Hint ShowLevel4: Will display S4 and R4 for days with large moves.\ninput ShowLevel5 = yes;#Hint ShowLevel4: Will display S4 and R4 for days with large moves.\ninput ShowLevel6 = no;#Hint ShowLevel4: Will display S4 and R4 for days with large moves.\ninput ShowLevel7 = no;#Hint ShowLevel4: Will display S4 and R4 for days with large moves.\ninput ShowLevel8 = no;#Hint ShowLevel4: Will display S4 and R4 for days with large moves.\ninput PivotBubbles  = yes;#yes;#Hint PivotBubbles: Shows bubbles on pivot plot lines.\ninput ValueBubbles  = yes;#yes;#Hint ValueBubbles: Shows bubbles on value plot lines.\ninput PlotStartTime = 0930;#Hint PlotStartTime: Move to earlier time to shift bubbles to the left.\n\n\ninput CloudOpenOnly = yes;#Hint CloudOpenOnly: Will only cloud open candles.\ninput HideAfterHoursLabel = no;#Hint HideAfterHoursLabel: Hides \&quot;NoShadowPlotAfterHours\&quot; label.\ninput VpocBubbles  = no;#yes;#Hint VpocBubbles: Shows bubbles on VPOC plot lines.\n\ninput ShowS1 = yes;#yes;#Hint ShowS1: Hide/Show S1.\ninput ShowS2 = yes;#Hint ShowS2: Hide/Show S2.\ninput ShowS3 = yes;#yes;#Hint ShowS3: Hide/Show S3.\ninput ShowR1 = yes;#yes;#Hint ShowR1: Hide/Show R1.\ninput ShowR2 = yes;#Hint ShowR2: Hide/Show R2.\ninput ShowR3 = yes;#yes;#Hint ShowR3: Hide/Show R3.\ninput ShowORB = no;#Hint ShowORB: Displays 2 small, dashed lines at the top/bottom of opening range.\ninput OrbTime = 30;#Hint OrbTime: Defines the time range in minutes for the ORB.\n\ninput triggerUpperVaLimitHigh = 5;\ninput triggerUpperVaLimitLow = -5;\ninput triggerLowerVaLimitHigh = 5;\ninput triggerLowerVaLimitLow = -5;\ninput showLines = no;\ninput opacity = 20;\n\ndef Na = Double.NaN;\ninput showDebugLable = yes;\n#declare hide_on_daily;\n\n\n###pps\n\ninput marketThreshold = 0.0025;\n\ninput applyPersonsLevelsFilter = yes;\n\nAssert(marketThreshold &gt;= 0, \&quot;\'market threshold\' must not be negative: \&quot; + marketThreshold);\n\ndef marketType = {default DISABLED, NEUTRAL, BEARISH, BULLISH};\n\ndef PP2 = high(period = PivotTimeFrame)[2] + low(period = PivotTimeFrame)[2] + close(period = PivotTimeFrame)[2];\n\n################\n\nmarketType = if !applyPersonsLevelsFilter then marketType.DISABLED else\nif PP2[-1] &gt; (PP2[-1] + PP2 + PP2[1]) / 3 + marketThreshold then marketType.BULLISH else\nif PP2[-1] &lt; (PP2[-1] + PP2 + PP2[1]) / 3 - marketThreshold then marketType.BEARISH else marketType.NEUTRAL;\n\n#Previous Day Functions\ndef Day   = GetDayOfWeek(GetYYYYMMDD());\ndef CloseTime = SecondsTillTime(1545) &gt;= 0;\ndef OpenTime = SecondsFromTime(0930) &gt;= 0;\ndef RegHrs = CloseTime and OpenTime;\n\n###\ndef PLow ;\ndef PHigh ;\ndef PrevLow ;\ndef PrevHigh;\ndef a = if  \&quot;PivotTimeFrame\&quot; == \&quot;DAY\&quot; then 1 else 0;\n\nif  a {\n    PLow  =  CompoundValue(1, If(Day == Day[1] and RegHrs and low &lt; PLow[1], low, If(SecondsFromTime(0930) &lt;= 0 and RegHrs, low, PLow[1])), low);\n    PHigh = CompoundValue(1, If(Day == Day[1] and RegHrs and high &gt; PHigh[1], high, If(SecondsFromTime(0930) &lt;= 0 and RegHrs, high, PHigh[1])), high);\n    PrevLow  = If(Day != Day[1], PLow[1], PrevLow[1]);\n    PrevHigh = If(Day != Day[1], PHigh[1], PrevHigh[1]);\n\n#AddLabel (yes,period);\n}\n\nelse {\n    PLow  = low(period = PivotTimeFrame);\n    PHigh = high(period = PivotTimeFrame);\n    PrevLow  = low(period = PivotTimeFrame)[1];\n    PrevHigh = high(period = PivotTimeFrame)[1];\n\n}\n##################\n#Prior Day Profile - counting formula by functionform\n\ndef period;\ndef yyyymmdd = GetYYYYMMDD();\ndef seconds = SecondsFromTime(0);\ndef month = GetYear() * 12 + GetMonth();\ndef day_number = DaysFromDate(First(yyyymmdd)) + GetDayOfWeek(First(yyyymmdd));\ndef dom = GetDayOfMonth(yyyymmdd);\ndef dow = GetDayOfWeek(yyyymmdd - dom + 1);\ndef expthismonth = (if dow &gt; 5 then 27 else 20) - dow;\ndef exp_opt = month + (dom &gt; expthismonth);\n\nswitch (ProfileTimeFrame) {\ncase CHART:\n    period = 0;\n#case MINUTE:\n #   period = Floor(seconds / 60 + day_number * 24 * 60);\ncase FIVE_MINUTE:\n    period = Floor(seconds / 60 + day_number * 24 * 60);\n   # timeFrame = \&quot;5 MINUTES\&quot;; #\&quot;2 DAYS\&quot;\ncase TEN_MINUTE:\n    period = Floor(seconds / 60 + day_number * 24 * 60);\n   # timeFrame = \&quot;5 MINUTES\&quot;; #\&quot;2 DAYS\&quot;\ncase FIFTEEN_MINUTE:\n    period = Floor(seconds / 60 + day_number * 24 * 60);\n   # timeFrame = \&quot;15 MINUTES\&quot;; #\&quot;2 DAYS\&quot;\ncase THIRTY_MINUTE:\n    period = Floor(seconds / (30 * 60) + day_number * 24 * 60);\n   # timeFrame = \&quot;30 MINUTES\&quot;; #\&quot;2 DAYS\&quot;\ncase HOUR:\n    period = Floor(seconds / 3600 + day_number * 24);\n   # timeFrame = \&quot;1 HOUR\&quot;; #\&quot;2 DAYS\&quot;\ncase TWO_HOUR:\n    period = Floor(seconds / (2 * 3600) + day_number * 24);\n   # timeFrame = \&quot;2 HOURS\&quot;; #\&quot;2 DAYS\&quot;\ncase FOUR_HOUR:\n    period = Floor(seconds / (4 * 3600) + day_number * 24);\n    #timeFrame = \&quot;4 HOURS\&quot;; #\&quot;2 DAYS\&quot;\ncase DAY:\n    period = CountTradingDays(Min(First(yyyymmdd), yyyymmdd), yyyymmdd) - 1;\n   # timeFrame =  \&quot;1 DAY\&quot;;\ncase TWO_DAY:\n    period =  Floor((CountTradingDays(Min(First(yyyymmdd), yyyymmdd), yyyymmdd) - 1) / 2);\n   # timeFrame =  \&quot;2 DAYS\&quot;;\ncase THREE_DAY:\n    period = Floor((CountTradingDays(Min(First(yyyymmdd), yyyymmdd), yyyymmdd) - 1) / 3);\n   # timeFrame =  \&quot;3 DAYS\&quot;;\ncase FOUR_DAY:\n    period =  Floor((CountTradingDays(Min(First(yyyymmdd), yyyymmdd), yyyymmdd) - 1) / 4);\n   # timeFrame =  \&quot;4 DAYS\&quot;;\ncase WEEK:\n    period = Floor(day_number / 7);\n   # timeFrame =  \&quot;1 WEEK\&quot;;\ncase TWO_WEEK:\n    period = Floor(day_number / 14);\n  #  timeFrame =  \&quot;2 WEEK\&quot;;\ncase THREE_WEEK:\n    period = Floor(day_number / 21);\n   # timeFrame =  \&quot;3 WEEK\&quot;;\ncase MONTH:\n    period = Floor(month - First(month));\n   # timeFrame =  \&quot;MONTH\&quot;;\ncase \&quot;OPT EXP\&quot;:\n    period = exp_opt - First(exp_opt);\n    #timeFrame =  \&quot;OPT EXP\&quot;;\ncase BAR:\n    period = BarNumber() - 1;\n}\n\n\ndef count;\nif VaPrevious\n{\n\n    count = CompoundValue(1, if !(period != period[1]) then count[1] + 1 else 1, 1);\n\n}\nelse\n{\n   # count = CompoundValue(1, if period != period[1] then (count[1] + period - period[1]) else count[1], 0);\n\n\n count = CompoundValue(1, if period != period[1] then count[1]   else  (count[1] + period - period[1]), 0);\n\n\n\n}\ndef cond = count &lt; count[1] + period - period[1];\n\ndef Pivot = hlc3(period = PivotTimeFrame)[1];\n\n\n\ndef priorperiod = if IsNaN(count[1]) then 1 else Max(count, count[1]);\nprofile vol1 = VolumeProfile(\&quot;startNewProfile\&quot; = period != period[1], \&quot;onExpansion\&quot; = no);\n\ndef vahprior = vol1.GetHighestValueArea();\ndef pocprior = vol1.GetPointOfControl();\ndef valprior = vol1.GetLowestValueArea();\n\ndef vahprev = GetValue(vahprior, priorperiod);\ndef pocprev = GetValue(pocprior, priorperiod);\ndef valprev = GetValue(valprior, priorperiod);\n\n#if showProfile then\ndef  showProfile = no;\ndef showPointOfControl = no;\n\n#vol.Show(if showProfile then GlobalColor(\&quot;Profile\&quot;) else Color.CURRENT, if showPointOfControl then GlobalColor(\&quot;Point Of Control\&quot;) else Color.CURRENT, if showValueArea then GlobalColor(\&quot;Value Area\&quot;) else Color.CURRENT, opacity);\n#profile vol = VolumeProfile(\&quot;startNewProfile\&quot; = cond, \&quot;onExpansion\&quot; = no);\n#vol.Show(if showProfile then GlobalColor(\&quot;Profile\&quot;) else Color.CURRENT, if showPointOfControl then GlobalColor(\&quot;Point Of Control\&quot;) else Color.CURRENT, if showValueArea then GlobalColor(\&quot;Value Area\&quot;) else Color.CURRENT, opacity);\ndef VAH = vahprev;\ndef VAL = valprev;\ndef POC = pocprev;\n\n\n############\n#Value Area Functions\ndef PPoint = If(Pivot &gt; 0, Pivot, Na);\ndef VArea  = Between(close, VAL, VAH);\ndef VAreaabove  = close &gt; VAH;\ndef VAreabelow  = close &lt; VAL;\n\n\n###%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n#def oneVol = Roundup(( VAHigh - VALow) / VAHigh, 2);\ndef oneVol = RoundUp(( VAH - VAL) / 100, 2);\ndef upperValimitH = VAH + oneVol * (triggerUpperVaLimitHigh);\ndef upperValimitL = VAH + oneVol * (triggerUpperVaLimitLow);\n\ndef lowerValimitH = VAL + oneVol * (triggerLowerVaLimitHigh);\ndef lowerValimitL = VAL + oneVol * (triggerLowerVaLimitLow);\n#triggerUpperVaLimitlow = if triggerUpperVaLimitlow&gt;=0 then triggerUpperVaLimitlow =-5 else triggerUpperVaLimitlow= triggerUpperVaLimitlow;\n\nplot VA_high_short = upperValimitH;\nplot VA_high_long = upperValimitL;\n\nplot VA_low_short = lowerValimitL;\nplot VA_low_long = lowerValimitH;\n\n#AddCloud(VA_high_long, VA_high_short, Color.LIGHT_RED, Color.LIGHT_RED);\n#AddCloud(VA_high_long, VA_high_short, Color.LIGHT_RED, Color.LIGHT_RED);\n\n#VA_low_short.SetPaintingStrategy(PaintingStrategy.DASHES);\n#VA_low_long.SetDefaultColor(Color.BLUE);\nVA_low_short.SetHiding(!showLines);\nVA_low_short.SetPaintingStrategy(PaintingStrategy.DASHES);\nVA_low_short.SetDefaultColor(Color.RED);\nVA_low_long.SetHiding(!showLines);\nVA_low_long.SetPaintingStrategy(PaintingStrategy.DASHES);\nVA_low_long.SetDefaultColor(Color.GREEN);\n\n\n\nVA_high_short.SetHiding(!showLines);\nVA_high_short.SetPaintingStrategy(PaintingStrategy.DASHES);\nVA_high_short.SetDefaultColor(Color.RED);\nVA_high_long.SetHiding(!showLines);\nVA_high_long.SetPaintingStrategy(PaintingStrategy.DASHES);\nVA_high_long.SetDefaultColor(Color.GREEN);\n\n\n####%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\n\n\n\n\n#Time Functions\ndef timeFrame = getAggregationPeriod();\ndef prdMax =highestAll(if(!IsNaN(close[-1]),period,Na))  ;\ndef cnt =if(period &gt; prdMax-2  ,1,Na);\ndef Chart2  =  if showOnlyToday then cnt else 1 ;;#if showOnlyToday then (IsNaN(period[-1] and (period == period[1])))  else 1 ;\n#def Chart2  =  if showOnlyToday then MarketOpen and NewDay else 1 ;\n\ndef CloseTime2 = SecondsTillTime(1600) &gt;= 0;\ndef OpenTime2 = SecondsFromTime(PlotStartTime) &gt;= 0;\ndef MarketOpen = OpenTime2 and CloseTime2;\ndef NewDay = IsNaN(close(period = “Day”)[-1]);\ndef Chart1;\nif  timeFrame&lt; aggregationPeriod.DAY\n{\nChart1  =  if showOnlyToday then MarketOpen and NewDay else 1 ;\n}\nelse\n{ \n Chart1  =  chart2 ;\n}\n#plot prd =period;\n\n#AddLabel (yes,Chart1);\n#Pivot Functions\ndef Res1  = (2 * PPoint) - PrevLow;\ndef Supp1 = (2 * PPoint) - PrevHigh;\ndef Res2  = PPoint + (Res1 - Supp1);\ndef Supp2 = PPoint - (Res1 - Supp1);\ndef Res3  = PrevHigh + 2 * (PPoint - PrevLow);\ndef Supp3 = PrevLow - 2 * (PrevHigh - PPoint);\ndef Res4  = PrevHigh + 3 * (PPoint - PrevLow);\ndef Supp4 = PrevLow - 3 * (PrevHigh - PPoint);\n\n\n#def Res1  = (2 * PPoint) - PrevLow;\n#def Supp1 = (2 * PPoint) - PrevHigh;\n#def Res2  = PPoint + (Res1 - Supp1); # def Res2  = PPoint + (Res1 - Supp1);\n#def Supp2 = PPoint - (Res1 - Supp1);\n#def Res3  = PPoint + 2 * (PrevHigh - PrevLow);# def Res3  = PrevHigh + 2 * (PPoint - PrevLow);\n#def Supp3 = PPoint - 2 * (PrevHigh - PrevLow);\n#def Res4  = PPoint + 3 * (PrevHigh - PrevLow);#\n#def Supp4 = PPoint - 3 * (PrevHigh - PrevLow);\n\ndef Res5  = PrevHigh + 4 * (PPoint - PrevLow);\ndef Supp5 = PrevLow - 4 * (PrevHigh - PPoint);\n\ndef Res6  = PrevHigh + 5 * (PPoint - PrevLow);\ndef Supp6 = PrevLow - 5 * (PrevHigh - PPoint);\n\ndef Res7  = PrevHigh + 6 * (PPoint - PrevLow);\ndef Supp7 = PrevLow - 6 * (PrevHigh - PPoint);\n\ndef Res8  = PrevHigh + 7 * (PPoint - PrevLow);\ndef Supp8 = PrevLow - 7 * (PrevHigh - PPoint);\n\n\n\n\n#Rounding Functions\ndef round = 0.01;\ndef RI   = RoundDown(Res1, 0) - ((Round(((RoundDown(Res1, 0) - Res1) / round), 0)) * round);\ndef SI   = RoundDown(Supp1, 0) - ((Round(((RoundDown(Supp1, 0) - Supp1) / round), 0)) * round);\ndef RII  = RoundDown(Res2, 0) - ((Round(((RoundDown(Res2, 0) - Res2) / round), 0)) * round);\ndef SII  = RoundDown(Supp2, 0) - ((Round(((RoundDown(Supp2, 0) - Supp2) / round), 0)) * round);\ndef RIII = RoundDown(Res3, 0) - ((Round(((RoundDown(Res3, 0) - Res3) / round), 0)) * round);\ndef SIII = RoundDown(Supp3, 0) - ((Round(((RoundDown(Supp3, 0) - Supp3) / round), 0)) * round);\ndef RIV  = RoundDown(Res4, 0) - ((Round(((RoundDown(Res4, 0) - Res4) / round), 0)) * round);\ndef SIV  = RoundDown(Supp4, 0) - ((Round(((RoundDown(Supp4, 0) - Supp4) / round), 0)) * round);\ndef PivP = RoundDown(PPoint, 0) - ((Round(((RoundDown(PPoint, 0) - PPoint) / round), 0)) * round);\n\ndef RV  = RoundDown(Res5, 0) - ((Round(((RoundDown(Res5, 0) - Res5) / round), 0)) * round);\ndef SV  = RoundDown(Supp5, 0) - ((Round(((RoundDown(Supp5, 0) - Supp5) / round), 0)) * round);\ndef RVI  = RoundDown(Res6, 0) - ((Round(((RoundDown(Res6, 0) - Res6) / round), 0)) * round);\ndef SVI  = RoundDown(Supp6, 0) - ((Round(((RoundDown(Supp6, 0) - Supp6) / round), 0)) * round);\ndef RVII  = RoundDown(Res7, 0) - ((Round(((RoundDown(Res7, 0) - Res7) / round), 0)) * round);\ndef SVII  = RoundDown(Supp7, 0) - ((Round(((RoundDown(Supp7, 0) - Supp7) / round), 0)) * round);\ndef RVIII  = RoundDown(Res8, 0) - ((Round(((RoundDown(Res8, 0) - Res8) / round), 0)) * round);\ndef SVIII  = RoundDown(Supp8, 0) - ((Round(((RoundDown(Supp8, 0) - Supp8) / round), 0)) * round);\n\n\n\n\n#Plots\nplot VH  = If(Chart1 and VAH &gt; 0, VAH, Na);\nplot PC  = If(Chart1 and POC &gt; 0, POC, Na);\nplot VL  = If(Chart1 and VAL &gt; 0, VAL, Na);\n\n##Auto Show \ndef R1_auto_show;\ndef R2_auto_show;\ndef R3_auto_show;\ndef R4_auto_show;\ndef R5_auto_show;\ndef R6_auto_show;\ndef R7_auto_show;\ndef R8_auto_show;\n\ndef S1_auto_show;\ndef S2_auto_show;\ndef S3_auto_show;\ndef S4_auto_show;\ndef S5_auto_show;\ndef S6_auto_show;\ndef S7_auto_show;\ndef S8_auto_show;\n\ndef cmax = highestAll( count);\ndef R1AutoShow = (close&gt;VH or (Between(RI,VL,VH) and close&gt;VL));\ndef S1AutoShow = (close&lt;VL or (Between(SI,VL,VH) and close&lt;VH));;\ndef R2AutoShow =  close &gt; VH and close &lt; RV;\ndef S2AutoShow = (close &lt; VL) and close &gt; SV  ;\ndef R3AutoShow = close &gt; (RI + ((RII - RI) / 2));;\ndef S3AutoShow = close &lt; (SI - ((SI - SII) / 2));\ndef R4AutoShow = close &gt; (RII + ((RIII - RII) / 2));\ndef S4AutoShow =  close &lt; (SII - ((SII - SIII) / 2));\ndef R5AutoShow =  close &gt; (RIII + ((RIV - RIII) / 2));\ndef S5AutoShow =  close &lt; (SIII - ((SIII - SIV) / 2));\ndef R6AutoShow =  close &gt; (RIV + ((RV - RIV) / 2));\ndef S6AutoShow =  close &lt; (SIV - ((SVI - SV) / 2));\ndef R7AutoShow =  close &gt; (RV + ((RVI - RV) / 2));\ndef S7AutoShow =  close &lt; (SV - ((SV - SVI) / 2));\ndef R8AutoShow =  close &gt; (RVI + ((RVII - RVI) / 2));\ndef S8AutoShow =  close &lt; (SVI - ((SVI - SVII) / 2));\n\nR1_auto_show = if ( (period==period[1]) and R1_auto_show[1] )  then R1_auto_show[1] else R1AutoShow;\nR2_auto_show = if ( (period==period[1]) and R2_auto_show[1] )  then R2_auto_show[1] else R2AutoShow;\nR3_auto_show = if ( (period==period[1]) and R3_auto_show[1] )  then R3_auto_show[1] else R3AutoShow;\nR4_auto_show = if ( (period==period[1]) and R4_auto_show[1] )  then R4_auto_show[1] else R4AutoShow;\nR5_auto_show = if ( (period==period[1]) and R5_auto_show[1] )  then R5_auto_show[1] else R5AutoShow;\nR6_auto_show = if ( (period==period[1]) and R6_auto_show[1] )  then R6_auto_show[1] else R6AutoShow;\nR7_auto_show = if ( (period==period[1]) and R7_auto_show[1] )  then R7_auto_show[1] else R7AutoShow;\nR8_auto_show = if ( (period==period[1]) and R8_auto_show[1] )  then R8_auto_show[1] else R8AutoShow;\n\n\nS1_auto_show = CompoundValue(2,if ( (period==period[1]) and S1_auto_show[1] )  then S1_auto_show[1] else S1AutoShow,S1AutoShow);\nS2_auto_show = if ( (period==period[1]) and S2_auto_show[1] )  then S2_auto_show[1] else S2AutoShow;\nS3_auto_show = if ( (period==period[1]) and S3_auto_show[1] )  then S3_auto_show[1] else S3AutoShow;\nS4_auto_show = if ( (period==period[1]) and S4_auto_show[1] )  then S4_auto_show[1] else S4AutoShow;\nS5_auto_show = if ( (period==period[1]) and S5_auto_show[1] )  then S5_auto_show[1] else S5AutoShow;\nS6_auto_show = if ( (period==period[1]) and S6_auto_show[1] )  then S6_auto_show[1] else S6AutoShow;\nS7_auto_show = if ( (period==period[1]) and S7_auto_show[1] )  then S7_auto_show[1] else S7AutoShow;\nS8_auto_show = if ( (period==period[1]) and S8_auto_show[1] )  then S8_auto_show[1] else S8AutoShow;\n\nplot gg=(S1AutoShow);#==1);\nplot ggg = ( s1_auto_show);# if ( isnan( s1_autoshow))then  1 else double.NaN ;\ngg.SetHiding(0);\nggg.SetHiding(0);\n\n#input showHigherLevel =yes;\n##\n\nplot R4  = If(Chart1 and AutoPivots and ShowLevel4 and  R4_auto_show  and RIV &gt; 0, RIV, Na);\nplot R3  = If(Chart1 and AutoPivots and ShowR3  and  R3_auto_show and RIII &gt; 0, RIII,Na);\nplot R2  = If(Chart1 and AutoPivots and ShowR2  and  R2_auto_show and RII &gt; 0, RII, Na);\nplot R1  = If(Chart1 and AutoPivots and ShowR1  and  R1_auto_show and RI &gt; 0, RI, Na);\nplot PP  = If(Chart1 and AutoPivots and ShowPivotPoint and PPoint &gt; 0, PivP, Na);\nplot S1  = If(Chart1 and AutoPivots and ShowS1 and  S1_auto_show  and SI &gt; 0, SI, Na);\nplot S2  = If(Chart1 and AutoPivots and ShowS2 and  S2_auto_show  and SII &gt; 0, SII, Na);\nplot S3  = If(Chart1 and AutoPivots and ShowS3 and  S3_auto_show and SIII &gt; 0, SIII, Na);\nplot S4  = If(Chart1 and AutoPivots and ShowLevel4 and  S4_auto_show and SIV &gt; 0, SIV, Na);\n\n#######\n\nplot R5  = If(Chart1 and AutoPivots and ShowLevel4 and  R5_auto_show  and RV &gt; 0, RV, Na);\nplot R6  = If(Chart1 and AutoPivots and ShowLevel4 and  R6_auto_show  and RVI &gt; 0, RVI, Na);\nplot R7  = If(Chart1 and AutoPivots and ShowLevel4 and  R7_auto_show  and RVII &gt; 0, RVII, Na);\nplot R8  = If(Chart1 and AutoPivots and ShowLevel4 and  R8_auto_show  and RVIII &gt; 0, RVIII, Na);\n\n\nplot S5  = If(Chart1 and AutoPivots and ShowLevel4 and  S5_auto_show  and SV &gt; 0, SV, Na);\nplot S6  = If(Chart1 and AutoPivots and ShowLevel4 and  S6_auto_show  and SVI &gt; 0, SVI, Na);\nplot S7  = If(Chart1 and AutoPivots and ShowLevel4 and  S7_auto_show  and SVII &gt; 0, SVII, Na);\nplot S8  = If(Chart1 and AutoPivots and ShowLevel4 and  S8_auto_show  and SVIII &gt; 0, SVIII, Na);\n####\n\n\ninput closeTimeC = 1615;\n#Value Area Cloud\n#def CloudClose = SecondsTillTime(1615) &gt; 0;\ndef CloudClose = SecondsTillTime(closeTimeC) &gt; 0;\ndef Cloud      = OpenTime and CloudClose;\ndef ChartCloud = if(timeFrame &gt; aggregationPeriod.DAY, Cloud and Chart1, chart1);\ndef CloudTest  = If(CloudOpenOnly, ChartCloud, Chart1);\ndef cloudhigh = If(CloudTest and ShowCloud1, VAH, Na);\ndef cloudlow  = If(CloudTest and ShowCloud1, VAL, Na);\nAddCloud(cloudhigh, cloudlow, Color.GRAY, Color.GRAY);\ndef AfterHours = OpenTime2 and CloudClose;\n\n#Chart Labels\ndef Futures = Between(close, close(\&quot;/es\&quot;) - 15, close(\&quot;/es\&quot;) + 15) or Between(close, close(\&quot;/nq\&quot;) - 15, close(\&quot;/nq\&quot;) + 15);\ndef Label = Chart1;# and Futures;\ndef ZeroTest = VAH &gt; 0 and VAL &gt; 0;\ndef PNotZero = PPoint &gt; 0;\ndef ChartLabels;\nswitch (Labels) {\ncase \&quot;Proximity\&quot;:\n    ChartLabels = 1;\ncase \&quot;Off\&quot;:\n    ChartLabels = 0;\ncase \&quot;All\&quot;:\n    ChartLabels = 2;\ncase \&quot;ValueAreaOnly\&quot;:\n    ChartLabels = 3;\n}\n\n\nAddLabel(ChartLabels == 1 and Label and AutoPivots and VArea and ZeroTest, “InsideValue”, Color.WHITE);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and VAreaabove and ZeroTest, “AboveValue”, Color.GREEN);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and VAreabelow and ZeroTest, “BelowValue”, Color.RED);\nAddLabel(ChartLabels == 1 and Label and !AutoPivots and VArea and ZeroTest, “InsideValueArea”, Color.WHITE);\nAddLabel(ChartLabels == 1 and Label and !AutoPivots and VAreaabove and ZeroTest, “AboveValueArea”, Color.GREEN);\nAddLabel(ChartLabels == 1 and Label and !AutoPivots and VAreabelow and ZeroTest, “BelowValueArea”, Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and Between(close, VL, (RI + ((RII - RI) / 2))), \&quot;VH=\&quot; + AsText(VH), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and Between(close, VL, VH), \&quot;POC=\&quot; + AsText(PC), Color.YELLOW);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and Between(close, (SI - ((SI - SII) / 2)), VH), \&quot;VL=\&quot; + AsText(VL), Color.GREEN);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and (close &gt; VH or (Between(RI, VL, VH) and close &gt; VL)), \&quot;R1=\&quot; + AsText(RI), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and close &gt; VH, \&quot;R2=\&quot; + AsText(RII), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and close &gt; (RI + ((RII - RI) / 2)), \&quot;R3=\&quot; + AsText(RIII), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and ShowLevel4 and close &gt; (RII + ((RIII - RII) / 2)), \&quot;R4=\&quot; + AsText(RIV), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and ShowLevel5 and close &gt; (RIII + ((RIV - RIII) / 2)), \&quot;R5=\&quot; + AsText(RV), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and ShowLevel6 and close &gt; (RII + ((RV - RIV) / 2)), \&quot;R6=\&quot; + AsText(RVI), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and ShowLevel7 and close &gt; (RII + ((RVI - RV) / 2)), \&quot;R7=\&quot; + AsText(RVII), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and ShowLevel8 and close &gt; (RII + ((RVII - RVI) / 2)), \&quot;R8=\&quot; + AsText(RVIII), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and ShowPivotPoint and close &gt; SI and close &lt; RI, \&quot;PP=\&quot; + AsText(PP), Color.WHITE);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and (close &lt; VL or (Between(SI, VL, VH) and close &lt; VH)), \&quot;S1=\&quot; + AsText(SI), Color.GREEN);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and close &lt; VL, \&quot;S2=\&quot; + AsText(SII), Color.GREEN);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and close &lt; (SI - ((SI - SII) / 2)), \&quot;S3=\&quot; + AsText(SIII), Color.GREEN);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and ShowLevel4 and close &lt; (SII - ((SII - SIII) / 2)), \&quot;S4=\&quot; + AsText(SIV), Color.GREEN);\n\nAddLabel(ChartLabels == 2 and Label and ZeroTest, \&quot;VH=\&quot; + AsText(VH), Color.RED);\nAddLabel(ChartLabels == 2 and Label and ZeroTest, \&quot;POC=\&quot; + AsText(PC), Color.YELLOW);\nAddLabel(ChartLabels == 2 and Label and ZeroTest, \&quot;VL=\&quot; + AsText(VL), Color.GREEN);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero, \&quot;R1=\&quot; + AsText(RI), Color.RED);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero, \&quot;R2=\&quot; + AsText(RII), Color.RED);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero, \&quot;R3=\&quot; + AsText(RIII), Color.RED);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero and ShowLevel4, \&quot;R4=\&quot; + AsText(RIV), Color.RED);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero and ShowPivotPoint, \&quot;PP=\&quot; + AsText(PP), Color.WHITE);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero, \&quot;S1=\&quot; + AsText(SI), Color.GREEN);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero, \&quot;S2=\&quot; + AsText(SII), Color.GREEN);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero, \&quot;S3=\&quot; + AsText(SIII), Color.GREEN);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero and ShowLevel4, \&quot;S4=\&quot; + AsText(SIV), Color.GREEN);\n\nAddLabel(ChartLabels == 3 and Label and VArea and ZeroTest, “InsideValueArea”, Color.WHITE);\nAddLabel(ChartLabels == 3 and Label and VAreaabove and ZeroTest, “AboveValueArea”, Color.GREEN);\nAddLabel(ChartLabels == 3 and Label and VAreabelow and ZeroTest, \&quot;BelowValueArea”, Color.RED);\nAddLabel(!AfterHours and !Chart1 and !HideAfterHoursLabel, \&quot;NoShadowPlotAfterHours\&quot;, Color.ORANGE);\n\n#Chart Bubbles\ninput BubbleLeftSide = yes;\ndef  leftLoc =  if BubbleLeftSide then 1 else -1;#\nAddChartBubble(IsNaN(VH[leftLoc]) and ValueBubbles, VH, VH, Color.RED, no);\nAddChartBubble(IsNaN(PC[leftLoc]) and ValueBubbles, PC, PC, Color.YELLOW, no);\nAddChartBubble(IsNaN(VL[leftLoc]) and ValueBubbles, VL, VL, Color.GREEN, no);\nAddChartBubble(IsNaN(S1[leftLoc]) and PivotBubbles and S1_auto_show, S1, “S1”, Color.WHITE, no);\nAddChartBubble(IsNaN(S2[leftLoc]) and PivotBubbles and S2_auto_show, S2, “S2”, Color.WHITE, no);\nAddChartBubble(IsNaN(S3[leftLoc]) and PivotBubbles and S1_auto_show, S3, “S3”, Color.WHITE, no);\nAddChartBubble(IsNaN(S4[leftLoc]) and PivotBubbles and ShowLevel4 and S4_auto_show, S4, “S4”, Color.WHITE, no);\nAddChartBubble(IsNaN(PP[leftLoc]) and ShowPivotPoint and PivotBubbles, PP, “PP”, Color.WHITE, no);\nAddChartBubble(IsNaN(R1[leftLoc]) and PivotBubbles and R1_auto_show, R1, “R1”, Color.WHITE, no);\nAddChartBubble(IsNaN(R2[leftLoc]) and PivotBubbles and R2_auto_show, R2, “R2”, Color.WHITE, no);\nAddChartBubble(IsNaN(R3[leftLoc]) and PivotBubbles and R3_auto_show, R3, “R3”, Color.WHITE, no);\nAddChartBubble(IsNaN(R4[leftLoc]) and PivotBubbles  and ShowLevel4 and R4_auto_show, R4, “R4”, Color.WHITE, no);\n\n\n#Opening Range Breakout Functions\ndef ORBopen = SecondsTillTime(945) &lt;= 0;\ndef IsMarketOpen = ORBopen and CloseTime2;\ndef FirstBar = If(GetDay()[1] != GetDay(), GetDay() - 1, 0);\ndef OpenRange = SecondsFromTime(945);\ndef PastOpeningRange = OpenRange &gt;= (OrbTime - 15) * 60;\ndef DisplayedHigh = If(high &gt; DisplayedHigh[1] and IsMarketOpen and ShowORB, high, If(IsMarketOpen and !FirstBar, DisplayedHigh[1], high));\ndef DisplayedLow = If(low &lt; DisplayedLow[1] and IsMarketOpen and ShowORB, low, If(IsMarketOpen and !FirstBar, DisplayedLow[1], low));\ndef ORBHi = If(PastOpeningRange, ORBHi[1], DisplayedHigh);\ndef ORBLo  = If(PastOpeningRange, ORBLo[1], DisplayedLow);\nplot ORBHigh = If(Chart1 and PastOpeningRange and IsMarketOpen and ShowORB, ORBHi, Na);\nplot ORBLow  = If(Chart1 and PastOpeningRange and IsMarketOpen and ShowORB, ORBLo, Na);\n\n#Plot Criteria\nORBHigh.SetDefaultColor(Color.MAGENTA);\nORBHigh.SetStyle(Curve.SHORT_DASH);\nORBHigh.HideBubble();\nORBLow.SetDefaultColor(Color.MAGENTA);\nORBLow.SetStyle(Curve.SHORT_DASH);\nORBLow.HideBubble();\nVH.SetDefaultColor(Color.RED);\nPC.SetDefaultColor(Color.YELLOW);\nPC.SetStyle(Curve.LONG_DASH);\nVL.SetDefaultColor(Color.GREEN);\nR4.SetDefaultColor(Color.WHITE);\nR3.SetDefaultColor(Color.WHITE);\nR2.SetDefaultColor(Color.WHITE);\nR1.SetDefaultColor(Color.WHITE);\nPP.SetDefaultColor(Color.WHITE);\nS4.SetDefaultColor(Color.WHITE);\nS3.SetDefaultColor(Color.WHITE);\nS2.SetDefaultColor(Color.WHITE);\nS1.SetDefaultColor(Color.WHITE);\n\n#cloudhigh.SetDefaultColor(Color.RED);\n#cloudlow.SetDefaultColor(Color.GREEN);\nAddLabel(showVAH , \&quot;vah= \&quot; + AsText(VAH), Color.PINK);\nAddLabel(showVAH , \&quot;val= \&quot; + AsText(VAL), Color.LIGHT_GREEN);\nAddLabel(showVAH , \&quot;poc= \&quot; + AsText(POC), Color.LIGHT_ORANGE);\nAddLabel(showVAH , \&quot;pivot= \&quot; + AsText(Pivot), Color.PINK);\nVH.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nPC.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nVL.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nPP.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nR1.SetStyle(Curve.SHORT_DASH);\nR1.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nR2.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nR3.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nR4.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nS1.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nS2.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nS3.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nS4.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\n\n\nR1.SetHiding(R1_auto_show);\nR2.SetHiding(R2_auto_show);\nR3.SetHiding(R3_auto_show);\nR4.SetHiding(R4_auto_show);\nS1.SetHiding(S1_auto_show);\nS2.SetHiding(S2_auto_show);\nS3.SetHiding(S3_auto_show);\nS4.SetHiding(S4_auto_show);\n\n\n\n\ndef opacity_inv ;#= if (opacity &gt;= 0 and opacity &lt;= 100) then 100 - opacity else 50;\nif (no)#show_VA_cloud2\nthen\n{\n   opacity_inv = 1000;\n}\nelse\n\n{\n   opacity_inv = if (opacity &gt;= 0 and opacity &lt;= 100) then 100 - opacity else 50;\n}\n\ndef Vls  = If(Chart2 and ShowCloud2 and VA_low_short &gt; 0, VA_low_short, Na);\ndef Vll  = If(Chart2 and ShowCloud2  and VA_low_long &gt; 0, VA_low_long, Na);\ndef Vhs  = If(Chart2 and ShowCloud2  and VA_high_short &gt; 0, VA_high_short, Na);\ndef Vhl  = If(Chart2 and ShowCloud2  and VA_high_long &gt; 0, VA_high_long, Na);\n\nAddCloud(Vls,  Vll , CreateColor(144 * opacity_inv / 100, 240, 144 * opacity_inv / 100),  CreateColor(144 * opacity_inv / 100, 240, 144 * opacity_inv / 100));\n\nAddCloud(Vhs,   Vhl,  CreateColor(204, 184 * opacity_inv / 100, 202 * opacity_inv / 100),   CreateColor(204, 184 * opacity_inv / 100, 202 * opacity_inv / 100));\n\n\n#S5.SetHiding(!S5_auto_show);\n#AddLabel(yes , \&quot;R44= \&quot; + (S5_auto_show), Color.pink);\n#AddLabel(yes , \&quot;R5= \&quot; + ((RIII + ((RIV - SIII) / 2))), Color.pink);&quot;,name=&quot;_27529bda_67d5_4abb_8369_e61450a2de3a&quot;}){inputsMap:TreeMap6{^(&quot;PivotTimeFrame&quot;,&quot;2 HOURs&quot;),^(&quot;ProfileTimeFrame&quot;,&quot;TWO_HOUR&quot;),!get:Integer4(&quot;triggerLowerVaLimitHigh&quot;)},inputsMap=@TreeMap6,plots{5:{lineStyle=1},7:{hiding=&lt;T},8:{hiding=&lt;T},12:{lineStyle=1},22:{hiding=&lt;T},23:{hiding=&lt;T},24:{hiding=&lt;T,paintingStrategy=12}}})}},!get(#%4.SubgraphId(&quot;Volume&quot;)){height=80},^(#%4.SubgraphId(&quot;Subgraph7&quot;),#%4.SubgraphStorableModel{height=274,storableIndicators{+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence:ScriptEssence0{body=&quot;declare lower;\n\ninput fastLength = 23;\ninput slowLength = 50;\ninput KPeriod = 10;\ninput DPeriod = 3;\ninput over_bought = 75;\ninput over_sold = 25;\ninput averageType = AverageType.EXPONENTIAL;\ndef price1= open;\ninput rsi_th=42;\ndef length1 =22;\n\ndef macdRsi =   reference MomentumSMA();\n# ((low - Highest(price1[1], length1)) / Highest(price1[1], length1)) * 100;\n#((price1 - Lowest(low[1], length1)) / (Highest(high[1], length1) - Lowest(low[1], length1)));\n#reference RSI(length = 14, price = close );\ndef fastK1rsi = FastKCustom(macdRsi, KPeriod);\ndef fastD1Rsi = MovingAverage(averageType, fastK1rsi, DPeriod);\ndef fastK2rsi = FastKCustom(fastD1Rsi, KPeriod);\n#plot RSIm = fastD1Rsi;#MovingAverage(averageType, fastK2rsi, DPeriod);\n\ninput priceSch =close;\n\ndef macd = MovingAverage(averageType, priceSch, fastLength) - MovingAverage(averageType, priceSch, slowLength);\ndef fastK1 = FastKCustom(macd, KPeriod);\ndef fastD1 = MovingAverage(averageType, fastK1, DPeriod);\ndef fastK2 = FastKCustom(fastD1, KPeriod);\nplot STC = MovingAverage(averageType, fastK2, DPeriod);\n\nplot OverBought = over_bought;\nplot OverSold = over_sold;\n\nSTC.SetDefaultColor(GetColor(8));\nOverBought.SetDefaultColor(GetColor(7));\nOverSold.SetDefaultColor(GetColor(7));\ndef cldH= if STC &gt; OverBought then STC else OverBought;\nAddCloud(cldH,OverBought, Color.Green, Color.Green);\n\ndef cldL= if STC &lt; OverSold then STC else OverSold;\nAddCloud(cldL,OverSold, Color.RED, Color.RED);\nSTC.setlineWeight(3);\nOverBought.setStyle(curve.short_dash);\noversold.setStyle(curve.short_dash);\n####$$$$$$$$\n\n\ninput priceSlm = close;\n\ninput superFastLength = 8;\n\ninput fastLengthSlm = 13;\n\ninput slowLengthSlm = 21;\n\ninput displace = 0;\n\n\ninput averageTypeSlm = AverageType.EXPONENTIAL;\n\ndef mov_avg8 = MovingAverage(averageTypeSlm, priceSlm[-displace], superFastLength);\n\ndef mov_avg13 = MovingAverage(averageTypeSlm, priceSlm[-displace], fastLengthSlm);\n\ndef mov_avg21 = MovingAverage(averageTypeSlm, priceSlm[-displace], slowLengthSlm);\n \n#moving averages\n\ndef Superfast = mov_avg8;\n\ndef Fast = mov_avg13;\n\ndef Slow = mov_avg21;\n\n\ndef buy = mov_avg8 &gt; mov_avg13 and mov_avg13 &gt; mov_avg21 and low &gt; mov_avg8;\n\ndef stopbuy = mov_avg8 &lt;= mov_avg13;\n\ndef buynow = !buy[1] and buy;\n\ndef buysignal = CompoundValue(1, if buynow and !stopbuy then 1 else if buysignal[1] == 1 and stopbuy then 0 else buysignal[1], 0);\n\n\ndef Buy_Signal = buysignal[1] == 0 and buysignal == 1;\n\ndef Momentum_Down = buysignal[1] == 1 and buysignal == 0;\n\n\ndef sell = mov_avg8 &lt; mov_avg13 and mov_avg13 &lt; mov_avg21 and high &lt; mov_avg8;\n\ndef stopsell = mov_avg8 &gt;= mov_avg13;\n\ndef sellnow = !sell[1] and sell;\n\ndef sellsignal = CompoundValue(1, if sellnow and !stopsell then 1 else if sellsignal[1] == 1 and stopsell then 0 else sellsignal[1], 0);\n\n\ndef Sell_Signal = sellsignal[1] == 0 and sellsignal;\n\ndef Momentum_Up = sellsignal[1] == 1 and sellsignal == 0;\n \n# when using this as a custom scan, change the word plot to def\n# then remove the \'#\' from in front of one of the \&quot;plot Scan\&quot; statements below\ndef Colorbars = if buysignal == 1 then 1 else if sellsignal == 1 then -1 else if buysignal == 0 or sellsignal == 0 then 0 else 0;\n\n# use this first Scan plot for SLM Ribbon Momentum UP\n#plot Scan = if Colorbars == 1 then yes else no;\n\n# use this second Scan plot for SLM Ribbon Momentum DOWN\n#plot Scan = if Colorbars == -1 then yes else no;\n\n\n\n\n\n\n###############\n\ndef Colorbars1 = if buysignal == 1 then 1 else if sellsignal == 1 then 2 else if buysignal == 0 or sellsignal == 0 then 3 else 0;\n\n\n\nSTC.definecolor(\&quot;Buy_Signal_Bars\&quot;, color.dark_green);\n\nSTC.definecolor(\&quot;Sell_Signal_Bars\&quot;, color.red);\n\nSTC.definecolor(\&quot;NeutralUp\&quot;, color.plum);\n\nSTC.definecolor(\&quot;NeutralDown\&quot;, color.orange);\n\nSTC.AssignValueColor(if Colorbars1 ==1 then STC.color(\&quot;buy_signal_bars\&quot;) else if colorbars1 ==2 then STC.color(\&quot;Sell_Signal_bars\&quot;) else if Momentum_Up then  STC.color(\&quot;neutralUp\&quot;) else STC.color(\&quot;neutralDown\&quot;) );\n\n\nplot UpSignal = if (buysignal and STC crosses above over_sold) then STC else Double.NaN;\nplot DownSignal = if (sellsignal and STC crosses below over_bought) then STC else Double.NaN;\ninput showBreakoutSignals =yes;\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\n\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\n\n\n\n\n\n\n\n\n\n\n######$$$$\n\n#########################RSI\n\n\ninput length = 14;\ninput over_BoughtRsi = 70;\ninput over_SoldRSI = 30;\ninput priceRsi = close;\ninput priceRsi2 = vwap;\n\n\n\ninput averageTypeRSI = AverageType.WILDERS;\ninput averageTypeRSI2 = AverageType.simple;\n#input showBreakoutSignals = no;\n\ninput showlable = yes;\n\ndef NetChgAvg = MovingAverage(averageTypeRSI, priceRsi - priceRsi[1], length);\ndef TotChgAvg = MovingAverage(averageTypeRSI, AbsValue(priceRsi - priceRsi[1]), length);\ndef ChgRatio = if TotChgAvg != 0 then NetChgAvg / TotChgAvg else 0;\n\nplot RSI = 50 * (ChgRatio + 1);\n\n\ndef NetChgAvg2 = MovingAverage(averageTypeRSI2, priceRsi2 - priceRsi2[1], length+5);\ndef TotChgAvg2 = MovingAverage(averageTypeRSI2, AbsValue(priceRsi2 - priceRsi2[1]), length+5);\ndef ChgRatio2= if TotChgAvg2 != 0 then NetChgAvg2 / TotChgAvg2 else 0;\n\nplot RSI2 = 50 * (ChgRatio2 + 1);\n\n\n\n\n\n\nplot OverSoldR = over_SoldRSI;\nplot OverBoughtR = over_BoughtRsi;\n#plot UpSignal = if RSI crosses above OverSold then OverSold else Double.NaN;\n#plot DownSignal = if RSI crosses below OverBought then OverBought else Double.NaN;\nplot MID = 50;\n\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\nRSI.DefineColor(\&quot;OverBought\&quot;, Color.LIGHT_RED);\nRSI.DefineColor(\&quot;Normal\&quot;, GetColor(7));\nRSI.DefineColor(\&quot;OverSold\&quot;, Color.LIGHT_GREEN);\nRSI.DefineColor(\&quot;Below50\&quot;, Color.CYAN);\nRSI.DefineColor(\&quot;Above50\&quot;, Color.PINK);\n\nRSI.AssignValueColor(if RSI &gt;= over_Bought then RSI.Color(\&quot;OverBought\&quot;) else if RSI &lt;= over_Sold then RSI.Color(\&quot;OverSold\&quot;) else if (RSI &gt; over_Sold and RSI &lt; rsi_th) then RSI.Color(\&quot;Below50\&quot;) else if (RSI &lt; over_Bought and RSI &gt;rsi_th) then RSI.Color(\&quot;Above50\&quot;) else  RSI.Color(\&quot;Normal\&quot;)) ;\nOverSoldR.SetDefaultColor(GetColor(8));\nOverBoughtR.SetDefaultColor(GetColor(8));\n#UpSignal.SetDefaultColor(Color.UPTICK);\n#UpSignal.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\n#DownSignal.SetDefaultColor(Color.DOWNTICK);\n#DownSignal.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\nOverSoldR.hide();\nOverBoughtR.hide();\nmid.hide();\n\nAddLabel(showlable, \&quot;RSI = \&quot; + RSI , if RSI &gt; over_Bought  then Color.RED else if RSI &lt; over_Sold then  Color.GREEN else Color.GRAY);\ndef cldRSIL= if RSI &lt; OverSoldR then RSI else OverSoldR;\nAddCloud(cldRSIL,OverSoldR,  Color.Green, Color.Green);\n\ndef cldRsiH= if RSI &gt; OverBought then RSI else OverBoughtR;\nAddCloud(cldRsiH,OverBoughtR,Color.RED, Color.RED);\n\n\n\ndef ImpVol = imp_volatility();\n\nAddLabel(showlable, \&quot;iV= \&quot; + ImpVol, Color.GRAY);\nMID.DefineColor(\&quot;Mid\&quot;, Color.GREEN);\n\n\n## momentum\n\ndef CloseOpenDiff = if close &gt; open then close - open else 0;\ndef OpenCloseDiff = if close &lt; open then open - close else 0;\ndef avgCloseOpen = Average(CloseOpenDiff, length);\ndef avgOpenClose = Average(OpenCloseDiff, length);\n\n#plot IMI = avgCloseOpen / (avgCloseOpen + avgOpenClose) * 100;\n#IMI.SetDefaultColor(GetColor(8));\n##############################\n\n\n\n#\n# TD Ameritrade IP Company, Inc. (c) 2018-2020\n#\n\n\n\ninput vfiLength = 130;\ninput averageLength = 100;\ninput trendQualityLength = 63;\ninput maxStiffness = 7;\ninput marketIndex = \&quot;SPY\&quot;;\ninput weightForMoneyFlow = 1.0;\ninput weightForTradingAboveAverage = 1.0;\ninput weightForUptrend = 1.0;\ninput weightForTrendQuality = 1.0;\ninput weightForMarketDirection = 2.0;\ninput showLabel = No;\n\ndef vfi = reference VolumeFlowIndicator(length = vfiLength, \&quot;max volume cut off\&quot; = 2.5);\ndef sma = Average(close, averageLength);\ndef ema = ExpAverage(close(marketIndex), averageLength);\ndef stiffness = Sum(close &lt; sma, trendQualityLength);\n\ndef Score;\ndef MoneyFlow = vfi &gt; 0;\ndef TradingAboveAverage = close &gt; sma;\ndef Uptrend = sma &gt; sma[4];\ndef TrendQuality = stiffness &lt;= maxStiffness;\ndef MarketDirection = ema &gt;= ema[2];\n\nScore = weightForMoneyFlow * MoneyFlow + weightForTradingAboveAverage * TradingAboveAverage + weightForUptrend * Uptrend + weightForTrendQuality * TrendQuality + weightForMarketDirection * MarketDirection;\n\n\nAddLabel(showLabel and MoneyFlow, \&quot;Money flow\&quot;, GetColor(2));\nAddLabel(showLabel and TradingAboveAverage, \&quot;Trading above average\&quot;, GetColor(3));\nAddLabel(showLabel and Uptrend, \&quot;Uptrend\&quot;, GetColor(4));\nAddLabel(showLabel and TrendQuality, \&quot;Trend quality\&quot;,GetColor(5));\nAddLabel(showLabel and TrendQuality, \&quot;Trend quality\&quot;,GetColor(5));\nAddLabel(showLabel and MarketDirection, \&quot;Market direction\&quot;,GetColor(6));\nAddLabel(showLabel , \&quot;Market score \&quot;+ score,GetColor(7));&quot;,name=&quot;_ef7ee43b_ddba_4881_809e_96703a28d1ce&quot;}){hidden=&lt;T,inputsMap:TreeMap7{^(&quot;priceRsi&quot;,&quot;CLOSE&quot;),^(&quot;priceRsi2&quot;,&quot;VWAP&quot;),^(&quot;priceSlm&quot;,&quot;CLOSE&quot;),!get:Integer5(&quot;over_BoughtRsi&quot;),!get:FundamentalType0(&quot;priceSch&quot;)},inputsMap=@TreeMap7,plots{5:{hiding=&lt;T}}}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# @new\n# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2008-2021\n#\n\ndeclare lower;\n\ninput price = close;\ninput momentumLength = 28;\ninput smaLength = 28;\n\nassert(momentumLength &gt; 0, \&quot;\'momentum length\' must be positive: \&quot; + momentumLength);\n\nplot Momentum = price - price[momentumLength];\nplot Avg = Average(data = Momentum, length = smaLength);\nplot ZeroLine = 0;\n\nMomentum.SetDefaultColor(GetColor(1));\nAvg.SetDefaultColor(GetColor(5));\nZeroLine.SetDefaultColor(GetColor(0));&quot;,name=&quot;MomentumSMA&quot;}){hidden=&lt;T,inputsMap:TreeMap8{^(&quot;price&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap8,leftAxis=&lt;T,plots{0:{color=@CustomColor2},1:{color=@CustomColor1,lineStyle=3}}})}}),^(#%4.SubgraphId(&quot;Subgraph11&quot;),#%4.SubgraphStorableModel{height=165,storableIndicators.+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;declare lower;\ninput priceSmi = hlc3;\ninput price = close;\n\ninput over_bought = 40.0;\ninput over_sold = -40.0;\ninput percentDLength = 4;\ninput percentKLength = 5;\n\ndef min_low = Lowest(low, percentKLength);\ndef max_high = Highest(high, percentKLength);\ndef rel_diff = priceSmi - (max_high + min_low) / 2;\ndef diff = max_high - min_low;\n\ndef avgrel = ExpAverage(ExpAverage(rel_diff, percentDLength), percentDLength);\ndef avgdiff = ExpAverage(ExpAverage(diff, percentDLength), percentDLength);\n\nplot SMI = if avgdiff != 0 then avgrel / (avgdiff / 2) * 100 else 0;\nSMI.SetDefaultColor(GetColor(1));\n\nplot AvgSMI = ExpAverage(SMI, percentDLength);\nAvgSMI.SetDefaultColor(Color.CYAN);\nplot z = 0;\nz.SetStyle(Curve.SHORT_DASH);\nz.SetDefaultColor(Color.YELLOW);\n\nplot overbought = over_bought;\noverbought.SetDefaultColor(GetColor(5));\n\nplot oversold = over_sold;\noversold.SetDefaultColor(GetColor(5));\n\ninput Buyth=-40;\n\ninput thCondition = {default \&quot;blw\&quot; , \&quot;abv\&quot;};\ndef cond;\ndef Na = Double.Nan;\n\nswitch (thCondition)\n{\n case blw: \n    cond = 1;\ncase abv :\n   cond = 0;\n}\nplot buySmi;\nplot sellsmi;\n\nif cond \n{\n buySmi = if SMI crosses above AvgSMI and SMI &lt;Buyth and SMI&lt;over_bought then SMI* 0.996 else Na;\n#sell = if SMI crosses below AvgSMI and SMI &gt;Sth and SMI&lt;80 then 1 else 0;\n}\nelse{\n buySmi = if SMI crosses above AvgSMI and SMI &gt;Buyth and SMI&lt;60 then Smi* 0.996 else na;\n\n\n}\n\n\n\nsellSmi = if SMI crosses below AvgSMI and SMI &gt;60 and SMI&lt;80 then smi* 1.004 else na;\n\nSellSmi.setpaintingStrategy(PaintingStrategy.ARROW_down);\n\nsellSmi.setDefaultColor(color.pink);\nBuySmi.setpaintingStrategy(PaintingStrategy.ARROW_up);\n\nBuySmi.setDefaultColor(color.yellow);\nBuySMI.SetLineWeight(3);\nSellSMI.SetLineWeight(3);\n\n\n#AddCloud(-100, over_sold, Color.RED, Color.GREEN);\n#AddCloud(over_bought, 100, Color.GREEN, Color.RED);\n\n#####\ndef cldH = if SMI &gt;= overbought then SMI else overbought;\nAddCloud(cldH, overbought, Color.GREEN, Color.GREEN);\n\ndef cldL = if SMI &lt; oversold then SMI else oversold;\nAddCloud(cldL, oversold, Color.RED, Color.RED);\noverbought.SetDefaultColor(GetColor(7));\noversold.SetDefaultColor(GetColor(7));\nSMI.SetLineWeight(1);\nAvgSMI.SetLineWeight(3);\noverbought.SetStyle(Curve.SHORT_DASH);\noversold.SetStyle(Curve.SHORT_DASH);\n\n####\n\n\n####$$$$$$$$\n\n\ninput priceSlm = close;\n\ninput superFastLength = 8;\n\ninput fastLengthSlm = 13;\n\ninput slowLengthSlm = 21;\n\ninput displaceSlm = 0;\n\n\ninput averageTypeSlm = AverageType.EXPONENTIAL;\n\ndef mov_avg8 = MovingAverage(averageTypeSlm, priceSlm[-displaceSlm], superFastLength);\n\ndef mov_avg13 = MovingAverage(averageTypeSlm, priceSlm[-displaceSlm], fastLengthSlm);\n\ndef mov_avg21 = MovingAverage(averageTypeSlm, priceSlm[-displaceSlm], slowLengthSlm);\n \n#moving averages\n\ndef Superfast = mov_avg8;\n\ndef Fast = mov_avg13;\n\ndef Slow = mov_avg21;\n\n\ndef buy = mov_avg8 &gt; mov_avg13 and mov_avg13 &gt; mov_avg21 and low &gt; mov_avg8;\n\ndef stopbuy = mov_avg8 &lt;= mov_avg13;\n\ndef buynow = !buy[1] and buy;\n\ndef buysignal = CompoundValue(1, if buynow and !stopbuy then 1 else if buysignal[1] == 1 and stopbuy then 0 else buysignal[1], 0);\n\n\ndef Buy_Signal = buysignal[1] == 0 and buysignal == 1;\n\ndef Momentum_Down = buysignal[1] == 1 and buysignal == 0;\n\n\ndef sell = mov_avg8 &lt; mov_avg13 and mov_avg13 &lt; mov_avg21 and high &lt; mov_avg8;\n\ndef stopsell = mov_avg8 &gt;= mov_avg13;\n\ndef sellnow = !sell[1] and sell;\n\ndef sellsignal = CompoundValue(1, if sellnow and !stopsell then 1 else if sellsignal[1] == 1 and stopsell then 0 else sellsignal[1], 0);\n\n\ndef Sell_Signal = sellsignal[1] == 0 and sellsignal;\n\ndef Momentum_Up = sellsignal[1] == 1 and sellsignal == 0;\n \n# when using this as a custom scan, change the word plot to def\n# then remove the \'#\' from in front of one of the \&quot;plot Scan\&quot; statements below\n########\n\ninput length = 20;\ninput priceHMA = close;\n\ndef HMA = MovingAverage(AverageType.HULL, priceHMA, length);\ndef HMA_Up =  HMA &gt; HMA[1];\ndef HMA_Down = ! HMA_Up;\n\n###############\n\n#def Colorbars1 = if buysignal == 1 then 1 else if sellsignal == 1 then 2 else if buysignal == 0 or sellsignal == 0 then 3 else 0;\n\n\n\nAvgSMI.DefineColor(\&quot;Buy\&quot;, Color.DARK_GREEN);\n\n\nAvgSMI.DefineColor(\&quot;Sell\&quot;, Color.RED);\n\nAvgSMI.DefineColor(\&quot;Neutral\&quot;, Color.PLUM);\n#RSI.DefineColor(\&quot;NeutralDown\&quot;, Color.orange);\nAvgSMI.DefineColor(\&quot;HullMA_up\&quot;, Color.BLUE);\n\nAvgSMI.DefineColor(\&quot;HullMA_down\&quot;, Color.ORANGE);\n\nAvgSMI.AssignValueColor(if buysignal and HMA_Up then AvgSMI.Color(\&quot;Buy\&quot;) else if buysignal and !HMA_Up then AvgSMI.Color(\&quot;HullMA_down\&quot;) else if sellsignal and HMA_Down  then AvgSMI.Color(\&quot;Sell\&quot;) else  if sellsignal and !HMA_Down  then AvgSMI.Color(\&quot;HullMA_up\&quot;) else  AvgSMI.Color(\&quot;neutral\&quot;));\n;#\n# if Momentum_Up then  RSI.color(\&quot;neutralUp\&quot;) else  RSI.color(\&quot;neutraldown\&quot;));\n\n\n\n\n\n####$$$$$$$$$$$$$$$$\n###############\n\n\n\n#plot UpSignal = if (buysignal and SMI crosses above AvgSMI-3 and SMI &lt;40) then SMI-3 else Double.NaN;\n\nplot UpSignal = if ((buysignal or Momentum_Up) and SMI crosses above AvgSMI ) then SMI - 3 else Double.NaN;\nplot DownSignal = if (sellsignal and SMI crosses below AvgSMI + 3 and SMI &gt; over_bought) then SMI + 3 else Double.NaN;\ninput showBreakoutSignals = yes;\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\n\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\n\n\n\n\n\n######$$$$\n\n\n#RSI\ninput overBoughtRsi = 75;\ninput overSoldRsi = 25;\ninput rsiLength = 14;\ninput rsiPrice = close;\ninput rsi_th = 42;\ndef rsi_val = reference RSI(length = rsiLength, price = rsiPrice );\nplot rsi_val_normalized = rsi_val - 50;\n####\n\n\n\nAddLabel(yes, \&quot;RSI = \&quot; + rsi_val , if rsi_val &gt; overBoughtRsi  then Color.RED else if rsi_val &lt; overSoldRsi then  Color.GREEN else Color.GRAY);\n##########\n#########################RSI\n\n\n\n\n\nrsi_val_normalized.DefineColor(\&quot;OverBought\&quot;, Color.LIGHT_RED);\nrsi_val_normalized.DefineColor(\&quot;Normal\&quot;, GetColor(7));\nrsi_val_normalized.DefineColor(\&quot;OverSold\&quot;, Color.LIGHT_GREEN);\nrsi_val_normalized.DefineColor(\&quot;Below50\&quot;, Color.CYAN);\nrsi_val_normalized.DefineColor(\&quot;Above50\&quot;, Color.PINK);\n\nrsi_val_normalized.AssignValueColor(if rsi_val &gt;= overBoughtRsi then rsi_val_normalized.Color(\&quot;OverBought\&quot;) else if rsi_val &lt;= overSoldRsi then rsi_val_normalized.Color(\&quot;OverSold\&quot;) else if (rsi_val &gt; overSoldRsi and rsi_val &lt; rsi_th) then rsi_val_normalized.Color(\&quot;Below50\&quot;) else if (rsi_val &lt; overBoughtRsi and rsi_val &gt; rsi_th) then rsi_val_normalized.Color(\&quot;Above50\&quot;) else  rsi_val_normalized.Color(\&quot;Normal\&quot;)) ;\n\n\n\n\n\n#########\ndef ImpVol = imp_volatility();\n\nAddLabel(yes, \&quot;iV= \&quot; + ImpVol, Color.GRAY);\n\n#trend reversal\ndef y = rsi_val ;\ninput riReversLength = 2;\ninput lookBack = 2;\n\n\ndef rsi_expAvg = ExpAverage(rsi_val, riReversLength);\n\n#trend reversal\ndef overBoughtReversal = if ((rsi_expAvg &gt; overBoughtRsi)within 2 bar) and  (rsi_expAvg crosses above rsi_val) then price else 0;# if (rsi_expAvg &gt; OverBought and  rsi_expAvg crosses above rsi_val  within 3 bar ) then 40 else 0;\ndef oversoldRevesal = if ((rsi_expAvg &lt; overSoldRsi)within 2 bar) and  (rsi_expAvg crosses below rsi_val within 2 bar) then price else 0;\n\n##############\n########!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n#vwap vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\n\n#####^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n#MACD\n\ninput fastLength = 12;\ninput slowLength = 26;\ninput MACDLength = 9;\ninput displace = 0;\ndef fastAvg = Sum(volume * price, fastLength) / Sum(volume, fastLength);\ndef slowAvg = Sum(volume * price, slowLength) / Sum(volume, slowLength);\ndef Value = fastAvg - slowAvg;\ndef Avg = ExpAverage(Value, MACDLength);\ndef MACD_Diff  = Value - Avg;\n#def ZeroLine = 0;\n\ninput def_cond = no;\ndef MACD_cond_logic = if (def_cond) then MACD_Diff &lt;= 0 else yes;\n\n\n#MACD Pivot reversal\n#input FilterLength=3;\n######################\n#def MACDV_Diff_expAvg = ExpAverage(MACD_Diff, FilterLength);\n#plot oversoldRevesalMACDV =if ((Diff_MACDV &lt; MacdZeroLine)within lookBack bar) and  ( Diff_MACDV crosses above   MACDV_Diff_expAvg within lookBack bar)and Diff_MACDV &gt; Diff_MACDV[1] then 1 else 0;# if (MACDV_Diff_expAvg &gt; OverBought and  MACDV_Diff_expAvg crosses above rsi_val  within 3 bar ) then 40 else 0;\n#plot overBoughtReversalMACDV = if ((Diff_MACDV &gt; MacdZeroLine)within lookBack bar) and  (MACDV_Diff_expAvg crosses above  Diff_MACDV  within lookBack bar)  and Diff_MACDV &lt; Diff_MACDV[1] and Diff_MACDV&gt;0 then 1 else 0;\n\n\n#trend Pivot reversal\ndef twoBarPivotMACD_Buy =  MACD_Diff &gt; MACD_Diff[1] and MACD_Diff[1] &gt; MACD_Diff[2] and MACD_Diff[2] &lt; MACD_Diff[3] and MACD_Diff[3] &lt; MACD_Diff [4];\ndef twoBarPivotMACD_Sell = MACD_Diff &lt; MACD_Diff[1] and MACD_Diff[1] &lt; MACD_Diff[2] and MACD_Diff[2] &gt; MACD_Diff[3] and MACD_Diff[3] &gt; MACD_Diff [4];\n###################\n\n\ndef uptrend = if price &gt; price[1] and price[1] &gt;= price[2] then 1 else 0;\n\n#####################################-----------------\n\n\n\ndef SMI_Buy_Signal = if  (AvgSMI crosses above overbought  within lookBack bar) and SMI &gt;  AvgSMI and (rsi_val &gt; overSoldRsi and rsi_val &lt; overBoughtRsi + 10 ) and (uptrend) then 1 else 0;\n\n\nplot buy2 = SMI_Buy_Signal;\n\n#def  buySvix_Signal = if ( MACD_cond_logic  and  EMA_condition and  oversoldRevesal  and buySvix &lt; Zeroline - 10 ) then 1 else 0;\n#plot buy3 = buySvix_Signal;\n\n\n\n\n\n\ndef SMI_Sell_Signal = if ( (SMI crosses below AvgSMI within lookBack bar) and (overBoughtReversal)) then 1 else 0;\n#def sellSignal2 = if ((rsi_val  &gt; overBoughtRsi within 3 bar) and (smi crosses below AvgSMI within 3 bar)) then 1 else 0;\n\n\nplot sell2 = SMI_Sell_Signal;\n\n#######\n\n#def FVE_buySignal = conVwapBuy and oversoldRevesal and pFVE_Bull  and MACD_cond_logic ;# and Diff &gt;= 0;\n#def sig_buy = pFVE_Bull and Diff &gt;= 0;\n#plot buy4 = FVE_buySignal ;\n\n\n#def FVE_sellSignal = overBoughtReversal and pFVE_Bear ;\n#plot sell4 = FVE_sellSignal;\nplot buy5 = twoBarPivotMACD_Buy and oversoldRevesal;\nplot sell5 = twoBarPivotMACD_Sell and overBoughtReversal;\n\n####\n#def buySignal2 = if (oversoldRevesal  and buythedip2 &lt; Zeroline ) then 1 else 0;\n\n#def buySignal3 = if ( oversoldRevesal  and buythedip3 &lt; Zeroline - 10 ) then 1 else 0;\n#plot buy3 = buySignal3;\ninput bubble = no;\nAddChartBubble(bubble and buy2 == 1, buy2, \&quot;B2SMI= \&quot; +  low[1] + \&quot; rsi \&quot; + rsi_val + \&quot; w \&quot; + vwap[1], Color.LIGHT_ORANGE, no);\n#AddChartBubble(buy3 == 1, buy3,  \&quot;B3Svix= \&quot; + price + \&quot; rsi \&quot; + rsi_val, Color.LIGHT_GRAY, no);\n#AddChartBubble(buy4 == 1, buy4,  \&quot;B4FVE= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.YELLOW, no);\nAddChartBubble(bubble and buy5 == 1, buy5,  \&quot;B5Macd= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.CYAN, no);\n\n#AddChartBubble(sell1 == 1, sell1, \&quot;S1STR= \&quot; + price + \&quot; rsi \&quot; + rsi_val, Color.LIGHT_RED, no);#Buy the Dip\n\nAddChartBubble(bubble and sell2 == 1, sell2, \&quot;S2SMI= \&quot; + price + \&quot; rsi \&quot; + rsi_val, Color.PINK, no);#Buy the Dip\n#AddChartBubble(sell4 == 1, sell4, \&quot;S4FVE= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.VIOLET, no);#Buy the Dip\nAddChartBubble(bubble and sell5 == 1, sell5, \&quot;S5Macd= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.BLUE, no);#Buy the Dip\n#AddChartBubble(oversoldRevesal , close, rsi_val, Color.blue, no);#Buy the Dip\n\ndef o = open;\ndef c = close;\ndef h = high;\ndef l = low;\n\nplot d1 = ((h - l) / o) * 100;\nplot d2 = ((h - l) / (c - o)) * 1;\nplot d = ((c - c[1]) / c[1]) * 100;\nd1.Hide();\nd2.Hide();\nd.Hide();\n\n\ninput vfiLength = 130;\ninput averageLength = 100;\ninput trendQualityLength = 63;\ninput maxStiffness = 7;\ninput marketIndex = \&quot;SPY\&quot;;\ninput weightForMoneyFlow = 1.0;\ninput weightForTradingAboveAverage = 1.0;\ninput weightForUptrend = 1.0;\ninput weightForTrendQuality = 1.0;\ninput weightForMarketDirection = 2.0;\ninput showLabel = No;\n\ndef vfi = reference VolumeFlowIndicator(length = vfiLength, \&quot;max volume cut off\&quot; = 2.5);\ndef sma = Average(close, averageLength);\ndef ema = ExpAverage(close(marketIndex), averageLength);\ndef stiffness = Sum(close &lt; sma, trendQualityLength);\n\ndef Score;\ndef MoneyFlow = vfi &gt; 0;\ndef TradingAboveAverage = close &gt; sma;\ndef Uptrend1 = sma &gt; sma[4];\ndef TrendQuality = stiffness &lt;= maxStiffness;\ndef MarketDirection = ema &gt;= ema[2];\n\nScore = weightForMoneyFlow * MoneyFlow + weightForTradingAboveAverage * TradingAboveAverage + weightForUptrend * uptrend + weightForTrendQuality * TrendQuality + weightForMarketDirection * MarketDirection;\n\n\nAddLabel(showLabel and MoneyFlow, \&quot;Money flow\&quot;, GetColor(2));\nAddLabel(showLabel and TradingAboveAverage, \&quot;Trading above average\&quot;, GetColor(3));\nAddLabel(showLabel and Uptrend1, \&quot;Uptrend\&quot;, GetColor(4));\nAddLabel(showLabel and TrendQuality, \&quot;Trend quality\&quot;, GetColor(5));\nAddLabel(showLabel and TrendQuality, \&quot;Trend quality\&quot;, GetColor(5));\nAddLabel(showLabel and MarketDirection, \&quot;Market direction\&quot;, GetColor(6));\nAddLabel(showLabel , \&quot;Market score \&quot; + Score, GetColor(7));&quot;,name=&quot;_7662dae8_fa6f_4a07_aa35_2ec04cb46236&quot;}){hidden=&lt;T,inputsMap:TreeMap9{^(&quot;price&quot;,&quot;CLOSE&quot;),^(&quot;rsiPrice&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap9})}),^(#%4.SubgraphId(&quot;Subgraph13&quot;),#%4.SubgraphStorableModel{height=158,storableIndicators.+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;declare lower;\ndef timeFrame = getAggregationPeriod();\ninput aggregationPeriod1 =AggregationPeriod.Two_MIN;\ninput useAggegateForP1 =yes;\n#input aggregationPeriod2 =AggregationPeriod.Fifteen_MIN;\n\n\n# Variables:\ndef price =if (useAggegateForP1) then close(period = aggregationPeriod1) else close;\n\n\n\ninput fastLength = 23;\ninput slowLength = 50;\ninput KPeriod = 10;\ninput DPeriod = 3;\ninput over_bought = 75;\ninput over_sold = 25;\ninput averageType = AverageType.EXPONENTIAL;\n\ndef macd = MovingAverage(averageType, price, fastLength) - MovingAverage(averageType, price, slowLength);\ndef fastK1 = FastKCustom(macd, KPeriod);\ndef fastD1 = MovingAverage(averageType, fastK1, DPeriod);\ndef fastK2 = FastKCustom(fastD1, KPeriod);\nplot STC = MovingAverage(averageType, fastK2, DPeriod);\nplot OverBought = over_bought;\nplot OverSold = over_sold;\n\nSTC.SetDefaultColor(GetColor(8));\nOverBought.SetDefaultColor(GetColor(7));\nOverSold.SetDefaultColor(GetColor(7));\ndef cldH= if STC &gt; OverBought then STC else OverBought;\nAddCloud(cldH,OverBought, Color.Green, Color.Green);\n\ndef cldL= if STC &lt; OverSold then STC else OverSold;\nAddCloud(cldL,OverSold, Color.RED, Color.RED);\n\n\n#########################RSI\n\n\ninput length = 14;\ninput over_BoughtRsi = 70;\ninput over_SoldRSI = 30;\n#input price = close;\n\n\n\ninput averageTypeRSI = AverageType.WILDERS;\ninput showBreakoutSignals = no;\n\ninput showlable = yes;\n\ndef NetChgAvg = MovingAverage(averageTypeRSI, price - price[1], length);\ndef TotChgAvg = MovingAverage(averageTypeRSI, AbsValue(price - price[1]), length);\ndef ChgRatio = if TotChgAvg != 0 then NetChgAvg / TotChgAvg else 0;\n\nplot RSI = 50 * (ChgRatio + 1);\n\n\n\n\n\nplot OverSoldR = over_SoldRSI;\nplot OverBoughtR = over_BoughtRsi;\nplot UpSignal = if RSI crosses above OverSold then OverSold else Double.NaN;\nplot DownSignal = if RSI crosses below OverBought then OverBought else Double.NaN;\nplot MID = 50;\n\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\nRSI.DefineColor(\&quot;OverBought\&quot;, Color.LIGHT_RED);\nRSI.DefineColor(\&quot;Normal\&quot;, GetColor(7));\nRSI.DefineColor(\&quot;OverSold\&quot;, Color.LIGHT_GREEN);\nRSI.DefineColor(\&quot;Below50\&quot;, Color.CYAN);\nRSI.DefineColor(\&quot;Above50\&quot;, Color.PINK);\n\nRSI.AssignValueColor(if RSI &gt;= over_Bought then RSI.Color(\&quot;OverBought\&quot;) else if RSI &lt;= over_Sold then RSI.Color(\&quot;OverSold\&quot;) else if (RSI &gt; over_Sold and RSI &lt; 50) then RSI.Color(\&quot;Below50\&quot;) else if (RSI &lt; over_Bought and RSI &gt; 50) then RSI.Color(\&quot;Above50\&quot;) else  RSI.Color(\&quot;Normal\&quot;)) ;\nOverSoldR.SetDefaultColor(GetColor(8));\nOverBoughtR.SetDefaultColor(GetColor(8));\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\nOverSoldR.hide();\nOverBoughtR.hide();\nmid.hide();\n\n\nAddLabel(showlable, \&quot;RSI = \&quot; + RSI , if RSI &gt; over_Bought  then Color.RED else if RSI &lt; over_Sold then  Color.GREEN else Color.GRAY);\ndef cldRSIL= if RSI &lt; OverSoldR then RSI else OverSoldR;\nAddCloud(cldRSIL,OverSoldR,  Color.Green, Color.Green);\n\ndef cldRsiH= if RSI &gt; OverBought then RSI else OverBoughtR;\nAddCloud(cldRsiH,OverBoughtR,Color.RED, Color.RED);\n\n\n\ndef ImpVol = imp_volatility();\n\nAddLabel(showlable, \&quot;iV= \&quot; + ImpVol, Color.GRAY);\nMID.DefineColor(\&quot;Mid\&quot;, Color.GREEN);\n\ninput vfiLength = 130;\ninput averageLength = 100;\ninput trendQualityLength = 63;\ninput maxStiffness = 7;\ninput marketIndex = \&quot;SPY\&quot;;\ninput weightForMoneyFlow = 1.0;\ninput weightForTradingAboveAverage = 1.0;\ninput weightForUptrend = 1.0;\ninput weightForTrendQuality = 1.0;\ninput weightForMarketDirection = 2.0;\ninput showLabel = No;\n\ndef vfi = reference VolumeFlowIndicator(length = vfiLength, \&quot;max volume cut off\&quot; = 2.5);\ndef sma = Average(close, averageLength);\ndef ema = ExpAverage(close(marketIndex), averageLength);\ndef stiffness = Sum(close &lt; sma, trendQualityLength);\n\ndef Score;\ndef MoneyFlow = vfi &gt; 0;\ndef TradingAboveAverage = close &gt; sma;\ndef Uptrend = sma &gt; sma[4];\ndef TrendQuality = stiffness &lt;= maxStiffness;\ndef MarketDirection = ema &gt;= ema[2];\n\nScore = weightForMoneyFlow * MoneyFlow + weightForTradingAboveAverage * TradingAboveAverage + weightForUptrend * Uptrend + weightForTrendQuality * TrendQuality + weightForMarketDirection * MarketDirection;\n\n\nAddLabel(showLabel and MoneyFlow, \&quot;Money flow\&quot;, GetColor(2));\nAddLabel(showLabel and TradingAboveAverage, \&quot;Trading above average\&quot;, GetColor(3));\nAddLabel(showLabel and Uptrend, \&quot;Uptrend\&quot;, GetColor(4));\nAddLabel(showLabel and TrendQuality, \&quot;Trend quality\&quot;,GetColor(5));\nAddLabel(showLabel and TrendQuality, \&quot;Trend quality\&quot;,GetColor(5));\nAddLabel(showLabel and MarketDirection, \&quot;Market direction\&quot;,GetColor(6));\nAddLabel(showLabel , \&quot;Market score \&quot;+ score,GetColor(7));&quot;,name=&quot;_eda484cd_ddc6_4c0a_bbe5_c38bde0176d0&quot;}){hidden=&lt;T,inputsMap:TreeMap10{^(&quot;aggregationPeriod1&quot;,&quot;THREE_MIN&quot;)},inputsMap=@TreeMap10})}),^(#%4.SubgraphId(&quot;Subgraph18&quot;),#%4.SubgraphStorableModel{height=117,storableIndicators.+(!%5.CompiledStudy.resolveStudy(@ScriptEssence0){hidden=&lt;T,inputsMap:TreeMap11{^(&quot;DPeriod&quot;,@Integer4),^(&quot;fastLength&quot;,@Integer0),^(&quot;priceRsi&quot;,&quot;CLOSE&quot;),^(&quot;priceRsi2&quot;,&quot;VWAP&quot;),^(&quot;priceSlm&quot;,&quot;CLOSE&quot;),^(&quot;slowLength&quot;,@Integer5)},inputsMap=@TreeMap11})}),^(#%4.SubgraphId(&quot;Subgraph39&quot;),#%4.SubgraphStorableModel{height=80,storableIndicators.+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;#Follow @KRose_TDA on twitter for updates to this and other scripts\n#this script provides 2 moving averages of the study chosen\n#default study in OnBalanceVolume Volume\ndeclare lower;\n#place the study desired after reference in the line below you must include the brackets \&quot;()\&quot;\n#Initial study is OnBalanceVolume\n#plot MyStudy = reference OnBalanceVolume();\ninput price = hlc3;\ndef OBV = TotalSum(Sign(close - close[1]) * volume);\nplot data =OBV;\ndata.SetDefaultColor(GetColor(4));\ninput fast_length = 9;\n\ninput slow_length = 13;\n\ninput displace = 0;\ninput showDiffOBVtoSlow = No;\ninput showDiffOBVtoFast = Yes;\ninput showDiffFastToSlow = no;\n\n################\ninput averageType = AverageType.SIMPLE;\n\nplot mov_slow = MovingAverage(averageType, data[-displace], slow_length);\n\nplot mov_fast = MovingAverage(averageType, data[-displace], fast_length);\n\n\n\n###############################\nmov_fast.SetDefaultColor(Color.CYAN);\n\nmov_slow.SetDefaultColor(Color.LIGHT_RED);\nmov_slow.SetStyle(Curve.SHORT_DASH);\n\n\n\nplot Diff = if (showDiffOBVtoFast) then  data - mov_fast else if (showDiffOBVtoSlow) then data - mov_slow else  mov_fast - mov_slow;\n\n\n\n\n#Diff.SetHiding (!showDiffOBVtoFast);\n#Diff2.SetHiding (!showDiffOBVtoSlow);\n\nDiff.AssignValueColor(if Diff &gt;= 0 then Color.UPTICK else Color.DOWNTICK);\n\nDiff.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);\n\n\n\n#####signals\ndef buy = mov_Fast &gt; mov_slow and data&gt; data[1] ;\n\ndef stopbuy = mov_Fast &lt;= mov_slow;\n\ndef buynow = !buy[1] and buy;\n\ndef buysignal = CompoundValue(1, if buynow and !stopbuy then 1 else if buysignal[1]==1 and stopbuy then 0 else buysignal[1], 0);\n\n \n\nplot Buy_Signal = buysignal[1] == 0 and buysignal==1;\n\nBuy_signal.setpaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\n\nBuy_signal.setdefaultColor(color.dark_GREEN);\n\nBuy_signal.hidetitle();\n\n#Alert(condition = buysignal[1] == 0 and buysignal == 1, text = \&quot;Buy Signal\&quot;, sound = Sound.Bell, \&quot;alert type\&quot; = Alert.BAR);\n\n \n\nplot Momentum_Down = buysignal[1] ==1 and buysignal==0;\n\nMomentum_down.setpaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);\n\nMomentum_Down.setdefaultColor(color.plum);\n\nMomentum_down.hidetitle();\n\n#Alert(condition = buysignal[1] == 1 and buysignal == 0, text = \&quot;Momentum_Down\&quot;, sound = Sound.Bell, \&quot;alert type\&quot; = Alert.BAR);\n\n\n\n\n\ndef sell = mov_Fast &lt; mov_slow ;\n\ndef stopsell = mov_Fast &gt;= mov_slow;\n\ndef sellnow = !sell[1] and sell;\n\ndef sellsignal = CompoundValue(1, if sellnow and !stopsell then 1 else if sellsignal[1]==1 and stopsell then 0 else sellsignal[1], 0);\n\n \n\nPlot Sell_Signal = sellsignal[1] ==0 and sellsignal;\n\nSell_signal.setpaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_down);\n\nsell_signal.setDefaultColor(color.red);\n\nSell_signal.hidetitle();\n\n#Alert(condition = sellsignal[1] == 0 and sellsignal == 1, text = \&quot;Sell Signal\&quot;, sound = Sound.Bell, \&quot;alert type\&quot; = Alert.BAR);\n\n \n\nPlot Momentum_Up = sellsignal[1]==1 and sellSignal==0;\n\nMomentum_up.setpaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_up);\n\nMomentum_up.setDefaultColor(color.plum);\n\nMomentum_up.hidetitle();\n\n&quot;,name=&quot;_9513fc47_bb6f_4bfd_9d32_22c72ed76059&quot;}){hidden=&lt;T,inputsMap:TreeMap12{^(&quot;fast_length&quot;,6),^(&quot;price&quot;,@FundamentalType0),^(&quot;showDiffOBVtoFast&quot;,&lt;F),^(&quot;slow_length&quot;,@Integer1)},inputsMap=@TreeMap12,plots{3:{hiding=&lt;T}}})}),^(#%4.SubgraphId(&quot;Subgraph51&quot;),#%4.SubgraphStorableModel{height=80,storableIndicators.+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;#Follow @KRose_TDA on twitter for updates to this and other scripts\n#this script provides 2 moving averages of the study chosen\n#default study in OnBalanceVolume Volume\ndeclare lower;\n#place the study desired after reference in the line below you must include the brackets \&quot;()\&quot;\n#Initial study is OnBalanceVolume\n#plot MyStudy = reference OnBalanceVolume();\n\ninput timePerProfile = { CHART, MINUTE, FIVE_MINUTE, TEN_MINUTE, FIFTEEN_MINUTE,THIRTY_MINUTE,   HOUR, TWO_HOUR, FOUR_HOUR, default DAY, TWO_DAY, THREE_DAY, FOUR_DAY, WEEK, TWO_WEEK, THREE_WEEK, MONTH, \&quot;OPT EXP\&quot;, BAR};\ninput multiplier = 1;\n\n\ninput triggerUpperVaLimitHigh = 5;\ninput triggerUpperVaLimitLow = -5;\ninput triggerLowerVaLimitHigh = 5;\ninput triggerLowerVaLimitLow = -5;\n#input triggerLowerVaLimit = 20;\n#input triggerLowerVaRange = 10;\n\ndef onExpansion = no;\ninput profiles = 50;\ninput showPointOfControl = no;\ninput showValueArea = no;\ninput valueAreaPercent = 70;\n\n\n\n\ndef period;\ndef yyyymmdd = GetYYYYMMDD();\ndef seconds = SecondsFromTime(0);\ndef month = GetYear() * 12 + GetMonth();\ndef day_number = DaysFromDate(First(yyyymmdd)) + GetDayOfWeek(First(yyyymmdd));\ndef dom = GetDayOfMonth(yyyymmdd);\ndef dow = GetDayOfWeek(yyyymmdd - dom + 1);\ndef expthismonth = (if dow &gt; 5 then 27 else 20) - dow;\ndef exp_opt = month + (dom &gt; expthismonth);\nswitch (timePerProfile) {\ncase CHART:\n    period = 0;\ncase MINUTE:\n    period = Floor(seconds / 60 + day_number * 24 * 60);\ncase FIVE_MINUTE:\n    period = Floor(seconds / 60 + day_number * 24 * 60);\ncase TEN_MINUTE:\n    period = Floor(seconds / 60 + day_number * 24 * 60);\ncase FIFTEEN_MINUTE:\n    period = Floor(seconds / 60 + day_number * 24 * 60);\ncase THIRTY_MINUTE:\n    period = Floor(seconds / (30 * 60) + day_number * 24 * 60);\ncase HOUR:\n    period = Floor(seconds / 3600 + day_number * 24);\ncase TWO_HOUR:\n    period = Floor(seconds / (2 * 3600) + day_number * 24);\ncase FOUR_HOUR:\n    period = Floor(seconds / (4 * 3600) + day_number * 24);\ncase DAY:\n    period = CountTradingDays(Min(First(yyyymmdd), yyyymmdd), yyyymmdd) - 1;\ncase TWO_DAY:\n    period = 2 * (CountTradingDays(Min(First(yyyymmdd), yyyymmdd), yyyymmdd) - 1);\ncase THREE_DAY:\n    period = 3 * (CountTradingDays(Min(First(yyyymmdd), yyyymmdd), yyyymmdd) - 1);\ncase FOUR_DAY:\n    period = 4 * (CountTradingDays(Min(First(yyyymmdd), yyyymmdd), yyyymmdd) - 1);\ncase WEEK:\n    period = Floor(day_number / 7);\ncase TWO_WEEK:\n    period = Floor(day_number / 14);\ncase THREE_WEEK:\n    period = Floor(day_number / 21);\ncase MONTH:\n    period = Floor(month - First(month));\ncase \&quot;OPT EXP\&quot;:\n    period = exp_opt - First(exp_opt);\ncase BAR:\n    period = BarNumber() - 1;\n}\nAddLabel (yes,period);\n\n##############$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\ninput timeFrame = {default DAY, WEEK, MONTH};\n\ndef cap = getAggregationPeriod();\ndef errorInAggregation =\n    timeFrame == timeFrame.DAY and cap &gt;= AggregationPeriod.WEEK or\n    timeFrame == timeFrame.WEEK and cap &gt;= AggregationPeriod.MONTH;\nassert(!errorInAggregation, \&quot;timeFrame should be not less than current chart aggregation period\&quot;);\n\n#def yyyyMmDd = getYyyyMmDd();\ndef periodIndx;\nswitch (timeFrame) {\ncase DAY:\n    periodIndx = yyyyMmDd;\ncase WEEK:\n    periodIndx = Floor((daysFromDate(first(yyyyMmDd)) + getDayOfWeek(first(yyyyMmDd))) / 7);\ncase MONTH:\n    periodIndx = roundDown(yyyyMmDd / 100, 0);\n}\nAddLabel (yes,periodIndx);\ndef isPeriodRolled2 = compoundValue(1, periodIndx != periodIndx[1], yes);\ndef isPeriodRolled = compoundValue(1, period != period[1], yes);\ndef volumeSum;\ndef volumeVwapSum;\ndef volumeVwap2Sum;\n\ndef obv;\nif (isPeriodRolled) {\n    obv = Sign(close - close[1]) * volume;;\n   \n} else {\n    obv =compoundValue(1, obv[1] + Sign(close - close[1]) * volume, Sign(close - close[1]) * volume);\n}\n\n\n\n\n\nif (isPeriodRolled2) {\n    volumeSum = volume;\n    volumeVwapSum = volume * vwap;\n    volumeVwap2Sum = volume * Sqr(vwap);\n} else {\n    volumeSum = compoundValue(1, volumeSum[1] + volume, volume);\n    volumeVwapSum = compoundValue(1, volumeVwapSum[1] + volume * vwap, volume * vwap);\n    volumeVwap2Sum = compoundValue(1, volumeVwap2Sum[1] + volume * Sqr(vwap), volume * Sqr(vwap));\n}\ndef pric1 = volumeVwapSum / volumeSum;\n\n\n\n################$$$$$$$$$$$$$$$$$$$$\n####################################\n\ninput price = hlc3;\n\n\n#def OBV = TotalSum(Sign(close - close[1]) * volume);\nplot data =OBV;\ndata.SetDefaultColor(GetColor(4));\ninput fast_length = 9;\n\ninput slow_length = 13;\n\ninput displace = 0;\ninput showDiffOBVtoSlow = No;\ninput showDiffOBVtoFast = Yes;\ninput showDiffFastToSlow = no;\n\n################\ninput averageType = AverageType.SIMPLE;\n\nplot mov_slow = MovingAverage(averageType, data[-displace], slow_length);\n\nplot mov_fast = MovingAverage(averageType, data[-displace], fast_length);\n\n\n\n###############################\nmov_fast.SetDefaultColor(Color.CYAN);\n\nmov_slow.SetDefaultColor(Color.LIGHT_RED);\nmov_slow.SetStyle(Curve.SHORT_DASH);\n\n\n\nplot Diff = if (showDiffOBVtoFast) then  data - mov_fast else if (showDiffOBVtoSlow) then data - mov_slow else  mov_fast - mov_slow;\n\n\n\n\n#Diff.SetHiding (!showDiffOBVtoFast);\n#Diff2.SetHiding (!showDiffOBVtoSlow);\n\nDiff.AssignValueColor(if Diff &gt;= 0 then Color.UPTICK else Color.DOWNTICK);\n\nDiff.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);\n\n\n\n#####signals\ndef buy = mov_Fast &gt; mov_slow and data&gt; data[1] ;\n\ndef stopbuy = mov_Fast &lt;= mov_slow;\n\ndef buynow = !buy[1] and buy;\n\ndef buysignal = CompoundValue(1, if buynow and !stopbuy then 1 else if buysignal[1]==1 and stopbuy then 0 else buysignal[1], 0);\n\n \n\nplot Buy_Signal = buysignal[1] == 0 and buysignal==1;\n\nBuy_signal.setpaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\n\nBuy_signal.setdefaultColor(color.dark_GREEN);\n\nBuy_signal.hidetitle();\n\n#Alert(condition = buysignal[1] == 0 and buysignal == 1, text = \&quot;Buy Signal\&quot;, sound = Sound.Bell, \&quot;alert type\&quot; = Alert.BAR);\n\n \n\nplot Momentum_Down = buysignal[1] ==1 and buysignal==0;\n\nMomentum_down.setpaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);\n\nMomentum_Down.setdefaultColor(color.plum);\n\nMomentum_down.hidetitle();\n\n#Alert(condition = buysignal[1] == 1 and buysignal == 0, text = \&quot;Momentum_Down\&quot;, sound = Sound.Bell, \&quot;alert type\&quot; = Alert.BAR);\n\n\n\n\n\ndef sell = mov_Fast &lt; mov_slow ;\n\ndef stopsell = mov_Fast &gt;= mov_slow;\n\ndef sellnow = !sell[1] and sell;\n\ndef sellsignal = CompoundValue(1, if sellnow and !stopsell then 1 else if sellsignal[1]==1 and stopsell then 0 else sellsignal[1], 0);\n\n \n\nPlot Sell_Signal = sellsignal[1] ==0 and sellsignal;\n\nSell_signal.setpaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_down);\n\nsell_signal.setDefaultColor(color.red);\n\nSell_signal.hidetitle();\n\n#Alert(condition = sellsignal[1] == 0 and sellsignal == 1, text = \&quot;Sell Signal\&quot;, sound = Sound.Bell, \&quot;alert type\&quot; = Alert.BAR);\n\n \n\nPlot Momentum_Up = sellsignal[1]==1 and sellSignal==0;\n\nMomentum_up.setpaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_up);\n\nMomentum_up.setDefaultColor(color.plum);\n\nMomentum_up.hidetitle();\n\n&quot;,name=&quot;_b1dbb982_d05a_4eef_9fdb_2147876d05af&quot;}){hidden=&lt;T,inputsMap:TreeMap13{^(&quot;price&quot;,!%7.FundamentalType.valueOf(*%7.FundamentalType.class,&quot;VWAP&quot;))},inputsMap=@TreeMap13,plots{1:{hiding=&lt;T}}})}),^(#%4.SubgraphId(&quot;Subgraph53&quot;),#%4.SubgraphStorableModel{height=101,storableIndicators.+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# OBV/OBV_MA  by MerryDay 5/24/20\n#When the OBV (On Balance Volume) crosses OBV’s 20-period moving average, the divergence signal of a trend reversal is confirmed. While research indicates a default of 20 is norm, I have been using a 34 period.  The difference is slight.\n# If the OBV is greater than the OBV ma then a green cloud appears under the OBV.\n\ndeclare lower;\ninput length = 20; #default = 20\ninput price = close;\n\nplot OBV = TotalSum(Sign(price - price[1]) * volume);\nplot OBVma = Average(OBV, length);\n\ndef aboveMA   = OBV &gt;= OBVma ;\n\n\n## LIPSTICK ##\nDefineGlobalColor(\&quot;LabelGreen\&quot;, CreateColor(0, 190, 0)) ;\nDefineGlobalColor(\&quot;PaleGreen\&quot;, CreateColor(180, 220, 180)) ;\nDefineGlobalColor(\&quot;PaleRed\&quot;, CreateColor (220, 200, 200)) ;\nDefineGlobalColor(\&quot;DullGold\&quot;, CreateColor(220, 220, 128)) ;\nDefineGlobalColor(\&quot;BlueJeans\&quot;, CreateColor(0, 150, 200)) ;\nOBVma.SetDefaultColor(GlobalColor(\&quot;DullGold\&quot;));\nOBVma.SetLineWeight(3);\nOBVma.HideBubble();\nOBVma.HideTitle();\n\nOBV.SetPaintingStrategy(PaintingStrategy.LINE_VS_TRIANGLES);\nOBV.SetLineWeight(2);\nOBV.HideBubble();\nOBV.HideTitle();\nOBV.DefineColor(\&quot;Up\&quot;, GlobalColor(\&quot;LabelGreen\&quot;));\nOBV.DefineColor(\&quot;Weak\&quot;, Color.LIGHT_GRAY);\nOBV.DefineColor(\&quot;Down\&quot;, GlobalColor(\&quot;PaleRed\&quot;));\nOBV.AssignValueColor(if OBV &gt; OBVma  then OBV.Color(\&quot;Up\&quot;) else OBV.Color(\&quot;Down\&quot;));\n\nplot OBVlow = if  OBV crosses below OBVma then 1 else 0;\nOBVlow.hide();\n\nplot crossup = if OBV crosses above OBVma then OBV else double.NaN;\ncrossup.HideBubble() ;\ncrossup.HideTitle() ;\ncrossup.SetPaintingStrategy(PaintingStrategy.TRIANGLES);\ncrossup.SetLineWeight(5);\ncrossup.SetDefaultColor(color.blue) ;\nplot crossdown = if OBV crosses below OBVma then OBV else double.NaN;\ncrossdown.HideBubble() ;\ncrossdown.HideTitle() ;\ncrossdown.SetPaintingStrategy(PaintingStrategy.TRIANGLES);\ncrossdown.SetLineWeight(5);\ncrossdown.SetDefaultColor(color.pink) ;\n\nAddCloud(OBV, OBVma, Color.LIGHT_GREEN, Color.PINK);\n\n#Alert(crosses_above_MA, \&quot;What\'s going to happen?\&quot; + GetSymbol(), Alert.BAR, Sound.bell);\nDefineGlobalColor(\&quot;MyCyan\&quot;, CreateColor(150, 0, 255)) ;\nDefineGlobalColor(\&quot;Sell\&quot;, CreateColor(255, 150, 0)) ;\n\n\n# End of OBV/OBV_MA &quot;,name=&quot;_5a6a53b8_41ce_3ef6_a10e_07a88a720b77&quot;}))}),^(#%4.SubgraphId(&quot;Subgraph55&quot;),#%4.SubgraphStorableModel{height=80,storableIndicators.+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;declare lower;\ndeclare zerobase;\n\ninput length = 14;\ninput numDev = 2.0;\ninput numDev2 = 3.0;\ninput allowNegativeValues = no;\ninput price =close;\n\ndef rawRelPrice = (price - Average(price, length)) / StDev(price, length);\nplot Relprice = if allowNegativeValues then rawRelPrice else Max(0, rawRelPrice);\nplot StDevLevel = numDev;\nplot StDevLevel2 = numDev2;\n\nRelprice.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);\nRelprice.SetLineWeight(3);\nRelprice.DefineColor(\&quot;Above2\&quot;, GetColor(0));\nRelprice.DefineColor(\&quot;Above3\&quot;, GetColor(1));\nRelprice.DefineColor(\&quot;Below\&quot;, GetColor(2));\nRelprice.AssignValueColor(if  Relprice &gt;= numDev2 then Relprice.Color(\&quot;Above3\&quot;) else if Relprice &gt;= numDev then Relprice.Color(\&quot;Above2\&quot;) else Relprice.Color(\&quot;Below\&quot;));\nStDevLevel.SetDefaultColor(GetColor(7));\nStDevLevel.SetStyle(Curve.SHORT_DASH);\nStDevLevel2.SetDefaultColor(GetColor(7));\nStDevLevel2.SetStyle(Curve.SHORT_DASH);&quot;,name=&quot;_d695cb43_1a60_4ba9_8b95_07a832b1793f&quot;}){hidden=&lt;T,inputsMap:TreeMap14{^(&quot;price&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap14})}),^(#%4.SubgraphId(&quot;Subgraph65&quot;),#%4.SubgraphStorableModel{height=283,storableIndicators.+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# FiniteVolumeElements_FVE\n#\n# Author: Kory Gill, [USER=212]@korygill[/USER]\n#\n# Created from idea on https://usethinkscript.com/threads/finite-volume-elements.593/\n# Original idea is from http://mkatsanos.com/FVE.html\n#\n# VERSION HISTORY (sortable date and time (your local time is fine), and your initials\n# 20190907-1200-KG    - Created.\n\n###############################################################################\n### NORMALIZATION (Volume Damping adaptation) by Ramon Del Villar AKA PElonsax\n### 7/20/2020 #################################################################\n###############################################################################\n# The damping logic is taken directly from VFI #\n\n#declare once_per_bar;\ndeclare lower;\ninput AGG = aggregationPeriod.FIVE_MIN;\ninput CutOffAG = 0.003;\ninput Samples_Used = 22;\ndef samplesAG = Samples_Used * (AGG/60000);\n\n\n#\n# inputs\n#\ninput Samples = 22;\n\n#\n# logic\n#\ndef bn = BarNumber();\ndef nan = double.NaN;\n\n\ninput maxVolumeCutOff = 2.5;\n###Coefficient used in calculation of “Cut Off” value. Lower values mean stronger damping of volume spikes###\n\nAssert(maxVolumeCutOff &gt; 0, \&quot;\'max volume cut off\' must be positive: \&quot; + maxVolumeCutOff);\n\n####\ndef timeFrame = getAggregationPeriod();\ndef testTimeFrames = if timeFrame &lt; AGG  then yes else no;\n\nAddLabel(yes, if testTimeFrames  then \&quot;Time Frames Are Correct\&quot; else \&quot;Time Frames Are Wrong\&quot;, if testTimeFrames  then color.GREEN else color.RED);\n\n\n\ndef cutOff = 0.2 * StDev(Log(hlc3(period = AGG)) - Log(hlc3(period = AGG)[1]), 30) * close(period = AGG);\ndef hlcChange = hlc3(period = AGG) - hlc3(period = AGG)[1];\ndef avgVolume = Average(volume(period = AGG), 30)[1];\ndef minVolume = Min(volume(period = AGG), avgVolume * maxVolumeCutOff);\ndef dirVolume = if hlcChange &gt; cutOff\n    then minVolume\n    else if hlcChange &lt; -cutOff\n        then -minVolume\n        else 0;\n\n\ndef mf = (close(period = AGG) - (high(period = AGG)+low(period = AGG))/2) + hlc3(period = AGG) - hlc3(period = AGG) [1];\ndef fveSum = Sum(dirVolume, samplesAG);\n\ndef fve = if bn &gt; samplesAG\n          then (fveSum / (Average(avgVolume, samplesAG) * samplesAG)) * 100\n          else nan;\n\n\n#\n# plots\n#\nplot pFVE = fve;\n\nplot pFVE_MA = MovingAverage(AverageType.SIMPLE, fve, 30);\npFVE_MA.SetDefaultColor(Color.Gray);\nPFVE_MA.SetPaintingStrategy(PaintingStrategy.DASHES);\n\nplot zeroLine = 0;\nzeroLine.SetDefaultColor(Color.White);\npFVE.AssignValueColor(if pFVE &gt; pFVE_MA then color.green else color.red) ;\npFVE.SetLineWeight(3);\n\nplot pFVE_Bull = if pFVE crosses above pFVE_MA then pFVE else double.NaN ;\npFVE_Bull.SetPaintingStrategy(PaintingStrategy.SQUARES);\npFVE_Bull.SetLineWeight(5);\npFVE_Bull.SetDefaultColor(color.dark_green) ;\n\nplot pFVE_Bear = if pFVE &gt; pFVE_MA and pFVE[1] &gt; pFVE then pFVE else double.NaN ;\npFVE_Bear.SetPaintingStrategy(PaintingStrategy.SQUARES);\npFVE_Bear.SetLineWeight(5);\npFVE_Bear.SetDefaultColor(color.white) ;\n\nAddCloud(pFVE, pFVE_MA, color.light_green, color.pink);\n\n#MTF################\n&quot;,name=&quot;_35c55107_b06b_4f2d_9692_9d04d4d233d0&quot;}){hidden=&lt;T})}),^(#%4.SubgraphId(&quot;Subgraph67&quot;),#%4.SubgraphStorableModel{height=88,storableIndicators.+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2008-2021\n#\n\ndeclare lower;\n\ninput stDevLength = 10;\ninput averageLength = 14;\ninput averageType = AverageType.EXPONENTIAL;\n\ndef stDevHi = stDev(high, stDevLength);\ndef stDevLo = stDev(low, stDevLength);\n\ndef avgStDevHiUp = MovingAverage(averageType, if high &gt; high[1] then stDevHi else 0, averageLength);\ndef avgStDevHiDown = MovingAverage(averageType, if high &lt; high[1] then stDevHi else 0, averageLength);\n\ndef avgStDevLoUp = MovingAverage(averageType, if low &gt; low[1] then stDevLo else 0, averageLength);\ndef avgStDevLoDown = MovingAverage(averageType, if low &lt; low[1] then stDevLo else 0, averageLength);\n\ndef rviHi = if avgStDevHiUp + avgStDevHiDown == 0 then 50 else 100 * avgStDevHiUp / (avgStDevHiUp + avgStDevHiDown);\ndef rviLo = if avgStDevLoUp + avgStDevLoDown == 0 then 50 else 100 * avgStDevLoUp / (avgStDevLoUp + avgStDevLoDown);\n\nplot RVI = (rviHi + rviLo) / 2;\nplot OverBought = 70;\nplot OverSold = 30;\n\nRVI.setDefaultColor(GetColor(1));\nOverBought.setDefaultColor(GetColor(5));\nOverSold.setDefaultColor(GetColor(5));&quot;,name=&quot;RelativeVolatilityIndex&quot;}){hidden=&lt;T})}),^(#%4.SubgraphId(&quot;Subgraph71&quot;),#%4.SubgraphStorableModel{height=80,storableIndicators.+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2007-2021\n#\n\ndeclare lower;\n\ninput length = 20;\ninput momentum = 5;\n\nassert(momentum &gt; 0, \&quot;\'momentum\' must be positive: \&quot; + momentum);\n\ndef emaInc = ExpAverage(Max(close - close[momentum], 0), length);\ndef emaDec = ExpAverage(Max(close[momentum] - close, 0), length);\nplot RMI = if emaDec == 0 then 0 else 100 - 100 / (1 + emaInc / emaDec);\nplot OverBought = 70;\nplot OverSold = 30;\n\nRMI.SetDefaultColor(GetColor(1));\nOverBought.SetDefaultColor(GetColor(8));\nOverSold.SetDefaultColor(GetColor(8));&quot;,name=&quot;RelativeMomentumIndex&quot;}){hidden=&lt;T,inputsMap:TreeMap15{^(&quot;momentum&quot;,@Integer3)},inputsMap=@TreeMap15})}),^(#%4.SubgraphId(&quot;Subgraph75&quot;),#%4.SubgraphStorableModel{height=121,storableIndicators.+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;#converted from mobisu macd to ppo\n# this is actually macd and sqz indicator in one\n# added pivots\n\ndeclare lower;\n\ninput fastPeriod   = 12; #9/18/6 for 5m\ninput slowPeriod   = 26;\ninput signalPeriod = 9;\ninput price        = close;\ninput show = yes;\n\n\ndef fastEma   = ExpAverage( price, fastPeriod );\ndef slowEma   = ExpAverage( price, slowPeriod );\ndef periodOK  = fastPeriod &lt; slowPeriod;\nAddLabel( !periodOK, \&quot;ERROR: fastPeriod MUST be less than slowPeriod\&quot; );\ndef _ppo      = if periodOK then ((fastEma - slowEma) / slowEma) * 100 else 0;\ndef _signal   = ExpAverage( _ppo, signalPeriod );\n\n# generic plots wiht colors\nplot pmain   = _ppo;\npmain.SetDefaultColor( Color.BLUE );\npmain.SetLineWeight(2);\npmain.AssignValueColor(if pmain &lt; 0 and pmain &lt; pmain[1]  then Color.RED\n                       else if pmain &lt; 0 and  pmain &gt; pmain[1] then Color.DARK_GREEN\n                       else if pmain &gt; 0 and pmain &gt; pmain[1] then Color.GREEN\n                       else Color.DARK_RED);\npmain.HideBubble();\n\nplot mainEma   = _signal;\nmainEma.SetDefaultColor( Color.RED );\nmainEma.HideBubble();\nAddCloud(pmain, mainEma, Color.GREEN, Color.RED);\n\n#diff as histogram\nplot diff    = _ppo - _signal;\ndiff.SetDefaultColor(GetColor(5));\ndiff.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);\ndiff.SetLineWeight(3);\ndiff.DefineColor(\&quot;Positive and Up\&quot;, Color.GREEN);\ndiff.DefineColor(\&quot;Positive and Down\&quot;, Color.DARK_GREEN);\ndiff.DefineColor(\&quot;Negative and Down\&quot;, Color.RED);\ndiff.DefineColor(\&quot;Negative and Up\&quot;, Color.DARK_RED);\ndiff.AssignValueColor(if diff &gt;= 0 then if diff &gt; diff[1] then diff.Color(\&quot;Positive and Up\&quot;) else diff.Color(\&quot;Positive and Down\&quot;) else if diff &lt; diff[1] then diff.Color(\&quot;Negative and Down\&quot;) else diff.Color(\&quot;Negative and Up\&quot;));\n\n\n#mobius divergence calc\ndef pmainh = CompoundValue(1, \n            if pmain &lt; 0 then Double.NaN\n            else if pmain crosses above 0  then pmain\n            else if pmain &gt; 0 and  pmain &gt; pmainh[1]\n            then pmain else pmainh[1], 0);\n\ndef Valueh = CompoundValue(1, \n             if pmain &lt; 0 then Double.NaN\n             else if pmain crosses above 0  then high\n             else if pmain &gt; 0 and high &gt; Valueh[1] then high\n             else Valueh[1], 0);\n\nplot divLowSignal = if pmain &gt; 0 and  high &gt; Valueh[1] and pmain &lt; pmainh[1] then 0\n                 else Double.NaN;\ndivLowSignal.SetPaintingStrategy(PaintingStrategy.SQUARES);\ndivLowSignal.SetLineWeight(5);\ndivLowSignal.SetDefaultColor(Color.dark_orange);\n\ndef pmainL = CompoundValue(1, if pmain &gt; 0 then Double.NaN\n                             else if pmain crosses below 0  then pmain\n                             else if pmain &lt; 0 and pmain &lt; pmainl[1] then pmain\n                             else pmainl[1], 0);\n\ndef ValueL = CompoundValue(1, if pmain &gt; 0  then Double.NaN\n                              else if pmain crosses below 0 then low\n                              else if pmain &lt; 0 and low &lt; Valuel[1] then low\n                              else Valuel[1], 0);\n\nplot divUpSignall = if pmain &lt; 0 and   low &lt; Valuel[1] and pmain &gt; pmainl[1] then 0\n                 else Double.NaN;\ndivupSignall.SetPaintingStrategy(PaintingStrategy.SQUARES);\ndivUpSignall.SetLineWeight(5);\ndivUPSignall.SetDefaultColor(Color.blue);\n\n\n\n#zeroline\nplot zeroLine = 0;\nzeroLine.SetPaintingStrategy(PaintingStrategy.LINE);\nzeroLine.SetLineWeight(1);\nzeroLine.SetDefaultColor(Color.BLACK);\n\n\n#pivots\n\ndef ptrend = pmain;\ndef prange = 2;\ndef pivotHigh = if IsNaN(ptrend[-1]) then 0  else Lowest(ptrend, prange)[1] &gt; ptrend and Lowest(ptrend, prange)[-prange] &gt; ptrend ;\ndef pivotLow =  if  IsNaN(ptrend[-1]) then 0  else Highest(ptrend, prange)[1] &lt; ptrend and Highest(ptrend, prange)[-prange] &lt; ptrend ;\n#study\nplot plotPH = if pivotHigh and show then ptrend else Double.NaN;\nplotPH.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\nplotPH.SetDefaultColor(Color.GREEN);\n\nplot phline = if pivotHigh then pmain else Double.NaN;\nphline.SetDefaultColor(Color.DARK_GREEN);\nphline.EnableApproximation();phline.Hide();\n#\nplot plotPL = if pivotLow and show then ptrend else Double.NaN;\nplotPL.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\nplotPL.SetDefaultColor(Color.RED);\n\nplot plline = if pivotLow then pmain else Double.NaN;\nplline.SetDefaultColor(Color.RED);\nplline.EnableApproximation(); plline.hide();&quot;,name=&quot;_58fa56d7_7ed3_4ff5_b1a8_d0c87dfe1afc&quot;}))}),^(#%4.SubgraphId(&quot;Subgraph77&quot;),#%4.SubgraphStorableModel{height=84,storableIndicators.+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;#\n# TD Ameritrade IP Company, Inc. (c) 2007-2016\n#\n## created by North Vanhooser\n\ndeclare lower;\n\ninput fastPeriod   = 12;\ninput slowPeriod   = 26;\ninput signalPeriod = 9;\ninput price        = close;\n\ndef fastEma   = ExpAverage( price, fastPeriod );\ndef slowEma   = ExpAverage( price, slowPeriod );\ndef periodOK  = fastPeriod &lt; slowPeriod;\nAddLabel( !periodOK, \&quot;ERROR: fastPeriod MUST be less than slowPeriod\&quot; );\ndef _ppo      = if periodOK then ((fastEma - slowEma) / slowEma) * 100 else 0;\ndef _signal   = ExpAverage( _ppo, signalPeriod );\n\nplot Ppo      = _ppo;\nPpo.SetDefaultColor( Color.BLUE );\nPpo.HideBubble();\n\nplot PpoEma   = _signal;\nPpoEma.SetDefaultColor( Color.CYAN );\nPpoEma.HideBubble();\n\nplot zeroLine = 0;\nzeroLine.HideBubble();\nzeroLine.AssignValueColor( Color.BLACK );\n\nplot PpoH1    = _ppo - _signal;\nPpoH1.SetPaintingStrategy( PaintingStrategy.HISTOGRAM );\nPpoH1.DefineColor(\&quot;Up\&quot;, Color.UPTICK);\nPpoH1.DefineColor(\&quot;Down\&quot;, Color.DOWNTICK);\nPpoH1.DefineColor(\&quot;Flat\&quot;, Color.GRAY);\nPpoH1.AssignValueColor( if PpoH1 &gt; PpoH1[1] then\n                           PpoH1.Color(\&quot;Up\&quot;)\n                       else\n                         if PpoH1 &lt; PpoH1[1] then\n                           PpoH1.Color(\&quot;Down\&quot;)\n                       else\n                           PpoH1.Color(\&quot;Flat\&quot;));\nPpoH1.HideBubble();\nPpoH1.SetLineWeight( 3 );&quot;,name=&quot;_8394cedf_d5f2_4eeb_b66a_eefc8f255caf&quot;}){hidden=&lt;T,inputsMap:TreeMap16{^(&quot;price&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap16})}),^(#%4.SubgraphId(&quot;Subgraph79&quot;),#%4.SubgraphStorableModel{height=120,storableIndicators.+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# TMO ((T)rue (M)omentum (O)scilator)\n# Mobius\n# V01.05.2018\n# hint: TMO calculates momentum using the delta of price. Giving a much better picture of trend, tend reversals and divergence than momentum oscillators using price.\n\ndeclare Lower;\n\ninput length = 14;\ninput calcLength = 5;\ninput smoothLength = 3;\n\ndef o = open;\ndef c = close;\ndef data = fold i = 0 to length\n           with s\n           do s + (if c &gt; getValue(o, i)\n                   then 1\n                   else if c &lt; getValue(o, i)\n                        then - 1\n                        else 0);\ndef EMA5 = ExpAverage(data, calcLength);\nplot Main = ExpAverage(EMA5, smoothLength);\nplot Signal = ExpAverage(Main, smoothLength);\n     Main.AssignValueColor(if Main &gt; Signal\n                           then color.green\n                           else color.red);\n     Signal.AssignValueColor(if Main &gt; Signal\n                             then color.green\n                             else color.red);\n     Signal.HideBubble();\n     Signal.HideTitle();\naddCloud(Main, Signal, color.green, color.red);\nplot zero = if isNaN(c) then double.nan else 0;\n     zero.SetDefaultColor(Color.gray);\n     zero.hideBubble();\n     zero.hideTitle();\nplot ob = if isNaN(c) then double.nan else round(length * .7);\n     ob.SetDefaultColor(Color.gray);\n     ob.HideBubble();\n     ob.HideTitle();\nplot os = if isNaN(c) then double.nan else -round(length * .7);\n     os.SetDefaultColor(Color.gray);\n     os.HideBubble();\n     os.HideTitle();\naddCloud(ob, length, color.light_red, color.light_red, no);\naddCloud(-length, os, color.light_green, color.light_green);\n# End Code TMO&quot;,name=&quot;_e764f5bb_0b2a_3136_ab0c_1a950d75f144&quot;}))})}}" SYMBOL="MSFT" SYMBOL_GROUP="2" VERTICAL="false" VISIBLE="true" WEIGHT="3.506981740064447"/>
            <DASHBOARD SYMBOL="AAPL" SYMBOL_GROUP="2" VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <LEVEL_II SYMBOL="MSFT" SYMBOL_GROUP="2" VERTICAL="false" VISIBLE="true" WEIGHT="1.0">
              <SORTING COLUMN="BID" ORDER="-1"/>
              <SORTING1 COLUMN="ASK" ORDER="1"/>
            </LEVEL_II>
            <LIVE_NEWS SYMBOL="MSFT" SYMBOL_GROUP="2" VERTICAL="false" VISIBLE="true" WEIGHT="1.0">
              <SORTING COLUMN="TIME" ORDER="-1"/>
            </LIVE_NEWS>
            <PHASE_SCORES VERTICAL="false" VISIBLE="false" WEIGHT="2.0"/>
            <TIME_SALES VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <TRADE CONFIGURATION_NAME="SINGLE" ORDER_RULES_SET="STOCK" ORDER_TYPE="LIMIT" OS_AUTO="false" OS_EXPANDED="false" OS_TIF="DAY" QTY="100.0" QTY_STEP="1.0" TEMPLATE="SINGLE" TRADE_BUTTONS="BUY_MKT;SELL_MKT;MULTI_CANCEL;REVERSE;FLAT;SECOND_LINE;QUANTITY;AUTO_SEND;ORDER_SETUP" VISIBLE="false">
              <OCO_STOP>
                <TRG_0 TRG_ENBL="true" TRG_LINK="ASK_BID" TRG_OFFSET_MODE="TICK" TRG_OT="STOP" TRG_SETUP="10.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AAL="10.0" AAPL="10.0" AFI="10.0" AMC="10.0" AMCR="10.0" AMD="10.0" AMRS="10.0" AMZN="10.0" ANTE="10.0" ARLO="10.0" AXL="10.0" BBD="10.0" BMY="10.0" BSGM="10.0" BXRX="10.0" CCI="10.0" CCJ="10.0" CCL="10.0" CHNG="10.0" CHX="10.0" CIDM="10.0" CLBS="10.0" CLDR="10.0" CLSN="10.0" CNNE="10.0" CRBP="10.0" CSCO="10.0" DIS="10.0" DISCK="10.0" DNN="10.0" DPW="10.0" DS="10.0" EMAN="10.0" ETSY="10.0" EW="10.0" EWA="10.0" FAST="10.0" FCAC="10.0" FSR="10.0" FUSE="10.0" GEL="10.0" GME="10.0" GOCO="10.0" HBI="10.0" HPQ="10.0" HPR="10.0" HTZ="10.0" HUGE="10.0" HYLN="10.0" IDEX="10.0" IGSB="10.0" INFI="10.0" INO="10.0" INTC="10.0" IZEA="10.0" JE="10.0" KEYS="10.0" LCI="10.0" LKQ="10.0" LUV="10.0" MARA="10.0" MBT="10.0" MDII="10.0" MMDA1="10.0" MRIN="10.0" MSFT="10.0" MU="10.0" NGD="10.0" NIO="10.0" NLOK="10.0" NLSN="10.0" NNVC="10.0" NOK="10.0" OGI="10.0" OPEN="10.0" OPGN="10.0" OTIS="10.0" PAA="10.0" PAAS="10.0" PERI="10.0" PFF="10.0" PGX="10.0" POTX="10.0" PPG="10.0" PTE="10.0" RAD="10.0" RKT="10.0" RP="10.0" RPAY="10.0" RRD="10.0" RSX="10.0" SAVA="10.0" SIOX="10.0" SITC="10.0" SIVR="10.0" SKLZ="10.0" SLQT="10.0" SNAP="10.0" SOS="10.0" SPX="10.0" SQ="10.0" SWK="10.0" TGTX="10.0" TSLA="10.0" TZA="10.0" U="10.0" UAMY="10.0" UEC="10.0" UIS="10.0" USWS="10.0" UUUU="10.0" UXIN="10.0" VALE="10.0" VEU="10.0" VJET="10.0" VTRS="10.0" VWO="10.0" WETF="10.0" X="10.0" XL="10.0" XLP="10.0" XLU="10.0" ZM="10.0"/>
                </TRG_0>
              </OCO_STOP>
              <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="1.0" TRG_TIF="DAY">
                <OFFSET_PER_SYMBOL AAL="1.0" AAPL="1.0" AFI="1.0" AMC="1.0" AMCR="1.0" AMD="1.0" AMRS="1.0" AMZN="1.0" ANTE="1.0" ARLO="1.0" AXL="1.0" BBD="1.0" BMY="1.0" BSGM="1.0" BXRX="1.0" CCI="1.0" CCJ="1.0" CCL="1.0" CHNG="1.0" CHX="1.0" CIDM="1.0" CLBS="1.0" CLDR="1.0" CLSN="1.0" CNNE="1.0" CRBP="1.0" CSCO="1.0" DIS="1.0" DISCK="1.0" DNN="1.0" DPW="1.0" DS="1.0" EMAN="1.0" ETSY="1.0" EW="1.0" EWA="1.0" FAST="1.0" FCAC="1.0" FSR="1.0" FUSE="1.0" GEL="1.0" GME="1.0" GOCO="1.0" HBI="1.0" HPQ="1.0" HPR="1.0" HTZ="1.0" HUGE="1.0" HYLN="1.0" IDEX="1.0" IGSB="1.0" INFI="1.0" INO="1.0" INTC="1.0" IZEA="1.0" JE="1.0" KEYS="1.0" LCI="1.0" LKQ="1.0" LUV="1.0" MARA="1.0" MBT="1.0" MDII="1.0" MMDA1="1.0" MRIN="1.0" MSFT="1.0" MU="1.0" NGD="1.0" NIO="1.0" NLOK="1.0" NLSN="1.0" NNVC="1.0" NOK="1.0" OGI="1.0" OPEN="1.0" OPGN="1.0" OTIS="1.0" PAA="1.0" PAAS="1.0" PERI="1.0" PFF="1.0" PGX="1.0" POTX="1.0" PPG="1.0" PTE="1.0" RAD="1.0" RKT="1.0" RP="1.0" RPAY="1.0" RRD="1.0" RSX="1.0" SAVA="1.0" SIOX="1.0" SITC="1.0" SIVR="1.0" SKLZ="1.0" SLQT="1.0" SNAP="1.0" SOS="1.0" SPX="1.0" SQ="1.0" SWK="1.0" TGTX="1.0" TSLA="1.0" TZA="1.0" U="1.0" UAMY="1.0" UEC="1.0" UIS="1.0" USWS="1.0" UUUU="1.0" UXIN="1.0" VALE="1.0" VEU="1.0" VJET="1.0" VTRS="1.0" VWO="1.0" WETF="1.0" X="1.0" XL="1.0" XLP="1.0" XLU="1.0" ZM="1.0"/>
              </TRG_0>
              <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-1.0" TRG_TIF="DAY">
                <OFFSET_PER_SYMBOL AAL="-1.0" AAPL="-1.0" AFI="-1.0" AMC="-1.0" AMCR="-1.0" AMD="-1.0" AMRS="-1.0" AMZN="-1.0" ANTE="-1.0" ARLO="-1.0" AXL="-1.0" BBD="-1.0" BMY="-1.0" BSGM="-1.0" BXRX="-1.0" CCI="-1.0" CCJ="-1.0" CCL="-1.0" CHNG="-1.0" CHX="-1.0" CIDM="-1.0" CLBS="-1.0" CLDR="-1.0" CLSN="-1.0" CNNE="-1.0" CRBP="-1.0" CSCO="-1.0" DIS="-1.0" DISCK="-1.0" DNN="-1.0" DPW="-1.0" DS="-1.0" EMAN="-1.0" ETSY="-1.0" EW="-1.0" EWA="-1.0" FAST="-1.0" FCAC="-1.0" FSR="-1.0" FUSE="-1.0" GEL="-1.0" GME="-1.0" GOCO="-1.0" HBI="-1.0" HPQ="-1.0" HPR="-1.0" HTZ="-1.0" HUGE="-1.0" HYLN="-1.0" IDEX="-1.0" IGSB="-1.0" INFI="-1.0" INO="-1.0" INTC="-1.0" IZEA="-1.0" JE="-1.0" KEYS="-1.0" LCI="-1.0" LKQ="-1.0" LUV="-1.0" MARA="-1.0" MBT="-1.0" MDII="-1.0" MMDA1="-1.0" MRIN="-1.0" MSFT="-1.0" MU="-1.0" NGD="-1.0" NIO="-1.0" NLOK="-1.0" NLSN="-1.0" NNVC="-1.0" NOK="-1.0" OGI="-1.0" OPEN="-1.0" OPGN="-1.0" OTIS="-1.0" PAA="-1.0" PAAS="-1.0" PERI="-1.0" PFF="-1.0" PGX="-1.0" POTX="-1.0" PPG="-1.0" PTE="-1.0" RAD="-1.0" RKT="-1.0" RP="-1.0" RPAY="-1.0" RRD="-1.0" RSX="-1.0" SAVA="-1.0" SIOX="-1.0" SITC="-1.0" SIVR="-1.0" SKLZ="-1.0" SLQT="-1.0" SNAP="-1.0" SOS="-1.0" SPX="-1.0" SQ="-1.0" SWK="-1.0" TGTX="-1.0" TSLA="-1.0" TZA="-1.0" U="-1.0" UAMY="-1.0" UEC="-1.0" UIS="-1.0" USWS="-1.0" UUUU="-1.0" UXIN="-1.0" VALE="-1.0" VEU="-1.0" VJET="-1.0" VTRS="-1.0" VWO="-1.0" WETF="-1.0" X="-1.0" XL="-1.0" XLP="-1.0" XLU="-1.0" ZM="-1.0"/>
              </TRG_1>
              <_2>
                <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="2.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AAL="2.0" AAPL="2.0" AFI="2.0" AMC="2.0" AMCR="2.0" AMD="2.0" AMRS="2.0" AMZN="2.0" ANTE="2.0" ARLO="2.0" AXL="2.0" BBD="2.0" BMY="2.0" BSGM="2.0" BXRX="2.0" CCI="2.0" CCJ="2.0" CCL="2.0" CHNG="2.0" CHX="2.0" CIDM="2.0" CLBS="2.0" CLDR="2.0" CLSN="2.0" CNNE="2.0" CRBP="2.0" CSCO="2.0" DIS="2.0" DISCK="2.0" DNN="2.0" DPW="2.0" DS="2.0" EMAN="2.0" ETSY="2.0" EW="2.0" EWA="2.0" FAST="2.0" FCAC="2.0" FSR="2.0" FUSE="2.0" GEL="2.0" GME="2.0" GOCO="2.0" HBI="2.0" HPQ="2.0" HPR="2.0" HTZ="2.0" HUGE="2.0" HYLN="2.0" IDEX="2.0" IGSB="2.0" INFI="2.0" INO="2.0" INTC="2.0" IZEA="2.0" JE="2.0" KEYS="2.0" LCI="2.0" LKQ="2.0" LUV="2.0" MARA="2.0" MBT="2.0" MDII="2.0" MMDA1="2.0" MRIN="2.0" MSFT="2.0" MU="2.0" NGD="2.0" NIO="2.0" NLOK="2.0" NLSN="2.0" NNVC="2.0" NOK="2.0" OGI="2.0" OPEN="2.0" OPGN="2.0" OTIS="2.0" PAA="2.0" PAAS="2.0" PERI="2.0" PFF="2.0" PGX="2.0" POTX="2.0" PPG="2.0" PTE="2.0" RAD="2.0" RKT="2.0" RP="2.0" RPAY="2.0" RRD="2.0" RSX="2.0" SAVA="2.0" SIOX="2.0" SITC="2.0" SIVR="2.0" SKLZ="2.0" SLQT="2.0" SNAP="2.0" SOS="2.0" SPX="2.0" SQ="2.0" SWK="2.0" TGTX="2.0" TSLA="2.0" TZA="2.0" U="2.0" UAMY="2.0" UEC="2.0" UIS="2.0" USWS="2.0" UUUU="2.0" UXIN="2.0" VALE="2.0" VEU="2.0" VJET="2.0" VTRS="2.0" VWO="2.0" WETF="2.0" X="2.0" XL="2.0" XLP="2.0" XLU="2.0" ZM="2.0"/>
                </TRG_0>
                <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-2.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AAL="-2.0" AAPL="-2.0" AFI="-2.0" AMC="-2.0" AMCR="-2.0" AMD="-2.0" AMRS="-2.0" AMZN="-2.0" ANTE="-2.0" ARLO="-2.0" AXL="-2.0" BBD="-2.0" BMY="-2.0" BSGM="-2.0" BXRX="-2.0" CCI="-2.0" CCJ="-2.0" CCL="-2.0" CHNG="-2.0" CHX="-2.0" CIDM="-2.0" CLBS="-2.0" CLDR="-2.0" CLSN="-2.0" CNNE="-2.0" CRBP="-2.0" CSCO="-2.0" DIS="-2.0" DISCK="-2.0" DNN="-2.0" DPW="-2.0" DS="-2.0" EMAN="-2.0" ETSY="-2.0" EW="-2.0" EWA="-2.0" FAST="-2.0" FCAC="-2.0" FSR="-2.0" FUSE="-2.0" GEL="-2.0" GME="-2.0" GOCO="-2.0" HBI="-2.0" HPQ="-2.0" HPR="-2.0" HTZ="-2.0" HUGE="-2.0" HYLN="-2.0" IDEX="-2.0" IGSB="-2.0" INFI="-2.0" INO="-2.0" INTC="-2.0" IZEA="-2.0" JE="-2.0" KEYS="-2.0" LCI="-2.0" LKQ="-2.0" LUV="-2.0" MARA="-2.0" MBT="-2.0" MDII="-2.0" MMDA1="-2.0" MRIN="-2.0" MSFT="-2.0" MU="-2.0" NGD="-2.0" NIO="-2.0" NLOK="-2.0" NLSN="-2.0" NNVC="-2.0" NOK="-2.0" OGI="-2.0" OPEN="-2.0" OPGN="-2.0" OTIS="-2.0" PAA="-2.0" PAAS="-2.0" PERI="-2.0" PFF="-2.0" PGX="-2.0" POTX="-2.0" PPG="-2.0" PTE="-2.0" RAD="-2.0" RKT="-2.0" RP="-2.0" RPAY="-2.0" RRD="-2.0" RSX="-2.0" SAVA="-2.0" SIOX="-2.0" SITC="-2.0" SIVR="-2.0" SKLZ="-2.0" SLQT="-2.0" SNAP="-2.0" SOS="-2.0" SPX="-2.0" SQ="-2.0" SWK="-2.0" TGTX="-2.0" TSLA="-2.0" TZA="-2.0" U="-2.0" UAMY="-2.0" UEC="-2.0" UIS="-2.0" USWS="-2.0" UUUU="-2.0" UXIN="-2.0" VALE="-2.0" VEU="-2.0" VJET="-2.0" VTRS="-2.0" VWO="-2.0" WETF="-2.0" X="-2.0" XL="-2.0" XLP="-2.0" XLU="-2.0" ZM="-2.0"/>
                </TRG_1>
              </_2>
              <_3>
                <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="3.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AAL="3.0" AAPL="3.0" AFI="3.0" AMC="3.0" AMCR="3.0" AMD="3.0" AMRS="3.0" AMZN="3.0" ANTE="3.0" ARLO="3.0" AXL="3.0" BBD="3.0" BMY="3.0" BSGM="3.0" BXRX="3.0" CCI="3.0" CCJ="3.0" CCL="3.0" CHNG="3.0" CHX="3.0" CIDM="3.0" CLBS="3.0" CLDR="3.0" CLSN="3.0" CNNE="3.0" CRBP="3.0" CSCO="3.0" DIS="3.0" DISCK="3.0" DNN="3.0" DPW="3.0" DS="3.0" EMAN="3.0" ETSY="3.0" EW="3.0" EWA="3.0" FAST="3.0" FCAC="3.0" FSR="3.0" FUSE="3.0" GEL="3.0" GME="3.0" GOCO="3.0" HBI="3.0" HPQ="3.0" HPR="3.0" HTZ="3.0" HUGE="3.0" HYLN="3.0" IDEX="3.0" IGSB="3.0" INFI="3.0" INO="3.0" INTC="3.0" IZEA="3.0" JE="3.0" KEYS="3.0" LCI="3.0" LKQ="3.0" LUV="3.0" MARA="3.0" MBT="3.0" MDII="3.0" MMDA1="3.0" MRIN="3.0" MSFT="3.0" MU="3.0" NGD="3.0" NIO="3.0" NLOK="3.0" NLSN="3.0" NNVC="3.0" NOK="3.0" OGI="3.0" OPEN="3.0" OPGN="3.0" OTIS="3.0" PAA="3.0" PAAS="3.0" PERI="3.0" PFF="3.0" PGX="3.0" POTX="3.0" PPG="3.0" PTE="3.0" RAD="3.0" RKT="3.0" RP="3.0" RPAY="3.0" RRD="3.0" RSX="3.0" SAVA="3.0" SIOX="3.0" SITC="3.0" SIVR="3.0" SKLZ="3.0" SLQT="3.0" SNAP="3.0" SOS="3.0" SPX="3.0" SQ="3.0" SWK="3.0" TGTX="3.0" TSLA="3.0" TZA="3.0" U="3.0" UAMY="3.0" UEC="3.0" UIS="3.0" USWS="3.0" UUUU="3.0" UXIN="3.0" VALE="3.0" VEU="3.0" VJET="3.0" VTRS="3.0" VWO="3.0" WETF="3.0" X="3.0" XL="3.0" XLP="3.0" XLU="3.0" ZM="3.0"/>
                </TRG_0>
                <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-3.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AAL="-3.0" AAPL="-3.0" AFI="-3.0" AMC="-3.0" AMCR="-3.0" AMD="-3.0" AMRS="-3.0" AMZN="-3.0" ANTE="-3.0" ARLO="-3.0" AXL="-3.0" BBD="-3.0" BMY="-3.0" BSGM="-3.0" BXRX="-3.0" CCI="-3.0" CCJ="-3.0" CCL="-3.0" CHNG="-3.0" CHX="-3.0" CIDM="-3.0" CLBS="-3.0" CLDR="-3.0" CLSN="-3.0" CNNE="-3.0" CRBP="-3.0" CSCO="-3.0" DIS="-3.0" DISCK="-3.0" DNN="-3.0" DPW="-3.0" DS="-3.0" EMAN="-3.0" ETSY="-3.0" EW="-3.0" EWA="-3.0" FAST="-3.0" FCAC="-3.0" FSR="-3.0" FUSE="-3.0" GEL="-3.0" GME="-3.0" GOCO="-3.0" HBI="-3.0" HPQ="-3.0" HPR="-3.0" HTZ="-3.0" HUGE="-3.0" HYLN="-3.0" IDEX="-3.0" IGSB="-3.0" INFI="-3.0" INO="-3.0" INTC="-3.0" IZEA="-3.0" JE="-3.0" KEYS="-3.0" LCI="-3.0" LKQ="-3.0" LUV="-3.0" MARA="-3.0" MBT="-3.0" MDII="-3.0" MMDA1="-3.0" MRIN="-3.0" MSFT="-3.0" MU="-3.0" NGD="-3.0" NIO="-3.0" NLOK="-3.0" NLSN="-3.0" NNVC="-3.0" NOK="-3.0" OGI="-3.0" OPEN="-3.0" OPGN="-3.0" OTIS="-3.0" PAA="-3.0" PAAS="-3.0" PERI="-3.0" PFF="-3.0" PGX="-3.0" POTX="-3.0" PPG="-3.0" PTE="-3.0" RAD="-3.0" RKT="-3.0" RP="-3.0" RPAY="-3.0" RRD="-3.0" RSX="-3.0" SAVA="-3.0" SIOX="-3.0" SITC="-3.0" SIVR="-3.0" SKLZ="-3.0" SLQT="-3.0" SNAP="-3.0" SOS="-3.0" SPX="-3.0" SQ="-3.0" SWK="-3.0" TGTX="-3.0" TSLA="-3.0" TZA="-3.0" U="-3.0" UAMY="-3.0" UEC="-3.0" UIS="-3.0" USWS="-3.0" UUUU="-3.0" UXIN="-3.0" VALE="-3.0" VEU="-3.0" VJET="-3.0" VTRS="-3.0" VWO="-3.0" WETF="-3.0" X="-3.0" XL="-3.0" XLP="-3.0" XLU="-3.0" ZM="-3.0"/>
                </TRG_1>
              </_3>
            </TRADE>
          </CELL1>
          <MODELNODE0 COUNT="2" ROWLAYOUT="true" TYPE="SPLIT" WEIGHT="0.0">
            <MODELNODE0 NAME="0" TYPE="LEAF" WEIGHT="0.5"/>
            <MODELNODE1 COMPOSITENAME="CELL1" NAME="1" TYPE="LEAF" WEIGHT="0.5"/>
          </MODELNODE0>
        </TOS_CHARTS>
        <TRADE ORDER_ENTRY_EXPANDED="true" SYMBOL="AAPL" SYMBOL_GROUP="2">
          <DROPDOWN EXPANDED="false"/>
          <FUTURES EXPANDED="true"/>
          <GROUPING_POS_STMT_SIZE_MODEL COMMON_COLUMN_RATIOS="0.3333333333333333;0.3333333333333333;0.3333333333333333" SECTION_RATIOS="0.15151515151515152;0.5252525252525253;0.32323232323232326">
            <MIDDLE_COLUMN_RATIOS/>
          </GROUPING_POS_STMT_SIZE_MODEL>
          <OPTIONS_CHART_PANEL DELTA_SUBGRAPH="false" HIGHLIGHT_TICKS="false" LOCK_TIME_AXIS="false" PALETTE="ff66ff,ffff,3f002f,d4d4d4,ebea00,ff3600,bf00,666666,c5a000,ffffff,ed7400,c0bfff,f3c500,659fc2,ea88ff,f3c500" PERCENT_AXIS="false" PRODUCT_DEPTH_MODE="OPTIONS">
            <COMBO_CHECK_BOX COLORS="0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,0,1" SELECTION="0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17"/>
            <FUTURES_CURVES CURVES_COUNT="1">
              <CURVE_0 COLOR="-65536" DATE="-1" IS_HIDDEN="false" PRICE_TYPE="mark" SYMBOL="/E7:XCME"/>
            </FUTURES_CURVES>
            <OPTIONS_CHART/>
            <OPTIONS_CHART_CONTROLS STRIKE_COUNT="All" VALUE="IMPL_VOL" VALUE2="IMPL_VOL" VIEW="ALL"/>
          </OPTIONS_CHART_PANEL>
          <OPTIONS_STATISTIC EXPANDED="true"/>
          <OPTIONS_TIME_AND_SALES ALL_CONDITIONS="true" ALL_EXCHANGES="true" ALL_PRICE="true" ALL_QUANTITIES="true" ALL_SERIES="true" ALL_STRIKES="true" EXPANDED="false" SELECTED_CONDITIONS="" SELECTED_EXCHANGES="" SELECTED_SERIES="" SELECTED_SIDE="BOTH"/>
          <OPTION_CHAIN EXPANDED="true"/>
          <PRODUCT_DEPTH EXPANDED="false"/>
          <QSHEETPANEL QSHEET_CONFIGURATION_COLUMNS="VOLUME:1:,OPEN_INT:1:,IMPL_VOL:1:,INTRINSIC:1:,PROB_OTM:1:,DELTA:1:" STRIKE_QTY="14">
            <ALLPRODUCTSPANELSMODEL>
              <OPTION_CHAIN ORDERING="2" SWITCHED_ON="true"/>
              <OPTION_STATISTICS ORDERING="3" SWITCHED_ON="true"/>
              <OPTION_TIME_AND_SALES ORDERING="4" SWITCHED_ON="true"/>
              <TRADE_GRID ORDERING="1" SWITCHED_ON="true"/>
              <UNDERLYING ORDERING="0" SWITCHED_ON="true"/>
              <WIDGET_360 ORDERING="5" SWITCHED_ON="true"/>
            </ALLPRODUCTSPANELSMODEL>
            <OPTIONSLISTPANEL EXPANDED="2021-04-09+100 (Weeklys)"/>
            <OPTIONS_SELECT TEMPLATE_FILTER_NAME="Single">
              <FUTURES_FILTER_NAME ALL_DELIVERABLES="true" ALL_EXCHANGES="true" ALL_EXPIRATION_DAYS="true" ALL_EXPIRATION_TYPES="true" ALL_SIDES="true" ALL_STRIKES="true" SELECTED_DELIVERABLES="REGULAR" SELECTED_EXCHANGES="COMPOSITE" SELECTED_EXPIRATION_TYPES="REGULAR" SELECTED_SIDE="BOTH" THEO_ADJ_TYPE="DOLLAR" THEO_DATE="18402" THEO_VOL_ADJ="0.0">
                <THEO_ADJ_VALUES_NAME DOLLAR="0.0" PERCENT="0.0" SIGMA="0.0"/>
              </FUTURES_FILTER_NAME>
              <STOCK_FILTER_NAME ALL_DELIVERABLES="true" ALL_EXCHANGES="true" ALL_EXPIRATION_DAYS="true" ALL_EXPIRATION_TYPES="true" ALL_SIDES="true" ALL_STRIKES="true" SELECTED_DELIVERABLES="REGULAR" SELECTED_EXCHANGES="COMPOSITE" SELECTED_EXPIRATION_TYPES="REGULAR" SELECTED_SIDE="BOTH" THEO_ADJ_TYPE="DOLLAR" THEO_DATE="18706" THEO_VOL_ADJ="0.0">
                <THEO_ADJ_VALUES_NAME DOLLAR="0.0" PERCENT="0.0" SIGMA="0.0"/>
              </STOCK_FILTER_NAME>
            </OPTIONS_SELECT>
          </QSHEETPANEL>
          <QSHEET_BETA_MODEL/>
          <SORTING/>
          <SORTING1/>
          <SORTING10/>
          <SORTING11/>
          <SORTING12/>
          <SORTING13/>
          <SORTING14/>
          <SORTING15/>
          <SORTING16/>
          <SORTING17/>
          <SORTING18/>
          <SORTING19/>
          <SORTING2/>
          <SORTING20/>
          <SORTING21/>
          <SORTING22/>
          <SORTING23/>
          <SORTING24/>
          <SORTING25/>
          <SORTING26/>
          <SORTING27/>
          <SORTING28/>
          <SORTING29/>
          <SORTING3/>
          <SORTING30/>
          <SORTING31/>
          <SORTING32/>
          <SORTING33/>
          <SORTING34/>
          <SORTING35/>
          <SORTING36/>
          <SORTING37/>
          <SORTING38/>
          <SORTING39/>
          <SORTING4/>
          <SORTING40/>
          <SORTING41/>
          <SORTING42/>
          <SORTING43/>
          <SORTING44/>
          <SORTING45/>
          <SORTING46/>
          <SORTING47/>
          <SORTING48/>
          <SORTING49/>
          <SORTING5/>
          <SORTING50/>
          <SORTING51/>
          <SORTING52/>
          <SORTING53/>
          <SORTING54/>
          <SORTING55/>
          <SORTING56/>
          <SORTING57/>
          <SORTING58/>
          <SORTING59/>
          <SORTING6/>
          <SORTING60/>
          <SORTING61/>
          <SORTING7/>
          <SORTING8/>
          <SORTING9/>
          <TRADE_GRID COLUMN_COUNT="3" DEFAULT_TYPE="LEVEL_II" EXPANDED="false" ROW_COUNT="1">
            <CELL0 ROWSPANELWEIGHT="1.0" ROWWEIGHT0="1.0" ROWWEIGHT1="1.0" SELECTED_TYPE="LEVEL_II" SIDEBAR_IS_ACTIVE="true" SYMBOL_GROUP="-1" TRADE_BUTTONS_MIGRATED="true">
              <ACTIVETRADER VERTICAL="false" VISIBLE="false" WEIGHT="2.0"/>
              <BIG_BUTTONS VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
              <CHART VERTICAL="false" VISIBLE="false" WEIGHT="3.0"/>
              <DASHBOARD VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
              <LEVEL_II SYMBOL_GROUP="-1" VERTICAL="false" VISIBLE="true" WEIGHT="1.0">
                <SORTING COLUMN="BID" ORDER="-1"/>
                <SORTING1 COLUMN="ASK" ORDER="1"/>
              </LEVEL_II>
              <LIVE_NEWS VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
              <PHASE_SCORES VERTICAL="false" VISIBLE="false" WEIGHT="2.0"/>
              <TIME_SALES VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
              <TRADE CONFIGURATION_NAME="SINGLE" OS_AUTO="false" OS_EXPANDED="false" OS_TIF="DAY" TEMPLATE="SINGLE" TRADE_BUTTONS="BUY_MKT;SELL_MKT;MULTI_CANCEL;REVERSE;FLAT;SECOND_LINE;QUANTITY;AUTO_SEND;ORDER_SETUP" VISIBLE="false">
                <OCO_STOP>
                  <TRG_0 TRG_ENBL="true" TRG_LINK="ASK_BID" TRG_OFFSET_MODE="TICK" TRG_OT="STOP" TRG_SETUP="10.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL/>
                  </TRG_0>
                </OCO_STOP>
                <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="1.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL/>
                </TRG_0>
                <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-1.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL/>
                </TRG_1>
                <_2>
                  <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="2.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL/>
                  </TRG_0>
                  <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-2.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL/>
                  </TRG_1>
                </_2>
                <_3>
                  <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="3.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL/>
                  </TRG_0>
                  <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-3.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL/>
                  </TRG_1>
                </_3>
              </TRADE>
            </CELL0>
            <CELL1 ROWSPANELWEIGHT="1.0" ROWWEIGHT0="1.0" ROWWEIGHT1="1.0" SELECTED_TYPE="LEVEL_II" SIDEBAR_IS_ACTIVE="true" SYMBOL=".AAL200918C14" SYMBOL_GROUP="-1" TRADE_BUTTONS_MIGRATED="true">
              <ACTIVETRADER VERTICAL="false" VISIBLE="false" WEIGHT="2.0"/>
              <BIG_BUTTONS VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
              <CHART VERTICAL="false" VISIBLE="false" WEIGHT="3.0"/>
              <DASHBOARD VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
              <LEVEL_II SYMBOL=".AAL200918C14" SYMBOL_GROUP="-1" VERTICAL="false" VISIBLE="true" WEIGHT="1.0">
                <SORTING COLUMN="BID" ORDER="-1"/>
                <SORTING1 COLUMN="ASK" ORDER="1"/>
              </LEVEL_II>
              <LIVE_NEWS VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
              <PHASE_SCORES VERTICAL="false" VISIBLE="false" WEIGHT="2.0"/>
              <TIME_SALES VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
              <TRADE CONFIGURATION_NAME="SINGLE" ORDER_RULES_SET="OPTION" ORDER_TYPE="LIMIT" OS_AUTO="false" OS_EXPANDED="false" OS_TIF="DAY" QTY="4.0" QTY_STEP="1.0" TEMPLATE="SINGLE" TRADE_BUTTONS="BUY_MKT;SELL_MKT;MULTI_CANCEL;REVERSE;FLAT;SECOND_LINE;QUANTITY;AUTO_SEND;ORDER_SETUP" VISIBLE="false">
                <OCO_STOP>
                  <TRG_0 TRG_ENBL="true" TRG_LINK="ASK_BID" TRG_OFFSET_MODE="TICK" TRG_OT="STOP" TRG_SETUP="10.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL/>
                  </TRG_0>
                </OCO_STOP>
                <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="1.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL/>
                </TRG_0>
                <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-1.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL/>
                </TRG_1>
                <_2>
                  <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="2.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL/>
                  </TRG_0>
                  <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-2.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL/>
                  </TRG_1>
                </_2>
                <_3>
                  <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="3.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL/>
                  </TRG_0>
                  <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-3.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL/>
                  </TRG_1>
                </_3>
              </TRADE>
            </CELL1>
            <CELL2 ROWSPANELWEIGHT="1.0" ROWWEIGHT0="1.0" ROWWEIGHT1="1.0" SELECTED_TYPE="LEVEL_II" SIDEBAR_IS_ACTIVE="true" SYMBOL_GROUP="-1" TRADE_BUTTONS_MIGRATED="true">
              <ACTIVETRADER VERTICAL="false" VISIBLE="false" WEIGHT="2.0"/>
              <BIG_BUTTONS VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
              <CHART VERTICAL="false" VISIBLE="false" WEIGHT="3.0"/>
              <DASHBOARD VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
              <LEVEL_II SYMBOL_GROUP="-1" VERTICAL="false" VISIBLE="true" WEIGHT="1.0">
                <SORTING COLUMN="BID" ORDER="-1"/>
                <SORTING1 COLUMN="ASK" ORDER="1"/>
              </LEVEL_II>
              <LIVE_NEWS VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
              <PHASE_SCORES VERTICAL="false" VISIBLE="false" WEIGHT="2.0"/>
              <TIME_SALES VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
              <TRADE CONFIGURATION_NAME="SINGLE" OS_AUTO="false" OS_EXPANDED="false" OS_TIF="DAY" TEMPLATE="SINGLE" TRADE_BUTTONS="BUY_MKT;SELL_MKT;MULTI_CANCEL;REVERSE;FLAT;SECOND_LINE;QUANTITY;AUTO_SEND;ORDER_SETUP" VISIBLE="false">
                <OCO_STOP>
                  <TRG_0 TRG_ENBL="true" TRG_LINK="ASK_BID" TRG_OFFSET_MODE="TICK" TRG_OT="STOP" TRG_SETUP="10.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL/>
                  </TRG_0>
                </OCO_STOP>
                <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="1.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL/>
                </TRG_0>
                <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-1.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL/>
                </TRG_1>
                <_2>
                  <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="2.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL/>
                  </TRG_0>
                  <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-2.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL/>
                  </TRG_1>
                </_2>
                <_3>
                  <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="3.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL/>
                  </TRG_0>
                  <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-3.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL/>
                  </TRG_1>
                </_3>
              </TRADE>
            </CELL2>
            <MODELNODE0 COUNT="3" ROWLAYOUT="true" TYPE="SPLIT" WEIGHT="0.0">
              <MODELNODE0 COMPOSITENAME="CELL0" NAME="0" TYPE="LEAF" WEIGHT="0.3333333333333333"/>
              <MODELNODE1 COMPOSITENAME="CELL1" NAME="1" TYPE="LEAF" WEIGHT="0.3333333333333333"/>
              <MODELNODE2 COMPOSITENAME="CELL2" NAME="2" TYPE="LEAF" WEIGHT="0.3333333333333333"/>
            </MODELNODE0>
          </TRADE_GRID>
          <UNDERLYING1 EXPANDED="true"/>
          <UNDERLYING_PANEL FUTURES_DISPLAYING_MODE="ALL"/>
        </TRADE>
        <TRADER_INTERFACE EXPANDED="true" GADGET_NAME="Account Info" LOCKED="false">
          <ACTIVE_ACCOUNT COMPONENTS="OPTION_BP,FX_BP,NET_LIQ,DTBP,DT_LEFT,UNSETTLED_CASH,CASH_AND_MONEY_MARKET_FUNDS,INTRADAY_LIQ_FUNDS,AVAILABLE_FUNDS_FOR_TRADING,FUTURES_VOLUME_MTD" ITEM_DISPLAY_MODE="HIDE_UNSED"/>
        </TRADER_INTERFACE>
        <TRADER_LOG ORDER_ENTRY_EXPANDED="false"/>
        <TRADE_GROUP ORDER_ENTRY_EXPANDED="false" SELECTED_LAYOUT="TRADE"/>
        <VIDEOS/>
        <VISUALIZE ORDER_ENTRY_EXPANDED="false">
          <HEATMAP_LEGEND EXPANDED="false"/>
        </VISUALIZE>
        <VOICE_CHAT PLAYBACK_LAST_VOLUME_BEFORE_MUTED="0.99" PLAYBACK_VOLUME="0.36" RECORDING_LAST_VOLUME_BEFORE_MUTED="1.0" RECORDING_VOLUME="0.99"/>
        <VOLATILITY_ANALYSIS DELTA_SUBGRAPH="false" HIGHLIGHT_TICKS="false" LOCK_TIME_AXIS="false" ORDER_ENTRY_EXPANDED="false" PALETTE="ff66ff,ffff,ff7e9c,b5b5b5,e7be00,ff5f5f,c531,797979,f9e9a7,ffffff,ff7e00,c0bfff,f6bcb3,74bde8,ea88ff,8fefbf" PERCENT_AXIS="false" PRODUCT_DEPTH_MODE="OPTIONS" SYMBOL="GE" SYMBOL_GROUP="-1">
          <COMBO_CHECK_BOX COLORS="0,1,2,3,4,5,6,7,8,9,10,11,12,13,14" SELECTION="0,1,2,3,4,5,6,7,8,9,10,11,12,13,14"/>
          <FUTURES_CURVES CURVES_COUNT="0"/>
          <OPTIONS_CHART_CONTROLS STRIKE_COUNT="All" VALUE="OPEN_INT" VALUE2="IMPL_VOL" VIEW="ALL"/>
        </VOLATILITY_ANALYSIS>
      </DESKTOP>
      <DESKTOP_ROOT/>
      <DETACHED_FRAME_118 ALWAYS_ON_TOP="false" HEIGHT="1056" LAYOUT="CHARTS_GROUP" STATE="MAXIMIZED_HORIZ  MAXIMIZED_VERT" WIDTH="1936" X="-3848" Y="5">
        <CHARTS_GROUP ORDER_ENTRY_EXPANDED="false" SELECTED_LAYOUT="TOS CHARTS"/>
        <ORDERBOOKPANEL SELECTED_TAB="0"/>
        <ORDERBOOK_STRATEGY_TABLE_SORTING/>
        <ORDER_AND_STRATEGY_BOOK EXPANDED="true"/>
        <ORDER_ENTRY_AND_ORDER_QUEUE>
          <GROUP MARKER="SINGLE"/>
        </ORDER_ENTRY_AND_ORDER_QUEUE>
        <ORDER_ENTRY_AND_SAVED_ORDERS EXPANDED="false"/>
        <PRICE_CONTROL CONDITION="1" CONDITION_LOCKED="false" PRICE="11.7" UNLOCKED="false"/>
        <SORTING COLUMN="TIME" ORDER="-1"/>
        <SWITCH POSITION="0"/>
        <TOS_CHARTS COLUMN_COUNT="2" CURRENT_GRID_NAME="mah_waveTech" DEFAULT_TYPE="DASHBOARD" ORDER_ENTRY_EXPANDED="false" ROW_COUNT="1">
          <CELL0 ROWSPANELWEIGHT="1.0" ROWWEIGHT0="1.0" ROWWEIGHT1="1.0" SELECTED_TYPE="CHART" SIDEBAR_IS_ACTIVE="true" SYMBOL="DCTH" SYMBOL_GROUP="2" TRADE_BUTTONS_MIGRATED="true">
            <ACTIVETRADER CELL_IDS="POSITION_BREAKDOWN;NET_POSITION;AVERAGE_PRICE;PL_OPEN;PL_DAY" COLUMNS="TRADE_AMOUNT:100:,BUY_ORDER:150:,BIDSIZE:60:,PRICE:100:,ASKSIZE:60:,SELL_ORDER:150:" ENABLED="true" SHOW_STUDY_MARKERS="false" SYMBOL="OCGN" SYMBOL_GROUP="2" SYNC_AT_AND_CHART_CROSSHAIR="true" VERTICAL="false" VISIBLE="false" WEIGHT="2.0" ZOOMING_STEPS="1">
              <POSITION_SUMMARY_PANEL CELL_IDS="POSITION_BREAKDOWN;NET_POSITION;AVERAGE_PRICE;PL_OPEN;PL_DAY" ENABLED="true"/>
              <TRADE_BUTTONS_CONFIG CONFIGURATION_NAME="SINGLE" ORDER_RULES_SET="STOCK" ORDER_TYPE="LIMIT" OS_AUTO="false" OS_EXPANDED="true" OS_TIF="DAY" QTY="200.0" QTY_STEP="1.0" TEMPLATE="SINGLE" TRADE_BUTTONS="BUY_MKT;SELL_MKT;MULTI_CANCEL;REVERSE;FLAT;SECOND_LINE;QUANTITY_WITH_BUTTONS;ORDER_TEMPLATE;AUTO_SEND;ORDER_SETUP">
                <OCO_STOP>
                  <TRG_0 TRG_ENBL="true" TRG_LINK="ASK_BID" TRG_OFFSET_MODE="TICK" TRG_OT="STOP" TRG_SETUP="10.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL AA="10.0" AAL="10.0" AAPL="10.0" ADBE="10.0" AEG="10.0" AFI="10.0" AMC="10.0" AMCR="10.0" AMD="10.0" AMRS="10.0" AMZN="10.0" ANTE="10.0" AP="10.0" ARLO="10.0" AXL="10.0" BA="10.0" BBBY="10.0" BBD="10.0" BMY="10.0" BSGM="10.0" BURL="10.0" BXRX="10.0" CAKE="10.0" CCI="10.0" CCIV="10.0" CCJ="10.0" CHNG="10.0" CHX="10.0" CIDM="10.0" CLBS="10.0" CLDR="10.0" CLSN="10.0" CNNE="10.0" COHN="10.0" CRBP="10.0" CSCO="10.0" CVX="10.0" DHT="10.0" DIS="10.0" DISCK="10.0" DNN="10.0" DPW="10.0" DS="10.0" EMAN="10.0" ETSY="10.0" EVRG="10.0" EW="10.0" EWA="10.0" EYE="10.0" EYES="10.0" FAST="10.0" FCAC="10.0" FPRX="10.0" FSLR="10.0" FSR="10.0" FUSE="10.0" GEL="10.0" GME="10.0" GOCO="10.0" GOED="10.0" HBI="10.0" HPQ="10.0" HPR="10.0" HTBX="10.0" HTZ="10.0" HUGE="10.0" HYLN="10.0" HZON="10.0" IDEX="10.0" IDXX="10.0" IGSB="10.0" INFI="10.0" INO="10.0" INTC="10.0" INTU="10.0" IZEA="10.0" JE="10.0" KEYS="10.0" KMPH="10.0" LCI="10.0" LCTX="10.0" LKQ="10.0" LUV="10.0" MBT="10.0" MDII="10.0" MESA="10.0" MFGP="10.0" MMDA1="10.0" MRIN="10.0" MX="10.0" NCLH="10.0" NGD="10.0" NGL="10.0" NIO="10.0" NLOK="10.0" NLSN="10.0" NLST="10.0" NNVC="10.0" NOK="10.0" NOV="10.0" NTP="10.0" NVDA="10.0" OCGN="10.0" OGI="10.0" OPEN="10.0" OPGN="10.0" ORCL="10.0" OTIS="10.0" OVID="10.0" PAA="10.0" PAAS="10.0" PERI="10.0" PFF="10.0" PGX="10.0" POTX="10.0" PPG="10.0" PTE="10.0" RAD="10.0" RKT="10.0" RP="10.0" RPAY="10.0" RRD="10.0" RSX="10.0" RUT="10.0" SAVA="10.0" SID="10.0" SIFY="10.0" SINO="10.0" SIOX="10.0" SITC="10.0" SIVR="10.0" SKLZ="10.0" SKT="10.0" SLQT="10.0" SNAP="10.0" SOS="10.0" SQ="10.0" SWK="10.0" TAP="10.0" TGTX="10.0" TSIA="10.0" TSLA="10.0" TZA="10.0" U="10.0" UAL="10.0" UAMY="10.0" UEC="10.0" UIS="10.0" USWS="10.0" UUUU="10.0" VALE="10.0" VIX="10.0" VJET="10.0" VTRS="10.0" WETF="10.0" WKHS="10.0" X="10.0" XERS="10.0" XL="10.0" XLP="10.0" XLU="10.0" XTLB="10.0" YGMZ="10.0" ZM="10.0"/>
                  </TRG_0>
                </OCO_STOP>
                <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="1.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AA="1.0" AAL="1.0" AAPL="1.0" ADBE="1.0" AEG="1.0" AFI="1.0" AMC="1.0" AMCR="1.0" AMD="1.0" AMRS="1.0" AMZN="1.0" ANTE="1.0" AP="1.0" ARLO="1.0" AXL="1.0" BA="1.0" BBBY="1.0" BBD="1.0" BMY="1.0" BSGM="1.0" BURL="1.0" BXRX="1.0" CAKE="1.0" CCI="1.0" CCIV="1.0" CCJ="1.0" CHNG="1.0" CHX="1.0" CIDM="1.0" CLBS="1.0" CLDR="1.0" CLSN="1.0" CNNE="1.0" COHN="1.0" CRBP="1.0" CSCO="1.0" CVX="1.0" DHT="1.0" DIS="1.0" DISCK="1.0" DNN="1.0" DPW="1.0" DS="1.0" EMAN="1.0" ETSY="1.0" EVRG="1.0" EW="1.0" EWA="1.0" EYE="1.0" EYES="1.0" FAST="1.0" FCAC="1.0" FPRX="1.0" FSLR="1.0" FSR="1.0" FUSE="1.0" GEL="1.0" GME="1.0" GOCO="1.0" GOED="1.0" HBI="1.0" HPQ="1.0" HPR="1.0" HTBX="1.0" HTZ="1.0" HUGE="1.0" HYLN="1.0" HZON="1.0" IDEX="1.0" IDXX="1.0" IGSB="1.0" INFI="1.0" INO="1.0" INTC="1.0" INTU="1.0" IZEA="1.0" JE="1.0" KEYS="1.0" KMPH="1.0" LCI="1.0" LCTX="1.0" LKQ="1.0" LUV="1.0" MBT="1.0" MDII="1.0" MESA="1.0" MFGP="1.0" MMDA1="1.0" MRIN="1.0" MX="1.0" NCLH="1.0" NGD="1.0" NGL="1.0" NIO="1.0" NLOK="1.0" NLSN="1.0" NLST="1.0" NNVC="1.0" NOK="1.0" NOV="1.0" NTP="1.0" NVDA="1.0" OCGN="1.0" OGI="1.0" OPEN="1.0" OPGN="1.0" ORCL="1.0" OTIS="1.0" OVID="1.0" PAA="1.0" PAAS="1.0" PERI="1.0" PFF="1.0" PGX="1.0" POTX="1.0" PPG="1.0" PTE="1.0" RAD="1.0" RKT="1.0" RP="1.0" RPAY="1.0" RRD="1.0" RSX="1.0" RUT="1.0" SAVA="1.0" SID="1.0" SIFY="1.0" SINO="1.0" SIOX="1.0" SITC="1.0" SIVR="1.0" SKLZ="1.0" SKT="1.0" SLQT="1.0" SNAP="1.0" SOS="1.0" SQ="1.0" SWK="1.0" TAP="1.0" TGTX="1.0" TSIA="1.0" TSLA="1.0" TZA="1.0" U="1.0" UAL="1.0" UAMY="1.0" UEC="1.0" UIS="1.0" USWS="1.0" UUUU="1.0" VALE="1.0" VIX="1.0" VJET="1.0" VTRS="1.0" WETF="1.0" WKHS="1.0" X="1.0" XERS="1.0" XL="1.0" XLP="1.0" XLU="1.0" XTLB="1.0" YGMZ="1.0" ZM="1.0"/>
                </TRG_0>
                <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-1.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AA="-1.0" AAL="-1.0" AAPL="-1.0" ADBE="-1.0" AEG="-1.0" AFI="-1.0" AMC="-1.0" AMCR="-1.0" AMD="-1.0" AMRS="-1.0" AMZN="-1.0" ANTE="-1.0" AP="-1.0" ARLO="-1.0" AXL="-1.0" BA="-1.0" BBBY="-1.0" BBD="-1.0" BMY="-1.0" BSGM="-1.0" BURL="-1.0" BXRX="-1.0" CAKE="-1.0" CCI="-1.0" CCIV="-1.0" CCJ="-1.0" CHNG="-1.0" CHX="-1.0" CIDM="-1.0" CLBS="-1.0" CLDR="-1.0" CLSN="-1.0" CNNE="-1.0" COHN="-1.0" CRBP="-1.0" CSCO="-1.0" CVX="-1.0" DHT="-1.0" DIS="-1.0" DISCK="-1.0" DNN="-1.0" DPW="-1.0" DS="-1.0" EMAN="-1.0" ETSY="-1.0" EVRG="-1.0" EW="-1.0" EWA="-1.0" EYE="-1.0" EYES="-1.0" FAST="-1.0" FCAC="-1.0" FPRX="-1.0" FSLR="-1.0" FSR="-1.0" FUSE="-1.0" GEL="-1.0" GME="-1.0" GOCO="-1.0" GOED="-1.0" HBI="-1.0" HPQ="-1.0" HPR="-1.0" HTBX="-1.0" HTZ="-1.0" HUGE="-1.0" HYLN="-1.0" HZON="-1.0" IDEX="-1.0" IDXX="-1.0" IGSB="-1.0" INFI="-1.0" INO="-1.0" INTC="-1.0" INTU="-1.0" IZEA="-1.0" JE="-1.0" KEYS="-1.0" KMPH="-1.0" LCI="-1.0" LCTX="-1.0" LKQ="-1.0" LUV="-1.0" MBT="-1.0" MDII="-1.0" MESA="-1.0" MFGP="-1.0" MMDA1="-1.0" MRIN="-1.0" MX="-1.0" NCLH="-1.0" NGD="-1.0" NGL="-1.0" NIO="-1.0" NLOK="-1.0" NLSN="-1.0" NLST="-1.0" NNVC="-1.0" NOK="-1.0" NOV="-1.0" NTP="-1.0" NVDA="-1.0" OCGN="-1.0" OGI="-1.0" OPEN="-1.0" OPGN="-1.0" ORCL="-1.0" OTIS="-1.0" OVID="-1.0" PAA="-1.0" PAAS="-1.0" PERI="-1.0" PFF="-1.0" PGX="-1.0" POTX="-1.0" PPG="-1.0" PTE="-1.0" RAD="-1.0" RKT="-1.0" RP="-1.0" RPAY="-1.0" RRD="-1.0" RSX="-1.0" RUT="-1.0" SAVA="-1.0" SID="-1.0" SIFY="-1.0" SINO="-1.0" SIOX="-1.0" SITC="-1.0" SIVR="-1.0" SKLZ="-1.0" SKT="-1.0" SLQT="-1.0" SNAP="-1.0" SOS="-1.0" SQ="-1.0" SWK="-1.0" TAP="-1.0" TGTX="-1.0" TSIA="-1.0" TSLA="-1.0" TZA="-1.0" U="-1.0" UAL="-1.0" UAMY="-1.0" UEC="-1.0" UIS="-1.0" USWS="-1.0" UUUU="-1.0" VALE="-1.0" VIX="-1.0" VJET="-1.0" VTRS="-1.0" WETF="-1.0" WKHS="-1.0" X="-1.0" XERS="-1.0" XL="-1.0" XLP="-1.0" XLU="-1.0" XTLB="-1.0" YGMZ="-1.0" ZM="-1.0"/>
                </TRG_1>
                <_2>
                  <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="2.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL AA="2.0" AAL="2.0" AAPL="2.0" ADBE="2.0" AEG="2.0" AFI="2.0" AMC="2.0" AMCR="2.0" AMD="2.0" AMRS="2.0" AMZN="2.0" ANTE="2.0" AP="2.0" ARLO="2.0" AXL="2.0" BA="2.0" BBBY="2.0" BBD="2.0" BMY="2.0" BSGM="2.0" BURL="2.0" BXRX="2.0" CAKE="2.0" CCI="2.0" CCIV="2.0" CCJ="2.0" CHNG="2.0" CHX="2.0" CIDM="2.0" CLBS="2.0" CLDR="2.0" CLSN="2.0" CNNE="2.0" COHN="2.0" CRBP="2.0" CSCO="2.0" CVX="2.0" DHT="2.0" DIS="2.0" DISCK="2.0" DNN="2.0" DPW="2.0" DS="2.0" EMAN="2.0" ETSY="2.0" EVRG="2.0" EW="2.0" EWA="2.0" EYE="2.0" EYES="2.0" FAST="2.0" FCAC="2.0" FPRX="2.0" FSLR="2.0" FSR="2.0" FUSE="2.0" GEL="2.0" GME="2.0" GOCO="2.0" GOED="2.0" HBI="2.0" HPQ="2.0" HPR="2.0" HTBX="2.0" HTZ="2.0" HUGE="2.0" HYLN="2.0" HZON="2.0" IDEX="2.0" IDXX="2.0" IGSB="2.0" INFI="2.0" INO="2.0" INTC="2.0" INTU="2.0" IZEA="2.0" JE="2.0" KEYS="2.0" KMPH="2.0" LCI="2.0" LCTX="2.0" LKQ="2.0" LUV="2.0" MBT="2.0" MDII="2.0" MESA="2.0" MFGP="2.0" MMDA1="2.0" MRIN="2.0" MX="2.0" NCLH="2.0" NGD="2.0" NGL="2.0" NIO="2.0" NLOK="2.0" NLSN="2.0" NLST="2.0" NNVC="2.0" NOK="2.0" NOV="2.0" NTP="2.0" NVDA="2.0" OCGN="2.0" OGI="2.0" OPEN="2.0" OPGN="2.0" ORCL="2.0" OTIS="2.0" OVID="2.0" PAA="2.0" PAAS="2.0" PERI="2.0" PFF="2.0" PGX="2.0" POTX="2.0" PPG="2.0" PTE="2.0" RAD="2.0" RKT="2.0" RP="2.0" RPAY="2.0" RRD="2.0" RSX="2.0" RUT="2.0" SAVA="2.0" SID="2.0" SIFY="2.0" SINO="2.0" SIOX="2.0" SITC="2.0" SIVR="2.0" SKLZ="2.0" SKT="2.0" SLQT="2.0" SNAP="2.0" SOS="2.0" SQ="2.0" SWK="2.0" TAP="2.0" TGTX="2.0" TSIA="2.0" TSLA="2.0" TZA="2.0" U="2.0" UAL="2.0" UAMY="2.0" UEC="2.0" UIS="2.0" USWS="2.0" UUUU="2.0" VALE="2.0" VIX="2.0" VJET="2.0" VTRS="2.0" WETF="2.0" WKHS="2.0" X="2.0" XERS="2.0" XL="2.0" XLP="2.0" XLU="2.0" XTLB="2.0" YGMZ="2.0" ZM="2.0"/>
                  </TRG_0>
                  <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-2.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL AA="-2.0" AAL="-2.0" AAPL="-2.0" ADBE="-2.0" AEG="-2.0" AFI="-2.0" AMC="-2.0" AMCR="-2.0" AMD="-2.0" AMRS="-2.0" AMZN="-2.0" ANTE="-2.0" AP="-2.0" ARLO="-2.0" AXL="-2.0" BA="-2.0" BBBY="-2.0" BBD="-2.0" BMY="-2.0" BSGM="-2.0" BURL="-2.0" BXRX="-2.0" CAKE="-2.0" CCI="-2.0" CCIV="-2.0" CCJ="-2.0" CHNG="-2.0" CHX="-2.0" CIDM="-2.0" CLBS="-2.0" CLDR="-2.0" CLSN="-2.0" CNNE="-2.0" COHN="-2.0" CRBP="-2.0" CSCO="-2.0" CVX="-2.0" DHT="-2.0" DIS="-2.0" DISCK="-2.0" DNN="-2.0" DPW="-2.0" DS="-2.0" EMAN="-2.0" ETSY="-2.0" EVRG="-2.0" EW="-2.0" EWA="-2.0" EYE="-2.0" EYES="-2.0" FAST="-2.0" FCAC="-2.0" FPRX="-2.0" FSLR="-2.0" FSR="-2.0" FUSE="-2.0" GEL="-2.0" GME="-2.0" GOCO="-2.0" GOED="-2.0" HBI="-2.0" HPQ="-2.0" HPR="-2.0" HTBX="-2.0" HTZ="-2.0" HUGE="-2.0" HYLN="-2.0" HZON="-2.0" IDEX="-2.0" IDXX="-2.0" IGSB="-2.0" INFI="-2.0" INO="-2.0" INTC="-2.0" INTU="-2.0" IZEA="-2.0" JE="-2.0" KEYS="-2.0" KMPH="-2.0" LCI="-2.0" LCTX="-2.0" LKQ="-2.0" LUV="-2.0" MBT="-2.0" MDII="-2.0" MESA="-2.0" MFGP="-2.0" MMDA1="-2.0" MRIN="-2.0" MX="-2.0" NCLH="-2.0" NGD="-2.0" NGL="-2.0" NIO="-2.0" NLOK="-2.0" NLSN="-2.0" NLST="-2.0" NNVC="-2.0" NOK="-2.0" NOV="-2.0" NTP="-2.0" NVDA="-2.0" OCGN="-2.0" OGI="-2.0" OPEN="-2.0" OPGN="-2.0" ORCL="-2.0" OTIS="-2.0" OVID="-2.0" PAA="-2.0" PAAS="-2.0" PERI="-2.0" PFF="-2.0" PGX="-2.0" POTX="-2.0" PPG="-2.0" PTE="-2.0" RAD="-2.0" RKT="-2.0" RP="-2.0" RPAY="-2.0" RRD="-2.0" RSX="-2.0" RUT="-2.0" SAVA="-2.0" SID="-2.0" SIFY="-2.0" SINO="-2.0" SIOX="-2.0" SITC="-2.0" SIVR="-2.0" SKLZ="-2.0" SKT="-2.0" SLQT="-2.0" SNAP="-2.0" SOS="-2.0" SQ="-2.0" SWK="-2.0" TAP="-2.0" TGTX="-2.0" TSIA="-2.0" TSLA="-2.0" TZA="-2.0" U="-2.0" UAL="-2.0" UAMY="-2.0" UEC="-2.0" UIS="-2.0" USWS="-2.0" UUUU="-2.0" VALE="-2.0" VIX="-2.0" VJET="-2.0" VTRS="-2.0" WETF="-2.0" WKHS="-2.0" X="-2.0" XERS="-2.0" XL="-2.0" XLP="-2.0" XLU="-2.0" XTLB="-2.0" YGMZ="-2.0" ZM="-2.0"/>
                  </TRG_1>
                </_2>
                <_3>
                  <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="3.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL AA="3.0" AAL="3.0" AAPL="3.0" ADBE="3.0" AEG="3.0" AFI="3.0" AMC="3.0" AMCR="3.0" AMD="3.0" AMRS="3.0" AMZN="3.0" ANTE="3.0" AP="3.0" ARLO="3.0" AXL="3.0" BA="3.0" BBBY="3.0" BBD="3.0" BMY="3.0" BSGM="3.0" BURL="3.0" BXRX="3.0" CAKE="3.0" CCI="3.0" CCIV="3.0" CCJ="3.0" CHNG="3.0" CHX="3.0" CIDM="3.0" CLBS="3.0" CLDR="3.0" CLSN="3.0" CNNE="3.0" COHN="3.0" CRBP="3.0" CSCO="3.0" CVX="3.0" DHT="3.0" DIS="3.0" DISCK="3.0" DNN="3.0" DPW="3.0" DS="3.0" EMAN="3.0" ETSY="3.0" EVRG="3.0" EW="3.0" EWA="3.0" EYE="3.0" EYES="3.0" FAST="3.0" FCAC="3.0" FPRX="3.0" FSLR="3.0" FSR="3.0" FUSE="3.0" GEL="3.0" GME="3.0" GOCO="3.0" GOED="3.0" HBI="3.0" HPQ="3.0" HPR="3.0" HTBX="3.0" HTZ="3.0" HUGE="3.0" HYLN="3.0" HZON="3.0" IDEX="3.0" IDXX="3.0" IGSB="3.0" INFI="3.0" INO="3.0" INTC="3.0" INTU="3.0" IZEA="3.0" JE="3.0" KEYS="3.0" KMPH="3.0" LCI="3.0" LCTX="3.0" LKQ="3.0" LUV="3.0" MBT="3.0" MDII="3.0" MESA="3.0" MFGP="3.0" MMDA1="3.0" MRIN="3.0" MX="3.0" NCLH="3.0" NGD="3.0" NGL="3.0" NIO="3.0" NLOK="3.0" NLSN="3.0" NLST="3.0" NNVC="3.0" NOK="3.0" NOV="3.0" NTP="3.0" NVDA="3.0" OCGN="3.0" OGI="3.0" OPEN="3.0" OPGN="3.0" ORCL="3.0" OTIS="3.0" OVID="3.0" PAA="3.0" PAAS="3.0" PERI="3.0" PFF="3.0" PGX="3.0" POTX="3.0" PPG="3.0" PTE="3.0" RAD="3.0" RKT="3.0" RP="3.0" RPAY="3.0" RRD="3.0" RSX="3.0" RUT="3.0" SAVA="3.0" SID="3.0" SIFY="3.0" SINO="3.0" SIOX="3.0" SITC="3.0" SIVR="3.0" SKLZ="3.0" SKT="3.0" SLQT="3.0" SNAP="3.0" SOS="3.0" SQ="3.0" SWK="3.0" TAP="3.0" TGTX="3.0" TSIA="3.0" TSLA="3.0" TZA="3.0" U="3.0" UAL="3.0" UAMY="3.0" UEC="3.0" UIS="3.0" USWS="3.0" UUUU="3.0" VALE="3.0" VIX="3.0" VJET="3.0" VTRS="3.0" WETF="3.0" WKHS="3.0" X="3.0" XERS="3.0" XL="3.0" XLP="3.0" XLU="3.0" XTLB="3.0" YGMZ="3.0" ZM="3.0"/>
                  </TRG_0>
                  <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-3.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL AA="-3.0" AAL="-3.0" AAPL="-3.0" ADBE="-3.0" AEG="-3.0" AFI="-3.0" AMC="-3.0" AMCR="-3.0" AMD="-3.0" AMRS="-3.0" AMZN="-3.0" ANTE="-3.0" AP="-3.0" ARLO="-3.0" AXL="-3.0" BA="-3.0" BBBY="-3.0" BBD="-3.0" BMY="-3.0" BSGM="-3.0" BURL="-3.0" BXRX="-3.0" CAKE="-3.0" CCI="-3.0" CCIV="-3.0" CCJ="-3.0" CHNG="-3.0" CHX="-3.0" CIDM="-3.0" CLBS="-3.0" CLDR="-3.0" CLSN="-3.0" CNNE="-3.0" COHN="-3.0" CRBP="-3.0" CSCO="-3.0" CVX="-3.0" DHT="-3.0" DIS="-3.0" DISCK="-3.0" DNN="-3.0" DPW="-3.0" DS="-3.0" EMAN="-3.0" ETSY="-3.0" EVRG="-3.0" EW="-3.0" EWA="-3.0" EYE="-3.0" EYES="-3.0" FAST="-3.0" FCAC="-3.0" FPRX="-3.0" FSLR="-3.0" FSR="-3.0" FUSE="-3.0" GEL="-3.0" GME="-3.0" GOCO="-3.0" GOED="-3.0" HBI="-3.0" HPQ="-3.0" HPR="-3.0" HTBX="-3.0" HTZ="-3.0" HUGE="-3.0" HYLN="-3.0" HZON="-3.0" IDEX="-3.0" IDXX="-3.0" IGSB="-3.0" INFI="-3.0" INO="-3.0" INTC="-3.0" INTU="-3.0" IZEA="-3.0" JE="-3.0" KEYS="-3.0" KMPH="-3.0" LCI="-3.0" LCTX="-3.0" LKQ="-3.0" LUV="-3.0" MBT="-3.0" MDII="-3.0" MESA="-3.0" MFGP="-3.0" MMDA1="-3.0" MRIN="-3.0" MX="-3.0" NCLH="-3.0" NGD="-3.0" NGL="-3.0" NIO="-3.0" NLOK="-3.0" NLSN="-3.0" NLST="-3.0" NNVC="-3.0" NOK="-3.0" NOV="-3.0" NTP="-3.0" NVDA="-3.0" OCGN="-3.0" OGI="-3.0" OPEN="-3.0" OPGN="-3.0" ORCL="-3.0" OTIS="-3.0" OVID="-3.0" PAA="-3.0" PAAS="-3.0" PERI="-3.0" PFF="-3.0" PGX="-3.0" POTX="-3.0" PPG="-3.0" PTE="-3.0" RAD="-3.0" RKT="-3.0" RP="-3.0" RPAY="-3.0" RRD="-3.0" RSX="-3.0" RUT="-3.0" SAVA="-3.0" SID="-3.0" SIFY="-3.0" SINO="-3.0" SIOX="-3.0" SITC="-3.0" SIVR="-3.0" SKLZ="-3.0" SKT="-3.0" SLQT="-3.0" SNAP="-3.0" SOS="-3.0" SQ="-3.0" SWK="-3.0" TAP="-3.0" TGTX="-3.0" TSIA="-3.0" TSLA="-3.0" TZA="-3.0" U="-3.0" UAL="-3.0" UAMY="-3.0" UEC="-3.0" UIS="-3.0" USWS="-3.0" UUUU="-3.0" VALE="-3.0" VIX="-3.0" VJET="-3.0" VTRS="-3.0" WETF="-3.0" WKHS="-3.0" X="-3.0" XERS="-3.0" XL="-3.0" XLP="-3.0" XLU="-3.0" XTLB="-3.0" YGMZ="-3.0" ZM="-3.0"/>
                  </TRG_1>
                </_3>
              </TRADE_BUTTONS_CONFIG>
            </ACTIVETRADER>
            <BIG_BUTTONS VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <CHART COLUMN_COUNT="1" CONFIGURATION="@v9@%0:com.devexperts.toschart.model,1:com.devexperts.tos.chartdata,2:com.devexperts.tos.thinkscript.constants,3:com.devexperts.tos.thinkscript.data,4:java.awt,5:com.devexperts.toschart.utils,6:com.devexperts.toschart.control.subgraph,7:com.devexperts.toschart.elstudies,8:com.devexperts.toschart.script%owner{chartAggregationPeriods:ChartAggregationPeriodArray0{25::ChartAggregationPeriod0},chartAggregationPeriods=@ChartAggregationPeriodArray0,colors{7::CustomColor0,9::CustomColor1,8::CustomColor2,1::CustomColor3,5::CustomColor4,6::CustomColor5}}#com.devexperts.toschart.core.ChartModel{disabledMessageTypes.+(!%0.BuiltinExplanationMessage$MessageType.findByCode(1)),encodedMixinsState=&quot;{\&quot;common\&quot;:{\&quot;DRAWING_SETS\&quot;:\&quot;{}\&quot;},\&quot;state_props\&quot;:{\&quot;state_type\&quot;:\&quot;REGULAR\&quot;},\&quot;monkey_bars_exp\&quot;:{\&quot;LikefolioMixin\&quot;:\&quot;{\\\&quot;paintingSettings\\\&quot;:{\\\&quot;neutralSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;positiveSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;negativeSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;sentimentSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true}},\\\&quot;shownDivisions\\\&quot;:[],\\\&quot;allDivisions\\\&quot;:[]}\&quot;},\&quot;monkey_bars\&quot;:{},\&quot;seasonality\&quot;:{},\&quot;regular\&quot;:{\&quot;DescriberMixin\&quot;:\&quot;{\\\&quot;visibility\\\&quot;:\\\&quot;HIDE_PANEL\\\&quot;,\\\&quot;studiesMode\\\&quot;:\\\&quot;HIDE_STUDIES\\\&quot;}\&quot;,\&quot;LikefolioMixin\&quot;:\&quot;{\\\&quot;paintingSettings\\\&quot;:{\\\&quot;neutralSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;positiveSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;negativeSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;sentimentSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true}},\\\&quot;shownDivisions\\\&quot;:[],\\\&quot;allDivisions\\\&quot;:[]}\&quot;}}&quot;,encodedPatternsModel=&quot;{\&quot;showPatterns\&quot;:true,\&quot;models\&quot;:[],\&quot;fibModels\&quot;:[]}&quot;,groupId=&quot;default&quot;,styleSettings{activeTool=2,chartAggregationSettings.timeAggregationSettings=!%0.TimeFrameAggregationSettings.createTickOrTimeAggregation(!%1.ChartRange.findByCode(&quot;YEAR10&quot;),@ChartAggregationPeriod0),commonStyleSettings{chartModeName:ChartModeName0,chartModes.!get(@ChartModeName0){chartPaintingType=!java.lang.Enum.valueOf(*%2.ChartPaintingType.class,&quot;BAR&quot;)},colorSettings{backgroundColor=!%3.CustomColor.findByIndex(&quot;101&quot;),barTypeColors{downColor=#%3.CustomColor(#%4.Color(51,51,255,255)),neutralColor=@CustomColor0,upColor=@CustomColor1},candleTypeColors.fillUp=&lt;T,monkeyProfileTypeColors.defaultRowHeight=&lt;F,mpExpandedTypeColors.defaultRowHeight=&lt;F,volumeColor=@CustomColor0},expansion{down=20,right=10,up=20},fitArrowsToScreen=&lt;F,fitStudiesToScreen=&lt;F,leftAxisRegulator{maxValue=21.34114905d,minValue=16.81218429d},manualAxisRegulator{maxValue=22.89598143d,minValue=8.46289125d},overlappedVolume=&lt;T,previousRightExpansion=10,shortCuts{^(&quot;Time Zone&quot;,&lt;F),^(&quot;Show Expiration Friday &quot;,&lt;F),^(&quot;Keep Price Zoom&quot;,&lt;F),^(&quot;enableLeftAxis&quot;,&lt;F),^(&quot;Fit expected price ranges&quot;,&lt;F),^(&quot;emphasizeDigitMPExpanded&quot;,&lt;F),^(&quot;showWicksCandleTrend&quot;,&lt;F),^(&quot;highlightEarnings&quot;,&lt;F),^(&quot;synchronizeCrosshair&quot;,&lt;F),^(&quot;myToolsMode&quot;,&lt;F),^(&quot;seasonalityStyle&quot;,&lt;F),^(&quot;Show Price Subgraph&quot;,&lt;F),^(&quot;closePriceLevel&quot;,&lt;F),^(&quot;Color Volume As Symbol Ticks&quot;,&lt;F),^(&quot;highlightPhantomRBars&quot;,&lt;F),^(&quot;Cross type &quot;,&lt;F),^(&quot;Fit Studies to Screen&quot;,&lt;F),^(&quot;Fit Orders&quot;,&lt;F),^(&quot;Bubbles as Percentage&quot;,&lt;F),^(&quot;hideStatusString&quot;,&lt;F),^(&quot;Show Studies &quot;,&lt;F),^(&quot;showWicksHeikinAshi&quot;,&lt;F),^(&quot;Alerts&quot;,&lt;F),^(&quot;Chart scale&quot;,&lt;F),^(&quot;Fit High/Low&quot;,&lt;F),^(&quot;Orders&quot;,&lt;F),!get:Boolean0(&quot;Chart mode&quot;),^(&quot;Use Log Scale &quot;,@Boolean0),^(&quot;Fit Study Markers to Screen&quot;,&lt;F),^(&quot;Fit Alerts&quot;,&lt;F),^(&quot;Fit patterns&quot;,&lt;F),^(&quot;Percentage View&quot;,&lt;F),^(&quot;Make Auto Zoom &quot;,&lt;F),^(&quot;Show Year Marking Line&quot;,&lt;F),^(&quot;Show Rollover Line&quot;,&lt;F),^(&quot;Show High/Low Bubbles &quot;,&lt;F),^(&quot;Snap mode&quot;,&lt;F),^(&quot;highlightStudies&quot;,&lt;F),^(&quot;Overlapped Volume&quot;,&lt;F),^(&quot;Show Symbol Logo&quot;,&lt;F),^(&quot;Show Last Price Bubble &quot;,&lt;F),^(&quot;emphasizeDigitMP&quot;,&lt;F),^(&quot;Snap crosshairs to&quot;,&lt;F),^(&quot;Show grid&quot;,&lt;F),^(&quot;showWicksCandle&quot;,&lt;F),^(&quot;Show trades&quot;,&lt;F),^(&quot;highlightSeasons&quot;,&lt;F),^(&quot;Snap drawings to&quot;,&lt;F),^(&quot;Extend Order/Alert Line to Left&quot;,&lt;F)},showExpFriday=&lt;F,showTradeExecution=&lt;T,snapMode=!%5.SnapUtils$SnapMode.valueOf(*%5.SnapUtils$SnapMode.class,&quot;SNAP_TO_HLOC&quot;),step=76.92307692307692d,suppressAutoZoom=&lt;T},forexStyleSettings.shortCuts.^(&quot;Show Volume Subgraph&quot;,&lt;F),futuresStyleSettings{highlightExtendedHours=&lt;T,shortCuts{^(&quot;adjustForContractChanges&quot;,&lt;F),^(&quot;Show Open Interest&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,@Boolean0),^(&quot;showContractChangeEvents&quot;,&lt;F),^(&quot;futures_daily_close_price&quot;,&lt;F),^(&quot;Show Options&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,&lt;F),^(&quot;startAtMarketOpen&quot;,&lt;F)},showOpenInterest=&lt;F,showVolume=&lt;F},optionsStyleSettings.shortCuts{^(&quot;Show Open Interest&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,@Boolean0),^(&quot;Show Theo Price&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,&lt;F),^(&quot;startAtMarketOpen&quot;,&lt;F)},otherStyleSettings{shortCuts{^(&quot;Show Social Sentiment&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,@Boolean0),^(&quot;Show Options&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,@Boolean0),^(&quot;Show Corporate Actions&quot;,&lt;F),^(&quot;Show CNBC Video&quot;,&lt;F),^(&quot;startAtMarketOpen&quot;,&lt;F),^(&quot;adjustForDividends&quot;,&lt;F)},showVolume=&lt;F,startAggregationAtMarketOpen=&lt;F},setsIdentifiers.styleSetName=&quot;waveTech6&quot;},subgraphModels{!get(#%6.SubgraphId(&quot;Symbol&quot;)){height=433,storableIndicators{+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence{body=&quot;# @new\n# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2009-2021\n#\n# Source code isn\'t available.\n\nplot slowAvg = Double.NaN;\nplot fastAvg = Double.NaN;\nplot BuySignal = Double.NaN;\nplot SellSignal = Double.NaN;&quot;,name=&quot;PPS&quot;}){hidden=&lt;T}),+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence{body=&quot;# @new\n# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2009-2021\n#\n\n#wizard input: length1\n#wizard text: -period\n#wizard input: averageType1\n#wizard text: crosses\n#wizard input: crossingType\n#wizard input: length2\n#wizard text: -period\n#wizard input: averageType2\n#wizard text: Price:\n#wizard input: price\n\ninput price = close;\ninput length1 = 15;\ninput length2 = 30;\ninput averageType1 = AverageType.Simple;\ninput averageType2 = AverageType.Simple;\ninput crossingType = {default above, below};\n\ndef avg1 = MovingAverage(averageType1, price, length1);\ndef avg2 = MovingAverage(averageType2, price, length2);\n\nplot signal = crosses(avg1, avg2, crossingType == CrossingType.above);\n\nsignal.DefineColor(\&quot;Above\&quot;, GetColor(6));\nsignal.DefineColor(\&quot;Below\&quot;, GetColor(7));\nsignal.AssignValueColor(if crossingType == CrossingType.above then signal.color(\&quot;Above\&quot;) else signal.color(\&quot;Below\&quot;));\n\nsignal.SetPaintingStrategy(if crossingType == CrossingType.above\n    then PaintingStrategy.BOOLEAN_ARROW_UP\n    else PaintingStrategy.BOOLEAN_ARROW_DOWN);&quot;,name=&quot;MovingAvgCrossover&quot;}){inputsMap:TreeMap0{^(&quot;averageType1&quot;,&quot;EXPONENTIAL&quot;),^(&quot;averageType2&quot;,&quot;EXPONENTIAL&quot;),^(&quot;length1&quot;,34),^(&quot;length2&quot;,150),^(&quot;price&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap0,plots{0:{palette.^(&quot;Above&quot;,!%3.CustomColor.findByIndex(&quot;16&quot;))}}}),+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence{body=&quot;# Original Code From: TD Ameritrade IP Company, Inc. (c) 2009-2020\n# Original StudyName: ATRTrailingStop\n# Type: Study\n\n# blackFLAG FTS SwingArms \n# Edited by: Jose Azcarate \n# blackFLAG Futures Trading - FOR EDUCATIONAL PURPOSES ONLY\n# TWITTER: @blackflagfuture\n# Settings Vary. My preferred setting is 28 / 5  But also use 30 / 8 and 5 / 3.5 depending on strategy.\n\ninput trailType = {default modified, unmodified};\ninput ATRPeriod = 28;\ninput ATRFactor = 5;\ninput firstTrade = {default long, short};\ninput averageType = AverageType.WILDERS;\n\ninput fib1Level = 61.8;\ninput fib2Level = 78.6;\ninput fib3Level = 88.6;\n\nAssert(ATRFactor &gt; 0, \&quot;\'atr factor\' must be positive: \&quot; + ATRFactor);\n\ndef HiLo = Min(high - low, 1.5 * Average(high - low, ATRPeriod));\ndef HRef = if low &lt;= high[1]\n    then high - close[1]\n    else (high - close[1]) - 0.5 * (low - high[1]);\ndef LRef = if high &gt;= low[1]\n    then close[1] - low\n    else (close[1] - low) - 0.5 * (low[1] - high);\n\ndef trueRange;\nswitch (trailType) {\ncase modified:\n    trueRange = Max(HiLo, Max(HRef, LRef));\ncase unmodified:\n    trueRange = TrueRange(high, close, low);\n}\ndef loss = ATRFactor * MovingAverage(averageType, trueRange, ATRPeriod);\n\ndef state = {default init, long, short};\ndef trail;\nswitch (state[1]) {\ncase init:\n    if (!IsNaN(loss)) {\n        switch (firstTrade) {\n        case long:\n            state = state.long;\n            trail = close - loss;\n        case short:\n            state = state.short;\n            trail = close + loss;\n    }\n    } else {\n        state = state.init;\n        trail = Double.NaN;\n    }\ncase long:\n    if (close &gt; trail[1]) {\n        state = state.long;\n        trail = Max(trail[1], close - loss);\n    } else {\n        state = state.short;\n        trail = close + loss;\n    }\ncase short:\n    if (close &lt; trail[1]) {\n        state = state.short;\n        trail = Min(trail[1], close + loss);\n    } else {\n        state = state.long;\n        trail = close - loss;\n    }\n}\n\ndef BuySignal = Crosses(state == state.long, 0, CrossingDirection.ABOVE);\ndef SellSignal = Crosses(state == state.short, 0, CrossingDirection.ABOVE);\n\ndef ex = if BuySignal then high else if SellSignal then low else if state == state.long then Max(ex[1], high) else if state == state.short then Min(ex[1], low) else ex[1];\n\nplot TrailingStop = trail;\n\nTrailingStop.SetPaintingStrategy(PaintingStrategy.POINTS);\nTrailingStop.DefineColor(\&quot;Long\&quot;, Color.GREEN);\nTrailingStop.DefineColor(\&quot;Short\&quot;, Color.RED);\nTrailingStop.AssignValueColor(if state == state.long\n    then TrailingStop.Color(\&quot;Long\&quot;)\n    else TrailingStop.Color(\&quot;Short\&quot;));\n\nplot Extremum = ex;\nExtremum.SetPaintingStrategy(PaintingStrategy.POINTS);\nExtremum.DefineColor(\&quot;HH\&quot;, Color.GREEN);\nExtremum.DefineColor(\&quot;LL\&quot;, Color.RED);\nExtremum.AssignValueColor(if state == state.long\n    then Extremum.Color(\&quot;HH\&quot;)\n    else Extremum.Color(\&quot;LL\&quot;));\nExtremum.Hide();\n\ndef f1 = ex + (trail - ex) * fib1Level / 100;\ndef f2 = ex + (trail - ex) * fib2Level / 100;\ndef f3 = ex + (trail - ex) * fib3Level / 100;\ndef l100 = trail + 0;\n###mahi\ninput  price =close;\nplot buySignalcnfm =  state == state.long and price crosses above f3;\nbuySignalcnfm.setPaintingStrategy(paintingStrategy.BOOLEAN_ARROW_UP); #SetPaintingStrategy(PaintingStrategy.POINTS);\nbuysignalcnfm.setLineWeight(5);\nbuysignalcnfm.SetDefaultColor(Color.pink);\n\n\n#####\nplot Fib1 = f1;\nFib1.SetPaintingStrategy(PaintingStrategy.POINTS);\nFib1.SetDefaultColor(Color.white);\nFib1.Hide();\n\nFib1.DefineColor(\&quot;Fshort\&quot;,  Color.light_red);\nFib1.DefineColor(\&quot;Flong\&quot;,  Color.Light_green);\nFib1.AssignValueColor(if state == state.long\n    then Fib1.Color(\&quot;Flong\&quot;)\n    else Fib1.Color(\&quot;Fshort\&quot;));\n\nplot Fib2 = f2;\nFib2.SetPaintingStrategy(PaintingStrategy.POINTS);\nFib2.SetDefaultColor(Color.white);\nFib2.Hide();\nFib2.DefineColor(\&quot;Fshort\&quot;,  Color.red);\nFib2.DefineColor(\&quot;Flong\&quot;,  Color.green);\nFib2.AssignValueColor(if state == state.long\n    then Fib2.Color(\&quot;Flong\&quot;)\n    else Fib2.Color(\&quot;Fshort\&quot;));\n\n\nplot Fib3 = f3;\nFib3.SetPaintingStrategy(PaintingStrategy.POINTS);\nFib3.SetDefaultColor(Color.white);\nFib3.Hide();\nFib3.AssignValueColor(if state == state.long\n    then Fib1.Color(\&quot;Flong\&quot;)\n    else Fib1.Color(\&quot;Fshort\&quot;));\n\n#input show_cloud = yes;\n\ndef Na = Double.NaN;\ninput showCloud= yes;\n\ndef cloudF1 = If( ShowCloud, f1, Na);\ndef cloudF2  = If(ShowCloud, f2, Na);\ndef cloudF3  = If(ShowCloud, f3, Na);\n#AddCloud(cloudhigh, cloudlow, Color.GRAY, Color.GRAY);\n\n\n\n\n\n\nAddCloud(cloudF1, cloudF2, Color.LIGHT_GREEN, Color.LIGHT_RED, no);\nAddCloud(cloudF2,cloudF3, Color.GREEN, Color.RED, no);\nAddCloud(cloudF3, l100, Color.DARK_GREEN, Color.DARK_RED, no);\n\ndef l1 = state[1] == state.long and close crosses below f1[1];\ndef l2 = state[1] == state.long and close crosses below f2[1];\ndef l3 = state[1] == state.long and close crosses below f3[1];\ndef s1 = state[1] == state.short and close crosses above f1[1];\ndef s2 = state[1] == state.short and close crosses above f2[1];\ndef s3 = state[1] == state.short and close crosses above f3[1];\n\ndef atr = Average(TrueRange(high, close, low), 14);\n\nplot LS1 = if l1 then low - atr else Double.NaN;\nplot LS2 = if l2 then low - 1.5 * atr else Double.NaN;\nplot LS3 = if l3 then low - 2 * atr else Double.NaN;\nplot SS1 = if s1 then high + atr else Double.NaN;\nplot SS2 = if s2 then high + 1.5 * atr else Double.NaN;\nplot SS3 = if s3 then high + 2 * atr else Double.NaN;\n\nLS1.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\nLS1.SetDefaultColor(Color.GREEN);\nLS1.SetLineWeight(1);\nLS1.Hide();\nLS2.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\nLS2.SetDefaultColor(Color.GREEN);\nLS2.SetLineWeight(1);\nLS2.Hide();\nLS3.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\nLS3.SetDefaultColor(Color.violet);\nLS3.SetLineWeight(4);\n#LS3.Hide();\n\nSS1.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\nSS1.SetDefaultColor(Color.RED);\nSS1.SetLineWeight(1);\nSS1.Hide();\nSS2.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\nSS2.SetDefaultColor(Color.RED);\nSS2.SetLineWeight(1);\nSS2.Hide();\nSS3.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\nSS3.SetDefaultColor(Color.RED);\nSS3.SetLineWeight(1);\nSS3.Hide();\n\nAlert(l1, \&quot;Price crossed below Fib1 level in long trend\&quot;, Alert.BAR, Sound.Bell);\nAlert(l2, \&quot;Price crossed below Fib2 level in long trend\&quot;, Alert.BAR, Sound.Bell);\nAlert(l3, \&quot;Price crossed below Fib3 level in long trend\&quot;, Alert.BAR, Sound.Bell);\nAlert(s1, \&quot;Price crossed above Fib1 level in short trend\&quot;, Alert.BAR, Sound.Bell);\nAlert(s2, \&quot;Price crossed above Fib2 level in short trend\&quot;, Alert.BAR, Sound.Bell);\nAlert(s3, \&quot;Price crossed above Fib3 level in short trend\&quot;, Alert.BAR, Sound.Bell);\n&quot;,name=&quot;_0bb1d049_f213_41ae_b5c1_8617e7c29471&quot;}){alerts:LocalAlertArray0,alerts=@LocalAlertArray0,hidden=&lt;T,inputsMap:TreeMap1{^(&quot;fib1Level&quot;,0.236d),^(&quot;fib2Level&quot;,0.5d),^(&quot;fib3Level&quot;,0.764d),^(&quot;price&quot;,&quot;CLOSE&quot;),^(&quot;showCloud&quot;,&lt;F)},inputsMap=@TreeMap1,plots{0:{hiding=&lt;T},3:{hiding=&lt;F},4:{hiding=&lt;F},5:{hiding=&lt;F}}}),+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence{body=&quot;input marketThreshold = 0.0025;\ninput timeFrame = {default DAY, \&quot;2 DAYS\&quot;, \&quot;3 DAYS\&quot;, \&quot;4 DAYS\&quot;, WEEK, MONTH, \&quot;OPT EXP\&quot;, QUARTER, YEAR};\ninput showOnlyToday = no;\ninput applyPersonsLevelsFilter = yes;\ninput drawLine =yes;\n\nassert(marketThreshold &gt;= 0, \&quot;\'market threshold\' must not be negative: \&quot; + marketThreshold);\n\ndef marketType = {default DISABLED, NEUTRAL, BEARISH, BULLISH};\n\ndef PP2 = high(period = timeFrame)[2] + low(period = timeFrame)[2] + close(period = timeFrame)[2];\n\nmarketType = if !applyPersonsLevelsFilter then marketType.DISABLED else\nif PP2[-1] &gt; (PP2[-1] + PP2 + PP2[1]) / 3 + marketThreshold then marketType.BULLISH else\nif PP2[-1] &lt; (PP2[-1] + PP2 + PP2[1]) / 3 - marketThreshold then marketType.BEARISH else marketType.NEUTRAL;\n\nplot R3;\nplot R2;\nplot R1;\nplot RR;\nplot PP;\nplot SS;\nplot S1;\nplot S2;\nplot S3;\n\nif showOnlyToday and !IsNaN(close(period = timeFrame)[-1])\nthen {\n    R1 = Double.NaN;\n    R2 = Double.NaN;\n    R3 = Double.NaN;\n    PP = Double.NaN;\n    S1 = Double.NaN;\n    S2 = Double.NaN;\n    S3 = Double.NaN;\n} else {\n    PP = (high(period = timeFrame)[1] + low(period = timeFrame)[1] + close(period = timeFrame)[1]) / 3;\n    R1 = 2 * PP - low(period = timeFrame)[1];\n    R2 = PP + high(period = timeFrame)[1] - low(period = timeFrame)[1];\n    R3 = R2 + high(period = timeFrame)[1] - low(period = timeFrame)[1];\n    S1 = 2 * PP - high(period = timeFrame)[1];\n    S2 = PP - high(period = timeFrame)[1] + low(period = timeFrame)[1];\n    S3 = S2 - high(period = timeFrame)[1] + low(period = timeFrame)[1];\n}\n\nRR = if (marketType == marketType.BEARISH or marketType == marketType.NEUTRAL) then R1 else R2;\nSS = if (marketType == marketType.BULLISH or marketType == marketType.NEUTRAL) then S1 else S2;\n\nRR.setHiding(!applyPersonsLevelsFilter);\nR1.setHiding(applyPersonsLevelsFilter);\nR2.setHiding(applyPersonsLevelsFilter);\nR3.hide();\nSS.setHiding(!applyPersonsLevelsFilter);\nS1.setHiding(applyPersonsLevelsFilter);\nS2.setHiding(applyPersonsLevelsFilter);\nS3.hide();\n\nPP.SetDefaultColor(GetColor(0));\nR1.SetDefaultColor(GetColor(5));\nR2.SetDefaultColor(GetColor(5));\nR3.SetDefaultColor(GetColor(5));\nS1.SetDefaultColor(GetColor(6));\nS2.SetDefaultColor(GetColor(6));\nS3.SetDefaultColor(GetColor(6));\n\nSS.DefineColor(\&quot;S1\&quot;, GetColor(6));\nSS.DefineColor(\&quot;S2\&quot;, GetColor(6));\nSS.AssignValueColor(if SS == S1 then SS.color(\&quot;S1\&quot;) else SS.color(\&quot;S2\&quot;));\n\nRR.DefineColor(\&quot;R1\&quot;, GetColor(5));\nRR.DefineColor(\&quot;R2\&quot;, GetColor(5));\nRR.AssignValueColor(if RR == R1 then RR.color(\&quot;R1\&quot;) else RR.color(\&quot;R2\&quot;));\n\nPP.SetStyle(Curve.SHORT_DASH);\nRR.SetStyle(Curve.SHORT_DASH);\nR1.SetStyle(Curve.SHORT_DASH);\nR2.SetStyle(Curve.SHORT_DASH);\nR3.SetStyle(Curve.SHORT_DASH);\nSS.SetStyle(Curve.SHORT_DASH);\nS1.SetStyle(Curve.SHORT_DASH);\nS2.SetStyle(Curve.SHORT_DASH);\nS3.SetStyle(Curve.SHORT_DASH);\n\n\ndef paintingStrategy ;\n\nif drawLine\n{\npaintingStrategy = if timeframe == timeframe.WEEK then PaintingStrategy.LINE_VS_TRIANGLES else if timeFrame == timeFrame.MONTH or timeFrame == timeFrame.\&quot;OPT EXP\&quot; or timeFrame == timeFrame.QUARTER or timeFrame == timeFrame.YEAR then PaintingStrategy.LINE_VS_SQUARES else PaintingStrategy.LINE_VS_POINTS;\n\n}\nelse\n{\npaintingStrategy = if timeframe == timeframe.WEEK then PaintingStrategy.TRIANGLES else if timeFrame == timeFrame.MONTH or timeFrame == timeFrame.\&quot;OPT EXP\&quot; or timeFrame == timeFrame.QUARTER or timeFrame == timeFrame.YEAR then PaintingStrategy.SQUARES else PaintingStrategy.POINTS;\n\n}\n\n#def paintingStrategy = if timeframe == timeframe.WEEK then PaintingStrategy.LINE_VS_TRIANGLES else if timeFrame == timeFrame.MONTH or timeFrame == timeFrame.\&quot;OPT EXP\&quot; or timeFrame == timeFrame.QUARTER or timeFrame == timeFrame.YEAR then PaintingStrategy.LINE_VS_SQUARES else PaintingStrategy.LINE_VS_POINTS;\n\nPP.SetPaintingStrategy(paintingStrategy);\nRR.SetPaintingStrategy(paintingStrategy);\nR1.SetPaintingStrategy(paintingStrategy);\nR2.SetPaintingStrategy(paintingStrategy);\nR3.SetPaintingStrategy(paintingStrategy);\nSS.SetPaintingStrategy(paintingStrategy);\nS1.SetPaintingStrategy(paintingStrategy);\nS2.SetPaintingStrategy(paintingStrategy);\nS3.SetPaintingStrategy(paintingStrategy);&quot;,name=&quot;_99c08cc0_b776_4b49_a3bf_a01dada4cf51&quot;}){hidden=&lt;T,inputsMap:TreeMap2{^(&quot;applyPersonsLevelsFilter&quot;,&lt;F),^(&quot;drawLine&quot;,&lt;F),^(&quot;timeFrame&quot;,&quot;WEEK&quot;)},inputsMap=@TreeMap2,plots{0:{hiding=&lt;F,lineStyle=1},3:{hiding=&lt;T},5:{hiding=&lt;T},8:{hiding=&lt;F}}}),+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence{body=&quot;# AI_Squeeze_Clouds_v1 \n\n# AlphaInvestor - 09/07/2015 - coded up simple method to show clouds for BB/KC squeeze \n\n \ndeclare weak_volume_dependency;\n\ninput displace = 0;\ninput factor = 1.5; #keltnerChannels\ninput length = 20;\ninput price = close;\ninput averageType = AverageType.SIMPLE;\ninput trueRangeAverageType = AverageType.SIMPLE;\n\nAddCloud(bollingerbands(price,0,length,-2.0,2.0,averageType).LowerBand, keltnerChannels(0,factor,length,price,averagetype.simple,trueRangeAverageType).Lower_Band,   Color.cyan,  Color.gray); \n\nAddCloud(keltnerChannels(0,factor,20,price,averagetype.simple,trueRangeAverageType).Upper_Band,bollingerbands(price,0,length,-2.0,2.0,averageType).UpperBand,  Color.pink,  Color.gray); \n\n \n\n# End Study \n\n\ndef shift = factor * MovingAverage(trueRangeAverageType, TrueRange(high, close, low), length);\n\ndef average = MovingAverage(averageType, price, length);\n\nplot Avg = average[-displace];\nAvg.SetDefaultColor(GetColor(1));\n\nplot Upper_Band = average[-displace] + shift[-displace];\nUpper_Band.SetDefaultColor(GetColor(8));\n\nplot Lower_Band = average[-displace] - shift[-displace];\nLower_Band.SetDefaultColor(GetColor(5));\n&quot;,name=&quot;_5b75a5fd_0525_3fa7_b294_5a19e419d099&quot;}){hidden=&lt;T,inputsMap:TreeMap3{^(&quot;price&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap3,plots{0:{lineStyle=3}}}),+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence{body=&quot;# OvernightHiLowLines_mobius_jq\n# GlobeX or Overnight High / Low without Fibonacci Values \n# Based on code by Mobius # V01.2012 \n# cosmetic alterations by Johnny Quotron\n#    1. removal of fib lines\n#    2. paint ONL bubble below the line\n#    3. addition of other comments\n#    4. addition of bubbles in the expansion area if desired\n#\n# Restrictions:  Hi / Low lines are not drawn for non-traded indicies such as VIX or TNX..JQ\n\ndeclare hide_on_daily;\ninput PlotOverNightExtremes = yes;\ninput DisplayPriceBubbleOnHiLowBar = yes;\ninput DisplayPriceBubbleOnRightEdge = yes;  #Haven\'t figured this out yet..JQ\n\ndef o = open;\ndef h = high;\ndef l = low;\ndef c = close;\ndef v = volume;\ndef bar = BarNumber();\ndef GlobeX = GetTime() &lt; RegularTradingStart(GetYYYYMMDD());\n\ndef vol = if GlobeX and !GlobeX[1]\nthen v\nelse if GlobeX\nthen vol[1] + v\nelse Double.NaN;\n\ndef GlobeX_Volume = vol;\n\ndef ONhigh = if GlobeX and !GlobeX[1]\nthen h\nelse if GlobeX and\nh &gt; ONhigh[1]\nthen h\nelse ONhigh[1];\n\ndef ONhighBar = if GlobeX and h == ONhigh\nthen bar\nelse Double.NaN;\n\ndef ONlow = if GlobeX and !GlobeX[1]\nthen l\nelse if GlobeX and\nl &lt; ONlow[1]\nthen l\nelse ONlow[1];\n\ndef ONlowBar = if GlobeX and l == ONlow\nthen bar\nelse Double.NaN;\n\ndef OverNightHigh = if BarNumber() == HighestAll(ONhighBar)\nthen ONhigh\nelse OverNightHigh[1];\n\ndef OverNightLow = if BarNumber() == HighestAll(ONlowBar)\nthen ONlow\nelse OverNightLow[1];\n\n\n#\nplot ONH = if OverNightHigh &gt; 0\nthen OverNightHigh\nelse Double.NaN;\n\nONH.SetHiding(!PlotOverNightExtremes);\nONH.SetPaintingStrategy(PaintingStrategy.SQUARES);\nONH.SetDefaultColor(Color.BLUE);\nONH.HideBubble();\nONH.HideTitle();\n\n#\nplot ONL = if OverNightLow &gt; 0 \nthen OverNightLow\nelse Double.NaN;\n\nONL.SetHiding(!PlotOverNightExtremes);\nONL.SetPaintingStrategy(PaintingStrategy.SQUARES);\nONL.SetDefaultColor(Color.LIGHT_GRAY);\nONL.HideBubble();\nONL.HideTitle();\n\n\n# Bubble code\n#AddChartBubble(bar == ONhighBar and PlotOverNightExtremes and DisplayPriceBubbleOnHiLowBar, ONH, \&quot;ONH: \&quot; + ONH, createColor(204,204,255));\n#AddChartBubble(bar == ONlowBar and PlotOverNightExtremes and DisplayPriceBubbleOnHiLowBar, ONL, \&quot;ONL: \&quot; + ONL, createColor(204,204,255),no);  #designated that the bubble be painted below the ONL line.  2018-04-07 JQ \n\n\nAddChartBubble(barNumber() == highestAll(barnumber()) and  PlotOverNightExtremes and DisplayPriceBubbleOnRightEdge, ONH, \&quot;ONH: \&quot; + ONH, createColor(204,204,255));\nAddChartBubble(barNumber() == highestAll(barnumber()) and PlotOverNightExtremes and DisplayPriceBubbleOnRightEdge, ONL, \&quot;ONL: \&quot; + ONL, createColor(204,204,255),no); \ninput showLable =yes;\nAddLabel(showLable, \&quot;ONL= \&quot; + astext(ONL), if ONL&lt; close then Color.LIGHT_GREEN else if ONL&gt; close then color.LIGHT_red else Color.GRAY);\nAddLabel(showLable, \&quot;ONH= \&quot; + astext(ONH), if ONH&lt; close then Color.LIGHT_GREEN else if ONH&gt; close then color.LIGHT_red else Color.GRAY);\n# End Code GlobeX or Overnight High / Low without Fibonacci Values &quot;,name=&quot;_2b139ce2_bb93_4663_acef_0fb6255d8008&quot;}){plots{0:{lineStyle=3,paintingStrategy=0},1:{color=#%3.CustomColor(#%4.Color(0,0,255,255)),lineStyle=3,paintingStrategy=0}}}),+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence{body=&quot;# @new\n# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2009-2021\n#\n\n#wizard input: length1\n#wizard text: -period\n#wizard input: averageType1\n#wizard text: crosses\n#wizard input: crossingType\n#wizard input: length2\n#wizard text: -period\n#wizard input: averageType2\n#wizard text: Price:\n#wizard input: price\n\ninput price = close;\ninput length1 = 15;\ninput length2 = 30;\ninput averageType1 = AverageType.Simple;\ninput averageType2 = AverageType.Simple;\ninput crossingType = {default above, below};\n\ndef avg1 = MovingAverage(averageType1, price, length1);\ndef avg2 = MovingAverage(averageType2, price, length2);\n\nplot signal = crosses(avg1, avg2, crossingType == CrossingType.above);\n\nsignal.DefineColor(\&quot;Above\&quot;, GetColor(6));\nsignal.DefineColor(\&quot;Below\&quot;, GetColor(7));\nsignal.AssignValueColor(if crossingType == CrossingType.above then signal.color(\&quot;Above\&quot;) else signal.color(\&quot;Below\&quot;));\n\nsignal.SetPaintingStrategy(if crossingType == CrossingType.above\n    then PaintingStrategy.BOOLEAN_ARROW_UP\n    else PaintingStrategy.BOOLEAN_ARROW_DOWN);&quot;,name=&quot;MovingAvgCrossover&quot;}){hidden=&lt;T,inputsMap:TreeMap4{^(&quot;length1&quot;,10),^(&quot;length2&quot;,21),^(&quot;price&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap4,plots{0:{lineWeight=5,palette{^(&quot;Above&quot;,!%3.CustomColor.findByIndex:CustomColor6(&quot;12&quot;)),^(&quot;Below&quot;,!%3.CustomColor.findByIndex:CustomColor7(&quot;15&quot;))}}}}),+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence{body=&quot;###############################################################################################################################################\n################################################################################################################################################\n#\n# Author: Kory Gill, [USER=212]@korygill[/USER]\n#\n# Created from idea on https://usethinkscript.com/threads/finite-volume-elements.593/\n# Original idea is from http://mkatsanos.com/FVE.html\n#\n# VERSION HISTORY (sortable date and time (your local time is fine), and your initials\n# 20190907-1200-KG    - Created.\n\n###############################################################################\n### NORMALIZATION (Volume Damping adaptation) by Ramon Del Villar AKA PElonsax\n### 7/20/2020 #################################################################\n###############################################################################\n# The damping logic is taken directly from VFI #\n\n#declare once_per_bar;\n\n\n#################################################################$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n\n#########################################%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%$$$$$$$$$$$$$$$$$\n\n\n\n#\n# inputs\n#\ninput RSI_prev = 2; #previous bar to check\ninput def_cond = no;\ninput Samples = 14;\n\n\n\n#vwap vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\n#input numDevUp = 2.0;\ninput vwapTimeFrame = {default DAY, WEEK, MONTH};\n\ndef cap = getAggregationPeriod();\ndef errorInAggregation =\n    vwapTimeFrame == vwapTimeFrame.DAY and cap &gt;= AggregationPeriod.WEEK or\n    vwapTimeFrame== vwapTimeFrame.WEEK and cap &gt;= AggregationPeriod.MONTH;\nassert(!errorInAggregation, \&quot;timeFrame should be not less than current chart aggregation period\&quot;);\n\ndef yyyyMmDd = getYyyyMmDd();\ndef periodIndx;\nswitch (vwapTimeFrame) {\ncase DAY:\n    periodIndx = yyyyMmDd;\ncase WEEK:\n    periodIndx = Floor((daysFromDate(first(yyyyMmDd)) + getDayOfWeek(first(yyyyMmDd))) / 7);\ncase MONTH:\n    periodIndx = roundDown(yyyyMmDd / 100, 0);\n}\ndef isPeriodRolled = compoundValue(1, periodIndx != periodIndx[1], yes);\n\ndef volumeSum;\ndef volumeVwapSum;\ndef volumeVwap2Sum;\n\nif (isPeriodRolled) {\n    volumeSum = volume;\n    volumeVwapSum = volume * vwap;\n    volumeVwap2Sum = volume * Sqr(vwap);\n} else {\n    volumeSum = compoundValue(1, volumeSum[1] + volume, volume);\n    volumeVwapSum = compoundValue(1, volumeVwapSum[1] + volume * vwap, volume * vwap);\n    volumeVwap2Sum = compoundValue(1, volumeVwap2Sum[1] + volume * Sqr(vwap), volume * Sqr(vwap));\n}\ndef vWapprice = volumeVwapSum / volumeSum;\ndef deviation = Sqrt(Max(volumeVwap2Sum / volumeSum - Sqr(vWapprice), 0));\n\ndef VWAP = vWapprice;\n\n\n\ninput vwapCondition =no;\n#input vp=close;\ndef conVwapBuy =if  vwapCondition then  close &gt;= VWAp else 1;\n\n#####^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n\n#\n# FVE logic\n#\ndef bn = BarNumber();\ndef nan = double.NaN;\n\n\ninput maxVolumeCutOff = 2.5;\n###Coefficient used in calculation of “Cut Off” value. Lower values mean stronger damping of volume spikes###\n\nAssert(maxVolumeCutOff &gt; 0, \&quot;\'max volume cut off\' must be positive: \&quot; + maxVolumeCutOff);\n\ndef cutOff = 0.2 * StDev(Log(hlc3) - Log(hlc3[1]), 30) * close;\ndef hlcChange = hlc3 - hlc3[1];\ndef avgVolume = Average(volume, 30)[1];\ndef minVolume = Min(volume, avgVolume * maxVolumeCutOff);\ndef dirVolume = if hlcChange &gt; cutOff\n    then minVolume\n    else if hlcChange &lt; -cutOff\n        then -minVolume\n        else 0;\n\n\ndef mf = (close - (high+low)/2) + hlc3 - hlc3 [1];\ndef fveSum = Sum(dirVolume, Samples);\n\ndef fve = if bn &gt; Samples\n          then (fveSum / (Average(avgVolume, Samples) * Samples)) * 100\n          else nan;\n\n\n#\n# plots\n#\ndef pFVE = fve;\n\ndef pFVE_MA = MovingAverage(AverageType.SIMPLE, fve, 30);\n#pFVE_MA.SetDefaultColor(Color.Gray);\n#PFVE_MA.SetPaintingStrategy(PaintingStrategy.DASHES);\n\ndef zeroLine = 0;\ndef pFVE_Bull = if pFVE crosses above pFVE_MA then pFVE  else double.NaN ;\ndef pFVE_Bear = if pFVE &gt; pFVE_MA and pFVE[1] &gt; pFVE then pFVE else double.NaN ;\n\n#format plot \n\n#zeroLine.SetDefaultColor(Color.White);\n#pFVE.AssignValueColor(if pFVE &gt; pFVE_MA then color.green else color.red) ;\n#pFVE.SetLineWeight(3);\n\n\n#pFVE_Bull.SetPaintingStrategy(PaintingStrategy.SQUARES);\n#pFVE_Bull.SetLineWeight(5);\n#pFVE_Bull.SetDefaultColor(color.dark_green) ;\n\n#pFVE_Bear.SetPaintingStrategy(PaintingStrategy.SQUARES);\n#pFVE_Bear.SetLineWeight(5);\n#pFVE_Bear.SetDefaultColor(color.white) ;\n\n#AddCloud(pFVE, pFVE_MA, color.light_green, color.pink);\n\n\n\n#####################################################################################################################################################\n\n\n\n# Simple 2 Period RSI Trading Indicator\n# Assembled by BenTen at useThinkScript.com\n# You are free to use this code for personal use, and make derivative works from it. You are NOT GRANTED permission to use this code (or derivative works) for commercial purposes which includes and is not limited to selling, reselling, or packaging with other commercial indicators. Headers and attribution in this code should remain as provided, and any derivative works should extend the existing headers.\n\n#MACD\ninput price = close;\n#input length_macd = 14;\ninput displace = 0;\n#input showBreakoutSignals = no;\ninput crossingType = {default above, below};\n\ninput fastLength = 12;\ninput slowLength = 26;\ninput MACDLength = 9;\ndef fastAvg = Sum(volume * price, fastLength) / Sum(volume, fastLength);\ndef slowAvg = Sum(volume * price, slowLength) / Sum(volume, slowLength);\ndef Value = fastAvg - slowAvg;\ndef Avg = ExpAverage(Value, MACDLength);\ndef MACD_Diff  = Value - Avg;\n#def ZeroLine = 0;\n\n# RSI\ninput rsiLength = 14;\ninput overBought = 80;\ninput overSold = 28;\ninput rsiBuyLevel =40;\ninput averageType = AverageType.WILDERS;\ndef NetChgAvg = MovingAverage(averageType, price - price[1], RSIlength);\ndef TotChgAvg = MovingAverage(averageType, AbsValue(price - price[1]), RSIlength);\ndef ChgRatio = if TotChgAvg != 0 then NetChgAvg / TotChgAvg else 0;\ndef RSI = 50 * (ChgRatio + 1);\n#def OverSold = overSold;\n#def OverBought = overBought;\n\n#test\n#plot p= VWAp;#(period= AggregationPeriod.DAY);\n\n####################################\n\ndef cond_logic = if (def_cond) then MACD_Diff &lt;= 0 else yes;\n######\n#def sig_buy = Crosses(RSI(length = RSIlength, averageType = averageType).RSI, over_Sold, crossingType == crossingType.above) within RSI_prev bars and pFVE_Bull and cond_logic; # and Diff &lt;= 0;\ndef sig_buy = conVwapBuy and RSI&lt; rsiBuyLevel and pFVE_Bull  and cond_logic ;# and Diff &gt;= 0;\n#def sig_buy = pFVE_Bull and Diff &gt;= 0;\nplot signal_buy = sig_buy ;\n\n\ndef sig_sell = Crosses(RSI(length = RSIlength, averageType = averageType).RSI, overBought, crossingType == crossingType.below) within RSI_prev bars and pFVE_Bear ;\nplot signal_sell = sig_sell;\n\nsignal_buy.DefineColor(\&quot;Above\&quot;, Color.YELLOW);\nsignal_buy.DefineColor(\&quot;Below\&quot;, GetColor(8));\nsignal_buy.AssignValueColor(if crossingType == crossingType.above then signal_buy.Color(\&quot;Above\&quot;) else signal_buy.Color(\&quot;Below\&quot;));\nsignal_buy.setlineWeight(5);\nsignal_buy.SetPaintingStrategy(if crossingType == crossingType.above\n    then PaintingStrategy.BOOLEAN_ARROW_UP\n    else PaintingStrategy.BOOLEAN_ARROW_DOWN);\n\nsignal_sell.DefineColor(\&quot;Above\&quot;, Color.VIOLET);\nsignal_sell.DefineColor(\&quot;Below\&quot;, GetColor(8));\nsignal_sell.AssignValueColor(if crossingType == crossingType.above then signal_sell.Color(\&quot;Above\&quot;) else signal_sell.Color(\&quot;Below\&quot;));\n\nsignal_sell.SetPaintingStrategy(if crossingType == crossingType.above\n    then PaintingStrategy.BOOLEAN_ARROW_DOWN\n    else PaintingStrategy.BOOLEAN_ARROW_UP);\nsignal_sell.setlineWeight(5);\ninput bubble =no; \nAddChartBubble(bubble and sig_sell == 1, price, \&quot;S= \&quot; + price + \&quot; rsi \&quot; + RSI, Color.VIOLET, no);&quot;,name=&quot;_259d509b_f440_4edf_840b_2df1df75ab8c&quot;}){inputsMap:TreeMap5{^(&quot;price&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap5,plots{0:{lineWeight=4},1:{lineWeight=4}}}),+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence{body=&quot;# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2017-2021\n#\n\ninput price = close;\ninput length = 9;\ninput displace = 0;\ninput showBreakoutSignals = no;\n\nplot SMA = Average(price[-displace], length);\nplot UpSignal = price crosses above SMA;\nplot DownSignal = price crosses below SMA;\n\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\nSMA.SetDefaultColor(GetColor(1));\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);&quot;,name=&quot;SimpleMovingAvg&quot;}){inputsMap:TreeMap6{^(&quot;length&quot;,200),^(&quot;price&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap6,plots{0:{color=@CustomColor6}}}),+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence{body=&quot;\n\n#declare hide_on_daily;\n#declare once_per_bar;\n\n# Variables:\n\ninput AggregationPeriod = AggregationPeriod.DAY;\n\ninput useAggregate = NO;\ninput showLevels = yes;\ninput showLables = yes;\ninput showBoundaryLine = yes;\n\n\n\ninput length = 3;\ndef displace = -1;\n\ninput PivotPrice = {default CLOSE, HLC3, VWAP, OHLC4, OPEN, HL2};\ninput PivotLength = 1;\n\ninput averageType = AverageType.SIMPLE;\ninput fib1 = 0.236; #fib 0.236\ninput fib2 = 0.5;  #fib2 0.5\ninput fib3 = 0.764; #fib3 0.764\ninput fib4 = 1.0; # Extreems\n\n\n\n\n#def mov_avg = MovingAverage(averageType, price[-displace], length);\n\ndef ll;\ndef hh;\ndef pv;\n\nif useAggregate\n{\n    ll = low (period = AggregationPeriod)[-displace];;\n    hh = high (period = AggregationPeriod)[-displace];\n     switch (PivotPrice)\n       {\n            case \&quot;CLOSE\&quot;:\n                    pv = close(period = AggregationPeriod)  [-displace];\n            case \&quot;HLC3\&quot; :\n                    pv = hlc3(period = AggregationPeriod)[-displace];\n\n            case \&quot;VWAP\&quot; :\n                    pv = vwap(period = AggregationPeriod)[-displace];\n            case \&quot;HL2\&quot; :\n                    pv = hl2(period = AggregationPeriod)[-displace];\n            case \&quot;OHLC4\&quot; :\n                    pv = ohlc4(period = AggregationPeriod)[-displace];\n            case \&quot;OPEN\&quot; :\n                    pv = open(period = AggregationPeriod)[-displace];\n       }\n}\nelse\n{\n    ll = average( low[-displace], length);#MovingAverage(averageType, low[-displace], length);\n    hh = average( high[-displace], length);#MovingAverage(averageType, high[-displace], length);\n      switch (PivotPrice)\n       {\n            case \&quot;CLOSE\&quot;:\n                    pv = MovingAverage(averageType, close  [-displace], PivotLength);;\n            case \&quot;HLC3\&quot; :\n                    pv = MovingAverage(averageType,hlc3[-displace], PivotLength);;\n            case \&quot;VWAP\&quot; :\n                    pv = MovingAverage(averageType,vwap[-displace], PivotLength);;\n            case \&quot;HL2\&quot; :\n                    pv =MovingAverage(averageType, hl2[-displace], PivotLength);;\n            case \&quot;OHLC4\&quot; :\n                    pv = MovingAverage(averageType,ohlc4[-displace], PivotLength);;\n            case \&quot;OPEN\&quot; :\n                    pv = MovingAverage(averageType,open[-displace], PivotLength);;\n\n       }\n}\n\n\n\n\n#\n# logic\n#\n    def nan = Double.NaN;\n\n\n    def delta = hh - ll;\n    def pp_ = pv; #pivot Point\n    def s1_ = pp_ - (fib1 * delta);\n    def s2_ = pp_ - (fib2 * delta);\n    def s3_ = pp_ - (fib3 * delta);\n    def s4_ = pp_ - (fib4 * delta);\n    def r1_ = pp_ + (fib1 * delta);\n    def r2_ = pp_ + (fib2 * delta);\n    def r3_ = pp_ + (fib3 * delta);\n    def r4_ = pp_ + (fib4 * delta);\n\n\n    plot RXT = r4_;\n    plot R3 = r3_;\n    plot R2 = r2_;\n    plot R1 = r1_;\n\n    plot pp = pp_;\n    plot S1 = s1_;\n    plot S2 = s2_;\n    plot S3 = s3_;\n    plot SXT = s4_;\n\n\n\n\n\n\n\n    pp.SetDefaultColor(Color.WHITE);\n    S1.SetDefaultColor(Color.ORANGE);\n    S2.SetDefaultColor(Color.ORANGE);\n    S3.SetDefaultColor(Color.ORANGE);\n    R1.SetDefaultColor(Color.YELLOW);\n    R2.SetDefaultColor(Color.YELLOW);\n    R3.SetDefaultColor(Color.YELLOW);\n    RXT.SetDefaultColor(Color.LIGHT_ORANGE);\n    SXT.SetDefaultColor(Color.LIGHT_ORANGE);\n    \n    PP.SetPaintingStrategy(PaintingStrategy.POINTS);\n    S1.SetPaintingStrategy(PaintingStrategy.POINTS);\n    R1.SetPaintingStrategy(PaintingStrategy.POINTS);\n    S2.SetPaintingStrategy(PaintingStrategy.POINTS);\n    R2.SetPaintingStrategy(PaintingStrategy.POINTS);\n    S3.SetPaintingStrategy(PaintingStrategy.POINTS);\n    R3.SetPaintingStrategy(PaintingStrategy.POINTS);\n    RXT.SetStyle(Curve.MEDIUM_DASH);\n    SXT.SetStyle(Curve.MEDIUM_DASH);\n\n\n\n#RXT.SetPaintingStrategy(PaintingStrategy.LINE_VS_POINTS);\n\n\n\n    R1.SetHiding(!showLevels);\n    R2.SetHiding(!showLevels);\n    R3.SetHiding(!showLevels);\n    pp.SetHiding(!showLevels);\n    S1.SetHiding(!showLevels);\n    S2.SetHiding(!showLevels);\n    S3.SetHiding(!showLevels);\n\n    RXT.SetHiding(!showBoundaryLine);\n    SXT.SetHiding(!showBoundaryLine);\n\n# lables\n\n    AddLabel(showLables, \&quot; R1= \&quot; +  RoundUp(R1, 2), if R1 &lt; close then Color.LIGHT_GREEN else if R1 &gt; close then Color.LIGHT_RED else Color.LIGHT_GRAY);\n\n    AddLabel(showLables, \&quot; R2= \&quot; +  RoundUp(R2, 2), if R2 &lt; close then Color.LIGHT_GREEN else if R2 &gt; close then Color.LIGHT_RED else Color.LIGHT_GRAY);\n    AddLabel(showLables, \&quot; R3= \&quot; +  RoundUp(R3, 2), if R3 &lt; close then Color.LIGHT_GREEN else if R3 &gt; close then Color.LIGHT_RED else Color.LIGHT_GRAY);\n\n    AddLabel(showLables, \&quot; S1= \&quot; +  RoundUp(S1, 2), if S1 &lt; close then Color.LIGHT_GREEN else if S1 &gt; close then Color.LIGHT_RED else Color.LIGHT_GRAY);\n    AddLabel(showLables, \&quot; S2= \&quot; +  RoundUp(S2, 2), if S2 &lt; close then Color.LIGHT_GREEN else if S2 &gt; close then Color.LIGHT_RED else Color.LIGHT_GRAY);\n    AddLabel(showLables, \&quot; S3= \&quot; +  RoundUp(S3, 2), if S3 &lt; close then Color.LIGHT_GREEN else if S3 &gt; close then Color.LIGHT_RED else Color.LIGHT_GRAY);\n    AddLabel(showLables, \&quot; RXT= \&quot; +  RoundUp(RXT, 2), if RXT &lt; close then Color.LIGHT_GREEN else if RXT &gt; close then Color.LIGHT_RED else\n Color.LIGHT_GRAY);\n\n    AddLabel(showLables, \&quot; SXT= \&quot; +  RoundUp(SXT, 2), if SXT &lt; close then Color.LIGHT_GREEN else if SXT &gt; close then Color.LIGHT_RED else Color.LIGHT_GRAY);\n\n\n#end&quot;,name=&quot;_5bf53d93_587e_4e7f_b239_a8ba491d37a1&quot;}){inputsMap:TreeMap7{^(&quot;showLables&quot;,&lt;F)},inputsMap=@TreeMap7,plots{0:{lineStyle=3},4:{lineWeight=2},5:{color=@CustomColor2},6:{color=@CustomColor2},7:{color=@CustomColor2},8:{lineStyle=3}}}),+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence{body=&quot;input price = close;\ninput displace = 0;\ninput length = 20;\ninput Num_Dev_Dn = -2.0;\ninput Num_Dev_up = 2.0;\ninput averageType = AverageType.Simple;\ninput showCloud= yes;\n\ndef sDev = stdev(data = price[-displace], length = length);\n\nplot MidLine = MovingAverage(averageType, data = price[-displace], length = length);\nplot LowerBand = MidLine + num_Dev_Dn * sDev;\nplot UpperBand = MidLine + num_Dev_Up * sDev;\n\nLowerBand.SetDefaultColor(GetColor(0));\nMidLine.SetDefaultColor(GetColor(1));\nUpperBand.SetDefaultColor(GetColor(5));\n\n#############################\ndef Na = Double.NaN;\n\ndef cloudhigh = If( ShowCloud, UpperBand, Na);\ndef cloudlow  = If(ShowCloud, LowerBand, Na);\n#AddCloud(cloudhigh, cloudlow, Color.GRAY, Color.GRAY);\n\n\nAddCloud(cloudhigh, Midline, Color.Green, Color.light_Green);\nAddCloud(cloudlow, Midline, Color.Red, Color.light_Red);\n\n\n####$$$$$$$$\n\n\ninput priceSlm = close;\n\ninput superFastLength = 8;\n\ninput fastLengthSlm = 13;\n\ninput slowLengthSlm = 21;\n\n\n\n\ninput averageTypeSlm = AverageType.EXPONENTIAL;\n\ndef mov_avg8 = MovingAverage(averageTypeSlm, priceSlm[-displace], superFastLength);\n\ndef mov_avg13 = MovingAverage(averageTypeSlm, priceSlm[-displace], fastLengthSlm);\n\ndef mov_avg21 = MovingAverage(averageTypeSlm, priceSlm[-displace], slowLengthSlm);\n \n#moving averages\n\ndef Superfast = mov_avg8;\n\ndef Fast = mov_avg13;\n\ndef Slow = mov_avg21;\n\n\ndef buy = mov_avg8 &gt; mov_avg13 and mov_avg13 &gt; mov_avg21 and low &gt; mov_avg8;\n\ndef stopbuy = mov_avg8 &lt;= mov_avg13;\n\ndef buynow = !buy[1] and buy;\n\ndef buysignal = CompoundValue(1, if buynow and !stopbuy then 1 else if buysignal[1] == 1 and stopbuy then 0 else buysignal[1], 0);\n\n\ndef Buy_Signal = buysignal[1] == 0 and buysignal == 1;\n\ndef Momentum_Down = buysignal[1] == 1 and buysignal == 0;\n\n\ndef sell = mov_avg8 &lt; mov_avg13 and mov_avg13 &lt; mov_avg21 and high &lt; mov_avg8;\n\ndef stopsell = mov_avg8 &gt;= mov_avg13;\n\ndef sellnow = !sell[1] and sell;\n\ndef sellsignal = CompoundValue(1, if sellnow and !stopsell then 1 else if sellsignal[1] == 1 and stopsell then 0 else sellsignal[1], 0);\n\n\ndef Sell_Signal = sellsignal[1] == 0 and sellsignal;\n\ndef Momentum_Up = sellsignal[1] == 1 and sellsignal == 0;\n \n# when using this as a custom scan, change the word plot to def\n# then remove the \'#\' from in front of one of the \&quot;plot Scan\&quot; statements below\ndef Colorbars = if buysignal == 1 then 1 else if sellsignal == 1 then -1 else if buysignal == 0 or sellsignal == 0 then 0 else 0;\n\n# use this first Scan plot for SLM Ribbon Momentum UP\n#plot Scan = if Colorbars == 1 then yes else no;\n\n# use this second Scan plot for SLM Ribbon Momentum DOWN\n#plot Scan = if Colorbars == -1 then yes else no;\n\n\n\n\n\n\n###############\n\ndef Colorbars1 = if buysignal == 1 then 1 else if sellsignal == 1 then 2 else if buysignal == 0 or sellsignal == 0 then 3 else 0;\n\ninput lengthHma = 20;\n\ndef HMA = MovingAverage(AverageType.HULL, price, lengthHma);\ndef HMA_Up=  HMA &gt; HMA[1];\ndef HMA_Down =! HMA_UP;\n\n###############\n\n#def Colorbars1 = if buysignal == 1 then 1 else if sellsignal == 1 then 2 else if buysignal == 0 or sellsignal == 0 then 3 else 0;\n\n\n\nMidLine.definecolor(\&quot;Buy\&quot;, color.dark_green);\n\n\nMidLine.definecolor(\&quot;Sell\&quot;, color.red);\n\nMidLine.definecolor(\&quot;Neutral\&quot;, Color.PLUM);\n#MidLine.definecolor(\&quot;NeutralDown\&quot;, Color.orange);\nMidLine.definecolor(\&quot;HullMA_up\&quot;, color.blue);\n\nMidLine.definecolor(\&quot;HullMA_down\&quot;, color.orange);\n\nMidLine.AssignValueColor(if buysignal and HMA_Up then MidLine.color(\&quot;Buy\&quot;) else if buysignal and !HMA_Up then MidLine.color(\&quot;HullMA_down\&quot;) else if sellsignal and HMA_Down  then MidLine.color(\&quot;Sell\&quot;) else  if sellsignal and !HMA_Down  then MidLine.color(\&quot;HullMA_up\&quot;) else  MidLine.color(\&quot;neutral\&quot;));;#\n# if Momentum_Up then  RSI.color(\&quot;neutralUp\&quot;) else  RSI.color(\&quot;neutraldown\&quot;));\n\n\n\n\n\n\n\n#MidLine.definecolor(\&quot;Buy_Signal_Bars\&quot;, color.dark_green);\n\n#MidLine.definecolor(\&quot;Sell_Signal_Bars\&quot;, color.red);\n\n#MidLine.definecolor(\&quot;NeutralUp\&quot;, color.plum);\n\n#MidLine.definecolor(\&quot;NeutralDown\&quot;, color.orange);\n\n#MidLine.AssignValueColor(if Colorbars1 ==1 then MidLine.color(\&quot;buy_signal_bars\&quot;) else if colorbars1 ==2 then #MidLine.color(\&quot;Sell_Signal_bars\&quot;) else if Momentum_Up then  MidLine.color(\&quot;neutralUp\&quot;) else MidLine.color(\&quot;neutralDown\&quot;) );\n\n\nplot UpSignal = if (buysignal and price crosses above MidLine) then LowerBand else Double.NaN;\nplot DownSignal = if (sellsignal and price crosses below MidLine) then UpperBand else Double.NaN;\ninput showBreakoutSignals =no;\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\n\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\n\n\n\nMidLine.setlineWeight(3);\n\n\n\n\n\n\n######$$$$&quot;,name=&quot;_cbc1e041_e9b4_4664_b964_97e197ec9dfd&quot;}){hidden=&lt;T,inputsMap:TreeMap8{^(&quot;price&quot;,&quot;CLOSE&quot;),^(&quot;priceSlm&quot;,&quot;CLOSE&quot;),^(&quot;showCloud&quot;,&lt;F)},inputsMap=@TreeMap8}),+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence{body=&quot;#start\n\n#hint: &lt;b&gt;Ask SLM Ribbon&lt;/b&gt;\\nThe Ask SLM Ribbon is a momentum indicator that uses a combination of three exponential moving averages. When the averages are in alinement, with the \&quot;superfast\&quot; moving average above the \&quot;fast\&quot; moving average and the fast moving average above the \&quot;slow\&quot; moving average, the momentum condition is positive. A \&quot;buy signal\&quot; is generated, with an up arrow, when above conditions are met and a \&quot;clear bar\&quot; occurs; with the low of that bar is above all of the moving averages. The positive momentum ends if the superfast moving average touches the fast moving average; then condition is considered neutral and an oppostive arrow will appear. Negative momentum and a \&quot;Sell signal\&quot; are the opposite of the bullish conditions. \\n \\n\\n--------------------------------------------------------------------------------\\nVolume bars can be colored to match the Chart by clicking on Style&gt;Settings&gt;Appearance&gt;Common, and color symbol as ticks  \\n\n\n\n# Variables:\n\n \n\n#input price = close;\ninput color_bars=no;\n\ninput useHeikinAshi =no;\n\ninput superfast_length = 4;\n\ninput fast_length = 7;\n\ninput slow_length =17;\n\n\ninput displace = 0;\ninput  pSupperFast = hlc3 ;\ninput pFast  = close ;\ninput pSlow  = close ;\ninput averageTypeSuperfast = AverageType.simple;\ninput averageTypefast = AverageType.simple;\ninput averageTypeSlow = AverageType.EXPONENTIAL;\n\n\n\ndef priceSupperFast ;\ndef priceFast ;\ndef priceSlow ;\n#Heikin Ashi\ndef haClose = (open+high+low+close)/4; #Heikin Ashi Close: The arithmetic mean of the current high, low, open, and close prices.\ndef haOpen = (haOpen[1] + haClose[1])/2  ;# Heikin Ashi Open: The midpoint of the previous candle.\ndef haHigh = max(high, max( haOpen, haClose) ) ;#Heikin Ashi High: The highest of the following: the actual high, the Heikin Ashi Open, or the Heikin Ashi Close.\ndef haLow = Min(low,min( haOpen, haClose));# Heikin Ashi Low: The lowest of the following: the actual low, the Heikin Ashi Open, or the Heikin Ashi Close.\n\nif useHeikinAshi \n\n then\n {\n  priceSupperFast = (haHigh +haLow+ haclose)/3;\n  priceFast = haclose;\n  priceSlow = haclose;\n }\nelse\n {\n  priceSupperFast = pSupperFast;\n  priceFast = pFast;\n  priceSlow = pSlow;\n }\n\n\n\ndef mov_avg_superFast = MovingAverage(averageTypeSuperfast, priceSupperFast[-displace], superfast_length);\ndef mov_avg_Fast = MovingAverage(averageTypefast, priceFast[-displace], fast_length);\ndef mov_avg_Slow = MovingAverage(averageTypeSlow, priceSlow[-displace], slow_length);\n\n#moving averages\nPlot Superfast = mov_avg_superFast;\nplot Fast = mov_avg_Fast;\nplot Slow = mov_avg_Slow;\nSuperfast.setdefaultColor(color.yellow);\nFast.setdefaultColor(color.cyan);\nSlow.setdefaultColor(color.blue);\n\n\n \n\ndef buy = mov_avg_superFast &gt; mov_avg_Fast and mov_avg_Fast &gt; mov_avg_Slow and hlc3 &gt; mov_avg_superFast;\n\ndef stopbuy = mov_avg_superFast &lt;= mov_avg_Fast or  hlc3 &lt; mov_avg_Fast;\n\ndef buynow = !buy[1] and buy;\n\ndef buysignal = CompoundValue(1, if buynow and !stopbuy then 1 else if buysignal[1]==1 and stopbuy then 0 else buysignal[1], 0);\n\n \n\nplot Buy_Signal = buysignal[1] == 0 and buysignal==1;\nBuy_signal.setpaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nBuy_signal.setdefaultColor(color.dark_GREEN);\nBuy_signal.hidetitle();\n#Alert(condition = buysignal[1] == 0 and buysignal == 1, text = \&quot;Buy Signal\&quot;, sound = Sound.Bell, \&quot;alert type\&quot; = Alert.BAR);\n\nplot Momentum_Down = buysignal[1] ==1 and buysignal==0;\nMomentum_down.setpaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);\nMomentum_Down.setdefaultColor(color.plum);\nMomentum_down.hidetitle();\n\n#Alert(condition = buysignal[1] == 1 and buysignal == 0, text = \&quot;Momentum_Down\&quot;, sound = Sound.Bell, \&quot;alert type\&quot; = Alert.BAR);\ndef sell = mov_avg_superFast &lt; mov_avg_Fast and mov_avg_Fast &lt; mov_avg_Slow and high &lt; mov_avg_superFast;\ndef stopsell = mov_avg_superFast &gt;= mov_avg_Fast or  close &gt; mov_avg_Fast;;\n\ndef sellnow = !sell[1] and sell;\n\ndef sellsignal = CompoundValue(1, if sellnow and !stopsell then 1 else if sellsignal[1]==1 and stopsell then 0 else sellsignal[1], 0);\n\n \n\nPlot Sell_Signal = sellsignal[1] ==0 and sellsignal;\n\nSell_signal.setpaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_down);\n\nsell_signal.setDefaultColor(color.red);\n\nSell_signal.hidetitle();\n\n#Alert(condition = sellsignal[1] == 0 and sellsignal == 1, text = \&quot;Sell Signal\&quot;, sound = Sound.Bell, \&quot;alert type\&quot; = Alert.BAR);\n\n \n\nPlot Momentum_Up = sellsignal[1]==1 and sellSignal==0;\n\nMomentum_up.setpaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_up);\n\nMomentum_up.setDefaultColor(color.plum);\n\nMomentum_up.hidetitle();\n\n#Alert(condition = sellsignal[1] == 1 and sellSignal == 0, text = \&quot;Momentum_Up\&quot;, sound = Sound.Bell, \&quot;alert type\&quot; = Alert.BAR);\ninput priceHma = close;\n input lengthHma = 20;\n\ndef HMA = MovingAverage(AverageType.HULL, priceHma, lengthHma);\ndef HMA_Up=  HMA &gt; HMA[1];\ndef HMA_Down =! HMA_UP;\n\nplot Colorbars = if buysignal and HMA_Up then 1 else if  buysignal and !HMA_Up then  2 else if sellsignal and HMA_Down then 3  else if sellsignal and !HMA_Down then  4 else if !buysignal or !sellsignal then 5 else 0;\n\ncolorbars.setHiding(1);\n\nColorbars.definecolor(\&quot;Buy\&quot;, color.dark_green);\n\nColorbars.definecolor(\&quot;Sell\&quot;, color.red);\n\nColorbars.definecolor(\&quot;Neutral\&quot;, color.plum);\nColorbars.definecolor(\&quot;HullMA_up\&quot;, color.blue);\n\nColorbars.definecolor(\&quot;HullMA_down\&quot;, color.orange);\n\n\n\n\n\n\n\n\n###############\n\n#def Colorbars1 = if buysignal == 1 then 1 else if sellsignal == 1 then 2 else if buysignal == 0 or sellsignal == 0 then 3 else 0;\n\n\n\n\n\n\n\n\n \n\nAssignPriceColor(if Colorbars ==1 and color_bars then colorbars.color(\&quot;Buy\&quot;) else if colorbars ==2 and color_bars  then colorbars.color(\&quot;HullMA_down\&quot;) else if colorbars ==3 and color_bars  then colorbars.color(\&quot;Sell\&quot;)  else if colorbars ==4 and color_bars  then colorbars.color(\&quot;HullMA_up\&quot;)else if color_bars  then colorbars.color(\&quot;neutral\&quot;) else  Color.CURRENT);\n\n#end&quot;,name=&quot;_65bf37d7_00d7_4e85_986f_9649d9ba6744&quot;}){hidden=&lt;T,inputsMap:TreeMap9{^(&quot;pFast&quot;,&quot;CLOSE&quot;),^(&quot;priceHma&quot;,&quot;CLOSE&quot;),^(&quot;pSlow&quot;,&quot;CLOSE&quot;),^(&quot;pSupperFast&quot;,&quot;(H+L+C)/3&quot;),!get:Integer0(&quot;superfast_length&quot;),!get:Integer1(&quot;slow_length&quot;)},inputsMap=@TreeMap9}),+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence{body=&quot;# @new\n# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2011-2021\n#\n\ninput numDevDn = -2.0;\ninput numDevUp = 2.0;\ninput timeFrame = {default DAY, WEEK, MONTH};\n\ndef cap = getAggregationPeriod();\ndef errorInAggregation =\n    timeFrame == timeFrame.DAY and cap &gt;= AggregationPeriod.WEEK or\n    timeFrame == timeFrame.WEEK and cap &gt;= AggregationPeriod.MONTH;\nassert(!errorInAggregation, \&quot;timeFrame should be not less than current chart aggregation period\&quot;);\n\ndef yyyyMmDd = getYyyyMmDd();\ndef periodIndx;\nswitch (timeFrame) {\ncase DAY:\n    periodIndx = yyyyMmDd;\ncase WEEK:\n    periodIndx = Floor((daysFromDate(first(yyyyMmDd)) + getDayOfWeek(first(yyyyMmDd))) / 7);\ncase MONTH:\n    periodIndx = roundDown(yyyyMmDd / 100, 0);\n}\ndef isPeriodRolled = compoundValue(1, periodIndx != periodIndx[1], yes);\n\ndef volumeSum;\ndef volumeVwapSum;\ndef volumeVwap2Sum;\n\nif (isPeriodRolled) {\n    volumeSum = volume;\n    volumeVwapSum = volume * vwap;\n    volumeVwap2Sum = volume * Sqr(vwap);\n} else {\n    volumeSum = compoundValue(1, volumeSum[1] + volume, volume);\n    volumeVwapSum = compoundValue(1, volumeVwapSum[1] + volume * vwap, volume * vwap);\n    volumeVwap2Sum = compoundValue(1, volumeVwap2Sum[1] + volume * Sqr(vwap), volume * Sqr(vwap));\n}\ndef price = volumeVwapSum / volumeSum;\ndef deviation = Sqrt(Max(volumeVwap2Sum / volumeSum - Sqr(price), 0));\n\nplot VWAP = price;\nplot UpperBand = price + numDevUp * deviation;\nplot LowerBand = price + numDevDn * deviation;\n\nVWAP.setDefaultColor(getColor(0));\nUpperBand.setDefaultColor(getColor(2));\nLowerBand.setDefaultColor(getColor(4));&quot;,name=&quot;VWAP&quot;}){hidden=&lt;T,inputsMap:TreeMap10{^(&quot;timeFrame&quot;,&quot;WEEK&quot;)},inputsMap=@TreeMap10,plots{0:{color=@CustomColor3,lineStyle=6},1:{color=@CustomColor6,lineStyle=6},2:{color=@CustomColor6,lineStyle=6}}}),+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence{body=&quot;### xiuyu vwap cross signal with abnormal volume\n\n#declare hide_on_daily;\n\n####\n#MTF\ndef tFrame = GetAggregationPeriod();\ninput timeFrame = {default DAY, WEEK, MONTH};\ninput aggregationPeriod = AggregationPeriod.HOUR;\ninput useAutoAggegate = yes;\n\n\n\n# Variables:\n#def  =if (useAutoAggegate) then open(period = aggregationPeriod1) else open;\n\ndef AutoAGG = if tFrame &lt;  AggregationPeriod.DAY then AggregationPeriod.DAY\n             else if  tFrame &lt; AggregationPeriod.WEEK then AggregationPeriod.WEEK\n                  else AggregationPeriod.MONTH;\ndef AGG = if (!useAutoAggegate) then aggregationPeriod else AutoAGG;\n\ndef testTimeFrames = if tFrame &lt; AGG  then yes else no;\n\n#AddLabel(useAutoAggegate, if testTimeFrames  then \&quot;Time Frames Are Correct\&quot; else \&quot;Time Frames Are \n\ninput length = 10; #average volume lenght\ninput volMinimum = 50000;\ninput showPriceColor = yes;\ninput factor = 1.50; #show what factors to avgvolume \ninput nDevUp = 2.0;\ninput nDevDn = -2.0;\n\ndef avgvolume = Average(volume, length) * factor;\n\n\n#plot vwap = reference VWAP( AGG);\n#######\n\n\ndef cap = GetAggregationPeriod();\ndef errorInAggregation =\n    timeFrame == timeFrame.DAY and cap &gt;= AggregationPeriod.WEEK or\n    timeFrame == timeFrame.WEEK and cap &gt;= AggregationPeriod.MONTH;\nAssert(!errorInAggregation, \&quot;timeFrame should be not less than current chart aggregation period\&quot;);\n\ndef yyyyMmDd = GetYYYYMMDD();\ndef periodIndx;\nswitch (timeFrame) {\ncase DAY:\n    periodIndx = yyyyMmDd;\ncase WEEK:\n    periodIndx = Floor((DaysFromDate(First(yyyyMmDd)) + GetDayOfWeek(First(yyyyMmDd))) / 7);\ncase MONTH:\n    periodIndx = RoundDown(yyyyMmDd / 100, 0);\n}\ndef isPeriodRolled = CompoundValue(1, periodIndx != periodIndx[1], yes);\n\ndef volumeSum;\ndef volumeVwapSum;\ndef volumeVwap2Sum;\n\nif (isPeriodRolled) {\n    volumeSum = volume;\n    volumeVwapSum = volume * vwap;\n    volumeVwap2Sum = volume * Sqr(vwap);\n} else {\n    volumeSum = CompoundValue(1, volumeSum[1] + volume, volume);\n    volumeVwapSum = CompoundValue(1, volumeVwapSum[1] + volume * vwap, volume * vwap);\n    volumeVwap2Sum = CompoundValue(1, volumeVwap2Sum[1] + volume * Sqr(vwap), volume * Sqr(vwap));\n}\ndef price = volumeVwapSum / volumeSum;\ndef deviation = Sqrt(Max(volumeVwap2Sum / volumeSum - Sqr(price), 0));\n\nplot VWAP = price;\nplot UpperBand = price + nDevUp * deviation;\nplot LowerBand = price + nDevDn * deviation;\nplot UpperBand2 = price + (1+nDevUp) * deviation;\nplot LowerBand2 = price +(-1+ nDevDn) * deviation;\ndef sdvP1=  price + deviation;\ndef sdvN1=  price - deviation;\n#####\n\n\nplot SD1up =close[1] crosses above sdvp1 and ( open&lt; close) and low&gt;sdvp1;\nSD1up.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nSD1up.SetDefaultColor(Color.graY);\nSD1up.SetLineWeight(2);\nAssignPriceColor(if SD1up and showPriceColor and open&lt; close then Color.violet else Color.CURRENT);\n\nAddLabel(yes, \&quot;VWAP= \&quot; + astext(VWAP), if VWAP&lt; close then Color.LIGHT_GREEN else if VWAP&gt; close then color.LIGHT_red else Color.GRAY);\n#AddLabel(yes, \&quot;VWAP= \&quot; + astext(VWAP), Color.White);\ndef vwDif= close- VWAP;\n#AddLabel(yes, \&quot; \&quot;+astext(vwDif), if vwDif&gt; 0 then Color.LIGHT_GREEN else if vwDif&lt; 0 then color.LIGHT_red else Color.GRAY);\nAddLabel(yes and vwDif&gt;0, \&quot; +\&quot;+astext(vwDif),  Color.LIGHT_GREEN );\nAddLabel(yes and vwDif&lt;=0, \&quot; \&quot;+astext(vwDif),  if vwDif&lt; 0 then color.LIGHT_red else Color.LIGHT_GRAY);\n\ninput vwapLableAll =yes;\nAddLabel(vwapLableAll, \&quot;VWAP +1= \&quot; + astext(sdvP1), if sdvP1&lt; close then Color.LIGHT_GREEN else if sdvP1&gt; close then color.LIGHT_red else Color.GRAY);\n\nAddLabel(vwapLableAll, \&quot;VWAP +2= \&quot; + astext(UpperBand), if UpperBand&lt; close then Color.LIGHT_GREEN else if UpperBand&gt; close then color.LIGHT_red else Color.GRAY);\nAddLabel(vwapLableAll, \&quot;VWAP +3= \&quot; + astext(UpperBand2), if UpperBand2&lt; close then Color.LIGHT_GREEN else if UpperBand2&gt; close then color.LIGHT_red else Color.GRAY);\n\nAddLabel(vwapLableAll, \&quot;VWAP -1= \&quot; + astext(sdvN1), if sdvN1&lt; close then Color.LIGHT_GREEN else if sdvN1&gt; close then color.LIGHT_red else Color.GRAY);\nAddLabel(vwapLableAll, \&quot;VWAP -2= \&quot; + astext(LowerBand), if LowerBand&lt; close then Color.LIGHT_GREEN else if LowerBand&gt; close then color.LIGHT_red else Color.GRAY);\nAddLabel(vwapLableAll, \&quot;VWAP -3= \&quot; + astext(LowerBand2), if LowerBand2&lt; close then Color.LIGHT_GREEN else if LowerBand2&gt; close then color.LIGHT_red else Color.GRAY);\n\n#AddLabel(vwapLableAll, \&quot;VWAP R= \&quot; + astext(upperBand/sdvN1 -1)+\&quot;  \&quot;+astext(upperBand/lowerBand -1)+\&quot;  \&quot;+astext(upperBand2/lowerBand2 -1), if LowerBand&lt; close then Color.LIGHT_GREEN else if LowerBand&gt; close then color.LIGHT_red else Color.GRAY);\n\nAddLabel(vwapLableAll, \&quot;VWAP R= \&quot; + astext(upperBand/sdvN1 -1)+\&quot;  \&quot;+astext(upperBand/lowerBand -1)+\&quot;  \&quot;+astext(upperBand2/lowerBand2 -1), if LowerBand&lt; close then Color.LIGHT_GREEN else if LowerBand&gt; close then color.LIGHT_red else Color.GRAY);\n\n\n\ndef volCheck = volume &gt;= avgvolume &amp;&amp; volume &gt;= volMinimum &amp;&amp; volume &gt;= volume[1];\ndef isCross =  close crosses VWAP;\ndef abnormalSignal = isCross and volCheck;\n\n\nVWAP.SetDefaultColor(color.white);#(GetColor(0));\nplot signalup = if abnormalSignal and close &gt; VWAP then low else Double.NaN;\nsignalup.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nsignalup.SetDefaultColor(Color.CYAN);\nsignalup.SetLineWeight(2);\n\nplot signaldown =  if abnormalSignal and close &lt; VWAP then high else Double.NaN;\nsignaldown.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);\nsignaldown.SetDefaultColor(Color.CYAN);\nsignaldown.SetLineWeight(2);\n\nAssignPriceColor(if abnormalSignal and showPriceColor then Color.CYAN else Color.CURRENT);\n\n\n#####\nvwap.SetStyle(Curve.POINTS);\nUpperBand.SetDefaultColor(GetColor(0));\nLowerBand.SetDefaultColor(GetColor(0));\n\nUpperBand.SetStyle(Curve.POINTS);\nLowerBand.SetStyle(Curve.POINTS);\n\nUpperBand2.SetDefaultColor(Color.YELLOW);\nLowerBand2.SetDefaultColor(Color.YELLOW);\n\nUpperBand2.SetStyle(Curve.SHORT_DASH);\nLowerBand2.SetStyle(Curve.SHORT_DASH);\n#input AutoHide=yes;\n#def hideLower = if AutoHide then close &gt;vwap  else 0;;\n#def hideUpper = if AutoHide then  close &lt;vwap  else 0;#- deviation\n#addLabel(yes, \&quot;hide U\&quot;+hideUpper +\&quot; L\&quot;+hideLower);\n#UpperBand.setHiding(hideUpper);\n#LowerBand.setHiding(hideLower);\n#UpperBand.Hide();\n#LowerBand.Hide();\n#UpperBand2.Hide();\n#LowerBand2.Hide();&quot;,name=&quot;_740dc265_6e6e_38a5_ba0e_c0a058a5d552&quot;}){hidden=&lt;T,inputsMap:TreeMap11{^(&quot;vwapLableAll&quot;,&lt;F)},inputsMap=@TreeMap11}),+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence{body=&quot;#start\n\n#hint: &lt;b&gt;Ask SLM Ribbon&lt;/b&gt;\\nThe Ask SLM Ribbon is a momentum indicator that uses a combination of three exponential moving averages. When the averages are in alinement, with the \&quot;superfast\&quot; moving average above the \&quot;fast\&quot; moving average and the fast moving average above the \&quot;slow\&quot; moving average, the momentum condition is positive. A \&quot;buy signal\&quot; is generated, with an up arrow, when above conditions are met and a \&quot;clear bar\&quot; occurs; with the low of that bar is above all of the moving averages. The positive momentum ends if the superfast moving average touches the fast moving average; then condition is considered neutral and an oppostive arrow will appear. Negative momentum and a \&quot;Sell signal\&quot; are the opposite of the bullish conditions. \\n \\n\\n--------------------------------------------------------------------------------\\nVolume bars can be colored to match the Chart by clicking on Style&gt;Settings&gt;Appearance&gt;Common, and color symbol as ticks  \\n\n\n\n# Variables:\n\n \n\n#input price = close;\ninput color_bars=no;\n\ninput useHeikinAshi =no;\n\ninput superfast_length =10;\n\ninput fast_length = 21;\n\ninput slow_length =40;\n\n\ninput displace = 0;\ninput price = close;\ninput pSupperFast = close ;\ninput pFast  = close ;\ninput pSlow  = close ;\ninput averageTypeSuperfast = AverageType.simple;\ninput averageTypefast = AverageType.simple;\ninput averageTypeSlow = AverageType.simPLE;\n\n\n\n\ndef priceSupperFast ;\ndef priceFast ;\ndef priceSlow ;\n#Heikin Ashi\ndef haClose = (open+high+low+close)/4; #Heikin Ashi Close: The arithmetic mean of the current high, low, open, and close prices.\ndef haOpen = (haOpen[1] + haClose[1])/2  ;# Heikin Ashi Open: The midpoint of the previous candle.\ndef haHigh = max(high, max( haOpen, haClose) ) ;#Heikin Ashi High: The highest of the following: the actual high, the Heikin Ashi Open, or the Heikin Ashi Close.\ndef haLow = Min(low,min( haOpen, haClose));# Heikin Ashi Low: The lowest of the following: the actual low, the Heikin Ashi Open, or the Heikin Ashi Close.\n\nif useHeikinAshi \n\n then\n {\n  priceSupperFast = (haHigh +haLow+ haclose)/3;\n  priceFast = haclose;\n  priceSlow = haclose;\n }\nelse\n {\n  priceSupperFast = pSupperFast;\n  priceFast = pFast;\n  priceSlow = pSlow;\n }\n\n\n\ndef mov_avg_superFast = MovingAverage(averageTypeSuperfast, priceSupperFast[-displace], superfast_length);\ndef mov_avg_Fast = MovingAverage(averageTypefast, priceFast[-displace], fast_length);\ndef mov_avg_Slow = MovingAverage(averageTypeSlow, priceSlow[-displace], slow_length);\n\n#moving averages\nPlot SuperfastAvg = mov_avg_superFast;\nplot FastAvg = mov_avg_Fast;\nplot SlowAvg = mov_avg_Slow;\nSuperfastAvg.setdefaultColor(color.yellow);\nFastAvg.setdefaultColor(color.cyan);\nSlowAvg.setdefaultColor(color.blue);\n\n################ppm1\ninput hide_debug =no;\nplot d =( priceSupperFast-priceSupperFast[1]);\nplot d_percnt = 100*( priceSupperFast-priceSupperFast[1])/priceSupperFast[1];\nd.setHiding(hide_debug);\nd_percnt.setHiding(hide_debug);\n\ninput lookback = 1;\n\ninput ppmiSmooth =3;\ninput averageTypePpmiSmooth = AverageType.simple;\ninput d1_length = 10;\ninput d2_length =21;\ninput th =0.25;\ninput show_ppmi = no;\n\n#input showMovingAvgLable =yes;\n\n#moving averages\n\ndef   ppm1_ =100*( SuperfastAvg-SuperfastAvg[lookback])/( SuperfastAvg); \ndef   ppm2_ =100*(FastAvg - FastAvg[lookback])/( FastAvg); \ndef   ppm3_ =100*( SlowAvg-SlowAvg[lookback])/(SlowAvg); \n#Plot ppm1 =MovingAverage(AverageType.EXPONENTIAL,ppm[-displace], signalPeriod);\n\nplot ppm1= MovingAverage(averageTypePpmiSmooth,ppm1_,ppmiSmooth);\nplot ppm2=  MovingAverage(averageTypePpmiSmooth,ppm2_,ppmiSmooth);\nplot ppm3=  MovingAverage(averageTypePpmiSmooth,ppm3_,ppmiSmooth);\n\n\n\nplot ppm_d1  = MovingAverage(averageTypefast, ppm1[-displace], d1_length);\nplot ppm_d2 = MovingAverage(averageTypefast, ppm1[-displace], d2_length);\n\n ppm1.sethiding(!show_ppmi);\n ppm2.sethiding(!show_ppmi);\n ppm3.sethiding(!show_ppmi);\n ppm_d1.sethiding(!show_ppmi);\n ppm_d2.sethiding(!show_ppmi);\n\n#################\n\n\n\n\n\ndef buy;\n\nif getAggregationPeriod()&gt;aggregationPeriod.DAY\n{\n#buy = mov_avg_superFast &gt; mov_avg_Fast and mov_avg_Fast &gt; mov_avg_Slow and price &gt; mov_avg_superFast and ppm1&gt; th and ppm2&gt; th;# and ppm3&gt; th ;\n#buy =  price &gt; mov_avg_superFast and( ppm1&gt; th*3 or   ppm1&gt; th  and( ppm2&gt;0 ));# mov_avg_Fast &gt; mov_avg_Slow and;#mov_avg_superFast &gt; mov_avg_Fast and or ppm3&gt; 0) ;\nbuy = mov_avg_superFast &gt; mov_avg_Fast and mov_avg_Fast  and price &gt; mov_avg_superFast and ppm1&gt; th and ppm2&gt; th and( ppm2&gt;0 );# and ppm3&gt; th ;\n\n}\nelse\n\n{\nbuy = mov_avg_superFast &gt; mov_avg_Fast and mov_avg_superFast &gt; mov_avg_Slow and price &gt; mov_avg_superFast and ppm1&gt; th and( ppm2&gt;0 );#or ppm3&gt; 0) ;\n}\n\n \n\n\n#def stopbuy = mov_avg_superFast &lt;= mov_avg_Fast or  price &lt; mov_avg_Fast ;#or ppm1&lt;=th or ppm2&lt;=th or ppm3&lt;=th;\n\ndef stopbuy =   price &lt; mov_avg_superFast ;#mov_avg_Fast &lt;= mov_avg_Slow or #or ppm1&lt;=th or ppm2&lt;=th or ppm3&lt;=th;\n\ndef buynow = !buy[1] and buy;\n\ndef buysignal = CompoundValue(1, if buynow and !stopbuy then 1 else if buysignal[1]==1 and stopbuy then 0 else buysignal[1], 0);\n\n \n\nplot Buy_Signal = buysignal[1] == 0 and buysignal==1;\nBuy_Signal.setpaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nBuy_Signal.setdefaultColor(color.dark_GREEN);\nBuy_Signal.hidetitle();\n\ndef buy_1_2aL = price &gt; mov_avg_superFast  and (mov_avg_superFast&gt; mov_avg_Fast or  mov_avg_superFast &gt; mov_avg_slow) and ppm1&gt; th;# and( ppm2&gt; 0 or ppm3&gt;0) ;\n\ndef stopbuy_1_2aL =price &lt; mov_avg_superFast  or (mov_avg_superFast&lt;= mov_avg_Fast and  mov_avg_superFast &lt;= mov_avg_slow) ;#or ppm1&lt;=th or ppm2&lt;=th or ppm3&lt;=th;\n\ndef buynow_1_2aL = !buy_1_2aL[1] and buy_1_2aL;\n\ndef buysignal_1_2aL = CompoundValue(1, if buynow_1_2aL and !stopbuy then 1 else if buysignal_1_2aL[1]==1 and stopbuy then 0 else buysignal_1_2aL[1], 0);\n\n \n\nplot Buy_Signal_M1_2aL = buysignal_1_2aL[1] == 0 and buysignal_1_2aL==1;\nBuy_Signal_M1_2aL.setpaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nBuy_Signal_M1_2aL.setdefaultColor(color.white);\nBuy_Signal_M1_2aL.hidetitle();\n\n\n\n\n#Alert(condition = buysignal[1] == 0 and buysignal == 1, text = \&quot;Buy Signal\&quot;, sound = Sound.Bell, \&quot;alert type\&quot; = Alert.BAR);\n\nplot Momentum_Down = buysignal[1] ==1 and buysignal==0;\nMomentum_down.setpaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);\nMomentum_Down.setdefaultColor(color.plum);\nMomentum_down.hidetitle();\n\n#Alert(condition = buysignal[1] == 1 and buysignal == 0, text = \&quot;Momentum_Down\&quot;, sound = Sound.Bell, \&quot;alert type\&quot; = Alert.BAR);\ndef sell_condition1 =  mov_avg_superFast &lt; mov_avg_Fast and mov_avg_superFast &lt; mov_avg_Slow and price &lt; mov_avg_superFast;\ndef sell_condition2 =  mov_avg_superFast &lt; mov_avg_Fast and price &lt; mov_avg_superFast and price &lt; mov_avg_Fast and price &lt; mov_avg_Slow and ppm1&lt;= -1.5 and ppm2&lt;= -1.0 ;\ndef sell_condition3 =price &lt; mov_avg_superFast and ppm1&lt;=0;# and ppm2&lt;= -1.0 ;\ndef sell_condition4 =price &lt; mov_avg_superFast ;#and ppm1&lt;=0;# and ppm2&lt;= -1.0 ;\n\ndef sell =  sell_condition2 or sell_condition4;\ndef stopsell = price &gt; mov_avg_superFast;#mov_avg_superFast &gt;= mov_avg_Fast or  ;;\n\ndef sellnow = !sell[1] and sell;\n\ndef sellsignal = CompoundValue(1, if sellnow and !stopsell then 1 else if sellsignal[1]==1 and stopsell then 0 else sellsignal[1], 0);\n\n \n\nPlot Sell_Signal = sellsignal[1] ==0 and sellsignal;\n\nSell_signal.setpaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_down);\n\nsell_signal.setDefaultColor(color.red);\n\nSell_signal.hidetitle();\n\n#Alert(condition = sellsignal[1] == 0 and sellsignal == 1, text = \&quot;Sell Signal\&quot;, sound = Sound.Bell, \&quot;alert type\&quot; = Alert.BAR);\n\n \n\nPlot Momentum_Up = sellsignal[1]==1 and sellSignal==0;\n\nMomentum_up.setpaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_up);\n\nMomentum_up.setDefaultColor(color.plum);\n\nMomentum_up.hidetitle();\n\n#Alert(condition = sellsignal[1] == 1 and sellSignal == 0, text = \&quot;Momentum_Up\&quot;, sound = Sound.Bell, \&quot;alert type\&quot; = Alert.BAR);\ninput priceHma = close;\n input lengthHma = 20;\n\ndef HMA = MovingAverage(AverageType.HULL, priceHma, lengthHma);\ndef HMA_Up=  HMA &gt; HMA[1];\ndef HMA_Down =! HMA_UP;\n\nplot Colorbars = if buysignal and HMA_Up then 1 else if  buysignal and !HMA_Up then  2 else if sellsignal and HMA_Down then 3  else if sellsignal and !HMA_Down then  4 else if !buysignal or !sellsignal then 5 else 0;\n\ncolorbars.setHiding(1);\n\nColorbars.definecolor(\&quot;Buy\&quot;, color.dark_green);\n\nColorbars.definecolor(\&quot;Sell\&quot;, color.red);\n\nColorbars.definecolor(\&quot;Neutral\&quot;, color.plum);\nColorbars.definecolor(\&quot;HullMA_up\&quot;, color.blue);\n\nColorbars.definecolor(\&quot;HullMA_down\&quot;, color.orange);\n###############\n\n#def Colorbars1 = if buysignal == 1 then 1 else if sellsignal == 1 then 2 else if buysignal == 0 or sellsignal == 0 then 3 else 0;\nAssignPriceColor(if Colorbars ==1 and color_bars then colorbars.color(\&quot;Buy\&quot;) else if colorbars ==2 and color_bars  then colorbars.color(\&quot;HullMA_down\&quot;) else if colorbars ==3 and color_bars  then colorbars.color(\&quot;Sell\&quot;)  else if colorbars ==4 and color_bars  then colorbars.color(\&quot;HullMA_up\&quot;)else if color_bars  then colorbars.color(\&quot;neutral\&quot;) else  Color.CURRENT);\n\n#\n\n\n\n\n###############################\ninput showlable=yes;\n\n\n\ninput showPpmDivLable=yes;\n\nAddLabel(showPpmDivLable, \&quot; ppm1= \&quot;+  roundup(ppm1,3), if ppm1&gt; 0 then Color.LIGHT_GREEN else if ppm1&lt; 0 then color.light_red else Color.Light_GRAY);\nAddLabel(showPpmDivLable, \&quot; d1= \&quot;+  roundup(ppm_d1,3),  Color.green);\nAddLabel(showPpmDivLable, \&quot; d2= \&quot;+  roundup(ppm_d2,3),  Color.cyan);\n\n\n\n#plot ppm1_d1 = MovingAverage(averageTypefast, ppm1[-displace], fast_length);\n#plot ppm1_d2 = MovingAverage(averageTypefast, ppm1[-displace], slow_length);\n\nppm1.setdefaultColor(color.light_ORANGE);\nppm2.setdefaultColor(color.violet);\nppm3.setdefaultColor(color.yellow);\n\nppm2.Hide();\nppm3.Hide();\nppm_d1.setdefaultColor(color.green);\nppm_d2.setdefaultColor(color.cyan);\n\n\nAddLabel(showlable, \&quot;  \&quot;+ superfast_length+ \&quot;MAvg\&quot; ,ppm1.TakeValueColor ());\nAddLabel(showlable,  astext(SuperfastAvg), if ppm1&lt; close then Color.LIGHT_GREEN else if ppm1&gt; close then color.light_red else Color.Light_GRAY);\ndef maDif= close- SuperfastAvg;\n\nAddLabel(showlable and maDif&gt;0, \&quot; +\&quot;+astext(maDif),  Color.LIGHT_GREEN );\nAddLabel(showlable and maDif&lt;=0, \&quot; \&quot;+astext(maDif),  if maDif&lt; 0 then color.LIGHT_red else Color.LIGHT_GRAY);\n\nAddLabel(showlable, \&quot;  \&quot;+ fast_length+ \&quot;MAvg\&quot; ,ppm2.TakeValueColor ());\nAddLabel(showlable,  astext(FastAvg), if ppm2&lt; close then Color.LIGHT_GREEN else if ppm2&gt; close then color.light_red else Color.Light_GRAY);\n\n\nAddLabel(showlable, \&quot;  \&quot;+ slow_length+ \&quot;MAvg\&quot; ,ppm3.TakeValueColor ());\nAddLabel(showlable,  astext(SlowAvg), if ppm3&lt; close then Color.LIGHT_GREEN else if ppm3&gt; close then color.light_red else Color.Light_GRAY);\n\n#AddLabel(showlable, \&quot;MA \&quot; + ppm_length + \&quot;=\&quot;+ astext(movAvg_ppm1), if movAvg_ppm1 &gt; close  then Color.RED else if movAvg_ppm1 &lt; close then  Color.GREEN else Color.GRAY);\n\nAddLabel(yes, \&quot; ppm1= \&quot;+  roundup(ppm1,3), if ppm1&gt; 0 then Color.LIGHT_GREEN else if ppm1&lt; 0 then color.light_red else Color.Light_GRAY);\nAddLabel(yes, \&quot; ppm2= \&quot; +   roundup(ppm2,3), if ppm2&gt; 0 then Color.LIGHT_GREEN else if ppm2&lt; 0 then color.light_red else Color.Light_GRAY);\nAddLabel(yes, \&quot; ppm3= \&quot;+  roundup(ppm3,3), if ppm3&gt; 0 then Color.LIGHT_GREEN else if ppm3&lt; 0 then color.light_red else Color.Light_GRAY);\n\n\n##################################\n\n\n\n\n\n\n\n\n\n\n\n\n#end&quot;,name=&quot;_ae3dde1c_4c60_4560_9ada_eb01ee615711&quot;}){inputsMap:TreeMap12{^(&quot;hide_debug&quot;,@Boolean0),^(&quot;pFast&quot;,&quot;CLOSE&quot;),^(&quot;ppmiSmooth&quot;,1),^(&quot;price&quot;,&quot;CLOSE&quot;),^(&quot;priceHma&quot;,&quot;CLOSE&quot;),^(&quot;pSlow&quot;,&quot;CLOSE&quot;),^(&quot;pSupperFast&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap12,plots{0:{color=@CustomColor4},2:{color=@CustomColor5},3:{hiding=&lt;T},4:{hiding=&lt;T},6:{hiding=&lt;F},7:{hiding=&lt;F},10:{color=@CustomColor1,lineWeight=5},11:{color=@CustomColor6,lineWeight=5},13:{color=@CustomColor4,lineWeight=5}}}),+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence{body=&quot;#ShadowTrader_VA_Pivots\n#ShadowTrader (Copyright ShadowTrader), a division of ShadowTrader Technologies, LLC. 2017. All rights reserved. This ShadowTrader Script is for educational purposes only.  ShadowTrader is not responsible for the use,  functionality or the performance of this Script. This work is copyrighted by ShadowTrader and all rights of this work under the license are reserved. Use of the ShadowTrader licensed code is for private use only and any other use are prohibited. By exercising any of the rights herein, you are accepting the terms of this license. You have a non-exclusive right to use or alter the ShadowTrader code. Use of this ShadowTrader Script other than as provided for in this license is prohibited. Any redistribution is strictly prohibited and will be enforced.\n\n# A big ShadowTrader thank you to Justin Lane Williams for initially creating this script for us.\n#08/31/11: Total redesign, added automated Pivot values, proximity plotting, new features.\n#09/12/11: Added “ShowLevel4” option due to recent volitility. Will plot S4 &amp; R4.\n#12/11/11: Added “AfterHours” option to turn off plot after hours.\n#12/21/11: Bug fixes due to TOS upgrades. Removed “AfterHours”, not workin correctly.\n#01/25/12: Enter daily inputs as 4 digits and script will interpret.\n# -added rounding to make the pivots appear as they do on the show.\n#01/26/12: Removed ability to truncate inputs due to it only being accurate 99% of time.\n#02/02/12: Small update to make sure \&quot;Auto Pivots\&quot; menu option functioned properly.\n#06/07/12: Added (6)VPOC inputs, should be manually entered/deleted, displays when applicable.\n#06/25/12: Removed some code and fixed a few bugs.\n#07/09/12: Fixed one small but important bug.\n#07/13/12: Added value bubbles, removed proximity plot function.\n#08/13/12: Removed a lot of superfluous code plus a few upgrades.\n#08/15/12: Fixed a bug that was giving false numbers.\n#08/30/12: Fixed a bug that wasn\'t plotting the NQ profile.\n#09/02/12: Reordered inputs and removed \&quot;LabelESonly\&quot; input.\n#12/28/12: Made the plot hide on daily charts and updated code to current standards.\n#01/04/13: Fixed a rare bug that hides labels if using tick charts.\n#01/28/13: Added ability to hide each individual level.\n#02/09/21 :mahiby customized for  \n# Pivot values will be off the day following market holidays and possibly the day after rollover.\n# On these days make \&quot;AutoPivots=No\&quot; and manually draw pivots. Change back to \&quot;AutoPivots=Yes\&quot; the day after.\n\ninput PivotTimeFrame =  { \&quot;15 MIN\&quot; ,  \&quot;30 MIN\&quot;,  \&quot;1 HOUR\&quot;, \&quot;2 HOURs\&quot;,  \&quot;4 HOURs\&quot;, default \&quot;DAY\&quot;,  \&quot;2 DAYS\&quot;, \&quot;3 DAYS\&quot;, \&quot;4 DAYS\&quot;, WEEK, MONTH, \&quot;OPT EXP\&quot;, QUARTER, YEAR}; #AggregationPeriod.DAY;#\ninput ProfileTimeFrame = { CHART,  FIVE_MINUTE, TEN_MINUTE, FIFTEEN_MINUTE, THIRTY_MINUTE,   HOUR, TWO_HOUR, FOUR_HOUR, default DAY, TWO_DAY, THREE_DAY, FOUR_DAY, WEEK, TWO_WEEK, THREE_WEEK, MONTH, \&quot;OPT EXP\&quot;, BAR};\ninput ShowCloud1  = yes;#Hint ShowCloud: Shows the value area as a cloud.\ninput ShowCloud2  = yes;#Hint ShowCloud: Shows the value area as a cloud.\ninput showOnlyToday = no;\ninput VaPrevious = yes;\ninput AutoPivots = yes;#Hint AutoPivots: Turns off pivot lines, value area stays on.\ninput showVAH = no;\ninput Labels = {default \&quot;Proximity\&quot;, \&quot;Off\&quot;, \&quot;All\&quot;, \&quot;ValueAreaOnly\&quot;};#Hint Labels: Labels at top of chart.\ninput ShowPivotPoint = yes;#Hint ShowPivotPoint: Hides Pivot Point plot.\ninput ShowLevel4 = yes;#Hint ShowLevel4: Will display S4 and R4 for days with large moves.\ninput ShowLevel5 = yes;#Hint ShowLevel4: Will display S4 and R4 for days with large moves.\ninput ShowLevel6 = no;#Hint ShowLevel4: Will display S4 and R4 for days with large moves.\ninput ShowLevel7 = no;#Hint ShowLevel4: Will display S4 and R4 for days with large moves.\ninput ShowLevel8 = no;#Hint ShowLevel4: Will display S4 and R4 for days with large moves.\ninput PivotBubbles  = yes;#yes;#Hint PivotBubbles: Shows bubbles on pivot plot lines.\ninput ValueBubbles  = yes;#yes;#Hint ValueBubbles: Shows bubbles on value plot lines.\ninput PlotStartTime = 0930;#Hint PlotStartTime: Move to earlier time to shift bubbles to the left.\n\n\ninput CloudOpenOnly = yes;#Hint CloudOpenOnly: Will only cloud open candles.\ninput HideAfterHoursLabel = no;#Hint HideAfterHoursLabel: Hides \&quot;NoShadowPlotAfterHours\&quot; label.\ninput VpocBubbles  = no;#yes;#Hint VpocBubbles: Shows bubbles on VPOC plot lines.\n\ninput ShowS1 = yes;#yes;#Hint ShowS1: Hide/Show S1.\ninput ShowS2 = yes;#Hint ShowS2: Hide/Show S2.\ninput ShowS3 = yes;#yes;#Hint ShowS3: Hide/Show S3.\ninput ShowR1 = yes;#yes;#Hint ShowR1: Hide/Show R1.\ninput ShowR2 = yes;#Hint ShowR2: Hide/Show R2.\ninput ShowR3 = yes;#yes;#Hint ShowR3: Hide/Show R3.\ninput ShowORB = no;#Hint ShowORB: Displays 2 small, dashed lines at the top/bottom of opening range.\ninput OrbTime = 30;#Hint OrbTime: Defines the time range in minutes for the ORB.\n\ninput triggerUpperVaLimitHigh = 5;\ninput triggerUpperVaLimitLow = -5;\ninput triggerLowerVaLimitHigh = 5;\ninput triggerLowerVaLimitLow = -5;\ninput showLines = no;\ninput opacity = 20;\n\ndef Na = Double.NaN;\ninput showDebugLable = yes;\n#declare hide_on_daily;\n\n\n###pps\n\ninput marketThreshold = 0.0025;\n\ninput applyPersonsLevelsFilter = yes;\n\nAssert(marketThreshold &gt;= 0, \&quot;\'market threshold\' must not be negative: \&quot; + marketThreshold);\n\ndef marketType = {default DISABLED, NEUTRAL, BEARISH, BULLISH};\n\ndef PP2 = high(period = PivotTimeFrame)[2] + low(period = PivotTimeFrame)[2] + close(period = PivotTimeFrame)[2];\n\n################\n\nmarketType = if !applyPersonsLevelsFilter then marketType.DISABLED else\nif PP2[-1] &gt; (PP2[-1] + PP2 + PP2[1]) / 3 + marketThreshold then marketType.BULLISH else\nif PP2[-1] &lt; (PP2[-1] + PP2 + PP2[1]) / 3 - marketThreshold then marketType.BEARISH else marketType.NEUTRAL;\n\n#Previous Day Functions\ndef Day   = GetDayOfWeek(GetYYYYMMDD());\ndef CloseTime = SecondsTillTime(1545) &gt;= 0;\ndef OpenTime = SecondsFromTime(0930) &gt;= 0;\ndef RegHrs = CloseTime and OpenTime;\n\n###\ndef PLow ;\ndef PHigh ;\ndef PrevLow ;\ndef PrevHigh;\ndef a = if  \&quot;PivotTimeFrame\&quot; == \&quot;DAY\&quot; then 1 else 0;\n\nif  a {\n    PLow  =  CompoundValue(1, If(Day == Day[1] and RegHrs and low &lt; PLow[1], low, If(SecondsFromTime(0930) &lt;= 0 and RegHrs, low, PLow[1])), low);\n    PHigh = CompoundValue(1, If(Day == Day[1] and RegHrs and high &gt; PHigh[1], high, If(SecondsFromTime(0930) &lt;= 0 and RegHrs, high, PHigh[1])), high);\n    PrevLow  = If(Day != Day[1], PLow[1], PrevLow[1]);\n    PrevHigh = If(Day != Day[1], PHigh[1], PrevHigh[1]);\n\n#AddLabel (yes,period);\n}\n\nelse {\n    PLow  = low(period = PivotTimeFrame);\n    PHigh = high(period = PivotTimeFrame);\n    PrevLow  = low(period = PivotTimeFrame)[1];\n    PrevHigh = high(period = PivotTimeFrame)[1];\n\n}\n##################\n#Prior Day Profile - counting formula by functionform\n\ndef period;\ndef yyyymmdd = GetYYYYMMDD();\ndef seconds = SecondsFromTime(0);\ndef month = GetYear() * 12 + GetMonth();\ndef day_number = DaysFromDate(First(yyyymmdd)) + GetDayOfWeek(First(yyyymmdd));\ndef dom = GetDayOfMonth(yyyymmdd);\ndef dow = GetDayOfWeek(yyyymmdd - dom + 1);\ndef expthismonth = (if dow &gt; 5 then 27 else 20) - dow;\ndef exp_opt = month + (dom &gt; expthismonth);\n\nswitch (ProfileTimeFrame) {\ncase CHART:\n    period = 0;\n#case MINUTE:\n #   period = Floor(seconds / 60 + day_number * 24 * 60);\ncase FIVE_MINUTE:\n    period = Floor(seconds / 60 + day_number * 24 * 60);\n   # timeFrame = \&quot;5 MINUTES\&quot;; #\&quot;2 DAYS\&quot;\ncase TEN_MINUTE:\n    period = Floor(seconds / 60 + day_number * 24 * 60);\n   # timeFrame = \&quot;5 MINUTES\&quot;; #\&quot;2 DAYS\&quot;\ncase FIFTEEN_MINUTE:\n    period = Floor(seconds / 60 + day_number * 24 * 60);\n   # timeFrame = \&quot;15 MINUTES\&quot;; #\&quot;2 DAYS\&quot;\ncase THIRTY_MINUTE:\n    period = Floor(seconds / (30 * 60) + day_number * 24 * 60);\n   # timeFrame = \&quot;30 MINUTES\&quot;; #\&quot;2 DAYS\&quot;\ncase HOUR:\n    period = Floor(seconds / 3600 + day_number * 24);\n   # timeFrame = \&quot;1 HOUR\&quot;; #\&quot;2 DAYS\&quot;\ncase TWO_HOUR:\n    period = Floor(seconds / (2 * 3600) + day_number * 24);\n   # timeFrame = \&quot;2 HOURS\&quot;; #\&quot;2 DAYS\&quot;\ncase FOUR_HOUR:\n    period = Floor(seconds / (4 * 3600) + day_number * 24);\n    #timeFrame = \&quot;4 HOURS\&quot;; #\&quot;2 DAYS\&quot;\ncase DAY:\n    period = CountTradingDays(Min(First(yyyymmdd), yyyymmdd), yyyymmdd) - 1;\n   # timeFrame =  \&quot;1 DAY\&quot;;\ncase TWO_DAY:\n    period =  Floor((CountTradingDays(Min(First(yyyymmdd), yyyymmdd), yyyymmdd) - 1) / 2);\n   # timeFrame =  \&quot;2 DAYS\&quot;;\ncase THREE_DAY:\n    period = Floor((CountTradingDays(Min(First(yyyymmdd), yyyymmdd), yyyymmdd) - 1) / 3);\n   # timeFrame =  \&quot;3 DAYS\&quot;;\ncase FOUR_DAY:\n    period =  Floor((CountTradingDays(Min(First(yyyymmdd), yyyymmdd), yyyymmdd) - 1) / 4);\n   # timeFrame =  \&quot;4 DAYS\&quot;;\ncase WEEK:\n    period = Floor(day_number / 7);\n   # timeFrame =  \&quot;1 WEEK\&quot;;\ncase TWO_WEEK:\n    period = Floor(day_number / 14);\n  #  timeFrame =  \&quot;2 WEEK\&quot;;\ncase THREE_WEEK:\n    period = Floor(day_number / 21);\n   # timeFrame =  \&quot;3 WEEK\&quot;;\ncase MONTH:\n    period = Floor(month - First(month));\n   # timeFrame =  \&quot;MONTH\&quot;;\ncase \&quot;OPT EXP\&quot;:\n    period = exp_opt - First(exp_opt);\n    #timeFrame =  \&quot;OPT EXP\&quot;;\ncase BAR:\n    period = BarNumber() - 1;\n}\n\n\ndef count;\nif VaPrevious\n{\n\n    count = CompoundValue(1, if !(period != period[1]) then count[1] + 1 else 1, 1);\n\n}\nelse\n{\n   # count = CompoundValue(1, if period != period[1] then (count[1] + period - period[1]) else count[1], 0);\n\n\n count = CompoundValue(1, if period != period[1] then count[1]   else  (count[1] + period - period[1]), 0);\n\n\n\n}\ndef cond = count &lt; count[1] + period - period[1];\n\ndef Pivot = hlc3(period = PivotTimeFrame)[1];\n\n\n\ndef priorperiod = if IsNaN(count[1]) then 1 else Max(count, count[1]);\nprofile vol1 = VolumeProfile(\&quot;startNewProfile\&quot; = period != period[1], \&quot;onExpansion\&quot; = no);\n\ndef vahprior = vol1.GetHighestValueArea();\ndef pocprior = vol1.GetPointOfControl();\ndef valprior = vol1.GetLowestValueArea();\n\ndef vahprev = GetValue(vahprior, priorperiod);\ndef pocprev = GetValue(pocprior, priorperiod);\ndef valprev = GetValue(valprior, priorperiod);\n\n#if showProfile then\ndef  showProfile = no;\ndef showPointOfControl = no;\n\n#vol.Show(if showProfile then GlobalColor(\&quot;Profile\&quot;) else Color.CURRENT, if showPointOfControl then GlobalColor(\&quot;Point Of Control\&quot;) else Color.CURRENT, if showValueArea then GlobalColor(\&quot;Value Area\&quot;) else Color.CURRENT, opacity);\n#profile vol = VolumeProfile(\&quot;startNewProfile\&quot; = cond, \&quot;onExpansion\&quot; = no);\n#vol.Show(if showProfile then GlobalColor(\&quot;Profile\&quot;) else Color.CURRENT, if showPointOfControl then GlobalColor(\&quot;Point Of Control\&quot;) else Color.CURRENT, if showValueArea then GlobalColor(\&quot;Value Area\&quot;) else Color.CURRENT, opacity);\ndef VAH = vahprev;\ndef VAL = valprev;\ndef POC = pocprev;\n\n\n############\n#Value Area Functions\ndef PPoint = If(Pivot &gt; 0, Pivot, Na);\ndef VArea  = Between(close, VAL, VAH);\ndef VAreaabove  = close &gt; VAH;\ndef VAreabelow  = close &lt; VAL;\n\n\n###%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n#def oneVol = Roundup(( VAHigh - VALow) / VAHigh, 2);\ndef oneVol = RoundUp(( VAH - VAL) / 100, 2);\ndef upperValimitH = VAH + oneVol * (triggerUpperVaLimitHigh);\ndef upperValimitL = VAH + oneVol * (triggerUpperVaLimitLow);\n\ndef lowerValimitH = VAL + oneVol * (triggerLowerVaLimitHigh);\ndef lowerValimitL = VAL + oneVol * (triggerLowerVaLimitLow);\n#triggerUpperVaLimitlow = if triggerUpperVaLimitlow&gt;=0 then triggerUpperVaLimitlow =-5 else triggerUpperVaLimitlow= triggerUpperVaLimitlow;\n\nplot VA_high_short = upperValimitH;\nplot VA_high_long = upperValimitL;\n\nplot VA_low_short = lowerValimitL;\nplot VA_low_long = lowerValimitH;\n\n#AddCloud(VA_high_long, VA_high_short, Color.LIGHT_RED, Color.LIGHT_RED);\n#AddCloud(VA_high_long, VA_high_short, Color.LIGHT_RED, Color.LIGHT_RED);\n\n#VA_low_short.SetPaintingStrategy(PaintingStrategy.DASHES);\n#VA_low_long.SetDefaultColor(Color.BLUE);\nVA_low_short.SetHiding(!showLines);\nVA_low_short.SetPaintingStrategy(PaintingStrategy.DASHES);\nVA_low_short.SetDefaultColor(Color.RED);\nVA_low_long.SetHiding(!showLines);\nVA_low_long.SetPaintingStrategy(PaintingStrategy.DASHES);\nVA_low_long.SetDefaultColor(Color.GREEN);\n\n\n\nVA_high_short.SetHiding(!showLines);\nVA_high_short.SetPaintingStrategy(PaintingStrategy.DASHES);\nVA_high_short.SetDefaultColor(Color.RED);\nVA_high_long.SetHiding(!showLines);\nVA_high_long.SetPaintingStrategy(PaintingStrategy.DASHES);\nVA_high_long.SetDefaultColor(Color.GREEN);\n\n\n####%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\n\n\n\n\n#Time Functions\ndef timeFrame = getAggregationPeriod();\ndef prdMax =highestAll(if(!IsNaN(close[-1]),period,Na))  ;\ndef cnt =if(period &gt; prdMax-2  ,1,Na);\ndef Chart2  =  if showOnlyToday then cnt else 1 ;;#if showOnlyToday then (IsNaN(period[-1] and (period == period[1])))  else 1 ;\n#def Chart2  =  if showOnlyToday then MarketOpen and NewDay else 1 ;\n\ndef CloseTime2 = SecondsTillTime(1600) &gt;= 0;\ndef OpenTime2 = SecondsFromTime(PlotStartTime) &gt;= 0;\ndef MarketOpen = OpenTime2 and CloseTime2;\ndef NewDay = IsNaN(close(period = “Day”)[-1]);\ndef Chart1;\nif  timeFrame&lt; aggregationPeriod.DAY\n{\nChart1  =  if showOnlyToday then MarketOpen and NewDay else 1 ;\n}\nelse\n{ \n Chart1  =  chart2 ;\n}\n#plot prd =period;\n\n#AddLabel (yes,Chart1);\n#Pivot Functions\ndef Res1  = (2 * PPoint) - PrevLow;\ndef Supp1 = (2 * PPoint) - PrevHigh;\ndef Res2  = PPoint + (Res1 - Supp1);\ndef Supp2 = PPoint - (Res1 - Supp1);\ndef Res3  = PrevHigh + 2 * (PPoint - PrevLow);\ndef Supp3 = PrevLow - 2 * (PrevHigh - PPoint);\ndef Res4  = PrevHigh + 3 * (PPoint - PrevLow);\ndef Supp4 = PrevLow - 3 * (PrevHigh - PPoint);\n\n\n#def Res1  = (2 * PPoint) - PrevLow;\n#def Supp1 = (2 * PPoint) - PrevHigh;\n#def Res2  = PPoint + (Res1 - Supp1); # def Res2  = PPoint + (Res1 - Supp1);\n#def Supp2 = PPoint - (Res1 - Supp1);\n#def Res3  = PPoint + 2 * (PrevHigh - PrevLow);# def Res3  = PrevHigh + 2 * (PPoint - PrevLow);\n#def Supp3 = PPoint - 2 * (PrevHigh - PrevLow);\n#def Res4  = PPoint + 3 * (PrevHigh - PrevLow);#\n#def Supp4 = PPoint - 3 * (PrevHigh - PrevLow);\n\ndef Res5  = PrevHigh + 4 * (PPoint - PrevLow);\ndef Supp5 = PrevLow - 4 * (PrevHigh - PPoint);\n\ndef Res6  = PrevHigh + 5 * (PPoint - PrevLow);\ndef Supp6 = PrevLow - 5 * (PrevHigh - PPoint);\n\ndef Res7  = PrevHigh + 6 * (PPoint - PrevLow);\ndef Supp7 = PrevLow - 6 * (PrevHigh - PPoint);\n\ndef Res8  = PrevHigh + 7 * (PPoint - PrevLow);\ndef Supp8 = PrevLow - 7 * (PrevHigh - PPoint);\n\n\n\n\n#Rounding Functions\ndef round = 0.01;\ndef RI   = RoundDown(Res1, 0) - ((Round(((RoundDown(Res1, 0) - Res1) / round), 0)) * round);\ndef SI   = RoundDown(Supp1, 0) - ((Round(((RoundDown(Supp1, 0) - Supp1) / round), 0)) * round);\ndef RII  = RoundDown(Res2, 0) - ((Round(((RoundDown(Res2, 0) - Res2) / round), 0)) * round);\ndef SII  = RoundDown(Supp2, 0) - ((Round(((RoundDown(Supp2, 0) - Supp2) / round), 0)) * round);\ndef RIII = RoundDown(Res3, 0) - ((Round(((RoundDown(Res3, 0) - Res3) / round), 0)) * round);\ndef SIII = RoundDown(Supp3, 0) - ((Round(((RoundDown(Supp3, 0) - Supp3) / round), 0)) * round);\ndef RIV  = RoundDown(Res4, 0) - ((Round(((RoundDown(Res4, 0) - Res4) / round), 0)) * round);\ndef SIV  = RoundDown(Supp4, 0) - ((Round(((RoundDown(Supp4, 0) - Supp4) / round), 0)) * round);\ndef PivP = RoundDown(PPoint, 0) - ((Round(((RoundDown(PPoint, 0) - PPoint) / round), 0)) * round);\n\ndef RV  = RoundDown(Res5, 0) - ((Round(((RoundDown(Res5, 0) - Res5) / round), 0)) * round);\ndef SV  = RoundDown(Supp5, 0) - ((Round(((RoundDown(Supp5, 0) - Supp5) / round), 0)) * round);\ndef RVI  = RoundDown(Res6, 0) - ((Round(((RoundDown(Res6, 0) - Res6) / round), 0)) * round);\ndef SVI  = RoundDown(Supp6, 0) - ((Round(((RoundDown(Supp6, 0) - Supp6) / round), 0)) * round);\ndef RVII  = RoundDown(Res7, 0) - ((Round(((RoundDown(Res7, 0) - Res7) / round), 0)) * round);\ndef SVII  = RoundDown(Supp7, 0) - ((Round(((RoundDown(Supp7, 0) - Supp7) / round), 0)) * round);\ndef RVIII  = RoundDown(Res8, 0) - ((Round(((RoundDown(Res8, 0) - Res8) / round), 0)) * round);\ndef SVIII  = RoundDown(Supp8, 0) - ((Round(((RoundDown(Supp8, 0) - Supp8) / round), 0)) * round);\n\n\n\n\n#Plots\nplot VH  = If(Chart1 and VAH &gt; 0, VAH, Na);\nplot PC  = If(Chart1 and POC &gt; 0, POC, Na);\nplot VL  = If(Chart1 and VAL &gt; 0, VAL, Na);\n\n##Auto Show \ndef R1_auto_show;\ndef R2_auto_show;\ndef R3_auto_show;\ndef R4_auto_show;\ndef R5_auto_show;\ndef R6_auto_show;\ndef R7_auto_show;\ndef R8_auto_show;\n\ndef S1_auto_show;\ndef S2_auto_show;\ndef S3_auto_show;\ndef S4_auto_show;\ndef S5_auto_show;\ndef S6_auto_show;\ndef S7_auto_show;\ndef S8_auto_show;\n\ndef cmax = highestAll( count);\ndef R1AutoShow = (close&gt;VH or (Between(RI,VL,VH) and close&gt;VL));\ndef S1AutoShow = (close&lt;VL or (Between(SI,VL,VH) and close&lt;VH));;\ndef R2AutoShow =  close &gt; VH and close &lt; RV;\ndef S2AutoShow = (close &lt; VL) and close &gt; SV  ;\ndef R3AutoShow = close &gt; (RI + ((RII - RI) / 2));;\ndef S3AutoShow = close &lt; (SI - ((SI - SII) / 2));\ndef R4AutoShow = close &gt; (RII + ((RIII - RII) / 2));\ndef S4AutoShow =  close &lt; (SII - ((SII - SIII) / 2));\ndef R5AutoShow =  close &gt; (RIII + ((RIV - RIII) / 2));\ndef S5AutoShow =  close &lt; (SIII - ((SIII - SIV) / 2));\ndef R6AutoShow =  close &gt; (RIV + ((RV - RIV) / 2));\ndef S6AutoShow =  close &lt; (SIV - ((SVI - SV) / 2));\ndef R7AutoShow =  close &gt; (RV + ((RVI - RV) / 2));\ndef S7AutoShow =  close &lt; (SV - ((SV - SVI) / 2));\ndef R8AutoShow =  close &gt; (RVI + ((RVII - RVI) / 2));\ndef S8AutoShow =  close &lt; (SVI - ((SVI - SVII) / 2));\n\nR1_auto_show = if ( (period==period[1]) and R1_auto_show[1] )  then R1_auto_show[1] else R1AutoShow;\nR2_auto_show = if ( (period==period[1]) and R2_auto_show[1] )  then R2_auto_show[1] else R2AutoShow;\nR3_auto_show = if ( (period==period[1]) and R3_auto_show[1] )  then R3_auto_show[1] else R3AutoShow;\nR4_auto_show = if ( (period==period[1]) and R4_auto_show[1] )  then R4_auto_show[1] else R4AutoShow;\nR5_auto_show = if ( (period==period[1]) and R5_auto_show[1] )  then R5_auto_show[1] else R5AutoShow;\nR6_auto_show = if ( (period==period[1]) and R6_auto_show[1] )  then R6_auto_show[1] else R6AutoShow;\nR7_auto_show = if ( (period==period[1]) and R7_auto_show[1] )  then R7_auto_show[1] else R7AutoShow;\nR8_auto_show = if ( (period==period[1]) and R8_auto_show[1] )  then R8_auto_show[1] else R8AutoShow;\n\n\nS1_auto_show = CompoundValue(2,if ( (period==period[1]) and S1_auto_show[1] )  then S1_auto_show[1] else S1AutoShow,S1AutoShow);\nS2_auto_show = if ( (period==period[1]) and S2_auto_show[1] )  then S2_auto_show[1] else S2AutoShow;\nS3_auto_show = if ( (period==period[1]) and S3_auto_show[1] )  then S3_auto_show[1] else S3AutoShow;\nS4_auto_show = if ( (period==period[1]) and S4_auto_show[1] )  then S4_auto_show[1] else S4AutoShow;\nS5_auto_show = if ( (period==period[1]) and S5_auto_show[1] )  then S5_auto_show[1] else S5AutoShow;\nS6_auto_show = if ( (period==period[1]) and S6_auto_show[1] )  then S6_auto_show[1] else S6AutoShow;\nS7_auto_show = if ( (period==period[1]) and S7_auto_show[1] )  then S7_auto_show[1] else S7AutoShow;\nS8_auto_show = if ( (period==period[1]) and S8_auto_show[1] )  then S8_auto_show[1] else S8AutoShow;\n\nplot gg=(S1AutoShow);#==1);\nplot ggg = ( s1_auto_show);# if ( isnan( s1_autoshow))then  1 else double.NaN ;\ngg.SetHiding(0);\nggg.SetHiding(0);\n\n#input showHigherLevel =yes;\n##\n\nplot R4  = If(Chart1 and AutoPivots and ShowLevel4 and  R4_auto_show  and RIV &gt; 0, RIV, Na);\nplot R3  = If(Chart1 and AutoPivots and ShowR3  and  R3_auto_show and RIII &gt; 0, RIII,Na);\nplot R2  = If(Chart1 and AutoPivots and ShowR2  and  R2_auto_show and RII &gt; 0, RII, Na);\nplot R1  = If(Chart1 and AutoPivots and ShowR1  and  R1_auto_show and RI &gt; 0, RI, Na);\nplot PP  = If(Chart1 and AutoPivots and ShowPivotPoint and PPoint &gt; 0, PivP, Na);\nplot S1  = If(Chart1 and AutoPivots and ShowS1 and  S1_auto_show  and SI &gt; 0, SI, Na);\nplot S2  = If(Chart1 and AutoPivots and ShowS2 and  S2_auto_show  and SII &gt; 0, SII, Na);\nplot S3  = If(Chart1 and AutoPivots and ShowS3 and  S3_auto_show and SIII &gt; 0, SIII, Na);\nplot S4  = If(Chart1 and AutoPivots and ShowLevel4 and  S4_auto_show and SIV &gt; 0, SIV, Na);\n\n#######\n\nplot R5  = If(Chart1 and AutoPivots and ShowLevel4 and  R5_auto_show  and RV &gt; 0, RV, Na);\nplot R6  = If(Chart1 and AutoPivots and ShowLevel4 and  R6_auto_show  and RVI &gt; 0, RVI, Na);\nplot R7  = If(Chart1 and AutoPivots and ShowLevel4 and  R7_auto_show  and RVII &gt; 0, RVII, Na);\nplot R8  = If(Chart1 and AutoPivots and ShowLevel4 and  R8_auto_show  and RVIII &gt; 0, RVIII, Na);\n\n\nplot S5  = If(Chart1 and AutoPivots and ShowLevel4 and  S5_auto_show  and SV &gt; 0, SV, Na);\nplot S6  = If(Chart1 and AutoPivots and ShowLevel4 and  S6_auto_show  and SVI &gt; 0, SVI, Na);\nplot S7  = If(Chart1 and AutoPivots and ShowLevel4 and  S7_auto_show  and SVII &gt; 0, SVII, Na);\nplot S8  = If(Chart1 and AutoPivots and ShowLevel4 and  S8_auto_show  and SVIII &gt; 0, SVIII, Na);\n####\n\n\ninput closeTimeC = 1615;\n#Value Area Cloud\n#def CloudClose = SecondsTillTime(1615) &gt; 0;\ndef CloudClose = SecondsTillTime(closeTimeC) &gt; 0;\ndef Cloud      = OpenTime and CloudClose;\ndef ChartCloud = if(timeFrame &gt; aggregationPeriod.DAY, Cloud and Chart1, chart1);\ndef CloudTest  = If(CloudOpenOnly, ChartCloud, Chart1);\ndef cloudhigh = If(CloudTest and ShowCloud1, VAH, Na);\ndef cloudlow  = If(CloudTest and ShowCloud1, VAL, Na);\nAddCloud(cloudhigh, cloudlow, Color.GRAY, Color.GRAY);\ndef AfterHours = OpenTime2 and CloudClose;\n\n#Chart Labels\ndef Futures = Between(close, close(\&quot;/es\&quot;) - 15, close(\&quot;/es\&quot;) + 15) or Between(close, close(\&quot;/nq\&quot;) - 15, close(\&quot;/nq\&quot;) + 15);\ndef Label = Chart1;# and Futures;\ndef ZeroTest = VAH &gt; 0 and VAL &gt; 0;\ndef PNotZero = PPoint &gt; 0;\ndef ChartLabels;\nswitch (Labels) {\ncase \&quot;Proximity\&quot;:\n    ChartLabels = 1;\ncase \&quot;Off\&quot;:\n    ChartLabels = 0;\ncase \&quot;All\&quot;:\n    ChartLabels = 2;\ncase \&quot;ValueAreaOnly\&quot;:\n    ChartLabels = 3;\n}\n\n\nAddLabel(ChartLabels == 1 and Label and AutoPivots and VArea and ZeroTest, “InsideValue”, Color.WHITE);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and VAreaabove and ZeroTest, “AboveValue”, Color.GREEN);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and VAreabelow and ZeroTest, “BelowValue”, Color.RED);\nAddLabel(ChartLabels == 1 and Label and !AutoPivots and VArea and ZeroTest, “InsideValueArea”, Color.WHITE);\nAddLabel(ChartLabels == 1 and Label and !AutoPivots and VAreaabove and ZeroTest, “AboveValueArea”, Color.GREEN);\nAddLabel(ChartLabels == 1 and Label and !AutoPivots and VAreabelow and ZeroTest, “BelowValueArea”, Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and Between(close, VL, (RI + ((RII - RI) / 2))), \&quot;VH=\&quot; + AsText(VH), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and Between(close, VL, VH), \&quot;POC=\&quot; + AsText(PC), Color.YELLOW);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and Between(close, (SI - ((SI - SII) / 2)), VH), \&quot;VL=\&quot; + AsText(VL), Color.GREEN);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and (close &gt; VH or (Between(RI, VL, VH) and close &gt; VL)), \&quot;R1=\&quot; + AsText(RI), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and close &gt; VH, \&quot;R2=\&quot; + AsText(RII), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and close &gt; (RI + ((RII - RI) / 2)), \&quot;R3=\&quot; + AsText(RIII), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and ShowLevel4 and close &gt; (RII + ((RIII - RII) / 2)), \&quot;R4=\&quot; + AsText(RIV), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and ShowLevel5 and close &gt; (RIII + ((RIV - RIII) / 2)), \&quot;R5=\&quot; + AsText(RV), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and ShowLevel6 and close &gt; (RII + ((RV - RIV) / 2)), \&quot;R6=\&quot; + AsText(RVI), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and ShowLevel7 and close &gt; (RII + ((RVI - RV) / 2)), \&quot;R7=\&quot; + AsText(RVII), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and ShowLevel8 and close &gt; (RII + ((RVII - RVI) / 2)), \&quot;R8=\&quot; + AsText(RVIII), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and ShowPivotPoint and close &gt; SI and close &lt; RI, \&quot;PP=\&quot; + AsText(PP), Color.WHITE);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and (close &lt; VL or (Between(SI, VL, VH) and close &lt; VH)), \&quot;S1=\&quot; + AsText(SI), Color.GREEN);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and close &lt; VL, \&quot;S2=\&quot; + AsText(SII), Color.GREEN);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and close &lt; (SI - ((SI - SII) / 2)), \&quot;S3=\&quot; + AsText(SIII), Color.GREEN);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and ShowLevel4 and close &lt; (SII - ((SII - SIII) / 2)), \&quot;S4=\&quot; + AsText(SIV), Color.GREEN);\n\nAddLabel(ChartLabels == 2 and Label and ZeroTest, \&quot;VH=\&quot; + AsText(VH), Color.RED);\nAddLabel(ChartLabels == 2 and Label and ZeroTest, \&quot;POC=\&quot; + AsText(PC), Color.YELLOW);\nAddLabel(ChartLabels == 2 and Label and ZeroTest, \&quot;VL=\&quot; + AsText(VL), Color.GREEN);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero, \&quot;R1=\&quot; + AsText(RI), Color.RED);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero, \&quot;R2=\&quot; + AsText(RII), Color.RED);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero, \&quot;R3=\&quot; + AsText(RIII), Color.RED);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero and ShowLevel4, \&quot;R4=\&quot; + AsText(RIV), Color.RED);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero and ShowPivotPoint, \&quot;PP=\&quot; + AsText(PP), Color.WHITE);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero, \&quot;S1=\&quot; + AsText(SI), Color.GREEN);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero, \&quot;S2=\&quot; + AsText(SII), Color.GREEN);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero, \&quot;S3=\&quot; + AsText(SIII), Color.GREEN);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero and ShowLevel4, \&quot;S4=\&quot; + AsText(SIV), Color.GREEN);\n\nAddLabel(ChartLabels == 3 and Label and VArea and ZeroTest, “InsideValueArea”, Color.WHITE);\nAddLabel(ChartLabels == 3 and Label and VAreaabove and ZeroTest, “AboveValueArea”, Color.GREEN);\nAddLabel(ChartLabels == 3 and Label and VAreabelow and ZeroTest, \&quot;BelowValueArea”, Color.RED);\nAddLabel(!AfterHours and !Chart1 and !HideAfterHoursLabel, \&quot;NoShadowPlotAfterHours\&quot;, Color.ORANGE);\n\n#Chart Bubbles\ninput BubbleLeftSide = yes;\ndef  leftLoc =  if BubbleLeftSide then 1 else -1;#\nAddChartBubble(IsNaN(VH[leftLoc]) and ValueBubbles, VH, VH, Color.RED, no);\nAddChartBubble(IsNaN(PC[leftLoc]) and ValueBubbles, PC, PC, Color.YELLOW, no);\nAddChartBubble(IsNaN(VL[leftLoc]) and ValueBubbles, VL, VL, Color.GREEN, no);\nAddChartBubble(IsNaN(S1[leftLoc]) and PivotBubbles and S1_auto_show, S1, “S1”, Color.WHITE, no);\nAddChartBubble(IsNaN(S2[leftLoc]) and PivotBubbles and S2_auto_show, S2, “S2”, Color.WHITE, no);\nAddChartBubble(IsNaN(S3[leftLoc]) and PivotBubbles and S1_auto_show, S3, “S3”, Color.WHITE, no);\nAddChartBubble(IsNaN(S4[leftLoc]) and PivotBubbles and ShowLevel4 and S4_auto_show, S4, “S4”, Color.WHITE, no);\nAddChartBubble(IsNaN(PP[leftLoc]) and ShowPivotPoint and PivotBubbles, PP, “PP”, Color.WHITE, no);\nAddChartBubble(IsNaN(R1[leftLoc]) and PivotBubbles and R1_auto_show, R1, “R1”, Color.WHITE, no);\nAddChartBubble(IsNaN(R2[leftLoc]) and PivotBubbles and R2_auto_show, R2, “R2”, Color.WHITE, no);\nAddChartBubble(IsNaN(R3[leftLoc]) and PivotBubbles and R3_auto_show, R3, “R3”, Color.WHITE, no);\nAddChartBubble(IsNaN(R4[leftLoc]) and PivotBubbles  and ShowLevel4 and R4_auto_show, R4, “R4”, Color.WHITE, no);\n\n\n#Opening Range Breakout Functions\ndef ORBopen = SecondsTillTime(945) &lt;= 0;\ndef IsMarketOpen = ORBopen and CloseTime2;\ndef FirstBar = If(GetDay()[1] != GetDay(), GetDay() - 1, 0);\ndef OpenRange = SecondsFromTime(945);\ndef PastOpeningRange = OpenRange &gt;= (OrbTime - 15) * 60;\ndef DisplayedHigh = If(high &gt; DisplayedHigh[1] and IsMarketOpen and ShowORB, high, If(IsMarketOpen and !FirstBar, DisplayedHigh[1], high));\ndef DisplayedLow = If(low &lt; DisplayedLow[1] and IsMarketOpen and ShowORB, low, If(IsMarketOpen and !FirstBar, DisplayedLow[1], low));\ndef ORBHi = If(PastOpeningRange, ORBHi[1], DisplayedHigh);\ndef ORBLo  = If(PastOpeningRange, ORBLo[1], DisplayedLow);\nplot ORBHigh = If(Chart1 and PastOpeningRange and IsMarketOpen and ShowORB, ORBHi, Na);\nplot ORBLow  = If(Chart1 and PastOpeningRange and IsMarketOpen and ShowORB, ORBLo, Na);\n\n#Plot Criteria\nORBHigh.SetDefaultColor(Color.MAGENTA);\nORBHigh.SetStyle(Curve.SHORT_DASH);\nORBHigh.HideBubble();\nORBLow.SetDefaultColor(Color.MAGENTA);\nORBLow.SetStyle(Curve.SHORT_DASH);\nORBLow.HideBubble();\nVH.SetDefaultColor(Color.RED);\nPC.SetDefaultColor(Color.YELLOW);\nPC.SetStyle(Curve.LONG_DASH);\nVL.SetDefaultColor(Color.GREEN);\nR4.SetDefaultColor(Color.WHITE);\nR3.SetDefaultColor(Color.WHITE);\nR2.SetDefaultColor(Color.WHITE);\nR1.SetDefaultColor(Color.WHITE);\nPP.SetDefaultColor(Color.WHITE);\nS4.SetDefaultColor(Color.WHITE);\nS3.SetDefaultColor(Color.WHITE);\nS2.SetDefaultColor(Color.WHITE);\nS1.SetDefaultColor(Color.WHITE);\n\n#cloudhigh.SetDefaultColor(Color.RED);\n#cloudlow.SetDefaultColor(Color.GREEN);\nAddLabel(showVAH , \&quot;vah= \&quot; + AsText(VAH), Color.PINK);\nAddLabel(showVAH , \&quot;val= \&quot; + AsText(VAL), Color.LIGHT_GREEN);\nAddLabel(showVAH , \&quot;poc= \&quot; + AsText(POC), Color.LIGHT_ORANGE);\nAddLabel(showVAH , \&quot;pivot= \&quot; + AsText(Pivot), Color.PINK);\nVH.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nPC.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nVL.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nPP.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nR1.SetStyle(Curve.SHORT_DASH);\nR1.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nR2.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nR3.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nR4.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nS1.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nS2.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nS3.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nS4.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\n\n\nR1.SetHiding(R1_auto_show);\nR2.SetHiding(R2_auto_show);\nR3.SetHiding(R3_auto_show);\nR4.SetHiding(R4_auto_show);\nS1.SetHiding(S1_auto_show);\nS2.SetHiding(S2_auto_show);\nS3.SetHiding(S3_auto_show);\nS4.SetHiding(S4_auto_show);\n\n\n\n\ndef opacity_inv ;#= if (opacity &gt;= 0 and opacity &lt;= 100) then 100 - opacity else 50;\nif (no)#show_VA_cloud2\nthen\n{\n   opacity_inv = 1000;\n}\nelse\n\n{\n   opacity_inv = if (opacity &gt;= 0 and opacity &lt;= 100) then 100 - opacity else 50;\n}\n\ndef Vls  = If(Chart2 and ShowCloud2 and VA_low_short &gt; 0, VA_low_short, Na);\ndef Vll  = If(Chart2 and ShowCloud2  and VA_low_long &gt; 0, VA_low_long, Na);\ndef Vhs  = If(Chart2 and ShowCloud2  and VA_high_short &gt; 0, VA_high_short, Na);\ndef Vhl  = If(Chart2 and ShowCloud2  and VA_high_long &gt; 0, VA_high_long, Na);\n\nAddCloud(Vls,  Vll , CreateColor(144 * opacity_inv / 100, 240, 144 * opacity_inv / 100),  CreateColor(144 * opacity_inv / 100, 240, 144 * opacity_inv / 100));\n\nAddCloud(Vhs,   Vhl,  CreateColor(204, 184 * opacity_inv / 100, 202 * opacity_inv / 100),   CreateColor(204, 184 * opacity_inv / 100, 202 * opacity_inv / 100));\n\n\n#S5.SetHiding(!S5_auto_show);\n#AddLabel(yes , \&quot;R44= \&quot; + (S5_auto_show), Color.pink);\n#AddLabel(yes , \&quot;R5= \&quot; + ((RIII + ((RIV - SIII) / 2))), Color.pink);&quot;,name=&quot;_27529bda_67d5_4abb_8369_e61450a2de3a&quot;}){inputsMap:TreeMap13{^(&quot;PivotBubbles&quot;,&lt;F),^(&quot;PivotTimeFrame&quot;,&quot;MONTH&quot;),^(&quot;ProfileTimeFrame&quot;,&quot;MONTH&quot;),^(&quot;ShowCloud1&quot;,&lt;F),^(&quot;ShowLevel4&quot;,&lt;F),^(&quot;ShowLevel5&quot;,&lt;F),^(&quot;ShowPivotPoint&quot;,&lt;F),^(&quot;ShowR1&quot;,&lt;F),^(&quot;ShowR2&quot;,&lt;F),^(&quot;ShowR3&quot;,&lt;F),^(&quot;ShowS1&quot;,&lt;F),^(&quot;ShowS2&quot;,&lt;F),^(&quot;ShowS3&quot;,&lt;F),^(&quot;ValueBubbles&quot;,&lt;F)},inputsMap=@TreeMap13,plots{4:{hiding=&lt;T},5:{lineStyle=1},6:{hiding=&lt;T},7:{hiding=&lt;T},8:{hiding=&lt;T},12:{lineStyle=1}}})}},!get(#%6.SubgraphId(&quot;Volume&quot;)){height=80},^(#%6.SubgraphId(&quot;Subgraph3&quot;),#%6.SubgraphStorableModel{height=80,storableIndicators.+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence{body=&quot;declare lower;\n\n################\n\n\n\n\n\n#######\n\n\n\n\n\n\ninput price = close;\n\ninput superfast_length = 8;\n\ninput fast_length = 13;\n\ninput slow_length = 21;\n\ninput displace = 0;\n\n################\ninput averageType = AverageType.EXPONENTIAL;\n\ndef mov_avg8 = MovingAverage(averageType, price[-displace], superfast_length);\n\ndef mov_avg13 = MovingAverage(averageType, price[-displace], fast_length);\n\ndef mov_avg21 = MovingAverage(averageType, price[-displace], slow_length);\n \n#moving averages\n\ndef Superfast = mov_avg8;\n\ndef Fast = mov_avg13;\n\ndef Slow = mov_avg21;\n\n\ndef buy = mov_avg8 &gt; mov_avg13 and mov_avg13 &gt; mov_avg21 and low &gt; mov_avg8;\n\ndef stopbuy = mov_avg8 &lt;= mov_avg13;\n\ndef buynow = !buy[1] and buy;\n\ndef buysignal = CompoundValue(1, if buynow and !stopbuy then 1 else if buysignal[1] == 1 and stopbuy then 0 else buysignal[1], 0);\n\n\ndef Buy_Signal = buysignal[1] == 0 and buysignal == 1;\n\ndef Momentum_Down = buysignal[1] == 1 and buysignal == 0;\n\n\ndef sell = mov_avg8 &lt; mov_avg13 and mov_avg13 &lt; mov_avg21 and high &lt; mov_avg8;\n\ndef stopsell = mov_avg8 &gt;= mov_avg13;\n\ndef sellnow = !sell[1] and sell;\n\ndef sellsignal = CompoundValue(1, if sellnow and !stopsell then 1 else if sellsignal[1] == 1 and stopsell then 0 else sellsignal[1], 0);\n\n\ndef Sell_Signal = sellsignal[1] == 0 and sellsignal;\n\ndef Momentum_Up = sellsignal[1] == 1 and sellsignal == 0;\n \n# when using this as a custom scan, change the word plot to def\n# then remove the \'#\' from in front of one of the \&quot;plot Scan\&quot; statements below\ndef Colorbars = if buysignal == 1 then 1 else if sellsignal == 1 then -1 else if buysignal == 0 or sellsignal == 0 then 0 else 0;\n\n# use this first Scan plot for SLM Ribbon Momentum UP\n#plot Scan = if Colorbars == 1 then yes else no;\n\n# use this second Scan plot for SLM Ribbon Momentum DOWN\n#plot Scan = if Colorbars == -1 then yes else no;\n\n\n\ninput length = 14;\n\ndef MaxBound = HighestWeighted(high, length, LinearRegressionSlope(price = high, length = length));\ndef MinBound = LowestWeighted(low, length, LinearRegressionSlope(price = low, length = length));\ndef diff = MaxBound - MinBound;\n\nplot PROSC = if diff != 0 then 100 * (close - MinBound) / diff else 0;\nplot OverBought = 75;\nplot OverSold = 25;\nplot z =50;\nz.SetDefaultColor(color.gray);\n\nPROSC.SetDefaultColor(GetColor(8));\nOverBought.SetDefaultColor(GetColor(5));\nOverSold.SetDefaultColor(GetColor(5));\n\n\n###############\n\ndef Colorbars1 = if buysignal ==1 then 1 else if sellsignal ==1 then 2 else if buysignal ==0 or sellsignal==0 then 3 else 0;\n\n\n\nPROSC.definecolor(\&quot;Buy_Signal_Bars\&quot;, color.dark_green);\n\nPROSC.definecolor(\&quot;Sell_Signal_Bars\&quot;, color.red);\n\nPROSC.definecolor(\&quot;Neutral\&quot;, color.plum);\n\nPROSC.AssignValueColor(if Colorbars1 ==1 then PROSC.color(\&quot;buy_signal_bars\&quot;) else if colorbars1 ==2 then PROSC.color(\&quot;Sell_Signal_bars\&quot;) else  PROSC.color(\&quot;neutral\&quot;));\nPROSC.setlineWeight(2);\nOverBought.hide();\nOverSold.hide();\n\n\n\n\n\nAddCloud(0, OverSold, Color.RED, Color.light_green);\nAddCloud(OverBought, 100, Color.Green, Color.light_red);\n\n\nplot UpSignal = if (buysignal and PROSC crosses above OverSold) then OverSold else Double.NaN;\nplot DownSignal = if (sellsignal and PROSC crosses below OverBought) then OverBought else Double.NaN;\nplot DownSignal2 = if (( Momentum_Down or sellsignal) and PROSC  crosses below OverSold) then OverSold else Double.NaN;\n\nplot UpSignal2 = if ( Momentum_Up and PROSC&gt;= overbought) then overbought else Double.NaN;\ninput showBreakoutSignals =yes;\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\n\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\nUpSignal2.SetDefaultColor(Color.plum);\nUpSignal2.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\n\nDownSignal2.SetDefaultColor(Color.plum);\nDownSignal2.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\n\n\n\n&quot;,name=&quot;_bc0d152e_88dc_44b4_99a7_78acd8502e84&quot;}){hidden=&lt;T,inputsMap:TreeMap14{^(&quot;price&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap14})}),^(#%6.SubgraphId(&quot;Subgraph7&quot;),#%6.SubgraphStorableModel{height=82,storableIndicators.+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence{body=&quot;# RSI-Laguerre Self Adjusting With Fractal Energy Gaussian Price Filter\n# Mobius\n# V01.12.2016\n# Both Fractal Energy and RSI are plotted. RSI in cyan and FE in yellow. Look for trend exhaustion in the FE and a reversal of RSI or Price compression in FE and an RSI reversal.\n\ndeclare lower;\n\n#Inputs: \ninput nFE = 8;#hint nFE: length for Fractal Energy calculation. \ninput AlertOn = no;\ninput Glength  = 13;\ninput betaDev =  8;\ninput data = close;\n\ndef w = (2 * Double.Pi / Glength);\ndef beta = (1 - Cos(w)) / (Power(1.414, 2.0 / betaDev) - 1 );\ndef alpha = (-beta + Sqrt(beta * beta + 2 * beta));\ndef Go = Power(alpha, 4) * open + \n             4 * (1 – alpha) * Go[1] – 6 * Power( 1 - alpha, 2 ) * Go[2] + \n             4 * Power( 1 - alpha, 3 ) * Go[3] - Power( 1 - alpha, 4 ) * Go[4];\ndef Gh = Power(alpha, 4) * high + \n             4 * (1 – alpha) * Gh[1] – 6 * Power( 1 - alpha, 2 ) * Gh[2] + \n             4 * Power( 1 - alpha, 3 ) * Gh[3] - Power( 1 - alpha, 4 ) * Gh[4];\ndef Gl = Power(alpha, 4) * low + \n             4 * (1 – alpha) * Gl[1] – 6 * Power( 1 - alpha, 2 ) * Gl[2] + \n             4 * Power( 1 - alpha, 3 ) * Gl[3] - Power( 1 - alpha, 4 ) * Gl[4];\ndef Gc = Power(alpha, 4) * data + \n             4 * (1 – alpha) * Gc[1] – 6 * Power( 1 - alpha, 2 ) * Gc[2] + \n             4 * Power( 1 - alpha, 3 ) * Gc[3] - Power( 1 - alpha, 4 ) * Gc[4];\n# Variables:\ndef o;\ndef h;\ndef l;\ndef c;\ndef CU1;\ndef CU2;\ndef CU;\ndef CD1;\ndef CD2;\ndef CD;\ndef L0;\ndef L1;\ndef L2;\ndef L3;\nplot RSI;\nplot OS;\nplot OB;\nplot M;\n\n# Calculations\no = (Go + Gc[1]) / 2;\nh = Max(Gh, Gc[1]);\nl = Min(Gl, Gc[1]);\nc = (o + h + l + Gc) / 4;\nplot gamma = Log(Sum((Max(Gh, Gc[1]) - Min(Gl, Gc[1])), nFE) / \n        (Highest(Gh, nFE) - Lowest(Gl, nFE)))\n            / Log(nFE);\ngamma.SetDefaultColor(Color.YELLOW);\nL0 = (1 – gamma) * Gc + gamma * L0[1];\nL1 = -gamma * L0 + L0[1] + gamma * L1[1];\nL2 = -gamma * L1 + L1[1] + gamma * L2[1];\nL3 = -gamma * L2 + L2[1] + gamma * L3[1];\nif L0 &gt;= L1\nthen {\n    CU1 = L0 - L1;\n    CD1 = 0;\n} else {\n    CD1 = L1 - L0;\n    CU1 = 0;\n}\nif L1 &gt;= L2\nthen {\n    CU2 = CU1 + L1 - L2;\n    CD2 = CD1;\n} else {\n    CD2 = CD1 + L2 - L1;\n    CU2 = CU1;\n}\nif L2 &gt;= L3\nthen {\n    CU = CU2 + L2 - L3;\n    CD = CD2;\n} else {\n    CU = CU2;\n    CD = CD2 + L3 - L2;\n}\n\nRSI = if CU + CD &lt;&gt; 0 then CU / (CU + CD) else 0;\nRSI.SetDefaultColor(Color.CYAN);\nOS = if IsNaN(c) then Double.NaN else 0.2;\nOS.SetDefaultColor(Color.GRAY);\nOS.HideBubble();\nOS.HideTitle();\nOB = if IsNaN(c) then Double.NaN else 0.8;\nOB.SetDefaultColor(Color.GRAY);\nOB.HideBubble();\nOB.HideTitle();\nM = if IsNaN(c) then Double.NaN else 0.5;\nM.SetStyle(Curve.LONG_DASH);\nM.SetDefaultColor(Color.GRAY);\nM.HideBubble();\nM.HideTitle();\nplot FEh = if IsNaN(c) then Double.NaN else .618;\nFEh.SetStyle(Curve.SHORT_DASH);\nFEh.HideBubble();\nFEh.SetDefaultColor(Color.GRAY);\nFEh.HideTitle();\nplot FEl = if IsNaN(c) then Double.NaN else .382;\nFEl.SetStyle(Curve.SHORT_DASH);\nFEl.SetDefaultColor(Color.GRAY);\nFEl.HideBubble();\nFEl.HideTitle();\nAddCloud(0, OS, Color.RED, Color.GREEN);\nAddCloud(OB, 1, Color.GREEN, Color.RED);\nAlert(AlertOn and RSI crosses below .8, \&quot;\&quot;, Alert.BAR, Sound.Bell);\nAlert(AlertOn and RSI crosses above .2, \&quot;\&quot;, Alert.BAR, Sound.Bell);\n\n#######\n\n#SLIM ribon\ninput price = close;\n\ninput superfast_length =4;\n\ninput fast_length = 7;\n\ninput slow_length = 21;\n\ninput displace = 0;\n\n################\ninput averageTypeSuperfast = AverageType.simple;\ninput averageTypefast = AverageType.simple;\ninput averageTypeSlow = AverageType.EXPONENTIAL;\n\ninput  priceSupperFast = hlc3 ;\ninput priceFast  = close ;\ninput priceSlow  = close ;\n\ndef mov_avg_superFast = MovingAverage(averageTypeSuperfast, priceSupperFast[-displace], superfast_length);\ndef mov_avg_Fast = MovingAverage(averageTypefast, priceFast[-displace], fast_length);\ndef mov_avg_Slow = MovingAverage(averageTypeSlow, priceSlow[-displace], slow_length);\n\n#moving averages\ndef Superfast = mov_avg_superFast;\ndef Fast = mov_avg_Fast;\ndef Slow = mov_avg_Slow;\n\n################################\ndef buy = mov_avg_superFast &gt; mov_avg_Fast and mov_avg_Fast &gt; mov_avg_Slow and low &gt; mov_avg_superFast;\n\ndef stopbuy = mov_avg_superFast &lt;= mov_avg_Fast;\n\ndef buynow = !buy[1] and buy;\n\ndef buysignal = CompoundValue(1, if buynow and !stopbuy then 1 else if buysignal[1] == 1 and stopbuy then 0 else buysignal[1], 0);\n\n\ndef Buy_Signal = buysignal[1] == 0 and buysignal == 1;\n\ndef Momentum_Down = buysignal[1] == 1 and buysignal == 0;\n\n\ndef sell = mov_avg_superFast &lt; mov_avg_Fast and mov_avg_Fast &lt; mov_avg_Slow and high &lt; mov_avg_superFast;\n\ndef stopsell = mov_avg_superFast &gt;= mov_avg_Fast;\n\n\n\n###########################\ndef sellnow = !sell[1] and sell;\n\ndef sellsignal = CompoundValue(1, if sellnow and !stopsell then 1 else if sellsignal[1] == 1 and stopsell then 0 else sellsignal[1], 0);\n\n\ndef Sell_Signal = sellsignal[1] == 0 and sellsignal;\n\ndef Momentum_Up = sellsignal[1] == 1 and sellsignal == 0;\n \n# when using this as a custom scan, change the word plot to def\n# then remove the \'#\' from in front of one of the \&quot;plot Scan\&quot; statements below\ndef Colorbars = if buysignal == 1 then 1 else if sellsignal == 1 then -1 else if buysignal == 0 or sellsignal == 0 then 0 else 0;\n\n# use this first Scan plot for SLM Ribbon Momentum UP\n#plot Scan = if Colorbars == 1 then yes else no;\n\n# use this second Scan plot for SLM Ribbon Momentum DOWN\n#plot Scan = if Colorbars == -1 then yes else no;\n\ninput length = 19;\n\ndef HMA = MovingAverage(AverageType.HULL, price, length)[-displace];\ndef HMA_Up=  HMA &gt; HMA[1];\ndef HMA_Down =! HMA_UP;\n\n###############\n\n#def Colorbars1 = if buysignal == 1 then 1 else if sellsignal == 1 then 2 else if buysignal == 0 or sellsignal == 0 then 3 else 0;\n\n\n\nRSI.definecolor(\&quot;Buy\&quot;, color.dark_green);\n\n\nRSI.definecolor(\&quot;Sell\&quot;, color.red);\n\nRSI.DefineColor(\&quot;Neutral\&quot;, Color.PLUM);\n#RSI.DefineColor(\&quot;NeutralDown\&quot;, Color.orange);\nRSI.definecolor(\&quot;HullMA_up\&quot;, color.blue);\n\nRSI.definecolor(\&quot;HullMA_down\&quot;, color.orange);\n\nRSI.AssignValueColor(if buysignal and HMA_Up then RSI.color(\&quot;Buy\&quot;) else if buysignal and !HMA_Up then RSI.color(\&quot;HullMA_down\&quot;) else if sellsignal and HMA_Down  then RSI.color(\&quot;Sell\&quot;) else  if sellsignal and !HMA_Down  then RSI.color(\&quot;HullMA_up\&quot;) else  RSI.color(\&quot;neutral\&quot;));;#\n# if Momentum_Up then  RSI.color(\&quot;neutralUp\&quot;) else  RSI.color(\&quot;neutraldown\&quot;));\n\n\n\n\n####$$$$$$$$$$$$$$$$\n###############\n\n\n\n\nplot UpSignal = if (buysignal and RSI crosses above OS) then RSI-0.1 else Double.NaN;\nplot DownSignal = if (sellsignal and RSI crosses below OB) then RSI+0.1 else Double.NaN;\ninput showBreakoutSignals =yes;\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\n\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\n\n\n\n\n\n\n\n\n\n# End Code RSI_Laguerre Self Adjusting with Fractal Energy&quot;,name=&quot;_94f3daa4_27de_42e1_9e1c_1f3e66613988&quot;}){alerts:LocalAlertArray1,alerts=@LocalAlertArray1,inputsMap:TreeMap15{^(&quot;data&quot;,&quot;CLOSE&quot;),^(&quot;price&quot;,&quot;CLOSE&quot;),^(&quot;priceFast&quot;,&quot;CLOSE&quot;),^(&quot;priceSlow&quot;,&quot;CLOSE&quot;),^(&quot;priceSupperFast&quot;,&quot;(H+L+C)/3&quot;)},inputsMap=@TreeMap15,plots{0:{lineWeight=3}}})}),^(#%6.SubgraphId(&quot;Subgraph9&quot;),#%6.SubgraphStorableModel{height=81,storableIndicators.+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence{body=&quot;#converted from mobisu macd to ppo\n# this is actually macd and sqz indicator in one\n# added pivots\n\ndeclare lower;\n\ninput fastPeriod   = 12; #9/18/6 for 5m\ninput slowPeriod   = 26;\ninput signalPeriod = 9;\ninput price        = close;\ninput show = yes;\n\n\ndef fastEma   = ExpAverage( price, fastPeriod );\ndef slowEma   = ExpAverage( price, slowPeriod );\ndef periodOK  = fastPeriod &lt; slowPeriod;\nAddLabel( !periodOK, \&quot;ERROR: fastPeriod MUST be less than slowPeriod\&quot; );\ndef _ppo      = if periodOK then ((fastEma - slowEma) / slowEma) * 100 else 0;\ndef _signal   = ExpAverage( _ppo, signalPeriod );\n\n# generic plots wiht colors\nplot pmain   = _ppo;\npmain.SetDefaultColor( Color.BLUE );\npmain.SetLineWeight(2);\npmain.AssignValueColor(if pmain &lt; 0 and pmain &lt; pmain[1]  then Color.RED\n                       else if pmain &lt; 0 and  pmain &gt; pmain[1] then Color.DARK_GREEN\n                       else if pmain &gt; 0 and pmain &gt; pmain[1] then Color.GREEN\n                       else Color.DARK_RED);\npmain.HideBubble();\n\nplot mainEma   = _signal;\nmainEma.SetDefaultColor( Color.RED );\nmainEma.HideBubble();\nAddCloud(pmain, mainEma, Color.GREEN, Color.RED);\n\n#diff as histogram\nplot diff    = _ppo - _signal;\ndiff.SetDefaultColor(GetColor(5));\ndiff.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);\ndiff.SetLineWeight(3);\ndiff.DefineColor(\&quot;Positive and Up\&quot;, Color.GREEN);\ndiff.DefineColor(\&quot;Positive and Down\&quot;, Color.DARK_GREEN);\ndiff.DefineColor(\&quot;Negative and Down\&quot;, Color.RED);\ndiff.DefineColor(\&quot;Negative and Up\&quot;, Color.DARK_RED);\ndiff.AssignValueColor(if diff &gt;= 0 then if diff &gt; diff[1] then diff.Color(\&quot;Positive and Up\&quot;) else diff.Color(\&quot;Positive and Down\&quot;) else if diff &lt; diff[1] then diff.Color(\&quot;Negative and Down\&quot;) else diff.Color(\&quot;Negative and Up\&quot;));\n\n\n#mobius divergence calc\ndef pmainh = CompoundValue(1, \n            if pmain &lt; 0 then Double.NaN\n            else if pmain crosses above 0  then pmain\n            else if pmain &gt; 0 and  pmain &gt; pmainh[1]\n            then pmain else pmainh[1], 0);\n\ndef Valueh = CompoundValue(1, \n             if pmain &lt; 0 then Double.NaN\n             else if pmain crosses above 0  then high\n             else if pmain &gt; 0 and high &gt; Valueh[1] then high\n             else Valueh[1], 0);\n\nplot divLowSignal = if pmain &gt; 0 and  high &gt; Valueh[1] and pmain &lt; pmainh[1] then 0\n                 else Double.NaN;\ndivLowSignal.SetPaintingStrategy(PaintingStrategy.SQUARES);\ndivLowSignal.SetLineWeight(5);\ndivLowSignal.SetDefaultColor(Color.dark_orange);\n\ndef pmainL = CompoundValue(1, if pmain &gt; 0 then Double.NaN\n                             else if pmain crosses below 0  then pmain\n                             else if pmain &lt; 0 and pmain &lt; pmainl[1] then pmain\n                             else pmainl[1], 0);\n\ndef ValueL = CompoundValue(1, if pmain &gt; 0  then Double.NaN\n                              else if pmain crosses below 0 then low\n                              else if pmain &lt; 0 and low &lt; Valuel[1] then low\n                              else Valuel[1], 0);\n\nplot divUpSignall = if pmain &lt; 0 and   low &lt; Valuel[1] and pmain &gt; pmainl[1] then 0\n                 else Double.NaN;\ndivupSignall.SetPaintingStrategy(PaintingStrategy.SQUARES);\ndivUpSignall.SetLineWeight(5);\ndivUPSignall.SetDefaultColor(Color.blue);\n\n\n\n#zeroline\nplot zeroLine = 0;\nzeroLine.SetPaintingStrategy(PaintingStrategy.LINE);\nzeroLine.SetLineWeight(1);\nzeroLine.SetDefaultColor(Color.BLACK);\n\n\n#pivots\n\ndef ptrend = pmain;\ndef prange = 2;\ndef pivotHigh = if IsNaN(ptrend[-1]) then 0  else Lowest(ptrend, prange)[1] &gt; ptrend and Lowest(ptrend, prange)[-prange] &gt; ptrend ;\ndef pivotLow =  if  IsNaN(ptrend[-1]) then 0  else Highest(ptrend, prange)[1] &lt; ptrend and Highest(ptrend, prange)[-prange] &lt; ptrend ;\n#study\nplot plotPH = if pivotHigh and show then ptrend else Double.NaN;\nplotPH.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\nplotPH.SetDefaultColor(Color.GREEN);\n\nplot phline = if pivotHigh then pmain else Double.NaN;\nphline.SetDefaultColor(Color.DARK_GREEN);\nphline.EnableApproximation();phline.Hide();\n#\nplot plotPL = if pivotLow and show then ptrend else Double.NaN;\nplotPL.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\nplotPL.SetDefaultColor(Color.RED);\n\nplot plline = if pivotLow then pmain else Double.NaN;\nplline.SetDefaultColor(Color.RED);\nplline.EnableApproximation(); plline.hide();&quot;,name=&quot;_58fa56d7_7ed3_4ff5_b1a8_d0c87dfe1afc&quot;}){inputsMap:TreeMap16{^(&quot;price&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap16})}),^(#%6.SubgraphId(&quot;Subgraph11&quot;),#%6.SubgraphStorableModel{height=80,storableIndicators.+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence:ScriptEssence0{body=&quot;# OBV/OBV_MA  by MerryDay 5/24/20\n#When the OBV (On Balance Volume) crosses OBV’s 20-period moving average, the divergence signal of a trend reversal is confirmed. While research indicates a default of 20 is norm, I have been using a 34 period.  The difference is slight.\n# If the OBV is greater than the OBV ma then a green cloud appears under the OBV.\n\ndeclare lower;\ninput length = 20; #default = 20\ninput price = close;\n\nplot OBV = TotalSum(Sign(price - price[1]) * volume);\nplot OBVma = Average(OBV, length);\n\ndef aboveMA   = OBV &gt;= OBVma ;\n\n\n## LIPSTICK ##\nDefineGlobalColor(\&quot;LabelGreen\&quot;, CreateColor(0, 190, 0)) ;\nDefineGlobalColor(\&quot;PaleGreen\&quot;, CreateColor(180, 220, 180)) ;\nDefineGlobalColor(\&quot;PaleRed\&quot;, CreateColor (220, 200, 200)) ;\nDefineGlobalColor(\&quot;DullGold\&quot;, CreateColor(220, 220, 128)) ;\nDefineGlobalColor(\&quot;BlueJeans\&quot;, CreateColor(0, 150, 200)) ;\nOBVma.SetDefaultColor(GlobalColor(\&quot;DullGold\&quot;));\nOBVma.SetLineWeight(3);\nOBVma.HideBubble();\nOBVma.HideTitle();\n\nOBV.SetPaintingStrategy(PaintingStrategy.LINE_VS_TRIANGLES);\nOBV.SetLineWeight(2);\nOBV.HideBubble();\nOBV.HideTitle();\nOBV.DefineColor(\&quot;Up\&quot;, GlobalColor(\&quot;LabelGreen\&quot;));\nOBV.DefineColor(\&quot;Weak\&quot;, Color.LIGHT_GRAY);\nOBV.DefineColor(\&quot;Down\&quot;, GlobalColor(\&quot;PaleRed\&quot;));\nOBV.AssignValueColor(if OBV &gt; OBVma  then OBV.Color(\&quot;Up\&quot;) else OBV.Color(\&quot;Down\&quot;));\n\nplot OBVlow = if  OBV crosses below OBVma then 1 else 0;\nOBVlow.hide();\n\nplot crossup = if OBV crosses above OBVma then OBV else double.NaN;\ncrossup.HideBubble() ;\ncrossup.HideTitle() ;\ncrossup.SetPaintingStrategy(PaintingStrategy.TRIANGLES);\ncrossup.SetLineWeight(5);\ncrossup.SetDefaultColor(color.blue) ;\nplot crossdown = if OBV crosses below OBVma then OBV else double.NaN;\ncrossdown.HideBubble() ;\ncrossdown.HideTitle() ;\ncrossdown.SetPaintingStrategy(PaintingStrategy.TRIANGLES);\ncrossdown.SetLineWeight(5);\ncrossdown.SetDefaultColor(color.pink) ;\n\nAddCloud(OBV, OBVma, Color.LIGHT_GREEN, Color.PINK);\n\n#Alert(crosses_above_MA, \&quot;What\'s going to happen?\&quot; + GetSymbol(), Alert.BAR, Sound.bell);\nDefineGlobalColor(\&quot;MyCyan\&quot;, CreateColor(150, 0, 255)) ;\nDefineGlobalColor(\&quot;Sell\&quot;, CreateColor(255, 150, 0)) ;\n\n\n# End of OBV/OBV_MA &quot;,name=&quot;_5a6a53b8_41ce_3ef6_a10e_07a88a720b77&quot;}){hidden=&lt;T,inputsMap:TreeMap17{^(&quot;price&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap17})}),^(#%6.SubgraphId(&quot;Subgraph41&quot;),#%6.SubgraphStorableModel{height=81,storableIndicators.+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence:ScriptEssence1{body=&quot;#\n\ndeclare lower;\n\n\n\n###############################\ninput showlable=yes;\n\ninput pricePpm1 = close;\ninput pricePpm2 = close;\ninput pricePpm3 = close;\ninput ppmiSmooth =3;\ninput averageTypePpmiSmooth = AverageType.simple;\n#input signalPeriod = 1;\ndef lookback = 1;\n\ninput ppm1_length = 10;\ninput ppm2_length = 21;\ninput ppm3_length = 40;\ninput fast_length = 10;\ninput slow_length =21;\ndef displace = 0;\ninput averageTypePpm = AverageType.simple;\ninput averageTypefast = AverageType.simple;\ninput averageTypeSlow = AverageType.simple;;# AverageType.EXPONENTIAL;\n#input showMovingAvgLable =yes;\n\n\ndef movAvg_ppm1 = MovingAverage(averageTypePpm, pricePpm1, ppm1_length);\n#def sign = MovingAverage(averageTypePpm, movAvg_ppm1[-displace], signalPeriod);\ndef movAvg_ppm2 = MovingAverage(averageTypePpm, pricePpm2, ppm2_length);\ndef movAvg_ppm3 = MovingAverage(averageTypePpm, pricePpm3, ppm3_length);\n\n \n\n\n \n\n#moving averages\n\ndef   ppm1_ =100*( movAvg_ppm1-movAvg_ppm1[lookback])/( movAvg_ppm1); \ndef   ppm2_ =100*( movAvg_ppm2-movAvg_ppm2[lookback])/( movAvg_ppm2); \ndef   ppm3_ =100*( movAvg_ppm3-movAvg_ppm3[lookback])/(movAvg_ppm3); \n#Plot ppm1 =MovingAverage(AverageType.EXPONENTIAL,ppm[-displace], signalPeriod);\n\n\n\nplot ppm1= MovingAverage(averageTypePpmiSmooth,ppm1_,ppmiSmooth);\nplot ppm2=  MovingAverage(averageTypePpmiSmooth,ppm2_,ppmiSmooth);\nplot ppm3=  MovingAverage(averageTypePpmiSmooth,ppm3_,ppmiSmooth);\n\n\n\n\n\n\n\n\n\n\n\n\n#####\n\n\n\n\n\n\n\n#AddLabel(yes, \&quot; ppm1\&quot;, Color.white);\nplot ppm_d1  = MovingAverage(averageTypefast, ppm1[-displace], fast_length);\nplot ppm_d2 = MovingAverage(averageTypefast, ppm1[-displace], slow_length);\n\ninput showPpmDivLable=yes;\n\nAddLabel(showPpmDivLable, \&quot; ppm1= \&quot;+  roundup(ppm1,3), if ppm1&gt; 0 then Color.LIGHT_GREEN else if ppm1&lt; 0 then color.light_red else Color.Light_GRAY);\nAddLabel(showPpmDivLable, \&quot; d1= \&quot;+  roundup(ppm_d1,3),  Color.green);\nAddLabel(showPpmDivLable, \&quot; d2= \&quot;+  roundup(ppm_d2,3),  Color.cyan);\n\n\n\n#plot ppm1_d1 = MovingAverage(averageTypefast, ppm1[-displace], fast_length);\n#plot ppm1_d2 = MovingAverage(averageTypefast, ppm1[-displace], slow_length);\n\nppm1.setdefaultColor(color.light_ORANGE);\nppm2.setdefaultColor(color.violet);\nppm3.setdefaultColor(color.yellow);\n\nppm2.Hide();\nppm3.Hide();\nppm_d1.setdefaultColor(color.green);\nppm_d2.setdefaultColor(color.cyan);\n\n\nAddLabel(showlable, \&quot;  \&quot;+ ppm1_length+ \&quot;MAvg\&quot; ,ppm1.TakeValueColor ());\nAddLabel(showlable,  astext(movAvg_ppm1), if ppm1&lt; close then Color.LIGHT_GREEN else if ppm1&gt; close then color.light_red else Color.Light_GRAY);\ndef maDif= close- movAvg_ppm1;\n\nAddLabel(showlable and maDif&gt;0, \&quot; +\&quot;+astext(maDif),  Color.LIGHT_GREEN );\nAddLabel(showlable and maDif&lt;=0, \&quot; \&quot;+astext(maDif),  if maDif&lt; 0 then color.LIGHT_red else Color.LIGHT_GRAY);\n\nAddLabel(showlable, \&quot;  \&quot;+ ppm2_length+ \&quot;MAvg\&quot; ,ppm2.TakeValueColor ());\nAddLabel(showlable,  astext(movAvg_ppm2), if ppm2&lt; close then Color.LIGHT_GREEN else if ppm2&gt; close then color.light_red else Color.Light_GRAY);\n\n\nAddLabel(showlable, \&quot;  \&quot;+ ppm3_length+ \&quot;MAvg\&quot; ,ppm3.TakeValueColor ());\nAddLabel(showlable,  astext(movAvg_ppm3), if ppm3&lt; close then Color.LIGHT_GREEN else if ppm3&gt; close then color.light_red else Color.Light_GRAY);\n\n#AddLabel(showlable, \&quot;MA \&quot; + ppm_length + \&quot;=\&quot;+ astext(movAvg_ppm1), if movAvg_ppm1 &gt; close  then Color.RED else if movAvg_ppm1 &lt; close then  Color.GREEN else Color.GRAY);\n\nAddLabel(yes, \&quot; ppm1= \&quot;+  roundup(ppm1,3), if ppm1&gt; 0 then Color.LIGHT_GREEN else if ppm1&lt; 0 then color.light_red else Color.Light_GRAY);\nAddLabel(yes, \&quot; ppm2= \&quot; +   roundup(ppm2,3), if ppm2&gt; 0 then Color.LIGHT_GREEN else if ppm2&lt; 0 then color.light_red else Color.Light_GRAY);\nAddLabel(yes, \&quot; ppm3= \&quot;+  roundup(ppm3,3), if ppm3&gt; 0 then Color.LIGHT_GREEN else if ppm3&lt; 0 then color.light_red else Color.Light_GRAY);\n\n\n##################################\n\n&quot;,name=&quot;_41afd57b_6e78_4ddc_afbf_2d19525412ae&quot;}){inputsMap:TreeMap18{^(&quot;ppmiSmooth&quot;,1),^(&quot;pricePpm1&quot;,&quot;CLOSE&quot;),^(&quot;pricePpm2&quot;,&quot;CLOSE&quot;),^(&quot;pricePpm3&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap18})}),^(#%6.SubgraphId(&quot;Subgraph43&quot;),#%6.SubgraphStorableModel{height=96,storableIndicators.+(!%7.CompiledStudy.resolveStudy(@ScriptEssence1){hidden=&lt;T,inputsMap:TreeMap19{^(&quot;averageTypePpmiSmooth&quot;,&quot;HULL&quot;),^(&quot;ppmiSmooth&quot;,@Integer0),^(&quot;pricePpm1&quot;,&quot;CLOSE&quot;),^(&quot;pricePpm2&quot;,&quot;CLOSE&quot;),^(&quot;pricePpm3&quot;,&quot;CLOSE&quot;),^(&quot;showlable&quot;,&lt;F)},inputsMap=@TreeMap19})}),^(#%6.SubgraphId(&quot;Subgraph45&quot;),#%6.SubgraphStorableModel{height=81,storableIndicators.+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence{body=&quot;#\n\ndeclare lower;\n\n\n\n###############################\ninput showlable=yes;\n\ninput pricePpm1 = close;\ninput pricePpm2 = close;\ninput pricePpm3 = close;\ninput ppmiSmooth =3;\ninput averageTypePpmiSmooth = AverageType.simple;\n#input signalPeriod = 1;\ndef lookback = 1;\n\ninput ppm1_length = 10;\ninput ppm2_length = 21;\ninput ppm3_length = 40;\ninput fast_length = 10;\ninput slow_length =21;\ndef displace = 0;\ninput averageTypePpm = AverageType.simple;\ninput averageTypefast = AverageType.simple;\ninput averageTypeSlow = AverageType.simple;;# AverageType.EXPONENTIAL;\n#input showMovingAvgLable =yes;\n\n\ndef movAvg_ppm1 = MovingAverage(averageTypePpm, pricePpm1, ppm1_length);\n#def sign = MovingAverage(averageTypePpm, movAvg_ppm1[-displace], signalPeriod);\ndef movAvg_ppm2 = MovingAverage(averageTypePpm, pricePpm2, ppm2_length);\ndef movAvg_ppm3 = MovingAverage(averageTypePpm, pricePpm3, ppm3_length);\n\n \n\n\n \n\n#moving averages\n\ndef   ppm1_ =100*( movAvg_ppm1-movAvg_ppm1[lookback])/( movAvg_ppm1); \ndef   ppm2_ =100*( movAvg_ppm2-movAvg_ppm2[lookback])/( movAvg_ppm2); \ndef   ppm3_ =100*( movAvg_ppm3-movAvg_ppm3[lookback])/(movAvg_ppm3); \n#Plot ppm1 =MovingAverage(AverageType.EXPONENTIAL,ppm[-displace], signalPeriod);\n\n\n\nplot ppm1= MovingAverage(averageTypePpmiSmooth,ppm1_,ppmiSmooth);\nplot ppm2=  MovingAverage(averageTypePpmiSmooth,ppm2_,ppmiSmooth);\nplot ppm3=  MovingAverage(averageTypePpmiSmooth,ppm3_,ppmiSmooth);\n\n#AddLabel(yes, \&quot; ppm2\&quot;, Color.white);\nplot ppm_d1  = MovingAverage(averageTypefast, ppm2[-displace], fast_length);\nplot ppm_d2 = MovingAverage(averageTypefast, ppm2[-displace], slow_length);\n\ninput showPpmDivLable=yes;\n\nAddLabel(showPpmDivLable, \&quot; ppm2= \&quot;+  roundup(ppm2,3), if ppm2&gt; 0 then Color.LIGHT_GREEN else if ppm2&lt; 0 then color.light_red else Color.Light_GRAY);\nAddLabel(showPpmDivLable, \&quot; d1= \&quot;+  roundup(ppm_d1,3),  Color.green);\nAddLabel(showPpmDivLable, \&quot; d2= \&quot;+  roundup(ppm_d2,3),  Color.cyan);\n\n\n\n#plot ppm1_d1 = MovingAverage(averageTypefast, ppm1[-displace], fast_length);\n#plot ppm1_d2 = MovingAverage(averageTypefast, ppm1[-displace], slow_length);\n\nppm2.setdefaultColor(color.light_ORANGE);\nppm1.setdefaultColor(color.violet);\nppm3.setdefaultColor(color.yellow);\n\nppm1.Hide();\nppm3.Hide();\nppm_d1.setdefaultColor(color.green);\nppm_d2.setdefaultColor(color.cyan);\n\n\nAddLabel(showlable, \&quot;  \&quot;+ ppm1_length+ \&quot;MAvg\&quot; ,ppm1.TakeValueColor ());\nAddLabel(showlable,  astext(movAvg_ppm1), if ppm1&lt; close then Color.LIGHT_GREEN else if ppm1&gt; close then color.light_red else Color.Light_GRAY);\ndef maDif= close- movAvg_ppm1;\n\nAddLabel(showlable and maDif&gt;0, \&quot; +\&quot;+astext(maDif),  Color.LIGHT_GREEN );\nAddLabel(showlable and maDif&lt;=0, \&quot; \&quot;+astext(maDif),  if maDif&lt; 0 then color.LIGHT_red else Color.LIGHT_GRAY);\n\nAddLabel(showlable, \&quot;  \&quot;+ ppm2_length+ \&quot;MAvg\&quot; ,ppm2.TakeValueColor ());\nAddLabel(showlable,  astext(movAvg_ppm2), if ppm2&lt; close then Color.LIGHT_GREEN else if ppm2&gt; close then color.light_red else Color.Light_GRAY);\n\n\nAddLabel(showlable, \&quot;  \&quot;+ ppm3_length+ \&quot;MAvg\&quot; ,ppm3.TakeValueColor ());\nAddLabel(showlable,  astext(movAvg_ppm3), if ppm3&lt; close then Color.LIGHT_GREEN else if ppm3&gt; close then color.light_red else Color.Light_GRAY);\n\n#AddLabel(showlable, \&quot;MA \&quot; + ppm_length + \&quot;=\&quot;+ astext(movAvg_ppm1), if movAvg_ppm1 &gt; close  then Color.RED else if movAvg_ppm1 &lt; close then  Color.GREEN else Color.GRAY);\n\nAddLabel(yes, \&quot; ppm1= \&quot;+  roundup(ppm1,3), if ppm1&gt; 0 then Color.LIGHT_GREEN else if ppm1&lt; 0 then color.light_red else Color.Light_GRAY);\nAddLabel(yes, \&quot; ppm2= \&quot; +   roundup(ppm2,3), if ppm2&gt; 0 then Color.LIGHT_GREEN else if ppm2&lt; 0 then color.light_red else Color.Light_GRAY);\nAddLabel(yes, \&quot; ppm3= \&quot;+  roundup(ppm3,3), if ppm3&gt; 0 then Color.LIGHT_GREEN else if ppm3&lt; 0 then color.light_red else Color.Light_GRAY);\n\n\n##################################\n\n&quot;,name=&quot;_241ab338_5374_4fa4_814b_3fe4a4769fae&quot;}){inputsMap:TreeMap20{^(&quot;ppmiSmooth&quot;,1),^(&quot;pricePpm1&quot;,&quot;CLOSE&quot;),^(&quot;pricePpm2&quot;,&quot;CLOSE&quot;),^(&quot;pricePpm3&quot;,&quot;CLOSE&quot;),^(&quot;showlable&quot;,&lt;F)},inputsMap=@TreeMap20})}),^(#%6.SubgraphId(&quot;Subgraph47&quot;),#%6.SubgraphStorableModel{height=81,storableIndicators.+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence{body=&quot;#\n\ndeclare lower;\n\n\n\n###############################\ninput showMovLable=yes;\ninput showPpmDivLable=yes;\ninput pricePpm1 = close;\ninput pricePpm2 = close;\ninput pricePpm3 = close;\ninput ppmiSmooth =3;\ninput averageTypePpmiSmooth = AverageType.simple;\n#input signalPeriod = 1;\ndef lookback = 1;\n\ninput ppm1_length = 10;\ninput ppm2_length = 21;\ninput ppm3_length = 40;\ninput fast_length = 10;\ninput slow_length =21;\ndef displace = 0;\ninput averageTypePpm = AverageType.simple;\ninput averageTypefast = AverageType.simple;\ninput averageTypeSlow = AverageType.simple;;# AverageType.EXPONENTIAL;\n#input showMovingAvgLable =yes;\n\n\ndef movAvg_ppm1 = MovingAverage(averageTypePpm, pricePpm1, ppm1_length);\n#def sign = MovingAverage(averageTypePpm, movAvg_ppm1[-displace], signalPeriod);\ndef movAvg_ppm2 = MovingAverage(averageTypePpm, pricePpm2, ppm2_length);\ndef movAvg_ppm3 = MovingAverage(averageTypePpm, pricePpm3, ppm3_length);\n\n \n\n\n \n\n#moving averages\n\ndef   ppm1_ =100*( movAvg_ppm1-movAvg_ppm1[lookback])/( movAvg_ppm1); \ndef   ppm2_ =100*( movAvg_ppm2-movAvg_ppm2[lookback])/( movAvg_ppm2); \ndef   ppm3_ =100*( movAvg_ppm3-movAvg_ppm3[lookback])/(movAvg_ppm3); \n#Plot ppm1 =MovingAverage(AverageType.EXPONENTIAL,ppm[-displace], signalPeriod);\n\n\n\nplot ppm1= MovingAverage(averageTypePpmiSmooth,ppm1_,ppmiSmooth);\nplot ppm2=  MovingAverage(averageTypePpmiSmooth,ppm2_,ppmiSmooth);\nplot ppm3=  MovingAverage(averageTypePpmiSmooth,ppm3_,ppmiSmooth);\n\n\n#AddLabel(yes, \&quot; ppm3\&quot;, Color.white);\nplot ppm_d1  = MovingAverage(averageTypefast, ppm3[-displace], fast_length);\nplot ppm_d2 = MovingAverage(averageTypefast, ppm3[-displace], slow_length);\n\n\nAddLabel(showPpmDivLable, \&quot; ppm3= \&quot;+  roundup(ppm3,3), if ppm3&gt; 0 then Color.LIGHT_GREEN else if ppm3&lt; 0 then color.light_red else Color.Light_GRAY);\nAddLabel(showPpmDivLable, \&quot; d1= \&quot;+  roundup(ppm_d1,3),  Color.green);\nAddLabel(showPpmDivLable, \&quot; d2= \&quot;+  roundup(ppm_d2,3),  Color.cyan);\n\n\n#plot ppm1_d1 = MovingAverage(averageTypefast, ppm1[-displace], fast_length);\n#plot ppm1_d2 = MovingAverage(averageTypefast, ppm1[-displace], slow_length);\n\nppm3.setdefaultColor(color.light_ORANGE);\nppm1.setdefaultColor(color.violet);\nppm2.setdefaultColor(color.yellow);\n\nppm1.Hide();\nppm2.Hide();\nppm_d1.setdefaultColor(color.green);\nppm_d2.setdefaultColor(color.cyan);\n\n\nAddLabel(showMovLable, \&quot;  \&quot;+ ppm1_length+ \&quot;MAvg\&quot; ,ppm1.TakeValueColor ());\nAddLabel(showMovLable,  astext(movAvg_ppm1), if ppm1&lt; close then Color.LIGHT_GREEN else if ppm1&gt; close then color.light_red else Color.Light_GRAY);\ndef maDif= close- movAvg_ppm1;\n\nAddLabel(showMovLable and maDif&gt;0, \&quot; +\&quot;+astext(maDif),  Color.LIGHT_GREEN );\nAddLabel(showMovLable and maDif&lt;=0, \&quot; \&quot;+astext(maDif),  if maDif&lt; 0 then color.LIGHT_red else Color.LIGHT_GRAY);\n\nAddLabel(showMovLable, \&quot;  \&quot;+ ppm2_length+ \&quot;MAvg\&quot; ,ppm2.TakeValueColor ());\nAddLabel(showMovLable,  astext(movAvg_ppm2), if ppm2&lt; close then Color.LIGHT_GREEN else if ppm2&gt; close then color.light_red else Color.Light_GRAY);\n\n\nAddLabel(showMovLable, \&quot;  \&quot;+ ppm3_length+ \&quot;MAvg\&quot; ,ppm3.TakeValueColor ());\nAddLabel(showMovLable,  astext(movAvg_ppm3), if ppm3&lt; close then Color.LIGHT_GREEN else if ppm3&gt; close then color.light_red else Color.Light_GRAY);\n\n#AddLabel(showlable, \&quot;MA \&quot; + ppm_length + \&quot;=\&quot;+ astext(movAvg_ppm1), if movAvg_ppm1 &gt; close  then Color.RED else if movAvg_ppm1 &lt; close then  Color.GREEN else Color.GRAY);\n\nAddLabel(yes, \&quot; ppm1= \&quot;+  roundup(ppm1,3), if ppm1&gt; 0 then Color.LIGHT_GREEN else if ppm1&lt; 0 then color.light_red else Color.Light_GRAY);\nAddLabel(yes, \&quot; ppm2= \&quot; +   roundup(ppm2,3), if ppm2&gt; 0 then Color.LIGHT_GREEN else if ppm2&lt; 0 then color.light_red else Color.Light_GRAY);\nAddLabel(yes, \&quot; ppm3= \&quot;+  roundup(ppm3,3), if ppm3&gt; 0 then Color.LIGHT_GREEN else if ppm3&lt; 0 then color.light_red else Color.Light_GRAY);\n\n\n##################################\n\n&quot;,name=&quot;_eabbbfd6_185e_4ece_8538_e1ec527454ae&quot;}){inputsMap:TreeMap21{^(&quot;ppmiSmooth&quot;,1),^(&quot;pricePpm1&quot;,&quot;CLOSE&quot;),^(&quot;pricePpm2&quot;,&quot;CLOSE&quot;),^(&quot;pricePpm3&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap21})}),^(#%6.SubgraphId(&quot;Subgraph51&quot;),#%6.SubgraphStorableModel{height=171,storableIndicators.+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence{body=&quot;declare lower;\ninput priceSmi = hlc3;\ninput price = close;\n\ninput over_bought = 40.0;\ninput over_sold = -40.0;\ninput percentDLength = 4;\ninput percentKLength = 5;\n\ndef min_low = Lowest(low, percentKLength);\ndef max_high = Highest(high, percentKLength);\ndef rel_diff = priceSmi - (max_high + min_low) / 2;\ndef diff = max_high - min_low;\n\ndef avgrel = ExpAverage(ExpAverage(rel_diff, percentDLength), percentDLength);\ndef avgdiff = ExpAverage(ExpAverage(diff, percentDLength), percentDLength);\n\nplot SMI = if avgdiff != 0 then avgrel / (avgdiff / 2) * 100 else 0;\nSMI.SetDefaultColor(GetColor(1));\n\nplot AvgSMI = ExpAverage(SMI, percentDLength);\nAvgSMI.SetDefaultColor(Color.CYAN);\nplot z = 0;\nz.SetStyle(Curve.SHORT_DASH);\nz.SetDefaultColor(Color.YELLOW);\n\nplot overbought = over_bought;\noverbought.SetDefaultColor(GetColor(5));\n\nplot oversold = over_sold;\noversold.SetDefaultColor(GetColor(5));\n\ninput Buyth=-40;\n\ninput thCondition = {default \&quot;blw\&quot; , \&quot;abv\&quot;};\ndef cond;\ndef Na = Double.Nan;\n\nswitch (thCondition)\n{\n case blw: \n    cond = 1;\ncase abv :\n   cond = 0;\n}\nplot buySmi;\nplot sellsmi;\n\nif cond \n{\n buySmi = if SMI crosses above AvgSMI and SMI &lt;Buyth and SMI&lt;over_bought then SMI* 0.996 else Na;\n#sell = if SMI crosses below AvgSMI and SMI &gt;Sth and SMI&lt;80 then 1 else 0;\n}\nelse{\n buySmi = if SMI crosses above AvgSMI and SMI &gt;Buyth and SMI&lt;60 then Smi* 0.996 else na;\n\n\n}\n\n\n\nsellSmi = if SMI crosses below AvgSMI and SMI &gt;60 and SMI&lt;80 then smi* 1.004 else na;\n\nSellSmi.setpaintingStrategy(PaintingStrategy.ARROW_down);\n\nsellSmi.setDefaultColor(color.pink);\nBuySmi.setpaintingStrategy(PaintingStrategy.ARROW_up);\n\nBuySmi.setDefaultColor(color.yellow);\nBuySMI.SetLineWeight(3);\nSellSMI.SetLineWeight(3);\n\n\n#AddCloud(-100, over_sold, Color.RED, Color.GREEN);\n#AddCloud(over_bought, 100, Color.GREEN, Color.RED);\n\n#####\ndef cldH = if SMI &gt;= overbought then SMI else overbought;\nAddCloud(cldH, overbought, Color.GREEN, Color.GREEN);\n\ndef cldL = if SMI &lt; oversold then SMI else oversold;\nAddCloud(cldL, oversold, Color.RED, Color.RED);\noverbought.SetDefaultColor(GetColor(7));\noversold.SetDefaultColor(GetColor(7));\nSMI.SetLineWeight(1);\nAvgSMI.SetLineWeight(3);\noverbought.SetStyle(Curve.SHORT_DASH);\noversold.SetStyle(Curve.SHORT_DASH);\n\n####\n\n\n####$$$$$$$$\n\n\ninput priceSlm = close;\n\ninput superFastLength = 8;\n\ninput fastLengthSlm = 13;\n\ninput slowLengthSlm = 21;\n\ninput displaceSlm = 0;\n\n\ninput averageTypeSlm = AverageType.EXPONENTIAL;\n\ndef mov_avg8 = MovingAverage(averageTypeSlm, priceSlm[-displaceSlm], superFastLength);\n\ndef mov_avg13 = MovingAverage(averageTypeSlm, priceSlm[-displaceSlm], fastLengthSlm);\n\ndef mov_avg21 = MovingAverage(averageTypeSlm, priceSlm[-displaceSlm], slowLengthSlm);\n \n#moving averages\n\ndef Superfast = mov_avg8;\n\ndef Fast = mov_avg13;\n\ndef Slow = mov_avg21;\n\n\ndef buy = mov_avg8 &gt; mov_avg13 and mov_avg13 &gt; mov_avg21 and low &gt; mov_avg8;\n\ndef stopbuy = mov_avg8 &lt;= mov_avg13;\n\ndef buynow = !buy[1] and buy;\n\ndef buysignal = CompoundValue(1, if buynow and !stopbuy then 1 else if buysignal[1] == 1 and stopbuy then 0 else buysignal[1], 0);\n\n\ndef Buy_Signal = buysignal[1] == 0 and buysignal == 1;\n\ndef Momentum_Down = buysignal[1] == 1 and buysignal == 0;\n\n\ndef sell = mov_avg8 &lt; mov_avg13 and mov_avg13 &lt; mov_avg21 and high &lt; mov_avg8;\n\ndef stopsell = mov_avg8 &gt;= mov_avg13;\n\ndef sellnow = !sell[1] and sell;\n\ndef sellsignal = CompoundValue(1, if sellnow and !stopsell then 1 else if sellsignal[1] == 1 and stopsell then 0 else sellsignal[1], 0);\n\n\ndef Sell_Signal = sellsignal[1] == 0 and sellsignal;\n\ndef Momentum_Up = sellsignal[1] == 1 and sellsignal == 0;\n \n# when using this as a custom scan, change the word plot to def\n# then remove the \'#\' from in front of one of the \&quot;plot Scan\&quot; statements below\n########\n\ninput length = 20;\ninput priceHMA = close;\n\ndef HMA = MovingAverage(AverageType.HULL, priceHMA, length);\ndef HMA_Up =  HMA &gt; HMA[1];\ndef HMA_Down = ! HMA_Up;\n\n###############\n\n#def Colorbars1 = if buysignal == 1 then 1 else if sellsignal == 1 then 2 else if buysignal == 0 or sellsignal == 0 then 3 else 0;\n\n\n\nAvgSMI.DefineColor(\&quot;Buy\&quot;, Color.DARK_GREEN);\n\n\nAvgSMI.DefineColor(\&quot;Sell\&quot;, Color.RED);\n\nAvgSMI.DefineColor(\&quot;Neutral\&quot;, Color.PLUM);\n#RSI.DefineColor(\&quot;NeutralDown\&quot;, Color.orange);\nAvgSMI.DefineColor(\&quot;HullMA_up\&quot;, Color.BLUE);\n\nAvgSMI.DefineColor(\&quot;HullMA_down\&quot;, Color.ORANGE);\n\nAvgSMI.AssignValueColor(if buysignal and HMA_Up then AvgSMI.Color(\&quot;Buy\&quot;) else if buysignal and !HMA_Up then AvgSMI.Color(\&quot;HullMA_down\&quot;) else if sellsignal and HMA_Down  then AvgSMI.Color(\&quot;Sell\&quot;) else  if sellsignal and !HMA_Down  then AvgSMI.Color(\&quot;HullMA_up\&quot;) else  AvgSMI.Color(\&quot;neutral\&quot;));\n;#\n# if Momentum_Up then  RSI.color(\&quot;neutralUp\&quot;) else  RSI.color(\&quot;neutraldown\&quot;));\n\n\n\n\n\n####$$$$$$$$$$$$$$$$\n###############\n\n\n\n#plot UpSignal = if (buysignal and SMI crosses above AvgSMI-3 and SMI &lt;40) then SMI-3 else Double.NaN;\n\nplot UpSignal = if ((buysignal or Momentum_Up) and SMI crosses above AvgSMI ) then SMI - 3 else Double.NaN;\nplot DownSignal = if (sellsignal and SMI crosses below AvgSMI + 3 and SMI &gt; over_bought) then SMI + 3 else Double.NaN;\ninput showBreakoutSignals = yes;\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\n\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\n\n\n\n\n\n######$$$$\n\n\n#RSI\ninput overBoughtRsi = 75;\ninput overSoldRsi = 25;\ninput rsiLength = 14;\ninput rsiPrice = close;\ninput rsi_th = 42;\ndef rsi_val = reference RSI(length = rsiLength, price = rsiPrice );\nplot rsi_val_normalized = rsi_val - 50;\n####\n\n\n\nAddLabel(yes, \&quot;RSI = \&quot; + rsi_val , if rsi_val &gt; overBoughtRsi  then Color.RED else if rsi_val &lt; overSoldRsi then  Color.GREEN else Color.GRAY);\n##########\n#########################RSI\n\n\n\n\n\nrsi_val_normalized.DefineColor(\&quot;OverBought\&quot;, Color.LIGHT_RED);\nrsi_val_normalized.DefineColor(\&quot;Normal\&quot;, GetColor(7));\nrsi_val_normalized.DefineColor(\&quot;OverSold\&quot;, Color.LIGHT_GREEN);\nrsi_val_normalized.DefineColor(\&quot;Below50\&quot;, Color.CYAN);\nrsi_val_normalized.DefineColor(\&quot;Above50\&quot;, Color.PINK);\n\nrsi_val_normalized.AssignValueColor(if rsi_val &gt;= overBoughtRsi then rsi_val_normalized.Color(\&quot;OverBought\&quot;) else if rsi_val &lt;= overSoldRsi then rsi_val_normalized.Color(\&quot;OverSold\&quot;) else if (rsi_val &gt; overSoldRsi and rsi_val &lt; rsi_th) then rsi_val_normalized.Color(\&quot;Below50\&quot;) else if (rsi_val &lt; overBoughtRsi and rsi_val &gt; rsi_th) then rsi_val_normalized.Color(\&quot;Above50\&quot;) else  rsi_val_normalized.Color(\&quot;Normal\&quot;)) ;\n\n\n\n\n\n#########\ndef ImpVol = imp_volatility();\n\nAddLabel(yes, \&quot;iV= \&quot; + ImpVol, Color.GRAY);\n\n#trend reversal\ndef y = rsi_val ;\ninput riReversLength = 2;\ninput lookBack = 2;\n\n\ndef rsi_expAvg = ExpAverage(rsi_val, riReversLength);\n\n#trend reversal\ndef overBoughtReversal = if ((rsi_expAvg &gt; overBoughtRsi)within 2 bar) and  (rsi_expAvg crosses above rsi_val) then price else 0;# if (rsi_expAvg &gt; OverBought and  rsi_expAvg crosses above rsi_val  within 3 bar ) then 40 else 0;\ndef oversoldRevesal = if ((rsi_expAvg &lt; overSoldRsi)within 2 bar) and  (rsi_expAvg crosses below rsi_val within 2 bar) then price else 0;\n\n##############\n########!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n#vwap vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\n\n#####^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n#MACD\n\ninput fastLength = 12;\ninput slowLength = 26;\ninput MACDLength = 9;\ninput displace = 0;\ndef fastAvg = Sum(volume * price, fastLength) / Sum(volume, fastLength);\ndef slowAvg = Sum(volume * price, slowLength) / Sum(volume, slowLength);\ndef Value = fastAvg - slowAvg;\ndef Avg = ExpAverage(Value, MACDLength);\ndef MACD_Diff  = Value - Avg;\n#def ZeroLine = 0;\n\ninput def_cond = no;\ndef MACD_cond_logic = if (def_cond) then MACD_Diff &lt;= 0 else yes;\n\n\n#MACD Pivot reversal\n#input FilterLength=3;\n######################\n#def MACDV_Diff_expAvg = ExpAverage(MACD_Diff, FilterLength);\n#plot oversoldRevesalMACDV =if ((Diff_MACDV &lt; MacdZeroLine)within lookBack bar) and  ( Diff_MACDV crosses above   MACDV_Diff_expAvg within lookBack bar)and Diff_MACDV &gt; Diff_MACDV[1] then 1 else 0;# if (MACDV_Diff_expAvg &gt; OverBought and  MACDV_Diff_expAvg crosses above rsi_val  within 3 bar ) then 40 else 0;\n#plot overBoughtReversalMACDV = if ((Diff_MACDV &gt; MacdZeroLine)within lookBack bar) and  (MACDV_Diff_expAvg crosses above  Diff_MACDV  within lookBack bar)  and Diff_MACDV &lt; Diff_MACDV[1] and Diff_MACDV&gt;0 then 1 else 0;\n\n\n#trend Pivot reversal\ndef twoBarPivotMACD_Buy =  MACD_Diff &gt; MACD_Diff[1] and MACD_Diff[1] &gt; MACD_Diff[2] and MACD_Diff[2] &lt; MACD_Diff[3] and MACD_Diff[3] &lt; MACD_Diff [4];\ndef twoBarPivotMACD_Sell = MACD_Diff &lt; MACD_Diff[1] and MACD_Diff[1] &lt; MACD_Diff[2] and MACD_Diff[2] &gt; MACD_Diff[3] and MACD_Diff[3] &gt; MACD_Diff [4];\n###################\n\n\ndef uptrend = if price &gt; price[1] and price[1] &gt;= price[2] then 1 else 0;\n\n#####################################-----------------\n\n\n\ndef SMI_Buy_Signal = if  (AvgSMI crosses above overbought  within lookBack bar) and SMI &gt;  AvgSMI and (rsi_val &gt; overSoldRsi and rsi_val &lt; overBoughtRsi + 10 ) and (uptrend) then 1 else 0;\n\n\nplot buy2 = SMI_Buy_Signal;\n\n#def  buySvix_Signal = if ( MACD_cond_logic  and  EMA_condition and  oversoldRevesal  and buySvix &lt; Zeroline - 10 ) then 1 else 0;\n#plot buy3 = buySvix_Signal;\n\n\n\n\n\n\ndef SMI_Sell_Signal = if ( (SMI crosses below AvgSMI within lookBack bar) and (overBoughtReversal)) then 1 else 0;\n#def sellSignal2 = if ((rsi_val  &gt; overBoughtRsi within 3 bar) and (smi crosses below AvgSMI within 3 bar)) then 1 else 0;\n\n\nplot sell2 = SMI_Sell_Signal;\n\n#######\n\n#def FVE_buySignal = conVwapBuy and oversoldRevesal and pFVE_Bull  and MACD_cond_logic ;# and Diff &gt;= 0;\n#def sig_buy = pFVE_Bull and Diff &gt;= 0;\n#plot buy4 = FVE_buySignal ;\n\n\n#def FVE_sellSignal = overBoughtReversal and pFVE_Bear ;\n#plot sell4 = FVE_sellSignal;\nplot buy5 = twoBarPivotMACD_Buy and oversoldRevesal;\nplot sell5 = twoBarPivotMACD_Sell and overBoughtReversal;\n\n####\n#def buySignal2 = if (oversoldRevesal  and buythedip2 &lt; Zeroline ) then 1 else 0;\n\n#def buySignal3 = if ( oversoldRevesal  and buythedip3 &lt; Zeroline - 10 ) then 1 else 0;\n#plot buy3 = buySignal3;\ninput bubble = no;\nAddChartBubble(bubble and buy2 == 1, buy2, \&quot;B2SMI= \&quot; +  low[1] + \&quot; rsi \&quot; + rsi_val + \&quot; w \&quot; + vwap[1], Color.LIGHT_ORANGE, no);\n#AddChartBubble(buy3 == 1, buy3,  \&quot;B3Svix= \&quot; + price + \&quot; rsi \&quot; + rsi_val, Color.LIGHT_GRAY, no);\n#AddChartBubble(buy4 == 1, buy4,  \&quot;B4FVE= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.YELLOW, no);\nAddChartBubble(bubble and buy5 == 1, buy5,  \&quot;B5Macd= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.CYAN, no);\n\n#AddChartBubble(sell1 == 1, sell1, \&quot;S1STR= \&quot; + price + \&quot; rsi \&quot; + rsi_val, Color.LIGHT_RED, no);#Buy the Dip\n\nAddChartBubble(bubble and sell2 == 1, sell2, \&quot;S2SMI= \&quot; + price + \&quot; rsi \&quot; + rsi_val, Color.PINK, no);#Buy the Dip\n#AddChartBubble(sell4 == 1, sell4, \&quot;S4FVE= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.VIOLET, no);#Buy the Dip\nAddChartBubble(bubble and sell5 == 1, sell5, \&quot;S5Macd= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.BLUE, no);#Buy the Dip\n#AddChartBubble(oversoldRevesal , close, rsi_val, Color.blue, no);#Buy the Dip\n\ndef o = open;\ndef c = close;\ndef h = high;\ndef l = low;\n\nplot d1 = ((h - l) / o) * 100;\nplot d2 = ((h - l) / (c - o)) * 1;\nplot d = ((c - c[1]) / c[1]) * 100;\nd1.Hide();\nd2.Hide();\nd.Hide();\n\n\ninput vfiLength = 130;\ninput averageLength = 100;\ninput trendQualityLength = 63;\ninput maxStiffness = 7;\ninput marketIndex = \&quot;SPY\&quot;;\ninput weightForMoneyFlow = 1.0;\ninput weightForTradingAboveAverage = 1.0;\ninput weightForUptrend = 1.0;\ninput weightForTrendQuality = 1.0;\ninput weightForMarketDirection = 2.0;\ninput showLabel = No;\n\ndef vfi = reference VolumeFlowIndicator(length = vfiLength, \&quot;max volume cut off\&quot; = 2.5);\ndef sma = Average(close, averageLength);\ndef ema = ExpAverage(close(marketIndex), averageLength);\ndef stiffness = Sum(close &lt; sma, trendQualityLength);\n\ndef Score;\ndef MoneyFlow = vfi &gt; 0;\ndef TradingAboveAverage = close &gt; sma;\ndef Uptrend1 = sma &gt; sma[4];\ndef TrendQuality = stiffness &lt;= maxStiffness;\ndef MarketDirection = ema &gt;= ema[2];\n\nScore = weightForMoneyFlow * MoneyFlow + weightForTradingAboveAverage * TradingAboveAverage + weightForUptrend * uptrend + weightForTrendQuality * TrendQuality + weightForMarketDirection * MarketDirection;\n\n\nAddLabel(showLabel and MoneyFlow, \&quot;Money flow\&quot;, GetColor(2));\nAddLabel(showLabel and TradingAboveAverage, \&quot;Trading above average\&quot;, GetColor(3));\nAddLabel(showLabel and Uptrend1, \&quot;Uptrend\&quot;, GetColor(4));\nAddLabel(showLabel and TrendQuality, \&quot;Trend quality\&quot;, GetColor(5));\nAddLabel(showLabel and TrendQuality, \&quot;Trend quality\&quot;, GetColor(5));\nAddLabel(showLabel and MarketDirection, \&quot;Market direction\&quot;, GetColor(6));\nAddLabel(showLabel , \&quot;Market score \&quot; + Score, GetColor(7));&quot;,name=&quot;_7662dae8_fa6f_4a07_aa35_2ec04cb46236&quot;}){hidden=&lt;T,inputsMap:TreeMap22{^(&quot;price&quot;,&quot;CLOSE&quot;),^(&quot;priceSlm&quot;,&quot;CLOSE&quot;),^(&quot;rsiPrice&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap22})}),^(#%6.SubgraphId(&quot;Subgraph53&quot;),#%6.SubgraphStorableModel{height=289,storableIndicators.+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence{body=&quot;plot Data = close;#Created by Buy Low and given permission to share\n#Renamed SMI Trigger System by Hguru\n#IronRod Lower (may2015)- hull smoothed SMI with AwsomeOscillator histogram\n#  ribbonStudy added- based on distance between midprice and ema(20)\n# This is the smi-based lower Ive been using for quite a while:  I look for red on red and green on green for trading, where for example both the cloud is red and the smi dashed line is red.  Most reliable and easy to read signals Ive found.\n\n#Look for the Dashed lines to turn color and Avg line to cross the Dash line for an entry but with more risk, next entry when avg line and dashed color line  crosses the 40 line. Next and probably the best risk is when the avg line and dashed line cross the zero line and Dashed line and cloud are the same color. I use this with a MACD crossover arrow setting at 5,13,4 or 5,13,6 or 3,13,6\n\n#Not 100% on the ADX vertical line and histogram this might need to be adjusted to match a normal ADX line. The ADX vertical line can be turned off in the edit study. The hisotgram can be hidden as well.\n\n#Use with the Upper matching MP_SMIandVerticalLineWarning System  here&gt;&gt;&gt;  http://tos.mx/mDvxaX\n\n#use setting gridsize .10 for/CL for tick charts and lower agg time frames and 1.0 for 1 hour and Daily.\n\ndeclare lower;\n#SMI engine\ninput gridsize = 1.0;\ninput aoscale = 1;\ninput smiscale = 100;\ninput audio = yes;\ninput label = yes;\ninput smilimit = 40.0;\ninput adxvline = yes;\n\ndef percentDLength = 13;\ndef percentKLength = 21;\ndef smihull = 5;\ndef anglescalingfactor = 1 / gridsize;\n\ndef min_low = Lowest(low, percentKLength);\ndef max_high = Highest(high, percentKLength);\ndef rel_diff = close - (max_high + min_low) / 2;\ndef diffx = max_high - min_low;\n\ndef avgrel = ExpAverage(ExpAverage(rel_diff, percentDLength), percentDLength);\ndef avgdiff = ExpAverage(ExpAverage(diffx, percentDLength), percentDLength);\n#plot SMI =  if avgdiff != 0 then avgrel / (avgdiff / 2) * smiscale else 0;\nplot SMI = ExpAverage( if avgdiff != 0 then avgrel / (avgdiff / 2) * smiscale else 0, 3);\n#smi.setDefaultColor(getColor(1));\nSMI.DefineColor(\&quot;Up\&quot;, Color.DARK_GREEN);\nSMI.DefineColor(\&quot;Down\&quot;, Color.DOWNTICK);\nSMI.DefineColor(\&quot;flat\&quot;, Color.GRAY);\nSMI.AssignValueColor(if SMI &gt;= SMI[1] then SMI.Color(\&quot;up\&quot;) else SMI.Color(\&quot;down\&quot;));\nSMI.SetLineWeight(4);\nSMI.SetStyle(Curve.SHORT_DASH);\n\nplot SMI1 = if avgdiff != 0 then avgrel / (avgdiff / 2) * smiscale else 0;\nSMI1.SetDefaultColor(Color.GRAY);\n\nplot upper = smilimit;\nupper.SetDefaultColor(Color.BLUE);\n\nplot lower = -smilimit;\nlower.SetDefaultColor(Color.BLUE);\n\n\n\nplot Zero = 0;\nZero.SetDefaultColor(Color.DARK_GRAY);\n\n#AddCloud(SMI, smilimit, Color.GREEN, Color.LIGHT_GRAY);\n#AddCloud(-smilimit, SMI, Color.RED, Color.LIGHT_GRAY);\nAddCloud(SMI, 0, Color.LIGHT_GREEN, CreateColor(255, 50, 50));\n\nAlert(audio and SMI crosses above 0, \&quot;SMI Long\&quot;,  Alert.BAR, Sound.Ring);\nAlert(audio and SMI crosses below 0, \&quot;SMI Short\&quot;,  Alert.BAR, Sound.Ring);\nAlert(audio and SMI crosses smilimit, \&quot;\&quot;, Alert.BAR, Sound.Bell);\nupper.SetDefaultColor(Color.RED);\n#upper.SetStyle(Curve.SHORT_DASH);\nlower.SetDefaultColor(Color.UPTICK);\n#lower.SetStyle(Curve.SHORT_DASH);\n\n#AddCloud(diff, SMI, Color.DOWNTICK, Color.UPTICK);\nAddLabel(label and yes, \&quot;Dashed= SMI, cloud w/limit; Histogram = mAwesomeOscillator\&quot; , Color.BLUE);\n\n#adx histogram\n\ninput length = 14;#5;\ninput averageType = AverageType.WILDERS;\n\nplot ADX = (DMI(length, averageType).ADX) - 18;\nADX.SetPaintingStrategy(PaintingStrategy.LINE);\nADX.SetLineWeight(1);\nADX.DefineColor(\&quot;Up\&quot;, Color.BLUE);\nADX.DefineColor(\&quot;Down\&quot;, Color.DARK_ORANGE);\nADX.AssignValueColor(\n      if ADX &gt;= ADX[1] then ADX.Color(\&quot;up\&quot;)\nelse ADX.Color(\&quot;down\&quot;));\nplot adxcaut = 20;\nadxcaut.SetDefaultColor(Color.DARK_ORANGE);\n\nAddVerticalLine (adxvline and ADX &gt;= 1 and ADX &lt; ADX[1] and ADX[1] &gt; ADX[2], \&quot;mADX\&quot;, Color.BLUE);\n#alert(ADX1 &gt;= 1 and ADX1 &lt; ADX1[1] and ADX1[1] &gt; ADX1[2], alert.bar, sound.bell);&quot;,name=&quot;_cb18973f_9434_3c5b_adec_fac0de14f50d&quot;}){alerts:LocalAlertArray2,alerts=@LocalAlertArray2,hidden=&lt;T})}),^(#%6.SubgraphId(&quot;Subgraph55&quot;),#%6.SubgraphStorableModel{height=81,storableIndicators.+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence{body=&quot;\ndeclare lower; \ninput price = close;\ninput displace = 0;\ninput length = 20;\ninput Num_Dev_Dn = -2.0;\ninput Num_Dev_up = 2.0;\ninput averageType = AverageType.Simple;\ninput showCloud= yes;\n\ndef sDev = stdev(data = price[-displace], length = length);\n\nplot MidLine = MovingAverage(averageType, data = price[-displace], length = length);\nplot LowerBand = MidLine + num_Dev_Dn * sDev;\nplot UpperBand = MidLine + num_Dev_Up * sDev;\n\nLowerBand.SetDefaultColor(GetColor(0));\nMidLine.SetDefaultColor(GetColor(1));\nUpperBand.SetDefaultColor(GetColor(5));\n\n#############################\ndef Na = Double.NaN;\n\ndef cloudhigh = If( ShowCloud, UpperBand, Na);\ndef cloudlow  = If(ShowCloud, LowerBand, Na);\n#AddCloud(cloudhigh, cloudlow, Color.GRAY, Color.GRAY);\n\n\nAddCloud(cloudhigh, Midline, Color.Green, Color.light_Green);\nAddCloud(cloudlow, Midline, Color.Red, Color.light_Red);\n\nplot b= (close -lowerBand)/(upperBand-lowerBand);\n####$$$$$$$$\n\n\ninput priceSlm = close;\n\ninput superFastLength = 8;\n\ninput fastLengthSlm = 13;\n\ninput slowLengthSlm = 21;\n\n\n\n\ninput averageTypeSlm = AverageType.EXPONENTIAL;\n\ndef mov_avg8 = MovingAverage(averageTypeSlm, priceSlm[-displace], superFastLength);\n\ndef mov_avg13 = MovingAverage(averageTypeSlm, priceSlm[-displace], fastLengthSlm);\n\ndef mov_avg21 = MovingAverage(averageTypeSlm, priceSlm[-displace], slowLengthSlm);\n \n#moving averages\n\ndef Superfast = mov_avg8;\n\ndef Fast = mov_avg13;\n\ndef Slow = mov_avg21;\n\n\ndef buy = mov_avg8 &gt; mov_avg13 and mov_avg13 &gt; mov_avg21 and low &gt; mov_avg8;\n\ndef stopbuy = mov_avg8 &lt;= mov_avg13;\n\ndef buynow = !buy[1] and buy;\n\ndef buysignal = CompoundValue(1, if buynow and !stopbuy then 1 else if buysignal[1] == 1 and stopbuy then 0 else buysignal[1], 0);\n\n\ndef Buy_Signal = buysignal[1] == 0 and buysignal == 1;\n\ndef Momentum_Down = buysignal[1] == 1 and buysignal == 0;\n\n\ndef sell = mov_avg8 &lt; mov_avg13 and mov_avg13 &lt; mov_avg21 and high &lt; mov_avg8;\n\ndef stopsell = mov_avg8 &gt;= mov_avg13;\n\ndef sellnow = !sell[1] and sell;\n\ndef sellsignal = CompoundValue(1, if sellnow and !stopsell then 1 else if sellsignal[1] == 1 and stopsell then 0 else sellsignal[1], 0);\n\n\ndef Sell_Signal = sellsignal[1] == 0 and sellsignal;\n\ndef Momentum_Up = sellsignal[1] == 1 and sellsignal == 0;\n \n# when using this as a custom scan, change the word plot to def\n# then remove the \'#\' from in front of one of the \&quot;plot Scan\&quot; statements below\ndef Colorbars = if buysignal == 1 then 1 else if sellsignal == 1 then -1 else if buysignal == 0 or sellsignal == 0 then 0 else 0;\n\n# use this first Scan plot for SLM Ribbon Momentum UP\n#plot Scan = if Colorbars == 1 then yes else no;\n\n# use this second Scan plot for SLM Ribbon Momentum DOWN\n#plot Scan = if Colorbars == -1 then yes else no;\n\n\n\n\n\n\n###############\n\ndef Colorbars1 = if buysignal == 1 then 1 else if sellsignal == 1 then 2 else if buysignal == 0 or sellsignal == 0 then 3 else 0;\n\ninput lengthHma = 20;\n\ndef HMA = MovingAverage(AverageType.HULL, price, lengthHma);\ndef HMA_Up=  HMA &gt; HMA[1];\ndef HMA_Down =! HMA_UP;\n\n###############\n\n#def Colorbars1 = if buysignal == 1 then 1 else if sellsignal == 1 then 2 else if buysignal == 0 or sellsignal == 0 then 3 else 0;\n\n\n\nMidLine.definecolor(\&quot;Buy\&quot;, color.dark_green);\n\n\nMidLine.definecolor(\&quot;Sell\&quot;, color.red);\n\nMidLine.definecolor(\&quot;Neutral\&quot;, Color.PLUM);\n#MidLine.definecolor(\&quot;NeutralDown\&quot;, Color.orange);\nMidLine.definecolor(\&quot;HullMA_up\&quot;, color.blue);\n\nMidLine.definecolor(\&quot;HullMA_down\&quot;, color.orange);\n\nMidLine.AssignValueColor(if buysignal and HMA_Up then MidLine.color(\&quot;Buy\&quot;) else if buysignal and !HMA_Up then MidLine.color(\&quot;HullMA_down\&quot;) else if sellsignal and HMA_Down  then MidLine.color(\&quot;Sell\&quot;) else  if sellsignal and !HMA_Down  then MidLine.color(\&quot;HullMA_up\&quot;) else  MidLine.color(\&quot;neutral\&quot;));;#\n\nb.AssignValueColor(if buysignal and HMA_Up then MidLine.color(\&quot;Buy\&quot;) else if buysignal and !HMA_Up then MidLine.color(\&quot;HullMA_down\&quot;) else if sellsignal and HMA_Down  then MidLine.color(\&quot;Sell\&quot;) else  if sellsignal and !HMA_Down  then MidLine.color(\&quot;HullMA_up\&quot;) else  MidLine.color(\&quot;neutral\&quot;));;#\n# if Momentum_Up then  RSI.color(\&quot;neutralUp\&quot;) else  RSI.color(\&quot;neutraldown\&quot;));\n\nplot one =1;\nplot z =0;\nplot half=0.5;\n\n\n\n\n#MidLine.definecolor(\&quot;Buy_Signal_Bars\&quot;, color.dark_green);\n\n#MidLine.definecolor(\&quot;Sell_Signal_Bars\&quot;, color.red);\n\n#MidLine.definecolor(\&quot;NeutralUp\&quot;, color.plum);\n\n#MidLine.definecolor(\&quot;NeutralDown\&quot;, color.orange);\n\n#MidLine.AssignValueColor(if Colorbars1 ==1 then MidLine.color(\&quot;buy_signal_bars\&quot;) else if colorbars1 ==2 then #MidLine.color(\&quot;Sell_Signal_bars\&quot;) else if Momentum_Up then  MidLine.color(\&quot;neutralUp\&quot;) else MidLine.color(\&quot;neutralDown\&quot;) );\n\n\nplot UpSignal = if (buysignal and price crosses above MidLine) then LowerBand else Double.NaN;\nplot DownSignal = if (sellsignal and price crosses below MidLine) then UpperBand else Double.NaN;\ninput showBreakoutSignals =no;\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\n\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\n\n\n\nMidLine.setlineWeight(3);\n\n\n\n\n\n\n######$$$$&quot;,name=&quot;_a508af02_4cde_429d_ba94_3d375dee61fb&quot;}){inputsMap:TreeMap23{^(&quot;lengthHma&quot;,@Integer1),^(&quot;price&quot;,&quot;CLOSE&quot;),^(&quot;priceSlm&quot;,&quot;CLOSE&quot;),^(&quot;showCloud&quot;,&lt;F)},inputsMap=@TreeMap23,plots{0:{hiding=&lt;T},1:{hiding=&lt;T},2:{hiding=&lt;T},6:{color=@CustomColor7}}})}),^(#%6.SubgraphId(&quot;Subgraph57&quot;),#%6.SubgraphStorableModel{height=80,storableIndicators.+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence{body=&quot;\ndeclare lower; \n#Intraday Intensity Index\ninput price = close;\ninput displace = 0;\ninput length = 20;\ninput Num_Dev_Dn = -2.0;\ninput Num_Dev_up = 2.0;\ninput averageType = AverageType.Simple;\ninput showCloud= no;\n\ndef sDev = stdev(data = price[-displace], length = length);\n\nplot MidLine = MovingAverage(averageType, data = price[-displace], length = length);\nplot LowerBand = MidLine + num_Dev_Dn * sDev;\nplot UpperBand = MidLine + num_Dev_Up * sDev;\n\nLowerBand.SetDefaultColor(GetColor(0));\nMidLine.SetDefaultColor(GetColor(1));\nUpperBand.SetDefaultColor(GetColor(5));\nlowerband.hide();\nmidline.hide();\nupperBand.hide();\n\n\n#############################\ndef Na = Double.NaN;\n\ndef cloudhigh = If( ShowCloud, UpperBand, Na);\ndef cloudlow  = If(ShowCloud, LowerBand, Na);\n#AddCloud(cloudhigh, cloudlow, Color.GRAY, Color.GRAY);\n\n\nAddCloud(cloudhigh, Midline, Color.Green, Color.light_Green);\nAddCloud(cloudlow, Midline, Color.Red, Color.light_Red);\n\nplot b= (close -lowerBand)/(upperBand-lowerBand);\n####$$$$$$$$\n\n\ninput priceSlm = close;\n\ninput superFastLength = 8;\n\ninput fastLengthSlm = 13;\n\ninput slowLengthSlm = 21;\n\n\n\n\ninput averageTypeSlm = AverageType.EXPONENTIAL;\n\ndef mov_avg8 = MovingAverage(averageTypeSlm, priceSlm[-displace], superFastLength);\n\ndef mov_avg13 = MovingAverage(averageTypeSlm, priceSlm[-displace], fastLengthSlm);\n\ndef mov_avg21 = MovingAverage(averageTypeSlm, priceSlm[-displace], slowLengthSlm);\n \n#moving averages\n\ndef Superfast = mov_avg8;\n\ndef Fast = mov_avg13;\n\ndef Slow = mov_avg21;\n\n\ndef buy = mov_avg8 &gt; mov_avg13 and mov_avg13 &gt; mov_avg21 and low &gt; mov_avg8;\n\ndef stopbuy = mov_avg8 &lt;= mov_avg13;\n\ndef buynow = !buy[1] and buy;\n\ndef buysignal = CompoundValue(1, if buynow and !stopbuy then 1 else if buysignal[1] == 1 and stopbuy then 0 else buysignal[1], 0);\n\n\ndef Buy_Signal = buysignal[1] == 0 and buysignal == 1;\n\ndef Momentum_Down = buysignal[1] == 1 and buysignal == 0;\n\n\ndef sell = mov_avg8 &lt; mov_avg13 and mov_avg13 &lt; mov_avg21 and high &lt; mov_avg8;\n\ndef stopsell = mov_avg8 &gt;= mov_avg13;\n\ndef sellnow = !sell[1] and sell;\n\ndef sellsignal = CompoundValue(1, if sellnow and !stopsell then 1 else if sellsignal[1] == 1 and stopsell then 0 else sellsignal[1], 0);\n\n\ndef Sell_Signal = sellsignal[1] == 0 and sellsignal;\n\ndef Momentum_Up = sellsignal[1] == 1 and sellsignal == 0;\n \n# when using this as a custom scan, change the word plot to def\n# then remove the \'#\' from in front of one of the \&quot;plot Scan\&quot; statements below\ndef Colorbars = if buysignal == 1 then 1 else if sellsignal == 1 then -1 else if buysignal == 0 or sellsignal == 0 then 0 else 0;\n\n# use this first Scan plot for SLM Ribbon Momentum UP\n#plot Scan = if Colorbars == 1 then yes else no;\n\n# use this second Scan plot for SLM Ribbon Momentum DOWN\n#plot Scan = if Colorbars == -1 then yes else no;\n\n\n\n\n\n\n###############\n\ndef Colorbars1 = if buysignal == 1 then 1 else if sellsignal == 1 then 2 else if buysignal == 0 or sellsignal == 0 then 3 else 0;\n\ninput lengthHma = 20;\n\ndef HMA = MovingAverage(AverageType.HULL, price, lengthHma);\ndef HMA_Up=  HMA &gt; HMA[1];\ndef HMA_Down =! HMA_UP;\n\n###############\n\n#def Colorbars1 = if buysignal == 1 then 1 else if sellsignal == 1 then 2 else if buysignal == 0 or sellsignal == 0 then 3 else 0;\n\n\n\nMidLine.definecolor(\&quot;Buy\&quot;, color.dark_green);\n\n\nMidLine.definecolor(\&quot;Sell\&quot;, color.red);\n\nMidLine.definecolor(\&quot;Neutral\&quot;, Color.PLUM);\n#MidLine.definecolor(\&quot;NeutralDown\&quot;, Color.orange);\nMidLine.definecolor(\&quot;HullMA_up\&quot;, color.blue);\n\nMidLine.definecolor(\&quot;HullMA_down\&quot;, color.orange);\n\nMidLine.AssignValueColor(if buysignal and HMA_Up then MidLine.color(\&quot;Buy\&quot;) else if buysignal and !HMA_Up then MidLine.color(\&quot;HullMA_down\&quot;) else if sellsignal and HMA_Down  then MidLine.color(\&quot;Sell\&quot;) else  if sellsignal and !HMA_Down  then MidLine.color(\&quot;HullMA_up\&quot;) else  MidLine.color(\&quot;neutral\&quot;));;#\n\nb.AssignValueColor(if buysignal and HMA_Up then MidLine.color(\&quot;Buy\&quot;) else if buysignal and !HMA_Up then MidLine.color(\&quot;HullMA_down\&quot;) else if sellsignal and HMA_Down  then MidLine.color(\&quot;Sell\&quot;) else  if sellsignal and !HMA_Down  then MidLine.color(\&quot;HullMA_up\&quot;) else  MidLine.color(\&quot;neutral\&quot;));;#\n# if Momentum_Up then  RSI.color(\&quot;neutralUp\&quot;) else  RSI.color(\&quot;neutraldown\&quot;));\n\n# Intraday Intensity Index\n# Assembled by BenTen at useThinkScript.com\n# Converted from https://www.tradingview.com/script/klr607Yi-INTRADAY-INTENSITY-INDEX-IIIX-by-KIVAN%C3%87-fr3762/\n\n\n\ninput length2 = 21;\n#def K1 = (2 * close - high - low) * volume;\ndef K1 = ( close - open) * volume;\n\ndef K2 = if(high != low, high - low, 1);\ndef INT = K1 / K2;\ndef INTSUM = sum(INT, length2);\n\nplot histogram = INTSUM;\nplot a = INT;\n\nhistogram.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);\nhistogram.AssignValueColor(if INTSUM&gt;0 then color.blue else color.red);\na.SetDefaultColor(GetColor(0));\n\n\n\n\n\n\n\n\n\n#MidLine.definecolor(\&quot;Buy_Signal_Bars\&quot;, color.dark_green);\n\n#MidLine.definecolor(\&quot;Sell_Signal_Bars\&quot;, color.red);\n\n#MidLine.definecolor(\&quot;NeutralUp\&quot;, color.plum);\n\n#MidLine.definecolor(\&quot;NeutralDown\&quot;, color.orange);\n\n#MidLine.AssignValueColor(if Colorbars1 ==1 then MidLine.color(\&quot;buy_signal_bars\&quot;) else if colorbars1 ==2 then #MidLine.color(\&quot;Sell_Signal_bars\&quot;) else if Momentum_Up then  MidLine.color(\&quot;neutralUp\&quot;) else MidLine.color(\&quot;neutralDown\&quot;) );\n\n\nplot UpSignal = if (buysignal and price crosses above MidLine) then LowerBand else Double.NaN;\nplot DownSignal = if (sellsignal and price crosses below MidLine) then UpperBand else Double.NaN;\ninput showBreakoutSignals =no;\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\n\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\n\n\n\nMidLine.setlineWeight(3);\n\n\n\n\n\n\n######$$$$&quot;,name=&quot;_b9c241fe_a444_430e_90cb_11c5582e4030&quot;}){hidden=&lt;T,inputsMap:TreeMap24{^(&quot;price&quot;,&quot;CLOSE&quot;),^(&quot;priceSlm&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap24})}),^(#%6.SubgraphId(&quot;Subgraph59&quot;),#%6.SubgraphStorableModel{height=88,storableIndicators.+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence{body=&quot;\ndeclare lower; \ninput price = close;\ninput displace = 0;\ninput length = 20;\ninput Num_Dev_Dn = -2.0;\ninput Num_Dev_up = 2.0;\ninput averageType = AverageType.Simple;\ninput showCloud= no;\ninput useATR=no;\ndef sDev = stdev(data = price[-displace], length = length);\n\nplot MidLine = MovingAverage(averageType, data = price[-displace], length = length);\nplot LowerBand = MidLine + num_Dev_Dn * sDev;\nplot UpperBand = MidLine + num_Dev_Up * sDev;\n\nLowerBand.SetDefaultColor(GetColor(0));\nMidLine.SetDefaultColor(GetColor(1));\nUpperBand.SetDefaultColor(GetColor(5));\nlowerband.hide();\nmidline.hide();\nupperBand.hide();\n\n\n#############################\ndef Na = Double.NaN;\n\ndef cloudhigh = If( ShowCloud, UpperBand, Na);\ndef cloudlow  = If(ShowCloud, LowerBand, Na);\n#AddCloud(cloudhigh, cloudlow, Color.GRAY, Color.GRAY);\n\n\nAddCloud(cloudhigh, Midline, Color.Green, Color.light_Green);\nAddCloud(cloudlow, Midline, Color.Red, Color.light_Red);\n\nplot b= (close -lowerBand)/(upperBand-lowerBand);\n\n\n\n####$$$$$$$$\n\n\ninput priceSlm = close;\n\ninput superFastLength = 8;\n\ninput fastLengthSlm = 13;\n\ninput slowLengthSlm = 21;\n\n\n\n\ninput averageTypeSlm = AverageType.EXPONENTIAL;\n\ndef mov_avg8 = MovingAverage(averageTypeSlm, priceSlm[-displace], superFastLength);\n\ndef mov_avg13 = MovingAverage(averageTypeSlm, priceSlm[-displace], fastLengthSlm);\n\ndef mov_avg21 = MovingAverage(averageTypeSlm, priceSlm[-displace], slowLengthSlm);\n \n#moving averages\n\ndef Superfast = mov_avg8;\n\ndef Fast = mov_avg13;\n\ndef Slow = mov_avg21;\n\n\ndef buy = mov_avg8 &gt; mov_avg13 and mov_avg13 &gt; mov_avg21 and low &gt; mov_avg8;\n\ndef stopbuy = mov_avg8 &lt;= mov_avg13;\n\ndef buynow = !buy[1] and buy;\n\ndef buysignal = CompoundValue(1, if buynow and !stopbuy then 1 else if buysignal[1] == 1 and stopbuy then 0 else buysignal[1], 0);\n\n\ndef Buy_Signal = buysignal[1] == 0 and buysignal == 1;\n\ndef Momentum_Down = buysignal[1] == 1 and buysignal == 0;\n\n\ndef sell = mov_avg8 &lt; mov_avg13 and mov_avg13 &lt; mov_avg21 and high &lt; mov_avg8;\n\ndef stopsell = mov_avg8 &gt;= mov_avg13;\n\ndef sellnow = !sell[1] and sell;\n\ndef sellsignal = CompoundValue(1, if sellnow and !stopsell then 1 else if sellsignal[1] == 1 and stopsell then 0 else sellsignal[1], 0);\n\n\ndef Sell_Signal = sellsignal[1] == 0 and sellsignal;\n\ndef Momentum_Up = sellsignal[1] == 1 and sellsignal == 0;\n \n# when using this as a custom scan, change the word plot to def\n# then remove the \'#\' from in front of one of the \&quot;plot Scan\&quot; statements below\ndef Colorbars = if buysignal == 1 then 1 else if sellsignal == 1 then -1 else if buysignal == 0 or sellsignal == 0 then 0 else 0;\n\n# use this first Scan plot for SLM Ribbon Momentum UP\n#plot Scan = if Colorbars == 1 then yes else no;\n\n# use this second Scan plot for SLM Ribbon Momentum DOWN\n#plot Scan = if Colorbars == -1 then yes else no;\n\n\n\n\n\n\n###############\n\ndef Colorbars1 = if buysignal == 1 then 1 else if sellsignal == 1 then 2 else if buysignal == 0 or sellsignal == 0 then 3 else 0;\n\ninput lengthHma = 20;\n\ndef HMA = MovingAverage(AverageType.HULL, price, lengthHma);\ndef HMA_Up=  HMA &gt; HMA[1];\ndef HMA_Down =! HMA_UP;\n\n###############\n\n#def Colorbars1 = if buysignal == 1 then 1 else if sellsignal == 1 then 2 else if buysignal == 0 or sellsignal == 0 then 3 else 0;\n\n\n\nMidLine.definecolor(\&quot;Buy\&quot;, color.dark_green);\n\n\nMidLine.definecolor(\&quot;Sell\&quot;, color.red);\n\nMidLine.definecolor(\&quot;Neutral\&quot;, Color.PLUM);\n#MidLine.definecolor(\&quot;NeutralDown\&quot;, Color.orange);\nMidLine.definecolor(\&quot;HullMA_up\&quot;, color.blue);\n\nMidLine.definecolor(\&quot;HullMA_down\&quot;, color.orange);\n\nMidLine.AssignValueColor(if buysignal and HMA_Up then MidLine.color(\&quot;Buy\&quot;) else if buysignal and !HMA_Up then MidLine.color(\&quot;HullMA_down\&quot;) else if sellsignal and HMA_Down  then MidLine.color(\&quot;Sell\&quot;) else  if sellsignal and !HMA_Down  then MidLine.color(\&quot;HullMA_up\&quot;) else  MidLine.color(\&quot;neutral\&quot;));;#\n\nb.AssignValueColor(if buysignal and HMA_Up then MidLine.color(\&quot;Buy\&quot;) else if buysignal and !HMA_Up then MidLine.color(\&quot;HullMA_down\&quot;) else if sellsignal and HMA_Down  then MidLine.color(\&quot;Sell\&quot;) else  if sellsignal and !HMA_Down  then MidLine.color(\&quot;HullMA_up\&quot;) else  MidLine.color(\&quot;neutral\&quot;));;#\n# if Momentum_Up then  RSI.color(\&quot;neutralUp\&quot;) else  RSI.color(\&quot;neutraldown\&quot;));\n\nplot one =1;\nplot z =0;\nplot half=0.5;\nb.hide();\none.hide();\nhalf.hide();\ninput bWidthLookBack=125;\n\n\n\n\n\ninput lengthAtr = 14;\ninput averageTypeAtr = AverageType.WILDERS;\n\nplot ATR = MovingAverage(averageTypeAtr, TrueRange(high, close, low), lengthAtr);\nATR.SetDefaultColor(GetColor(8));\nATR.hide();\n#plot v_volatility= volume*((2*close-high-low)/(high-low));\nplot BB_bandwidth;\n if (!useATR)\n{\n BB_bandwidth = (upperBand-lowerBand)/(midline);\n}\n else \n{\n BB_bandwidth=(upperBand-lowerBand)/(ATR);\n}\nplot BW_H= highest(BB_bandwidth,bWidthLookBack);\nplot BW_L= lowest(BB_bandwidth,bWidthLookBack);\n\n\n#################!!!!!!!!!!!!!!!!!!!!!!!!!!!!\nplot BuysignalB = if(close crosses above  UpperBand,BB_bandwidth,na)  ;\n\nBuysignalB.DefineColor(\&quot;Above\&quot;, GetColor(1));\nBuysignalB.DefineColor(\&quot;Below\&quot;, GetColor(2));\n#signal.AssignValueColor(if crossingType == CrossingType.above then signal.color(\&quot;Above\&quot;) else signal.color(\&quot;Below\&quot;));\nBuysignalB.AssignValueColor( BuysignalB.color(\&quot;Above\&quot;) );\n\n\n#signal.SetPaintingStrategy(if crossingType == CrossingType.above\n #   then PaintingStrategy.BOOLEAN_ARROW_UP\n  #  else PaintingStrategy.BOOLEAN_ARROW_DOWN);\n\nBuysignalB.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\n\n\n\n\n\n\n##################################!!!!!!!!!!!!!!!!!!!!!!!\n\n\n\n\n\n\nBB_bandwidth.AssignValueColor(if buysignal and HMA_Up then MidLine.color(\&quot;Buy\&quot;) else if buysignal and !HMA_Up then MidLine.color(\&quot;HullMA_down\&quot;) else if sellsignal and HMA_Down  then MidLine.color(\&quot;Sell\&quot;) else  if sellsignal and !HMA_Down  then MidLine.color(\&quot;HullMA_up\&quot;) else  MidLine.color(\&quot;neutral\&quot;));;#\n# if Momentum_Up then  RSI.color(\&quot;neutralUp\&quot;) else  RSI.color(\&quot;neutraldown\&quot;));\n\n#MidLine.definecolor(\&quot;Buy_Signal_Bars\&quot;, color.dark_green);\n\n#MidLine.definecolor(\&quot;Sell_Signal_Bars\&quot;, color.red);\n\n#MidLine.definecolor(\&quot;NeutralUp\&quot;, color.plum);\n\n#MidLine.definecolor(\&quot;NeutralDown\&quot;, color.orange);\n\n#MidLine.AssignValueColor(if Colorbars1 ==1 then MidLine.color(\&quot;buy_signal_bars\&quot;) else if colorbars1 ==2 then #MidLine.color(\&quot;Sell_Signal_bars\&quot;) else if Momentum_Up then  MidLine.color(\&quot;neutralUp\&quot;) else MidLine.color(\&quot;neutralDown\&quot;) );\n\n\nplot UpSignal = if (buysignal and price crosses above MidLine) then LowerBand else Double.NaN;\nplot DownSignal = if (sellsignal and price crosses below MidLine) then UpperBand else Double.NaN;\ninput showBreakoutSignals =no;\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\n\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\n\n\n\nMidLine.setlineWeight(3);\n\n\n\n\n\n\n######$$$$&quot;,name=&quot;_c9bebc7b_c43e_4a5a_90e4_19ba478e5d83&quot;}){hidden=&lt;T,inputsMap:TreeMap25{^(&quot;bWidthLookBack&quot;,50),^(&quot;price&quot;,&quot;CLOSE&quot;),^(&quot;priceSlm&quot;,&quot;CLOSE&quot;),^(&quot;useATR&quot;,@Boolean0)},inputsMap=@TreeMap25})}),^(#%6.SubgraphId(&quot;Subgraph61&quot;),#%6.SubgraphStorableModel{height=108,storableIndicators.+(!%7.CompiledStudy.resolveStudy(@ScriptEssence0){hidden=&lt;T,inputsMap:TreeMap26{^(&quot;price&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap26})}),^(#%6.SubgraphId(&quot;Subgraph77&quot;),#%6.SubgraphStorableModel{height=154,storableIndicators.+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence{body=&quot;# OBV/OBV_MA  by MerryDay 5/24/20\n#When the OBV (On Balance Volume) crosses OBV’s 20-period moving average, the divergence signal of a trend reversal is confirmed. While research indicates a default of 20 is norm, I have been using a 34 period.  The difference is slight.\n# If the OBV is greater than the OBV ma then a green cloud appears under the OBV.\n\ndeclare lower;\ninput length = 20; #default = 20\ninput length2 = 21;\ninput price = close;\n\n\n\n\n\ndef K1 = ( close - open - low) * volume;\ndef K2 = if(high != low, high - low, 1);\ndef INT = K1 / K2;\ndef INTSUM = sum(INT, length2);\n\nplot OBV = TotalSum(Sign(INT - INT[1]) * volume);\nplot OBVma = Average(OBV, length);\ndef aboveMA   = OBV &gt;= OBVma ;\n\n#plot histogram = INTSUM;\n\n\n## LIPSTICK ##\nDefineGlobalColor(\&quot;LabelGreen\&quot;, CreateColor(0, 190, 0)) ;\nDefineGlobalColor(\&quot;PaleGreen\&quot;, CreateColor(180, 220, 180)) ;\nDefineGlobalColor(\&quot;PaleRed\&quot;, CreateColor (220, 200, 200)) ;\nDefineGlobalColor(\&quot;DullGold\&quot;, CreateColor(220, 220, 128)) ;\nDefineGlobalColor(\&quot;BlueJeans\&quot;, CreateColor(0, 150, 200)) ;\nOBVma.SetDefaultColor(GlobalColor(\&quot;DullGold\&quot;));\nOBVma.SetLineWeight(3);\nOBVma.HideBubble();\nOBVma.HideTitle();\n\nOBV.SetPaintingStrategy(PaintingStrategy.LINE_VS_TRIANGLES);\nOBV.SetLineWeight(2);\nOBV.HideBubble();\nOBV.HideTitle();\nOBV.DefineColor(\&quot;Up\&quot;, GlobalColor(\&quot;LabelGreen\&quot;));\nOBV.DefineColor(\&quot;Weak\&quot;, Color.LIGHT_GRAY);\nOBV.DefineColor(\&quot;Down\&quot;, GlobalColor(\&quot;PaleRed\&quot;));\nOBV.AssignValueColor(if OBV &gt; OBVma  then OBV.Color(\&quot;Up\&quot;) else OBV.Color(\&quot;Down\&quot;));\n\nplot OBVlow = if  OBV crosses below OBVma then 1 else 0;\nOBVlow.hide();\n\nplot crossup = if OBV crosses above OBVma then OBV else double.NaN;\ncrossup.HideBubble() ;\ncrossup.HideTitle() ;\ncrossup.SetPaintingStrategy(PaintingStrategy.TRIANGLES);\ncrossup.SetLineWeight(5);\ncrossup.SetDefaultColor(color.blue) ;\nplot crossdown = if OBV crosses below OBVma then OBV else double.NaN;\ncrossdown.HideBubble() ;\ncrossdown.HideTitle() ;\ncrossdown.SetPaintingStrategy(PaintingStrategy.TRIANGLES);\ncrossdown.SetLineWeight(5);\ncrossdown.SetDefaultColor(color.pink) ;\n\nAddCloud(OBV, OBVma, Color.LIGHT_GREEN, Color.PINK);\n\n#Alert(crosses_above_MA, \&quot;What\'s going to happen?\&quot; + GetSymbol(), Alert.BAR, Sound.bell);\nDefineGlobalColor(\&quot;MyCyan\&quot;, CreateColor(150, 0, 255)) ;\nDefineGlobalColor(\&quot;Sell\&quot;, CreateColor(255, 150, 0)) ;\n\n\n# End of OBV/OBV_MA &quot;,name=&quot;_d493e752_9de1_494d_b2e6_1ebb5a0de209&quot;}){hidden=&lt;T,inputsMap:TreeMap27{^(&quot;price&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap27})})}}" DEFAULT_TYPE="DASHBOARD" ORDER_ENTRY_EXPANDED="false" ORDER_ENTRY_PINNED_PROPERTY="false" ROW_COUNT="1" SHARED_USER_SCRIPTS="@v6@owner{chartAggregationPeriods:ChartAggregationPeriodArray0,chartAggregationPeriods=@ChartAggregationPeriodArray0}#java.util.HashMap{^(&quot;_60475667_d5a0_4a24_8038_b84ac1548626&quot;,&quot;TheoProjectionPivots&quot;),^(&quot;_f59c642e_bc17_46b6_b151_447e2c413c14&quot;,&quot;rsiLaguerreTime&quot;)}" SYMBOL="DCTH" SYMBOL_GROUP="2" VERTICAL="false" VISIBLE="true" WEIGHT="3.0"/>
            <DASHBOARD SYMBOL="MESA" SYMBOL_GROUP="2" VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <LEVEL_II SYMBOL="OCGN" SYMBOL_GROUP="2" VERTICAL="false" VISIBLE="false" WEIGHT="1.0">
              <SORTING COLUMN="BID" ORDER="-1"/>
              <SORTING1 COLUMN="ASK" ORDER="1"/>
            </LEVEL_II>
            <LIVE_NEWS SYMBOL="WAFU" SYMBOL_GROUP="2" VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <PHASE_SCORES VERTICAL="false" VISIBLE="false" WEIGHT="2.0"/>
            <TIME_SALES VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <TRADE CONFIGURATION_NAME="SINGLE" ORDER_RULES_SET="STOCK" ORDER_TYPE="LIMIT" OS_AUTO="false" OS_EXPANDED="true" OS_TIF="DAY" QTY="100.0" QTY_STEP="1.0" TEMPLATE="SINGLE" TRADE_BUTTONS="BUY_MKT;SELL_MKT;MULTI_CANCEL;REVERSE;FLAT;SECOND_LINE;QUANTITY;AUTO_SEND;ORDER_SETUP" VISIBLE="false">
              <OCO_STOP>
                <TRG_0 TRG_ENBL="true" TRG_LINK="ASK_BID" TRG_OFFSET_MODE="TICK" TRG_OT="STOP" TRG_SETUP="10.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AA="10.0" AAL="10.0" AAP="10.0" AAPL="10.0" ABG="10.0" ABML="10.0" ACER="10.0" ADBE="10.0" ADMP="10.0" AEG="10.0" AEHL="10.0" AFI="10.0" AJRD="10.0" AKU="10.0" ALEC="10.0" AMC="10.0" AMCR="10.0" AMD="10.0" AMRS="10.0" AMTX="10.0" AMZN="10.0" ANIX="10.0" ANPC="10.0" ANTE="10.0" AP="10.0" APOP="10.0" APTO="10.0" AR="10.0" AREC="10.0" ARES="10.0" ARLO="10.0" ASLEW="10.0" ATHM="10.0" ATIF="10.0" ATNF="10.0" AUY="10.0" AVCO="10.0" AXL="10.0" AZN="10.0" AZRX="10.0" BA="10.0" BABA="10.0" BBBY="10.0" BBD="10.0" BBDC="10.0" BFT="10.0" BILI="10.0" BLIN="10.0" BMY="10.0" BOX="10.0" BP="10.0" BRQS="10.0" BSGM="10.0" BURL="10.0" BWAY="10.0" BXRX="10.0" BYFC="10.0" CAKE="10.0" CAL="10.0" CCI="10.0" CCIV="10.0" CCJ="10.0" CEQPP="10.0" CHNG="10.0" CHX="10.0" CIDM="10.0" CIIC="10.0" CLBS="10.0" CLDR="10.0" CLEU="10.0" CLSN="10.0" CLVS="10.0" CNNE="10.0" COHN="10.0" COMP="10.0" CPRX="10.0" CRBP="10.0" CRTD="10.0" CSCO="10.0" CTIC="10.0" CUB="10.0" CVX="10.0" DCTH="10.0" DHT="10.0" DIS="10.0" DISCK="10.0" DNN="10.0" DOX="10.0" DPW="10.0" DS="10.0" DSKE="10.0" DTSS="10.0" EARS="10.0" EBS="10.0" EDTK="10.0" EMAN="10.0" ENPH="10.0" ETSY="10.0" EURN="10.0" EVRG="10.0" EW="10.0" EWA="10.0" EXEL="10.0" EYE="10.0" EYES="10.0" FAST="10.0" FB="10.0" FCAC="10.0" FLR="10.0" FLY="10.0" FPRX="10.0" FSLR="10.0" FSR="10.0" FUSE="10.0" FUV="10.0" GEL="10.0" GLOP="10.0" GME="10.0" GMER="10.0" GNCA="10.0" GOCO="10.0" GOED="10.0" HBI="10.0" HCHC="10.0" HENKY="10.0" HPE="10.0" HPQ="10.0" HPR="10.0" HTBX="10.0" HTHIY="10.0" HTZ="10.0" HUGE="10.0" HYLN="10.0" HZON="10.0" IDEX="10.0" IDXX="10.0" IGSB="10.0" IMTE="10.0" INFI="10.0" INFY="10.0" ING="10.0" INO="10.0" INPX="10.0" INTC="10.0" INTU="10.0" INUV="10.0" INVO="10.0" INVU="10.0" IWM="10.0" IZEA="10.0" JE="10.0" JENGQ="10.0" JFIN="10.0" JOB="10.0" K="10.0" KBR="10.0" KEYS="10.0" KMPH="10.0" KMX="10.0" KR="10.0" LAZR="10.0" LCI="10.0" LCTX="10.0" LEAF="10.0" LIVX="10.0" LKQ="10.0" LODE="10.0" LRTNF="10.0" LUV="10.0" MARA="10.0" MBT="10.0" MDII="10.0" MESA="10.0" METX="10.0" MFGP="10.0" MMDA1="10.0" MRIN="10.0" MSFT="10.0" MTEM="10.0" MU="10.0" MVIS="10.0" MX="10.0" MYO="10.0" MYSZ="10.0" NCLH="10.0" NDX="10.0" NEOS="10.0" NGD="10.0" NGL="10.0" NIO="10.0" NLOK="10.0" NLSN="10.0" NLSP="10.0" NLST="10.0" NNVC="10.0" NOK="10.0" NOV="10.0" NQ="10.0" NSLP="10.0" NTP="10.0" NUZE="10.0" NVDA="10.0" NXE="10.0" OCGN="10.0" OGEN="10.0" OGI="10.0" OHI="10.0" OI="10.0" OLO="10.0" OPEN="10.0" OPGN="10.0" ORCL="10.0" ORMP="10.0" OTIS="10.0" OVID="10.0" PAA="10.0" PAAS="10.0" PERI="10.0" PFF="10.0" PGX="10.0" PHM="10.0" PNC="10.0" POTX="10.0" PPG="10.0" PPL="10.0" PTE="10.0" QQQ="10.0" QSR="10.0" RAD="10.0" RAIL="10.0" RIBT="10.0" RKT="10.0" RMO="10.0" RP="10.0" RPAY="10.0" RRD="10.0" RSX="10.0" RUT="10.0" RVLV="10.0" RYCEY="10.0" SAVA="10.0" SAVE="10.0" SGLB="10.0" SID="10.0" SIFY="10.0" SINO="10.0" SINT="10.0" SIOX="10.0" SIRI="10.0" SITC="10.0" SIVR="10.0" SJI="10.0" SKLZ="10.0" SKT="10.0" SLDB="10.0" SLQT="10.0" SNAP="10.0" SNCA="10.0" SNOA="10.0" SOGO="10.0" SOS="10.0" SPCB="10.0" SPD="10.0" SPRT="10.0" SPX="10.0" SPY="10.0" SQ="10.0" STON="10.0" SUNW="10.0" SWI="10.0" SWK="10.0" T="10.0" TAP="10.0" TGTX="10.0" TH="10.0" THTX="10.0" TSIA="10.0" TSLA="10.0" TSLAX="10.0" TZA="10.0" U="10.0" UAL="10.0" UAMY="10.0" UEC="10.0" UIS="10.0" ULTA="10.0" USAC="10.0" USWS="10.0" UTZ="10.0" UUUU="10.0" UXIN="10.0" VALE="10.0" VEU="10.0" VIX="10.0" VJET="10.0" VSTM="10.0" VTRS="10.0" VVOS="10.0" VWO="10.0" WAFU="10.0" WETF="10.0" WKEY="10.0" WKHS="10.0" X="10.0" XELA="10.0" XERS="10.0" XL="10.0" XLP="10.0" XLU="10.0" XTLB="10.0" YGMZ="10.0" ZKIN="10.0" ZM="10.0"/>
                </TRG_0>
              </OCO_STOP>
              <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="1.0" TRG_TIF="DAY">
                <OFFSET_PER_SYMBOL AA="1.0" AAL="1.0" AAP="1.0" AAPL="1.0" ABG="1.0" ABML="1.0" ACER="1.0" ADBE="1.0" ADMP="1.0" AEG="1.0" AEHL="1.0" AFI="1.0" AJRD="1.0" AKU="1.0" ALEC="1.0" AMC="1.0" AMCR="1.0" AMD="1.0" AMRS="1.0" AMTX="1.0" AMZN="1.0" ANIX="1.0" ANPC="1.0" ANTE="1.0" AP="1.0" APOP="1.0" APTO="1.0" AR="1.0" AREC="1.0" ARES="1.0" ARLO="1.0" ASLEW="1.0" ATHM="1.0" ATIF="1.0" ATNF="1.0" AUY="1.0" AVCO="1.0" AXL="1.0" AZN="1.0" AZRX="1.0" BA="1.0" BABA="1.0" BBBY="1.0" BBD="1.0" BBDC="1.0" BFT="1.0" BILI="1.0" BLIN="1.0" BMY="1.0" BOX="1.0" BP="1.0" BRQS="1.0" BSGM="1.0" BURL="1.0" BWAY="1.0" BXRX="1.0" BYFC="1.0" CAKE="1.0" CAL="1.0" CCI="1.0" CCIV="1.0" CCJ="1.0" CEQPP="1.0" CHNG="1.0" CHX="1.0" CIDM="1.0" CIIC="1.0" CLBS="1.0" CLDR="1.0" CLEU="1.0" CLSN="1.0" CLVS="1.0" CNNE="1.0" COHN="1.0" COMP="1.0" CPRX="1.0" CRBP="1.0" CRTD="1.0" CSCO="1.0" CTIC="1.0" CUB="1.0" CVX="1.0" DCTH="1.0" DHT="1.0" DIS="1.0" DISCK="1.0" DNN="1.0" DOX="1.0" DPW="1.0" DS="1.0" DSKE="1.0" DTSS="1.0" EARS="1.0" EBS="1.0" EDTK="1.0" EMAN="1.0" ENPH="1.0" ETSY="1.0" EURN="1.0" EVRG="1.0" EW="1.0" EWA="1.0" EXEL="1.0" EYE="1.0" EYES="1.0" FAST="1.0" FB="1.0" FCAC="1.0" FLR="1.0" FLY="1.0" FPRX="1.0" FSLR="1.0" FSR="1.0" FUSE="1.0" FUV="1.0" GEL="1.0" GLOP="1.0" GME="1.0" GMER="1.0" GNCA="1.0" GOCO="1.0" GOED="1.0" HBI="1.0" HCHC="1.0" HENKY="1.0" HPE="1.0" HPQ="1.0" HPR="1.0" HTBX="1.0" HTHIY="1.0" HTZ="1.0" HUGE="1.0" HYLN="1.0" HZON="1.0" IDEX="1.0" IDXX="1.0" IGSB="1.0" IMTE="1.0" INFI="1.0" INFY="1.0" ING="1.0" INO="1.0" INPX="1.0" INTC="1.0" INTU="1.0" INUV="1.0" INVO="1.0" INVU="1.0" IWM="1.0" IZEA="1.0" JE="1.0" JENGQ="1.0" JFIN="1.0" JOB="1.0" K="1.0" KBR="1.0" KEYS="1.0" KMPH="1.0" KMX="1.0" KR="1.0" LAZR="1.0" LCI="1.0" LCTX="1.0" LEAF="1.0" LIVX="1.0" LKQ="1.0" LODE="1.0" LRTNF="1.0" LUV="1.0" MARA="1.0" MBT="1.0" MDII="1.0" MESA="1.0" METX="1.0" MFGP="1.0" MMDA1="1.0" MRIN="1.0" MSFT="1.0" MTEM="1.0" MU="1.0" MVIS="1.0" MX="1.0" MYO="1.0" MYSZ="1.0" NCLH="1.0" NDX="1.0" NEOS="1.0" NGD="1.0" NGL="1.0" NIO="1.0" NLOK="1.0" NLSN="1.0" NLSP="1.0" NLST="1.0" NNVC="1.0" NOK="1.0" NOV="1.0" NQ="1.0" NSLP="1.0" NTP="1.0" NUZE="1.0" NVDA="1.0" NXE="1.0" OCGN="1.0" OGEN="1.0" OGI="1.0" OHI="1.0" OI="1.0" OLO="1.0" OPEN="1.0" OPGN="1.0" ORCL="1.0" ORMP="1.0" OTIS="1.0" OVID="1.0" PAA="1.0" PAAS="1.0" PERI="1.0" PFF="1.0" PGX="1.0" PHM="1.0" PNC="1.0" POTX="1.0" PPG="1.0" PPL="1.0" PTE="1.0" QQQ="1.0" QSR="1.0" RAD="1.0" RAIL="1.0" RIBT="1.0" RKT="1.0" RMO="1.0" RP="1.0" RPAY="1.0" RRD="1.0" RSX="1.0" RUT="1.0" RVLV="1.0" RYCEY="1.0" SAVA="1.0" SAVE="1.0" SGLB="1.0" SID="1.0" SIFY="1.0" SINO="1.0" SINT="1.0" SIOX="1.0" SIRI="1.0" SITC="1.0" SIVR="1.0" SJI="1.0" SKLZ="1.0" SKT="1.0" SLDB="1.0" SLQT="1.0" SNAP="1.0" SNCA="1.0" SNOA="1.0" SOGO="1.0" SOS="1.0" SPCB="1.0" SPD="1.0" SPRT="1.0" SPX="1.0" SPY="1.0" SQ="1.0" STON="1.0" SUNW="1.0" SWI="1.0" SWK="1.0" T="1.0" TAP="1.0" TGTX="1.0" TH="1.0" THTX="1.0" TSIA="1.0" TSLA="1.0" TSLAX="1.0" TZA="1.0" U="1.0" UAL="1.0" UAMY="1.0" UEC="1.0" UIS="1.0" ULTA="1.0" USAC="1.0" USWS="1.0" UTZ="1.0" UUUU="1.0" UXIN="1.0" VALE="1.0" VEU="1.0" VIX="1.0" VJET="1.0" VSTM="1.0" VTRS="1.0" VVOS="1.0" VWO="1.0" WAFU="1.0" WETF="1.0" WKEY="1.0" WKHS="1.0" X="1.0" XELA="1.0" XERS="1.0" XL="1.0" XLP="1.0" XLU="1.0" XTLB="1.0" YGMZ="1.0" ZKIN="1.0" ZM="1.0"/>
              </TRG_0>
              <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-1.0" TRG_TIF="DAY">
                <OFFSET_PER_SYMBOL AA="-1.0" AAL="-1.0" AAP="-1.0" AAPL="-1.0" ABG="-1.0" ABML="-1.0" ACER="-1.0" ADBE="-1.0" ADMP="-1.0" AEG="-1.0" AEHL="-1.0" AFI="-1.0" AJRD="-1.0" AKU="-1.0" ALEC="-1.0" AMC="-1.0" AMCR="-1.0" AMD="-1.0" AMRS="-1.0" AMTX="-1.0" AMZN="-1.0" ANIX="-1.0" ANPC="-1.0" ANTE="-1.0" AP="-1.0" APOP="-1.0" APTO="-1.0" AR="-1.0" AREC="-1.0" ARES="-1.0" ARLO="-1.0" ASLEW="-1.0" ATHM="-1.0" ATIF="-1.0" ATNF="-1.0" AUY="-1.0" AVCO="-1.0" AXL="-1.0" AZN="-1.0" AZRX="-1.0" BA="-1.0" BABA="-1.0" BBBY="-1.0" BBD="-1.0" BBDC="-1.0" BFT="-1.0" BILI="-1.0" BLIN="-1.0" BMY="-1.0" BOX="-1.0" BP="-1.0" BRQS="-1.0" BSGM="-1.0" BURL="-1.0" BWAY="-1.0" BXRX="-1.0" BYFC="-1.0" CAKE="-1.0" CAL="-1.0" CCI="-1.0" CCIV="-1.0" CCJ="-1.0" CEQPP="-1.0" CHNG="-1.0" CHX="-1.0" CIDM="-1.0" CIIC="-1.0" CLBS="-1.0" CLDR="-1.0" CLEU="-1.0" CLSN="-1.0" CLVS="-1.0" CNNE="-1.0" COHN="-1.0" COMP="-1.0" CPRX="-1.0" CRBP="-1.0" CRTD="-1.0" CSCO="-1.0" CTIC="-1.0" CUB="-1.0" CVX="-1.0" DCTH="-1.0" DHT="-1.0" DIS="-1.0" DISCK="-1.0" DNN="-1.0" DOX="-1.0" DPW="-1.0" DS="-1.0" DSKE="-1.0" DTSS="-1.0" EARS="-1.0" EBS="-1.0" EDTK="-1.0" EMAN="-1.0" ENPH="-1.0" ETSY="-1.0" EURN="-1.0" EVRG="-1.0" EW="-1.0" EWA="-1.0" EXEL="-1.0" EYE="-1.0" EYES="-1.0" FAST="-1.0" FB="-1.0" FCAC="-1.0" FLR="-1.0" FLY="-1.0" FPRX="-1.0" FSLR="-1.0" FSR="-1.0" FUSE="-1.0" FUV="-1.0" GEL="-1.0" GLOP="-1.0" GME="-1.0" GMER="-1.0" GNCA="-1.0" GOCO="-1.0" GOED="-1.0" HBI="-1.0" HCHC="-1.0" HENKY="-1.0" HPE="-1.0" HPQ="-1.0" HPR="-1.0" HTBX="-1.0" HTHIY="-1.0" HTZ="-1.0" HUGE="-1.0" HYLN="-1.0" HZON="-1.0" IDEX="-1.0" IDXX="-1.0" IGSB="-1.0" IMTE="-1.0" INFI="-1.0" INFY="-1.0" ING="-1.0" INO="-1.0" INPX="-1.0" INTC="-1.0" INTU="-1.0" INUV="-1.0" INVO="-1.0" INVU="-1.0" IWM="-1.0" IZEA="-1.0" JE="-1.0" JENGQ="-1.0" JFIN="-1.0" JOB="-1.0" K="-1.0" KBR="-1.0" KEYS="-1.0" KMPH="-1.0" KMX="-1.0" KR="-1.0" LAZR="-1.0" LCI="-1.0" LCTX="-1.0" LEAF="-1.0" LIVX="-1.0" LKQ="-1.0" LODE="-1.0" LRTNF="-1.0" LUV="-1.0" MARA="-1.0" MBT="-1.0" MDII="-1.0" MESA="-1.0" METX="-1.0" MFGP="-1.0" MMDA1="-1.0" MRIN="-1.0" MSFT="-1.0" MTEM="-1.0" MU="-1.0" MVIS="-1.0" MX="-1.0" MYO="-1.0" MYSZ="-1.0" NCLH="-1.0" NDX="-1.0" NEOS="-1.0" NGD="-1.0" NGL="-1.0" NIO="-1.0" NLOK="-1.0" NLSN="-1.0" NLSP="-1.0" NLST="-1.0" NNVC="-1.0" NOK="-1.0" NOV="-1.0" NQ="-1.0" NSLP="-1.0" NTP="-1.0" NUZE="-1.0" NVDA="-1.0" NXE="-1.0" OCGN="-1.0" OGEN="-1.0" OGI="-1.0" OHI="-1.0" OI="-1.0" OLO="-1.0" OPEN="-1.0" OPGN="-1.0" ORCL="-1.0" ORMP="-1.0" OTIS="-1.0" OVID="-1.0" PAA="-1.0" PAAS="-1.0" PERI="-1.0" PFF="-1.0" PGX="-1.0" PHM="-1.0" PNC="-1.0" POTX="-1.0" PPG="-1.0" PPL="-1.0" PTE="-1.0" QQQ="-1.0" QSR="-1.0" RAD="-1.0" RAIL="-1.0" RIBT="-1.0" RKT="-1.0" RMO="-1.0" RP="-1.0" RPAY="-1.0" RRD="-1.0" RSX="-1.0" RUT="-1.0" RVLV="-1.0" RYCEY="-1.0" SAVA="-1.0" SAVE="-1.0" SGLB="-1.0" SID="-1.0" SIFY="-1.0" SINO="-1.0" SINT="-1.0" SIOX="-1.0" SIRI="-1.0" SITC="-1.0" SIVR="-1.0" SJI="-1.0" SKLZ="-1.0" SKT="-1.0" SLDB="-1.0" SLQT="-1.0" SNAP="-1.0" SNCA="-1.0" SNOA="-1.0" SOGO="-1.0" SOS="-1.0" SPCB="-1.0" SPD="-1.0" SPRT="-1.0" SPX="-1.0" SPY="-1.0" SQ="-1.0" STON="-1.0" SUNW="-1.0" SWI="-1.0" SWK="-1.0" T="-1.0" TAP="-1.0" TGTX="-1.0" TH="-1.0" THTX="-1.0" TSIA="-1.0" TSLA="-1.0" TSLAX="-1.0" TZA="-1.0" U="-1.0" UAL="-1.0" UAMY="-1.0" UEC="-1.0" UIS="-1.0" ULTA="-1.0" USAC="-1.0" USWS="-1.0" UTZ="-1.0" UUUU="-1.0" UXIN="-1.0" VALE="-1.0" VEU="-1.0" VIX="-1.0" VJET="-1.0" VSTM="-1.0" VTRS="-1.0" VVOS="-1.0" VWO="-1.0" WAFU="-1.0" WETF="-1.0" WKEY="-1.0" WKHS="-1.0" X="-1.0" XELA="-1.0" XERS="-1.0" XL="-1.0" XLP="-1.0" XLU="-1.0" XTLB="-1.0" YGMZ="-1.0" ZKIN="-1.0" ZM="-1.0"/>
              </TRG_1>
              <_2>
                <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="2.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AA="2.0" AAL="2.0" AAP="2.0" AAPL="2.0" ABG="2.0" ABML="2.0" ACER="2.0" ADBE="2.0" ADMP="2.0" AEG="2.0" AEHL="2.0" AFI="2.0" AJRD="2.0" AKU="2.0" ALEC="2.0" AMC="2.0" AMCR="2.0" AMD="2.0" AMRS="2.0" AMTX="2.0" AMZN="2.0" ANIX="2.0" ANPC="2.0" ANTE="2.0" AP="2.0" APOP="2.0" APTO="2.0" AR="2.0" AREC="2.0" ARES="2.0" ARLO="2.0" ASLEW="2.0" ATHM="2.0" ATIF="2.0" ATNF="2.0" AUY="2.0" AVCO="2.0" AXL="2.0" AZN="2.0" AZRX="2.0" BA="2.0" BABA="2.0" BBBY="2.0" BBD="2.0" BBDC="2.0" BFT="2.0" BILI="2.0" BLIN="2.0" BMY="2.0" BOX="2.0" BP="2.0" BRQS="2.0" BSGM="2.0" BURL="2.0" BWAY="2.0" BXRX="2.0" BYFC="2.0" CAKE="2.0" CAL="2.0" CCI="2.0" CCIV="2.0" CCJ="2.0" CEQPP="2.0" CHNG="2.0" CHX="2.0" CIDM="2.0" CIIC="2.0" CLBS="2.0" CLDR="2.0" CLEU="2.0" CLSN="2.0" CLVS="2.0" CNNE="2.0" COHN="2.0" COMP="2.0" CPRX="2.0" CRBP="2.0" CRTD="2.0" CSCO="2.0" CTIC="2.0" CUB="2.0" CVX="2.0" DCTH="2.0" DHT="2.0" DIS="2.0" DISCK="2.0" DNN="2.0" DOX="2.0" DPW="2.0" DS="2.0" DSKE="2.0" DTSS="2.0" EARS="2.0" EBS="2.0" EDTK="2.0" EMAN="2.0" ENPH="2.0" ETSY="2.0" EURN="2.0" EVRG="2.0" EW="2.0" EWA="2.0" EXEL="2.0" EYE="2.0" EYES="2.0" FAST="2.0" FB="2.0" FCAC="2.0" FLR="2.0" FLY="2.0" FPRX="2.0" FSLR="2.0" FSR="2.0" FUSE="2.0" FUV="2.0" GEL="2.0" GLOP="2.0" GME="2.0" GMER="2.0" GNCA="2.0" GOCO="2.0" GOED="2.0" HBI="2.0" HCHC="2.0" HENKY="2.0" HPE="2.0" HPQ="2.0" HPR="2.0" HTBX="2.0" HTHIY="2.0" HTZ="2.0" HUGE="2.0" HYLN="2.0" HZON="2.0" IDEX="2.0" IDXX="2.0" IGSB="2.0" IMTE="2.0" INFI="2.0" INFY="2.0" ING="2.0" INO="2.0" INPX="2.0" INTC="2.0" INTU="2.0" INUV="2.0" INVO="2.0" INVU="2.0" IWM="2.0" IZEA="2.0" JE="2.0" JENGQ="2.0" JFIN="2.0" JOB="2.0" K="2.0" KBR="2.0" KEYS="2.0" KMPH="2.0" KMX="2.0" KR="2.0" LAZR="2.0" LCI="2.0" LCTX="2.0" LEAF="2.0" LIVX="2.0" LKQ="2.0" LODE="2.0" LRTNF="2.0" LUV="2.0" MARA="2.0" MBT="2.0" MDII="2.0" MESA="2.0" METX="2.0" MFGP="2.0" MMDA1="2.0" MRIN="2.0" MSFT="2.0" MTEM="2.0" MU="2.0" MVIS="2.0" MX="2.0" MYO="2.0" MYSZ="2.0" NCLH="2.0" NDX="2.0" NEOS="2.0" NGD="2.0" NGL="2.0" NIO="2.0" NLOK="2.0" NLSN="2.0" NLSP="2.0" NLST="2.0" NNVC="2.0" NOK="2.0" NOV="2.0" NQ="2.0" NSLP="2.0" NTP="2.0" NUZE="2.0" NVDA="2.0" NXE="2.0" OCGN="2.0" OGEN="2.0" OGI="2.0" OHI="2.0" OI="2.0" OLO="2.0" OPEN="2.0" OPGN="2.0" ORCL="2.0" ORMP="2.0" OTIS="2.0" OVID="2.0" PAA="2.0" PAAS="2.0" PERI="2.0" PFF="2.0" PGX="2.0" PHM="2.0" PNC="2.0" POTX="2.0" PPG="2.0" PPL="2.0" PTE="2.0" QQQ="2.0" QSR="2.0" RAD="2.0" RAIL="2.0" RIBT="2.0" RKT="2.0" RMO="2.0" RP="2.0" RPAY="2.0" RRD="2.0" RSX="2.0" RUT="2.0" RVLV="2.0" RYCEY="2.0" SAVA="2.0" SAVE="2.0" SGLB="2.0" SID="2.0" SIFY="2.0" SINO="2.0" SINT="2.0" SIOX="2.0" SIRI="2.0" SITC="2.0" SIVR="2.0" SJI="2.0" SKLZ="2.0" SKT="2.0" SLDB="2.0" SLQT="2.0" SNAP="2.0" SNCA="2.0" SNOA="2.0" SOGO="2.0" SOS="2.0" SPCB="2.0" SPD="2.0" SPRT="2.0" SPX="2.0" SPY="2.0" SQ="2.0" STON="2.0" SUNW="2.0" SWI="2.0" SWK="2.0" T="2.0" TAP="2.0" TGTX="2.0" TH="2.0" THTX="2.0" TSIA="2.0" TSLA="2.0" TSLAX="2.0" TZA="2.0" U="2.0" UAL="2.0" UAMY="2.0" UEC="2.0" UIS="2.0" ULTA="2.0" USAC="2.0" USWS="2.0" UTZ="2.0" UUUU="2.0" UXIN="2.0" VALE="2.0" VEU="2.0" VIX="2.0" VJET="2.0" VSTM="2.0" VTRS="2.0" VVOS="2.0" VWO="2.0" WAFU="2.0" WETF="2.0" WKEY="2.0" WKHS="2.0" X="2.0" XELA="2.0" XERS="2.0" XL="2.0" XLP="2.0" XLU="2.0" XTLB="2.0" YGMZ="2.0" ZKIN="2.0" ZM="2.0"/>
                </TRG_0>
                <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-2.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AA="-2.0" AAL="-2.0" AAP="-2.0" AAPL="-2.0" ABG="-2.0" ABML="-2.0" ACER="-2.0" ADBE="-2.0" ADMP="-2.0" AEG="-2.0" AEHL="-2.0" AFI="-2.0" AJRD="-2.0" AKU="-2.0" ALEC="-2.0" AMC="-2.0" AMCR="-2.0" AMD="-2.0" AMRS="-2.0" AMTX="-2.0" AMZN="-2.0" ANIX="-2.0" ANPC="-2.0" ANTE="-2.0" AP="-2.0" APOP="-2.0" APTO="-2.0" AR="-2.0" AREC="-2.0" ARES="-2.0" ARLO="-2.0" ASLEW="-2.0" ATHM="-2.0" ATIF="-2.0" ATNF="-2.0" AUY="-2.0" AVCO="-2.0" AXL="-2.0" AZN="-2.0" AZRX="-2.0" BA="-2.0" BABA="-2.0" BBBY="-2.0" BBD="-2.0" BBDC="-2.0" BFT="-2.0" BILI="-2.0" BLIN="-2.0" BMY="-2.0" BOX="-2.0" BP="-2.0" BRQS="-2.0" BSGM="-2.0" BURL="-2.0" BWAY="-2.0" BXRX="-2.0" BYFC="-2.0" CAKE="-2.0" CAL="-2.0" CCI="-2.0" CCIV="-2.0" CCJ="-2.0" CEQPP="-2.0" CHNG="-2.0" CHX="-2.0" CIDM="-2.0" CIIC="-2.0" CLBS="-2.0" CLDR="-2.0" CLEU="-2.0" CLSN="-2.0" CLVS="-2.0" CNNE="-2.0" COHN="-2.0" COMP="-2.0" CPRX="-2.0" CRBP="-2.0" CRTD="-2.0" CSCO="-2.0" CTIC="-2.0" CUB="-2.0" CVX="-2.0" DCTH="-2.0" DHT="-2.0" DIS="-2.0" DISCK="-2.0" DNN="-2.0" DOX="-2.0" DPW="-2.0" DS="-2.0" DSKE="-2.0" DTSS="-2.0" EARS="-2.0" EBS="-2.0" EDTK="-2.0" EMAN="-2.0" ENPH="-2.0" ETSY="-2.0" EURN="-2.0" EVRG="-2.0" EW="-2.0" EWA="-2.0" EXEL="-2.0" EYE="-2.0" EYES="-2.0" FAST="-2.0" FB="-2.0" FCAC="-2.0" FLR="-2.0" FLY="-2.0" FPRX="-2.0" FSLR="-2.0" FSR="-2.0" FUSE="-2.0" FUV="-2.0" GEL="-2.0" GLOP="-2.0" GME="-2.0" GMER="-2.0" GNCA="-2.0" GOCO="-2.0" GOED="-2.0" HBI="-2.0" HCHC="-2.0" HENKY="-2.0" HPE="-2.0" HPQ="-2.0" HPR="-2.0" HTBX="-2.0" HTHIY="-2.0" HTZ="-2.0" HUGE="-2.0" HYLN="-2.0" HZON="-2.0" IDEX="-2.0" IDXX="-2.0" IGSB="-2.0" IMTE="-2.0" INFI="-2.0" INFY="-2.0" ING="-2.0" INO="-2.0" INPX="-2.0" INTC="-2.0" INTU="-2.0" INUV="-2.0" INVO="-2.0" INVU="-2.0" IWM="-2.0" IZEA="-2.0" JE="-2.0" JENGQ="-2.0" JFIN="-2.0" JOB="-2.0" K="-2.0" KBR="-2.0" KEYS="-2.0" KMPH="-2.0" KMX="-2.0" KR="-2.0" LAZR="-2.0" LCI="-2.0" LCTX="-2.0" LEAF="-2.0" LIVX="-2.0" LKQ="-2.0" LODE="-2.0" LRTNF="-2.0" LUV="-2.0" MARA="-2.0" MBT="-2.0" MDII="-2.0" MESA="-2.0" METX="-2.0" MFGP="-2.0" MMDA1="-2.0" MRIN="-2.0" MSFT="-2.0" MTEM="-2.0" MU="-2.0" MVIS="-2.0" MX="-2.0" MYO="-2.0" MYSZ="-2.0" NCLH="-2.0" NDX="-2.0" NEOS="-2.0" NGD="-2.0" NGL="-2.0" NIO="-2.0" NLOK="-2.0" NLSN="-2.0" NLSP="-2.0" NLST="-2.0" NNVC="-2.0" NOK="-2.0" NOV="-2.0" NQ="-2.0" NSLP="-2.0" NTP="-2.0" NUZE="-2.0" NVDA="-2.0" NXE="-2.0" OCGN="-2.0" OGEN="-2.0" OGI="-2.0" OHI="-2.0" OI="-2.0" OLO="-2.0" OPEN="-2.0" OPGN="-2.0" ORCL="-2.0" ORMP="-2.0" OTIS="-2.0" OVID="-2.0" PAA="-2.0" PAAS="-2.0" PERI="-2.0" PFF="-2.0" PGX="-2.0" PHM="-2.0" PNC="-2.0" POTX="-2.0" PPG="-2.0" PPL="-2.0" PTE="-2.0" QQQ="-2.0" QSR="-2.0" RAD="-2.0" RAIL="-2.0" RIBT="-2.0" RKT="-2.0" RMO="-2.0" RP="-2.0" RPAY="-2.0" RRD="-2.0" RSX="-2.0" RUT="-2.0" RVLV="-2.0" RYCEY="-2.0" SAVA="-2.0" SAVE="-2.0" SGLB="-2.0" SID="-2.0" SIFY="-2.0" SINO="-2.0" SINT="-2.0" SIOX="-2.0" SIRI="-2.0" SITC="-2.0" SIVR="-2.0" SJI="-2.0" SKLZ="-2.0" SKT="-2.0" SLDB="-2.0" SLQT="-2.0" SNAP="-2.0" SNCA="-2.0" SNOA="-2.0" SOGO="-2.0" SOS="-2.0" SPCB="-2.0" SPD="-2.0" SPRT="-2.0" SPX="-2.0" SPY="-2.0" SQ="-2.0" STON="-2.0" SUNW="-2.0" SWI="-2.0" SWK="-2.0" T="-2.0" TAP="-2.0" TGTX="-2.0" TH="-2.0" THTX="-2.0" TSIA="-2.0" TSLA="-2.0" TSLAX="-2.0" TZA="-2.0" U="-2.0" UAL="-2.0" UAMY="-2.0" UEC="-2.0" UIS="-2.0" ULTA="-2.0" USAC="-2.0" USWS="-2.0" UTZ="-2.0" UUUU="-2.0" UXIN="-2.0" VALE="-2.0" VEU="-2.0" VIX="-2.0" VJET="-2.0" VSTM="-2.0" VTRS="-2.0" VVOS="-2.0" VWO="-2.0" WAFU="-2.0" WETF="-2.0" WKEY="-2.0" WKHS="-2.0" X="-2.0" XELA="-2.0" XERS="-2.0" XL="-2.0" XLP="-2.0" XLU="-2.0" XTLB="-2.0" YGMZ="-2.0" ZKIN="-2.0" ZM="-2.0"/>
                </TRG_1>
              </_2>
              <_3>
                <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="3.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AA="3.0" AAL="3.0" AAP="3.0" AAPL="3.0" ABG="3.0" ABML="3.0" ACER="3.0" ADBE="3.0" ADMP="3.0" AEG="3.0" AEHL="3.0" AFI="3.0" AJRD="3.0" AKU="3.0" ALEC="3.0" AMC="3.0" AMCR="3.0" AMD="3.0" AMRS="3.0" AMTX="3.0" AMZN="3.0" ANIX="3.0" ANPC="3.0" ANTE="3.0" AP="3.0" APOP="3.0" APTO="3.0" AR="3.0" AREC="3.0" ARES="3.0" ARLO="3.0" ASLEW="3.0" ATHM="3.0" ATIF="3.0" ATNF="3.0" AUY="3.0" AVCO="3.0" AXL="3.0" AZN="3.0" AZRX="3.0" BA="3.0" BABA="3.0" BBBY="3.0" BBD="3.0" BBDC="3.0" BFT="3.0" BILI="3.0" BLIN="3.0" BMY="3.0" BOX="3.0" BP="3.0" BRQS="3.0" BSGM="3.0" BURL="3.0" BWAY="3.0" BXRX="3.0" BYFC="3.0" CAKE="3.0" CAL="3.0" CCI="3.0" CCIV="3.0" CCJ="3.0" CEQPP="3.0" CHNG="3.0" CHX="3.0" CIDM="3.0" CIIC="3.0" CLBS="3.0" CLDR="3.0" CLEU="3.0" CLSN="3.0" CLVS="3.0" CNNE="3.0" COHN="3.0" COMP="3.0" CPRX="3.0" CRBP="3.0" CRTD="3.0" CSCO="3.0" CTIC="3.0" CUB="3.0" CVX="3.0" DCTH="3.0" DHT="3.0" DIS="3.0" DISCK="3.0" DNN="3.0" DOX="3.0" DPW="3.0" DS="3.0" DSKE="3.0" DTSS="3.0" EARS="3.0" EBS="3.0" EDTK="3.0" EMAN="3.0" ENPH="3.0" ETSY="3.0" EURN="3.0" EVRG="3.0" EW="3.0" EWA="3.0" EXEL="3.0" EYE="3.0" EYES="3.0" FAST="3.0" FB="3.0" FCAC="3.0" FLR="3.0" FLY="3.0" FPRX="3.0" FSLR="3.0" FSR="3.0" FUSE="3.0" FUV="3.0" GEL="3.0" GLOP="3.0" GME="3.0" GMER="3.0" GNCA="3.0" GOCO="3.0" GOED="3.0" HBI="3.0" HCHC="3.0" HENKY="3.0" HPE="3.0" HPQ="3.0" HPR="3.0" HTBX="3.0" HTHIY="3.0" HTZ="3.0" HUGE="3.0" HYLN="3.0" HZON="3.0" IDEX="3.0" IDXX="3.0" IGSB="3.0" IMTE="3.0" INFI="3.0" INFY="3.0" ING="3.0" INO="3.0" INPX="3.0" INTC="3.0" INTU="3.0" INUV="3.0" INVO="3.0" INVU="3.0" IWM="3.0" IZEA="3.0" JE="3.0" JENGQ="3.0" JFIN="3.0" JOB="3.0" K="3.0" KBR="3.0" KEYS="3.0" KMPH="3.0" KMX="3.0" KR="3.0" LAZR="3.0" LCI="3.0" LCTX="3.0" LEAF="3.0" LIVX="3.0" LKQ="3.0" LODE="3.0" LRTNF="3.0" LUV="3.0" MARA="3.0" MBT="3.0" MDII="3.0" MESA="3.0" METX="3.0" MFGP="3.0" MMDA1="3.0" MRIN="3.0" MSFT="3.0" MTEM="3.0" MU="3.0" MVIS="3.0" MX="3.0" MYO="3.0" MYSZ="3.0" NCLH="3.0" NDX="3.0" NEOS="3.0" NGD="3.0" NGL="3.0" NIO="3.0" NLOK="3.0" NLSN="3.0" NLSP="3.0" NLST="3.0" NNVC="3.0" NOK="3.0" NOV="3.0" NQ="3.0" NSLP="3.0" NTP="3.0" NUZE="3.0" NVDA="3.0" NXE="3.0" OCGN="3.0" OGEN="3.0" OGI="3.0" OHI="3.0" OI="3.0" OLO="3.0" OPEN="3.0" OPGN="3.0" ORCL="3.0" ORMP="3.0" OTIS="3.0" OVID="3.0" PAA="3.0" PAAS="3.0" PERI="3.0" PFF="3.0" PGX="3.0" PHM="3.0" PNC="3.0" POTX="3.0" PPG="3.0" PPL="3.0" PTE="3.0" QQQ="3.0" QSR="3.0" RAD="3.0" RAIL="3.0" RIBT="3.0" RKT="3.0" RMO="3.0" RP="3.0" RPAY="3.0" RRD="3.0" RSX="3.0" RUT="3.0" RVLV="3.0" RYCEY="3.0" SAVA="3.0" SAVE="3.0" SGLB="3.0" SID="3.0" SIFY="3.0" SINO="3.0" SINT="3.0" SIOX="3.0" SIRI="3.0" SITC="3.0" SIVR="3.0" SJI="3.0" SKLZ="3.0" SKT="3.0" SLDB="3.0" SLQT="3.0" SNAP="3.0" SNCA="3.0" SNOA="3.0" SOGO="3.0" SOS="3.0" SPCB="3.0" SPD="3.0" SPRT="3.0" SPX="3.0" SPY="3.0" SQ="3.0" STON="3.0" SUNW="3.0" SWI="3.0" SWK="3.0" T="3.0" TAP="3.0" TGTX="3.0" TH="3.0" THTX="3.0" TSIA="3.0" TSLA="3.0" TSLAX="3.0" TZA="3.0" U="3.0" UAL="3.0" UAMY="3.0" UEC="3.0" UIS="3.0" ULTA="3.0" USAC="3.0" USWS="3.0" UTZ="3.0" UUUU="3.0" UXIN="3.0" VALE="3.0" VEU="3.0" VIX="3.0" VJET="3.0" VSTM="3.0" VTRS="3.0" VVOS="3.0" VWO="3.0" WAFU="3.0" WETF="3.0" WKEY="3.0" WKHS="3.0" X="3.0" XELA="3.0" XERS="3.0" XL="3.0" XLP="3.0" XLU="3.0" XTLB="3.0" YGMZ="3.0" ZKIN="3.0" ZM="3.0"/>
                </TRG_0>
                <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-3.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AA="-3.0" AAL="-3.0" AAP="-3.0" AAPL="-3.0" ABG="-3.0" ABML="-3.0" ACER="-3.0" ADBE="-3.0" ADMP="-3.0" AEG="-3.0" AEHL="-3.0" AFI="-3.0" AJRD="-3.0" AKU="-3.0" ALEC="-3.0" AMC="-3.0" AMCR="-3.0" AMD="-3.0" AMRS="-3.0" AMTX="-3.0" AMZN="-3.0" ANIX="-3.0" ANPC="-3.0" ANTE="-3.0" AP="-3.0" APOP="-3.0" APTO="-3.0" AR="-3.0" AREC="-3.0" ARES="-3.0" ARLO="-3.0" ASLEW="-3.0" ATHM="-3.0" ATIF="-3.0" ATNF="-3.0" AUY="-3.0" AVCO="-3.0" AXL="-3.0" AZN="-3.0" AZRX="-3.0" BA="-3.0" BABA="-3.0" BBBY="-3.0" BBD="-3.0" BBDC="-3.0" BFT="-3.0" BILI="-3.0" BLIN="-3.0" BMY="-3.0" BOX="-3.0" BP="-3.0" BRQS="-3.0" BSGM="-3.0" BURL="-3.0" BWAY="-3.0" BXRX="-3.0" BYFC="-3.0" CAKE="-3.0" CAL="-3.0" CCI="-3.0" CCIV="-3.0" CCJ="-3.0" CEQPP="-3.0" CHNG="-3.0" CHX="-3.0" CIDM="-3.0" CIIC="-3.0" CLBS="-3.0" CLDR="-3.0" CLEU="-3.0" CLSN="-3.0" CLVS="-3.0" CNNE="-3.0" COHN="-3.0" COMP="-3.0" CPRX="-3.0" CRBP="-3.0" CRTD="-3.0" CSCO="-3.0" CTIC="-3.0" CUB="-3.0" CVX="-3.0" DCTH="-3.0" DHT="-3.0" DIS="-3.0" DISCK="-3.0" DNN="-3.0" DOX="-3.0" DPW="-3.0" DS="-3.0" DSKE="-3.0" DTSS="-3.0" EARS="-3.0" EBS="-3.0" EDTK="-3.0" EMAN="-3.0" ENPH="-3.0" ETSY="-3.0" EURN="-3.0" EVRG="-3.0" EW="-3.0" EWA="-3.0" EXEL="-3.0" EYE="-3.0" EYES="-3.0" FAST="-3.0" FB="-3.0" FCAC="-3.0" FLR="-3.0" FLY="-3.0" FPRX="-3.0" FSLR="-3.0" FSR="-3.0" FUSE="-3.0" FUV="-3.0" GEL="-3.0" GLOP="-3.0" GME="-3.0" GMER="-3.0" GNCA="-3.0" GOCO="-3.0" GOED="-3.0" HBI="-3.0" HCHC="-3.0" HENKY="-3.0" HPE="-3.0" HPQ="-3.0" HPR="-3.0" HTBX="-3.0" HTHIY="-3.0" HTZ="-3.0" HUGE="-3.0" HYLN="-3.0" HZON="-3.0" IDEX="-3.0" IDXX="-3.0" IGSB="-3.0" IMTE="-3.0" INFI="-3.0" INFY="-3.0" ING="-3.0" INO="-3.0" INPX="-3.0" INTC="-3.0" INTU="-3.0" INUV="-3.0" INVO="-3.0" INVU="-3.0" IWM="-3.0" IZEA="-3.0" JE="-3.0" JENGQ="-3.0" JFIN="-3.0" JOB="-3.0" K="-3.0" KBR="-3.0" KEYS="-3.0" KMPH="-3.0" KMX="-3.0" KR="-3.0" LAZR="-3.0" LCI="-3.0" LCTX="-3.0" LEAF="-3.0" LIVX="-3.0" LKQ="-3.0" LODE="-3.0" LRTNF="-3.0" LUV="-3.0" MARA="-3.0" MBT="-3.0" MDII="-3.0" MESA="-3.0" METX="-3.0" MFGP="-3.0" MMDA1="-3.0" MRIN="-3.0" MSFT="-3.0" MTEM="-3.0" MU="-3.0" MVIS="-3.0" MX="-3.0" MYO="-3.0" MYSZ="-3.0" NCLH="-3.0" NDX="-3.0" NEOS="-3.0" NGD="-3.0" NGL="-3.0" NIO="-3.0" NLOK="-3.0" NLSN="-3.0" NLSP="-3.0" NLST="-3.0" NNVC="-3.0" NOK="-3.0" NOV="-3.0" NQ="-3.0" NSLP="-3.0" NTP="-3.0" NUZE="-3.0" NVDA="-3.0" NXE="-3.0" OCGN="-3.0" OGEN="-3.0" OGI="-3.0" OHI="-3.0" OI="-3.0" OLO="-3.0" OPEN="-3.0" OPGN="-3.0" ORCL="-3.0" ORMP="-3.0" OTIS="-3.0" OVID="-3.0" PAA="-3.0" PAAS="-3.0" PERI="-3.0" PFF="-3.0" PGX="-3.0" PHM="-3.0" PNC="-3.0" POTX="-3.0" PPG="-3.0" PPL="-3.0" PTE="-3.0" QQQ="-3.0" QSR="-3.0" RAD="-3.0" RAIL="-3.0" RIBT="-3.0" RKT="-3.0" RMO="-3.0" RP="-3.0" RPAY="-3.0" RRD="-3.0" RSX="-3.0" RUT="-3.0" RVLV="-3.0" RYCEY="-3.0" SAVA="-3.0" SAVE="-3.0" SGLB="-3.0" SID="-3.0" SIFY="-3.0" SINO="-3.0" SINT="-3.0" SIOX="-3.0" SIRI="-3.0" SITC="-3.0" SIVR="-3.0" SJI="-3.0" SKLZ="-3.0" SKT="-3.0" SLDB="-3.0" SLQT="-3.0" SNAP="-3.0" SNCA="-3.0" SNOA="-3.0" SOGO="-3.0" SOS="-3.0" SPCB="-3.0" SPD="-3.0" SPRT="-3.0" SPX="-3.0" SPY="-3.0" SQ="-3.0" STON="-3.0" SUNW="-3.0" SWI="-3.0" SWK="-3.0" T="-3.0" TAP="-3.0" TGTX="-3.0" TH="-3.0" THTX="-3.0" TSIA="-3.0" TSLA="-3.0" TSLAX="-3.0" TZA="-3.0" U="-3.0" UAL="-3.0" UAMY="-3.0" UEC="-3.0" UIS="-3.0" ULTA="-3.0" USAC="-3.0" USWS="-3.0" UTZ="-3.0" UUUU="-3.0" UXIN="-3.0" VALE="-3.0" VEU="-3.0" VIX="-3.0" VJET="-3.0" VSTM="-3.0" VTRS="-3.0" VVOS="-3.0" VWO="-3.0" WAFU="-3.0" WETF="-3.0" WKEY="-3.0" WKHS="-3.0" X="-3.0" XELA="-3.0" XERS="-3.0" XL="-3.0" XLP="-3.0" XLU="-3.0" XTLB="-3.0" YGMZ="-3.0" ZKIN="-3.0" ZM="-3.0"/>
                </TRG_1>
              </_3>
            </TRADE>
          </CELL0>
          <CELL1 ROWSPANELWEIGHT="1.0" ROWWEIGHT0="1.5557851239669422" ROWWEIGHT1="0.44421487603305787" SELECTED_TYPE="CHART" SIDEBAR_IS_ACTIVE="true" SYMBOL="DCTH" SYMBOL_GROUP="2" TRADE_BUTTONS_MIGRATED="true">
            <ACTIVETRADER CELL_IDS="POSITION_BREAKDOWN;NET_POSITION;AVERAGE_PRICE;PL_OPEN;PL_DAY" COLUMNS="TRADE_AMOUNT:43:,BUY_ORDER:59:,BIDSIZE:20:,PRICE:69:,ASKSIZE:24:,SELL_ORDER:48:" ENABLED="true" SHOW_STUDY_MARKERS="false" SYMBOL="AAPL" SYMBOL_GROUP="2" SYNC_AT_AND_CHART_CROSSHAIR="true" VERTICAL="false" VISIBLE="false" WEIGHT="1.4930182599355533" ZOOMING_STEPS="1">
              <POSITION_SUMMARY_PANEL CELL_IDS="POSITION_BREAKDOWN;NET_POSITION;AVERAGE_PRICE;PL_OPEN;PL_DAY" ENABLED="true"/>
              <TRADE_BUTTONS_CONFIG CONFIGURATION_NAME="SINGLE" ORDER_RULES_SET="STOCK" ORDER_TYPE="LIMIT" OS_AUTO="false" OS_EXPANDED="false" OS_TIF="DAY" QTY="100.0" QTY_STEP="1.0" TEMPLATE="SINGLE" TRADE_BUTTONS="BUY_MKT;SELL_MKT;MULTI_CANCEL;REVERSE;FLAT;SECOND_LINE;QUANTITY_WITH_BUTTONS;ORDER_TEMPLATE;AUTO_SEND;ORDER_SETUP">
                <OCO_STOP>
                  <TRG_0 TRG_ENBL="true" TRG_LINK="ASK_BID" TRG_OFFSET_MODE="TICK" TRG_OT="STOP" TRG_SETUP="10.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL AAL="10.0" AAPL="10.0" AFI="10.0" AMC="10.0" AMD="10.0" AMZN="10.0" ANTE="10.0" ARLO="10.0" AXL="10.0" BBD="10.0" BMY="10.0" BSGM="10.0" BXRX="10.0" CCJ="10.0" CCL="10.0" CHNG="10.0" CHX="10.0" CIDM="10.0" CLBS="10.0" CLDR="10.0" CLSN="10.0" CRBP="10.0" CSCO="10.0" DIS="10.0" DISCK="10.0" DNN="10.0" DPW="10.0" DS="10.0" EMAN="10.0" ETSY="10.0" EW="10.0" EWA="10.0" FCAC="10.0" FSR="10.0" FUSE="10.0" GME="10.0" GOCO="10.0" HBI="10.0" HPQ="10.0" HPR="10.0" HTZ="10.0" HUGE="10.0" HYLN="10.0" IDEX="10.0" IGSB="10.0" INFI="10.0" INO="10.0" INTC="10.0" IZEA="10.0" JE="10.0" KEYS="10.0" LCI="10.0" LKQ="10.0" LUV="10.0" MBT="10.0" MDII="10.0" MMDA1="10.0" MRIN="10.0" NGD="10.0" NIO="10.0" NLOK="10.0" NLSN="10.0" NNVC="10.0" NOK="10.0" OGI="10.0" OPEN="10.0" OPGN="10.0" PAAS="10.0" PERI="10.0" PGX="10.0" POTX="10.0" RAD="10.0" RKT="10.0" RP="10.0" RRD="10.0" RSX="10.0" SAVA="10.0" SIOX="10.0" SITC="10.0" SIVR="10.0" SKLZ="10.0" SLQT="10.0" SNAP="10.0" SOS="10.0" SQ="10.0" TGTX="10.0" TSLA="10.0" TZA="10.0" U="10.0" UAMY="10.0" UEC="10.0" USWS="10.0" UUUU="10.0" VJET="10.0" VTRS="10.0" WETF="10.0" X="10.0" XL="10.0" XLP="10.0" XLU="10.0" ZM="10.0"/>
                  </TRG_0>
                </OCO_STOP>
                <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="1.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AAL="1.0" AAPL="1.0" AFI="1.0" AMC="1.0" AMD="1.0" AMZN="1.0" ANTE="1.0" ARLO="1.0" AXL="1.0" BBD="1.0" BMY="1.0" BSGM="1.0" BXRX="1.0" CCJ="1.0" CCL="1.0" CHNG="1.0" CHX="1.0" CIDM="1.0" CLBS="1.0" CLDR="1.0" CLSN="1.0" CRBP="1.0" CSCO="1.0" DIS="1.0" DISCK="1.0" DNN="1.0" DPW="1.0" DS="1.0" EMAN="1.0" ETSY="1.0" EW="1.0" EWA="1.0" FCAC="1.0" FSR="1.0" FUSE="1.0" GME="1.0" GOCO="1.0" HBI="1.0" HPQ="1.0" HPR="1.0" HTZ="1.0" HUGE="1.0" HYLN="1.0" IDEX="1.0" IGSB="1.0" INFI="1.0" INO="1.0" INTC="1.0" IZEA="1.0" JE="1.0" KEYS="1.0" LCI="1.0" LKQ="1.0" LUV="1.0" MBT="1.0" MDII="1.0" MMDA1="1.0" MRIN="1.0" NGD="1.0" NIO="1.0" NLOK="1.0" NLSN="1.0" NNVC="1.0" NOK="1.0" OGI="1.0" OPEN="1.0" OPGN="1.0" PAAS="1.0" PERI="1.0" PGX="1.0" POTX="1.0" RAD="1.0" RKT="1.0" RP="1.0" RRD="1.0" RSX="1.0" SAVA="1.0" SIOX="1.0" SITC="1.0" SIVR="1.0" SKLZ="1.0" SLQT="1.0" SNAP="1.0" SOS="1.0" SQ="1.0" TGTX="1.0" TSLA="1.0" TZA="1.0" U="1.0" UAMY="1.0" UEC="1.0" USWS="1.0" UUUU="1.0" VJET="1.0" VTRS="1.0" WETF="1.0" X="1.0" XL="1.0" XLP="1.0" XLU="1.0" ZM="1.0"/>
                </TRG_0>
                <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-1.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AAL="-1.0" AAPL="-1.0" AFI="-1.0" AMC="-1.0" AMD="-1.0" AMZN="-1.0" ANTE="-1.0" ARLO="-1.0" AXL="-1.0" BBD="-1.0" BMY="-1.0" BSGM="-1.0" BXRX="-1.0" CCJ="-1.0" CCL="-1.0" CHNG="-1.0" CHX="-1.0" CIDM="-1.0" CLBS="-1.0" CLDR="-1.0" CLSN="-1.0" CRBP="-1.0" CSCO="-1.0" DIS="-1.0" DISCK="-1.0" DNN="-1.0" DPW="-1.0" DS="-1.0" EMAN="-1.0" ETSY="-1.0" EW="-1.0" EWA="-1.0" FCAC="-1.0" FSR="-1.0" FUSE="-1.0" GME="-1.0" GOCO="-1.0" HBI="-1.0" HPQ="-1.0" HPR="-1.0" HTZ="-1.0" HUGE="-1.0" HYLN="-1.0" IDEX="-1.0" IGSB="-1.0" INFI="-1.0" INO="-1.0" INTC="-1.0" IZEA="-1.0" JE="-1.0" KEYS="-1.0" LCI="-1.0" LKQ="-1.0" LUV="-1.0" MBT="-1.0" MDII="-1.0" MMDA1="-1.0" MRIN="-1.0" NGD="-1.0" NIO="-1.0" NLOK="-1.0" NLSN="-1.0" NNVC="-1.0" NOK="-1.0" OGI="-1.0" OPEN="-1.0" OPGN="-1.0" PAAS="-1.0" PERI="-1.0" PGX="-1.0" POTX="-1.0" RAD="-1.0" RKT="-1.0" RP="-1.0" RRD="-1.0" RSX="-1.0" SAVA="-1.0" SIOX="-1.0" SITC="-1.0" SIVR="-1.0" SKLZ="-1.0" SLQT="-1.0" SNAP="-1.0" SOS="-1.0" SQ="-1.0" TGTX="-1.0" TSLA="-1.0" TZA="-1.0" U="-1.0" UAMY="-1.0" UEC="-1.0" USWS="-1.0" UUUU="-1.0" VJET="-1.0" VTRS="-1.0" WETF="-1.0" X="-1.0" XL="-1.0" XLP="-1.0" XLU="-1.0" ZM="-1.0"/>
                </TRG_1>
                <_2>
                  <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="2.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL AAL="2.0" AAPL="2.0" AFI="2.0" AMC="2.0" AMD="2.0" AMZN="2.0" ANTE="2.0" ARLO="2.0" AXL="2.0" BBD="2.0" BMY="2.0" BSGM="2.0" BXRX="2.0" CCJ="2.0" CCL="2.0" CHNG="2.0" CHX="2.0" CIDM="2.0" CLBS="2.0" CLDR="2.0" CLSN="2.0" CRBP="2.0" CSCO="2.0" DIS="2.0" DISCK="2.0" DNN="2.0" DPW="2.0" DS="2.0" EMAN="2.0" ETSY="2.0" EW="2.0" EWA="2.0" FCAC="2.0" FSR="2.0" FUSE="2.0" GME="2.0" GOCO="2.0" HBI="2.0" HPQ="2.0" HPR="2.0" HTZ="2.0" HUGE="2.0" HYLN="2.0" IDEX="2.0" IGSB="2.0" INFI="2.0" INO="2.0" INTC="2.0" IZEA="2.0" JE="2.0" KEYS="2.0" LCI="2.0" LKQ="2.0" LUV="2.0" MBT="2.0" MDII="2.0" MMDA1="2.0" MRIN="2.0" NGD="2.0" NIO="2.0" NLOK="2.0" NLSN="2.0" NNVC="2.0" NOK="2.0" OGI="2.0" OPEN="2.0" OPGN="2.0" PAAS="2.0" PERI="2.0" PGX="2.0" POTX="2.0" RAD="2.0" RKT="2.0" RP="2.0" RRD="2.0" RSX="2.0" SAVA="2.0" SIOX="2.0" SITC="2.0" SIVR="2.0" SKLZ="2.0" SLQT="2.0" SNAP="2.0" SOS="2.0" SQ="2.0" TGTX="2.0" TSLA="2.0" TZA="2.0" U="2.0" UAMY="2.0" UEC="2.0" USWS="2.0" UUUU="2.0" VJET="2.0" VTRS="2.0" WETF="2.0" X="2.0" XL="2.0" XLP="2.0" XLU="2.0" ZM="2.0"/>
                  </TRG_0>
                  <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-2.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL AAL="-2.0" AAPL="-2.0" AFI="-2.0" AMC="-2.0" AMD="-2.0" AMZN="-2.0" ANTE="-2.0" ARLO="-2.0" AXL="-2.0" BBD="-2.0" BMY="-2.0" BSGM="-2.0" BXRX="-2.0" CCJ="-2.0" CCL="-2.0" CHNG="-2.0" CHX="-2.0" CIDM="-2.0" CLBS="-2.0" CLDR="-2.0" CLSN="-2.0" CRBP="-2.0" CSCO="-2.0" DIS="-2.0" DISCK="-2.0" DNN="-2.0" DPW="-2.0" DS="-2.0" EMAN="-2.0" ETSY="-2.0" EW="-2.0" EWA="-2.0" FCAC="-2.0" FSR="-2.0" FUSE="-2.0" GME="-2.0" GOCO="-2.0" HBI="-2.0" HPQ="-2.0" HPR="-2.0" HTZ="-2.0" HUGE="-2.0" HYLN="-2.0" IDEX="-2.0" IGSB="-2.0" INFI="-2.0" INO="-2.0" INTC="-2.0" IZEA="-2.0" JE="-2.0" KEYS="-2.0" LCI="-2.0" LKQ="-2.0" LUV="-2.0" MBT="-2.0" MDII="-2.0" MMDA1="-2.0" MRIN="-2.0" NGD="-2.0" NIO="-2.0" NLOK="-2.0" NLSN="-2.0" NNVC="-2.0" NOK="-2.0" OGI="-2.0" OPEN="-2.0" OPGN="-2.0" PAAS="-2.0" PERI="-2.0" PGX="-2.0" POTX="-2.0" RAD="-2.0" RKT="-2.0" RP="-2.0" RRD="-2.0" RSX="-2.0" SAVA="-2.0" SIOX="-2.0" SITC="-2.0" SIVR="-2.0" SKLZ="-2.0" SLQT="-2.0" SNAP="-2.0" SOS="-2.0" SQ="-2.0" TGTX="-2.0" TSLA="-2.0" TZA="-2.0" U="-2.0" UAMY="-2.0" UEC="-2.0" USWS="-2.0" UUUU="-2.0" VJET="-2.0" VTRS="-2.0" WETF="-2.0" X="-2.0" XL="-2.0" XLP="-2.0" XLU="-2.0" ZM="-2.0"/>
                  </TRG_1>
                </_2>
                <_3>
                  <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="3.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL AAL="3.0" AAPL="3.0" AFI="3.0" AMC="3.0" AMD="3.0" AMZN="3.0" ANTE="3.0" ARLO="3.0" AXL="3.0" BBD="3.0" BMY="3.0" BSGM="3.0" BXRX="3.0" CCJ="3.0" CCL="3.0" CHNG="3.0" CHX="3.0" CIDM="3.0" CLBS="3.0" CLDR="3.0" CLSN="3.0" CRBP="3.0" CSCO="3.0" DIS="3.0" DISCK="3.0" DNN="3.0" DPW="3.0" DS="3.0" EMAN="3.0" ETSY="3.0" EW="3.0" EWA="3.0" FCAC="3.0" FSR="3.0" FUSE="3.0" GME="3.0" GOCO="3.0" HBI="3.0" HPQ="3.0" HPR="3.0" HTZ="3.0" HUGE="3.0" HYLN="3.0" IDEX="3.0" IGSB="3.0" INFI="3.0" INO="3.0" INTC="3.0" IZEA="3.0" JE="3.0" KEYS="3.0" LCI="3.0" LKQ="3.0" LUV="3.0" MBT="3.0" MDII="3.0" MMDA1="3.0" MRIN="3.0" NGD="3.0" NIO="3.0" NLOK="3.0" NLSN="3.0" NNVC="3.0" NOK="3.0" OGI="3.0" OPEN="3.0" OPGN="3.0" PAAS="3.0" PERI="3.0" PGX="3.0" POTX="3.0" RAD="3.0" RKT="3.0" RP="3.0" RRD="3.0" RSX="3.0" SAVA="3.0" SIOX="3.0" SITC="3.0" SIVR="3.0" SKLZ="3.0" SLQT="3.0" SNAP="3.0" SOS="3.0" SQ="3.0" TGTX="3.0" TSLA="3.0" TZA="3.0" U="3.0" UAMY="3.0" UEC="3.0" USWS="3.0" UUUU="3.0" VJET="3.0" VTRS="3.0" WETF="3.0" X="3.0" XL="3.0" XLP="3.0" XLU="3.0" ZM="3.0"/>
                  </TRG_0>
                  <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-3.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL AAL="-3.0" AAPL="-3.0" AFI="-3.0" AMC="-3.0" AMD="-3.0" AMZN="-3.0" ANTE="-3.0" ARLO="-3.0" AXL="-3.0" BBD="-3.0" BMY="-3.0" BSGM="-3.0" BXRX="-3.0" CCJ="-3.0" CCL="-3.0" CHNG="-3.0" CHX="-3.0" CIDM="-3.0" CLBS="-3.0" CLDR="-3.0" CLSN="-3.0" CRBP="-3.0" CSCO="-3.0" DIS="-3.0" DISCK="-3.0" DNN="-3.0" DPW="-3.0" DS="-3.0" EMAN="-3.0" ETSY="-3.0" EW="-3.0" EWA="-3.0" FCAC="-3.0" FSR="-3.0" FUSE="-3.0" GME="-3.0" GOCO="-3.0" HBI="-3.0" HPQ="-3.0" HPR="-3.0" HTZ="-3.0" HUGE="-3.0" HYLN="-3.0" IDEX="-3.0" IGSB="-3.0" INFI="-3.0" INO="-3.0" INTC="-3.0" IZEA="-3.0" JE="-3.0" KEYS="-3.0" LCI="-3.0" LKQ="-3.0" LUV="-3.0" MBT="-3.0" MDII="-3.0" MMDA1="-3.0" MRIN="-3.0" NGD="-3.0" NIO="-3.0" NLOK="-3.0" NLSN="-3.0" NNVC="-3.0" NOK="-3.0" OGI="-3.0" OPEN="-3.0" OPGN="-3.0" PAAS="-3.0" PERI="-3.0" PGX="-3.0" POTX="-3.0" RAD="-3.0" RKT="-3.0" RP="-3.0" RRD="-3.0" RSX="-3.0" SAVA="-3.0" SIOX="-3.0" SITC="-3.0" SIVR="-3.0" SKLZ="-3.0" SLQT="-3.0" SNAP="-3.0" SOS="-3.0" SQ="-3.0" TGTX="-3.0" TSLA="-3.0" TZA="-3.0" U="-3.0" UAMY="-3.0" UEC="-3.0" USWS="-3.0" UUUU="-3.0" VJET="-3.0" VTRS="-3.0" WETF="-3.0" X="-3.0" XL="-3.0" XLP="-3.0" XLU="-3.0" ZM="-3.0"/>
                  </TRG_1>
                </_3>
              </TRADE_BUTTONS_CONFIG>
            </ACTIVETRADER>
            <BIG_BUTTONS VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <CHART CONFIGURATION="@v9@%0:com.devexperts.tos.thinkscript.constants,1:com.devexperts.tos.thinkscript.data,2:java.awt,3:com.devexperts.toschart.utils,4:com.devexperts.toschart.control.subgraph,5:com.devexperts.toschart.elstudies,6:com.devexperts.toschart.script%owner{chartAggregationPeriods:ChartAggregationPeriodArray0,chartAggregationPeriods=@ChartAggregationPeriodArray0,colors{7::CustomColor0,9::CustomColor1,1::CustomColor2,5::CustomColor3,6::CustomColor4,0::CustomColor5,8::CustomColor6}}#com.devexperts.toschart.core.ChartModel{encodedMixinsState=&quot;{\&quot;common\&quot;:{\&quot;DRAWING_SETS\&quot;:\&quot;{}\&quot;},\&quot;state_props\&quot;:{\&quot;state_type\&quot;:\&quot;REGULAR\&quot;},\&quot;monkey_bars_exp\&quot;:{\&quot;LikefolioMixin\&quot;:\&quot;{\\\&quot;paintingSettings\\\&quot;:{\\\&quot;neutralSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;positiveSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;negativeSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;sentimentSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true}},\\\&quot;shownDivisions\\\&quot;:[],\\\&quot;allDivisions\\\&quot;:[]}\&quot;},\&quot;monkey_bars\&quot;:{},\&quot;seasonality\&quot;:{},\&quot;regular\&quot;:{\&quot;DescriberMixin\&quot;:\&quot;{\\\&quot;visibility\\\&quot;:\\\&quot;HIDE_PANEL\\\&quot;,\\\&quot;studiesMode\\\&quot;:\\\&quot;HIDE_STUDIES\\\&quot;}\&quot;,\&quot;LikefolioMixin\&quot;:\&quot;{\\\&quot;paintingSettings\\\&quot;:{\\\&quot;neutralSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;positiveSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;negativeSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;sentimentSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true}},\\\&quot;shownDivisions\\\&quot;:[],\\\&quot;allDivisions\\\&quot;:[]}\&quot;}}&quot;,encodedPatternsModel=&quot;{\&quot;showPatterns\&quot;:true,\&quot;models\&quot;:[],\&quot;fibModels\&quot;:[]}&quot;,groupId=&quot;default&quot;,styleSettings{activeTool=2,commonStyleSettings{chartModeName:ChartModeName0,chartModes.!get(@ChartModeName0){chartPaintingType=!java.lang.Enum.valueOf(*%0.ChartPaintingType.class,&quot;BAR&quot;)},colorSettings{backgroundColor=!%1.CustomColor.findByIndex(&quot;101&quot;),barTypeColors{downColor=#%1.CustomColor(#%2.Color(51,51,255,255)),neutralColor=@CustomColor0,upColor=@CustomColor1},candleTypeColors.fillUp=&lt;T,monkeyProfileTypeColors.defaultRowHeight=&lt;F,mpExpandedTypeColors.defaultRowHeight=&lt;F,volumeColor=@CustomColor0},expansion{down=20,right=10,up=20},fitArrowsToScreen=&lt;F,fitStudiesToScreen=&lt;F,leftAxisRegulator{maxValue=21.34114905d,minValue=16.81218429d},manualAxisRegulator{maxValue=33.17195767d,minValue=-1.72962963d},overlappedVolume=&lt;T,previousRightExpansion=10,shortCuts{^(&quot;Time Zone&quot;,&lt;F),^(&quot;Show Expiration Friday &quot;,&lt;F),^(&quot;Keep Price Zoom&quot;,&lt;F),^(&quot;enableLeftAxis&quot;,&lt;F),^(&quot;Fit expected price ranges&quot;,&lt;F),^(&quot;emphasizeDigitMPExpanded&quot;,&lt;F),^(&quot;showWicksCandleTrend&quot;,&lt;F),^(&quot;highlightEarnings&quot;,&lt;F),^(&quot;synchronizeCrosshair&quot;,&lt;F),^(&quot;myToolsMode&quot;,&lt;F),^(&quot;seasonalityStyle&quot;,&lt;F),^(&quot;Show Price Subgraph&quot;,&lt;F),^(&quot;closePriceLevel&quot;,&lt;F),^(&quot;Color Volume As Symbol Ticks&quot;,&lt;F),^(&quot;highlightPhantomRBars&quot;,&lt;F),^(&quot;Cross type &quot;,&lt;F),^(&quot;Fit Studies to Screen&quot;,&lt;F),^(&quot;Fit Orders&quot;,&lt;F),^(&quot;Bubbles as Percentage&quot;,&lt;F),^(&quot;hideStatusString&quot;,&lt;F),^(&quot;Show Studies &quot;,&lt;F),^(&quot;showWicksHeikinAshi&quot;,&lt;F),^(&quot;Alerts&quot;,&lt;F),^(&quot;Chart scale&quot;,&lt;F),^(&quot;Fit High/Low&quot;,&lt;F),^(&quot;Orders&quot;,&lt;F),!get:Boolean0(&quot;Chart mode&quot;),^(&quot;Use Log Scale &quot;,@Boolean0),^(&quot;Fit Study Markers to Screen&quot;,&lt;F),^(&quot;Fit Alerts&quot;,&lt;F),^(&quot;Fit patterns&quot;,&lt;F),^(&quot;Percentage View&quot;,&lt;F),^(&quot;Make Auto Zoom &quot;,&lt;F),^(&quot;Show Year Marking Line&quot;,&lt;F),^(&quot;Show Rollover Line&quot;,&lt;F),^(&quot;Show High/Low Bubbles &quot;,&lt;F),^(&quot;Snap mode&quot;,&lt;F),^(&quot;highlightStudies&quot;,&lt;F),^(&quot;Overlapped Volume&quot;,&lt;F),^(&quot;Show Symbol Logo&quot;,&lt;F),^(&quot;Show Last Price Bubble &quot;,&lt;F),^(&quot;emphasizeDigitMP&quot;,&lt;F),^(&quot;Snap crosshairs to&quot;,&lt;F),^(&quot;Show grid&quot;,&lt;F),^(&quot;showWicksCandle&quot;,&lt;F),^(&quot;Show trades&quot;,&lt;F),^(&quot;highlightSeasons&quot;,&lt;F),^(&quot;Snap drawings to&quot;,&lt;F),^(&quot;Extend Order/Alert Line to Left&quot;,&lt;F)},showExpFriday=&lt;F,showTradeExecution=&lt;T,snapMode=!%3.SnapUtils$SnapMode.valueOf(*%3.SnapUtils$SnapMode.class,&quot;SNAP_TO_HLOC&quot;),step=4.065040650406504d,suppressAutoZoom=&lt;T,visibleBarsCount=246},forexStyleSettings.shortCuts.^(&quot;Show Volume Subgraph&quot;,&lt;F),futuresStyleSettings{highlightExtendedHours=&lt;T,shortCuts{^(&quot;adjustForContractChanges&quot;,&lt;F),^(&quot;Show Open Interest&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,@Boolean0),^(&quot;showContractChangeEvents&quot;,&lt;F),^(&quot;futures_daily_close_price&quot;,&lt;F),^(&quot;Show Options&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,&lt;F),^(&quot;startAtMarketOpen&quot;,&lt;F)},showOpenInterest=&lt;F,showVolume=&lt;F},optionsStyleSettings.shortCuts{^(&quot;Show Open Interest&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,@Boolean0),^(&quot;Show Theo Price&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,&lt;F),^(&quot;startAtMarketOpen&quot;,&lt;F)},otherStyleSettings{shortCuts{^(&quot;Show Social Sentiment&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,@Boolean0),^(&quot;Show Options&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,@Boolean0),^(&quot;Show Corporate Actions&quot;,&lt;F),^(&quot;Show CNBC Video&quot;,&lt;F),^(&quot;startAtMarketOpen&quot;,&lt;F),^(&quot;adjustForDividends&quot;,&lt;F)},showVolume=&lt;F,startAggregationAtMarketOpen=&lt;F,tradingHoursOnly=&lt;T},setsIdentifiers.styleSetName=&quot;waveTech6&quot;},subgraphModels{!get(#%4.SubgraphId(&quot;Symbol&quot;)){height=434,storableIndicators{+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# @new\n# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2009-2021\n#\n# Source code isn\'t available.\n\nplot slowAvg = Double.NaN;\nplot fastAvg = Double.NaN;\nplot BuySignal = Double.NaN;\nplot SellSignal = Double.NaN;&quot;,name=&quot;PPS&quot;}){hidden=&lt;T}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# @new\n# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2009-2021\n#\n\n#wizard input: length1\n#wizard text: -period\n#wizard input: averageType1\n#wizard text: crosses\n#wizard input: crossingType\n#wizard input: length2\n#wizard text: -period\n#wizard input: averageType2\n#wizard text: Price:\n#wizard input: price\n\ninput price = close;\ninput length1 = 15;\ninput length2 = 30;\ninput averageType1 = AverageType.Simple;\ninput averageType2 = AverageType.Simple;\ninput crossingType = {default above, below};\n\ndef avg1 = MovingAverage(averageType1, price, length1);\ndef avg2 = MovingAverage(averageType2, price, length2);\n\nplot signal = crosses(avg1, avg2, crossingType == CrossingType.above);\n\nsignal.DefineColor(\&quot;Above\&quot;, GetColor(6));\nsignal.DefineColor(\&quot;Below\&quot;, GetColor(7));\nsignal.AssignValueColor(if crossingType == CrossingType.above then signal.color(\&quot;Above\&quot;) else signal.color(\&quot;Below\&quot;));\n\nsignal.SetPaintingStrategy(if crossingType == CrossingType.above\n    then PaintingStrategy.BOOLEAN_ARROW_UP\n    else PaintingStrategy.BOOLEAN_ARROW_DOWN);&quot;,name=&quot;MovingAvgCrossover&quot;}){inputsMap:TreeMap0{^(&quot;averageType1&quot;,&quot;EXPONENTIAL&quot;),^(&quot;averageType2&quot;,&quot;EXPONENTIAL&quot;),^(&quot;length1&quot;,34),^(&quot;length2&quot;,150),^(&quot;price&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap0,plots{0:{palette.^(&quot;Above&quot;,!%1.CustomColor.findByIndex(&quot;16&quot;))}}}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# Original Code From: TD Ameritrade IP Company, Inc. (c) 2009-2020\n# Original StudyName: ATRTrailingStop\n# Type: Study\n\n# blackFLAG FTS SwingArms \n# Edited by: Jose Azcarate \n# blackFLAG Futures Trading - FOR EDUCATIONAL PURPOSES ONLY\n# TWITTER: @blackflagfuture\n# Settings Vary. My preferred setting is 28 / 5  But also use 30 / 8 and 5 / 3.5 depending on strategy.\n\ninput trailType = {default modified, unmodified};\ninput ATRPeriod = 28;\ninput ATRFactor = 5;\ninput firstTrade = {default long, short};\ninput averageType = AverageType.WILDERS;\n\ninput fib1Level = 61.8;\ninput fib2Level = 78.6;\ninput fib3Level = 88.6;\n\nAssert(ATRFactor &gt; 0, \&quot;\'atr factor\' must be positive: \&quot; + ATRFactor);\n\ndef HiLo = Min(high - low, 1.5 * Average(high - low, ATRPeriod));\ndef HRef = if low &lt;= high[1]\n    then high - close[1]\n    else (high - close[1]) - 0.5 * (low - high[1]);\ndef LRef = if high &gt;= low[1]\n    then close[1] - low\n    else (close[1] - low) - 0.5 * (low[1] - high);\n\ndef trueRange;\nswitch (trailType) {\ncase modified:\n    trueRange = Max(HiLo, Max(HRef, LRef));\ncase unmodified:\n    trueRange = TrueRange(high, close, low);\n}\ndef loss = ATRFactor * MovingAverage(averageType, trueRange, ATRPeriod);\n\ndef state = {default init, long, short};\ndef trail;\nswitch (state[1]) {\ncase init:\n    if (!IsNaN(loss)) {\n        switch (firstTrade) {\n        case long:\n            state = state.long;\n            trail = close - loss;\n        case short:\n            state = state.short;\n            trail = close + loss;\n    }\n    } else {\n        state = state.init;\n        trail = Double.NaN;\n    }\ncase long:\n    if (close &gt; trail[1]) {\n        state = state.long;\n        trail = Max(trail[1], close - loss);\n    } else {\n        state = state.short;\n        trail = close + loss;\n    }\ncase short:\n    if (close &lt; trail[1]) {\n        state = state.short;\n        trail = Min(trail[1], close + loss);\n    } else {\n        state = state.long;\n        trail = close - loss;\n    }\n}\n\ndef BuySignal = Crosses(state == state.long, 0, CrossingDirection.ABOVE);\ndef SellSignal = Crosses(state == state.short, 0, CrossingDirection.ABOVE);\n\ndef ex = if BuySignal then high else if SellSignal then low else if state == state.long then Max(ex[1], high) else if state == state.short then Min(ex[1], low) else ex[1];\n\nplot TrailingStop = trail;\n\nTrailingStop.SetPaintingStrategy(PaintingStrategy.POINTS);\nTrailingStop.DefineColor(\&quot;Long\&quot;, Color.GREEN);\nTrailingStop.DefineColor(\&quot;Short\&quot;, Color.RED);\nTrailingStop.AssignValueColor(if state == state.long\n    then TrailingStop.Color(\&quot;Long\&quot;)\n    else TrailingStop.Color(\&quot;Short\&quot;));\n\nplot Extremum = ex;\nExtremum.SetPaintingStrategy(PaintingStrategy.POINTS);\nExtremum.DefineColor(\&quot;HH\&quot;, Color.GREEN);\nExtremum.DefineColor(\&quot;LL\&quot;, Color.RED);\nExtremum.AssignValueColor(if state == state.long\n    then Extremum.Color(\&quot;HH\&quot;)\n    else Extremum.Color(\&quot;LL\&quot;));\nExtremum.Hide();\n\ndef f1 = ex + (trail - ex) * fib1Level / 100;\ndef f2 = ex + (trail - ex) * fib2Level / 100;\ndef f3 = ex + (trail - ex) * fib3Level / 100;\ndef l100 = trail + 0;\n###mahi\ninput  price =close;\nplot buySignalcnfm =  state == state.long and price crosses above f3;\nbuySignalcnfm.setPaintingStrategy(paintingStrategy.BOOLEAN_ARROW_UP); #SetPaintingStrategy(PaintingStrategy.POINTS);\nbuysignalcnfm.setLineWeight(5);\nbuysignalcnfm.SetDefaultColor(Color.pink);\n\n\n#####\nplot Fib1 = f1;\nFib1.SetPaintingStrategy(PaintingStrategy.POINTS);\nFib1.SetDefaultColor(Color.white);\nFib1.Hide();\n\nFib1.DefineColor(\&quot;Fshort\&quot;,  Color.light_red);\nFib1.DefineColor(\&quot;Flong\&quot;,  Color.Light_green);\nFib1.AssignValueColor(if state == state.long\n    then Fib1.Color(\&quot;Flong\&quot;)\n    else Fib1.Color(\&quot;Fshort\&quot;));\n\nplot Fib2 = f2;\nFib2.SetPaintingStrategy(PaintingStrategy.POINTS);\nFib2.SetDefaultColor(Color.white);\nFib2.Hide();\nFib2.DefineColor(\&quot;Fshort\&quot;,  Color.red);\nFib2.DefineColor(\&quot;Flong\&quot;,  Color.green);\nFib2.AssignValueColor(if state == state.long\n    then Fib2.Color(\&quot;Flong\&quot;)\n    else Fib2.Color(\&quot;Fshort\&quot;));\n\n\nplot Fib3 = f3;\nFib3.SetPaintingStrategy(PaintingStrategy.POINTS);\nFib3.SetDefaultColor(Color.white);\nFib3.Hide();\nFib3.AssignValueColor(if state == state.long\n    then Fib1.Color(\&quot;Flong\&quot;)\n    else Fib1.Color(\&quot;Fshort\&quot;));\n\n#input show_cloud = yes;\n\ndef Na = Double.NaN;\ninput showCloud= yes;\n\ndef cloudF1 = If( ShowCloud, f1, Na);\ndef cloudF2  = If(ShowCloud, f2, Na);\ndef cloudF3  = If(ShowCloud, f3, Na);\n#AddCloud(cloudhigh, cloudlow, Color.GRAY, Color.GRAY);\n\n\n\n\n\n\nAddCloud(cloudF1, cloudF2, Color.LIGHT_GREEN, Color.LIGHT_RED, no);\nAddCloud(cloudF2,cloudF3, Color.GREEN, Color.RED, no);\nAddCloud(cloudF3, l100, Color.DARK_GREEN, Color.DARK_RED, no);\n\ndef l1 = state[1] == state.long and close crosses below f1[1];\ndef l2 = state[1] == state.long and close crosses below f2[1];\ndef l3 = state[1] == state.long and close crosses below f3[1];\ndef s1 = state[1] == state.short and close crosses above f1[1];\ndef s2 = state[1] == state.short and close crosses above f2[1];\ndef s3 = state[1] == state.short and close crosses above f3[1];\n\ndef atr = Average(TrueRange(high, close, low), 14);\n\nplot LS1 = if l1 then low - atr else Double.NaN;\nplot LS2 = if l2 then low - 1.5 * atr else Double.NaN;\nplot LS3 = if l3 then low - 2 * atr else Double.NaN;\nplot SS1 = if s1 then high + atr else Double.NaN;\nplot SS2 = if s2 then high + 1.5 * atr else Double.NaN;\nplot SS3 = if s3 then high + 2 * atr else Double.NaN;\n\nLS1.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\nLS1.SetDefaultColor(Color.GREEN);\nLS1.SetLineWeight(1);\nLS1.Hide();\nLS2.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\nLS2.SetDefaultColor(Color.GREEN);\nLS2.SetLineWeight(1);\nLS2.Hide();\nLS3.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\nLS3.SetDefaultColor(Color.violet);\nLS3.SetLineWeight(4);\n#LS3.Hide();\n\nSS1.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\nSS1.SetDefaultColor(Color.RED);\nSS1.SetLineWeight(1);\nSS1.Hide();\nSS2.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\nSS2.SetDefaultColor(Color.RED);\nSS2.SetLineWeight(1);\nSS2.Hide();\nSS3.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\nSS3.SetDefaultColor(Color.RED);\nSS3.SetLineWeight(1);\nSS3.Hide();\n\nAlert(l1, \&quot;Price crossed below Fib1 level in long trend\&quot;, Alert.BAR, Sound.Bell);\nAlert(l2, \&quot;Price crossed below Fib2 level in long trend\&quot;, Alert.BAR, Sound.Bell);\nAlert(l3, \&quot;Price crossed below Fib3 level in long trend\&quot;, Alert.BAR, Sound.Bell);\nAlert(s1, \&quot;Price crossed above Fib1 level in short trend\&quot;, Alert.BAR, Sound.Bell);\nAlert(s2, \&quot;Price crossed above Fib2 level in short trend\&quot;, Alert.BAR, Sound.Bell);\nAlert(s3, \&quot;Price crossed above Fib3 level in short trend\&quot;, Alert.BAR, Sound.Bell);\n&quot;,name=&quot;_0bb1d049_f213_41ae_b5c1_8617e7c29471&quot;}){alerts:LocalAlertArray0,alerts=@LocalAlertArray0,hidden=&lt;T,inputsMap:TreeMap1{^(&quot;fib1Level&quot;,0.236d),^(&quot;fib2Level&quot;,0.5d),^(&quot;fib3Level&quot;,0.764d),^(&quot;price&quot;,&quot;CLOSE&quot;),^(&quot;showCloud&quot;,&lt;F)},inputsMap=@TreeMap1,plots{0:{hiding=&lt;T},3:{hiding=&lt;F},4:{hiding=&lt;F},5:{hiding=&lt;F}}}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;input marketThreshold = 0.0025;\ninput timeFrame = {default DAY, \&quot;2 DAYS\&quot;, \&quot;3 DAYS\&quot;, \&quot;4 DAYS\&quot;, WEEK, MONTH, \&quot;OPT EXP\&quot;, QUARTER, YEAR};\ninput showOnlyToday = no;\ninput applyPersonsLevelsFilter = yes;\ninput drawLine =yes;\n\nassert(marketThreshold &gt;= 0, \&quot;\'market threshold\' must not be negative: \&quot; + marketThreshold);\n\ndef marketType = {default DISABLED, NEUTRAL, BEARISH, BULLISH};\n\ndef PP2 = high(period = timeFrame)[2] + low(period = timeFrame)[2] + close(period = timeFrame)[2];\n\nmarketType = if !applyPersonsLevelsFilter then marketType.DISABLED else\nif PP2[-1] &gt; (PP2[-1] + PP2 + PP2[1]) / 3 + marketThreshold then marketType.BULLISH else\nif PP2[-1] &lt; (PP2[-1] + PP2 + PP2[1]) / 3 - marketThreshold then marketType.BEARISH else marketType.NEUTRAL;\n\nplot R3;\nplot R2;\nplot R1;\nplot RR;\nplot PP;\nplot SS;\nplot S1;\nplot S2;\nplot S3;\n\nif showOnlyToday and !IsNaN(close(period = timeFrame)[-1])\nthen {\n    R1 = Double.NaN;\n    R2 = Double.NaN;\n    R3 = Double.NaN;\n    PP = Double.NaN;\n    S1 = Double.NaN;\n    S2 = Double.NaN;\n    S3 = Double.NaN;\n} else {\n    PP = (high(period = timeFrame)[1] + low(period = timeFrame)[1] + close(period = timeFrame)[1]) / 3;\n    R1 = 2 * PP - low(period = timeFrame)[1];\n    R2 = PP + high(period = timeFrame)[1] - low(period = timeFrame)[1];\n    R3 = R2 + high(period = timeFrame)[1] - low(period = timeFrame)[1];\n    S1 = 2 * PP - high(period = timeFrame)[1];\n    S2 = PP - high(period = timeFrame)[1] + low(period = timeFrame)[1];\n    S3 = S2 - high(period = timeFrame)[1] + low(period = timeFrame)[1];\n}\n\nRR = if (marketType == marketType.BEARISH or marketType == marketType.NEUTRAL) then R1 else R2;\nSS = if (marketType == marketType.BULLISH or marketType == marketType.NEUTRAL) then S1 else S2;\n\nRR.setHiding(!applyPersonsLevelsFilter);\nR1.setHiding(applyPersonsLevelsFilter);\nR2.setHiding(applyPersonsLevelsFilter);\nR3.hide();\nSS.setHiding(!applyPersonsLevelsFilter);\nS1.setHiding(applyPersonsLevelsFilter);\nS2.setHiding(applyPersonsLevelsFilter);\nS3.hide();\n\nPP.SetDefaultColor(GetColor(0));\nR1.SetDefaultColor(GetColor(5));\nR2.SetDefaultColor(GetColor(5));\nR3.SetDefaultColor(GetColor(5));\nS1.SetDefaultColor(GetColor(6));\nS2.SetDefaultColor(GetColor(6));\nS3.SetDefaultColor(GetColor(6));\n\nSS.DefineColor(\&quot;S1\&quot;, GetColor(6));\nSS.DefineColor(\&quot;S2\&quot;, GetColor(6));\nSS.AssignValueColor(if SS == S1 then SS.color(\&quot;S1\&quot;) else SS.color(\&quot;S2\&quot;));\n\nRR.DefineColor(\&quot;R1\&quot;, GetColor(5));\nRR.DefineColor(\&quot;R2\&quot;, GetColor(5));\nRR.AssignValueColor(if RR == R1 then RR.color(\&quot;R1\&quot;) else RR.color(\&quot;R2\&quot;));\n\nPP.SetStyle(Curve.SHORT_DASH);\nRR.SetStyle(Curve.SHORT_DASH);\nR1.SetStyle(Curve.SHORT_DASH);\nR2.SetStyle(Curve.SHORT_DASH);\nR3.SetStyle(Curve.SHORT_DASH);\nSS.SetStyle(Curve.SHORT_DASH);\nS1.SetStyle(Curve.SHORT_DASH);\nS2.SetStyle(Curve.SHORT_DASH);\nS3.SetStyle(Curve.SHORT_DASH);\n\n\ndef paintingStrategy ;\n\nif drawLine\n{\npaintingStrategy = if timeframe == timeframe.WEEK then PaintingStrategy.LINE_VS_TRIANGLES else if timeFrame == timeFrame.MONTH or timeFrame == timeFrame.\&quot;OPT EXP\&quot; or timeFrame == timeFrame.QUARTER or timeFrame == timeFrame.YEAR then PaintingStrategy.LINE_VS_SQUARES else PaintingStrategy.LINE_VS_POINTS;\n\n}\nelse\n{\npaintingStrategy = if timeframe == timeframe.WEEK then PaintingStrategy.TRIANGLES else if timeFrame == timeFrame.MONTH or timeFrame == timeFrame.\&quot;OPT EXP\&quot; or timeFrame == timeFrame.QUARTER or timeFrame == timeFrame.YEAR then PaintingStrategy.SQUARES else PaintingStrategy.POINTS;\n\n}\n\n#def paintingStrategy = if timeframe == timeframe.WEEK then PaintingStrategy.LINE_VS_TRIANGLES else if timeFrame == timeFrame.MONTH or timeFrame == timeFrame.\&quot;OPT EXP\&quot; or timeFrame == timeFrame.QUARTER or timeFrame == timeFrame.YEAR then PaintingStrategy.LINE_VS_SQUARES else PaintingStrategy.LINE_VS_POINTS;\n\nPP.SetPaintingStrategy(paintingStrategy);\nRR.SetPaintingStrategy(paintingStrategy);\nR1.SetPaintingStrategy(paintingStrategy);\nR2.SetPaintingStrategy(paintingStrategy);\nR3.SetPaintingStrategy(paintingStrategy);\nSS.SetPaintingStrategy(paintingStrategy);\nS1.SetPaintingStrategy(paintingStrategy);\nS2.SetPaintingStrategy(paintingStrategy);\nS3.SetPaintingStrategy(paintingStrategy);&quot;,name=&quot;_99c08cc0_b776_4b49_a3bf_a01dada4cf51&quot;}){hidden=&lt;T,inputsMap:TreeMap2{^(&quot;applyPersonsLevelsFilter&quot;,&lt;F),^(&quot;drawLine&quot;,&lt;F),^(&quot;timeFrame&quot;,&quot;WEEK&quot;)},inputsMap=@TreeMap2,plots{0:{hiding=&lt;F,lineStyle=1},3:{hiding=&lt;T},5:{hiding=&lt;T},8:{hiding=&lt;F}}}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# AI_Squeeze_Clouds_v1 \n\n# AlphaInvestor - 09/07/2015 - coded up simple method to show clouds for BB/KC squeeze \n\n \ndeclare weak_volume_dependency;\n\ninput displace = 0;\ninput factor = 1.5; #keltnerChannels\ninput length = 20;\ninput price = close;\ninput averageType = AverageType.SIMPLE;\ninput trueRangeAverageType = AverageType.SIMPLE;\n\nAddCloud(bollingerbands(price,0,length,-2.0,2.0,averageType).LowerBand, keltnerChannels(0,factor,length,price,averagetype.simple,trueRangeAverageType).Lower_Band,   Color.cyan,  Color.gray); \n\nAddCloud(keltnerChannels(0,factor,20,price,averagetype.simple,trueRangeAverageType).Upper_Band,bollingerbands(price,0,length,-2.0,2.0,averageType).UpperBand,  Color.pink,  Color.gray); \n\n \n\n# End Study \n\n\ndef shift = factor * MovingAverage(trueRangeAverageType, TrueRange(high, close, low), length);\n\ndef average = MovingAverage(averageType, price, length);\n\nplot Avg = average[-displace];\nAvg.SetDefaultColor(GetColor(1));\n\nplot Upper_Band = average[-displace] + shift[-displace];\nUpper_Band.SetDefaultColor(GetColor(8));\n\nplot Lower_Band = average[-displace] - shift[-displace];\nLower_Band.SetDefaultColor(GetColor(5));\n&quot;,name=&quot;_5b75a5fd_0525_3fa7_b294_5a19e419d099&quot;}){hidden=&lt;T,inputsMap:TreeMap3{^(&quot;price&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap3,plots{0:{lineStyle=3}}}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# OvernightHiLowLines_mobius_jq\n# GlobeX or Overnight High / Low without Fibonacci Values \n# Based on code by Mobius # V01.2012 \n# cosmetic alterations by Johnny Quotron\n#    1. removal of fib lines\n#    2. paint ONL bubble below the line\n#    3. addition of other comments\n#    4. addition of bubbles in the expansion area if desired\n#\n# Restrictions:  Hi / Low lines are not drawn for non-traded indicies such as VIX or TNX..JQ\n\ndeclare hide_on_daily;\ninput PlotOverNightExtremes = yes;\ninput DisplayPriceBubbleOnHiLowBar = yes;\ninput DisplayPriceBubbleOnRightEdge = yes;  #Haven\'t figured this out yet..JQ\n\ndef o = open;\ndef h = high;\ndef l = low;\ndef c = close;\ndef v = volume;\ndef bar = BarNumber();\ndef GlobeX = GetTime() &lt; RegularTradingStart(GetYYYYMMDD());\n\ndef vol = if GlobeX and !GlobeX[1]\nthen v\nelse if GlobeX\nthen vol[1] + v\nelse Double.NaN;\n\ndef GlobeX_Volume = vol;\n\ndef ONhigh = if GlobeX and !GlobeX[1]\nthen h\nelse if GlobeX and\nh &gt; ONhigh[1]\nthen h\nelse ONhigh[1];\n\ndef ONhighBar = if GlobeX and h == ONhigh\nthen bar\nelse Double.NaN;\n\ndef ONlow = if GlobeX and !GlobeX[1]\nthen l\nelse if GlobeX and\nl &lt; ONlow[1]\nthen l\nelse ONlow[1];\n\ndef ONlowBar = if GlobeX and l == ONlow\nthen bar\nelse Double.NaN;\n\ndef OverNightHigh = if BarNumber() == HighestAll(ONhighBar)\nthen ONhigh\nelse OverNightHigh[1];\n\ndef OverNightLow = if BarNumber() == HighestAll(ONlowBar)\nthen ONlow\nelse OverNightLow[1];\n\n\n#\nplot ONH = if OverNightHigh &gt; 0\nthen OverNightHigh\nelse Double.NaN;\n\nONH.SetHiding(!PlotOverNightExtremes);\nONH.SetPaintingStrategy(PaintingStrategy.SQUARES);\nONH.SetDefaultColor(Color.BLUE);\nONH.HideBubble();\nONH.HideTitle();\n\n#\nplot ONL = if OverNightLow &gt; 0 \nthen OverNightLow\nelse Double.NaN;\n\nONL.SetHiding(!PlotOverNightExtremes);\nONL.SetPaintingStrategy(PaintingStrategy.SQUARES);\nONL.SetDefaultColor(Color.LIGHT_GRAY);\nONL.HideBubble();\nONL.HideTitle();\n\n\n# Bubble code\n#AddChartBubble(bar == ONhighBar and PlotOverNightExtremes and DisplayPriceBubbleOnHiLowBar, ONH, \&quot;ONH: \&quot; + ONH, createColor(204,204,255));\n#AddChartBubble(bar == ONlowBar and PlotOverNightExtremes and DisplayPriceBubbleOnHiLowBar, ONL, \&quot;ONL: \&quot; + ONL, createColor(204,204,255),no);  #designated that the bubble be painted below the ONL line.  2018-04-07 JQ \n\n\nAddChartBubble(barNumber() == highestAll(barnumber()) and  PlotOverNightExtremes and DisplayPriceBubbleOnRightEdge, ONH, \&quot;ONH: \&quot; + ONH, createColor(204,204,255));\nAddChartBubble(barNumber() == highestAll(barnumber()) and PlotOverNightExtremes and DisplayPriceBubbleOnRightEdge, ONL, \&quot;ONL: \&quot; + ONL, createColor(204,204,255),no); \ninput showLable =yes;\nAddLabel(showLable, \&quot;ONL= \&quot; + astext(ONL), if ONL&lt; close then Color.LIGHT_GREEN else if ONL&gt; close then color.LIGHT_red else Color.GRAY);\nAddLabel(showLable, \&quot;ONH= \&quot; + astext(ONH), if ONH&lt; close then Color.LIGHT_GREEN else if ONH&gt; close then color.LIGHT_red else Color.GRAY);\n# End Code GlobeX or Overnight High / Low without Fibonacci Values &quot;,name=&quot;_2b139ce2_bb93_4663_acef_0fb6255d8008&quot;}){plots{0:{lineStyle=3,paintingStrategy=0},1:{color=#%1.CustomColor(#%2.Color(0,0,255,255)),lineStyle=3,paintingStrategy=0}}}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# @new\n# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2009-2021\n#\n\n#wizard input: length1\n#wizard text: -period\n#wizard input: averageType1\n#wizard text: crosses\n#wizard input: crossingType\n#wizard input: length2\n#wizard text: -period\n#wizard input: averageType2\n#wizard text: Price:\n#wizard input: price\n\ninput price = close;\ninput length1 = 15;\ninput length2 = 30;\ninput averageType1 = AverageType.Simple;\ninput averageType2 = AverageType.Simple;\ninput crossingType = {default above, below};\n\ndef avg1 = MovingAverage(averageType1, price, length1);\ndef avg2 = MovingAverage(averageType2, price, length2);\n\nplot signal = crosses(avg1, avg2, crossingType == CrossingType.above);\n\nsignal.DefineColor(\&quot;Above\&quot;, GetColor(6));\nsignal.DefineColor(\&quot;Below\&quot;, GetColor(7));\nsignal.AssignValueColor(if crossingType == CrossingType.above then signal.color(\&quot;Above\&quot;) else signal.color(\&quot;Below\&quot;));\n\nsignal.SetPaintingStrategy(if crossingType == CrossingType.above\n    then PaintingStrategy.BOOLEAN_ARROW_UP\n    else PaintingStrategy.BOOLEAN_ARROW_DOWN);&quot;,name=&quot;MovingAvgCrossover&quot;}){hidden=&lt;T,inputsMap:TreeMap4{^(&quot;length1&quot;,10),^(&quot;length2&quot;,21),^(&quot;price&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap4,plots{0:{lineWeight=5,palette{^(&quot;Above&quot;,!%1.CustomColor.findByIndex:CustomColor7(&quot;12&quot;)),^(&quot;Below&quot;,!%1.CustomColor.findByIndex:CustomColor8(&quot;15&quot;))}}}}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;###############################################################################################################################################\n################################################################################################################################################\n#\n# Author: Kory Gill, [USER=212]@korygill[/USER]\n#\n# Created from idea on https://usethinkscript.com/threads/finite-volume-elements.593/\n# Original idea is from http://mkatsanos.com/FVE.html\n#\n# VERSION HISTORY (sortable date and time (your local time is fine), and your initials\n# 20190907-1200-KG    - Created.\n\n###############################################################################\n### NORMALIZATION (Volume Damping adaptation) by Ramon Del Villar AKA PElonsax\n### 7/20/2020 #################################################################\n###############################################################################\n# The damping logic is taken directly from VFI #\n\n#declare once_per_bar;\n\n\n#################################################################$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n\n#########################################%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%$$$$$$$$$$$$$$$$$\n\n\n\n#\n# inputs\n#\ninput RSI_prev = 2; #previous bar to check\ninput def_cond = no;\ninput Samples = 14;\n\n\n\n#vwap vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\n#input numDevUp = 2.0;\ninput vwapTimeFrame = {default DAY, WEEK, MONTH};\n\ndef cap = getAggregationPeriod();\ndef errorInAggregation =\n    vwapTimeFrame == vwapTimeFrame.DAY and cap &gt;= AggregationPeriod.WEEK or\n    vwapTimeFrame== vwapTimeFrame.WEEK and cap &gt;= AggregationPeriod.MONTH;\nassert(!errorInAggregation, \&quot;timeFrame should be not less than current chart aggregation period\&quot;);\n\ndef yyyyMmDd = getYyyyMmDd();\ndef periodIndx;\nswitch (vwapTimeFrame) {\ncase DAY:\n    periodIndx = yyyyMmDd;\ncase WEEK:\n    periodIndx = Floor((daysFromDate(first(yyyyMmDd)) + getDayOfWeek(first(yyyyMmDd))) / 7);\ncase MONTH:\n    periodIndx = roundDown(yyyyMmDd / 100, 0);\n}\ndef isPeriodRolled = compoundValue(1, periodIndx != periodIndx[1], yes);\n\ndef volumeSum;\ndef volumeVwapSum;\ndef volumeVwap2Sum;\n\nif (isPeriodRolled) {\n    volumeSum = volume;\n    volumeVwapSum = volume * vwap;\n    volumeVwap2Sum = volume * Sqr(vwap);\n} else {\n    volumeSum = compoundValue(1, volumeSum[1] + volume, volume);\n    volumeVwapSum = compoundValue(1, volumeVwapSum[1] + volume * vwap, volume * vwap);\n    volumeVwap2Sum = compoundValue(1, volumeVwap2Sum[1] + volume * Sqr(vwap), volume * Sqr(vwap));\n}\ndef vWapprice = volumeVwapSum / volumeSum;\ndef deviation = Sqrt(Max(volumeVwap2Sum / volumeSum - Sqr(vWapprice), 0));\n\ndef VWAP = vWapprice;\n\n\n\ninput vwapCondition =no;\n#input vp=close;\ndef conVwapBuy =if  vwapCondition then  close &gt;= VWAp else 1;\n\n#####^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n\n#\n# FVE logic\n#\ndef bn = BarNumber();\ndef nan = double.NaN;\n\n\ninput maxVolumeCutOff = 2.5;\n###Coefficient used in calculation of “Cut Off” value. Lower values mean stronger damping of volume spikes###\n\nAssert(maxVolumeCutOff &gt; 0, \&quot;\'max volume cut off\' must be positive: \&quot; + maxVolumeCutOff);\n\ndef cutOff = 0.2 * StDev(Log(hlc3) - Log(hlc3[1]), 30) * close;\ndef hlcChange = hlc3 - hlc3[1];\ndef avgVolume = Average(volume, 30)[1];\ndef minVolume = Min(volume, avgVolume * maxVolumeCutOff);\ndef dirVolume = if hlcChange &gt; cutOff\n    then minVolume\n    else if hlcChange &lt; -cutOff\n        then -minVolume\n        else 0;\n\n\ndef mf = (close - (high+low)/2) + hlc3 - hlc3 [1];\ndef fveSum = Sum(dirVolume, Samples);\n\ndef fve = if bn &gt; Samples\n          then (fveSum / (Average(avgVolume, Samples) * Samples)) * 100\n          else nan;\n\n\n#\n# plots\n#\ndef pFVE = fve;\n\ndef pFVE_MA = MovingAverage(AverageType.SIMPLE, fve, 30);\n#pFVE_MA.SetDefaultColor(Color.Gray);\n#PFVE_MA.SetPaintingStrategy(PaintingStrategy.DASHES);\n\ndef zeroLine = 0;\ndef pFVE_Bull = if pFVE crosses above pFVE_MA then pFVE  else double.NaN ;\ndef pFVE_Bear = if pFVE &gt; pFVE_MA and pFVE[1] &gt; pFVE then pFVE else double.NaN ;\n\n#format plot \n\n#zeroLine.SetDefaultColor(Color.White);\n#pFVE.AssignValueColor(if pFVE &gt; pFVE_MA then color.green else color.red) ;\n#pFVE.SetLineWeight(3);\n\n\n#pFVE_Bull.SetPaintingStrategy(PaintingStrategy.SQUARES);\n#pFVE_Bull.SetLineWeight(5);\n#pFVE_Bull.SetDefaultColor(color.dark_green) ;\n\n#pFVE_Bear.SetPaintingStrategy(PaintingStrategy.SQUARES);\n#pFVE_Bear.SetLineWeight(5);\n#pFVE_Bear.SetDefaultColor(color.white) ;\n\n#AddCloud(pFVE, pFVE_MA, color.light_green, color.pink);\n\n\n\n#####################################################################################################################################################\n\n\n\n# Simple 2 Period RSI Trading Indicator\n# Assembled by BenTen at useThinkScript.com\n# You are free to use this code for personal use, and make derivative works from it. You are NOT GRANTED permission to use this code (or derivative works) for commercial purposes which includes and is not limited to selling, reselling, or packaging with other commercial indicators. Headers and attribution in this code should remain as provided, and any derivative works should extend the existing headers.\n\n#MACD\ninput price = close;\n#input length_macd = 14;\ninput displace = 0;\n#input showBreakoutSignals = no;\ninput crossingType = {default above, below};\n\ninput fastLength = 12;\ninput slowLength = 26;\ninput MACDLength = 9;\ndef fastAvg = Sum(volume * price, fastLength) / Sum(volume, fastLength);\ndef slowAvg = Sum(volume * price, slowLength) / Sum(volume, slowLength);\ndef Value = fastAvg - slowAvg;\ndef Avg = ExpAverage(Value, MACDLength);\ndef MACD_Diff  = Value - Avg;\n#def ZeroLine = 0;\n\n# RSI\ninput rsiLength = 14;\ninput overBought = 80;\ninput overSold = 28;\ninput rsiBuyLevel =40;\ninput averageType = AverageType.WILDERS;\ndef NetChgAvg = MovingAverage(averageType, price - price[1], RSIlength);\ndef TotChgAvg = MovingAverage(averageType, AbsValue(price - price[1]), RSIlength);\ndef ChgRatio = if TotChgAvg != 0 then NetChgAvg / TotChgAvg else 0;\ndef RSI = 50 * (ChgRatio + 1);\n#def OverSold = overSold;\n#def OverBought = overBought;\n\n#test\n#plot p= VWAp;#(period= AggregationPeriod.DAY);\n\n####################################\n\ndef cond_logic = if (def_cond) then MACD_Diff &lt;= 0 else yes;\n######\n#def sig_buy = Crosses(RSI(length = RSIlength, averageType = averageType).RSI, over_Sold, crossingType == crossingType.above) within RSI_prev bars and pFVE_Bull and cond_logic; # and Diff &lt;= 0;\ndef sig_buy = conVwapBuy and RSI&lt; rsiBuyLevel and pFVE_Bull  and cond_logic ;# and Diff &gt;= 0;\n#def sig_buy = pFVE_Bull and Diff &gt;= 0;\nplot signal_buy = sig_buy ;\n\n\ndef sig_sell = Crosses(RSI(length = RSIlength, averageType = averageType).RSI, overBought, crossingType == crossingType.below) within RSI_prev bars and pFVE_Bear ;\nplot signal_sell = sig_sell;\n\nsignal_buy.DefineColor(\&quot;Above\&quot;, Color.YELLOW);\nsignal_buy.DefineColor(\&quot;Below\&quot;, GetColor(8));\nsignal_buy.AssignValueColor(if crossingType == crossingType.above then signal_buy.Color(\&quot;Above\&quot;) else signal_buy.Color(\&quot;Below\&quot;));\nsignal_buy.setlineWeight(5);\nsignal_buy.SetPaintingStrategy(if crossingType == crossingType.above\n    then PaintingStrategy.BOOLEAN_ARROW_UP\n    else PaintingStrategy.BOOLEAN_ARROW_DOWN);\n\nsignal_sell.DefineColor(\&quot;Above\&quot;, Color.VIOLET);\nsignal_sell.DefineColor(\&quot;Below\&quot;, GetColor(8));\nsignal_sell.AssignValueColor(if crossingType == crossingType.above then signal_sell.Color(\&quot;Above\&quot;) else signal_sell.Color(\&quot;Below\&quot;));\n\nsignal_sell.SetPaintingStrategy(if crossingType == crossingType.above\n    then PaintingStrategy.BOOLEAN_ARROW_DOWN\n    else PaintingStrategy.BOOLEAN_ARROW_UP);\nsignal_sell.setlineWeight(5);\ninput bubble =no; \nAddChartBubble(bubble and sig_sell == 1, price, \&quot;S= \&quot; + price + \&quot; rsi \&quot; + RSI, Color.VIOLET, no);&quot;,name=&quot;_259d509b_f440_4edf_840b_2df1df75ab8c&quot;}){inputsMap:TreeMap5{^(&quot;price&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap5,plots{0:{lineWeight=4},1:{lineWeight=4}}}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2017-2021\n#\n\ninput price = close;\ninput length = 9;\ninput displace = 0;\ninput showBreakoutSignals = no;\n\nplot SMA = Average(price[-displace], length);\nplot UpSignal = price crosses above SMA;\nplot DownSignal = price crosses below SMA;\n\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\nSMA.SetDefaultColor(GetColor(1));\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);&quot;,name=&quot;SimpleMovingAvg&quot;}){inputsMap:TreeMap6{^(&quot;length&quot;,200),^(&quot;price&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap6,plots{0:{color=@CustomColor7}}}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;input price = close;\ninput displace = 0;\ninput length = 20;\ninput Num_Dev_Dn = -2.0;\ninput Num_Dev_up = 2.0;\ninput averageType = AverageType.Simple;\ninput showCloud= yes;\n\ndef sDev = stdev(data = price[-displace], length = length);\n\nplot MidLine = MovingAverage(averageType, data = price[-displace], length = length);\nplot LowerBand = MidLine + num_Dev_Dn * sDev;\nplot UpperBand = MidLine + num_Dev_Up * sDev;\n\nLowerBand.SetDefaultColor(GetColor(0));\nMidLine.SetDefaultColor(GetColor(1));\nUpperBand.SetDefaultColor(GetColor(5));\n\n#############################\ndef Na = Double.NaN;\n\ndef cloudhigh = If( ShowCloud, UpperBand, Na);\ndef cloudlow  = If(ShowCloud, LowerBand, Na);\n#AddCloud(cloudhigh, cloudlow, Color.GRAY, Color.GRAY);\n\n\nAddCloud(cloudhigh, Midline, Color.Green, Color.light_Green);\nAddCloud(cloudlow, Midline, Color.Red, Color.light_Red);\n\n\n####$$$$$$$$\n\n\ninput priceSlm = close;\n\ninput superFastLength = 8;\n\ninput fastLengthSlm = 13;\n\ninput slowLengthSlm = 21;\n\n\n\n\ninput averageTypeSlm = AverageType.EXPONENTIAL;\n\ndef mov_avg8 = MovingAverage(averageTypeSlm, priceSlm[-displace], superFastLength);\n\ndef mov_avg13 = MovingAverage(averageTypeSlm, priceSlm[-displace], fastLengthSlm);\n\ndef mov_avg21 = MovingAverage(averageTypeSlm, priceSlm[-displace], slowLengthSlm);\n \n#moving averages\n\ndef Superfast = mov_avg8;\n\ndef Fast = mov_avg13;\n\ndef Slow = mov_avg21;\n\n\ndef buy = mov_avg8 &gt; mov_avg13 and mov_avg13 &gt; mov_avg21 and low &gt; mov_avg8;\n\ndef stopbuy = mov_avg8 &lt;= mov_avg13;\n\ndef buynow = !buy[1] and buy;\n\ndef buysignal = CompoundValue(1, if buynow and !stopbuy then 1 else if buysignal[1] == 1 and stopbuy then 0 else buysignal[1], 0);\n\n\ndef Buy_Signal = buysignal[1] == 0 and buysignal == 1;\n\ndef Momentum_Down = buysignal[1] == 1 and buysignal == 0;\n\n\ndef sell = mov_avg8 &lt; mov_avg13 and mov_avg13 &lt; mov_avg21 and high &lt; mov_avg8;\n\ndef stopsell = mov_avg8 &gt;= mov_avg13;\n\ndef sellnow = !sell[1] and sell;\n\ndef sellsignal = CompoundValue(1, if sellnow and !stopsell then 1 else if sellsignal[1] == 1 and stopsell then 0 else sellsignal[1], 0);\n\n\ndef Sell_Signal = sellsignal[1] == 0 and sellsignal;\n\ndef Momentum_Up = sellsignal[1] == 1 and sellsignal == 0;\n \n# when using this as a custom scan, change the word plot to def\n# then remove the \'#\' from in front of one of the \&quot;plot Scan\&quot; statements below\ndef Colorbars = if buysignal == 1 then 1 else if sellsignal == 1 then -1 else if buysignal == 0 or sellsignal == 0 then 0 else 0;\n\n# use this first Scan plot for SLM Ribbon Momentum UP\n#plot Scan = if Colorbars == 1 then yes else no;\n\n# use this second Scan plot for SLM Ribbon Momentum DOWN\n#plot Scan = if Colorbars == -1 then yes else no;\n\n\n\n\n\n\n###############\n\ndef Colorbars1 = if buysignal == 1 then 1 else if sellsignal == 1 then 2 else if buysignal == 0 or sellsignal == 0 then 3 else 0;\n\ninput lengthHma = 20;\n\ndef HMA = MovingAverage(AverageType.HULL, price, lengthHma);\ndef HMA_Up=  HMA &gt; HMA[1];\ndef HMA_Down =! HMA_UP;\n\n###############\n\n#def Colorbars1 = if buysignal == 1 then 1 else if sellsignal == 1 then 2 else if buysignal == 0 or sellsignal == 0 then 3 else 0;\n\n\n\nMidLine.definecolor(\&quot;Buy\&quot;, color.dark_green);\n\n\nMidLine.definecolor(\&quot;Sell\&quot;, color.red);\n\nMidLine.definecolor(\&quot;Neutral\&quot;, Color.PLUM);\n#MidLine.definecolor(\&quot;NeutralDown\&quot;, Color.orange);\nMidLine.definecolor(\&quot;HullMA_up\&quot;, color.blue);\n\nMidLine.definecolor(\&quot;HullMA_down\&quot;, color.orange);\n\nMidLine.AssignValueColor(if buysignal and HMA_Up then MidLine.color(\&quot;Buy\&quot;) else if buysignal and !HMA_Up then MidLine.color(\&quot;HullMA_down\&quot;) else if sellsignal and HMA_Down  then MidLine.color(\&quot;Sell\&quot;) else  if sellsignal and !HMA_Down  then MidLine.color(\&quot;HullMA_up\&quot;) else  MidLine.color(\&quot;neutral\&quot;));;#\n# if Momentum_Up then  RSI.color(\&quot;neutralUp\&quot;) else  RSI.color(\&quot;neutraldown\&quot;));\n\n\n\n\n\n\n\n#MidLine.definecolor(\&quot;Buy_Signal_Bars\&quot;, color.dark_green);\n\n#MidLine.definecolor(\&quot;Sell_Signal_Bars\&quot;, color.red);\n\n#MidLine.definecolor(\&quot;NeutralUp\&quot;, color.plum);\n\n#MidLine.definecolor(\&quot;NeutralDown\&quot;, color.orange);\n\n#MidLine.AssignValueColor(if Colorbars1 ==1 then MidLine.color(\&quot;buy_signal_bars\&quot;) else if colorbars1 ==2 then #MidLine.color(\&quot;Sell_Signal_bars\&quot;) else if Momentum_Up then  MidLine.color(\&quot;neutralUp\&quot;) else MidLine.color(\&quot;neutralDown\&quot;) );\n\n\nplot UpSignal = if (buysignal and price crosses above MidLine) then LowerBand else Double.NaN;\nplot DownSignal = if (sellsignal and price crosses below MidLine) then UpperBand else Double.NaN;\ninput showBreakoutSignals =no;\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\n\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\n\n\n\nMidLine.setlineWeight(3);\n\n\n\n\n\n\n######$$$$&quot;,name=&quot;_cbc1e041_e9b4_4664_b964_97e197ec9dfd&quot;}){hidden=&lt;T,inputsMap:TreeMap7{^(&quot;price&quot;,&quot;CLOSE&quot;),^(&quot;priceSlm&quot;,&quot;CLOSE&quot;),^(&quot;showCloud&quot;,&lt;F)},inputsMap=@TreeMap7}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;#start\n\n#hint: &lt;b&gt;Ask SLM Ribbon&lt;/b&gt;\\nThe Ask SLM Ribbon is a momentum indicator that uses a combination of three exponential moving averages. When the averages are in alinement, with the \&quot;superfast\&quot; moving average above the \&quot;fast\&quot; moving average and the fast moving average above the \&quot;slow\&quot; moving average, the momentum condition is positive. A \&quot;buy signal\&quot; is generated, with an up arrow, when above conditions are met and a \&quot;clear bar\&quot; occurs; with the low of that bar is above all of the moving averages. The positive momentum ends if the superfast moving average touches the fast moving average; then condition is considered neutral and an oppostive arrow will appear. Negative momentum and a \&quot;Sell signal\&quot; are the opposite of the bullish conditions. \\n \\n\\n--------------------------------------------------------------------------------\\nVolume bars can be colored to match the Chart by clicking on Style&gt;Settings&gt;Appearance&gt;Common, and color symbol as ticks  \\n\n\n\n# Variables:\n\n \n\n#input price = close;\ninput color_bars=no;\n\ninput useHeikinAshi =no;\n\ninput superfast_length = 4;\n\ninput fast_length = 7;\n\ninput slow_length =17;\n\n\ninput displace = 0;\ninput  pSupperFast = hlc3 ;\ninput pFast  = close ;\ninput pSlow  = close ;\ninput averageTypeSuperfast = AverageType.simple;\ninput averageTypefast = AverageType.simple;\ninput averageTypeSlow = AverageType.EXPONENTIAL;\n\n\n\ndef priceSupperFast ;\ndef priceFast ;\ndef priceSlow ;\n#Heikin Ashi\ndef haClose = (open+high+low+close)/4; #Heikin Ashi Close: The arithmetic mean of the current high, low, open, and close prices.\ndef haOpen = (haOpen[1] + haClose[1])/2  ;# Heikin Ashi Open: The midpoint of the previous candle.\ndef haHigh = max(high, max( haOpen, haClose) ) ;#Heikin Ashi High: The highest of the following: the actual high, the Heikin Ashi Open, or the Heikin Ashi Close.\ndef haLow = Min(low,min( haOpen, haClose));# Heikin Ashi Low: The lowest of the following: the actual low, the Heikin Ashi Open, or the Heikin Ashi Close.\n\nif useHeikinAshi \n\n then\n {\n  priceSupperFast = (haHigh +haLow+ haclose)/3;\n  priceFast = haclose;\n  priceSlow = haclose;\n }\nelse\n {\n  priceSupperFast = pSupperFast;\n  priceFast = pFast;\n  priceSlow = pSlow;\n }\n\n\n\ndef mov_avg_superFast = MovingAverage(averageTypeSuperfast, priceSupperFast[-displace], superfast_length);\ndef mov_avg_Fast = MovingAverage(averageTypefast, priceFast[-displace], fast_length);\ndef mov_avg_Slow = MovingAverage(averageTypeSlow, priceSlow[-displace], slow_length);\n\n#moving averages\nPlot Superfast = mov_avg_superFast;\nplot Fast = mov_avg_Fast;\nplot Slow = mov_avg_Slow;\nSuperfast.setdefaultColor(color.yellow);\nFast.setdefaultColor(color.cyan);\nSlow.setdefaultColor(color.blue);\n\n\n \n\ndef buy = mov_avg_superFast &gt; mov_avg_Fast and mov_avg_Fast &gt; mov_avg_Slow and hlc3 &gt; mov_avg_superFast;\n\ndef stopbuy = mov_avg_superFast &lt;= mov_avg_Fast or  hlc3 &lt; mov_avg_Fast;\n\ndef buynow = !buy[1] and buy;\n\ndef buysignal = CompoundValue(1, if buynow and !stopbuy then 1 else if buysignal[1]==1 and stopbuy then 0 else buysignal[1], 0);\n\n \n\nplot Buy_Signal = buysignal[1] == 0 and buysignal==1;\nBuy_signal.setpaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nBuy_signal.setdefaultColor(color.dark_GREEN);\nBuy_signal.hidetitle();\n#Alert(condition = buysignal[1] == 0 and buysignal == 1, text = \&quot;Buy Signal\&quot;, sound = Sound.Bell, \&quot;alert type\&quot; = Alert.BAR);\n\nplot Momentum_Down = buysignal[1] ==1 and buysignal==0;\nMomentum_down.setpaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);\nMomentum_Down.setdefaultColor(color.plum);\nMomentum_down.hidetitle();\n\n#Alert(condition = buysignal[1] == 1 and buysignal == 0, text = \&quot;Momentum_Down\&quot;, sound = Sound.Bell, \&quot;alert type\&quot; = Alert.BAR);\ndef sell = mov_avg_superFast &lt; mov_avg_Fast and mov_avg_Fast &lt; mov_avg_Slow and high &lt; mov_avg_superFast;\ndef stopsell = mov_avg_superFast &gt;= mov_avg_Fast or  close &gt; mov_avg_Fast;;\n\ndef sellnow = !sell[1] and sell;\n\ndef sellsignal = CompoundValue(1, if sellnow and !stopsell then 1 else if sellsignal[1]==1 and stopsell then 0 else sellsignal[1], 0);\n\n \n\nPlot Sell_Signal = sellsignal[1] ==0 and sellsignal;\n\nSell_signal.setpaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_down);\n\nsell_signal.setDefaultColor(color.red);\n\nSell_signal.hidetitle();\n\n#Alert(condition = sellsignal[1] == 0 and sellsignal == 1, text = \&quot;Sell Signal\&quot;, sound = Sound.Bell, \&quot;alert type\&quot; = Alert.BAR);\n\n \n\nPlot Momentum_Up = sellsignal[1]==1 and sellSignal==0;\n\nMomentum_up.setpaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_up);\n\nMomentum_up.setDefaultColor(color.plum);\n\nMomentum_up.hidetitle();\n\n#Alert(condition = sellsignal[1] == 1 and sellSignal == 0, text = \&quot;Momentum_Up\&quot;, sound = Sound.Bell, \&quot;alert type\&quot; = Alert.BAR);\ninput priceHma = close;\n input lengthHma = 20;\n\ndef HMA = MovingAverage(AverageType.HULL, priceHma, lengthHma);\ndef HMA_Up=  HMA &gt; HMA[1];\ndef HMA_Down =! HMA_UP;\n\nplot Colorbars = if buysignal and HMA_Up then 1 else if  buysignal and !HMA_Up then  2 else if sellsignal and HMA_Down then 3  else if sellsignal and !HMA_Down then  4 else if !buysignal or !sellsignal then 5 else 0;\n\ncolorbars.setHiding(1);\n\nColorbars.definecolor(\&quot;Buy\&quot;, color.dark_green);\n\nColorbars.definecolor(\&quot;Sell\&quot;, color.red);\n\nColorbars.definecolor(\&quot;Neutral\&quot;, color.plum);\nColorbars.definecolor(\&quot;HullMA_up\&quot;, color.blue);\n\nColorbars.definecolor(\&quot;HullMA_down\&quot;, color.orange);\n\n\n\n\n\n\n\n\n###############\n\n#def Colorbars1 = if buysignal == 1 then 1 else if sellsignal == 1 then 2 else if buysignal == 0 or sellsignal == 0 then 3 else 0;\n\n\n\n\n\n\n\n\n \n\nAssignPriceColor(if Colorbars ==1 and color_bars then colorbars.color(\&quot;Buy\&quot;) else if colorbars ==2 and color_bars  then colorbars.color(\&quot;HullMA_down\&quot;) else if colorbars ==3 and color_bars  then colorbars.color(\&quot;Sell\&quot;)  else if colorbars ==4 and color_bars  then colorbars.color(\&quot;HullMA_up\&quot;)else if color_bars  then colorbars.color(\&quot;neutral\&quot;) else  Color.CURRENT);\n\n#end&quot;,name=&quot;_65bf37d7_00d7_4e85_986f_9649d9ba6744&quot;}){hidden=&lt;T,inputsMap:TreeMap8{^(&quot;pFast&quot;,&quot;CLOSE&quot;),^(&quot;priceHma&quot;,&quot;CLOSE&quot;),^(&quot;pSlow&quot;,&quot;CLOSE&quot;),^(&quot;pSupperFast&quot;,&quot;(H+L+C)/3&quot;),!get:Integer0(&quot;superfast_length&quot;),!get:Integer1(&quot;slow_length&quot;)},inputsMap=@TreeMap8}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# @new\n# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2011-2021\n#\n\ninput numDevDn = -2.0;\ninput numDevUp = 2.0;\ninput timeFrame = {default DAY, WEEK, MONTH};\n\ndef cap = getAggregationPeriod();\ndef errorInAggregation =\n    timeFrame == timeFrame.DAY and cap &gt;= AggregationPeriod.WEEK or\n    timeFrame == timeFrame.WEEK and cap &gt;= AggregationPeriod.MONTH;\nassert(!errorInAggregation, \&quot;timeFrame should be not less than current chart aggregation period\&quot;);\n\ndef yyyyMmDd = getYyyyMmDd();\ndef periodIndx;\nswitch (timeFrame) {\ncase DAY:\n    periodIndx = yyyyMmDd;\ncase WEEK:\n    periodIndx = Floor((daysFromDate(first(yyyyMmDd)) + getDayOfWeek(first(yyyyMmDd))) / 7);\ncase MONTH:\n    periodIndx = roundDown(yyyyMmDd / 100, 0);\n}\ndef isPeriodRolled = compoundValue(1, periodIndx != periodIndx[1], yes);\n\ndef volumeSum;\ndef volumeVwapSum;\ndef volumeVwap2Sum;\n\nif (isPeriodRolled) {\n    volumeSum = volume;\n    volumeVwapSum = volume * vwap;\n    volumeVwap2Sum = volume * Sqr(vwap);\n} else {\n    volumeSum = compoundValue(1, volumeSum[1] + volume, volume);\n    volumeVwapSum = compoundValue(1, volumeVwapSum[1] + volume * vwap, volume * vwap);\n    volumeVwap2Sum = compoundValue(1, volumeVwap2Sum[1] + volume * Sqr(vwap), volume * Sqr(vwap));\n}\ndef price = volumeVwapSum / volumeSum;\ndef deviation = Sqrt(Max(volumeVwap2Sum / volumeSum - Sqr(price), 0));\n\nplot VWAP = price;\nplot UpperBand = price + numDevUp * deviation;\nplot LowerBand = price + numDevDn * deviation;\n\nVWAP.setDefaultColor(getColor(0));\nUpperBand.setDefaultColor(getColor(2));\nLowerBand.setDefaultColor(getColor(4));&quot;,name=&quot;VWAP&quot;}){hidden=&lt;T,inputsMap:TreeMap9{^(&quot;timeFrame&quot;,&quot;WEEK&quot;)},inputsMap=@TreeMap9,plots{0:{color=@CustomColor2,lineStyle=6},1:{color=@CustomColor7,lineStyle=6},2:{color=@CustomColor7,lineStyle=6}}}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;### xiuyu vwap cross signal with abnormal volume\n\n#declare hide_on_daily;\n\n####\n#MTF\ndef tFrame = GetAggregationPeriod();\ninput timeFrame = {default DAY, WEEK, MONTH};\ninput aggregationPeriod = AggregationPeriod.HOUR;\ninput useAutoAggegate = yes;\n\n\n\n# Variables:\n#def  =if (useAutoAggegate) then open(period = aggregationPeriod1) else open;\n\ndef AutoAGG = if tFrame &lt;  AggregationPeriod.DAY then AggregationPeriod.DAY\n             else if  tFrame &lt; AggregationPeriod.WEEK then AggregationPeriod.WEEK\n                  else AggregationPeriod.MONTH;\ndef AGG = if (!useAutoAggegate) then aggregationPeriod else AutoAGG;\n\ndef testTimeFrames = if tFrame &lt; AGG  then yes else no;\n\n#AddLabel(useAutoAggegate, if testTimeFrames  then \&quot;Time Frames Are Correct\&quot; else \&quot;Time Frames Are \n\ninput length = 10; #average volume lenght\ninput volMinimum = 50000;\ninput showPriceColor = yes;\ninput factor = 1.50; #show what factors to avgvolume \ninput nDevUp = 2.0;\ninput nDevDn = -2.0;\n\ndef avgvolume = Average(volume, length) * factor;\n\n\n#plot vwap = reference VWAP( AGG);\n#######\n\n\ndef cap = GetAggregationPeriod();\ndef errorInAggregation =\n    timeFrame == timeFrame.DAY and cap &gt;= AggregationPeriod.WEEK or\n    timeFrame == timeFrame.WEEK and cap &gt;= AggregationPeriod.MONTH;\nAssert(!errorInAggregation, \&quot;timeFrame should be not less than current chart aggregation period\&quot;);\n\ndef yyyyMmDd = GetYYYYMMDD();\ndef periodIndx;\nswitch (timeFrame) {\ncase DAY:\n    periodIndx = yyyyMmDd;\ncase WEEK:\n    periodIndx = Floor((DaysFromDate(First(yyyyMmDd)) + GetDayOfWeek(First(yyyyMmDd))) / 7);\ncase MONTH:\n    periodIndx = RoundDown(yyyyMmDd / 100, 0);\n}\ndef isPeriodRolled = CompoundValue(1, periodIndx != periodIndx[1], yes);\n\ndef volumeSum;\ndef volumeVwapSum;\ndef volumeVwap2Sum;\n\nif (isPeriodRolled) {\n    volumeSum = volume;\n    volumeVwapSum = volume * vwap;\n    volumeVwap2Sum = volume * Sqr(vwap);\n} else {\n    volumeSum = CompoundValue(1, volumeSum[1] + volume, volume);\n    volumeVwapSum = CompoundValue(1, volumeVwapSum[1] + volume * vwap, volume * vwap);\n    volumeVwap2Sum = CompoundValue(1, volumeVwap2Sum[1] + volume * Sqr(vwap), volume * Sqr(vwap));\n}\ndef price = volumeVwapSum / volumeSum;\ndef deviation = Sqrt(Max(volumeVwap2Sum / volumeSum - Sqr(price), 0));\n\nplot VWAP = price;\nplot UpperBand = price + nDevUp * deviation;\nplot LowerBand = price + nDevDn * deviation;\nplot UpperBand2 = price + (1+nDevUp) * deviation;\nplot LowerBand2 = price +(-1+ nDevDn) * deviation;\ndef sdvP1=  price + deviation;\ndef sdvN1=  price - deviation;\n#####\n\n\nplot SD1up =close[1] crosses above sdvp1 and ( open&lt; close) and low&gt;sdvp1;\nSD1up.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nSD1up.SetDefaultColor(Color.graY);\nSD1up.SetLineWeight(2);\nAssignPriceColor(if SD1up and showPriceColor and open&lt; close then Color.violet else Color.CURRENT);\n\nAddLabel(yes, \&quot;VWAP= \&quot; + astext(VWAP), if VWAP&lt; close then Color.LIGHT_GREEN else if VWAP&gt; close then color.LIGHT_red else Color.GRAY);\n#AddLabel(yes, \&quot;VWAP= \&quot; + astext(VWAP), Color.White);\ndef vwDif= close- VWAP;\n#AddLabel(yes, \&quot; \&quot;+astext(vwDif), if vwDif&gt; 0 then Color.LIGHT_GREEN else if vwDif&lt; 0 then color.LIGHT_red else Color.GRAY);\nAddLabel(yes and vwDif&gt;0, \&quot; +\&quot;+astext(vwDif),  Color.LIGHT_GREEN );\nAddLabel(yes and vwDif&lt;=0, \&quot; \&quot;+astext(vwDif),  if vwDif&lt; 0 then color.LIGHT_red else Color.LIGHT_GRAY);\n\ninput vwapLableAll =yes;\nAddLabel(vwapLableAll, \&quot;VWAP +1= \&quot; + astext(sdvP1), if sdvP1&lt; close then Color.LIGHT_GREEN else if sdvP1&gt; close then color.LIGHT_red else Color.GRAY);\n\nAddLabel(vwapLableAll, \&quot;VWAP +2= \&quot; + astext(UpperBand), if UpperBand&lt; close then Color.LIGHT_GREEN else if UpperBand&gt; close then color.LIGHT_red else Color.GRAY);\nAddLabel(vwapLableAll, \&quot;VWAP +3= \&quot; + astext(UpperBand2), if UpperBand2&lt; close then Color.LIGHT_GREEN else if UpperBand2&gt; close then color.LIGHT_red else Color.GRAY);\n\nAddLabel(vwapLableAll, \&quot;VWAP -1= \&quot; + astext(sdvN1), if sdvN1&lt; close then Color.LIGHT_GREEN else if sdvN1&gt; close then color.LIGHT_red else Color.GRAY);\nAddLabel(vwapLableAll, \&quot;VWAP -2= \&quot; + astext(LowerBand), if LowerBand&lt; close then Color.LIGHT_GREEN else if LowerBand&gt; close then color.LIGHT_red else Color.GRAY);\nAddLabel(vwapLableAll, \&quot;VWAP -3= \&quot; + astext(LowerBand2), if LowerBand2&lt; close then Color.LIGHT_GREEN else if LowerBand2&gt; close then color.LIGHT_red else Color.GRAY);\n\n#AddLabel(vwapLableAll, \&quot;VWAP R= \&quot; + astext(upperBand/sdvN1 -1)+\&quot;  \&quot;+astext(upperBand/lowerBand -1)+\&quot;  \&quot;+astext(upperBand2/lowerBand2 -1), if LowerBand&lt; close then Color.LIGHT_GREEN else if LowerBand&gt; close then color.LIGHT_red else Color.GRAY);\n\nAddLabel(vwapLableAll, \&quot;VWAP R= \&quot; + astext(upperBand/sdvN1 -1)+\&quot;  \&quot;+astext(upperBand/lowerBand -1)+\&quot;  \&quot;+astext(upperBand2/lowerBand2 -1), if LowerBand&lt; close then Color.LIGHT_GREEN else if LowerBand&gt; close then color.LIGHT_red else Color.GRAY);\n\n\n\ndef volCheck = volume &gt;= avgvolume &amp;&amp; volume &gt;= volMinimum &amp;&amp; volume &gt;= volume[1];\ndef isCross =  close crosses VWAP;\ndef abnormalSignal = isCross and volCheck;\n\n\nVWAP.SetDefaultColor(color.white);#(GetColor(0));\nplot signalup = if abnormalSignal and close &gt; VWAP then low else Double.NaN;\nsignalup.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nsignalup.SetDefaultColor(Color.CYAN);\nsignalup.SetLineWeight(2);\n\nplot signaldown =  if abnormalSignal and close &lt; VWAP then high else Double.NaN;\nsignaldown.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);\nsignaldown.SetDefaultColor(Color.CYAN);\nsignaldown.SetLineWeight(2);\n\nAssignPriceColor(if abnormalSignal and showPriceColor then Color.CYAN else Color.CURRENT);\n\n\n#####\nvwap.SetStyle(Curve.POINTS);\nUpperBand.SetDefaultColor(GetColor(0));\nLowerBand.SetDefaultColor(GetColor(0));\n\nUpperBand.SetStyle(Curve.POINTS);\nLowerBand.SetStyle(Curve.POINTS);\n\nUpperBand2.SetDefaultColor(Color.YELLOW);\nLowerBand2.SetDefaultColor(Color.YELLOW);\n\nUpperBand2.SetStyle(Curve.SHORT_DASH);\nLowerBand2.SetStyle(Curve.SHORT_DASH);\n#input AutoHide=yes;\n#def hideLower = if AutoHide then close &gt;vwap  else 0;;\n#def hideUpper = if AutoHide then  close &lt;vwap  else 0;#- deviation\n#addLabel(yes, \&quot;hide U\&quot;+hideUpper +\&quot; L\&quot;+hideLower);\n#UpperBand.setHiding(hideUpper);\n#LowerBand.setHiding(hideLower);\n#UpperBand.Hide();\n#LowerBand.Hide();\n#UpperBand2.Hide();\n#LowerBand2.Hide();&quot;,name=&quot;_740dc265_6e6e_38a5_ba0e_c0a058a5d552&quot;}){hidden=&lt;T,inputsMap:TreeMap10{^(&quot;vwapLableAll&quot;,&lt;F)},inputsMap=@TreeMap10}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;#start\n\n#hint: &lt;b&gt;Ask SLM Ribbon&lt;/b&gt;\\nThe Ask SLM Ribbon is a momentum indicator that uses a combination of three exponential moving averages. When the averages are in alinement, with the \&quot;superfast\&quot; moving average above the \&quot;fast\&quot; moving average and the fast moving average above the \&quot;slow\&quot; moving average, the momentum condition is positive. A \&quot;buy signal\&quot; is generated, with an up arrow, when above conditions are met and a \&quot;clear bar\&quot; occurs; with the low of that bar is above all of the moving averages. The positive momentum ends if the superfast moving average touches the fast moving average; then condition is considered neutral and an oppostive arrow will appear. Negative momentum and a \&quot;Sell signal\&quot; are the opposite of the bullish conditions. \\n \\n\\n--------------------------------------------------------------------------------\\nVolume bars can be colored to match the Chart by clicking on Style&gt;Settings&gt;Appearance&gt;Common, and color symbol as ticks  \\n\n\n\n# Variables:\n\n \n\n#input price = close;\ninput color_bars=no;\n\ninput useHeikinAshi =no;\n\ninput superfast_length =10;\n\ninput fast_length = 21;\n\ninput slow_length =40;\n\n\ninput displace = 0;\ninput price = close;\ninput pSupperFast = close ;\ninput pFast  = close ;\ninput pSlow  = close ;\ninput averageTypeSuperfast = AverageType.simple;\ninput averageTypefast = AverageType.simple;\ninput averageTypeSlow = AverageType.simPLE;\n\n\n\n\ndef priceSupperFast ;\ndef priceFast ;\ndef priceSlow ;\n#Heikin Ashi\ndef haClose = (open+high+low+close)/4; #Heikin Ashi Close: The arithmetic mean of the current high, low, open, and close prices.\ndef haOpen = (haOpen[1] + haClose[1])/2  ;# Heikin Ashi Open: The midpoint of the previous candle.\ndef haHigh = max(high, max( haOpen, haClose) ) ;#Heikin Ashi High: The highest of the following: the actual high, the Heikin Ashi Open, or the Heikin Ashi Close.\ndef haLow = Min(low,min( haOpen, haClose));# Heikin Ashi Low: The lowest of the following: the actual low, the Heikin Ashi Open, or the Heikin Ashi Close.\n\nif useHeikinAshi \n\n then\n {\n  priceSupperFast = (haHigh +haLow+ haclose)/3;\n  priceFast = haclose;\n  priceSlow = haclose;\n }\nelse\n {\n  priceSupperFast = pSupperFast;\n  priceFast = pFast;\n  priceSlow = pSlow;\n }\n\n\n\ndef mov_avg_superFast = MovingAverage(averageTypeSuperfast, priceSupperFast[-displace], superfast_length);\ndef mov_avg_Fast = MovingAverage(averageTypefast, priceFast[-displace], fast_length);\ndef mov_avg_Slow = MovingAverage(averageTypeSlow, priceSlow[-displace], slow_length);\n\n#moving averages\nPlot SuperfastAvg = mov_avg_superFast;\nplot FastAvg = mov_avg_Fast;\nplot SlowAvg = mov_avg_Slow;\nSuperfastAvg.setdefaultColor(color.yellow);\nFastAvg.setdefaultColor(color.cyan);\nSlowAvg.setdefaultColor(color.blue);\n\n################ppm1\ninput hide_debug =no;\nplot d =( priceSupperFast-priceSupperFast[1]);\nplot d_percnt = 100*( priceSupperFast-priceSupperFast[1])/priceSupperFast[1];\nd.setHiding(hide_debug);\nd_percnt.setHiding(hide_debug);\n\ninput lookback = 1;\n\ninput ppmiSmooth =3;\ninput averageTypePpmiSmooth = AverageType.simple;\ninput d1_length = 10;\ninput d2_length =21;\ninput th =0.25;\ninput show_ppmi = no;\n\n#input showMovingAvgLable =yes;\n\n#moving averages\n\ndef   ppm1_ =100*( SuperfastAvg-SuperfastAvg[lookback])/( SuperfastAvg); \ndef   ppm2_ =100*(FastAvg - FastAvg[lookback])/( FastAvg); \ndef   ppm3_ =100*( SlowAvg-SlowAvg[lookback])/(SlowAvg); \n#Plot ppm1 =MovingAverage(AverageType.EXPONENTIAL,ppm[-displace], signalPeriod);\n\nplot ppm1= MovingAverage(averageTypePpmiSmooth,ppm1_,ppmiSmooth);\nplot ppm2=  MovingAverage(averageTypePpmiSmooth,ppm2_,ppmiSmooth);\nplot ppm3=  MovingAverage(averageTypePpmiSmooth,ppm3_,ppmiSmooth);\n\n\n\nplot ppm_d1  = MovingAverage(averageTypefast, ppm1[-displace], d1_length);\nplot ppm_d2 = MovingAverage(averageTypefast, ppm1[-displace], d2_length);\n\n ppm1.sethiding(!show_ppmi);\n ppm2.sethiding(!show_ppmi);\n ppm3.sethiding(!show_ppmi);\n ppm_d1.sethiding(!show_ppmi);\n ppm_d2.sethiding(!show_ppmi);\n\n#################\n\n\n\n\n\ndef buy;\n\nif getAggregationPeriod()&gt;aggregationPeriod.DAY\n{\n#buy = mov_avg_superFast &gt; mov_avg_Fast and mov_avg_Fast &gt; mov_avg_Slow and price &gt; mov_avg_superFast and ppm1&gt; th and ppm2&gt; th;# and ppm3&gt; th ;\n#buy =  price &gt; mov_avg_superFast and( ppm1&gt; th*3 or   ppm1&gt; th  and( ppm2&gt;0 ));# mov_avg_Fast &gt; mov_avg_Slow and;#mov_avg_superFast &gt; mov_avg_Fast and or ppm3&gt; 0) ;\nbuy = mov_avg_superFast &gt; mov_avg_Fast and mov_avg_Fast  and price &gt; mov_avg_superFast and ppm1&gt; th and ppm2&gt; th and( ppm2&gt;0 );# and ppm3&gt; th ;\n\n}\nelse\n\n{\nbuy = mov_avg_superFast &gt; mov_avg_Fast and mov_avg_superFast &gt; mov_avg_Slow and price &gt; mov_avg_superFast and ppm1&gt; th and( ppm2&gt;0 );#or ppm3&gt; 0) ;\n}\n\n \n\n\n#def stopbuy = mov_avg_superFast &lt;= mov_avg_Fast or  price &lt; mov_avg_Fast ;#or ppm1&lt;=th or ppm2&lt;=th or ppm3&lt;=th;\n\ndef stopbuy =   price &lt; mov_avg_superFast ;#mov_avg_Fast &lt;= mov_avg_Slow or #or ppm1&lt;=th or ppm2&lt;=th or ppm3&lt;=th;\n\ndef buynow = !buy[1] and buy;\n\ndef buysignal = CompoundValue(1, if buynow and !stopbuy then 1 else if buysignal[1]==1 and stopbuy then 0 else buysignal[1], 0);\n\n \n\nplot Buy_Signal = buysignal[1] == 0 and buysignal==1;\nBuy_Signal.setpaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nBuy_Signal.setdefaultColor(color.dark_GREEN);\nBuy_Signal.hidetitle();\n\ndef buy_1_2aL = price &gt; mov_avg_superFast  and (mov_avg_superFast&gt; mov_avg_Fast or  mov_avg_superFast &gt; mov_avg_slow) and ppm1&gt; th;# and( ppm2&gt; 0 or ppm3&gt;0) ;\n\ndef stopbuy_1_2aL =price &lt; mov_avg_superFast  or (mov_avg_superFast&lt;= mov_avg_Fast and  mov_avg_superFast &lt;= mov_avg_slow) ;#or ppm1&lt;=th or ppm2&lt;=th or ppm3&lt;=th;\n\ndef buynow_1_2aL = !buy_1_2aL[1] and buy_1_2aL;\n\ndef buysignal_1_2aL = CompoundValue(1, if buynow_1_2aL and !stopbuy then 1 else if buysignal_1_2aL[1]==1 and stopbuy then 0 else buysignal_1_2aL[1], 0);\n\n \n\nplot Buy_Signal_M1_2aL = buysignal_1_2aL[1] == 0 and buysignal_1_2aL==1;\nBuy_Signal_M1_2aL.setpaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nBuy_Signal_M1_2aL.setdefaultColor(color.white);\nBuy_Signal_M1_2aL.hidetitle();\n\n\n\n\n#Alert(condition = buysignal[1] == 0 and buysignal == 1, text = \&quot;Buy Signal\&quot;, sound = Sound.Bell, \&quot;alert type\&quot; = Alert.BAR);\n\nplot Momentum_Down = buysignal[1] ==1 and buysignal==0;\nMomentum_down.setpaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);\nMomentum_Down.setdefaultColor(color.plum);\nMomentum_down.hidetitle();\n\n#Alert(condition = buysignal[1] == 1 and buysignal == 0, text = \&quot;Momentum_Down\&quot;, sound = Sound.Bell, \&quot;alert type\&quot; = Alert.BAR);\ndef sell_condition1 =  mov_avg_superFast &lt; mov_avg_Fast and mov_avg_superFast &lt; mov_avg_Slow and price &lt; mov_avg_superFast;\ndef sell_condition2 =  mov_avg_superFast &lt; mov_avg_Fast and price &lt; mov_avg_superFast and price &lt; mov_avg_Fast and price &lt; mov_avg_Slow and ppm1&lt;= -1.5 and ppm2&lt;= -1.0 ;\ndef sell_condition3 =price &lt; mov_avg_superFast and ppm1&lt;=0;# and ppm2&lt;= -1.0 ;\ndef sell_condition4 =price &lt; mov_avg_superFast ;#and ppm1&lt;=0;# and ppm2&lt;= -1.0 ;\n\ndef sell =  sell_condition2 or sell_condition4;\ndef stopsell = price &gt; mov_avg_superFast;#mov_avg_superFast &gt;= mov_avg_Fast or  ;;\n\ndef sellnow = !sell[1] and sell;\n\ndef sellsignal = CompoundValue(1, if sellnow and !stopsell then 1 else if sellsignal[1]==1 and stopsell then 0 else sellsignal[1], 0);\n\n \n\nPlot Sell_Signal = sellsignal[1] ==0 and sellsignal;\n\nSell_signal.setpaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_down);\n\nsell_signal.setDefaultColor(color.red);\n\nSell_signal.hidetitle();\n\n#Alert(condition = sellsignal[1] == 0 and sellsignal == 1, text = \&quot;Sell Signal\&quot;, sound = Sound.Bell, \&quot;alert type\&quot; = Alert.BAR);\n\n \n\nPlot Momentum_Up = sellsignal[1]==1 and sellSignal==0;\n\nMomentum_up.setpaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_up);\n\nMomentum_up.setDefaultColor(color.plum);\n\nMomentum_up.hidetitle();\n\n#Alert(condition = sellsignal[1] == 1 and sellSignal == 0, text = \&quot;Momentum_Up\&quot;, sound = Sound.Bell, \&quot;alert type\&quot; = Alert.BAR);\ninput priceHma = close;\n input lengthHma = 20;\n\ndef HMA = MovingAverage(AverageType.HULL, priceHma, lengthHma);\ndef HMA_Up=  HMA &gt; HMA[1];\ndef HMA_Down =! HMA_UP;\n\nplot Colorbars = if buysignal and HMA_Up then 1 else if  buysignal and !HMA_Up then  2 else if sellsignal and HMA_Down then 3  else if sellsignal and !HMA_Down then  4 else if !buysignal or !sellsignal then 5 else 0;\n\ncolorbars.setHiding(1);\n\nColorbars.definecolor(\&quot;Buy\&quot;, color.dark_green);\n\nColorbars.definecolor(\&quot;Sell\&quot;, color.red);\n\nColorbars.definecolor(\&quot;Neutral\&quot;, color.plum);\nColorbars.definecolor(\&quot;HullMA_up\&quot;, color.blue);\n\nColorbars.definecolor(\&quot;HullMA_down\&quot;, color.orange);\n###############\n\n#def Colorbars1 = if buysignal == 1 then 1 else if sellsignal == 1 then 2 else if buysignal == 0 or sellsignal == 0 then 3 else 0;\nAssignPriceColor(if Colorbars ==1 and color_bars then colorbars.color(\&quot;Buy\&quot;) else if colorbars ==2 and color_bars  then colorbars.color(\&quot;HullMA_down\&quot;) else if colorbars ==3 and color_bars  then colorbars.color(\&quot;Sell\&quot;)  else if colorbars ==4 and color_bars  then colorbars.color(\&quot;HullMA_up\&quot;)else if color_bars  then colorbars.color(\&quot;neutral\&quot;) else  Color.CURRENT);\n\n#\n\n\n\n\n###############################\ninput showlable=yes;\n\n\n\ninput showPpmDivLable=yes;\n\nAddLabel(showPpmDivLable, \&quot; ppm1= \&quot;+  roundup(ppm1,3), if ppm1&gt; 0 then Color.LIGHT_GREEN else if ppm1&lt; 0 then color.light_red else Color.Light_GRAY);\nAddLabel(showPpmDivLable, \&quot; d1= \&quot;+  roundup(ppm_d1,3),  Color.green);\nAddLabel(showPpmDivLable, \&quot; d2= \&quot;+  roundup(ppm_d2,3),  Color.cyan);\n\n\n\n#plot ppm1_d1 = MovingAverage(averageTypefast, ppm1[-displace], fast_length);\n#plot ppm1_d2 = MovingAverage(averageTypefast, ppm1[-displace], slow_length);\n\nppm1.setdefaultColor(color.light_ORANGE);\nppm2.setdefaultColor(color.violet);\nppm3.setdefaultColor(color.yellow);\n\nppm2.Hide();\nppm3.Hide();\nppm_d1.setdefaultColor(color.green);\nppm_d2.setdefaultColor(color.cyan);\n\n\nAddLabel(showlable, \&quot;  \&quot;+ superfast_length+ \&quot;MAvg\&quot; ,ppm1.TakeValueColor ());\nAddLabel(showlable,  astext(SuperfastAvg), if ppm1&lt; close then Color.LIGHT_GREEN else if ppm1&gt; close then color.light_red else Color.Light_GRAY);\ndef maDif= close- SuperfastAvg;\n\nAddLabel(showlable and maDif&gt;0, \&quot; +\&quot;+astext(maDif),  Color.LIGHT_GREEN );\nAddLabel(showlable and maDif&lt;=0, \&quot; \&quot;+astext(maDif),  if maDif&lt; 0 then color.LIGHT_red else Color.LIGHT_GRAY);\n\nAddLabel(showlable, \&quot;  \&quot;+ fast_length+ \&quot;MAvg\&quot; ,ppm2.TakeValueColor ());\nAddLabel(showlable,  astext(FastAvg), if ppm2&lt; close then Color.LIGHT_GREEN else if ppm2&gt; close then color.light_red else Color.Light_GRAY);\n\n\nAddLabel(showlable, \&quot;  \&quot;+ slow_length+ \&quot;MAvg\&quot; ,ppm3.TakeValueColor ());\nAddLabel(showlable,  astext(SlowAvg), if ppm3&lt; close then Color.LIGHT_GREEN else if ppm3&gt; close then color.light_red else Color.Light_GRAY);\n\n#AddLabel(showlable, \&quot;MA \&quot; + ppm_length + \&quot;=\&quot;+ astext(movAvg_ppm1), if movAvg_ppm1 &gt; close  then Color.RED else if movAvg_ppm1 &lt; close then  Color.GREEN else Color.GRAY);\n\nAddLabel(yes, \&quot; ppm1= \&quot;+  roundup(ppm1,3), if ppm1&gt; 0 then Color.LIGHT_GREEN else if ppm1&lt; 0 then color.light_red else Color.Light_GRAY);\nAddLabel(yes, \&quot; ppm2= \&quot; +   roundup(ppm2,3), if ppm2&gt; 0 then Color.LIGHT_GREEN else if ppm2&lt; 0 then color.light_red else Color.Light_GRAY);\nAddLabel(yes, \&quot; ppm3= \&quot;+  roundup(ppm3,3), if ppm3&gt; 0 then Color.LIGHT_GREEN else if ppm3&lt; 0 then color.light_red else Color.Light_GRAY);\n\n\n##################################\n\n\n\n\n\n\n\n\n\n\n\n\n#end&quot;,name=&quot;_ae3dde1c_4c60_4560_9ada_eb01ee615711&quot;}){inputsMap:TreeMap11{^(&quot;hide_debug&quot;,@Boolean0),^(&quot;pFast&quot;,&quot;CLOSE&quot;),!get:Integer2(&quot;lookback&quot;),^(&quot;ppmiSmooth&quot;,@Integer2),^(&quot;price&quot;,&quot;CLOSE&quot;),^(&quot;priceHma&quot;,&quot;CLOSE&quot;),^(&quot;pSlow&quot;,&quot;CLOSE&quot;),^(&quot;pSupperFast&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap11,plots{0:{color=@CustomColor3},2:{color=@CustomColor4},3:{hiding=&lt;T},4:{hiding=&lt;T},6:{hiding=&lt;F},7:{hiding=&lt;F},10:{color=@CustomColor1,lineWeight=5},11:{color=@CustomColor7,lineWeight=5},13:{color=@CustomColor3,lineWeight=5}}}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;#ShadowTrader_VA_Pivots\n#ShadowTrader (Copyright ShadowTrader), a division of ShadowTrader Technologies, LLC. 2017. All rights reserved. This ShadowTrader Script is for educational purposes only.  ShadowTrader is not responsible for the use,  functionality or the performance of this Script. This work is copyrighted by ShadowTrader and all rights of this work under the license are reserved. Use of the ShadowTrader licensed code is for private use only and any other use are prohibited. By exercising any of the rights herein, you are accepting the terms of this license. You have a non-exclusive right to use or alter the ShadowTrader code. Use of this ShadowTrader Script other than as provided for in this license is prohibited. Any redistribution is strictly prohibited and will be enforced.\n\n# A big ShadowTrader thank you to Justin Lane Williams for initially creating this script for us.\n#08/31/11: Total redesign, added automated Pivot values, proximity plotting, new features.\n#09/12/11: Added “ShowLevel4” option due to recent volitility. Will plot S4 &amp; R4.\n#12/11/11: Added “AfterHours” option to turn off plot after hours.\n#12/21/11: Bug fixes due to TOS upgrades. Removed “AfterHours”, not workin correctly.\n#01/25/12: Enter daily inputs as 4 digits and script will interpret.\n# -added rounding to make the pivots appear as they do on the show.\n#01/26/12: Removed ability to truncate inputs due to it only being accurate 99% of time.\n#02/02/12: Small update to make sure \&quot;Auto Pivots\&quot; menu option functioned properly.\n#06/07/12: Added (6)VPOC inputs, should be manually entered/deleted, displays when applicable.\n#06/25/12: Removed some code and fixed a few bugs.\n#07/09/12: Fixed one small but important bug.\n#07/13/12: Added value bubbles, removed proximity plot function.\n#08/13/12: Removed a lot of superfluous code plus a few upgrades.\n#08/15/12: Fixed a bug that was giving false numbers.\n#08/30/12: Fixed a bug that wasn\'t plotting the NQ profile.\n#09/02/12: Reordered inputs and removed \&quot;LabelESonly\&quot; input.\n#12/28/12: Made the plot hide on daily charts and updated code to current standards.\n#01/04/13: Fixed a rare bug that hides labels if using tick charts.\n#01/28/13: Added ability to hide each individual level.\n#02/09/21 :mahiby customized for  \n# Pivot values will be off the day following market holidays and possibly the day after rollover.\n# On these days make \&quot;AutoPivots=No\&quot; and manually draw pivots. Change back to \&quot;AutoPivots=Yes\&quot; the day after.\n\ninput PivotTimeFrame =  { \&quot;15 MIN\&quot; ,  \&quot;30 MIN\&quot;,  \&quot;1 HOUR\&quot;, \&quot;2 HOURs\&quot;,  \&quot;4 HOURs\&quot;, default \&quot;DAY\&quot;,  \&quot;2 DAYS\&quot;, \&quot;3 DAYS\&quot;, \&quot;4 DAYS\&quot;, WEEK, MONTH, \&quot;OPT EXP\&quot;, QUARTER, YEAR}; #AggregationPeriod.DAY;#\ninput ProfileTimeFrame = { CHART,  FIVE_MINUTE, TEN_MINUTE, FIFTEEN_MINUTE, THIRTY_MINUTE,   HOUR, TWO_HOUR, FOUR_HOUR, default DAY, TWO_DAY, THREE_DAY, FOUR_DAY, WEEK, TWO_WEEK, THREE_WEEK, MONTH, \&quot;OPT EXP\&quot;, BAR};\ninput ShowCloud1  = yes;#Hint ShowCloud: Shows the value area as a cloud.\ninput ShowCloud2  = yes;#Hint ShowCloud: Shows the value area as a cloud.\ninput showOnlyToday = no;\ninput VaPrevious = yes;\ninput AutoPivots = yes;#Hint AutoPivots: Turns off pivot lines, value area stays on.\ninput showVAH = no;\ninput Labels = {default \&quot;Proximity\&quot;, \&quot;Off\&quot;, \&quot;All\&quot;, \&quot;ValueAreaOnly\&quot;};#Hint Labels: Labels at top of chart.\ninput ShowPivotPoint = yes;#Hint ShowPivotPoint: Hides Pivot Point plot.\ninput ShowLevel4 = yes;#Hint ShowLevel4: Will display S4 and R4 for days with large moves.\ninput ShowLevel5 = yes;#Hint ShowLevel4: Will display S4 and R4 for days with large moves.\ninput ShowLevel6 = no;#Hint ShowLevel4: Will display S4 and R4 for days with large moves.\ninput ShowLevel7 = no;#Hint ShowLevel4: Will display S4 and R4 for days with large moves.\ninput ShowLevel8 = no;#Hint ShowLevel4: Will display S4 and R4 for days with large moves.\ninput PivotBubbles  = yes;#yes;#Hint PivotBubbles: Shows bubbles on pivot plot lines.\ninput ValueBubbles  = yes;#yes;#Hint ValueBubbles: Shows bubbles on value plot lines.\ninput PlotStartTime = 0930;#Hint PlotStartTime: Move to earlier time to shift bubbles to the left.\n\n\ninput CloudOpenOnly = yes;#Hint CloudOpenOnly: Will only cloud open candles.\ninput HideAfterHoursLabel = no;#Hint HideAfterHoursLabel: Hides \&quot;NoShadowPlotAfterHours\&quot; label.\ninput VpocBubbles  = no;#yes;#Hint VpocBubbles: Shows bubbles on VPOC plot lines.\n\ninput ShowS1 = yes;#yes;#Hint ShowS1: Hide/Show S1.\ninput ShowS2 = yes;#Hint ShowS2: Hide/Show S2.\ninput ShowS3 = yes;#yes;#Hint ShowS3: Hide/Show S3.\ninput ShowR1 = yes;#yes;#Hint ShowR1: Hide/Show R1.\ninput ShowR2 = yes;#Hint ShowR2: Hide/Show R2.\ninput ShowR3 = yes;#yes;#Hint ShowR3: Hide/Show R3.\ninput ShowORB = no;#Hint ShowORB: Displays 2 small, dashed lines at the top/bottom of opening range.\ninput OrbTime = 30;#Hint OrbTime: Defines the time range in minutes for the ORB.\n\ninput triggerUpperVaLimitHigh = 5;\ninput triggerUpperVaLimitLow = -5;\ninput triggerLowerVaLimitHigh = 5;\ninput triggerLowerVaLimitLow = -5;\ninput showLines = no;\ninput opacity = 20;\n\ndef Na = Double.NaN;\ninput showDebugLable = yes;\n#declare hide_on_daily;\n\n\n###pps\n\ninput marketThreshold = 0.0025;\n\ninput applyPersonsLevelsFilter = yes;\n\nAssert(marketThreshold &gt;= 0, \&quot;\'market threshold\' must not be negative: \&quot; + marketThreshold);\n\ndef marketType = {default DISABLED, NEUTRAL, BEARISH, BULLISH};\n\ndef PP2 = high(period = PivotTimeFrame)[2] + low(period = PivotTimeFrame)[2] + close(period = PivotTimeFrame)[2];\n\n################\n\nmarketType = if !applyPersonsLevelsFilter then marketType.DISABLED else\nif PP2[-1] &gt; (PP2[-1] + PP2 + PP2[1]) / 3 + marketThreshold then marketType.BULLISH else\nif PP2[-1] &lt; (PP2[-1] + PP2 + PP2[1]) / 3 - marketThreshold then marketType.BEARISH else marketType.NEUTRAL;\n\n#Previous Day Functions\ndef Day   = GetDayOfWeek(GetYYYYMMDD());\ndef CloseTime = SecondsTillTime(1545) &gt;= 0;\ndef OpenTime = SecondsFromTime(0930) &gt;= 0;\ndef RegHrs = CloseTime and OpenTime;\n\n###\ndef PLow ;\ndef PHigh ;\ndef PrevLow ;\ndef PrevHigh;\ndef a = if  \&quot;PivotTimeFrame\&quot; == \&quot;DAY\&quot; then 1 else 0;\n\nif  a {\n    PLow  =  CompoundValue(1, If(Day == Day[1] and RegHrs and low &lt; PLow[1], low, If(SecondsFromTime(0930) &lt;= 0 and RegHrs, low, PLow[1])), low);\n    PHigh = CompoundValue(1, If(Day == Day[1] and RegHrs and high &gt; PHigh[1], high, If(SecondsFromTime(0930) &lt;= 0 and RegHrs, high, PHigh[1])), high);\n    PrevLow  = If(Day != Day[1], PLow[1], PrevLow[1]);\n    PrevHigh = If(Day != Day[1], PHigh[1], PrevHigh[1]);\n\n#AddLabel (yes,period);\n}\n\nelse {\n    PLow  = low(period = PivotTimeFrame);\n    PHigh = high(period = PivotTimeFrame);\n    PrevLow  = low(period = PivotTimeFrame)[1];\n    PrevHigh = high(period = PivotTimeFrame)[1];\n\n}\n##################\n#Prior Day Profile - counting formula by functionform\n\ndef period;\ndef yyyymmdd = GetYYYYMMDD();\ndef seconds = SecondsFromTime(0);\ndef month = GetYear() * 12 + GetMonth();\ndef day_number = DaysFromDate(First(yyyymmdd)) + GetDayOfWeek(First(yyyymmdd));\ndef dom = GetDayOfMonth(yyyymmdd);\ndef dow = GetDayOfWeek(yyyymmdd - dom + 1);\ndef expthismonth = (if dow &gt; 5 then 27 else 20) - dow;\ndef exp_opt = month + (dom &gt; expthismonth);\n\nswitch (ProfileTimeFrame) {\ncase CHART:\n    period = 0;\n#case MINUTE:\n #   period = Floor(seconds / 60 + day_number * 24 * 60);\ncase FIVE_MINUTE:\n    period = Floor(seconds / 60 + day_number * 24 * 60);\n   # timeFrame = \&quot;5 MINUTES\&quot;; #\&quot;2 DAYS\&quot;\ncase TEN_MINUTE:\n    period = Floor(seconds / 60 + day_number * 24 * 60);\n   # timeFrame = \&quot;5 MINUTES\&quot;; #\&quot;2 DAYS\&quot;\ncase FIFTEEN_MINUTE:\n    period = Floor(seconds / 60 + day_number * 24 * 60);\n   # timeFrame = \&quot;15 MINUTES\&quot;; #\&quot;2 DAYS\&quot;\ncase THIRTY_MINUTE:\n    period = Floor(seconds / (30 * 60) + day_number * 24 * 60);\n   # timeFrame = \&quot;30 MINUTES\&quot;; #\&quot;2 DAYS\&quot;\ncase HOUR:\n    period = Floor(seconds / 3600 + day_number * 24);\n   # timeFrame = \&quot;1 HOUR\&quot;; #\&quot;2 DAYS\&quot;\ncase TWO_HOUR:\n    period = Floor(seconds / (2 * 3600) + day_number * 24);\n   # timeFrame = \&quot;2 HOURS\&quot;; #\&quot;2 DAYS\&quot;\ncase FOUR_HOUR:\n    period = Floor(seconds / (4 * 3600) + day_number * 24);\n    #timeFrame = \&quot;4 HOURS\&quot;; #\&quot;2 DAYS\&quot;\ncase DAY:\n    period = CountTradingDays(Min(First(yyyymmdd), yyyymmdd), yyyymmdd) - 1;\n   # timeFrame =  \&quot;1 DAY\&quot;;\ncase TWO_DAY:\n    period =  Floor((CountTradingDays(Min(First(yyyymmdd), yyyymmdd), yyyymmdd) - 1) / 2);\n   # timeFrame =  \&quot;2 DAYS\&quot;;\ncase THREE_DAY:\n    period = Floor((CountTradingDays(Min(First(yyyymmdd), yyyymmdd), yyyymmdd) - 1) / 3);\n   # timeFrame =  \&quot;3 DAYS\&quot;;\ncase FOUR_DAY:\n    period =  Floor((CountTradingDays(Min(First(yyyymmdd), yyyymmdd), yyyymmdd) - 1) / 4);\n   # timeFrame =  \&quot;4 DAYS\&quot;;\ncase WEEK:\n    period = Floor(day_number / 7);\n   # timeFrame =  \&quot;1 WEEK\&quot;;\ncase TWO_WEEK:\n    period = Floor(day_number / 14);\n  #  timeFrame =  \&quot;2 WEEK\&quot;;\ncase THREE_WEEK:\n    period = Floor(day_number / 21);\n   # timeFrame =  \&quot;3 WEEK\&quot;;\ncase MONTH:\n    period = Floor(month - First(month));\n   # timeFrame =  \&quot;MONTH\&quot;;\ncase \&quot;OPT EXP\&quot;:\n    period = exp_opt - First(exp_opt);\n    #timeFrame =  \&quot;OPT EXP\&quot;;\ncase BAR:\n    period = BarNumber() - 1;\n}\n\n\ndef count;\nif VaPrevious\n{\n\n    count = CompoundValue(1, if !(period != period[1]) then count[1] + 1 else 1, 1);\n\n}\nelse\n{\n   # count = CompoundValue(1, if period != period[1] then (count[1] + period - period[1]) else count[1], 0);\n\n\n count = CompoundValue(1, if period != period[1] then count[1]   else  (count[1] + period - period[1]), 0);\n\n\n\n}\ndef cond = count &lt; count[1] + period - period[1];\n\ndef Pivot = hlc3(period = PivotTimeFrame)[1];\n\n\n\ndef priorperiod = if IsNaN(count[1]) then 1 else Max(count, count[1]);\nprofile vol1 = VolumeProfile(\&quot;startNewProfile\&quot; = period != period[1], \&quot;onExpansion\&quot; = no);\n\ndef vahprior = vol1.GetHighestValueArea();\ndef pocprior = vol1.GetPointOfControl();\ndef valprior = vol1.GetLowestValueArea();\n\ndef vahprev = GetValue(vahprior, priorperiod);\ndef pocprev = GetValue(pocprior, priorperiod);\ndef valprev = GetValue(valprior, priorperiod);\n\n#if showProfile then\ndef  showProfile = no;\ndef showPointOfControl = no;\n\n#vol.Show(if showProfile then GlobalColor(\&quot;Profile\&quot;) else Color.CURRENT, if showPointOfControl then GlobalColor(\&quot;Point Of Control\&quot;) else Color.CURRENT, if showValueArea then GlobalColor(\&quot;Value Area\&quot;) else Color.CURRENT, opacity);\n#profile vol = VolumeProfile(\&quot;startNewProfile\&quot; = cond, \&quot;onExpansion\&quot; = no);\n#vol.Show(if showProfile then GlobalColor(\&quot;Profile\&quot;) else Color.CURRENT, if showPointOfControl then GlobalColor(\&quot;Point Of Control\&quot;) else Color.CURRENT, if showValueArea then GlobalColor(\&quot;Value Area\&quot;) else Color.CURRENT, opacity);\ndef VAH = vahprev;\ndef VAL = valprev;\ndef POC = pocprev;\n\n\n############\n#Value Area Functions\ndef PPoint = If(Pivot &gt; 0, Pivot, Na);\ndef VArea  = Between(close, VAL, VAH);\ndef VAreaabove  = close &gt; VAH;\ndef VAreabelow  = close &lt; VAL;\n\n\n###%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n#def oneVol = Roundup(( VAHigh - VALow) / VAHigh, 2);\ndef oneVol = RoundUp(( VAH - VAL) / 100, 2);\ndef upperValimitH = VAH + oneVol * (triggerUpperVaLimitHigh);\ndef upperValimitL = VAH + oneVol * (triggerUpperVaLimitLow);\n\ndef lowerValimitH = VAL + oneVol * (triggerLowerVaLimitHigh);\ndef lowerValimitL = VAL + oneVol * (triggerLowerVaLimitLow);\n#triggerUpperVaLimitlow = if triggerUpperVaLimitlow&gt;=0 then triggerUpperVaLimitlow =-5 else triggerUpperVaLimitlow= triggerUpperVaLimitlow;\n\nplot VA_high_short = upperValimitH;\nplot VA_high_long = upperValimitL;\n\nplot VA_low_short = lowerValimitL;\nplot VA_low_long = lowerValimitH;\n\n#AddCloud(VA_high_long, VA_high_short, Color.LIGHT_RED, Color.LIGHT_RED);\n#AddCloud(VA_high_long, VA_high_short, Color.LIGHT_RED, Color.LIGHT_RED);\n\n#VA_low_short.SetPaintingStrategy(PaintingStrategy.DASHES);\n#VA_low_long.SetDefaultColor(Color.BLUE);\nVA_low_short.SetHiding(!showLines);\nVA_low_short.SetPaintingStrategy(PaintingStrategy.DASHES);\nVA_low_short.SetDefaultColor(Color.RED);\nVA_low_long.SetHiding(!showLines);\nVA_low_long.SetPaintingStrategy(PaintingStrategy.DASHES);\nVA_low_long.SetDefaultColor(Color.GREEN);\n\n\n\nVA_high_short.SetHiding(!showLines);\nVA_high_short.SetPaintingStrategy(PaintingStrategy.DASHES);\nVA_high_short.SetDefaultColor(Color.RED);\nVA_high_long.SetHiding(!showLines);\nVA_high_long.SetPaintingStrategy(PaintingStrategy.DASHES);\nVA_high_long.SetDefaultColor(Color.GREEN);\n\n\n####%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\n\n\n\n\n#Time Functions\ndef timeFrame = getAggregationPeriod();\ndef prdMax =highestAll(if(!IsNaN(close[-1]),period,Na))  ;\ndef cnt =if(period &gt; prdMax-2  ,1,Na);\ndef Chart2  =  if showOnlyToday then cnt else 1 ;;#if showOnlyToday then (IsNaN(period[-1] and (period == period[1])))  else 1 ;\n#def Chart2  =  if showOnlyToday then MarketOpen and NewDay else 1 ;\n\ndef CloseTime2 = SecondsTillTime(1600) &gt;= 0;\ndef OpenTime2 = SecondsFromTime(PlotStartTime) &gt;= 0;\ndef MarketOpen = OpenTime2 and CloseTime2;\ndef NewDay = IsNaN(close(period = “Day”)[-1]);\ndef Chart1;\nif  timeFrame&lt; aggregationPeriod.DAY\n{\nChart1  =  if showOnlyToday then MarketOpen and NewDay else 1 ;\n}\nelse\n{ \n Chart1  =  chart2 ;\n}\n#plot prd =period;\n\n#AddLabel (yes,Chart1);\n#Pivot Functions\ndef Res1  = (2 * PPoint) - PrevLow;\ndef Supp1 = (2 * PPoint) - PrevHigh;\ndef Res2  = PPoint + (Res1 - Supp1);\ndef Supp2 = PPoint - (Res1 - Supp1);\ndef Res3  = PrevHigh + 2 * (PPoint - PrevLow);\ndef Supp3 = PrevLow - 2 * (PrevHigh - PPoint);\ndef Res4  = PrevHigh + 3 * (PPoint - PrevLow);\ndef Supp4 = PrevLow - 3 * (PrevHigh - PPoint);\n\n\n#def Res1  = (2 * PPoint) - PrevLow;\n#def Supp1 = (2 * PPoint) - PrevHigh;\n#def Res2  = PPoint + (Res1 - Supp1); # def Res2  = PPoint + (Res1 - Supp1);\n#def Supp2 = PPoint - (Res1 - Supp1);\n#def Res3  = PPoint + 2 * (PrevHigh - PrevLow);# def Res3  = PrevHigh + 2 * (PPoint - PrevLow);\n#def Supp3 = PPoint - 2 * (PrevHigh - PrevLow);\n#def Res4  = PPoint + 3 * (PrevHigh - PrevLow);#\n#def Supp4 = PPoint - 3 * (PrevHigh - PrevLow);\n\ndef Res5  = PrevHigh + 4 * (PPoint - PrevLow);\ndef Supp5 = PrevLow - 4 * (PrevHigh - PPoint);\n\ndef Res6  = PrevHigh + 5 * (PPoint - PrevLow);\ndef Supp6 = PrevLow - 5 * (PrevHigh - PPoint);\n\ndef Res7  = PrevHigh + 6 * (PPoint - PrevLow);\ndef Supp7 = PrevLow - 6 * (PrevHigh - PPoint);\n\ndef Res8  = PrevHigh + 7 * (PPoint - PrevLow);\ndef Supp8 = PrevLow - 7 * (PrevHigh - PPoint);\n\n\n\n\n#Rounding Functions\ndef round = 0.01;\ndef RI   = RoundDown(Res1, 0) - ((Round(((RoundDown(Res1, 0) - Res1) / round), 0)) * round);\ndef SI   = RoundDown(Supp1, 0) - ((Round(((RoundDown(Supp1, 0) - Supp1) / round), 0)) * round);\ndef RII  = RoundDown(Res2, 0) - ((Round(((RoundDown(Res2, 0) - Res2) / round), 0)) * round);\ndef SII  = RoundDown(Supp2, 0) - ((Round(((RoundDown(Supp2, 0) - Supp2) / round), 0)) * round);\ndef RIII = RoundDown(Res3, 0) - ((Round(((RoundDown(Res3, 0) - Res3) / round), 0)) * round);\ndef SIII = RoundDown(Supp3, 0) - ((Round(((RoundDown(Supp3, 0) - Supp3) / round), 0)) * round);\ndef RIV  = RoundDown(Res4, 0) - ((Round(((RoundDown(Res4, 0) - Res4) / round), 0)) * round);\ndef SIV  = RoundDown(Supp4, 0) - ((Round(((RoundDown(Supp4, 0) - Supp4) / round), 0)) * round);\ndef PivP = RoundDown(PPoint, 0) - ((Round(((RoundDown(PPoint, 0) - PPoint) / round), 0)) * round);\n\ndef RV  = RoundDown(Res5, 0) - ((Round(((RoundDown(Res5, 0) - Res5) / round), 0)) * round);\ndef SV  = RoundDown(Supp5, 0) - ((Round(((RoundDown(Supp5, 0) - Supp5) / round), 0)) * round);\ndef RVI  = RoundDown(Res6, 0) - ((Round(((RoundDown(Res6, 0) - Res6) / round), 0)) * round);\ndef SVI  = RoundDown(Supp6, 0) - ((Round(((RoundDown(Supp6, 0) - Supp6) / round), 0)) * round);\ndef RVII  = RoundDown(Res7, 0) - ((Round(((RoundDown(Res7, 0) - Res7) / round), 0)) * round);\ndef SVII  = RoundDown(Supp7, 0) - ((Round(((RoundDown(Supp7, 0) - Supp7) / round), 0)) * round);\ndef RVIII  = RoundDown(Res8, 0) - ((Round(((RoundDown(Res8, 0) - Res8) / round), 0)) * round);\ndef SVIII  = RoundDown(Supp8, 0) - ((Round(((RoundDown(Supp8, 0) - Supp8) / round), 0)) * round);\n\n\n\n\n#Plots\nplot VH  = If(Chart1 and VAH &gt; 0, VAH, Na);\nplot PC  = If(Chart1 and POC &gt; 0, POC, Na);\nplot VL  = If(Chart1 and VAL &gt; 0, VAL, Na);\n\n##Auto Show \ndef R1_auto_show;\ndef R2_auto_show;\ndef R3_auto_show;\ndef R4_auto_show;\ndef R5_auto_show;\ndef R6_auto_show;\ndef R7_auto_show;\ndef R8_auto_show;\n\ndef S1_auto_show;\ndef S2_auto_show;\ndef S3_auto_show;\ndef S4_auto_show;\ndef S5_auto_show;\ndef S6_auto_show;\ndef S7_auto_show;\ndef S8_auto_show;\n\ndef cmax = highestAll( count);\ndef R1AutoShow = (close&gt;VH or (Between(RI,VL,VH) and close&gt;VL));\ndef S1AutoShow = (close&lt;VL or (Between(SI,VL,VH) and close&lt;VH));;\ndef R2AutoShow =  close &gt; VH and close &lt; RV;\ndef S2AutoShow = (close &lt; VL) and close &gt; SV  ;\ndef R3AutoShow = close &gt; (RI + ((RII - RI) / 2));;\ndef S3AutoShow = close &lt; (SI - ((SI - SII) / 2));\ndef R4AutoShow = close &gt; (RII + ((RIII - RII) / 2));\ndef S4AutoShow =  close &lt; (SII - ((SII - SIII) / 2));\ndef R5AutoShow =  close &gt; (RIII + ((RIV - RIII) / 2));\ndef S5AutoShow =  close &lt; (SIII - ((SIII - SIV) / 2));\ndef R6AutoShow =  close &gt; (RIV + ((RV - RIV) / 2));\ndef S6AutoShow =  close &lt; (SIV - ((SVI - SV) / 2));\ndef R7AutoShow =  close &gt; (RV + ((RVI - RV) / 2));\ndef S7AutoShow =  close &lt; (SV - ((SV - SVI) / 2));\ndef R8AutoShow =  close &gt; (RVI + ((RVII - RVI) / 2));\ndef S8AutoShow =  close &lt; (SVI - ((SVI - SVII) / 2));\n\nR1_auto_show = if ( (period==period[1]) and R1_auto_show[1] )  then R1_auto_show[1] else R1AutoShow;\nR2_auto_show = if ( (period==period[1]) and R2_auto_show[1] )  then R2_auto_show[1] else R2AutoShow;\nR3_auto_show = if ( (period==period[1]) and R3_auto_show[1] )  then R3_auto_show[1] else R3AutoShow;\nR4_auto_show = if ( (period==period[1]) and R4_auto_show[1] )  then R4_auto_show[1] else R4AutoShow;\nR5_auto_show = if ( (period==period[1]) and R5_auto_show[1] )  then R5_auto_show[1] else R5AutoShow;\nR6_auto_show = if ( (period==period[1]) and R6_auto_show[1] )  then R6_auto_show[1] else R6AutoShow;\nR7_auto_show = if ( (period==period[1]) and R7_auto_show[1] )  then R7_auto_show[1] else R7AutoShow;\nR8_auto_show = if ( (period==period[1]) and R8_auto_show[1] )  then R8_auto_show[1] else R8AutoShow;\n\n\nS1_auto_show = CompoundValue(2,if ( (period==period[1]) and S1_auto_show[1] )  then S1_auto_show[1] else S1AutoShow,S1AutoShow);\nS2_auto_show = if ( (period==period[1]) and S2_auto_show[1] )  then S2_auto_show[1] else S2AutoShow;\nS3_auto_show = if ( (period==period[1]) and S3_auto_show[1] )  then S3_auto_show[1] else S3AutoShow;\nS4_auto_show = if ( (period==period[1]) and S4_auto_show[1] )  then S4_auto_show[1] else S4AutoShow;\nS5_auto_show = if ( (period==period[1]) and S5_auto_show[1] )  then S5_auto_show[1] else S5AutoShow;\nS6_auto_show = if ( (period==period[1]) and S6_auto_show[1] )  then S6_auto_show[1] else S6AutoShow;\nS7_auto_show = if ( (period==period[1]) and S7_auto_show[1] )  then S7_auto_show[1] else S7AutoShow;\nS8_auto_show = if ( (period==period[1]) and S8_auto_show[1] )  then S8_auto_show[1] else S8AutoShow;\n\nplot gg=(S1AutoShow);#==1);\nplot ggg = ( s1_auto_show);# if ( isnan( s1_autoshow))then  1 else double.NaN ;\ngg.SetHiding(0);\nggg.SetHiding(0);\n\n#input showHigherLevel =yes;\n##\n\nplot R4  = If(Chart1 and AutoPivots and ShowLevel4 and  R4_auto_show  and RIV &gt; 0, RIV, Na);\nplot R3  = If(Chart1 and AutoPivots and ShowR3  and  R3_auto_show and RIII &gt; 0, RIII,Na);\nplot R2  = If(Chart1 and AutoPivots and ShowR2  and  R2_auto_show and RII &gt; 0, RII, Na);\nplot R1  = If(Chart1 and AutoPivots and ShowR1  and  R1_auto_show and RI &gt; 0, RI, Na);\nplot PP  = If(Chart1 and AutoPivots and ShowPivotPoint and PPoint &gt; 0, PivP, Na);\nplot S1  = If(Chart1 and AutoPivots and ShowS1 and  S1_auto_show  and SI &gt; 0, SI, Na);\nplot S2  = If(Chart1 and AutoPivots and ShowS2 and  S2_auto_show  and SII &gt; 0, SII, Na);\nplot S3  = If(Chart1 and AutoPivots and ShowS3 and  S3_auto_show and SIII &gt; 0, SIII, Na);\nplot S4  = If(Chart1 and AutoPivots and ShowLevel4 and  S4_auto_show and SIV &gt; 0, SIV, Na);\n\n#######\n\nplot R5  = If(Chart1 and AutoPivots and ShowLevel4 and  R5_auto_show  and RV &gt; 0, RV, Na);\nplot R6  = If(Chart1 and AutoPivots and ShowLevel4 and  R6_auto_show  and RVI &gt; 0, RVI, Na);\nplot R7  = If(Chart1 and AutoPivots and ShowLevel4 and  R7_auto_show  and RVII &gt; 0, RVII, Na);\nplot R8  = If(Chart1 and AutoPivots and ShowLevel4 and  R8_auto_show  and RVIII &gt; 0, RVIII, Na);\n\n\nplot S5  = If(Chart1 and AutoPivots and ShowLevel4 and  S5_auto_show  and SV &gt; 0, SV, Na);\nplot S6  = If(Chart1 and AutoPivots and ShowLevel4 and  S6_auto_show  and SVI &gt; 0, SVI, Na);\nplot S7  = If(Chart1 and AutoPivots and ShowLevel4 and  S7_auto_show  and SVII &gt; 0, SVII, Na);\nplot S8  = If(Chart1 and AutoPivots and ShowLevel4 and  S8_auto_show  and SVIII &gt; 0, SVIII, Na);\n####\n\n\ninput closeTimeC = 1615;\n#Value Area Cloud\n#def CloudClose = SecondsTillTime(1615) &gt; 0;\ndef CloudClose = SecondsTillTime(closeTimeC) &gt; 0;\ndef Cloud      = OpenTime and CloudClose;\ndef ChartCloud = if(timeFrame &gt; aggregationPeriod.DAY, Cloud and Chart1, chart1);\ndef CloudTest  = If(CloudOpenOnly, ChartCloud, Chart1);\ndef cloudhigh = If(CloudTest and ShowCloud1, VAH, Na);\ndef cloudlow  = If(CloudTest and ShowCloud1, VAL, Na);\nAddCloud(cloudhigh, cloudlow, Color.GRAY, Color.GRAY);\ndef AfterHours = OpenTime2 and CloudClose;\n\n#Chart Labels\ndef Futures = Between(close, close(\&quot;/es\&quot;) - 15, close(\&quot;/es\&quot;) + 15) or Between(close, close(\&quot;/nq\&quot;) - 15, close(\&quot;/nq\&quot;) + 15);\ndef Label = Chart1;# and Futures;\ndef ZeroTest = VAH &gt; 0 and VAL &gt; 0;\ndef PNotZero = PPoint &gt; 0;\ndef ChartLabels;\nswitch (Labels) {\ncase \&quot;Proximity\&quot;:\n    ChartLabels = 1;\ncase \&quot;Off\&quot;:\n    ChartLabels = 0;\ncase \&quot;All\&quot;:\n    ChartLabels = 2;\ncase \&quot;ValueAreaOnly\&quot;:\n    ChartLabels = 3;\n}\n\n\nAddLabel(ChartLabels == 1 and Label and AutoPivots and VArea and ZeroTest, “InsideValue”, Color.WHITE);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and VAreaabove and ZeroTest, “AboveValue”, Color.GREEN);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and VAreabelow and ZeroTest, “BelowValue”, Color.RED);\nAddLabel(ChartLabels == 1 and Label and !AutoPivots and VArea and ZeroTest, “InsideValueArea”, Color.WHITE);\nAddLabel(ChartLabels == 1 and Label and !AutoPivots and VAreaabove and ZeroTest, “AboveValueArea”, Color.GREEN);\nAddLabel(ChartLabels == 1 and Label and !AutoPivots and VAreabelow and ZeroTest, “BelowValueArea”, Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and Between(close, VL, (RI + ((RII - RI) / 2))), \&quot;VH=\&quot; + AsText(VH), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and Between(close, VL, VH), \&quot;POC=\&quot; + AsText(PC), Color.YELLOW);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and Between(close, (SI - ((SI - SII) / 2)), VH), \&quot;VL=\&quot; + AsText(VL), Color.GREEN);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and (close &gt; VH or (Between(RI, VL, VH) and close &gt; VL)), \&quot;R1=\&quot; + AsText(RI), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and close &gt; VH, \&quot;R2=\&quot; + AsText(RII), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and close &gt; (RI + ((RII - RI) / 2)), \&quot;R3=\&quot; + AsText(RIII), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and ShowLevel4 and close &gt; (RII + ((RIII - RII) / 2)), \&quot;R4=\&quot; + AsText(RIV), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and ShowLevel5 and close &gt; (RIII + ((RIV - RIII) / 2)), \&quot;R5=\&quot; + AsText(RV), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and ShowLevel6 and close &gt; (RII + ((RV - RIV) / 2)), \&quot;R6=\&quot; + AsText(RVI), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and ShowLevel7 and close &gt; (RII + ((RVI - RV) / 2)), \&quot;R7=\&quot; + AsText(RVII), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and ShowLevel8 and close &gt; (RII + ((RVII - RVI) / 2)), \&quot;R8=\&quot; + AsText(RVIII), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and ShowPivotPoint and close &gt; SI and close &lt; RI, \&quot;PP=\&quot; + AsText(PP), Color.WHITE);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and (close &lt; VL or (Between(SI, VL, VH) and close &lt; VH)), \&quot;S1=\&quot; + AsText(SI), Color.GREEN);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and close &lt; VL, \&quot;S2=\&quot; + AsText(SII), Color.GREEN);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and close &lt; (SI - ((SI - SII) / 2)), \&quot;S3=\&quot; + AsText(SIII), Color.GREEN);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and ShowLevel4 and close &lt; (SII - ((SII - SIII) / 2)), \&quot;S4=\&quot; + AsText(SIV), Color.GREEN);\n\nAddLabel(ChartLabels == 2 and Label and ZeroTest, \&quot;VH=\&quot; + AsText(VH), Color.RED);\nAddLabel(ChartLabels == 2 and Label and ZeroTest, \&quot;POC=\&quot; + AsText(PC), Color.YELLOW);\nAddLabel(ChartLabels == 2 and Label and ZeroTest, \&quot;VL=\&quot; + AsText(VL), Color.GREEN);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero, \&quot;R1=\&quot; + AsText(RI), Color.RED);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero, \&quot;R2=\&quot; + AsText(RII), Color.RED);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero, \&quot;R3=\&quot; + AsText(RIII), Color.RED);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero and ShowLevel4, \&quot;R4=\&quot; + AsText(RIV), Color.RED);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero and ShowPivotPoint, \&quot;PP=\&quot; + AsText(PP), Color.WHITE);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero, \&quot;S1=\&quot; + AsText(SI), Color.GREEN);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero, \&quot;S2=\&quot; + AsText(SII), Color.GREEN);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero, \&quot;S3=\&quot; + AsText(SIII), Color.GREEN);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero and ShowLevel4, \&quot;S4=\&quot; + AsText(SIV), Color.GREEN);\n\nAddLabel(ChartLabels == 3 and Label and VArea and ZeroTest, “InsideValueArea”, Color.WHITE);\nAddLabel(ChartLabels == 3 and Label and VAreaabove and ZeroTest, “AboveValueArea”, Color.GREEN);\nAddLabel(ChartLabels == 3 and Label and VAreabelow and ZeroTest, \&quot;BelowValueArea”, Color.RED);\nAddLabel(!AfterHours and !Chart1 and !HideAfterHoursLabel, \&quot;NoShadowPlotAfterHours\&quot;, Color.ORANGE);\n\n#Chart Bubbles\ninput BubbleLeftSide = yes;\ndef  leftLoc =  if BubbleLeftSide then 1 else -1;#\nAddChartBubble(IsNaN(VH[leftLoc]) and ValueBubbles, VH, VH, Color.RED, no);\nAddChartBubble(IsNaN(PC[leftLoc]) and ValueBubbles, PC, PC, Color.YELLOW, no);\nAddChartBubble(IsNaN(VL[leftLoc]) and ValueBubbles, VL, VL, Color.GREEN, no);\nAddChartBubble(IsNaN(S1[leftLoc]) and PivotBubbles and S1_auto_show, S1, “S1”, Color.WHITE, no);\nAddChartBubble(IsNaN(S2[leftLoc]) and PivotBubbles and S2_auto_show, S2, “S2”, Color.WHITE, no);\nAddChartBubble(IsNaN(S3[leftLoc]) and PivotBubbles and S1_auto_show, S3, “S3”, Color.WHITE, no);\nAddChartBubble(IsNaN(S4[leftLoc]) and PivotBubbles and ShowLevel4 and S4_auto_show, S4, “S4”, Color.WHITE, no);\nAddChartBubble(IsNaN(PP[leftLoc]) and ShowPivotPoint and PivotBubbles, PP, “PP”, Color.WHITE, no);\nAddChartBubble(IsNaN(R1[leftLoc]) and PivotBubbles and R1_auto_show, R1, “R1”, Color.WHITE, no);\nAddChartBubble(IsNaN(R2[leftLoc]) and PivotBubbles and R2_auto_show, R2, “R2”, Color.WHITE, no);\nAddChartBubble(IsNaN(R3[leftLoc]) and PivotBubbles and R3_auto_show, R3, “R3”, Color.WHITE, no);\nAddChartBubble(IsNaN(R4[leftLoc]) and PivotBubbles  and ShowLevel4 and R4_auto_show, R4, “R4”, Color.WHITE, no);\n\n\n#Opening Range Breakout Functions\ndef ORBopen = SecondsTillTime(945) &lt;= 0;\ndef IsMarketOpen = ORBopen and CloseTime2;\ndef FirstBar = If(GetDay()[1] != GetDay(), GetDay() - 1, 0);\ndef OpenRange = SecondsFromTime(945);\ndef PastOpeningRange = OpenRange &gt;= (OrbTime - 15) * 60;\ndef DisplayedHigh = If(high &gt; DisplayedHigh[1] and IsMarketOpen and ShowORB, high, If(IsMarketOpen and !FirstBar, DisplayedHigh[1], high));\ndef DisplayedLow = If(low &lt; DisplayedLow[1] and IsMarketOpen and ShowORB, low, If(IsMarketOpen and !FirstBar, DisplayedLow[1], low));\ndef ORBHi = If(PastOpeningRange, ORBHi[1], DisplayedHigh);\ndef ORBLo  = If(PastOpeningRange, ORBLo[1], DisplayedLow);\nplot ORBHigh = If(Chart1 and PastOpeningRange and IsMarketOpen and ShowORB, ORBHi, Na);\nplot ORBLow  = If(Chart1 and PastOpeningRange and IsMarketOpen and ShowORB, ORBLo, Na);\n\n#Plot Criteria\nORBHigh.SetDefaultColor(Color.MAGENTA);\nORBHigh.SetStyle(Curve.SHORT_DASH);\nORBHigh.HideBubble();\nORBLow.SetDefaultColor(Color.MAGENTA);\nORBLow.SetStyle(Curve.SHORT_DASH);\nORBLow.HideBubble();\nVH.SetDefaultColor(Color.RED);\nPC.SetDefaultColor(Color.YELLOW);\nPC.SetStyle(Curve.LONG_DASH);\nVL.SetDefaultColor(Color.GREEN);\nR4.SetDefaultColor(Color.WHITE);\nR3.SetDefaultColor(Color.WHITE);\nR2.SetDefaultColor(Color.WHITE);\nR1.SetDefaultColor(Color.WHITE);\nPP.SetDefaultColor(Color.WHITE);\nS4.SetDefaultColor(Color.WHITE);\nS3.SetDefaultColor(Color.WHITE);\nS2.SetDefaultColor(Color.WHITE);\nS1.SetDefaultColor(Color.WHITE);\n\n#cloudhigh.SetDefaultColor(Color.RED);\n#cloudlow.SetDefaultColor(Color.GREEN);\nAddLabel(showVAH , \&quot;vah= \&quot; + AsText(VAH), Color.PINK);\nAddLabel(showVAH , \&quot;val= \&quot; + AsText(VAL), Color.LIGHT_GREEN);\nAddLabel(showVAH , \&quot;poc= \&quot; + AsText(POC), Color.LIGHT_ORANGE);\nAddLabel(showVAH , \&quot;pivot= \&quot; + AsText(Pivot), Color.PINK);\nVH.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nPC.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nVL.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nPP.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nR1.SetStyle(Curve.SHORT_DASH);\nR1.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nR2.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nR3.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nR4.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nS1.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nS2.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nS3.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nS4.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\n\n\nR1.SetHiding(R1_auto_show);\nR2.SetHiding(R2_auto_show);\nR3.SetHiding(R3_auto_show);\nR4.SetHiding(R4_auto_show);\nS1.SetHiding(S1_auto_show);\nS2.SetHiding(S2_auto_show);\nS3.SetHiding(S3_auto_show);\nS4.SetHiding(S4_auto_show);\n\n\n\n\ndef opacity_inv ;#= if (opacity &gt;= 0 and opacity &lt;= 100) then 100 - opacity else 50;\nif (no)#show_VA_cloud2\nthen\n{\n   opacity_inv = 1000;\n}\nelse\n\n{\n   opacity_inv = if (opacity &gt;= 0 and opacity &lt;= 100) then 100 - opacity else 50;\n}\n\ndef Vls  = If(Chart2 and ShowCloud2 and VA_low_short &gt; 0, VA_low_short, Na);\ndef Vll  = If(Chart2 and ShowCloud2  and VA_low_long &gt; 0, VA_low_long, Na);\ndef Vhs  = If(Chart2 and ShowCloud2  and VA_high_short &gt; 0, VA_high_short, Na);\ndef Vhl  = If(Chart2 and ShowCloud2  and VA_high_long &gt; 0, VA_high_long, Na);\n\nAddCloud(Vls,  Vll , CreateColor(144 * opacity_inv / 100, 240, 144 * opacity_inv / 100),  CreateColor(144 * opacity_inv / 100, 240, 144 * opacity_inv / 100));\n\nAddCloud(Vhs,   Vhl,  CreateColor(204, 184 * opacity_inv / 100, 202 * opacity_inv / 100),   CreateColor(204, 184 * opacity_inv / 100, 202 * opacity_inv / 100));\n\n\n#S5.SetHiding(!S5_auto_show);\n#AddLabel(yes , \&quot;R44= \&quot; + (S5_auto_show), Color.pink);\n#AddLabel(yes , \&quot;R5= \&quot; + ((RIII + ((RIV - SIII) / 2))), Color.pink);&quot;,name=&quot;_27529bda_67d5_4abb_8369_e61450a2de3a&quot;}){inputsMap:TreeMap12{^(&quot;PivotBubbles&quot;,&lt;F),^(&quot;PivotTimeFrame&quot;,&quot;WEEK&quot;),^(&quot;ProfileTimeFrame&quot;,&quot;WEEK&quot;),^(&quot;ShowCloud1&quot;,&lt;F),^(&quot;ShowLevel4&quot;,&lt;F),^(&quot;ShowLevel5&quot;,&lt;F),^(&quot;ShowPivotPoint&quot;,&lt;F),^(&quot;ShowR1&quot;,&lt;F),^(&quot;ShowR2&quot;,&lt;F),^(&quot;ShowR3&quot;,&lt;F),^(&quot;ShowS1&quot;,&lt;F),^(&quot;ShowS2&quot;,&lt;F),^(&quot;ShowS3&quot;,&lt;F),^(&quot;ValueBubbles&quot;,&lt;F)},inputsMap=@TreeMap12,plots{4:{hiding=&lt;T},5:{lineStyle=1},6:{hiding=&lt;T},7:{hiding=&lt;T},8:{hiding=&lt;T},12:{lineStyle=1}}}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;\n\n#declare hide_on_daily;\n#declare once_per_bar;\n\n# Variables:\n\ninput AggregationPeriod = AggregationPeriod.DAY;\n\ninput useAggregate = NO;\ninput showLevels = yes;\ninput showLables = yes;\ninput showBoundaryLine = yes;\n\n\n\ninput length = 3;\ndef displace = -1;\n\ninput PivotPrice = {default CLOSE, HLC3, VWAP, OHLC4, OPEN, HL2};\ninput PivotLength = 1;\n\ninput averageType = AverageType.SIMPLE;\ninput fib1 = 0.236; #fib 0.236\ninput fib2 = 0.5;  #fib2 0.5\ninput fib3 = 0.764; #fib3 0.764\ninput fib4 = 1.0; # Extreems\n\n\n\n\n#def mov_avg = MovingAverage(averageType, price[-displace], length);\n\ndef ll;\ndef hh;\ndef pv;\n\nif useAggregate\n{\n    ll = low (period = AggregationPeriod)[-displace];;\n    hh = high (period = AggregationPeriod)[-displace];\n     switch (PivotPrice)\n       {\n            case \&quot;CLOSE\&quot;:\n                    pv = close(period = AggregationPeriod)  [-displace];\n            case \&quot;HLC3\&quot; :\n                    pv = hlc3(period = AggregationPeriod)[-displace];\n\n            case \&quot;VWAP\&quot; :\n                    pv = vwap(period = AggregationPeriod)[-displace];\n            case \&quot;HL2\&quot; :\n                    pv = hl2(period = AggregationPeriod)[-displace];\n            case \&quot;OHLC4\&quot; :\n                    pv = ohlc4(period = AggregationPeriod)[-displace];\n            case \&quot;OPEN\&quot; :\n                    pv = open(period = AggregationPeriod)[-displace];\n       }\n}\nelse\n{\n    ll = average( low[-displace], length);#MovingAverage(averageType, low[-displace], length);\n    hh = average( high[-displace], length);#MovingAverage(averageType, high[-displace], length);\n      switch (PivotPrice)\n       {\n            case \&quot;CLOSE\&quot;:\n                    pv = MovingAverage(averageType, close  [-displace], PivotLength);;\n            case \&quot;HLC3\&quot; :\n                    pv = MovingAverage(averageType,hlc3[-displace], PivotLength);;\n            case \&quot;VWAP\&quot; :\n                    pv = MovingAverage(averageType,vwap[-displace], PivotLength);;\n            case \&quot;HL2\&quot; :\n                    pv =MovingAverage(averageType, hl2[-displace], PivotLength);;\n            case \&quot;OHLC4\&quot; :\n                    pv = MovingAverage(averageType,ohlc4[-displace], PivotLength);;\n            case \&quot;OPEN\&quot; :\n                    pv = MovingAverage(averageType,open[-displace], PivotLength);;\n\n       }\n}\n\n\n\n\n#\n# logic\n#\n    def nan = Double.NaN;\n\n\n    def delta = hh - ll;\n    def pp_ = pv; #pivot Point\n    def s1_ = pp_ - (fib1 * delta);\n    def s2_ = pp_ - (fib2 * delta);\n    def s3_ = pp_ - (fib3 * delta);\n    def s4_ = pp_ - (fib4 * delta);\n    def r1_ = pp_ + (fib1 * delta);\n    def r2_ = pp_ + (fib2 * delta);\n    def r3_ = pp_ + (fib3 * delta);\n    def r4_ = pp_ + (fib4 * delta);\n\n\n    plot RXT = r4_;\n    plot R3 = r3_;\n    plot R2 = r2_;\n    plot R1 = r1_;\n\n    plot pp = pp_;\n    plot S1 = s1_;\n    plot S2 = s2_;\n    plot S3 = s3_;\n    plot SXT = s4_;\n\n\n\n\n\n\n\n    pp.SetDefaultColor(Color.WHITE);\n    S1.SetDefaultColor(Color.ORANGE);\n    S2.SetDefaultColor(Color.ORANGE);\n    S3.SetDefaultColor(Color.ORANGE);\n    R1.SetDefaultColor(Color.YELLOW);\n    R2.SetDefaultColor(Color.YELLOW);\n    R3.SetDefaultColor(Color.YELLOW);\n    RXT.SetDefaultColor(Color.LIGHT_ORANGE);\n    SXT.SetDefaultColor(Color.LIGHT_ORANGE);\n    \n    PP.SetPaintingStrategy(PaintingStrategy.POINTS);\n    S1.SetPaintingStrategy(PaintingStrategy.POINTS);\n    R1.SetPaintingStrategy(PaintingStrategy.POINTS);\n    S2.SetPaintingStrategy(PaintingStrategy.POINTS);\n    R2.SetPaintingStrategy(PaintingStrategy.POINTS);\n    S3.SetPaintingStrategy(PaintingStrategy.POINTS);\n    R3.SetPaintingStrategy(PaintingStrategy.POINTS);\n    RXT.SetStyle(Curve.MEDIUM_DASH);\n    SXT.SetStyle(Curve.MEDIUM_DASH);\n\n\n\n#RXT.SetPaintingStrategy(PaintingStrategy.LINE_VS_POINTS);\n\n\n\n    R1.SetHiding(!showLevels);\n    R2.SetHiding(!showLevels);\n    R3.SetHiding(!showLevels);\n    pp.SetHiding(!showLevels);\n    S1.SetHiding(!showLevels);\n    S2.SetHiding(!showLevels);\n    S3.SetHiding(!showLevels);\n\n    RXT.SetHiding(!showBoundaryLine);\n    SXT.SetHiding(!showBoundaryLine);\n\n# lables\n\n    AddLabel(showLables, \&quot; R1= \&quot; +  RoundUp(R1, 2), if R1 &lt; close then Color.LIGHT_GREEN else if R1 &gt; close then Color.LIGHT_RED else Color.LIGHT_GRAY);\n\n    AddLabel(showLables, \&quot; R2= \&quot; +  RoundUp(R2, 2), if R2 &lt; close then Color.LIGHT_GREEN else if R2 &gt; close then Color.LIGHT_RED else Color.LIGHT_GRAY);\n    AddLabel(showLables, \&quot; R3= \&quot; +  RoundUp(R3, 2), if R3 &lt; close then Color.LIGHT_GREEN else if R3 &gt; close then Color.LIGHT_RED else Color.LIGHT_GRAY);\n\n    AddLabel(showLables, \&quot; S1= \&quot; +  RoundUp(S1, 2), if S1 &lt; close then Color.LIGHT_GREEN else if S1 &gt; close then Color.LIGHT_RED else Color.LIGHT_GRAY);\n    AddLabel(showLables, \&quot; S2= \&quot; +  RoundUp(S2, 2), if S2 &lt; close then Color.LIGHT_GREEN else if S2 &gt; close then Color.LIGHT_RED else Color.LIGHT_GRAY);\n    AddLabel(showLables, \&quot; S3= \&quot; +  RoundUp(S3, 2), if S3 &lt; close then Color.LIGHT_GREEN else if S3 &gt; close then Color.LIGHT_RED else Color.LIGHT_GRAY);\n    AddLabel(showLables, \&quot; RXT= \&quot; +  RoundUp(RXT, 2), if RXT &lt; close then Color.LIGHT_GREEN else if RXT &gt; close then Color.LIGHT_RED else\n Color.LIGHT_GRAY);\n\n    AddLabel(showLables, \&quot; SXT= \&quot; +  RoundUp(SXT, 2), if SXT &lt; close then Color.LIGHT_GREEN else if SXT &gt; close then Color.LIGHT_RED else Color.LIGHT_GRAY);\n\n\n#end&quot;,name=&quot;_5bf53d93_587e_4e7f_b239_a8ba491d37a1&quot;}){inputsMap:TreeMap13{^(&quot;showLables&quot;,&lt;F),^(&quot;showLevels&quot;,&lt;F),^(&quot;useAggregate&quot;,@Boolean0)},inputsMap=@TreeMap13,plots{0:{lineStyle=3},4:{color=@CustomColor5,hiding=&lt;T,lineWeight=2},5:{color=@CustomColor6},6:{color=@CustomColor6},7:{color=@CustomColor6},8:{lineStyle=3}}}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;#ShadowTrader_VA_Pivots\n#ShadowTrader (Copyright ShadowTrader), a division of ShadowTrader Technologies, LLC. 2017. All rights reserved. This ShadowTrader Script is for educational purposes only.  ShadowTrader is not responsible for the use,  functionality or the performance of this Script. This work is copyrighted by ShadowTrader and all rights of this work under the license are reserved. Use of the ShadowTrader licensed code is for private use only and any other use are prohibited. By exercising any of the rights herein, you are accepting the terms of this license. You have a non-exclusive right to use or alter the ShadowTrader code. Use of this ShadowTrader Script other than as provided for in this license is prohibited. Any redistribution is strictly prohibited and will be enforced.\n\n# A big ShadowTrader thank you to Justin Lane Williams for initially creating this script for us.\n#08/31/11: Total redesign, added automated Pivot values, proximity plotting, new features.\n#09/12/11: Added “ShowLevel4” option due to recent volitility. Will plot S4 &amp; R4.\n#12/11/11: Added “AfterHours” option to turn off plot after hours.\n#12/21/11: Bug fixes due to TOS upgrades. Removed “AfterHours”, not workin correctly.\n#01/25/12: Enter daily inputs as 4 digits and script will interpret.\n# -added rounding to make the pivots appear as they do on the show.\n#01/26/12: Removed ability to truncate inputs due to it only being accurate 99% of time.\n#02/02/12: Small update to make sure \&quot;Auto Pivots\&quot; menu option functioned properly.\n#06/07/12: Added (6)VPOC inputs, should be manually entered/deleted, displays when applicable.\n#06/25/12: Removed some code and fixed a few bugs.\n#07/09/12: Fixed one small but important bug.\n#07/13/12: Added value bubbles, removed proximity plot function.\n#08/13/12: Removed a lot of superfluous code plus a few upgrades.\n#08/15/12: Fixed a bug that was giving false numbers.\n#08/30/12: Fixed a bug that wasn\'t plotting the NQ profile.\n#09/02/12: Reordered inputs and removed \&quot;LabelESonly\&quot; input.\n#12/28/12: Made the plot hide on daily charts and updated code to current standards.\n#01/04/13: Fixed a rare bug that hides labels if using tick charts.\n#01/28/13: Added ability to hide each individual level.\n#02/09/21 :mahiby customized for  \n# Pivot values will be off the day following market holidays and possibly the day after rollover.\n# On these days make \&quot;AutoPivots=No\&quot; and manually draw pivots. Change back to \&quot;AutoPivots=Yes\&quot; the day after.\n\ninput AggPeriod =  { \&quot;CHART\&quot;, \&quot;5 MIN\&quot; , \&quot;10 MIN\&quot;, \&quot;15 MIN\&quot; ,  \&quot;30 MIN\&quot;,  \&quot;1 HOUR\&quot;, \&quot;2 HOURs\&quot;,  \&quot;4 HOURs\&quot;, default \&quot;DAY\&quot;,  \&quot;2 DAYS\&quot;, \&quot;3 DAYS\&quot;, \&quot;4 DAYS\&quot;, WEEK, MONTH, \&quot;OPT EXP\&quot;, QUARTER, YEAR}; #AggregationPeriod.DAY;#\ninput VaPrior = yes;\ninput ShowCloud1  = no;#Hint ShowCloud: Shows the value area as a cloud.\ninput ShowCloud2  = yes;#Hint ShowCloud: Shows the value area as a cloud.\ninput CloudOpenOnly = yes;#Hint CloudOpenOnly: Will only cloud open candles.\ninput showOnlyToday = no;\n\ninput AutoPivots = yes;#Hint AutoPivots: Turns off pivot lines, value area stays on.\ndef showVAH = no; # for debuging\ninput Labels = {default \&quot;Proximity\&quot;, \&quot;Off\&quot;, \&quot;All\&quot;, \&quot;ValueAreaOnly\&quot;};#Hint Labels: Labels at top of chart.\ninput ShowPivotPoint = no;#Hint ShowPivotPoint: Hides Pivot Point plot.\n\ninput PivotBubbles  = no;#yes;#Hint PivotBubbles: Shows bubbles on pivot plot lines.\ninput ValueBubbles  = no;#yes;#Hint ValueBubbles: Shows bubbles on value plot lines.\ninput PlotStartTime = 0930;#Hint PlotStartTime: Move to earlier time to shift bubbles to the left.\n\n\n\ninput HideAfterHoursLabel = no;#Hint HideAfterHoursLabel: Hides \&quot;NoShadowPlotAfterHours\&quot; label.\ninput VpocBubbles  = no;#yes;#Hint VpocBubbles: Shows bubbles on VPOC plot lines.\n\ninput ShowL1 = yes;#Hint ShowS1: Hide/Show S1 /R1.\ninput ShowL2 = yes;#Hint ShowS2: Hide/Show S2 /R2.\ninput ShowL3 =yes;#Hint ShowS3: Hide/Show S3 /R3.\ninput ShowLevel4UP = no;#Hint ShowLevel4 and UP: Will display S4 and R4 for days with large moves.\n\ninput ShowORB = no;#Hint ShowORB: Displays 2 small, dashed lines at the top/bottom of opening range.\ninput OrbTime = 30;#Hint OrbTime: Defines the time range in minutes for the ORB.\n\ninput triggerUpperVaLimitHigh = 5;\ninput triggerUpperVaLimitLow = -5;\ninput triggerLowerVaLimitHigh = 5;\ninput triggerLowerVaLimitLow = -5;\ninput showLines = no;\ninput opacity = 20;\n\ndef Na = Double.NaN;\ninput showDebugLable = yes;\n#declare hide_on_daily;\n\n\n#Previous Day Functions\ndef Day   = GetDayOfWeek(GetYYYYMMDD());\ndef CloseTime = SecondsTillTime(1545) &gt;= 0;\ndef OpenTime = SecondsFromTime(0930) &gt;= 0;\ndef RegHrs = CloseTime and OpenTime;\n\n###\ndef PLow ;\ndef PHigh ;\ndef PrevLow ;\ndef PrevHigh;\ndef a = if  \&quot;TimeFrame\&quot; == \&quot;DAY\&quot; then 1 else 0;\n\nif  a {\n    PLow  =  CompoundValue(1, If(Day == Day[1] and RegHrs and low &lt; PLow[1], low, If(SecondsFromTime(0930) &lt;= 0 and RegHrs, low, PLow[1])), low);\n    PHigh = CompoundValue(1, If(Day == Day[1] and RegHrs and high &gt; PHigh[1], high, If(SecondsFromTime(0930) &lt;= 0 and RegHrs, high, PHigh[1])), high);\n    PrevLow  = If(Day != Day[1], PLow[1], PrevLow[1]);\n    PrevHigh = If(Day != Day[1], PHigh[1], PrevHigh[1]);\n\n#AddLabel (yes,period);\n}\n\nelse {\n    PLow  = low(period = AggPeriod);\n    PHigh = high(period = AggPeriod);\n    PrevLow  = low(period = AggPeriod)[1];\n    PrevHigh = high(period = AggPeriod)[1];\n\n}\n##################\n#Prior Day Profile - counting formula by functionform\n\ndef period;\ndef yyyymmdd = GetYYYYMMDD();\ndef seconds = SecondsFromTime(0);\ndef month = GetYear() * 12 + GetMonth();\ndef day_number = DaysFromDate(First(yyyymmdd)) + GetDayOfWeek(First(yyyymmdd));\ndef dom = GetDayOfMonth(yyyymmdd);\ndef dow = GetDayOfWeek(yyyymmdd - dom + 1);\ndef expthismonth = (if dow &gt; 5 then 27 else 20) - dow;\ndef exp_opt = month + (dom &gt; expthismonth);\n\nswitch (AggPeriod) {\ncase CHART:\n    period = 0;\n\ncase \&quot;5 MIN\&quot;:\n    period = Floor(seconds / 60 + day_number * 24 * 60);\ncase \&quot;10 MIN\&quot;:\n    period = Floor(seconds / 60 + day_number * 24 * 60);\n  \ncase \&quot;15 MIN\&quot;:\n    period = Floor(seconds / 60 + day_number * 24 * 60);\n\ncase \&quot;30 MIN\&quot;:\n    period = Floor(seconds / (30 * 60) + day_number * 24 * 60);\n   # timeFrame = \&quot;30 MINUTES\&quot;; #\&quot;2 DAYS\&quot;\ncase \&quot;1 HOUR\&quot;:\n    period = Floor(seconds / 3600 + day_number * 24);\n   # timeFrame = \&quot;1 HOUR\&quot;; #\&quot;2 DAYS\&quot;\ncase \&quot;2 HOURS\&quot;:\n    period = Floor(seconds / (2 * 3600) + day_number * 24);\n   # timeFrame = \&quot;2 HOURS\&quot;; #\&quot;2 DAYS\&quot;\ncase \&quot;4 HOURS\&quot;:\n    period = Floor(seconds / (4 * 3600) + day_number * 24);\n   \ncase DAY:\n    period = CountTradingDays(Min(First(yyyymmdd), yyyymmdd), yyyymmdd) - 1;\n   # timeFrame =  \&quot;1 DAY\&quot;;\ncase \&quot;2 DAYS\&quot;:\n    period =  Floor((CountTradingDays(Min(First(yyyymmdd), yyyymmdd), yyyymmdd) - 1) / 2);\n   # timeFrame =  \&quot;2 DAYS\&quot;;\ncase \&quot;3 DAYS\&quot; :\n    period = Floor((CountTradingDays(Min(First(yyyymmdd), yyyymmdd), yyyymmdd) - 1) / 3);\n  \ncase \&quot;4 DAYS\&quot;:\n    period =  Floor((CountTradingDays(Min(First(yyyymmdd), yyyymmdd), yyyymmdd) - 1) / 4);\n  \ncase WEEK:\n    period = Floor(day_number / 7);\n  \n\ncase MONTH:\n    period = Floor(month - First(month));\n  \ncase \&quot;OPT EXP\&quot;:\n    period = exp_opt - First(exp_opt);\n\ncase \&quot;Quarter\&quot;:\n\n    period =  Floor((CountTradingDays(Min(First(yyyymmdd), yyyymmdd), yyyymmdd) - 1) / 90);\n  \n\ncase \&quot;Year\&quot;:\n\n    period =  Floor((CountTradingDays(Min(First(yyyymmdd), yyyymmdd), yyyymmdd) - 1) /365);\n  \n\n   \n#case BAR:\n #   period = BarNumber() - 1;\n}\n\n\ndef count;\nif VaPrior\n{\n\n    count = CompoundValue(1, if !(period != period[1]) then count[1] + 1 else 1, 1);\n\n}\nelse\n{\n\n\n\n count = CompoundValue(1, if period != period[1] then count[1]   else  (count[1] + period - period[1]), 0);\n\n\n\n}\ndef cond = count &lt; count[1] + period - period[1];\n\ndef Pivot = hlc3(period = AggPeriod)[1];\n\n\n\ndef priorperiod = if IsNaN(count[1]) then 1 else Max(count, count[1]);\nprofile vol1 = VolumeProfile(\&quot;startNewProfile\&quot; = period != period[1], \&quot;onExpansion\&quot; = no);\n\ndef vahprior = vol1.GetHighestValueArea();\ndef pocprior = vol1.GetPointOfControl();\ndef valprior = vol1.GetLowestValueArea();\n\ndef vahprev = GetValue(vahprior, priorperiod);\ndef pocprev = GetValue(pocprior, priorperiod);\ndef valprev = GetValue(valprior, priorperiod);\n\n#if showProfile then\ndef  showProfile = no;\ndef showPointOfControl = no;\n\n#vol.Show(if showProfile then GlobalColor(\&quot;Profile\&quot;) else Color.CURRENT, if showPointOfControl then GlobalColor(\&quot;Point Of Control\&quot;) else Color.CURRENT, if showValueArea then GlobalColor(\&quot;Value Area\&quot;) else Color.CURRENT, opacity);\n#profile vol = VolumeProfile(\&quot;startNewProfile\&quot; = cond, \&quot;onExpansion\&quot; = no);\n#vol.Show(if showProfile then GlobalColor(\&quot;Profile\&quot;) else Color.CURRENT, if showPointOfControl then GlobalColor(\&quot;Point Of Control\&quot;) else Color.CURRENT, if showValueArea then GlobalColor(\&quot;Value Area\&quot;) else Color.CURRENT, opacity);\ndef VAH = vahprev;\ndef VAL = valprev;\ndef POC = pocprev;\n\n\n############\n#Value Area Functions\ndef PPoint = If(Pivot &gt; 0, Pivot, Na);\ndef VArea  = Between(close, VAL, VAH);\ndef VAreaabove  = close &gt; VAH;\ndef VAreabelow  = close &lt; VAL;\n\n\n###%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n#def oneVol = Roundup(( VAHigh - VALow) / VAHigh, 2);\ndef oneVol = RoundUp(( VAH - VAL) / 100, 2);\ndef upperValimitH = VAH + oneVol * (triggerUpperVaLimitHigh);\ndef upperValimitL = VAH + oneVol * (triggerUpperVaLimitLow);\n\ndef lowerValimitH = VAL + oneVol * (triggerLowerVaLimitHigh);\ndef lowerValimitL = VAL + oneVol * (triggerLowerVaLimitLow);\n#triggerUpperVaLimitlow = if triggerUpperVaLimitlow&gt;=0 then triggerUpperVaLimitlow =-5 else triggerUpperVaLimitlow= triggerUpperVaLimitlow;\n\nplot VA_high_short = upperValimitH;\nplot VA_high_long = upperValimitL;\n\nplot VA_low_short = lowerValimitL;\nplot VA_low_long = lowerValimitH;\n\n#AddCloud(VA_high_long, VA_high_short, Color.LIGHT_RED, Color.LIGHT_RED);\n#AddCloud(VA_high_long, VA_high_short, Color.LIGHT_RED, Color.LIGHT_RED);\n\n#VA_low_short.SetPaintingStrategy(PaintingStrategy.DASHES);\n#VA_low_long.SetDefaultColor(Color.BLUE);\nVA_low_short.SetHiding(!showLines);\nVA_low_short.SetPaintingStrategy(PaintingStrategy.DASHES);\nVA_low_short.SetDefaultColor(Color.RED);\nVA_low_long.SetHiding(!showLines);\nVA_low_long.SetPaintingStrategy(PaintingStrategy.DASHES);\nVA_low_long.SetDefaultColor(Color.GREEN);\n\n\n\nVA_high_short.SetHiding(!showLines);\nVA_high_short.SetPaintingStrategy(PaintingStrategy.DASHES);\nVA_high_short.SetDefaultColor(Color.RED);\nVA_high_long.SetHiding(!showLines);\nVA_high_long.SetPaintingStrategy(PaintingStrategy.DASHES);\nVA_high_long.SetDefaultColor(Color.GREEN);\n\n\n####%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\n\n\n\n\n#Time Functions\ndef timeFrame = getAggregationPeriod();\ndef prdMax =highestAll(if(!IsNaN(close[-1]),period,Na))  ;\ndef cnt =if(period &gt; prdMax-2  ,1,Na);\ndef Chart2  =  if showOnlyToday then cnt else 1 ;;#if showOnlyToday then (IsNaN(period[-1] and (period == period[1])))  else 1 ;\n#def Chart2  =  if showOnlyToday then MarketOpen and NewDay else 1 ;\n\ndef CloseTime2 = SecondsTillTime(1600) &gt;= 0;\ndef OpenTime2 = SecondsFromTime(PlotStartTime) &gt;= 0;\ndef MarketOpen = OpenTime2 and CloseTime2;\ndef NewDay = IsNaN(close(period = “Day”)[-1]);\ndef Chart1;\nif  timeFrame&lt; aggregationPeriod.DAY\n{\nChart1  =  if showOnlyToday then MarketOpen and NewDay else 1 ;\n}\nelse\n{ \n Chart1  =  chart2 ;\n}\n#plot prd =period;\n\n#AddLabel (yes,Chart1);\n#Pivot Functions\ninput useFib =no;\n\n###################\n\n\n\ninput FibUseAggregate = NO;\n\n\n\ninput length = 3;\ndef displace = -1;\n\ninput PivotPrice = {default CLOSE, HLC3, VWAP, OHLC4, OPEN, HL2};\ninput PivotLength = 1;\n\ndef averageType = AverageType.SIMPLE;\ndef fib1 = 0.236; #fib 0.236\ndef fib2 = 0.5;  #fib2 0.5\ndef fib3 = 0.764; #fib3 0.764\ndef fib4 = 1.0; # Extreems\n\n\n\n\n#def mov_avg = MovingAverage(averageType, price[-displace], length);\n\ndef ll;\ndef hh;\ndef pv;\n\nif FibUseAggregate\n{\n    ll = low (period = AggPeriod)[-displace];;\n    hh = high (period = AggPeriod)[-displace];\n     switch (PivotPrice)\n       {\n            case \&quot;CLOSE\&quot;:\n                    pv = close(period = AggPeriod)  [-displace];\n            case \&quot;HLC3\&quot; :\n                    pv = hlc3(period = AggPeriod)[-displace];\n\n            case \&quot;VWAP\&quot; :\n                    pv = vwap(period = AggPeriod)[-displace];\n            case \&quot;HL2\&quot; :\n                    pv = hl2(period = AggPeriod)[-displace];\n            case \&quot;OHLC4\&quot; :\n                    pv = ohlc4(period = AggPeriod)[-displace];\n            case \&quot;OPEN\&quot; :\n                    pv = open(period = AggPeriod)[-displace];\n       }\n}\nelse\n{\n    ll = average( low[-displace], length);#MovingAverage(averageType, low[-displace], length);\n    hh = average( high[-displace], length);#MovingAverage(averageType, high[-displace], length);\n      switch (PivotPrice)\n       {\n            case \&quot;CLOSE\&quot;:\n                    pv = MovingAverage(averageType, close  [-displace], PivotLength);;\n            case \&quot;HLC3\&quot; :\n                    pv = MovingAverage(averageType,hlc3[-displace], PivotLength);;\n            case \&quot;VWAP\&quot; :\n                    pv = MovingAverage(averageType,vwap[-displace], PivotLength);;\n            case \&quot;HL2\&quot; :\n                    pv =MovingAverage(averageType, hl2[-displace], PivotLength);;\n            case \&quot;OHLC4\&quot; :\n                    pv = MovingAverage(averageType,ohlc4[-displace], PivotLength);;\n            case \&quot;OPEN\&quot; :\n                    pv = MovingAverage(averageType,open[-displace], PivotLength);;\n\n       }\n}\n\n\n\n\n#\n# logic\n#\n    def nan = Double.NaN;\n\n\n    def delta = hh - ll;\n    def pp_ = pv; #pivot Point\n    def s1_ = pp_ - (fib1 * delta);\n    def s2_ = pp_ - (fib2 * delta);\n    def s3_ = pp_ - (fib3 * delta);\n    def s4_ = pp_ - (fib4 * delta);\n    def r1_ = pp_ + (fib1 * delta);\n    def r2_ = pp_ + (fib2 * delta);\n    def r3_ = pp_ + (fib3 * delta);\n    def r4_ = pp_ + (fib4 * delta);\n\n\n\n\n\n##########\n\ndef Res1  =if(usefib, r1_, (2 * PPoint) - PrevLow);\ndef Supp1 =if(usefib, s1_, (2 * PPoint) - PrevHigh);\ndef Res2  = if(usefib, r2_, PPoint + (Res1 - Supp1));\ndef Supp2 = if(usefib, s2_, PPoint - (Res1 - Supp1));\ndef Res3  = if(usefib, r3_, PrevHigh + 2 * (PPoint - PrevLow));\ndef Supp3 = if(usefib, s3_, PrevLow - 2 * (PrevHigh - PPoint));\ndef Res4  = if(usefib, r4_, PrevHigh + 3 * (PPoint - PrevLow));\ndef Supp4 = if(usefib, s4_, PrevLow - 3 * (PrevHigh - PPoint));\ndef Res5  = PrevHigh + 4 * (PPoint - PrevLow);\ndef Supp5 = PrevLow - 4 * (PrevHigh - PPoint);\n\ndef Res6  = PrevHigh + 5 * (PPoint - PrevLow);\ndef Supp6 = PrevLow - 5 * (PrevHigh - PPoint);\n\ndef Res7  = PrevHigh + 6 * (PPoint - PrevLow);\ndef Supp7 = PrevLow - 6 * (PrevHigh - PPoint);\n\ndef Res8  = PrevHigh + 7 * (PPoint - PrevLow);\ndef Supp8 = PrevLow - 7 * (PrevHigh - PPoint);\n\n\n\n\n\n\n\n\n\n\n\n#Rounding Functions\ndef round = 0.01;\ndef RI   = RoundDown(Res1, 0) - ((Round(((RoundDown(Res1, 0) - Res1) / round), 0)) * round);\ndef SI   = RoundDown(Supp1, 0) - ((Round(((RoundDown(Supp1, 0) - Supp1) / round), 0)) * round);\ndef RII  = RoundDown(Res2, 0) - ((Round(((RoundDown(Res2, 0) - Res2) / round), 0)) * round);\ndef SII  = RoundDown(Supp2, 0) - ((Round(((RoundDown(Supp2, 0) - Supp2) / round), 0)) * round);\ndef RIII = RoundDown(Res3, 0) - ((Round(((RoundDown(Res3, 0) - Res3) / round), 0)) * round);\ndef SIII = RoundDown(Supp3, 0) - ((Round(((RoundDown(Supp3, 0) - Supp3) / round), 0)) * round);\ndef RIV  = RoundDown(Res4, 0) - ((Round(((RoundDown(Res4, 0) - Res4) / round), 0)) * round);\ndef SIV  = RoundDown(Supp4, 0) - ((Round(((RoundDown(Supp4, 0) - Supp4) / round), 0)) * round);\n\n\ndef RV  = RoundDown(Res5, 0) - ((Round(((RoundDown(Res5, 0) - Res5) / round), 0)) * round);\ndef SV  = RoundDown(Supp5, 0) - ((Round(((RoundDown(Supp5, 0) - Supp5) / round), 0)) * round);\ndef RVI  = RoundDown(Res6, 0) - ((Round(((RoundDown(Res6, 0) - Res6) / round), 0)) * round);\ndef SVI  = RoundDown(Supp6, 0) - ((Round(((RoundDown(Supp6, 0) - Supp6) / round), 0)) * round);\ndef RVII  = RoundDown(Res7, 0) - ((Round(((RoundDown(Res7, 0) - Res7) / round), 0)) * round);\ndef SVII  = RoundDown(Supp7, 0) - ((Round(((RoundDown(Supp7, 0) - Supp7) / round), 0)) * round);\ndef RVIII  = RoundDown(Res8, 0) - ((Round(((RoundDown(Res8, 0) - Res8) / round), 0)) * round);\ndef SVIII  = RoundDown(Supp8, 0) - ((Round(((RoundDown(Supp8, 0) - Supp8) / round), 0)) * round);\ndef PivP = RoundDown(PPoint, 0) - ((Round(((RoundDown(PPoint, 0) - PPoint) / round), 0)) * round);\n\n\n\n#Plots\nplot VH  = If(Chart1 and VAH &gt; 0, VAH, Na);\nplot PC  = If(Chart1 and POC &gt; 0, POC, Na);\nplot VL  = If(Chart1 and VAL &gt; 0, VAL, Na);\n\n##Auto Show \ndef R1_auto_show;\ndef R2_auto_show;\ndef R3_auto_show;\ndef R4_auto_show;\ndef R5_auto_show;\ndef R6_auto_show;\ndef R7_auto_show;\ndef R8_auto_show;\n\ndef S1_auto_show;\ndef S2_auto_show;\ndef S3_auto_show;\ndef S4_auto_show;\ndef S5_auto_show;\ndef S6_auto_show;\ndef S7_auto_show;\ndef S8_auto_show;\n\ndef cmax = highestAll( count);\ndef R1AutoShow = (close&gt;VH or (Between(RI,VL,VH) and close&gt;VL));\ndef S1AutoShow = (close&lt;VL or (Between(SI,VL,VH) and close&lt;VH));;\ndef R2AutoShow =  close &gt; VH and close &lt; RV;\ndef S2AutoShow = (close &lt; VL) and close &gt; SV  ;\ndef R3AutoShow = close &gt; (RI + ((RII - RI) / 2));;\ndef S3AutoShow = close &lt; (SI - ((SI - SII) / 2));\ndef R4AutoShow = close &gt; (RII + ((RIII - RII) / 2));\ndef S4AutoShow =  close &lt; (SII - ((SII - SIII) / 2));\ndef R5AutoShow =  close &gt; (RIII + ((RIV - RIII) / 2));\ndef S5AutoShow =  close &lt; (SIII - ((SIII - SIV) / 2));\ndef R6AutoShow =  close &gt; (RIV + ((RV - RIV) / 2));\ndef S6AutoShow =  close &lt; (SIV - ((SVI - SV) / 2));\ndef R7AutoShow =  close &gt; (RV + ((RVI - RV) / 2));\ndef S7AutoShow =  close &lt; (SV - ((SV - SVI) / 2));\ndef R8AutoShow =  close &gt; (RVI + ((RVII - RVI) / 2));\ndef S8AutoShow =  close &lt; (SVI - ((SVI - SVII) / 2));\n\nR1_auto_show = if ( (period==period[1]) and R1_auto_show[1] )  then R1_auto_show[1] else R1AutoShow;\nR2_auto_show = if ( (period==period[1]) and R2_auto_show[1] )  then R2_auto_show[1] else R2AutoShow;\nR3_auto_show = if ( (period==period[1]) and R3_auto_show[1] )  then R3_auto_show[1] else R3AutoShow;\nR4_auto_show = if ( (period==period[1]) and R4_auto_show[1] )  then R4_auto_show[1] else R4AutoShow;\nR5_auto_show = if ( (period==period[1]) and R5_auto_show[1] )  then R5_auto_show[1] else R5AutoShow;\nR6_auto_show = if ( (period==period[1]) and R6_auto_show[1] )  then R6_auto_show[1] else R6AutoShow;\nR7_auto_show = if ( (period==period[1]) and R7_auto_show[1] )  then R7_auto_show[1] else R7AutoShow;\nR8_auto_show = if ( (period==period[1]) and R8_auto_show[1] )  then R8_auto_show[1] else R8AutoShow;\n\n\nS1_auto_show = CompoundValue(2,if ( (period==period[1]) and S1_auto_show[1] )  then S1_auto_show[1] else S1AutoShow,S1AutoShow);\nS2_auto_show = if ( (period==period[1]) and S2_auto_show[1] )  then S2_auto_show[1] else S2AutoShow;\nS3_auto_show = if ( (period==period[1]) and S3_auto_show[1] )  then S3_auto_show[1] else S3AutoShow;\nS4_auto_show = if ( (period==period[1]) and S4_auto_show[1] )  then S4_auto_show[1] else S4AutoShow;\nS5_auto_show = if ( (period==period[1]) and S5_auto_show[1] )  then S5_auto_show[1] else S5AutoShow;\nS6_auto_show = if ( (period==period[1]) and S6_auto_show[1] )  then S6_auto_show[1] else S6AutoShow;\nS7_auto_show = if ( (period==period[1]) and S7_auto_show[1] )  then S7_auto_show[1] else S7AutoShow;\nS8_auto_show = if ( (period==period[1]) and S8_auto_show[1] )  then S8_auto_show[1] else S8AutoShow;\n\n#plot gg=(S1AutoShow);#==1);\n#plot ggg = ( s1_auto_show);# if ( isnan( s1_autoshow))then  1 else double.NaN ;\n#gg.SetHiding(0);\n#ggg.SetHiding(0);\n\n#input showHigherLevel =yes;\n##\n\nplot R4  = If(Chart1 and AutoPivots and ShowLevel4UP and   RIV &gt; 0, RIV, Na);\nplot R3  = If(Chart1 and AutoPivots and ShowL3   and RIII &gt; 0, RIII,Na);\nplot R2  = If(Chart1 and AutoPivots and ShowL2   and RII &gt; 0, RII, Na);\nplot R1  = If(Chart1 and AutoPivots and ShowL1   and RI &gt; 0, RI, Na);\nplot PP  = If(Chart1 and AutoPivots and ShowPivotPoint and PPoint &gt; 0, PivP, Na);\nplot S1  = If(Chart1 and AutoPivots and ShowL1   and SI &gt; 0, SI, Na);\nplot S2  = If(Chart1 and AutoPivots and ShowL2   and SII &gt; 0, SII, Na);\nplot S3  = If(Chart1 and AutoPivots and ShowL3  and SIII &gt; 0, SIII, Na);\nplot S4  = If(Chart1 and AutoPivots and ShowLevel4UP and SIV &gt; 0, SIV, Na);\n\n#######\n\nplot R5  = If(Chart1 and AutoPivots and ShowLevel4UP  and RV &gt; 0, RV, Na);\nplot R6  = If(Chart1 and AutoPivots and ShowLevel4UP and RVI &gt; 0, RVI, Na);\nplot R7  = If(Chart1 and AutoPivots and ShowLevel4UP  and RVII &gt; 0, RVII, Na);\nplot R8  = If(Chart1 and AutoPivots and ShowLevel4UP   and RVIII &gt; 0, RVIII, Na);\n\n\nplot S5  = If(Chart1 and AutoPivots and ShowLevel4UP   and SV &gt; 0, SV, Na);\nplot S6  = If(Chart1 and AutoPivots and ShowLevel4UP and SVI &gt; 0, SVI, Na);\nplot S7  = If(Chart1 and AutoPivots and ShowLevel4UP and SVII &gt; 0, SVII, Na);\nplot S8  = If(Chart1 and AutoPivots and ShowLevel4UP and SVIII &gt; 0, SVIII, Na);\n####\n\n\ninput closeTimeC = 1615;\n#Value Area Cloud\n#def CloudClose = SecondsTillTime(1615) &gt; 0;\ndef CloudClose = SecondsTillTime(closeTimeC) &gt; 0;\ndef Cloud      = OpenTime and CloudClose;\ndef ChartCloud = if(timeFrame &gt; aggregationPeriod.DAY, Cloud and Chart1, chart1);\ndef CloudTest  = If(CloudOpenOnly, ChartCloud, Chart1);\ndef cloudhigh = If(CloudTest and ShowCloud1, VAH, Na);\ndef cloudlow  = If(CloudTest and ShowCloud1, VAL, Na);\nAddCloud(cloudhigh, cloudlow, Color.GRAY, Color.GRAY);\ndef AfterHours = OpenTime2 and CloudClose;\n\n#Chart Labels\ndef Futures = Between(close, close(\&quot;/es\&quot;) - 15, close(\&quot;/es\&quot;) + 15) or Between(close, close(\&quot;/nq\&quot;) - 15, close(\&quot;/nq\&quot;) + 15);\ndef Label = Chart1;# and Futures;\ndef ZeroTest = VAH &gt; 0 and VAL &gt; 0;\ndef PNotZero = PPoint &gt; 0;\ndef ChartLabels;\nswitch (Labels) {\ncase \&quot;Proximity\&quot;:\n    ChartLabels = 1;\ncase \&quot;Off\&quot;:\n    ChartLabels = 0;\ncase \&quot;All\&quot;:\n    ChartLabels = 2;\ncase \&quot;ValueAreaOnly\&quot;:\n    ChartLabels = 3;\n}\n\n\nAddLabel(ChartLabels == 1 and Label and AutoPivots and VArea and ZeroTest, “InsideValue: ” + AggPeriod, Color.WHITE);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and VAreaabove and ZeroTest, “AboveValue: ”  + AggPeriod, Color.GREEN);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and VAreabelow and ZeroTest, “BelowValue: ”  + AggPeriod, Color.RED);\nAddLabel(ChartLabels == 1 and Label and !AutoPivots and VArea and ZeroTest, “InsideValueArea: ”  + AggPeriod, Color.WHITE);\nAddLabel(ChartLabels == 1 and Label and !AutoPivots and VAreaabove and ZeroTest, “AboveValueArea: ”  + AggPeriod, Color.GREEN);\nAddLabel(ChartLabels == 1 and Label and !AutoPivots and VAreabelow and ZeroTest, “BelowValueArea: ”  + AggPeriod, Color.RED);\n\n\nAddLabel(ChartLabels == 1 and Label and AutoPivots and Between(close, VL, (RI + ((RII - RI) / 2))), \&quot;VH=\&quot; + AsText(VH), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and Between(close, VL, VH), \&quot;POC=\&quot; + AsText(PC), Color.YELLOW);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and Between(close, (SI - ((SI - SII) / 2)), VH), \&quot;VL=\&quot; + AsText(VL), Color.GREEN);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and (close &gt; VH or (Between(RI, VL, VH) and close &gt; VL)), \&quot;R1=\&quot; + AsText(RI), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and close &gt; VH, \&quot;R2=\&quot; + AsText(RII), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and close &gt; (RI + ((RII - RI) / 2)), \&quot;R3=\&quot; + AsText(RIII), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and ShowLevel4UP and close &gt; (RII + ((RIII - RII) / 2)), \&quot;R4=\&quot; + AsText(RIV), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and ShowLevel4UP and close &gt; (RIII + ((RIV - RIII) / 2)), \&quot;R5=\&quot; + AsText(RV), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and ShowLevel4UP and close &gt; (RII + ((RV - RIV) / 2)), \&quot;R6=\&quot; + AsText(RVI), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and ShowLevel4UP and close &gt; (RII + ((RVI - RV) / 2)), \&quot;R7=\&quot; + AsText(RVII), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and ShowLevel4UP and close &gt; (RII + ((RVII - RVI) / 2)), \&quot;R8=\&quot; + AsText(RVIII), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and ShowPivotPoint and close &gt; SI and close &lt; RI, \&quot;PP=\&quot; + AsText(PP), Color.WHITE);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and (close &lt; VL or (Between(SI, VL, VH) and close &lt; VH)), \&quot;S1=\&quot; + AsText(SI), Color.GREEN);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and close &lt; VL, \&quot;S2=\&quot; + AsText(SII), Color.GREEN);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and close &lt; (SI - ((SI - SII) / 2)), \&quot;S3=\&quot; + AsText(SIII), Color.GREEN);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and ShowLevel4UP and close &lt; (SII - ((SII - SIII) / 2)), \&quot;S4=\&quot; + AsText(SIV), Color.GREEN);\n\nAddLabel(ChartLabels == 2 and Label and ZeroTest, \&quot;VH=\&quot; + AsText(VH), Color.RED);\nAddLabel(ChartLabels == 2 and Label and ZeroTest, \&quot;POC=\&quot; + AsText(PC), Color.YELLOW);\nAddLabel(ChartLabels == 2 and Label and ZeroTest, \&quot;VL=\&quot; + AsText(VL), Color.GREEN);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero, \&quot;R1=\&quot; + AsText(RI), Color.RED);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero, \&quot;R2=\&quot; + AsText(RII), Color.RED);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero, \&quot;R3=\&quot; + AsText(RIII), Color.RED);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero and ShowLevel4UP, \&quot;R4=\&quot; + AsText(RIV), Color.RED);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero and ShowPivotPoint, \&quot;PP=\&quot; + AsText(PP), Color.WHITE);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero, \&quot;S1=\&quot; + AsText(SI), Color.GREEN);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero, \&quot;S2=\&quot; + AsText(SII), Color.GREEN);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero, \&quot;S3=\&quot; + AsText(SIII), Color.GREEN);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero and ShowLevel4UP, \&quot;S4=\&quot; + AsText(SIV), Color.GREEN);\n\nAddLabel(ChartLabels == 3 and Label and VArea and ZeroTest, “InsideValueArea”, Color.WHITE);\nAddLabel(ChartLabels == 3 and Label and VAreaabove and ZeroTest, “AboveValueArea”, Color.GREEN);\nAddLabel(ChartLabels == 3 and Label and VAreabelow and ZeroTest, \&quot;BelowValueArea”, Color.RED);\nAddLabel(!AfterHours and !Chart1 and !HideAfterHoursLabel, \&quot;NoShadowPlotAfterHours\&quot;, Color.ORANGE);\n\n#Chart Bubbles\ninput BubbleLeftSide = yes;\ndef  leftLoc =  if BubbleLeftSide then 1 else -1;#\nAddChartBubble(IsNaN(VH[leftLoc]) and ValueBubbles, VH, VH, Color.RED, no);\nAddChartBubble(IsNaN(PC[leftLoc]) and ValueBubbles, PC, PC, Color.YELLOW, no);\nAddChartBubble(IsNaN(VL[leftLoc]) and ValueBubbles, VL, VL, Color.GREEN, no);\nAddChartBubble(IsNaN(S1[leftLoc]) and PivotBubbles and S1_auto_show, S1, “S1”, Color.WHITE, no);\nAddChartBubble(IsNaN(S2[leftLoc]) and PivotBubbles and S2_auto_show, S2, “S2”, Color.WHITE, no);\nAddChartBubble(IsNaN(S3[leftLoc]) and PivotBubbles and S1_auto_show, S3, “S3”, Color.WHITE, no);\nAddChartBubble(IsNaN(S4[leftLoc]) and PivotBubbles and ShowLevel4UP and S4_auto_show, S4, “S4”, Color.WHITE, no);\nAddChartBubble(IsNaN(PP[leftLoc]) and ShowPivotPoint and PivotBubbles, PP, “PP”, Color.WHITE, no);\nAddChartBubble(IsNaN(R1[leftLoc]) and PivotBubbles and R1_auto_show, R1, “R1”, Color.WHITE, no);\nAddChartBubble(IsNaN(R2[leftLoc]) and PivotBubbles and R2_auto_show, R2, “R2”, Color.WHITE, no);\nAddChartBubble(IsNaN(R3[leftLoc]) and PivotBubbles and R3_auto_show, R3, “R3”, Color.WHITE, no);\nAddChartBubble(IsNaN(R4[leftLoc]) and PivotBubbles  and ShowLevel4UP and R4_auto_show, R4, “R4”, Color.WHITE, no);\n\n\n#Opening Range Breakout Functions\ndef ORBopen = SecondsTillTime(945) &lt;= 0;\ndef IsMarketOpen = ORBopen and CloseTime2;\ndef FirstBar = If(GetDay()[1] != GetDay(), GetDay() - 1, 0);\ndef OpenRange = SecondsFromTime(945);\ndef PastOpeningRange = OpenRange &gt;= (OrbTime - 15) * 60;\ndef DisplayedHigh = If(high &gt; DisplayedHigh[1] and IsMarketOpen and ShowORB, high, If(IsMarketOpen and !FirstBar, DisplayedHigh[1], high));\ndef DisplayedLow = If(low &lt; DisplayedLow[1] and IsMarketOpen and ShowORB, low, If(IsMarketOpen and !FirstBar, DisplayedLow[1], low));\ndef ORBHi = If(PastOpeningRange, ORBHi[1], DisplayedHigh);\ndef ORBLo  = If(PastOpeningRange, ORBLo[1], DisplayedLow);\nplot ORBHigh = If(Chart1 and PastOpeningRange and IsMarketOpen and ShowORB, ORBHi, Na);\nplot ORBLow  = If(Chart1 and PastOpeningRange and IsMarketOpen and ShowORB, ORBLo, Na);\n\n#Plot Criteria\nORBHigh.SetDefaultColor(Color.MAGENTA);\nORBHigh.SetStyle(Curve.SHORT_DASH);\nORBHigh.HideBubble();\nORBLow.SetDefaultColor(Color.MAGENTA);\nORBLow.SetStyle(Curve.SHORT_DASH);\nORBLow.HideBubble();\nVH.SetDefaultColor(Color.RED);\nPC.SetDefaultColor(Color.YELLOW);\nPC.SetStyle(Curve.LONG_DASH);\nVL.SetDefaultColor(Color.GREEN);\nR4.SetDefaultColor(Color.WHITE);\nR3.SetDefaultColor(Color.WHITE);\nR2.SetDefaultColor(Color.WHITE);\nR1.SetDefaultColor(Color.WHITE);\nPP.SetDefaultColor(Color.WHITE);\nS4.SetDefaultColor(Color.WHITE);\nS3.SetDefaultColor(Color.WHITE);\nS2.SetDefaultColor(Color.WHITE);\nS1.SetDefaultColor(Color.WHITE);\n\n#cloudhigh.SetDefaultColor(Color.RED);\n#cloudlow.SetDefaultColor(Color.GREEN);\nAddLabel(showVAH , \&quot;vah= \&quot; + AsText(VAH), Color.PINK);\nAddLabel(showVAH , \&quot;val= \&quot; + AsText(VAL), Color.LIGHT_GREEN);\nAddLabel(showVAH , \&quot;poc= \&quot; + AsText(POC), Color.LIGHT_ORANGE);\nAddLabel(showVAH , \&quot;pivot= \&quot; + AsText(Pivot), Color.PINK);\nVH.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nPC.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nVL.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nPP.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nR1.SetStyle(Curve.SHORT_DASH);\nR1.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nR2.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nR3.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nR4.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nS1.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nS2.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nS3.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nS4.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\n\n\nR1.SetHiding(R1_auto_show);\nR2.SetHiding(R2_auto_show);\nR3.SetHiding(R3_auto_show);\nR4.SetHiding(R4_auto_show);\nS1.SetHiding(S1_auto_show);\nS2.SetHiding(S2_auto_show);\nS3.SetHiding(S3_auto_show);\nS4.SetHiding(S4_auto_show);\n\n\n\n\ndef opacity_inv ;#= if (opacity &gt;= 0 and opacity &lt;= 100) then 100 - opacity else 50;\nif (no)#show_VA_cloud2\nthen\n{\n   opacity_inv = 1000;\n}\nelse\n\n{\n   opacity_inv = if (opacity &gt;= 0 and opacity &lt;= 100) then 100 - opacity else 50;\n}\n\ndef Vls  = If(Chart2 and ShowCloud2 and VA_low_short &gt; 0, VA_low_short, Na);\ndef Vll  = If(Chart2 and ShowCloud2  and VA_low_long &gt; 0, VA_low_long, Na);\ndef Vhs  = If(Chart2 and ShowCloud2  and VA_high_short &gt; 0, VA_high_short, Na);\ndef Vhl  = If(Chart2 and ShowCloud2  and VA_high_long &gt; 0, VA_high_long, Na);\n\nAddCloud(Vls,  Vll , CreateColor(144 * opacity_inv / 100, 240, 144 * opacity_inv / 100),  CreateColor(144 * opacity_inv / 100, 240, 144 * opacity_inv / 100));\n\nAddCloud(Vhs,   Vhl,  CreateColor(204, 184 * opacity_inv / 100, 202 * opacity_inv / 100),   CreateColor(204, 184 * opacity_inv / 100, 202 * opacity_inv / 100));\n\n\n#S5.SetHiding(!S5_auto_show);\n#AddLabel(yes , \&quot;R44= \&quot; + (S5_auto_show), Color.pink);\n#AddLabel(yes , \&quot;R5= \&quot; + ((RIII + ((RIV - SIII) / 2))), Color.pink);&quot;,name=&quot;_8c4f0368_c01c_4494_9a23_2b992ac82dab&quot;}){inputsMap:TreeMap14{^(&quot;ShowCloud1&quot;,@Boolean0),^(&quot;ShowCloud2&quot;,&lt;F),^(&quot;ShowL1&quot;,&lt;F),^(&quot;ShowL2&quot;,&lt;F),^(&quot;ShowL3&quot;,&lt;F),^(&quot;showOnlyToday&quot;,@Boolean0)},inputsMap=@TreeMap14,plots{5:{lineStyle=1},10:{lineStyle=1}}})}},!get(#%4.SubgraphId(&quot;Volume&quot;)){height=80},^(#%4.SubgraphId(&quot;Subgraph3&quot;),#%4.SubgraphStorableModel{height=80,storableIndicators.+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;declare lower;\n\n################\n\n\n\n\n\n#######\n\n\n\n\n\n\ninput price = close;\n\ninput superfast_length = 8;\n\ninput fast_length = 13;\n\ninput slow_length = 21;\n\ninput displace = 0;\n\n################\ninput averageType = AverageType.EXPONENTIAL;\n\ndef mov_avg8 = MovingAverage(averageType, price[-displace], superfast_length);\n\ndef mov_avg13 = MovingAverage(averageType, price[-displace], fast_length);\n\ndef mov_avg21 = MovingAverage(averageType, price[-displace], slow_length);\n \n#moving averages\n\ndef Superfast = mov_avg8;\n\ndef Fast = mov_avg13;\n\ndef Slow = mov_avg21;\n\n\ndef buy = mov_avg8 &gt; mov_avg13 and mov_avg13 &gt; mov_avg21 and low &gt; mov_avg8;\n\ndef stopbuy = mov_avg8 &lt;= mov_avg13;\n\ndef buynow = !buy[1] and buy;\n\ndef buysignal = CompoundValue(1, if buynow and !stopbuy then 1 else if buysignal[1] == 1 and stopbuy then 0 else buysignal[1], 0);\n\n\ndef Buy_Signal = buysignal[1] == 0 and buysignal == 1;\n\ndef Momentum_Down = buysignal[1] == 1 and buysignal == 0;\n\n\ndef sell = mov_avg8 &lt; mov_avg13 and mov_avg13 &lt; mov_avg21 and high &lt; mov_avg8;\n\ndef stopsell = mov_avg8 &gt;= mov_avg13;\n\ndef sellnow = !sell[1] and sell;\n\ndef sellsignal = CompoundValue(1, if sellnow and !stopsell then 1 else if sellsignal[1] == 1 and stopsell then 0 else sellsignal[1], 0);\n\n\ndef Sell_Signal = sellsignal[1] == 0 and sellsignal;\n\ndef Momentum_Up = sellsignal[1] == 1 and sellsignal == 0;\n \n# when using this as a custom scan, change the word plot to def\n# then remove the \'#\' from in front of one of the \&quot;plot Scan\&quot; statements below\ndef Colorbars = if buysignal == 1 then 1 else if sellsignal == 1 then -1 else if buysignal == 0 or sellsignal == 0 then 0 else 0;\n\n# use this first Scan plot for SLM Ribbon Momentum UP\n#plot Scan = if Colorbars == 1 then yes else no;\n\n# use this second Scan plot for SLM Ribbon Momentum DOWN\n#plot Scan = if Colorbars == -1 then yes else no;\n\n\n\ninput length = 14;\n\ndef MaxBound = HighestWeighted(high, length, LinearRegressionSlope(price = high, length = length));\ndef MinBound = LowestWeighted(low, length, LinearRegressionSlope(price = low, length = length));\ndef diff = MaxBound - MinBound;\n\nplot PROSC = if diff != 0 then 100 * (close - MinBound) / diff else 0;\nplot OverBought = 75;\nplot OverSold = 25;\nplot z =50;\nz.SetDefaultColor(color.gray);\n\nPROSC.SetDefaultColor(GetColor(8));\nOverBought.SetDefaultColor(GetColor(5));\nOverSold.SetDefaultColor(GetColor(5));\n\n\n###############\n\ndef Colorbars1 = if buysignal ==1 then 1 else if sellsignal ==1 then 2 else if buysignal ==0 or sellsignal==0 then 3 else 0;\n\n\n\nPROSC.definecolor(\&quot;Buy_Signal_Bars\&quot;, color.dark_green);\n\nPROSC.definecolor(\&quot;Sell_Signal_Bars\&quot;, color.red);\n\nPROSC.definecolor(\&quot;Neutral\&quot;, color.plum);\n\nPROSC.AssignValueColor(if Colorbars1 ==1 then PROSC.color(\&quot;buy_signal_bars\&quot;) else if colorbars1 ==2 then PROSC.color(\&quot;Sell_Signal_bars\&quot;) else  PROSC.color(\&quot;neutral\&quot;));\nPROSC.setlineWeight(2);\nOverBought.hide();\nOverSold.hide();\n\n\n\n\n\nAddCloud(0, OverSold, Color.RED, Color.light_green);\nAddCloud(OverBought, 100, Color.Green, Color.light_red);\n\n\nplot UpSignal = if (buysignal and PROSC crosses above OverSold) then OverSold else Double.NaN;\nplot DownSignal = if (sellsignal and PROSC crosses below OverBought) then OverBought else Double.NaN;\nplot DownSignal2 = if (( Momentum_Down or sellsignal) and PROSC  crosses below OverSold) then OverSold else Double.NaN;\n\nplot UpSignal2 = if ( Momentum_Up and PROSC&gt;= overbought) then overbought else Double.NaN;\ninput showBreakoutSignals =yes;\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\n\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\nUpSignal2.SetDefaultColor(Color.plum);\nUpSignal2.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\n\nDownSignal2.SetDefaultColor(Color.plum);\nDownSignal2.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\n\n\n\n&quot;,name=&quot;_bc0d152e_88dc_44b4_99a7_78acd8502e84&quot;}){hidden=&lt;T,inputsMap:TreeMap15{^(&quot;price&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap15})}),^(#%4.SubgraphId(&quot;Subgraph7&quot;),#%4.SubgraphStorableModel{height=81,storableIndicators.+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# RSI-Laguerre Self Adjusting With Fractal Energy Gaussian Price Filter\n# Mobius\n# V01.12.2016\n# Both Fractal Energy and RSI are plotted. RSI in cyan and FE in yellow. Look for trend exhaustion in the FE and a reversal of RSI or Price compression in FE and an RSI reversal.\n\ndeclare lower;\n\n#Inputs: \ninput nFE = 8;#hint nFE: length for Fractal Energy calculation. \ninput AlertOn = no;\ninput Glength  = 13;\ninput betaDev =  8;\ninput data = close;\n\ndef w = (2 * Double.Pi / Glength);\ndef beta = (1 - Cos(w)) / (Power(1.414, 2.0 / betaDev) - 1 );\ndef alpha = (-beta + Sqrt(beta * beta + 2 * beta));\ndef Go = Power(alpha, 4) * open + \n             4 * (1 – alpha) * Go[1] – 6 * Power( 1 - alpha, 2 ) * Go[2] + \n             4 * Power( 1 - alpha, 3 ) * Go[3] - Power( 1 - alpha, 4 ) * Go[4];\ndef Gh = Power(alpha, 4) * high + \n             4 * (1 – alpha) * Gh[1] – 6 * Power( 1 - alpha, 2 ) * Gh[2] + \n             4 * Power( 1 - alpha, 3 ) * Gh[3] - Power( 1 - alpha, 4 ) * Gh[4];\ndef Gl = Power(alpha, 4) * low + \n             4 * (1 – alpha) * Gl[1] – 6 * Power( 1 - alpha, 2 ) * Gl[2] + \n             4 * Power( 1 - alpha, 3 ) * Gl[3] - Power( 1 - alpha, 4 ) * Gl[4];\ndef Gc = Power(alpha, 4) * data + \n             4 * (1 – alpha) * Gc[1] – 6 * Power( 1 - alpha, 2 ) * Gc[2] + \n             4 * Power( 1 - alpha, 3 ) * Gc[3] - Power( 1 - alpha, 4 ) * Gc[4];\n# Variables:\ndef o;\ndef h;\ndef l;\ndef c;\ndef CU1;\ndef CU2;\ndef CU;\ndef CD1;\ndef CD2;\ndef CD;\ndef L0;\ndef L1;\ndef L2;\ndef L3;\nplot RSI;\nplot OS;\nplot OB;\nplot M;\n\n# Calculations\no = (Go + Gc[1]) / 2;\nh = Max(Gh, Gc[1]);\nl = Min(Gl, Gc[1]);\nc = (o + h + l + Gc) / 4;\nplot gamma = Log(Sum((Max(Gh, Gc[1]) - Min(Gl, Gc[1])), nFE) / \n        (Highest(Gh, nFE) - Lowest(Gl, nFE)))\n            / Log(nFE);\ngamma.SetDefaultColor(Color.YELLOW);\nL0 = (1 – gamma) * Gc + gamma * L0[1];\nL1 = -gamma * L0 + L0[1] + gamma * L1[1];\nL2 = -gamma * L1 + L1[1] + gamma * L2[1];\nL3 = -gamma * L2 + L2[1] + gamma * L3[1];\nif L0 &gt;= L1\nthen {\n    CU1 = L0 - L1;\n    CD1 = 0;\n} else {\n    CD1 = L1 - L0;\n    CU1 = 0;\n}\nif L1 &gt;= L2\nthen {\n    CU2 = CU1 + L1 - L2;\n    CD2 = CD1;\n} else {\n    CD2 = CD1 + L2 - L1;\n    CU2 = CU1;\n}\nif L2 &gt;= L3\nthen {\n    CU = CU2 + L2 - L3;\n    CD = CD2;\n} else {\n    CU = CU2;\n    CD = CD2 + L3 - L2;\n}\n\nRSI = if CU + CD &lt;&gt; 0 then CU / (CU + CD) else 0;\nRSI.SetDefaultColor(Color.CYAN);\nOS = if IsNaN(c) then Double.NaN else 0.2;\nOS.SetDefaultColor(Color.GRAY);\nOS.HideBubble();\nOS.HideTitle();\nOB = if IsNaN(c) then Double.NaN else 0.8;\nOB.SetDefaultColor(Color.GRAY);\nOB.HideBubble();\nOB.HideTitle();\nM = if IsNaN(c) then Double.NaN else 0.5;\nM.SetStyle(Curve.LONG_DASH);\nM.SetDefaultColor(Color.GRAY);\nM.HideBubble();\nM.HideTitle();\nplot FEh = if IsNaN(c) then Double.NaN else .618;\nFEh.SetStyle(Curve.SHORT_DASH);\nFEh.HideBubble();\nFEh.SetDefaultColor(Color.GRAY);\nFEh.HideTitle();\nplot FEl = if IsNaN(c) then Double.NaN else .382;\nFEl.SetStyle(Curve.SHORT_DASH);\nFEl.SetDefaultColor(Color.GRAY);\nFEl.HideBubble();\nFEl.HideTitle();\nAddCloud(0, OS, Color.RED, Color.GREEN);\nAddCloud(OB, 1, Color.GREEN, Color.RED);\nAlert(AlertOn and RSI crosses below .8, \&quot;\&quot;, Alert.BAR, Sound.Bell);\nAlert(AlertOn and RSI crosses above .2, \&quot;\&quot;, Alert.BAR, Sound.Bell);\n\n#######\n\n#SLIM ribon\ninput price = close;\n\ninput superfast_length =4;\n\ninput fast_length = 7;\n\ninput slow_length = 21;\n\ninput displace = 0;\n\n################\ninput averageTypeSuperfast = AverageType.simple;\ninput averageTypefast = AverageType.simple;\ninput averageTypeSlow = AverageType.EXPONENTIAL;\n\ninput  priceSupperFast = hlc3 ;\ninput priceFast  = close ;\ninput priceSlow  = close ;\n\ndef mov_avg_superFast = MovingAverage(averageTypeSuperfast, priceSupperFast[-displace], superfast_length);\ndef mov_avg_Fast = MovingAverage(averageTypefast, priceFast[-displace], fast_length);\ndef mov_avg_Slow = MovingAverage(averageTypeSlow, priceSlow[-displace], slow_length);\n\n#moving averages\ndef Superfast = mov_avg_superFast;\ndef Fast = mov_avg_Fast;\ndef Slow = mov_avg_Slow;\n\n################################\ndef buy = mov_avg_superFast &gt; mov_avg_Fast and mov_avg_Fast &gt; mov_avg_Slow and low &gt; mov_avg_superFast;\n\ndef stopbuy = mov_avg_superFast &lt;= mov_avg_Fast;\n\ndef buynow = !buy[1] and buy;\n\ndef buysignal = CompoundValue(1, if buynow and !stopbuy then 1 else if buysignal[1] == 1 and stopbuy then 0 else buysignal[1], 0);\n\n\ndef Buy_Signal = buysignal[1] == 0 and buysignal == 1;\n\ndef Momentum_Down = buysignal[1] == 1 and buysignal == 0;\n\n\ndef sell = mov_avg_superFast &lt; mov_avg_Fast and mov_avg_Fast &lt; mov_avg_Slow and high &lt; mov_avg_superFast;\n\ndef stopsell = mov_avg_superFast &gt;= mov_avg_Fast;\n\n\n\n###########################\ndef sellnow = !sell[1] and sell;\n\ndef sellsignal = CompoundValue(1, if sellnow and !stopsell then 1 else if sellsignal[1] == 1 and stopsell then 0 else sellsignal[1], 0);\n\n\ndef Sell_Signal = sellsignal[1] == 0 and sellsignal;\n\ndef Momentum_Up = sellsignal[1] == 1 and sellsignal == 0;\n \n# when using this as a custom scan, change the word plot to def\n# then remove the \'#\' from in front of one of the \&quot;plot Scan\&quot; statements below\ndef Colorbars = if buysignal == 1 then 1 else if sellsignal == 1 then -1 else if buysignal == 0 or sellsignal == 0 then 0 else 0;\n\n# use this first Scan plot for SLM Ribbon Momentum UP\n#plot Scan = if Colorbars == 1 then yes else no;\n\n# use this second Scan plot for SLM Ribbon Momentum DOWN\n#plot Scan = if Colorbars == -1 then yes else no;\n\ninput length = 19;\n\ndef HMA = MovingAverage(AverageType.HULL, price, length)[-displace];\ndef HMA_Up=  HMA &gt; HMA[1];\ndef HMA_Down =! HMA_UP;\n\n###############\n\n#def Colorbars1 = if buysignal == 1 then 1 else if sellsignal == 1 then 2 else if buysignal == 0 or sellsignal == 0 then 3 else 0;\n\n\n\nRSI.definecolor(\&quot;Buy\&quot;, color.dark_green);\n\n\nRSI.definecolor(\&quot;Sell\&quot;, color.red);\n\nRSI.DefineColor(\&quot;Neutral\&quot;, Color.PLUM);\n#RSI.DefineColor(\&quot;NeutralDown\&quot;, Color.orange);\nRSI.definecolor(\&quot;HullMA_up\&quot;, color.blue);\n\nRSI.definecolor(\&quot;HullMA_down\&quot;, color.orange);\n\nRSI.AssignValueColor(if buysignal and HMA_Up then RSI.color(\&quot;Buy\&quot;) else if buysignal and !HMA_Up then RSI.color(\&quot;HullMA_down\&quot;) else if sellsignal and HMA_Down  then RSI.color(\&quot;Sell\&quot;) else  if sellsignal and !HMA_Down  then RSI.color(\&quot;HullMA_up\&quot;) else  RSI.color(\&quot;neutral\&quot;));;#\n# if Momentum_Up then  RSI.color(\&quot;neutralUp\&quot;) else  RSI.color(\&quot;neutraldown\&quot;));\n\n\n\n\n####$$$$$$$$$$$$$$$$\n###############\n\n\n\n\nplot UpSignal = if (buysignal and RSI crosses above OS) then RSI-0.1 else Double.NaN;\nplot DownSignal = if (sellsignal and RSI crosses below OB) then RSI+0.1 else Double.NaN;\ninput showBreakoutSignals =yes;\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\n\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\n\n\n\n\n\n\n\n\n\n# End Code RSI_Laguerre Self Adjusting with Fractal Energy&quot;,name=&quot;_94f3daa4_27de_42e1_9e1c_1f3e66613988&quot;}){alerts:LocalAlertArray1,alerts=@LocalAlertArray1,inputsMap:TreeMap16{^(&quot;data&quot;,&quot;CLOSE&quot;),^(&quot;price&quot;,&quot;CLOSE&quot;),^(&quot;priceFast&quot;,&quot;CLOSE&quot;),^(&quot;priceSlow&quot;,&quot;CLOSE&quot;),^(&quot;priceSupperFast&quot;,&quot;(H+L+C)/3&quot;)},inputsMap=@TreeMap16,plots{0:{lineWeight=3}}})}),^(#%4.SubgraphId(&quot;Subgraph9&quot;),#%4.SubgraphStorableModel{height=81,storableIndicators.+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;#converted from mobisu macd to ppo\n# this is actually macd and sqz indicator in one\n# added pivots\n\ndeclare lower;\n\ninput fastPeriod   = 12; #9/18/6 for 5m\ninput slowPeriod   = 26;\ninput signalPeriod = 9;\ninput price        = close;\ninput show = yes;\n\n\ndef fastEma   = ExpAverage( price, fastPeriod );\ndef slowEma   = ExpAverage( price, slowPeriod );\ndef periodOK  = fastPeriod &lt; slowPeriod;\nAddLabel( !periodOK, \&quot;ERROR: fastPeriod MUST be less than slowPeriod\&quot; );\ndef _ppo      = if periodOK then ((fastEma - slowEma) / slowEma) * 100 else 0;\ndef _signal   = ExpAverage( _ppo, signalPeriod );\n\n# generic plots wiht colors\nplot pmain   = _ppo;\npmain.SetDefaultColor( Color.BLUE );\npmain.SetLineWeight(2);\npmain.AssignValueColor(if pmain &lt; 0 and pmain &lt; pmain[1]  then Color.RED\n                       else if pmain &lt; 0 and  pmain &gt; pmain[1] then Color.DARK_GREEN\n                       else if pmain &gt; 0 and pmain &gt; pmain[1] then Color.GREEN\n                       else Color.DARK_RED);\npmain.HideBubble();\n\nplot mainEma   = _signal;\nmainEma.SetDefaultColor( Color.RED );\nmainEma.HideBubble();\nAddCloud(pmain, mainEma, Color.GREEN, Color.RED);\n\n#diff as histogram\nplot diff    = _ppo - _signal;\ndiff.SetDefaultColor(GetColor(5));\ndiff.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);\ndiff.SetLineWeight(3);\ndiff.DefineColor(\&quot;Positive and Up\&quot;, Color.GREEN);\ndiff.DefineColor(\&quot;Positive and Down\&quot;, Color.DARK_GREEN);\ndiff.DefineColor(\&quot;Negative and Down\&quot;, Color.RED);\ndiff.DefineColor(\&quot;Negative and Up\&quot;, Color.DARK_RED);\ndiff.AssignValueColor(if diff &gt;= 0 then if diff &gt; diff[1] then diff.Color(\&quot;Positive and Up\&quot;) else diff.Color(\&quot;Positive and Down\&quot;) else if diff &lt; diff[1] then diff.Color(\&quot;Negative and Down\&quot;) else diff.Color(\&quot;Negative and Up\&quot;));\n\n\n#mobius divergence calc\ndef pmainh = CompoundValue(1, \n            if pmain &lt; 0 then Double.NaN\n            else if pmain crosses above 0  then pmain\n            else if pmain &gt; 0 and  pmain &gt; pmainh[1]\n            then pmain else pmainh[1], 0);\n\ndef Valueh = CompoundValue(1, \n             if pmain &lt; 0 then Double.NaN\n             else if pmain crosses above 0  then high\n             else if pmain &gt; 0 and high &gt; Valueh[1] then high\n             else Valueh[1], 0);\n\nplot divLowSignal = if pmain &gt; 0 and  high &gt; Valueh[1] and pmain &lt; pmainh[1] then 0\n                 else Double.NaN;\ndivLowSignal.SetPaintingStrategy(PaintingStrategy.SQUARES);\ndivLowSignal.SetLineWeight(5);\ndivLowSignal.SetDefaultColor(Color.dark_orange);\n\ndef pmainL = CompoundValue(1, if pmain &gt; 0 then Double.NaN\n                             else if pmain crosses below 0  then pmain\n                             else if pmain &lt; 0 and pmain &lt; pmainl[1] then pmain\n                             else pmainl[1], 0);\n\ndef ValueL = CompoundValue(1, if pmain &gt; 0  then Double.NaN\n                              else if pmain crosses below 0 then low\n                              else if pmain &lt; 0 and low &lt; Valuel[1] then low\n                              else Valuel[1], 0);\n\nplot divUpSignall = if pmain &lt; 0 and   low &lt; Valuel[1] and pmain &gt; pmainl[1] then 0\n                 else Double.NaN;\ndivupSignall.SetPaintingStrategy(PaintingStrategy.SQUARES);\ndivUpSignall.SetLineWeight(5);\ndivUPSignall.SetDefaultColor(Color.blue);\n\n\n\n#zeroline\nplot zeroLine = 0;\nzeroLine.SetPaintingStrategy(PaintingStrategy.LINE);\nzeroLine.SetLineWeight(1);\nzeroLine.SetDefaultColor(Color.BLACK);\n\n\n#pivots\n\ndef ptrend = pmain;\ndef prange = 2;\ndef pivotHigh = if IsNaN(ptrend[-1]) then 0  else Lowest(ptrend, prange)[1] &gt; ptrend and Lowest(ptrend, prange)[-prange] &gt; ptrend ;\ndef pivotLow =  if  IsNaN(ptrend[-1]) then 0  else Highest(ptrend, prange)[1] &lt; ptrend and Highest(ptrend, prange)[-prange] &lt; ptrend ;\n#study\nplot plotPH = if pivotHigh and show then ptrend else Double.NaN;\nplotPH.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\nplotPH.SetDefaultColor(Color.GREEN);\n\nplot phline = if pivotHigh then pmain else Double.NaN;\nphline.SetDefaultColor(Color.DARK_GREEN);\nphline.EnableApproximation();phline.Hide();\n#\nplot plotPL = if pivotLow and show then ptrend else Double.NaN;\nplotPL.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\nplotPL.SetDefaultColor(Color.RED);\n\nplot plline = if pivotLow then pmain else Double.NaN;\nplline.SetDefaultColor(Color.RED);\nplline.EnableApproximation(); plline.hide();&quot;,name=&quot;_58fa56d7_7ed3_4ff5_b1a8_d0c87dfe1afc&quot;}){inputsMap:TreeMap17{^(&quot;price&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap17})}),^(#%4.SubgraphId(&quot;Subgraph11&quot;),#%4.SubgraphStorableModel{height=80,storableIndicators.+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence:ScriptEssence0{body=&quot;# OBV/OBV_MA  by MerryDay 5/24/20\n#When the OBV (On Balance Volume) crosses OBV’s 20-period moving average, the divergence signal of a trend reversal is confirmed. While research indicates a default of 20 is norm, I have been using a 34 period.  The difference is slight.\n# If the OBV is greater than the OBV ma then a green cloud appears under the OBV.\n\ndeclare lower;\ninput length = 20; #default = 20\ninput price = close;\n\nplot OBV = TotalSum(Sign(price - price[1]) * volume);\nplot OBVma = Average(OBV, length);\n\ndef aboveMA   = OBV &gt;= OBVma ;\n\n\n## LIPSTICK ##\nDefineGlobalColor(\&quot;LabelGreen\&quot;, CreateColor(0, 190, 0)) ;\nDefineGlobalColor(\&quot;PaleGreen\&quot;, CreateColor(180, 220, 180)) ;\nDefineGlobalColor(\&quot;PaleRed\&quot;, CreateColor (220, 200, 200)) ;\nDefineGlobalColor(\&quot;DullGold\&quot;, CreateColor(220, 220, 128)) ;\nDefineGlobalColor(\&quot;BlueJeans\&quot;, CreateColor(0, 150, 200)) ;\nOBVma.SetDefaultColor(GlobalColor(\&quot;DullGold\&quot;));\nOBVma.SetLineWeight(3);\nOBVma.HideBubble();\nOBVma.HideTitle();\n\nOBV.SetPaintingStrategy(PaintingStrategy.LINE_VS_TRIANGLES);\nOBV.SetLineWeight(2);\nOBV.HideBubble();\nOBV.HideTitle();\nOBV.DefineColor(\&quot;Up\&quot;, GlobalColor(\&quot;LabelGreen\&quot;));\nOBV.DefineColor(\&quot;Weak\&quot;, Color.LIGHT_GRAY);\nOBV.DefineColor(\&quot;Down\&quot;, GlobalColor(\&quot;PaleRed\&quot;));\nOBV.AssignValueColor(if OBV &gt; OBVma  then OBV.Color(\&quot;Up\&quot;) else OBV.Color(\&quot;Down\&quot;));\n\nplot OBVlow = if  OBV crosses below OBVma then 1 else 0;\nOBVlow.hide();\n\nplot crossup = if OBV crosses above OBVma then OBV else double.NaN;\ncrossup.HideBubble() ;\ncrossup.HideTitle() ;\ncrossup.SetPaintingStrategy(PaintingStrategy.TRIANGLES);\ncrossup.SetLineWeight(5);\ncrossup.SetDefaultColor(color.blue) ;\nplot crossdown = if OBV crosses below OBVma then OBV else double.NaN;\ncrossdown.HideBubble() ;\ncrossdown.HideTitle() ;\ncrossdown.SetPaintingStrategy(PaintingStrategy.TRIANGLES);\ncrossdown.SetLineWeight(5);\ncrossdown.SetDefaultColor(color.pink) ;\n\nAddCloud(OBV, OBVma, Color.LIGHT_GREEN, Color.PINK);\n\n#Alert(crosses_above_MA, \&quot;What\'s going to happen?\&quot; + GetSymbol(), Alert.BAR, Sound.bell);\nDefineGlobalColor(\&quot;MyCyan\&quot;, CreateColor(150, 0, 255)) ;\nDefineGlobalColor(\&quot;Sell\&quot;, CreateColor(255, 150, 0)) ;\n\n\n# End of OBV/OBV_MA &quot;,name=&quot;_5a6a53b8_41ce_3ef6_a10e_07a88a720b77&quot;}){hidden=&lt;T,inputsMap:TreeMap18{^(&quot;price&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap18})}),^(#%4.SubgraphId(&quot;Subgraph41&quot;),#%4.SubgraphStorableModel{height=81,storableIndicators.+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence:ScriptEssence1{body=&quot;#\n\ndeclare lower;\n\n\n\n###############################\ninput showlable=yes;\n\ninput pricePpm1 = close;\ninput pricePpm2 = close;\ninput pricePpm3 = close;\ninput ppmiSmooth =3;\ninput averageTypePpmiSmooth = AverageType.simple;\n#input signalPeriod = 1;\ndef lookback = 1;\n\ninput ppm1_length = 10;\ninput ppm2_length = 21;\ninput ppm3_length = 40;\ninput fast_length = 10;\ninput slow_length =21;\ndef displace = 0;\ninput averageTypePpm = AverageType.simple;\ninput averageTypefast = AverageType.simple;\ninput averageTypeSlow = AverageType.simple;;# AverageType.EXPONENTIAL;\n#input showMovingAvgLable =yes;\n\n\ndef movAvg_ppm1 = MovingAverage(averageTypePpm, pricePpm1, ppm1_length);\n#def sign = MovingAverage(averageTypePpm, movAvg_ppm1[-displace], signalPeriod);\ndef movAvg_ppm2 = MovingAverage(averageTypePpm, pricePpm2, ppm2_length);\ndef movAvg_ppm3 = MovingAverage(averageTypePpm, pricePpm3, ppm3_length);\n\n \n\n\n \n\n#moving averages\n\ndef   ppm1_ =100*( movAvg_ppm1-movAvg_ppm1[lookback])/( movAvg_ppm1); \ndef   ppm2_ =100*( movAvg_ppm2-movAvg_ppm2[lookback])/( movAvg_ppm2); \ndef   ppm3_ =100*( movAvg_ppm3-movAvg_ppm3[lookback])/(movAvg_ppm3); \n#Plot ppm1 =MovingAverage(AverageType.EXPONENTIAL,ppm[-displace], signalPeriod);\n\n\n\nplot ppm1= MovingAverage(averageTypePpmiSmooth,ppm1_,ppmiSmooth);\nplot ppm2=  MovingAverage(averageTypePpmiSmooth,ppm2_,ppmiSmooth);\nplot ppm3=  MovingAverage(averageTypePpmiSmooth,ppm3_,ppmiSmooth);\n\n\n\n\n\n\n\n\n\n\n\n\n#####\n\n\n\n\n\n\n\n#AddLabel(yes, \&quot; ppm1\&quot;, Color.white);\nplot ppm_d1  = MovingAverage(averageTypefast, ppm1[-displace], fast_length);\nplot ppm_d2 = MovingAverage(averageTypefast, ppm1[-displace], slow_length);\n\ninput showPpmDivLable=yes;\n\nAddLabel(showPpmDivLable, \&quot; ppm1= \&quot;+  roundup(ppm1,3), if ppm1&gt; 0 then Color.LIGHT_GREEN else if ppm1&lt; 0 then color.light_red else Color.Light_GRAY);\nAddLabel(showPpmDivLable, \&quot; d1= \&quot;+  roundup(ppm_d1,3),  Color.green);\nAddLabel(showPpmDivLable, \&quot; d2= \&quot;+  roundup(ppm_d2,3),  Color.cyan);\n\n\n\n#plot ppm1_d1 = MovingAverage(averageTypefast, ppm1[-displace], fast_length);\n#plot ppm1_d2 = MovingAverage(averageTypefast, ppm1[-displace], slow_length);\n\nppm1.setdefaultColor(color.light_ORANGE);\nppm2.setdefaultColor(color.violet);\nppm3.setdefaultColor(color.yellow);\n\nppm2.Hide();\nppm3.Hide();\nppm_d1.setdefaultColor(color.green);\nppm_d2.setdefaultColor(color.cyan);\n\n\nAddLabel(showlable, \&quot;  \&quot;+ ppm1_length+ \&quot;MAvg\&quot; ,ppm1.TakeValueColor ());\nAddLabel(showlable,  astext(movAvg_ppm1), if ppm1&lt; close then Color.LIGHT_GREEN else if ppm1&gt; close then color.light_red else Color.Light_GRAY);\ndef maDif= close- movAvg_ppm1;\n\nAddLabel(showlable and maDif&gt;0, \&quot; +\&quot;+astext(maDif),  Color.LIGHT_GREEN );\nAddLabel(showlable and maDif&lt;=0, \&quot; \&quot;+astext(maDif),  if maDif&lt; 0 then color.LIGHT_red else Color.LIGHT_GRAY);\n\nAddLabel(showlable, \&quot;  \&quot;+ ppm2_length+ \&quot;MAvg\&quot; ,ppm2.TakeValueColor ());\nAddLabel(showlable,  astext(movAvg_ppm2), if ppm2&lt; close then Color.LIGHT_GREEN else if ppm2&gt; close then color.light_red else Color.Light_GRAY);\n\n\nAddLabel(showlable, \&quot;  \&quot;+ ppm3_length+ \&quot;MAvg\&quot; ,ppm3.TakeValueColor ());\nAddLabel(showlable,  astext(movAvg_ppm3), if ppm3&lt; close then Color.LIGHT_GREEN else if ppm3&gt; close then color.light_red else Color.Light_GRAY);\n\n#AddLabel(showlable, \&quot;MA \&quot; + ppm_length + \&quot;=\&quot;+ astext(movAvg_ppm1), if movAvg_ppm1 &gt; close  then Color.RED else if movAvg_ppm1 &lt; close then  Color.GREEN else Color.GRAY);\n\nAddLabel(yes, \&quot; ppm1= \&quot;+  roundup(ppm1,3), if ppm1&gt; 0 then Color.LIGHT_GREEN else if ppm1&lt; 0 then color.light_red else Color.Light_GRAY);\nAddLabel(yes, \&quot; ppm2= \&quot; +   roundup(ppm2,3), if ppm2&gt; 0 then Color.LIGHT_GREEN else if ppm2&lt; 0 then color.light_red else Color.Light_GRAY);\nAddLabel(yes, \&quot; ppm3= \&quot;+  roundup(ppm3,3), if ppm3&gt; 0 then Color.LIGHT_GREEN else if ppm3&lt; 0 then color.light_red else Color.Light_GRAY);\n\n\n##################################\n\n&quot;,name=&quot;_41afd57b_6e78_4ddc_afbf_2d19525412ae&quot;}){inputsMap:TreeMap19{^(&quot;ppmiSmooth&quot;,@Integer2),^(&quot;pricePpm1&quot;,&quot;CLOSE&quot;),^(&quot;pricePpm2&quot;,&quot;CLOSE&quot;),^(&quot;pricePpm3&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap19})}),^(#%4.SubgraphId(&quot;Subgraph43&quot;),#%4.SubgraphStorableModel{height=96,storableIndicators.+(!%5.CompiledStudy.resolveStudy(@ScriptEssence1){hidden=&lt;T,inputsMap:TreeMap20{^(&quot;averageTypePpmiSmooth&quot;,&quot;HULL&quot;),^(&quot;ppmiSmooth&quot;,@Integer0),^(&quot;pricePpm1&quot;,&quot;CLOSE&quot;),^(&quot;pricePpm2&quot;,&quot;CLOSE&quot;),^(&quot;pricePpm3&quot;,&quot;CLOSE&quot;),^(&quot;showlable&quot;,&lt;F)},inputsMap=@TreeMap20})}),^(#%4.SubgraphId(&quot;Subgraph45&quot;),#%4.SubgraphStorableModel{height=81,storableIndicators.+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;#\n\ndeclare lower;\n\n\n\n###############################\ninput showlable=yes;\n\ninput pricePpm1 = close;\ninput pricePpm2 = close;\ninput pricePpm3 = close;\ninput ppmiSmooth =3;\ninput averageTypePpmiSmooth = AverageType.simple;\n#input signalPeriod = 1;\ndef lookback = 1;\n\ninput ppm1_length = 10;\ninput ppm2_length = 21;\ninput ppm3_length = 40;\ninput fast_length = 10;\ninput slow_length =21;\ndef displace = 0;\ninput averageTypePpm = AverageType.simple;\ninput averageTypefast = AverageType.simple;\ninput averageTypeSlow = AverageType.simple;;# AverageType.EXPONENTIAL;\n#input showMovingAvgLable =yes;\n\n\ndef movAvg_ppm1 = MovingAverage(averageTypePpm, pricePpm1, ppm1_length);\n#def sign = MovingAverage(averageTypePpm, movAvg_ppm1[-displace], signalPeriod);\ndef movAvg_ppm2 = MovingAverage(averageTypePpm, pricePpm2, ppm2_length);\ndef movAvg_ppm3 = MovingAverage(averageTypePpm, pricePpm3, ppm3_length);\n\n \n\n\n \n\n#moving averages\n\ndef   ppm1_ =100*( movAvg_ppm1-movAvg_ppm1[lookback])/( movAvg_ppm1); \ndef   ppm2_ =100*( movAvg_ppm2-movAvg_ppm2[lookback])/( movAvg_ppm2); \ndef   ppm3_ =100*( movAvg_ppm3-movAvg_ppm3[lookback])/(movAvg_ppm3); \n#Plot ppm1 =MovingAverage(AverageType.EXPONENTIAL,ppm[-displace], signalPeriod);\n\n\n\nplot ppm1= MovingAverage(averageTypePpmiSmooth,ppm1_,ppmiSmooth);\nplot ppm2=  MovingAverage(averageTypePpmiSmooth,ppm2_,ppmiSmooth);\nplot ppm3=  MovingAverage(averageTypePpmiSmooth,ppm3_,ppmiSmooth);\n\n#AddLabel(yes, \&quot; ppm2\&quot;, Color.white);\nplot ppm_d1  = MovingAverage(averageTypefast, ppm2[-displace], fast_length);\nplot ppm_d2 = MovingAverage(averageTypefast, ppm2[-displace], slow_length);\n\ninput showPpmDivLable=yes;\n\nAddLabel(showPpmDivLable, \&quot; ppm2= \&quot;+  roundup(ppm2,3), if ppm2&gt; 0 then Color.LIGHT_GREEN else if ppm2&lt; 0 then color.light_red else Color.Light_GRAY);\nAddLabel(showPpmDivLable, \&quot; d1= \&quot;+  roundup(ppm_d1,3),  Color.green);\nAddLabel(showPpmDivLable, \&quot; d2= \&quot;+  roundup(ppm_d2,3),  Color.cyan);\n\n\n\n#plot ppm1_d1 = MovingAverage(averageTypefast, ppm1[-displace], fast_length);\n#plot ppm1_d2 = MovingAverage(averageTypefast, ppm1[-displace], slow_length);\n\nppm2.setdefaultColor(color.light_ORANGE);\nppm1.setdefaultColor(color.violet);\nppm3.setdefaultColor(color.yellow);\n\nppm1.Hide();\nppm3.Hide();\nppm_d1.setdefaultColor(color.green);\nppm_d2.setdefaultColor(color.cyan);\n\n\nAddLabel(showlable, \&quot;  \&quot;+ ppm1_length+ \&quot;MAvg\&quot; ,ppm1.TakeValueColor ());\nAddLabel(showlable,  astext(movAvg_ppm1), if ppm1&lt; close then Color.LIGHT_GREEN else if ppm1&gt; close then color.light_red else Color.Light_GRAY);\ndef maDif= close- movAvg_ppm1;\n\nAddLabel(showlable and maDif&gt;0, \&quot; +\&quot;+astext(maDif),  Color.LIGHT_GREEN );\nAddLabel(showlable and maDif&lt;=0, \&quot; \&quot;+astext(maDif),  if maDif&lt; 0 then color.LIGHT_red else Color.LIGHT_GRAY);\n\nAddLabel(showlable, \&quot;  \&quot;+ ppm2_length+ \&quot;MAvg\&quot; ,ppm2.TakeValueColor ());\nAddLabel(showlable,  astext(movAvg_ppm2), if ppm2&lt; close then Color.LIGHT_GREEN else if ppm2&gt; close then color.light_red else Color.Light_GRAY);\n\n\nAddLabel(showlable, \&quot;  \&quot;+ ppm3_length+ \&quot;MAvg\&quot; ,ppm3.TakeValueColor ());\nAddLabel(showlable,  astext(movAvg_ppm3), if ppm3&lt; close then Color.LIGHT_GREEN else if ppm3&gt; close then color.light_red else Color.Light_GRAY);\n\n#AddLabel(showlable, \&quot;MA \&quot; + ppm_length + \&quot;=\&quot;+ astext(movAvg_ppm1), if movAvg_ppm1 &gt; close  then Color.RED else if movAvg_ppm1 &lt; close then  Color.GREEN else Color.GRAY);\n\nAddLabel(yes, \&quot; ppm1= \&quot;+  roundup(ppm1,3), if ppm1&gt; 0 then Color.LIGHT_GREEN else if ppm1&lt; 0 then color.light_red else Color.Light_GRAY);\nAddLabel(yes, \&quot; ppm2= \&quot; +   roundup(ppm2,3), if ppm2&gt; 0 then Color.LIGHT_GREEN else if ppm2&lt; 0 then color.light_red else Color.Light_GRAY);\nAddLabel(yes, \&quot; ppm3= \&quot;+  roundup(ppm3,3), if ppm3&gt; 0 then Color.LIGHT_GREEN else if ppm3&lt; 0 then color.light_red else Color.Light_GRAY);\n\n\n##################################\n\n&quot;,name=&quot;_241ab338_5374_4fa4_814b_3fe4a4769fae&quot;}){inputsMap:TreeMap21{^(&quot;ppmiSmooth&quot;,@Integer2),^(&quot;pricePpm1&quot;,&quot;CLOSE&quot;),^(&quot;pricePpm2&quot;,&quot;CLOSE&quot;),^(&quot;pricePpm3&quot;,&quot;CLOSE&quot;),^(&quot;showlable&quot;,&lt;F)},inputsMap=@TreeMap21})}),^(#%4.SubgraphId(&quot;Subgraph47&quot;),#%4.SubgraphStorableModel{height=81,storableIndicators.+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;#\n\ndeclare lower;\n\n\n\n###############################\ninput showMovLable=yes;\ninput showPpmDivLable=yes;\ninput pricePpm1 = close;\ninput pricePpm2 = close;\ninput pricePpm3 = close;\ninput ppmiSmooth =3;\ninput averageTypePpmiSmooth = AverageType.simple;\n#input signalPeriod = 1;\ndef lookback = 1;\n\ninput ppm1_length = 10;\ninput ppm2_length = 21;\ninput ppm3_length = 40;\ninput fast_length = 10;\ninput slow_length =21;\ndef displace = 0;\ninput averageTypePpm = AverageType.simple;\ninput averageTypefast = AverageType.simple;\ninput averageTypeSlow = AverageType.simple;;# AverageType.EXPONENTIAL;\n#input showMovingAvgLable =yes;\n\n\ndef movAvg_ppm1 = MovingAverage(averageTypePpm, pricePpm1, ppm1_length);\n#def sign = MovingAverage(averageTypePpm, movAvg_ppm1[-displace], signalPeriod);\ndef movAvg_ppm2 = MovingAverage(averageTypePpm, pricePpm2, ppm2_length);\ndef movAvg_ppm3 = MovingAverage(averageTypePpm, pricePpm3, ppm3_length);\n\n \n\n\n \n\n#moving averages\n\ndef   ppm1_ =100*( movAvg_ppm1-movAvg_ppm1[lookback])/( movAvg_ppm1); \ndef   ppm2_ =100*( movAvg_ppm2-movAvg_ppm2[lookback])/( movAvg_ppm2); \ndef   ppm3_ =100*( movAvg_ppm3-movAvg_ppm3[lookback])/(movAvg_ppm3); \n#Plot ppm1 =MovingAverage(AverageType.EXPONENTIAL,ppm[-displace], signalPeriod);\n\n\n\nplot ppm1= MovingAverage(averageTypePpmiSmooth,ppm1_,ppmiSmooth);\nplot ppm2=  MovingAverage(averageTypePpmiSmooth,ppm2_,ppmiSmooth);\nplot ppm3=  MovingAverage(averageTypePpmiSmooth,ppm3_,ppmiSmooth);\n\n\n#AddLabel(yes, \&quot; ppm3\&quot;, Color.white);\nplot ppm_d1  = MovingAverage(averageTypefast, ppm3[-displace], fast_length);\nplot ppm_d2 = MovingAverage(averageTypefast, ppm3[-displace], slow_length);\n\n\nAddLabel(showPpmDivLable, \&quot; ppm3= \&quot;+  roundup(ppm3,3), if ppm3&gt; 0 then Color.LIGHT_GREEN else if ppm3&lt; 0 then color.light_red else Color.Light_GRAY);\nAddLabel(showPpmDivLable, \&quot; d1= \&quot;+  roundup(ppm_d1,3),  Color.green);\nAddLabel(showPpmDivLable, \&quot; d2= \&quot;+  roundup(ppm_d2,3),  Color.cyan);\n\n\n#plot ppm1_d1 = MovingAverage(averageTypefast, ppm1[-displace], fast_length);\n#plot ppm1_d2 = MovingAverage(averageTypefast, ppm1[-displace], slow_length);\n\nppm3.setdefaultColor(color.light_ORANGE);\nppm1.setdefaultColor(color.violet);\nppm2.setdefaultColor(color.yellow);\n\nppm1.Hide();\nppm2.Hide();\nppm_d1.setdefaultColor(color.green);\nppm_d2.setdefaultColor(color.cyan);\n\n\nAddLabel(showMovLable, \&quot;  \&quot;+ ppm1_length+ \&quot;MAvg\&quot; ,ppm1.TakeValueColor ());\nAddLabel(showMovLable,  astext(movAvg_ppm1), if ppm1&lt; close then Color.LIGHT_GREEN else if ppm1&gt; close then color.light_red else Color.Light_GRAY);\ndef maDif= close- movAvg_ppm1;\n\nAddLabel(showMovLable and maDif&gt;0, \&quot; +\&quot;+astext(maDif),  Color.LIGHT_GREEN );\nAddLabel(showMovLable and maDif&lt;=0, \&quot; \&quot;+astext(maDif),  if maDif&lt; 0 then color.LIGHT_red else Color.LIGHT_GRAY);\n\nAddLabel(showMovLable, \&quot;  \&quot;+ ppm2_length+ \&quot;MAvg\&quot; ,ppm2.TakeValueColor ());\nAddLabel(showMovLable,  astext(movAvg_ppm2), if ppm2&lt; close then Color.LIGHT_GREEN else if ppm2&gt; close then color.light_red else Color.Light_GRAY);\n\n\nAddLabel(showMovLable, \&quot;  \&quot;+ ppm3_length+ \&quot;MAvg\&quot; ,ppm3.TakeValueColor ());\nAddLabel(showMovLable,  astext(movAvg_ppm3), if ppm3&lt; close then Color.LIGHT_GREEN else if ppm3&gt; close then color.light_red else Color.Light_GRAY);\n\n#AddLabel(showlable, \&quot;MA \&quot; + ppm_length + \&quot;=\&quot;+ astext(movAvg_ppm1), if movAvg_ppm1 &gt; close  then Color.RED else if movAvg_ppm1 &lt; close then  Color.GREEN else Color.GRAY);\n\nAddLabel(yes, \&quot; ppm1= \&quot;+  roundup(ppm1,3), if ppm1&gt; 0 then Color.LIGHT_GREEN else if ppm1&lt; 0 then color.light_red else Color.Light_GRAY);\nAddLabel(yes, \&quot; ppm2= \&quot; +   roundup(ppm2,3), if ppm2&gt; 0 then Color.LIGHT_GREEN else if ppm2&lt; 0 then color.light_red else Color.Light_GRAY);\nAddLabel(yes, \&quot; ppm3= \&quot;+  roundup(ppm3,3), if ppm3&gt; 0 then Color.LIGHT_GREEN else if ppm3&lt; 0 then color.light_red else Color.Light_GRAY);\n\n\n##################################\n\n&quot;,name=&quot;_eabbbfd6_185e_4ece_8538_e1ec527454ae&quot;}){inputsMap:TreeMap22{^(&quot;ppmiSmooth&quot;,@Integer2),^(&quot;pricePpm1&quot;,&quot;CLOSE&quot;),^(&quot;pricePpm2&quot;,&quot;CLOSE&quot;),^(&quot;pricePpm3&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap22})}),^(#%4.SubgraphId(&quot;Subgraph51&quot;),#%4.SubgraphStorableModel{height=171,storableIndicators.+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;declare lower;\ninput priceSmi = hlc3;\ninput price = close;\n\ninput over_bought = 40.0;\ninput over_sold = -40.0;\ninput percentDLength = 4;\ninput percentKLength = 5;\n\ndef min_low = Lowest(low, percentKLength);\ndef max_high = Highest(high, percentKLength);\ndef rel_diff = priceSmi - (max_high + min_low) / 2;\ndef diff = max_high - min_low;\n\ndef avgrel = ExpAverage(ExpAverage(rel_diff, percentDLength), percentDLength);\ndef avgdiff = ExpAverage(ExpAverage(diff, percentDLength), percentDLength);\n\nplot SMI = if avgdiff != 0 then avgrel / (avgdiff / 2) * 100 else 0;\nSMI.SetDefaultColor(GetColor(1));\n\nplot AvgSMI = ExpAverage(SMI, percentDLength);\nAvgSMI.SetDefaultColor(Color.CYAN);\nplot z = 0;\nz.SetStyle(Curve.SHORT_DASH);\nz.SetDefaultColor(Color.YELLOW);\n\nplot overbought = over_bought;\noverbought.SetDefaultColor(GetColor(5));\n\nplot oversold = over_sold;\noversold.SetDefaultColor(GetColor(5));\n\ninput Buyth=-40;\n\ninput thCondition = {default \&quot;blw\&quot; , \&quot;abv\&quot;};\ndef cond;\ndef Na = Double.Nan;\n\nswitch (thCondition)\n{\n case blw: \n    cond = 1;\ncase abv :\n   cond = 0;\n}\nplot buySmi;\nplot sellsmi;\n\nif cond \n{\n buySmi = if SMI crosses above AvgSMI and SMI &lt;Buyth and SMI&lt;over_bought then SMI* 0.996 else Na;\n#sell = if SMI crosses below AvgSMI and SMI &gt;Sth and SMI&lt;80 then 1 else 0;\n}\nelse{\n buySmi = if SMI crosses above AvgSMI and SMI &gt;Buyth and SMI&lt;60 then Smi* 0.996 else na;\n\n\n}\n\n\n\nsellSmi = if SMI crosses below AvgSMI and SMI &gt;60 and SMI&lt;80 then smi* 1.004 else na;\n\nSellSmi.setpaintingStrategy(PaintingStrategy.ARROW_down);\n\nsellSmi.setDefaultColor(color.pink);\nBuySmi.setpaintingStrategy(PaintingStrategy.ARROW_up);\n\nBuySmi.setDefaultColor(color.yellow);\nBuySMI.SetLineWeight(3);\nSellSMI.SetLineWeight(3);\n\n\n#AddCloud(-100, over_sold, Color.RED, Color.GREEN);\n#AddCloud(over_bought, 100, Color.GREEN, Color.RED);\n\n#####\ndef cldH = if SMI &gt;= overbought then SMI else overbought;\nAddCloud(cldH, overbought, Color.GREEN, Color.GREEN);\n\ndef cldL = if SMI &lt; oversold then SMI else oversold;\nAddCloud(cldL, oversold, Color.RED, Color.RED);\noverbought.SetDefaultColor(GetColor(7));\noversold.SetDefaultColor(GetColor(7));\nSMI.SetLineWeight(1);\nAvgSMI.SetLineWeight(3);\noverbought.SetStyle(Curve.SHORT_DASH);\noversold.SetStyle(Curve.SHORT_DASH);\n\n####\n\n\n####$$$$$$$$\n\n\ninput priceSlm = close;\n\ninput superFastLength = 8;\n\ninput fastLengthSlm = 13;\n\ninput slowLengthSlm = 21;\n\ninput displaceSlm = 0;\n\n\ninput averageTypeSlm = AverageType.EXPONENTIAL;\n\ndef mov_avg8 = MovingAverage(averageTypeSlm, priceSlm[-displaceSlm], superFastLength);\n\ndef mov_avg13 = MovingAverage(averageTypeSlm, priceSlm[-displaceSlm], fastLengthSlm);\n\ndef mov_avg21 = MovingAverage(averageTypeSlm, priceSlm[-displaceSlm], slowLengthSlm);\n \n#moving averages\n\ndef Superfast = mov_avg8;\n\ndef Fast = mov_avg13;\n\ndef Slow = mov_avg21;\n\n\ndef buy = mov_avg8 &gt; mov_avg13 and mov_avg13 &gt; mov_avg21 and low &gt; mov_avg8;\n\ndef stopbuy = mov_avg8 &lt;= mov_avg13;\n\ndef buynow = !buy[1] and buy;\n\ndef buysignal = CompoundValue(1, if buynow and !stopbuy then 1 else if buysignal[1] == 1 and stopbuy then 0 else buysignal[1], 0);\n\n\ndef Buy_Signal = buysignal[1] == 0 and buysignal == 1;\n\ndef Momentum_Down = buysignal[1] == 1 and buysignal == 0;\n\n\ndef sell = mov_avg8 &lt; mov_avg13 and mov_avg13 &lt; mov_avg21 and high &lt; mov_avg8;\n\ndef stopsell = mov_avg8 &gt;= mov_avg13;\n\ndef sellnow = !sell[1] and sell;\n\ndef sellsignal = CompoundValue(1, if sellnow and !stopsell then 1 else if sellsignal[1] == 1 and stopsell then 0 else sellsignal[1], 0);\n\n\ndef Sell_Signal = sellsignal[1] == 0 and sellsignal;\n\ndef Momentum_Up = sellsignal[1] == 1 and sellsignal == 0;\n \n# when using this as a custom scan, change the word plot to def\n# then remove the \'#\' from in front of one of the \&quot;plot Scan\&quot; statements below\n########\n\ninput length = 20;\ninput priceHMA = close;\n\ndef HMA = MovingAverage(AverageType.HULL, priceHMA, length);\ndef HMA_Up =  HMA &gt; HMA[1];\ndef HMA_Down = ! HMA_Up;\n\n###############\n\n#def Colorbars1 = if buysignal == 1 then 1 else if sellsignal == 1 then 2 else if buysignal == 0 or sellsignal == 0 then 3 else 0;\n\n\n\nAvgSMI.DefineColor(\&quot;Buy\&quot;, Color.DARK_GREEN);\n\n\nAvgSMI.DefineColor(\&quot;Sell\&quot;, Color.RED);\n\nAvgSMI.DefineColor(\&quot;Neutral\&quot;, Color.PLUM);\n#RSI.DefineColor(\&quot;NeutralDown\&quot;, Color.orange);\nAvgSMI.DefineColor(\&quot;HullMA_up\&quot;, Color.BLUE);\n\nAvgSMI.DefineColor(\&quot;HullMA_down\&quot;, Color.ORANGE);\n\nAvgSMI.AssignValueColor(if buysignal and HMA_Up then AvgSMI.Color(\&quot;Buy\&quot;) else if buysignal and !HMA_Up then AvgSMI.Color(\&quot;HullMA_down\&quot;) else if sellsignal and HMA_Down  then AvgSMI.Color(\&quot;Sell\&quot;) else  if sellsignal and !HMA_Down  then AvgSMI.Color(\&quot;HullMA_up\&quot;) else  AvgSMI.Color(\&quot;neutral\&quot;));\n;#\n# if Momentum_Up then  RSI.color(\&quot;neutralUp\&quot;) else  RSI.color(\&quot;neutraldown\&quot;));\n\n\n\n\n\n####$$$$$$$$$$$$$$$$\n###############\n\n\n\n#plot UpSignal = if (buysignal and SMI crosses above AvgSMI-3 and SMI &lt;40) then SMI-3 else Double.NaN;\n\nplot UpSignal = if ((buysignal or Momentum_Up) and SMI crosses above AvgSMI ) then SMI - 3 else Double.NaN;\nplot DownSignal = if (sellsignal and SMI crosses below AvgSMI + 3 and SMI &gt; over_bought) then SMI + 3 else Double.NaN;\ninput showBreakoutSignals = yes;\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\n\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\n\n\n\n\n\n######$$$$\n\n\n#RSI\ninput overBoughtRsi = 75;\ninput overSoldRsi = 25;\ninput rsiLength = 14;\ninput rsiPrice = close;\ninput rsi_th = 42;\ndef rsi_val = reference RSI(length = rsiLength, price = rsiPrice );\nplot rsi_val_normalized = rsi_val - 50;\n####\n\n\n\nAddLabel(yes, \&quot;RSI = \&quot; + rsi_val , if rsi_val &gt; overBoughtRsi  then Color.RED else if rsi_val &lt; overSoldRsi then  Color.GREEN else Color.GRAY);\n##########\n#########################RSI\n\n\n\n\n\nrsi_val_normalized.DefineColor(\&quot;OverBought\&quot;, Color.LIGHT_RED);\nrsi_val_normalized.DefineColor(\&quot;Normal\&quot;, GetColor(7));\nrsi_val_normalized.DefineColor(\&quot;OverSold\&quot;, Color.LIGHT_GREEN);\nrsi_val_normalized.DefineColor(\&quot;Below50\&quot;, Color.CYAN);\nrsi_val_normalized.DefineColor(\&quot;Above50\&quot;, Color.PINK);\n\nrsi_val_normalized.AssignValueColor(if rsi_val &gt;= overBoughtRsi then rsi_val_normalized.Color(\&quot;OverBought\&quot;) else if rsi_val &lt;= overSoldRsi then rsi_val_normalized.Color(\&quot;OverSold\&quot;) else if (rsi_val &gt; overSoldRsi and rsi_val &lt; rsi_th) then rsi_val_normalized.Color(\&quot;Below50\&quot;) else if (rsi_val &lt; overBoughtRsi and rsi_val &gt; rsi_th) then rsi_val_normalized.Color(\&quot;Above50\&quot;) else  rsi_val_normalized.Color(\&quot;Normal\&quot;)) ;\n\n\n\n\n\n#########\ndef ImpVol = imp_volatility();\n\nAddLabel(yes, \&quot;iV= \&quot; + ImpVol, Color.GRAY);\n\n#trend reversal\ndef y = rsi_val ;\ninput riReversLength = 2;\ninput lookBack = 2;\n\n\ndef rsi_expAvg = ExpAverage(rsi_val, riReversLength);\n\n#trend reversal\ndef overBoughtReversal = if ((rsi_expAvg &gt; overBoughtRsi)within 2 bar) and  (rsi_expAvg crosses above rsi_val) then price else 0;# if (rsi_expAvg &gt; OverBought and  rsi_expAvg crosses above rsi_val  within 3 bar ) then 40 else 0;\ndef oversoldRevesal = if ((rsi_expAvg &lt; overSoldRsi)within 2 bar) and  (rsi_expAvg crosses below rsi_val within 2 bar) then price else 0;\n\n##############\n########!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n#vwap vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\n\n#####^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n#MACD\n\ninput fastLength = 12;\ninput slowLength = 26;\ninput MACDLength = 9;\ninput displace = 0;\ndef fastAvg = Sum(volume * price, fastLength) / Sum(volume, fastLength);\ndef slowAvg = Sum(volume * price, slowLength) / Sum(volume, slowLength);\ndef Value = fastAvg - slowAvg;\ndef Avg = ExpAverage(Value, MACDLength);\ndef MACD_Diff  = Value - Avg;\n#def ZeroLine = 0;\n\ninput def_cond = no;\ndef MACD_cond_logic = if (def_cond) then MACD_Diff &lt;= 0 else yes;\n\n\n#MACD Pivot reversal\n#input FilterLength=3;\n######################\n#def MACDV_Diff_expAvg = ExpAverage(MACD_Diff, FilterLength);\n#plot oversoldRevesalMACDV =if ((Diff_MACDV &lt; MacdZeroLine)within lookBack bar) and  ( Diff_MACDV crosses above   MACDV_Diff_expAvg within lookBack bar)and Diff_MACDV &gt; Diff_MACDV[1] then 1 else 0;# if (MACDV_Diff_expAvg &gt; OverBought and  MACDV_Diff_expAvg crosses above rsi_val  within 3 bar ) then 40 else 0;\n#plot overBoughtReversalMACDV = if ((Diff_MACDV &gt; MacdZeroLine)within lookBack bar) and  (MACDV_Diff_expAvg crosses above  Diff_MACDV  within lookBack bar)  and Diff_MACDV &lt; Diff_MACDV[1] and Diff_MACDV&gt;0 then 1 else 0;\n\n\n#trend Pivot reversal\ndef twoBarPivotMACD_Buy =  MACD_Diff &gt; MACD_Diff[1] and MACD_Diff[1] &gt; MACD_Diff[2] and MACD_Diff[2] &lt; MACD_Diff[3] and MACD_Diff[3] &lt; MACD_Diff [4];\ndef twoBarPivotMACD_Sell = MACD_Diff &lt; MACD_Diff[1] and MACD_Diff[1] &lt; MACD_Diff[2] and MACD_Diff[2] &gt; MACD_Diff[3] and MACD_Diff[3] &gt; MACD_Diff [4];\n###################\n\n\ndef uptrend = if price &gt; price[1] and price[1] &gt;= price[2] then 1 else 0;\n\n#####################################-----------------\n\n\n\ndef SMI_Buy_Signal = if  (AvgSMI crosses above overbought  within lookBack bar) and SMI &gt;  AvgSMI and (rsi_val &gt; overSoldRsi and rsi_val &lt; overBoughtRsi + 10 ) and (uptrend) then 1 else 0;\n\n\nplot buy2 = SMI_Buy_Signal;\n\n#def  buySvix_Signal = if ( MACD_cond_logic  and  EMA_condition and  oversoldRevesal  and buySvix &lt; Zeroline - 10 ) then 1 else 0;\n#plot buy3 = buySvix_Signal;\n\n\n\n\n\n\ndef SMI_Sell_Signal = if ( (SMI crosses below AvgSMI within lookBack bar) and (overBoughtReversal)) then 1 else 0;\n#def sellSignal2 = if ((rsi_val  &gt; overBoughtRsi within 3 bar) and (smi crosses below AvgSMI within 3 bar)) then 1 else 0;\n\n\nplot sell2 = SMI_Sell_Signal;\n\n#######\n\n#def FVE_buySignal = conVwapBuy and oversoldRevesal and pFVE_Bull  and MACD_cond_logic ;# and Diff &gt;= 0;\n#def sig_buy = pFVE_Bull and Diff &gt;= 0;\n#plot buy4 = FVE_buySignal ;\n\n\n#def FVE_sellSignal = overBoughtReversal and pFVE_Bear ;\n#plot sell4 = FVE_sellSignal;\nplot buy5 = twoBarPivotMACD_Buy and oversoldRevesal;\nplot sell5 = twoBarPivotMACD_Sell and overBoughtReversal;\n\n####\n#def buySignal2 = if (oversoldRevesal  and buythedip2 &lt; Zeroline ) then 1 else 0;\n\n#def buySignal3 = if ( oversoldRevesal  and buythedip3 &lt; Zeroline - 10 ) then 1 else 0;\n#plot buy3 = buySignal3;\ninput bubble = no;\nAddChartBubble(bubble and buy2 == 1, buy2, \&quot;B2SMI= \&quot; +  low[1] + \&quot; rsi \&quot; + rsi_val + \&quot; w \&quot; + vwap[1], Color.LIGHT_ORANGE, no);\n#AddChartBubble(buy3 == 1, buy3,  \&quot;B3Svix= \&quot; + price + \&quot; rsi \&quot; + rsi_val, Color.LIGHT_GRAY, no);\n#AddChartBubble(buy4 == 1, buy4,  \&quot;B4FVE= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.YELLOW, no);\nAddChartBubble(bubble and buy5 == 1, buy5,  \&quot;B5Macd= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.CYAN, no);\n\n#AddChartBubble(sell1 == 1, sell1, \&quot;S1STR= \&quot; + price + \&quot; rsi \&quot; + rsi_val, Color.LIGHT_RED, no);#Buy the Dip\n\nAddChartBubble(bubble and sell2 == 1, sell2, \&quot;S2SMI= \&quot; + price + \&quot; rsi \&quot; + rsi_val, Color.PINK, no);#Buy the Dip\n#AddChartBubble(sell4 == 1, sell4, \&quot;S4FVE= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.VIOLET, no);#Buy the Dip\nAddChartBubble(bubble and sell5 == 1, sell5, \&quot;S5Macd= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.BLUE, no);#Buy the Dip\n#AddChartBubble(oversoldRevesal , close, rsi_val, Color.blue, no);#Buy the Dip\n\ndef o = open;\ndef c = close;\ndef h = high;\ndef l = low;\n\nplot d1 = ((h - l) / o) * 100;\nplot d2 = ((h - l) / (c - o)) * 1;\nplot d = ((c - c[1]) / c[1]) * 100;\nd1.Hide();\nd2.Hide();\nd.Hide();\n\n\ninput vfiLength = 130;\ninput averageLength = 100;\ninput trendQualityLength = 63;\ninput maxStiffness = 7;\ninput marketIndex = \&quot;SPY\&quot;;\ninput weightForMoneyFlow = 1.0;\ninput weightForTradingAboveAverage = 1.0;\ninput weightForUptrend = 1.0;\ninput weightForTrendQuality = 1.0;\ninput weightForMarketDirection = 2.0;\ninput showLabel = No;\n\ndef vfi = reference VolumeFlowIndicator(length = vfiLength, \&quot;max volume cut off\&quot; = 2.5);\ndef sma = Average(close, averageLength);\ndef ema = ExpAverage(close(marketIndex), averageLength);\ndef stiffness = Sum(close &lt; sma, trendQualityLength);\n\ndef Score;\ndef MoneyFlow = vfi &gt; 0;\ndef TradingAboveAverage = close &gt; sma;\ndef Uptrend1 = sma &gt; sma[4];\ndef TrendQuality = stiffness &lt;= maxStiffness;\ndef MarketDirection = ema &gt;= ema[2];\n\nScore = weightForMoneyFlow * MoneyFlow + weightForTradingAboveAverage * TradingAboveAverage + weightForUptrend * uptrend + weightForTrendQuality * TrendQuality + weightForMarketDirection * MarketDirection;\n\n\nAddLabel(showLabel and MoneyFlow, \&quot;Money flow\&quot;, GetColor(2));\nAddLabel(showLabel and TradingAboveAverage, \&quot;Trading above average\&quot;, GetColor(3));\nAddLabel(showLabel and Uptrend1, \&quot;Uptrend\&quot;, GetColor(4));\nAddLabel(showLabel and TrendQuality, \&quot;Trend quality\&quot;, GetColor(5));\nAddLabel(showLabel and TrendQuality, \&quot;Trend quality\&quot;, GetColor(5));\nAddLabel(showLabel and MarketDirection, \&quot;Market direction\&quot;, GetColor(6));\nAddLabel(showLabel , \&quot;Market score \&quot; + Score, GetColor(7));&quot;,name=&quot;_7662dae8_fa6f_4a07_aa35_2ec04cb46236&quot;}){hidden=&lt;T,inputsMap:TreeMap23{^(&quot;price&quot;,&quot;CLOSE&quot;),^(&quot;priceSlm&quot;,&quot;CLOSE&quot;),^(&quot;rsiPrice&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap23})}),^(#%4.SubgraphId(&quot;Subgraph53&quot;),#%4.SubgraphStorableModel{height=289,storableIndicators.+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;plot Data = close;#Created by Buy Low and given permission to share\n#Renamed SMI Trigger System by Hguru\n#IronRod Lower (may2015)- hull smoothed SMI with AwsomeOscillator histogram\n#  ribbonStudy added- based on distance between midprice and ema(20)\n# This is the smi-based lower Ive been using for quite a while:  I look for red on red and green on green for trading, where for example both the cloud is red and the smi dashed line is red.  Most reliable and easy to read signals Ive found.\n\n#Look for the Dashed lines to turn color and Avg line to cross the Dash line for an entry but with more risk, next entry when avg line and dashed color line  crosses the 40 line. Next and probably the best risk is when the avg line and dashed line cross the zero line and Dashed line and cloud are the same color. I use this with a MACD crossover arrow setting at 5,13,4 or 5,13,6 or 3,13,6\n\n#Not 100% on the ADX vertical line and histogram this might need to be adjusted to match a normal ADX line. The ADX vertical line can be turned off in the edit study. The hisotgram can be hidden as well.\n\n#Use with the Upper matching MP_SMIandVerticalLineWarning System  here&gt;&gt;&gt;  http://tos.mx/mDvxaX\n\n#use setting gridsize .10 for/CL for tick charts and lower agg time frames and 1.0 for 1 hour and Daily.\n\ndeclare lower;\n#SMI engine\ninput gridsize = 1.0;\ninput aoscale = 1;\ninput smiscale = 100;\ninput audio = yes;\ninput label = yes;\ninput smilimit = 40.0;\ninput adxvline = yes;\n\ndef percentDLength = 13;\ndef percentKLength = 21;\ndef smihull = 5;\ndef anglescalingfactor = 1 / gridsize;\n\ndef min_low = Lowest(low, percentKLength);\ndef max_high = Highest(high, percentKLength);\ndef rel_diff = close - (max_high + min_low) / 2;\ndef diffx = max_high - min_low;\n\ndef avgrel = ExpAverage(ExpAverage(rel_diff, percentDLength), percentDLength);\ndef avgdiff = ExpAverage(ExpAverage(diffx, percentDLength), percentDLength);\n#plot SMI =  if avgdiff != 0 then avgrel / (avgdiff / 2) * smiscale else 0;\nplot SMI = ExpAverage( if avgdiff != 0 then avgrel / (avgdiff / 2) * smiscale else 0, 3);\n#smi.setDefaultColor(getColor(1));\nSMI.DefineColor(\&quot;Up\&quot;, Color.DARK_GREEN);\nSMI.DefineColor(\&quot;Down\&quot;, Color.DOWNTICK);\nSMI.DefineColor(\&quot;flat\&quot;, Color.GRAY);\nSMI.AssignValueColor(if SMI &gt;= SMI[1] then SMI.Color(\&quot;up\&quot;) else SMI.Color(\&quot;down\&quot;));\nSMI.SetLineWeight(4);\nSMI.SetStyle(Curve.SHORT_DASH);\n\nplot SMI1 = if avgdiff != 0 then avgrel / (avgdiff / 2) * smiscale else 0;\nSMI1.SetDefaultColor(Color.GRAY);\n\nplot upper = smilimit;\nupper.SetDefaultColor(Color.BLUE);\n\nplot lower = -smilimit;\nlower.SetDefaultColor(Color.BLUE);\n\n\n\nplot Zero = 0;\nZero.SetDefaultColor(Color.DARK_GRAY);\n\n#AddCloud(SMI, smilimit, Color.GREEN, Color.LIGHT_GRAY);\n#AddCloud(-smilimit, SMI, Color.RED, Color.LIGHT_GRAY);\nAddCloud(SMI, 0, Color.LIGHT_GREEN, CreateColor(255, 50, 50));\n\nAlert(audio and SMI crosses above 0, \&quot;SMI Long\&quot;,  Alert.BAR, Sound.Ring);\nAlert(audio and SMI crosses below 0, \&quot;SMI Short\&quot;,  Alert.BAR, Sound.Ring);\nAlert(audio and SMI crosses smilimit, \&quot;\&quot;, Alert.BAR, Sound.Bell);\nupper.SetDefaultColor(Color.RED);\n#upper.SetStyle(Curve.SHORT_DASH);\nlower.SetDefaultColor(Color.UPTICK);\n#lower.SetStyle(Curve.SHORT_DASH);\n\n#AddCloud(diff, SMI, Color.DOWNTICK, Color.UPTICK);\nAddLabel(label and yes, \&quot;Dashed= SMI, cloud w/limit; Histogram = mAwesomeOscillator\&quot; , Color.BLUE);\n\n#adx histogram\n\ninput length = 14;#5;\ninput averageType = AverageType.WILDERS;\n\nplot ADX = (DMI(length, averageType).ADX) - 18;\nADX.SetPaintingStrategy(PaintingStrategy.LINE);\nADX.SetLineWeight(1);\nADX.DefineColor(\&quot;Up\&quot;, Color.BLUE);\nADX.DefineColor(\&quot;Down\&quot;, Color.DARK_ORANGE);\nADX.AssignValueColor(\n      if ADX &gt;= ADX[1] then ADX.Color(\&quot;up\&quot;)\nelse ADX.Color(\&quot;down\&quot;));\nplot adxcaut = 20;\nadxcaut.SetDefaultColor(Color.DARK_ORANGE);\n\nAddVerticalLine (adxvline and ADX &gt;= 1 and ADX &lt; ADX[1] and ADX[1] &gt; ADX[2], \&quot;mADX\&quot;, Color.BLUE);\n#alert(ADX1 &gt;= 1 and ADX1 &lt; ADX1[1] and ADX1[1] &gt; ADX1[2], alert.bar, sound.bell);&quot;,name=&quot;_cb18973f_9434_3c5b_adec_fac0de14f50d&quot;}){alerts:LocalAlertArray2,alerts=@LocalAlertArray2,hidden=&lt;T})}),^(#%4.SubgraphId(&quot;Subgraph55&quot;),#%4.SubgraphStorableModel{height=81,storableIndicators.+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;\ndeclare lower; \ninput price = close;\ninput displace = 0;\ninput length = 20;\ninput Num_Dev_Dn = -2.0;\ninput Num_Dev_up = 2.0;\ninput averageType = AverageType.Simple;\ninput showCloud= yes;\n\ndef sDev = stdev(data = price[-displace], length = length);\n\nplot MidLine = MovingAverage(averageType, data = price[-displace], length = length);\nplot LowerBand = MidLine + num_Dev_Dn * sDev;\nplot UpperBand = MidLine + num_Dev_Up * sDev;\n\nLowerBand.SetDefaultColor(GetColor(0));\nMidLine.SetDefaultColor(GetColor(1));\nUpperBand.SetDefaultColor(GetColor(5));\n\n#############################\ndef Na = Double.NaN;\n\ndef cloudhigh = If( ShowCloud, UpperBand, Na);\ndef cloudlow  = If(ShowCloud, LowerBand, Na);\n#AddCloud(cloudhigh, cloudlow, Color.GRAY, Color.GRAY);\n\n\nAddCloud(cloudhigh, Midline, Color.Green, Color.light_Green);\nAddCloud(cloudlow, Midline, Color.Red, Color.light_Red);\n\nplot b= (close -lowerBand)/(upperBand-lowerBand);\n####$$$$$$$$\n\n\ninput priceSlm = close;\n\ninput superFastLength = 8;\n\ninput fastLengthSlm = 13;\n\ninput slowLengthSlm = 21;\n\n\n\n\ninput averageTypeSlm = AverageType.EXPONENTIAL;\n\ndef mov_avg8 = MovingAverage(averageTypeSlm, priceSlm[-displace], superFastLength);\n\ndef mov_avg13 = MovingAverage(averageTypeSlm, priceSlm[-displace], fastLengthSlm);\n\ndef mov_avg21 = MovingAverage(averageTypeSlm, priceSlm[-displace], slowLengthSlm);\n \n#moving averages\n\ndef Superfast = mov_avg8;\n\ndef Fast = mov_avg13;\n\ndef Slow = mov_avg21;\n\n\ndef buy = mov_avg8 &gt; mov_avg13 and mov_avg13 &gt; mov_avg21 and low &gt; mov_avg8;\n\ndef stopbuy = mov_avg8 &lt;= mov_avg13;\n\ndef buynow = !buy[1] and buy;\n\ndef buysignal = CompoundValue(1, if buynow and !stopbuy then 1 else if buysignal[1] == 1 and stopbuy then 0 else buysignal[1], 0);\n\n\ndef Buy_Signal = buysignal[1] == 0 and buysignal == 1;\n\ndef Momentum_Down = buysignal[1] == 1 and buysignal == 0;\n\n\ndef sell = mov_avg8 &lt; mov_avg13 and mov_avg13 &lt; mov_avg21 and high &lt; mov_avg8;\n\ndef stopsell = mov_avg8 &gt;= mov_avg13;\n\ndef sellnow = !sell[1] and sell;\n\ndef sellsignal = CompoundValue(1, if sellnow and !stopsell then 1 else if sellsignal[1] == 1 and stopsell then 0 else sellsignal[1], 0);\n\n\ndef Sell_Signal = sellsignal[1] == 0 and sellsignal;\n\ndef Momentum_Up = sellsignal[1] == 1 and sellsignal == 0;\n \n# when using this as a custom scan, change the word plot to def\n# then remove the \'#\' from in front of one of the \&quot;plot Scan\&quot; statements below\ndef Colorbars = if buysignal == 1 then 1 else if sellsignal == 1 then -1 else if buysignal == 0 or sellsignal == 0 then 0 else 0;\n\n# use this first Scan plot for SLM Ribbon Momentum UP\n#plot Scan = if Colorbars == 1 then yes else no;\n\n# use this second Scan plot for SLM Ribbon Momentum DOWN\n#plot Scan = if Colorbars == -1 then yes else no;\n\n\n\n\n\n\n###############\n\ndef Colorbars1 = if buysignal == 1 then 1 else if sellsignal == 1 then 2 else if buysignal == 0 or sellsignal == 0 then 3 else 0;\n\ninput lengthHma = 20;\n\ndef HMA = MovingAverage(AverageType.HULL, price, lengthHma);\ndef HMA_Up=  HMA &gt; HMA[1];\ndef HMA_Down =! HMA_UP;\n\n###############\n\n#def Colorbars1 = if buysignal == 1 then 1 else if sellsignal == 1 then 2 else if buysignal == 0 or sellsignal == 0 then 3 else 0;\n\n\n\nMidLine.definecolor(\&quot;Buy\&quot;, color.dark_green);\n\n\nMidLine.definecolor(\&quot;Sell\&quot;, color.red);\n\nMidLine.definecolor(\&quot;Neutral\&quot;, Color.PLUM);\n#MidLine.definecolor(\&quot;NeutralDown\&quot;, Color.orange);\nMidLine.definecolor(\&quot;HullMA_up\&quot;, color.blue);\n\nMidLine.definecolor(\&quot;HullMA_down\&quot;, color.orange);\n\nMidLine.AssignValueColor(if buysignal and HMA_Up then MidLine.color(\&quot;Buy\&quot;) else if buysignal and !HMA_Up then MidLine.color(\&quot;HullMA_down\&quot;) else if sellsignal and HMA_Down  then MidLine.color(\&quot;Sell\&quot;) else  if sellsignal and !HMA_Down  then MidLine.color(\&quot;HullMA_up\&quot;) else  MidLine.color(\&quot;neutral\&quot;));;#\n\nb.AssignValueColor(if buysignal and HMA_Up then MidLine.color(\&quot;Buy\&quot;) else if buysignal and !HMA_Up then MidLine.color(\&quot;HullMA_down\&quot;) else if sellsignal and HMA_Down  then MidLine.color(\&quot;Sell\&quot;) else  if sellsignal and !HMA_Down  then MidLine.color(\&quot;HullMA_up\&quot;) else  MidLine.color(\&quot;neutral\&quot;));;#\n# if Momentum_Up then  RSI.color(\&quot;neutralUp\&quot;) else  RSI.color(\&quot;neutraldown\&quot;));\n\nplot one =1;\nplot z =0;\nplot half=0.5;\n\n\n\n\n#MidLine.definecolor(\&quot;Buy_Signal_Bars\&quot;, color.dark_green);\n\n#MidLine.definecolor(\&quot;Sell_Signal_Bars\&quot;, color.red);\n\n#MidLine.definecolor(\&quot;NeutralUp\&quot;, color.plum);\n\n#MidLine.definecolor(\&quot;NeutralDown\&quot;, color.orange);\n\n#MidLine.AssignValueColor(if Colorbars1 ==1 then MidLine.color(\&quot;buy_signal_bars\&quot;) else if colorbars1 ==2 then #MidLine.color(\&quot;Sell_Signal_bars\&quot;) else if Momentum_Up then  MidLine.color(\&quot;neutralUp\&quot;) else MidLine.color(\&quot;neutralDown\&quot;) );\n\n\nplot UpSignal = if (buysignal and price crosses above MidLine) then LowerBand else Double.NaN;\nplot DownSignal = if (sellsignal and price crosses below MidLine) then UpperBand else Double.NaN;\ninput showBreakoutSignals =no;\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\n\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\n\n\n\nMidLine.setlineWeight(3);\n\n\n\n\n\n\n######$$$$&quot;,name=&quot;_a508af02_4cde_429d_ba94_3d375dee61fb&quot;}){inputsMap:TreeMap24{^(&quot;lengthHma&quot;,@Integer1),^(&quot;price&quot;,&quot;CLOSE&quot;),^(&quot;priceSlm&quot;,&quot;CLOSE&quot;),^(&quot;showCloud&quot;,&lt;F)},inputsMap=@TreeMap24,plots{0:{hiding=&lt;T},1:{hiding=&lt;T},2:{hiding=&lt;T},6:{color=@CustomColor8}}})}),^(#%4.SubgraphId(&quot;Subgraph57&quot;),#%4.SubgraphStorableModel{height=80,storableIndicators.+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;\ndeclare lower; \n#Intraday Intensity Index\ninput price = close;\ninput displace = 0;\ninput length = 20;\ninput Num_Dev_Dn = -2.0;\ninput Num_Dev_up = 2.0;\ninput averageType = AverageType.Simple;\ninput showCloud= no;\n\ndef sDev = stdev(data = price[-displace], length = length);\n\nplot MidLine = MovingAverage(averageType, data = price[-displace], length = length);\nplot LowerBand = MidLine + num_Dev_Dn * sDev;\nplot UpperBand = MidLine + num_Dev_Up * sDev;\n\nLowerBand.SetDefaultColor(GetColor(0));\nMidLine.SetDefaultColor(GetColor(1));\nUpperBand.SetDefaultColor(GetColor(5));\nlowerband.hide();\nmidline.hide();\nupperBand.hide();\n\n\n#############################\ndef Na = Double.NaN;\n\ndef cloudhigh = If( ShowCloud, UpperBand, Na);\ndef cloudlow  = If(ShowCloud, LowerBand, Na);\n#AddCloud(cloudhigh, cloudlow, Color.GRAY, Color.GRAY);\n\n\nAddCloud(cloudhigh, Midline, Color.Green, Color.light_Green);\nAddCloud(cloudlow, Midline, Color.Red, Color.light_Red);\n\nplot b= (close -lowerBand)/(upperBand-lowerBand);\n####$$$$$$$$\n\n\ninput priceSlm = close;\n\ninput superFastLength = 8;\n\ninput fastLengthSlm = 13;\n\ninput slowLengthSlm = 21;\n\n\n\n\ninput averageTypeSlm = AverageType.EXPONENTIAL;\n\ndef mov_avg8 = MovingAverage(averageTypeSlm, priceSlm[-displace], superFastLength);\n\ndef mov_avg13 = MovingAverage(averageTypeSlm, priceSlm[-displace], fastLengthSlm);\n\ndef mov_avg21 = MovingAverage(averageTypeSlm, priceSlm[-displace], slowLengthSlm);\n \n#moving averages\n\ndef Superfast = mov_avg8;\n\ndef Fast = mov_avg13;\n\ndef Slow = mov_avg21;\n\n\ndef buy = mov_avg8 &gt; mov_avg13 and mov_avg13 &gt; mov_avg21 and low &gt; mov_avg8;\n\ndef stopbuy = mov_avg8 &lt;= mov_avg13;\n\ndef buynow = !buy[1] and buy;\n\ndef buysignal = CompoundValue(1, if buynow and !stopbuy then 1 else if buysignal[1] == 1 and stopbuy then 0 else buysignal[1], 0);\n\n\ndef Buy_Signal = buysignal[1] == 0 and buysignal == 1;\n\ndef Momentum_Down = buysignal[1] == 1 and buysignal == 0;\n\n\ndef sell = mov_avg8 &lt; mov_avg13 and mov_avg13 &lt; mov_avg21 and high &lt; mov_avg8;\n\ndef stopsell = mov_avg8 &gt;= mov_avg13;\n\ndef sellnow = !sell[1] and sell;\n\ndef sellsignal = CompoundValue(1, if sellnow and !stopsell then 1 else if sellsignal[1] == 1 and stopsell then 0 else sellsignal[1], 0);\n\n\ndef Sell_Signal = sellsignal[1] == 0 and sellsignal;\n\ndef Momentum_Up = sellsignal[1] == 1 and sellsignal == 0;\n \n# when using this as a custom scan, change the word plot to def\n# then remove the \'#\' from in front of one of the \&quot;plot Scan\&quot; statements below\ndef Colorbars = if buysignal == 1 then 1 else if sellsignal == 1 then -1 else if buysignal == 0 or sellsignal == 0 then 0 else 0;\n\n# use this first Scan plot for SLM Ribbon Momentum UP\n#plot Scan = if Colorbars == 1 then yes else no;\n\n# use this second Scan plot for SLM Ribbon Momentum DOWN\n#plot Scan = if Colorbars == -1 then yes else no;\n\n\n\n\n\n\n###############\n\ndef Colorbars1 = if buysignal == 1 then 1 else if sellsignal == 1 then 2 else if buysignal == 0 or sellsignal == 0 then 3 else 0;\n\ninput lengthHma = 20;\n\ndef HMA = MovingAverage(AverageType.HULL, price, lengthHma);\ndef HMA_Up=  HMA &gt; HMA[1];\ndef HMA_Down =! HMA_UP;\n\n###############\n\n#def Colorbars1 = if buysignal == 1 then 1 else if sellsignal == 1 then 2 else if buysignal == 0 or sellsignal == 0 then 3 else 0;\n\n\n\nMidLine.definecolor(\&quot;Buy\&quot;, color.dark_green);\n\n\nMidLine.definecolor(\&quot;Sell\&quot;, color.red);\n\nMidLine.definecolor(\&quot;Neutral\&quot;, Color.PLUM);\n#MidLine.definecolor(\&quot;NeutralDown\&quot;, Color.orange);\nMidLine.definecolor(\&quot;HullMA_up\&quot;, color.blue);\n\nMidLine.definecolor(\&quot;HullMA_down\&quot;, color.orange);\n\nMidLine.AssignValueColor(if buysignal and HMA_Up then MidLine.color(\&quot;Buy\&quot;) else if buysignal and !HMA_Up then MidLine.color(\&quot;HullMA_down\&quot;) else if sellsignal and HMA_Down  then MidLine.color(\&quot;Sell\&quot;) else  if sellsignal and !HMA_Down  then MidLine.color(\&quot;HullMA_up\&quot;) else  MidLine.color(\&quot;neutral\&quot;));;#\n\nb.AssignValueColor(if buysignal and HMA_Up then MidLine.color(\&quot;Buy\&quot;) else if buysignal and !HMA_Up then MidLine.color(\&quot;HullMA_down\&quot;) else if sellsignal and HMA_Down  then MidLine.color(\&quot;Sell\&quot;) else  if sellsignal and !HMA_Down  then MidLine.color(\&quot;HullMA_up\&quot;) else  MidLine.color(\&quot;neutral\&quot;));;#\n# if Momentum_Up then  RSI.color(\&quot;neutralUp\&quot;) else  RSI.color(\&quot;neutraldown\&quot;));\n\n# Intraday Intensity Index\n# Assembled by BenTen at useThinkScript.com\n# Converted from https://www.tradingview.com/script/klr607Yi-INTRADAY-INTENSITY-INDEX-IIIX-by-KIVAN%C3%87-fr3762/\n\n\n\ninput length2 = 21;\n#def K1 = (2 * close - high - low) * volume;\ndef K1 = ( close - open) * volume;\n\ndef K2 = if(high != low, high - low, 1);\ndef INT = K1 / K2;\ndef INTSUM = sum(INT, length2);\n\nplot histogram = INTSUM;\nplot a = INT;\n\nhistogram.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);\nhistogram.AssignValueColor(if INTSUM&gt;0 then color.blue else color.red);\na.SetDefaultColor(GetColor(0));\n\n\n\n\n\n\n\n\n\n#MidLine.definecolor(\&quot;Buy_Signal_Bars\&quot;, color.dark_green);\n\n#MidLine.definecolor(\&quot;Sell_Signal_Bars\&quot;, color.red);\n\n#MidLine.definecolor(\&quot;NeutralUp\&quot;, color.plum);\n\n#MidLine.definecolor(\&quot;NeutralDown\&quot;, color.orange);\n\n#MidLine.AssignValueColor(if Colorbars1 ==1 then MidLine.color(\&quot;buy_signal_bars\&quot;) else if colorbars1 ==2 then #MidLine.color(\&quot;Sell_Signal_bars\&quot;) else if Momentum_Up then  MidLine.color(\&quot;neutralUp\&quot;) else MidLine.color(\&quot;neutralDown\&quot;) );\n\n\nplot UpSignal = if (buysignal and price crosses above MidLine) then LowerBand else Double.NaN;\nplot DownSignal = if (sellsignal and price crosses below MidLine) then UpperBand else Double.NaN;\ninput showBreakoutSignals =no;\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\n\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\n\n\n\nMidLine.setlineWeight(3);\n\n\n\n\n\n\n######$$$$&quot;,name=&quot;_b9c241fe_a444_430e_90cb_11c5582e4030&quot;}){hidden=&lt;T,inputsMap:TreeMap25{^(&quot;price&quot;,&quot;CLOSE&quot;),^(&quot;priceSlm&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap25})}),^(#%4.SubgraphId(&quot;Subgraph59&quot;),#%4.SubgraphStorableModel{height=88,storableIndicators.+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;\ndeclare lower; \ninput price = close;\ninput displace = 0;\ninput length = 20;\ninput Num_Dev_Dn = -2.0;\ninput Num_Dev_up = 2.0;\ninput averageType = AverageType.Simple;\ninput showCloud= no;\ninput useATR=no;\ndef sDev = stdev(data = price[-displace], length = length);\n\nplot MidLine = MovingAverage(averageType, data = price[-displace], length = length);\nplot LowerBand = MidLine + num_Dev_Dn * sDev;\nplot UpperBand = MidLine + num_Dev_Up * sDev;\n\nLowerBand.SetDefaultColor(GetColor(0));\nMidLine.SetDefaultColor(GetColor(1));\nUpperBand.SetDefaultColor(GetColor(5));\nlowerband.hide();\nmidline.hide();\nupperBand.hide();\n\n\n#############################\ndef Na = Double.NaN;\n\ndef cloudhigh = If( ShowCloud, UpperBand, Na);\ndef cloudlow  = If(ShowCloud, LowerBand, Na);\n#AddCloud(cloudhigh, cloudlow, Color.GRAY, Color.GRAY);\n\n\nAddCloud(cloudhigh, Midline, Color.Green, Color.light_Green);\nAddCloud(cloudlow, Midline, Color.Red, Color.light_Red);\n\nplot b= (close -lowerBand)/(upperBand-lowerBand);\n\n\n\n####$$$$$$$$\n\n\ninput priceSlm = close;\n\ninput superFastLength = 8;\n\ninput fastLengthSlm = 13;\n\ninput slowLengthSlm = 21;\n\n\n\n\ninput averageTypeSlm = AverageType.EXPONENTIAL;\n\ndef mov_avg8 = MovingAverage(averageTypeSlm, priceSlm[-displace], superFastLength);\n\ndef mov_avg13 = MovingAverage(averageTypeSlm, priceSlm[-displace], fastLengthSlm);\n\ndef mov_avg21 = MovingAverage(averageTypeSlm, priceSlm[-displace], slowLengthSlm);\n \n#moving averages\n\ndef Superfast = mov_avg8;\n\ndef Fast = mov_avg13;\n\ndef Slow = mov_avg21;\n\n\ndef buy = mov_avg8 &gt; mov_avg13 and mov_avg13 &gt; mov_avg21 and low &gt; mov_avg8;\n\ndef stopbuy = mov_avg8 &lt;= mov_avg13;\n\ndef buynow = !buy[1] and buy;\n\ndef buysignal = CompoundValue(1, if buynow and !stopbuy then 1 else if buysignal[1] == 1 and stopbuy then 0 else buysignal[1], 0);\n\n\ndef Buy_Signal = buysignal[1] == 0 and buysignal == 1;\n\ndef Momentum_Down = buysignal[1] == 1 and buysignal == 0;\n\n\ndef sell = mov_avg8 &lt; mov_avg13 and mov_avg13 &lt; mov_avg21 and high &lt; mov_avg8;\n\ndef stopsell = mov_avg8 &gt;= mov_avg13;\n\ndef sellnow = !sell[1] and sell;\n\ndef sellsignal = CompoundValue(1, if sellnow and !stopsell then 1 else if sellsignal[1] == 1 and stopsell then 0 else sellsignal[1], 0);\n\n\ndef Sell_Signal = sellsignal[1] == 0 and sellsignal;\n\ndef Momentum_Up = sellsignal[1] == 1 and sellsignal == 0;\n \n# when using this as a custom scan, change the word plot to def\n# then remove the \'#\' from in front of one of the \&quot;plot Scan\&quot; statements below\ndef Colorbars = if buysignal == 1 then 1 else if sellsignal == 1 then -1 else if buysignal == 0 or sellsignal == 0 then 0 else 0;\n\n# use this first Scan plot for SLM Ribbon Momentum UP\n#plot Scan = if Colorbars == 1 then yes else no;\n\n# use this second Scan plot for SLM Ribbon Momentum DOWN\n#plot Scan = if Colorbars == -1 then yes else no;\n\n\n\n\n\n\n###############\n\ndef Colorbars1 = if buysignal == 1 then 1 else if sellsignal == 1 then 2 else if buysignal == 0 or sellsignal == 0 then 3 else 0;\n\ninput lengthHma = 20;\n\ndef HMA = MovingAverage(AverageType.HULL, price, lengthHma);\ndef HMA_Up=  HMA &gt; HMA[1];\ndef HMA_Down =! HMA_UP;\n\n###############\n\n#def Colorbars1 = if buysignal == 1 then 1 else if sellsignal == 1 then 2 else if buysignal == 0 or sellsignal == 0 then 3 else 0;\n\n\n\nMidLine.definecolor(\&quot;Buy\&quot;, color.dark_green);\n\n\nMidLine.definecolor(\&quot;Sell\&quot;, color.red);\n\nMidLine.definecolor(\&quot;Neutral\&quot;, Color.PLUM);\n#MidLine.definecolor(\&quot;NeutralDown\&quot;, Color.orange);\nMidLine.definecolor(\&quot;HullMA_up\&quot;, color.blue);\n\nMidLine.definecolor(\&quot;HullMA_down\&quot;, color.orange);\n\nMidLine.AssignValueColor(if buysignal and HMA_Up then MidLine.color(\&quot;Buy\&quot;) else if buysignal and !HMA_Up then MidLine.color(\&quot;HullMA_down\&quot;) else if sellsignal and HMA_Down  then MidLine.color(\&quot;Sell\&quot;) else  if sellsignal and !HMA_Down  then MidLine.color(\&quot;HullMA_up\&quot;) else  MidLine.color(\&quot;neutral\&quot;));;#\n\nb.AssignValueColor(if buysignal and HMA_Up then MidLine.color(\&quot;Buy\&quot;) else if buysignal and !HMA_Up then MidLine.color(\&quot;HullMA_down\&quot;) else if sellsignal and HMA_Down  then MidLine.color(\&quot;Sell\&quot;) else  if sellsignal and !HMA_Down  then MidLine.color(\&quot;HullMA_up\&quot;) else  MidLine.color(\&quot;neutral\&quot;));;#\n# if Momentum_Up then  RSI.color(\&quot;neutralUp\&quot;) else  RSI.color(\&quot;neutraldown\&quot;));\n\nplot one =1;\nplot z =0;\nplot half=0.5;\nb.hide();\none.hide();\nhalf.hide();\ninput bWidthLookBack=125;\n\n\n\n\n\ninput lengthAtr = 14;\ninput averageTypeAtr = AverageType.WILDERS;\n\nplot ATR = MovingAverage(averageTypeAtr, TrueRange(high, close, low), lengthAtr);\nATR.SetDefaultColor(GetColor(8));\nATR.hide();\n#plot v_volatility= volume*((2*close-high-low)/(high-low));\nplot BB_bandwidth;\n if (!useATR)\n{\n BB_bandwidth = (upperBand-lowerBand)/(midline);\n}\n else \n{\n BB_bandwidth=(upperBand-lowerBand)/(ATR);\n}\nplot BW_H= highest(BB_bandwidth,bWidthLookBack);\nplot BW_L= lowest(BB_bandwidth,bWidthLookBack);\n\n\n#################!!!!!!!!!!!!!!!!!!!!!!!!!!!!\nplot BuysignalB = if(close crosses above  UpperBand,BB_bandwidth,na)  ;\n\nBuysignalB.DefineColor(\&quot;Above\&quot;, GetColor(1));\nBuysignalB.DefineColor(\&quot;Below\&quot;, GetColor(2));\n#signal.AssignValueColor(if crossingType == CrossingType.above then signal.color(\&quot;Above\&quot;) else signal.color(\&quot;Below\&quot;));\nBuysignalB.AssignValueColor( BuysignalB.color(\&quot;Above\&quot;) );\n\n\n#signal.SetPaintingStrategy(if crossingType == CrossingType.above\n #   then PaintingStrategy.BOOLEAN_ARROW_UP\n  #  else PaintingStrategy.BOOLEAN_ARROW_DOWN);\n\nBuysignalB.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\n\n\n\n\n\n\n##################################!!!!!!!!!!!!!!!!!!!!!!!\n\n\n\n\n\n\nBB_bandwidth.AssignValueColor(if buysignal and HMA_Up then MidLine.color(\&quot;Buy\&quot;) else if buysignal and !HMA_Up then MidLine.color(\&quot;HullMA_down\&quot;) else if sellsignal and HMA_Down  then MidLine.color(\&quot;Sell\&quot;) else  if sellsignal and !HMA_Down  then MidLine.color(\&quot;HullMA_up\&quot;) else  MidLine.color(\&quot;neutral\&quot;));;#\n# if Momentum_Up then  RSI.color(\&quot;neutralUp\&quot;) else  RSI.color(\&quot;neutraldown\&quot;));\n\n#MidLine.definecolor(\&quot;Buy_Signal_Bars\&quot;, color.dark_green);\n\n#MidLine.definecolor(\&quot;Sell_Signal_Bars\&quot;, color.red);\n\n#MidLine.definecolor(\&quot;NeutralUp\&quot;, color.plum);\n\n#MidLine.definecolor(\&quot;NeutralDown\&quot;, color.orange);\n\n#MidLine.AssignValueColor(if Colorbars1 ==1 then MidLine.color(\&quot;buy_signal_bars\&quot;) else if colorbars1 ==2 then #MidLine.color(\&quot;Sell_Signal_bars\&quot;) else if Momentum_Up then  MidLine.color(\&quot;neutralUp\&quot;) else MidLine.color(\&quot;neutralDown\&quot;) );\n\n\nplot UpSignal = if (buysignal and price crosses above MidLine) then LowerBand else Double.NaN;\nplot DownSignal = if (sellsignal and price crosses below MidLine) then UpperBand else Double.NaN;\ninput showBreakoutSignals =no;\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\n\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\n\n\n\nMidLine.setlineWeight(3);\n\n\n\n\n\n\n######$$$$&quot;,name=&quot;_c9bebc7b_c43e_4a5a_90e4_19ba478e5d83&quot;}){hidden=&lt;T,inputsMap:TreeMap26{^(&quot;bWidthLookBack&quot;,50),^(&quot;price&quot;,&quot;CLOSE&quot;),^(&quot;priceSlm&quot;,&quot;CLOSE&quot;),^(&quot;useATR&quot;,@Boolean0)},inputsMap=@TreeMap26})}),^(#%4.SubgraphId(&quot;Subgraph61&quot;),#%4.SubgraphStorableModel{height=108,storableIndicators.+(!%5.CompiledStudy.resolveStudy(@ScriptEssence0){hidden=&lt;T,inputsMap:TreeMap27{^(&quot;price&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap27})}),^(#%4.SubgraphId(&quot;Subgraph77&quot;),#%4.SubgraphStorableModel{height=154,storableIndicators.+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# OBV/OBV_MA  by MerryDay 5/24/20\n#When the OBV (On Balance Volume) crosses OBV’s 20-period moving average, the divergence signal of a trend reversal is confirmed. While research indicates a default of 20 is norm, I have been using a 34 period.  The difference is slight.\n# If the OBV is greater than the OBV ma then a green cloud appears under the OBV.\n\ndeclare lower;\ninput length = 20; #default = 20\ninput length2 = 21;\ninput price = close;\n\n\n\n\n\ndef K1 = ( close - open - low) * volume;\ndef K2 = if(high != low, high - low, 1);\ndef INT = K1 / K2;\ndef INTSUM = sum(INT, length2);\n\nplot OBV = TotalSum(Sign(INT - INT[1]) * volume);\nplot OBVma = Average(OBV, length);\ndef aboveMA   = OBV &gt;= OBVma ;\n\n#plot histogram = INTSUM;\n\n\n## LIPSTICK ##\nDefineGlobalColor(\&quot;LabelGreen\&quot;, CreateColor(0, 190, 0)) ;\nDefineGlobalColor(\&quot;PaleGreen\&quot;, CreateColor(180, 220, 180)) ;\nDefineGlobalColor(\&quot;PaleRed\&quot;, CreateColor (220, 200, 200)) ;\nDefineGlobalColor(\&quot;DullGold\&quot;, CreateColor(220, 220, 128)) ;\nDefineGlobalColor(\&quot;BlueJeans\&quot;, CreateColor(0, 150, 200)) ;\nOBVma.SetDefaultColor(GlobalColor(\&quot;DullGold\&quot;));\nOBVma.SetLineWeight(3);\nOBVma.HideBubble();\nOBVma.HideTitle();\n\nOBV.SetPaintingStrategy(PaintingStrategy.LINE_VS_TRIANGLES);\nOBV.SetLineWeight(2);\nOBV.HideBubble();\nOBV.HideTitle();\nOBV.DefineColor(\&quot;Up\&quot;, GlobalColor(\&quot;LabelGreen\&quot;));\nOBV.DefineColor(\&quot;Weak\&quot;, Color.LIGHT_GRAY);\nOBV.DefineColor(\&quot;Down\&quot;, GlobalColor(\&quot;PaleRed\&quot;));\nOBV.AssignValueColor(if OBV &gt; OBVma  then OBV.Color(\&quot;Up\&quot;) else OBV.Color(\&quot;Down\&quot;));\n\nplot OBVlow = if  OBV crosses below OBVma then 1 else 0;\nOBVlow.hide();\n\nplot crossup = if OBV crosses above OBVma then OBV else double.NaN;\ncrossup.HideBubble() ;\ncrossup.HideTitle() ;\ncrossup.SetPaintingStrategy(PaintingStrategy.TRIANGLES);\ncrossup.SetLineWeight(5);\ncrossup.SetDefaultColor(color.blue) ;\nplot crossdown = if OBV crosses below OBVma then OBV else double.NaN;\ncrossdown.HideBubble() ;\ncrossdown.HideTitle() ;\ncrossdown.SetPaintingStrategy(PaintingStrategy.TRIANGLES);\ncrossdown.SetLineWeight(5);\ncrossdown.SetDefaultColor(color.pink) ;\n\nAddCloud(OBV, OBVma, Color.LIGHT_GREEN, Color.PINK);\n\n#Alert(crosses_above_MA, \&quot;What\'s going to happen?\&quot; + GetSymbol(), Alert.BAR, Sound.bell);\nDefineGlobalColor(\&quot;MyCyan\&quot;, CreateColor(150, 0, 255)) ;\nDefineGlobalColor(\&quot;Sell\&quot;, CreateColor(255, 150, 0)) ;\n\n\n# End of OBV/OBV_MA &quot;,name=&quot;_d493e752_9de1_494d_b2e6_1ebb5a0de209&quot;}){hidden=&lt;T,inputsMap:TreeMap28{^(&quot;price&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap28})})}}" SYMBOL="DCTH" SYMBOL_GROUP="2" VERTICAL="false" VISIBLE="true" WEIGHT="3.506981740064447"/>
            <DASHBOARD SYMBOL="AAPL" SYMBOL_GROUP="2" VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <LEVEL_II SYMBOL="NVDA" SYMBOL_GROUP="2" VERTICAL="false" VISIBLE="false" WEIGHT="1.0">
              <SORTING COLUMN="BID" ORDER="-1"/>
              <SORTING1 COLUMN="ASK" ORDER="1"/>
            </LEVEL_II>
            <LIVE_NEWS SYMBOL="AAPL" SYMBOL_GROUP="2" VERTICAL="false" VISIBLE="false" WEIGHT="1.0">
              <SORTING COLUMN="TIME" ORDER="-1"/>
            </LIVE_NEWS>
            <PHASE_SCORES VERTICAL="false" VISIBLE="false" WEIGHT="2.0"/>
            <TIME_SALES VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <TRADE CONFIGURATION_NAME="SINGLE" ORDER_RULES_SET="STOCK" ORDER_TYPE="LIMIT" OS_AUTO="false" OS_EXPANDED="false" OS_TIF="DAY" QTY="100.0" QTY_STEP="1.0" TEMPLATE="SINGLE" TRADE_BUTTONS="BUY_MKT;SELL_MKT;MULTI_CANCEL;REVERSE;FLAT;SECOND_LINE;QUANTITY;AUTO_SEND;ORDER_SETUP" VISIBLE="false">
              <OCO_STOP>
                <TRG_0 TRG_ENBL="true" TRG_LINK="ASK_BID" TRG_OFFSET_MODE="TICK" TRG_OT="STOP" TRG_SETUP="10.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AA="10.0" AAL="10.0" AAP="10.0" AAPL="10.0" ABG="10.0" ABML="10.0" ACER="10.0" ADMP="10.0" AEG="10.0" AEHL="10.0" AFI="10.0" AJRD="10.0" AKU="10.0" ALEC="10.0" AMC="10.0" AMCR="10.0" AMD="10.0" AMRS="10.0" AMTX="10.0" AMZN="10.0" ANIX="10.0" ANPC="10.0" ANTE="10.0" AP="10.0" APOP="10.0" APTO="10.0" AR="10.0" AREC="10.0" ARES="10.0" ARLO="10.0" ASLEW="10.0" ATHM="10.0" ATIF="10.0" ATNF="10.0" AUY="10.0" AVCO="10.0" AXL="10.0" AZN="10.0" AZRX="10.0" BABA="10.0" BBD="10.0" BBDC="10.0" BFT="10.0" BILI="10.0" BLIN="10.0" BMY="10.0" BOX="10.0" BP="10.0" BRQS="10.0" BSGM="10.0" BURL="10.0" BWAY="10.0" BXRX="10.0" BYFC="10.0" CAKE="10.0" CAL="10.0" CCI="10.0" CCIV="10.0" CCJ="10.0" CCL="10.0" CEQPP="10.0" CHNG="10.0" CHX="10.0" CIDM="10.0" CIIC="10.0" CLBS="10.0" CLDR="10.0" CLEU="10.0" CLSN="10.0" CLVS="10.0" CNNE="10.0" COHN="10.0" COMP="10.0" CPHI="10.0" CPRX="10.0" CRBP="10.0" CRTD="10.0" CSCO="10.0" CTIC="10.0" CUB="10.0" CVX="10.0" DCTH="10.0" DHT="10.0" DIS="10.0" DISCK="10.0" DNN="10.0" DOX="10.0" DPW="10.0" DS="10.0" DSKE="10.0" DTSS="10.0" EARS="10.0" EBS="10.0" EDTK="10.0" EMAN="10.0" ENPH="10.0" ETSY="10.0" EURN="10.0" EVRG="10.0" EW="10.0" EWA="10.0" EXEL="10.0" EYE="10.0" EYES="10.0" FAST="10.0" FB="10.0" FCAC="10.0" FLR="10.0" FLY="10.0" FPRX="10.0" FSLR="10.0" FSR="10.0" FUSE="10.0" FUV="10.0" GEL="10.0" GLOP="10.0" GME="10.0" GMER="10.0" GNCA="10.0" GOCO="10.0" HBI="10.0" HCHC="10.0" HENKY="10.0" HPE="10.0" HPQ="10.0" HPR="10.0" HTBX="10.0" HTHIY="10.0" HTZ="10.0" HUGE="10.0" HYLN="10.0" HZON="10.0" IDEX="10.0" IGSB="10.0" IMTE="10.0" INFI="10.0" INFY="10.0" ING="10.0" INO="10.0" INPX="10.0" INTC="10.0" INUV="10.0" INVO="10.0" INVU="10.0" IWM="10.0" IZEA="10.0" JE="10.0" JENGQ="10.0" JFIN="10.0" JOB="10.0" K="10.0" KBR="10.0" KEYS="10.0" KMPH="10.0" KMX="10.0" KR="10.0" LAZR="10.0" LCI="10.0" LCTX="10.0" LEAF="10.0" LIVX="10.0" LKQ="10.0" LODE="10.0" LRTNF="10.0" LUV="10.0" MARA="10.0" MBT="10.0" MDII="10.0" MESA="10.0" METX="10.0" MFGP="10.0" MMDA1="10.0" MRIN="10.0" MSFT="10.0" MTEM="10.0" MU="10.0" MVIS="10.0" MX="10.0" MYO="10.0" MYSZ="10.0" NCLH="10.0" NDX="10.0" NEOS="10.0" NGD="10.0" NGL="10.0" NIO="10.0" NLOK="10.0" NLSN="10.0" NLSP="10.0" NLST="10.0" NNVC="10.0" NOK="10.0" NOV="10.0" NQ="10.0" NSLP="10.0" NTP="10.0" NUZE="10.0" NVDA="10.0" NXE="10.0" OCGN="10.0" OGEN="10.0" OGI="10.0" OHI="10.0" OI="10.0" OLO="10.0" OPEN="10.0" OPGN="10.0" ORCL="10.0" ORMP="10.0" OTIS="10.0" OVID="10.0" PAA="10.0" PAAS="10.0" PERI="10.0" PFF="10.0" PGX="10.0" PHM="10.0" PNC="10.0" POTX="10.0" PPG="10.0" PPL="10.0" PTE="10.0" QQQ="10.0" QSR="10.0" RAD="10.0" RAIL="10.0" RIBT="10.0" RKT="10.0" RMO="10.0" RP="10.0" RPAY="10.0" RRD="10.0" RSX="10.0" RUT="10.0" RVLV="10.0" RYCEY="10.0" SAVA="10.0" SAVE="10.0" SGLB="10.0" SID="10.0" SIFY="10.0" SINO="10.0" SINT="10.0" SIOX="10.0" SIRI="10.0" SITC="10.0" SIVR="10.0" SJI="10.0" SKLZ="10.0" SKT="10.0" SLDB="10.0" SLQT="10.0" SNAP="10.0" SNCA="10.0" SNOA="10.0" SOGO="10.0" SOS="10.0" SPCB="10.0" SPD="10.0" SPRT="10.0" SPX="10.0" SPY="10.0" SQ="10.0" STON="10.0" SUNW="10.0" SWI="10.0" SWK="10.0" T="10.0" TGTX="10.0" TH="10.0" THTX="10.0" TSIA="10.0" TSLA="10.0" TSLAX="10.0" TZA="10.0" U="10.0" UAL="10.0" UAMY="10.0" UEC="10.0" UIS="10.0" ULTA="10.0" USAC="10.0" USWS="10.0" UTZ="10.0" UUUU="10.0" UXIN="10.0" VALE="10.0" VEU="10.0" VJET="10.0" VSTM="10.0" VTRS="10.0" VVOS="10.0" VWO="10.0" WAFU="10.0" WETF="10.0" WKEY="10.0" X="10.0" XELA="10.0" XERS="10.0" XL="10.0" XLP="10.0" XLU="10.0" XTLB="10.0" YGMZ="10.0" ZKIN="10.0" ZM="10.0"/>
                </TRG_0>
              </OCO_STOP>
              <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="1.0" TRG_TIF="DAY">
                <OFFSET_PER_SYMBOL AA="1.0" AAL="1.0" AAP="1.0" AAPL="1.0" ABG="1.0" ABML="1.0" ACER="1.0" ADMP="1.0" AEG="1.0" AEHL="1.0" AFI="1.0" AJRD="1.0" AKU="1.0" ALEC="1.0" AMC="1.0" AMCR="1.0" AMD="1.0" AMRS="1.0" AMTX="1.0" AMZN="1.0" ANIX="1.0" ANPC="1.0" ANTE="1.0" AP="1.0" APOP="1.0" APTO="1.0" AR="1.0" AREC="1.0" ARES="1.0" ARLO="1.0" ASLEW="1.0" ATHM="1.0" ATIF="1.0" ATNF="1.0" AUY="1.0" AVCO="1.0" AXL="1.0" AZN="1.0" AZRX="1.0" BABA="1.0" BBD="1.0" BBDC="1.0" BFT="1.0" BILI="1.0" BLIN="1.0" BMY="1.0" BOX="1.0" BP="1.0" BRQS="1.0" BSGM="1.0" BURL="1.0" BWAY="1.0" BXRX="1.0" BYFC="1.0" CAKE="1.0" CAL="1.0" CCI="1.0" CCIV="1.0" CCJ="1.0" CCL="1.0" CEQPP="1.0" CHNG="1.0" CHX="1.0" CIDM="1.0" CIIC="1.0" CLBS="1.0" CLDR="1.0" CLEU="1.0" CLSN="1.0" CLVS="1.0" CNNE="1.0" COHN="1.0" COMP="1.0" CPHI="1.0" CPRX="1.0" CRBP="1.0" CRTD="1.0" CSCO="1.0" CTIC="1.0" CUB="1.0" CVX="1.0" DCTH="1.0" DHT="1.0" DIS="1.0" DISCK="1.0" DNN="1.0" DOX="1.0" DPW="1.0" DS="1.0" DSKE="1.0" DTSS="1.0" EARS="1.0" EBS="1.0" EDTK="1.0" EMAN="1.0" ENPH="1.0" ETSY="1.0" EURN="1.0" EVRG="1.0" EW="1.0" EWA="1.0" EXEL="1.0" EYE="1.0" EYES="1.0" FAST="1.0" FB="1.0" FCAC="1.0" FLR="1.0" FLY="1.0" FPRX="1.0" FSLR="1.0" FSR="1.0" FUSE="1.0" FUV="1.0" GEL="1.0" GLOP="1.0" GME="1.0" GMER="1.0" GNCA="1.0" GOCO="1.0" HBI="1.0" HCHC="1.0" HENKY="1.0" HPE="1.0" HPQ="1.0" HPR="1.0" HTBX="1.0" HTHIY="1.0" HTZ="1.0" HUGE="1.0" HYLN="1.0" HZON="1.0" IDEX="1.0" IGSB="1.0" IMTE="1.0" INFI="1.0" INFY="1.0" ING="1.0" INO="1.0" INPX="1.0" INTC="1.0" INUV="1.0" INVO="1.0" INVU="1.0" IWM="1.0" IZEA="1.0" JE="1.0" JENGQ="1.0" JFIN="1.0" JOB="1.0" K="1.0" KBR="1.0" KEYS="1.0" KMPH="1.0" KMX="1.0" KR="1.0" LAZR="1.0" LCI="1.0" LCTX="1.0" LEAF="1.0" LIVX="1.0" LKQ="1.0" LODE="1.0" LRTNF="1.0" LUV="1.0" MARA="1.0" MBT="1.0" MDII="1.0" MESA="1.0" METX="1.0" MFGP="1.0" MMDA1="1.0" MRIN="1.0" MSFT="1.0" MTEM="1.0" MU="1.0" MVIS="1.0" MX="1.0" MYO="1.0" MYSZ="1.0" NCLH="1.0" NDX="1.0" NEOS="1.0" NGD="1.0" NGL="1.0" NIO="1.0" NLOK="1.0" NLSN="1.0" NLSP="1.0" NLST="1.0" NNVC="1.0" NOK="1.0" NOV="1.0" NQ="1.0" NSLP="1.0" NTP="1.0" NUZE="1.0" NVDA="1.0" NXE="1.0" OCGN="1.0" OGEN="1.0" OGI="1.0" OHI="1.0" OI="1.0" OLO="1.0" OPEN="1.0" OPGN="1.0" ORCL="1.0" ORMP="1.0" OTIS="1.0" OVID="1.0" PAA="1.0" PAAS="1.0" PERI="1.0" PFF="1.0" PGX="1.0" PHM="1.0" PNC="1.0" POTX="1.0" PPG="1.0" PPL="1.0" PTE="1.0" QQQ="1.0" QSR="1.0" RAD="1.0" RAIL="1.0" RIBT="1.0" RKT="1.0" RMO="1.0" RP="1.0" RPAY="1.0" RRD="1.0" RSX="1.0" RUT="1.0" RVLV="1.0" RYCEY="1.0" SAVA="1.0" SAVE="1.0" SGLB="1.0" SID="1.0" SIFY="1.0" SINO="1.0" SINT="1.0" SIOX="1.0" SIRI="1.0" SITC="1.0" SIVR="1.0" SJI="1.0" SKLZ="1.0" SKT="1.0" SLDB="1.0" SLQT="1.0" SNAP="1.0" SNCA="1.0" SNOA="1.0" SOGO="1.0" SOS="1.0" SPCB="1.0" SPD="1.0" SPRT="1.0" SPX="1.0" SPY="1.0" SQ="1.0" STON="1.0" SUNW="1.0" SWI="1.0" SWK="1.0" T="1.0" TGTX="1.0" TH="1.0" THTX="1.0" TSIA="1.0" TSLA="1.0" TSLAX="1.0" TZA="1.0" U="1.0" UAL="1.0" UAMY="1.0" UEC="1.0" UIS="1.0" ULTA="1.0" USAC="1.0" USWS="1.0" UTZ="1.0" UUUU="1.0" UXIN="1.0" VALE="1.0" VEU="1.0" VJET="1.0" VSTM="1.0" VTRS="1.0" VVOS="1.0" VWO="1.0" WAFU="1.0" WETF="1.0" WKEY="1.0" X="1.0" XELA="1.0" XERS="1.0" XL="1.0" XLP="1.0" XLU="1.0" XTLB="1.0" YGMZ="1.0" ZKIN="1.0" ZM="1.0"/>
              </TRG_0>
              <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-1.0" TRG_TIF="DAY">
                <OFFSET_PER_SYMBOL AA="-1.0" AAL="-1.0" AAP="-1.0" AAPL="-1.0" ABG="-1.0" ABML="-1.0" ACER="-1.0" ADMP="-1.0" AEG="-1.0" AEHL="-1.0" AFI="-1.0" AJRD="-1.0" AKU="-1.0" ALEC="-1.0" AMC="-1.0" AMCR="-1.0" AMD="-1.0" AMRS="-1.0" AMTX="-1.0" AMZN="-1.0" ANIX="-1.0" ANPC="-1.0" ANTE="-1.0" AP="-1.0" APOP="-1.0" APTO="-1.0" AR="-1.0" AREC="-1.0" ARES="-1.0" ARLO="-1.0" ASLEW="-1.0" ATHM="-1.0" ATIF="-1.0" ATNF="-1.0" AUY="-1.0" AVCO="-1.0" AXL="-1.0" AZN="-1.0" AZRX="-1.0" BABA="-1.0" BBD="-1.0" BBDC="-1.0" BFT="-1.0" BILI="-1.0" BLIN="-1.0" BMY="-1.0" BOX="-1.0" BP="-1.0" BRQS="-1.0" BSGM="-1.0" BURL="-1.0" BWAY="-1.0" BXRX="-1.0" BYFC="-1.0" CAKE="-1.0" CAL="-1.0" CCI="-1.0" CCIV="-1.0" CCJ="-1.0" CCL="-1.0" CEQPP="-1.0" CHNG="-1.0" CHX="-1.0" CIDM="-1.0" CIIC="-1.0" CLBS="-1.0" CLDR="-1.0" CLEU="-1.0" CLSN="-1.0" CLVS="-1.0" CNNE="-1.0" COHN="-1.0" COMP="-1.0" CPHI="-1.0" CPRX="-1.0" CRBP="-1.0" CRTD="-1.0" CSCO="-1.0" CTIC="-1.0" CUB="-1.0" CVX="-1.0" DCTH="-1.0" DHT="-1.0" DIS="-1.0" DISCK="-1.0" DNN="-1.0" DOX="-1.0" DPW="-1.0" DS="-1.0" DSKE="-1.0" DTSS="-1.0" EARS="-1.0" EBS="-1.0" EDTK="-1.0" EMAN="-1.0" ENPH="-1.0" ETSY="-1.0" EURN="-1.0" EVRG="-1.0" EW="-1.0" EWA="-1.0" EXEL="-1.0" EYE="-1.0" EYES="-1.0" FAST="-1.0" FB="-1.0" FCAC="-1.0" FLR="-1.0" FLY="-1.0" FPRX="-1.0" FSLR="-1.0" FSR="-1.0" FUSE="-1.0" FUV="-1.0" GEL="-1.0" GLOP="-1.0" GME="-1.0" GMER="-1.0" GNCA="-1.0" GOCO="-1.0" HBI="-1.0" HCHC="-1.0" HENKY="-1.0" HPE="-1.0" HPQ="-1.0" HPR="-1.0" HTBX="-1.0" HTHIY="-1.0" HTZ="-1.0" HUGE="-1.0" HYLN="-1.0" HZON="-1.0" IDEX="-1.0" IGSB="-1.0" IMTE="-1.0" INFI="-1.0" INFY="-1.0" ING="-1.0" INO="-1.0" INPX="-1.0" INTC="-1.0" INUV="-1.0" INVO="-1.0" INVU="-1.0" IWM="-1.0" IZEA="-1.0" JE="-1.0" JENGQ="-1.0" JFIN="-1.0" JOB="-1.0" K="-1.0" KBR="-1.0" KEYS="-1.0" KMPH="-1.0" KMX="-1.0" KR="-1.0" LAZR="-1.0" LCI="-1.0" LCTX="-1.0" LEAF="-1.0" LIVX="-1.0" LKQ="-1.0" LODE="-1.0" LRTNF="-1.0" LUV="-1.0" MARA="-1.0" MBT="-1.0" MDII="-1.0" MESA="-1.0" METX="-1.0" MFGP="-1.0" MMDA1="-1.0" MRIN="-1.0" MSFT="-1.0" MTEM="-1.0" MU="-1.0" MVIS="-1.0" MX="-1.0" MYO="-1.0" MYSZ="-1.0" NCLH="-1.0" NDX="-1.0" NEOS="-1.0" NGD="-1.0" NGL="-1.0" NIO="-1.0" NLOK="-1.0" NLSN="-1.0" NLSP="-1.0" NLST="-1.0" NNVC="-1.0" NOK="-1.0" NOV="-1.0" NQ="-1.0" NSLP="-1.0" NTP="-1.0" NUZE="-1.0" NVDA="-1.0" NXE="-1.0" OCGN="-1.0" OGEN="-1.0" OGI="-1.0" OHI="-1.0" OI="-1.0" OLO="-1.0" OPEN="-1.0" OPGN="-1.0" ORCL="-1.0" ORMP="-1.0" OTIS="-1.0" OVID="-1.0" PAA="-1.0" PAAS="-1.0" PERI="-1.0" PFF="-1.0" PGX="-1.0" PHM="-1.0" PNC="-1.0" POTX="-1.0" PPG="-1.0" PPL="-1.0" PTE="-1.0" QQQ="-1.0" QSR="-1.0" RAD="-1.0" RAIL="-1.0" RIBT="-1.0" RKT="-1.0" RMO="-1.0" RP="-1.0" RPAY="-1.0" RRD="-1.0" RSX="-1.0" RUT="-1.0" RVLV="-1.0" RYCEY="-1.0" SAVA="-1.0" SAVE="-1.0" SGLB="-1.0" SID="-1.0" SIFY="-1.0" SINO="-1.0" SINT="-1.0" SIOX="-1.0" SIRI="-1.0" SITC="-1.0" SIVR="-1.0" SJI="-1.0" SKLZ="-1.0" SKT="-1.0" SLDB="-1.0" SLQT="-1.0" SNAP="-1.0" SNCA="-1.0" SNOA="-1.0" SOGO="-1.0" SOS="-1.0" SPCB="-1.0" SPD="-1.0" SPRT="-1.0" SPX="-1.0" SPY="-1.0" SQ="-1.0" STON="-1.0" SUNW="-1.0" SWI="-1.0" SWK="-1.0" T="-1.0" TGTX="-1.0" TH="-1.0" THTX="-1.0" TSIA="-1.0" TSLA="-1.0" TSLAX="-1.0" TZA="-1.0" U="-1.0" UAL="-1.0" UAMY="-1.0" UEC="-1.0" UIS="-1.0" ULTA="-1.0" USAC="-1.0" USWS="-1.0" UTZ="-1.0" UUUU="-1.0" UXIN="-1.0" VALE="-1.0" VEU="-1.0" VJET="-1.0" VSTM="-1.0" VTRS="-1.0" VVOS="-1.0" VWO="-1.0" WAFU="-1.0" WETF="-1.0" WKEY="-1.0" X="-1.0" XELA="-1.0" XERS="-1.0" XL="-1.0" XLP="-1.0" XLU="-1.0" XTLB="-1.0" YGMZ="-1.0" ZKIN="-1.0" ZM="-1.0"/>
              </TRG_1>
              <_2>
                <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="2.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AA="2.0" AAL="2.0" AAP="2.0" AAPL="2.0" ABG="2.0" ABML="2.0" ACER="2.0" ADMP="2.0" AEG="2.0" AEHL="2.0" AFI="2.0" AJRD="2.0" AKU="2.0" ALEC="2.0" AMC="2.0" AMCR="2.0" AMD="2.0" AMRS="2.0" AMTX="2.0" AMZN="2.0" ANIX="2.0" ANPC="2.0" ANTE="2.0" AP="2.0" APOP="2.0" APTO="2.0" AR="2.0" AREC="2.0" ARES="2.0" ARLO="2.0" ASLEW="2.0" ATHM="2.0" ATIF="2.0" ATNF="2.0" AUY="2.0" AVCO="2.0" AXL="2.0" AZN="2.0" AZRX="2.0" BABA="2.0" BBD="2.0" BBDC="2.0" BFT="2.0" BILI="2.0" BLIN="2.0" BMY="2.0" BOX="2.0" BP="2.0" BRQS="2.0" BSGM="2.0" BURL="2.0" BWAY="2.0" BXRX="2.0" BYFC="2.0" CAKE="2.0" CAL="2.0" CCI="2.0" CCIV="2.0" CCJ="2.0" CCL="2.0" CEQPP="2.0" CHNG="2.0" CHX="2.0" CIDM="2.0" CIIC="2.0" CLBS="2.0" CLDR="2.0" CLEU="2.0" CLSN="2.0" CLVS="2.0" CNNE="2.0" COHN="2.0" COMP="2.0" CPHI="2.0" CPRX="2.0" CRBP="2.0" CRTD="2.0" CSCO="2.0" CTIC="2.0" CUB="2.0" CVX="2.0" DCTH="2.0" DHT="2.0" DIS="2.0" DISCK="2.0" DNN="2.0" DOX="2.0" DPW="2.0" DS="2.0" DSKE="2.0" DTSS="2.0" EARS="2.0" EBS="2.0" EDTK="2.0" EMAN="2.0" ENPH="2.0" ETSY="2.0" EURN="2.0" EVRG="2.0" EW="2.0" EWA="2.0" EXEL="2.0" EYE="2.0" EYES="2.0" FAST="2.0" FB="2.0" FCAC="2.0" FLR="2.0" FLY="2.0" FPRX="2.0" FSLR="2.0" FSR="2.0" FUSE="2.0" FUV="2.0" GEL="2.0" GLOP="2.0" GME="2.0" GMER="2.0" GNCA="2.0" GOCO="2.0" HBI="2.0" HCHC="2.0" HENKY="2.0" HPE="2.0" HPQ="2.0" HPR="2.0" HTBX="2.0" HTHIY="2.0" HTZ="2.0" HUGE="2.0" HYLN="2.0" HZON="2.0" IDEX="2.0" IGSB="2.0" IMTE="2.0" INFI="2.0" INFY="2.0" ING="2.0" INO="2.0" INPX="2.0" INTC="2.0" INUV="2.0" INVO="2.0" INVU="2.0" IWM="2.0" IZEA="2.0" JE="2.0" JENGQ="2.0" JFIN="2.0" JOB="2.0" K="2.0" KBR="2.0" KEYS="2.0" KMPH="2.0" KMX="2.0" KR="2.0" LAZR="2.0" LCI="2.0" LCTX="2.0" LEAF="2.0" LIVX="2.0" LKQ="2.0" LODE="2.0" LRTNF="2.0" LUV="2.0" MARA="2.0" MBT="2.0" MDII="2.0" MESA="2.0" METX="2.0" MFGP="2.0" MMDA1="2.0" MRIN="2.0" MSFT="2.0" MTEM="2.0" MU="2.0" MVIS="2.0" MX="2.0" MYO="2.0" MYSZ="2.0" NCLH="2.0" NDX="2.0" NEOS="2.0" NGD="2.0" NGL="2.0" NIO="2.0" NLOK="2.0" NLSN="2.0" NLSP="2.0" NLST="2.0" NNVC="2.0" NOK="2.0" NOV="2.0" NQ="2.0" NSLP="2.0" NTP="2.0" NUZE="2.0" NVDA="2.0" NXE="2.0" OCGN="2.0" OGEN="2.0" OGI="2.0" OHI="2.0" OI="2.0" OLO="2.0" OPEN="2.0" OPGN="2.0" ORCL="2.0" ORMP="2.0" OTIS="2.0" OVID="2.0" PAA="2.0" PAAS="2.0" PERI="2.0" PFF="2.0" PGX="2.0" PHM="2.0" PNC="2.0" POTX="2.0" PPG="2.0" PPL="2.0" PTE="2.0" QQQ="2.0" QSR="2.0" RAD="2.0" RAIL="2.0" RIBT="2.0" RKT="2.0" RMO="2.0" RP="2.0" RPAY="2.0" RRD="2.0" RSX="2.0" RUT="2.0" RVLV="2.0" RYCEY="2.0" SAVA="2.0" SAVE="2.0" SGLB="2.0" SID="2.0" SIFY="2.0" SINO="2.0" SINT="2.0" SIOX="2.0" SIRI="2.0" SITC="2.0" SIVR="2.0" SJI="2.0" SKLZ="2.0" SKT="2.0" SLDB="2.0" SLQT="2.0" SNAP="2.0" SNCA="2.0" SNOA="2.0" SOGO="2.0" SOS="2.0" SPCB="2.0" SPD="2.0" SPRT="2.0" SPX="2.0" SPY="2.0" SQ="2.0" STON="2.0" SUNW="2.0" SWI="2.0" SWK="2.0" T="2.0" TGTX="2.0" TH="2.0" THTX="2.0" TSIA="2.0" TSLA="2.0" TSLAX="2.0" TZA="2.0" U="2.0" UAL="2.0" UAMY="2.0" UEC="2.0" UIS="2.0" ULTA="2.0" USAC="2.0" USWS="2.0" UTZ="2.0" UUUU="2.0" UXIN="2.0" VALE="2.0" VEU="2.0" VJET="2.0" VSTM="2.0" VTRS="2.0" VVOS="2.0" VWO="2.0" WAFU="2.0" WETF="2.0" WKEY="2.0" X="2.0" XELA="2.0" XERS="2.0" XL="2.0" XLP="2.0" XLU="2.0" XTLB="2.0" YGMZ="2.0" ZKIN="2.0" ZM="2.0"/>
                </TRG_0>
                <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-2.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AA="-2.0" AAL="-2.0" AAP="-2.0" AAPL="-2.0" ABG="-2.0" ABML="-2.0" ACER="-2.0" ADMP="-2.0" AEG="-2.0" AEHL="-2.0" AFI="-2.0" AJRD="-2.0" AKU="-2.0" ALEC="-2.0" AMC="-2.0" AMCR="-2.0" AMD="-2.0" AMRS="-2.0" AMTX="-2.0" AMZN="-2.0" ANIX="-2.0" ANPC="-2.0" ANTE="-2.0" AP="-2.0" APOP="-2.0" APTO="-2.0" AR="-2.0" AREC="-2.0" ARES="-2.0" ARLO="-2.0" ASLEW="-2.0" ATHM="-2.0" ATIF="-2.0" ATNF="-2.0" AUY="-2.0" AVCO="-2.0" AXL="-2.0" AZN="-2.0" AZRX="-2.0" BABA="-2.0" BBD="-2.0" BBDC="-2.0" BFT="-2.0" BILI="-2.0" BLIN="-2.0" BMY="-2.0" BOX="-2.0" BP="-2.0" BRQS="-2.0" BSGM="-2.0" BURL="-2.0" BWAY="-2.0" BXRX="-2.0" BYFC="-2.0" CAKE="-2.0" CAL="-2.0" CCI="-2.0" CCIV="-2.0" CCJ="-2.0" CCL="-2.0" CEQPP="-2.0" CHNG="-2.0" CHX="-2.0" CIDM="-2.0" CIIC="-2.0" CLBS="-2.0" CLDR="-2.0" CLEU="-2.0" CLSN="-2.0" CLVS="-2.0" CNNE="-2.0" COHN="-2.0" COMP="-2.0" CPHI="-2.0" CPRX="-2.0" CRBP="-2.0" CRTD="-2.0" CSCO="-2.0" CTIC="-2.0" CUB="-2.0" CVX="-2.0" DCTH="-2.0" DHT="-2.0" DIS="-2.0" DISCK="-2.0" DNN="-2.0" DOX="-2.0" DPW="-2.0" DS="-2.0" DSKE="-2.0" DTSS="-2.0" EARS="-2.0" EBS="-2.0" EDTK="-2.0" EMAN="-2.0" ENPH="-2.0" ETSY="-2.0" EURN="-2.0" EVRG="-2.0" EW="-2.0" EWA="-2.0" EXEL="-2.0" EYE="-2.0" EYES="-2.0" FAST="-2.0" FB="-2.0" FCAC="-2.0" FLR="-2.0" FLY="-2.0" FPRX="-2.0" FSLR="-2.0" FSR="-2.0" FUSE="-2.0" FUV="-2.0" GEL="-2.0" GLOP="-2.0" GME="-2.0" GMER="-2.0" GNCA="-2.0" GOCO="-2.0" HBI="-2.0" HCHC="-2.0" HENKY="-2.0" HPE="-2.0" HPQ="-2.0" HPR="-2.0" HTBX="-2.0" HTHIY="-2.0" HTZ="-2.0" HUGE="-2.0" HYLN="-2.0" HZON="-2.0" IDEX="-2.0" IGSB="-2.0" IMTE="-2.0" INFI="-2.0" INFY="-2.0" ING="-2.0" INO="-2.0" INPX="-2.0" INTC="-2.0" INUV="-2.0" INVO="-2.0" INVU="-2.0" IWM="-2.0" IZEA="-2.0" JE="-2.0" JENGQ="-2.0" JFIN="-2.0" JOB="-2.0" K="-2.0" KBR="-2.0" KEYS="-2.0" KMPH="-2.0" KMX="-2.0" KR="-2.0" LAZR="-2.0" LCI="-2.0" LCTX="-2.0" LEAF="-2.0" LIVX="-2.0" LKQ="-2.0" LODE="-2.0" LRTNF="-2.0" LUV="-2.0" MARA="-2.0" MBT="-2.0" MDII="-2.0" MESA="-2.0" METX="-2.0" MFGP="-2.0" MMDA1="-2.0" MRIN="-2.0" MSFT="-2.0" MTEM="-2.0" MU="-2.0" MVIS="-2.0" MX="-2.0" MYO="-2.0" MYSZ="-2.0" NCLH="-2.0" NDX="-2.0" NEOS="-2.0" NGD="-2.0" NGL="-2.0" NIO="-2.0" NLOK="-2.0" NLSN="-2.0" NLSP="-2.0" NLST="-2.0" NNVC="-2.0" NOK="-2.0" NOV="-2.0" NQ="-2.0" NSLP="-2.0" NTP="-2.0" NUZE="-2.0" NVDA="-2.0" NXE="-2.0" OCGN="-2.0" OGEN="-2.0" OGI="-2.0" OHI="-2.0" OI="-2.0" OLO="-2.0" OPEN="-2.0" OPGN="-2.0" ORCL="-2.0" ORMP="-2.0" OTIS="-2.0" OVID="-2.0" PAA="-2.0" PAAS="-2.0" PERI="-2.0" PFF="-2.0" PGX="-2.0" PHM="-2.0" PNC="-2.0" POTX="-2.0" PPG="-2.0" PPL="-2.0" PTE="-2.0" QQQ="-2.0" QSR="-2.0" RAD="-2.0" RAIL="-2.0" RIBT="-2.0" RKT="-2.0" RMO="-2.0" RP="-2.0" RPAY="-2.0" RRD="-2.0" RSX="-2.0" RUT="-2.0" RVLV="-2.0" RYCEY="-2.0" SAVA="-2.0" SAVE="-2.0" SGLB="-2.0" SID="-2.0" SIFY="-2.0" SINO="-2.0" SINT="-2.0" SIOX="-2.0" SIRI="-2.0" SITC="-2.0" SIVR="-2.0" SJI="-2.0" SKLZ="-2.0" SKT="-2.0" SLDB="-2.0" SLQT="-2.0" SNAP="-2.0" SNCA="-2.0" SNOA="-2.0" SOGO="-2.0" SOS="-2.0" SPCB="-2.0" SPD="-2.0" SPRT="-2.0" SPX="-2.0" SPY="-2.0" SQ="-2.0" STON="-2.0" SUNW="-2.0" SWI="-2.0" SWK="-2.0" T="-2.0" TGTX="-2.0" TH="-2.0" THTX="-2.0" TSIA="-2.0" TSLA="-2.0" TSLAX="-2.0" TZA="-2.0" U="-2.0" UAL="-2.0" UAMY="-2.0" UEC="-2.0" UIS="-2.0" ULTA="-2.0" USAC="-2.0" USWS="-2.0" UTZ="-2.0" UUUU="-2.0" UXIN="-2.0" VALE="-2.0" VEU="-2.0" VJET="-2.0" VSTM="-2.0" VTRS="-2.0" VVOS="-2.0" VWO="-2.0" WAFU="-2.0" WETF="-2.0" WKEY="-2.0" X="-2.0" XELA="-2.0" XERS="-2.0" XL="-2.0" XLP="-2.0" XLU="-2.0" XTLB="-2.0" YGMZ="-2.0" ZKIN="-2.0" ZM="-2.0"/>
                </TRG_1>
              </_2>
              <_3>
                <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="3.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AA="3.0" AAL="3.0" AAP="3.0" AAPL="3.0" ABG="3.0" ABML="3.0" ACER="3.0" ADMP="3.0" AEG="3.0" AEHL="3.0" AFI="3.0" AJRD="3.0" AKU="3.0" ALEC="3.0" AMC="3.0" AMCR="3.0" AMD="3.0" AMRS="3.0" AMTX="3.0" AMZN="3.0" ANIX="3.0" ANPC="3.0" ANTE="3.0" AP="3.0" APOP="3.0" APTO="3.0" AR="3.0" AREC="3.0" ARES="3.0" ARLO="3.0" ASLEW="3.0" ATHM="3.0" ATIF="3.0" ATNF="3.0" AUY="3.0" AVCO="3.0" AXL="3.0" AZN="3.0" AZRX="3.0" BABA="3.0" BBD="3.0" BBDC="3.0" BFT="3.0" BILI="3.0" BLIN="3.0" BMY="3.0" BOX="3.0" BP="3.0" BRQS="3.0" BSGM="3.0" BURL="3.0" BWAY="3.0" BXRX="3.0" BYFC="3.0" CAKE="3.0" CAL="3.0" CCI="3.0" CCIV="3.0" CCJ="3.0" CCL="3.0" CEQPP="3.0" CHNG="3.0" CHX="3.0" CIDM="3.0" CIIC="3.0" CLBS="3.0" CLDR="3.0" CLEU="3.0" CLSN="3.0" CLVS="3.0" CNNE="3.0" COHN="3.0" COMP="3.0" CPHI="3.0" CPRX="3.0" CRBP="3.0" CRTD="3.0" CSCO="3.0" CTIC="3.0" CUB="3.0" CVX="3.0" DCTH="3.0" DHT="3.0" DIS="3.0" DISCK="3.0" DNN="3.0" DOX="3.0" DPW="3.0" DS="3.0" DSKE="3.0" DTSS="3.0" EARS="3.0" EBS="3.0" EDTK="3.0" EMAN="3.0" ENPH="3.0" ETSY="3.0" EURN="3.0" EVRG="3.0" EW="3.0" EWA="3.0" EXEL="3.0" EYE="3.0" EYES="3.0" FAST="3.0" FB="3.0" FCAC="3.0" FLR="3.0" FLY="3.0" FPRX="3.0" FSLR="3.0" FSR="3.0" FUSE="3.0" FUV="3.0" GEL="3.0" GLOP="3.0" GME="3.0" GMER="3.0" GNCA="3.0" GOCO="3.0" HBI="3.0" HCHC="3.0" HENKY="3.0" HPE="3.0" HPQ="3.0" HPR="3.0" HTBX="3.0" HTHIY="3.0" HTZ="3.0" HUGE="3.0" HYLN="3.0" HZON="3.0" IDEX="3.0" IGSB="3.0" IMTE="3.0" INFI="3.0" INFY="3.0" ING="3.0" INO="3.0" INPX="3.0" INTC="3.0" INUV="3.0" INVO="3.0" INVU="3.0" IWM="3.0" IZEA="3.0" JE="3.0" JENGQ="3.0" JFIN="3.0" JOB="3.0" K="3.0" KBR="3.0" KEYS="3.0" KMPH="3.0" KMX="3.0" KR="3.0" LAZR="3.0" LCI="3.0" LCTX="3.0" LEAF="3.0" LIVX="3.0" LKQ="3.0" LODE="3.0" LRTNF="3.0" LUV="3.0" MARA="3.0" MBT="3.0" MDII="3.0" MESA="3.0" METX="3.0" MFGP="3.0" MMDA1="3.0" MRIN="3.0" MSFT="3.0" MTEM="3.0" MU="3.0" MVIS="3.0" MX="3.0" MYO="3.0" MYSZ="3.0" NCLH="3.0" NDX="3.0" NEOS="3.0" NGD="3.0" NGL="3.0" NIO="3.0" NLOK="3.0" NLSN="3.0" NLSP="3.0" NLST="3.0" NNVC="3.0" NOK="3.0" NOV="3.0" NQ="3.0" NSLP="3.0" NTP="3.0" NUZE="3.0" NVDA="3.0" NXE="3.0" OCGN="3.0" OGEN="3.0" OGI="3.0" OHI="3.0" OI="3.0" OLO="3.0" OPEN="3.0" OPGN="3.0" ORCL="3.0" ORMP="3.0" OTIS="3.0" OVID="3.0" PAA="3.0" PAAS="3.0" PERI="3.0" PFF="3.0" PGX="3.0" PHM="3.0" PNC="3.0" POTX="3.0" PPG="3.0" PPL="3.0" PTE="3.0" QQQ="3.0" QSR="3.0" RAD="3.0" RAIL="3.0" RIBT="3.0" RKT="3.0" RMO="3.0" RP="3.0" RPAY="3.0" RRD="3.0" RSX="3.0" RUT="3.0" RVLV="3.0" RYCEY="3.0" SAVA="3.0" SAVE="3.0" SGLB="3.0" SID="3.0" SIFY="3.0" SINO="3.0" SINT="3.0" SIOX="3.0" SIRI="3.0" SITC="3.0" SIVR="3.0" SJI="3.0" SKLZ="3.0" SKT="3.0" SLDB="3.0" SLQT="3.0" SNAP="3.0" SNCA="3.0" SNOA="3.0" SOGO="3.0" SOS="3.0" SPCB="3.0" SPD="3.0" SPRT="3.0" SPX="3.0" SPY="3.0" SQ="3.0" STON="3.0" SUNW="3.0" SWI="3.0" SWK="3.0" T="3.0" TGTX="3.0" TH="3.0" THTX="3.0" TSIA="3.0" TSLA="3.0" TSLAX="3.0" TZA="3.0" U="3.0" UAL="3.0" UAMY="3.0" UEC="3.0" UIS="3.0" ULTA="3.0" USAC="3.0" USWS="3.0" UTZ="3.0" UUUU="3.0" UXIN="3.0" VALE="3.0" VEU="3.0" VJET="3.0" VSTM="3.0" VTRS="3.0" VVOS="3.0" VWO="3.0" WAFU="3.0" WETF="3.0" WKEY="3.0" X="3.0" XELA="3.0" XERS="3.0" XL="3.0" XLP="3.0" XLU="3.0" XTLB="3.0" YGMZ="3.0" ZKIN="3.0" ZM="3.0"/>
                </TRG_0>
                <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-3.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AA="-3.0" AAL="-3.0" AAP="-3.0" AAPL="-3.0" ABG="-3.0" ABML="-3.0" ACER="-3.0" ADMP="-3.0" AEG="-3.0" AEHL="-3.0" AFI="-3.0" AJRD="-3.0" AKU="-3.0" ALEC="-3.0" AMC="-3.0" AMCR="-3.0" AMD="-3.0" AMRS="-3.0" AMTX="-3.0" AMZN="-3.0" ANIX="-3.0" ANPC="-3.0" ANTE="-3.0" AP="-3.0" APOP="-3.0" APTO="-3.0" AR="-3.0" AREC="-3.0" ARES="-3.0" ARLO="-3.0" ASLEW="-3.0" ATHM="-3.0" ATIF="-3.0" ATNF="-3.0" AUY="-3.0" AVCO="-3.0" AXL="-3.0" AZN="-3.0" AZRX="-3.0" BABA="-3.0" BBD="-3.0" BBDC="-3.0" BFT="-3.0" BILI="-3.0" BLIN="-3.0" BMY="-3.0" BOX="-3.0" BP="-3.0" BRQS="-3.0" BSGM="-3.0" BURL="-3.0" BWAY="-3.0" BXRX="-3.0" BYFC="-3.0" CAKE="-3.0" CAL="-3.0" CCI="-3.0" CCIV="-3.0" CCJ="-3.0" CCL="-3.0" CEQPP="-3.0" CHNG="-3.0" CHX="-3.0" CIDM="-3.0" CIIC="-3.0" CLBS="-3.0" CLDR="-3.0" CLEU="-3.0" CLSN="-3.0" CLVS="-3.0" CNNE="-3.0" COHN="-3.0" COMP="-3.0" CPHI="-3.0" CPRX="-3.0" CRBP="-3.0" CRTD="-3.0" CSCO="-3.0" CTIC="-3.0" CUB="-3.0" CVX="-3.0" DCTH="-3.0" DHT="-3.0" DIS="-3.0" DISCK="-3.0" DNN="-3.0" DOX="-3.0" DPW="-3.0" DS="-3.0" DSKE="-3.0" DTSS="-3.0" EARS="-3.0" EBS="-3.0" EDTK="-3.0" EMAN="-3.0" ENPH="-3.0" ETSY="-3.0" EURN="-3.0" EVRG="-3.0" EW="-3.0" EWA="-3.0" EXEL="-3.0" EYE="-3.0" EYES="-3.0" FAST="-3.0" FB="-3.0" FCAC="-3.0" FLR="-3.0" FLY="-3.0" FPRX="-3.0" FSLR="-3.0" FSR="-3.0" FUSE="-3.0" FUV="-3.0" GEL="-3.0" GLOP="-3.0" GME="-3.0" GMER="-3.0" GNCA="-3.0" GOCO="-3.0" HBI="-3.0" HCHC="-3.0" HENKY="-3.0" HPE="-3.0" HPQ="-3.0" HPR="-3.0" HTBX="-3.0" HTHIY="-3.0" HTZ="-3.0" HUGE="-3.0" HYLN="-3.0" HZON="-3.0" IDEX="-3.0" IGSB="-3.0" IMTE="-3.0" INFI="-3.0" INFY="-3.0" ING="-3.0" INO="-3.0" INPX="-3.0" INTC="-3.0" INUV="-3.0" INVO="-3.0" INVU="-3.0" IWM="-3.0" IZEA="-3.0" JE="-3.0" JENGQ="-3.0" JFIN="-3.0" JOB="-3.0" K="-3.0" KBR="-3.0" KEYS="-3.0" KMPH="-3.0" KMX="-3.0" KR="-3.0" LAZR="-3.0" LCI="-3.0" LCTX="-3.0" LEAF="-3.0" LIVX="-3.0" LKQ="-3.0" LODE="-3.0" LRTNF="-3.0" LUV="-3.0" MARA="-3.0" MBT="-3.0" MDII="-3.0" MESA="-3.0" METX="-3.0" MFGP="-3.0" MMDA1="-3.0" MRIN="-3.0" MSFT="-3.0" MTEM="-3.0" MU="-3.0" MVIS="-3.0" MX="-3.0" MYO="-3.0" MYSZ="-3.0" NCLH="-3.0" NDX="-3.0" NEOS="-3.0" NGD="-3.0" NGL="-3.0" NIO="-3.0" NLOK="-3.0" NLSN="-3.0" NLSP="-3.0" NLST="-3.0" NNVC="-3.0" NOK="-3.0" NOV="-3.0" NQ="-3.0" NSLP="-3.0" NTP="-3.0" NUZE="-3.0" NVDA="-3.0" NXE="-3.0" OCGN="-3.0" OGEN="-3.0" OGI="-3.0" OHI="-3.0" OI="-3.0" OLO="-3.0" OPEN="-3.0" OPGN="-3.0" ORCL="-3.0" ORMP="-3.0" OTIS="-3.0" OVID="-3.0" PAA="-3.0" PAAS="-3.0" PERI="-3.0" PFF="-3.0" PGX="-3.0" PHM="-3.0" PNC="-3.0" POTX="-3.0" PPG="-3.0" PPL="-3.0" PTE="-3.0" QQQ="-3.0" QSR="-3.0" RAD="-3.0" RAIL="-3.0" RIBT="-3.0" RKT="-3.0" RMO="-3.0" RP="-3.0" RPAY="-3.0" RRD="-3.0" RSX="-3.0" RUT="-3.0" RVLV="-3.0" RYCEY="-3.0" SAVA="-3.0" SAVE="-3.0" SGLB="-3.0" SID="-3.0" SIFY="-3.0" SINO="-3.0" SINT="-3.0" SIOX="-3.0" SIRI="-3.0" SITC="-3.0" SIVR="-3.0" SJI="-3.0" SKLZ="-3.0" SKT="-3.0" SLDB="-3.0" SLQT="-3.0" SNAP="-3.0" SNCA="-3.0" SNOA="-3.0" SOGO="-3.0" SOS="-3.0" SPCB="-3.0" SPD="-3.0" SPRT="-3.0" SPX="-3.0" SPY="-3.0" SQ="-3.0" STON="-3.0" SUNW="-3.0" SWI="-3.0" SWK="-3.0" T="-3.0" TGTX="-3.0" TH="-3.0" THTX="-3.0" TSIA="-3.0" TSLA="-3.0" TSLAX="-3.0" TZA="-3.0" U="-3.0" UAL="-3.0" UAMY="-3.0" UEC="-3.0" UIS="-3.0" ULTA="-3.0" USAC="-3.0" USWS="-3.0" UTZ="-3.0" UUUU="-3.0" UXIN="-3.0" VALE="-3.0" VEU="-3.0" VJET="-3.0" VSTM="-3.0" VTRS="-3.0" VVOS="-3.0" VWO="-3.0" WAFU="-3.0" WETF="-3.0" WKEY="-3.0" X="-3.0" XELA="-3.0" XERS="-3.0" XL="-3.0" XLP="-3.0" XLU="-3.0" XTLB="-3.0" YGMZ="-3.0" ZKIN="-3.0" ZM="-3.0"/>
                </TRG_1>
              </_3>
            </TRADE>
          </CELL1>
          <MODELNODE0 COUNT="2" ROWLAYOUT="true" TYPE="SPLIT" WEIGHT="0.0">
            <MODELNODE0 COMPOSITENAME="CELL0" NAME="0" TYPE="LEAF" WEIGHT="0.5002630194634403"/>
            <MODELNODE1 COMPOSITENAME="CELL1" NAME="1" TYPE="LEAF" WEIGHT="0.4997369805365597"/>
          </MODELNODE0>
        </TOS_CHARTS>
      </DETACHED_FRAME_118>
      <DETACHED_FRAME_119 ALWAYS_ON_TOP="false" HEIGHT="1040" LAYOUT="CHARTS_GROUP" STATE="NORMAL" WIDTH="1920" X="0" Y="0">
        <CHARTS_GROUP ORDER_ENTRY_EXPANDED="false" SELECTED_LAYOUT="TOS CHARTS"/>
        <ORDERBOOKPANEL SELECTED_TAB="0"/>
        <ORDERBOOK_STRATEGY_TABLE_SORTING/>
        <ORDER_AND_STRATEGY_BOOK EXPANDED="true"/>
        <ORDER_ENTRY_AND_ORDER_QUEUE>
          <GROUP MARKER="SINGLE"/>
        </ORDER_ENTRY_AND_ORDER_QUEUE>
        <ORDER_ENTRY_AND_SAVED_ORDERS EXPANDED="false"/>
        <PRICE_CONTROL CONDITION="1" CONDITION_LOCKED="false" PRICE="11.7" UNLOCKED="false"/>
        <SORTING COLUMN="TIME" ORDER="-1"/>
        <SWITCH POSITION="0"/>
        <TOS_CHARTS COLUMN_COUNT="2" CURRENT_GRID_NAME="mah_waveTech" DEFAULT_TYPE="DASHBOARD" ORDER_ENTRY_EXPANDED="false" ROW_COUNT="1">
          <CELL0 ROWSPANELWEIGHT="1.0" ROWWEIGHT0="1.0" ROWWEIGHT1="1.0" SELECTED_TYPE="CHART" SIDEBAR_IS_ACTIVE="true" SYMBOL="DCTH" SYMBOL_GROUP="2" TRADE_BUTTONS_MIGRATED="true">
            <ACTIVETRADER CELL_IDS="POSITION_BREAKDOWN;NET_POSITION;AVERAGE_PRICE;PL_OPEN;PL_DAY" COLUMNS="TRADE_AMOUNT:100:,BUY_ORDER:150:,BIDSIZE:60:,PRICE:100:,ASKSIZE:60:,SELL_ORDER:150:" ENABLED="true" SHOW_STUDY_MARKERS="false" SYMBOL="OCGN" SYMBOL_GROUP="2" SYNC_AT_AND_CHART_CROSSHAIR="true" VERTICAL="false" VISIBLE="false" WEIGHT="2.0" ZOOMING_STEPS="1">
              <POSITION_SUMMARY_PANEL CELL_IDS="POSITION_BREAKDOWN;NET_POSITION;AVERAGE_PRICE;PL_OPEN;PL_DAY" ENABLED="true"/>
              <TRADE_BUTTONS_CONFIG CONFIGURATION_NAME="SINGLE" ORDER_RULES_SET="STOCK" ORDER_TYPE="LIMIT" OS_AUTO="false" OS_EXPANDED="true" OS_TIF="DAY" QTY="200.0" QTY_STEP="1.0" TEMPLATE="SINGLE" TRADE_BUTTONS="BUY_MKT;SELL_MKT;MULTI_CANCEL;REVERSE;FLAT;SECOND_LINE;QUANTITY_WITH_BUTTONS;ORDER_TEMPLATE;AUTO_SEND;ORDER_SETUP">
                <OCO_STOP>
                  <TRG_0 TRG_ENBL="true" TRG_LINK="ASK_BID" TRG_OFFSET_MODE="TICK" TRG_OT="STOP" TRG_SETUP="10.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL AA="10.0" AAL="10.0" AAPL="10.0" ADBE="10.0" AEG="10.0" AFI="10.0" AMC="10.0" AMCR="10.0" AMD="10.0" AMRS="10.0" AMZN="10.0" ANTE="10.0" AP="10.0" ARLO="10.0" AXL="10.0" BA="10.0" BBBY="10.0" BBD="10.0" BMY="10.0" BSGM="10.0" BURL="10.0" BXRX="10.0" CAKE="10.0" CCI="10.0" CCIV="10.0" CCJ="10.0" CHNG="10.0" CHX="10.0" CIDM="10.0" CLBS="10.0" CLDR="10.0" CLSN="10.0" CNNE="10.0" COHN="10.0" CRBP="10.0" CSCO="10.0" CVX="10.0" DHT="10.0" DIS="10.0" DISCK="10.0" DNN="10.0" DPW="10.0" DS="10.0" EMAN="10.0" ETSY="10.0" EVRG="10.0" EW="10.0" EWA="10.0" EYE="10.0" EYES="10.0" FAST="10.0" FCAC="10.0" FPRX="10.0" FSLR="10.0" FSR="10.0" FUSE="10.0" GEL="10.0" GME="10.0" GOCO="10.0" GOED="10.0" HBI="10.0" HPQ="10.0" HPR="10.0" HTBX="10.0" HTZ="10.0" HUGE="10.0" HYLN="10.0" HZON="10.0" IDEX="10.0" IDXX="10.0" IGSB="10.0" INFI="10.0" INO="10.0" INTC="10.0" INTU="10.0" IZEA="10.0" JE="10.0" KEYS="10.0" KMPH="10.0" LCI="10.0" LCTX="10.0" LKQ="10.0" LUV="10.0" MBT="10.0" MDII="10.0" MESA="10.0" MFGP="10.0" MMDA1="10.0" MRIN="10.0" MX="10.0" NCLH="10.0" NGD="10.0" NGL="10.0" NIO="10.0" NLOK="10.0" NLSN="10.0" NLST="10.0" NNVC="10.0" NOK="10.0" NOV="10.0" NTP="10.0" NVDA="10.0" OCGN="10.0" OGI="10.0" OPEN="10.0" OPGN="10.0" ORCL="10.0" OTIS="10.0" OVID="10.0" PAA="10.0" PAAS="10.0" PERI="10.0" PFF="10.0" PGX="10.0" POTX="10.0" PPG="10.0" PTE="10.0" RAD="10.0" RKT="10.0" RP="10.0" RPAY="10.0" RRD="10.0" RSX="10.0" RUT="10.0" SAVA="10.0" SID="10.0" SIFY="10.0" SINO="10.0" SIOX="10.0" SITC="10.0" SIVR="10.0" SKLZ="10.0" SKT="10.0" SLQT="10.0" SNAP="10.0" SOS="10.0" SQ="10.0" SWK="10.0" TAP="10.0" TGTX="10.0" TSIA="10.0" TSLA="10.0" TZA="10.0" U="10.0" UAL="10.0" UAMY="10.0" UEC="10.0" UIS="10.0" USWS="10.0" UUUU="10.0" VALE="10.0" VIX="10.0" VJET="10.0" VTRS="10.0" WETF="10.0" WKHS="10.0" X="10.0" XERS="10.0" XL="10.0" XLP="10.0" XLU="10.0" XTLB="10.0" YGMZ="10.0" ZM="10.0"/>
                  </TRG_0>
                </OCO_STOP>
                <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="1.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AA="1.0" AAL="1.0" AAPL="1.0" ADBE="1.0" AEG="1.0" AFI="1.0" AMC="1.0" AMCR="1.0" AMD="1.0" AMRS="1.0" AMZN="1.0" ANTE="1.0" AP="1.0" ARLO="1.0" AXL="1.0" BA="1.0" BBBY="1.0" BBD="1.0" BMY="1.0" BSGM="1.0" BURL="1.0" BXRX="1.0" CAKE="1.0" CCI="1.0" CCIV="1.0" CCJ="1.0" CHNG="1.0" CHX="1.0" CIDM="1.0" CLBS="1.0" CLDR="1.0" CLSN="1.0" CNNE="1.0" COHN="1.0" CRBP="1.0" CSCO="1.0" CVX="1.0" DHT="1.0" DIS="1.0" DISCK="1.0" DNN="1.0" DPW="1.0" DS="1.0" EMAN="1.0" ETSY="1.0" EVRG="1.0" EW="1.0" EWA="1.0" EYE="1.0" EYES="1.0" FAST="1.0" FCAC="1.0" FPRX="1.0" FSLR="1.0" FSR="1.0" FUSE="1.0" GEL="1.0" GME="1.0" GOCO="1.0" GOED="1.0" HBI="1.0" HPQ="1.0" HPR="1.0" HTBX="1.0" HTZ="1.0" HUGE="1.0" HYLN="1.0" HZON="1.0" IDEX="1.0" IDXX="1.0" IGSB="1.0" INFI="1.0" INO="1.0" INTC="1.0" INTU="1.0" IZEA="1.0" JE="1.0" KEYS="1.0" KMPH="1.0" LCI="1.0" LCTX="1.0" LKQ="1.0" LUV="1.0" MBT="1.0" MDII="1.0" MESA="1.0" MFGP="1.0" MMDA1="1.0" MRIN="1.0" MX="1.0" NCLH="1.0" NGD="1.0" NGL="1.0" NIO="1.0" NLOK="1.0" NLSN="1.0" NLST="1.0" NNVC="1.0" NOK="1.0" NOV="1.0" NTP="1.0" NVDA="1.0" OCGN="1.0" OGI="1.0" OPEN="1.0" OPGN="1.0" ORCL="1.0" OTIS="1.0" OVID="1.0" PAA="1.0" PAAS="1.0" PERI="1.0" PFF="1.0" PGX="1.0" POTX="1.0" PPG="1.0" PTE="1.0" RAD="1.0" RKT="1.0" RP="1.0" RPAY="1.0" RRD="1.0" RSX="1.0" RUT="1.0" SAVA="1.0" SID="1.0" SIFY="1.0" SINO="1.0" SIOX="1.0" SITC="1.0" SIVR="1.0" SKLZ="1.0" SKT="1.0" SLQT="1.0" SNAP="1.0" SOS="1.0" SQ="1.0" SWK="1.0" TAP="1.0" TGTX="1.0" TSIA="1.0" TSLA="1.0" TZA="1.0" U="1.0" UAL="1.0" UAMY="1.0" UEC="1.0" UIS="1.0" USWS="1.0" UUUU="1.0" VALE="1.0" VIX="1.0" VJET="1.0" VTRS="1.0" WETF="1.0" WKHS="1.0" X="1.0" XERS="1.0" XL="1.0" XLP="1.0" XLU="1.0" XTLB="1.0" YGMZ="1.0" ZM="1.0"/>
                </TRG_0>
                <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-1.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AA="-1.0" AAL="-1.0" AAPL="-1.0" ADBE="-1.0" AEG="-1.0" AFI="-1.0" AMC="-1.0" AMCR="-1.0" AMD="-1.0" AMRS="-1.0" AMZN="-1.0" ANTE="-1.0" AP="-1.0" ARLO="-1.0" AXL="-1.0" BA="-1.0" BBBY="-1.0" BBD="-1.0" BMY="-1.0" BSGM="-1.0" BURL="-1.0" BXRX="-1.0" CAKE="-1.0" CCI="-1.0" CCIV="-1.0" CCJ="-1.0" CHNG="-1.0" CHX="-1.0" CIDM="-1.0" CLBS="-1.0" CLDR="-1.0" CLSN="-1.0" CNNE="-1.0" COHN="-1.0" CRBP="-1.0" CSCO="-1.0" CVX="-1.0" DHT="-1.0" DIS="-1.0" DISCK="-1.0" DNN="-1.0" DPW="-1.0" DS="-1.0" EMAN="-1.0" ETSY="-1.0" EVRG="-1.0" EW="-1.0" EWA="-1.0" EYE="-1.0" EYES="-1.0" FAST="-1.0" FCAC="-1.0" FPRX="-1.0" FSLR="-1.0" FSR="-1.0" FUSE="-1.0" GEL="-1.0" GME="-1.0" GOCO="-1.0" GOED="-1.0" HBI="-1.0" HPQ="-1.0" HPR="-1.0" HTBX="-1.0" HTZ="-1.0" HUGE="-1.0" HYLN="-1.0" HZON="-1.0" IDEX="-1.0" IDXX="-1.0" IGSB="-1.0" INFI="-1.0" INO="-1.0" INTC="-1.0" INTU="-1.0" IZEA="-1.0" JE="-1.0" KEYS="-1.0" KMPH="-1.0" LCI="-1.0" LCTX="-1.0" LKQ="-1.0" LUV="-1.0" MBT="-1.0" MDII="-1.0" MESA="-1.0" MFGP="-1.0" MMDA1="-1.0" MRIN="-1.0" MX="-1.0" NCLH="-1.0" NGD="-1.0" NGL="-1.0" NIO="-1.0" NLOK="-1.0" NLSN="-1.0" NLST="-1.0" NNVC="-1.0" NOK="-1.0" NOV="-1.0" NTP="-1.0" NVDA="-1.0" OCGN="-1.0" OGI="-1.0" OPEN="-1.0" OPGN="-1.0" ORCL="-1.0" OTIS="-1.0" OVID="-1.0" PAA="-1.0" PAAS="-1.0" PERI="-1.0" PFF="-1.0" PGX="-1.0" POTX="-1.0" PPG="-1.0" PTE="-1.0" RAD="-1.0" RKT="-1.0" RP="-1.0" RPAY="-1.0" RRD="-1.0" RSX="-1.0" RUT="-1.0" SAVA="-1.0" SID="-1.0" SIFY="-1.0" SINO="-1.0" SIOX="-1.0" SITC="-1.0" SIVR="-1.0" SKLZ="-1.0" SKT="-1.0" SLQT="-1.0" SNAP="-1.0" SOS="-1.0" SQ="-1.0" SWK="-1.0" TAP="-1.0" TGTX="-1.0" TSIA="-1.0" TSLA="-1.0" TZA="-1.0" U="-1.0" UAL="-1.0" UAMY="-1.0" UEC="-1.0" UIS="-1.0" USWS="-1.0" UUUU="-1.0" VALE="-1.0" VIX="-1.0" VJET="-1.0" VTRS="-1.0" WETF="-1.0" WKHS="-1.0" X="-1.0" XERS="-1.0" XL="-1.0" XLP="-1.0" XLU="-1.0" XTLB="-1.0" YGMZ="-1.0" ZM="-1.0"/>
                </TRG_1>
                <_2>
                  <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="2.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL AA="2.0" AAL="2.0" AAPL="2.0" ADBE="2.0" AEG="2.0" AFI="2.0" AMC="2.0" AMCR="2.0" AMD="2.0" AMRS="2.0" AMZN="2.0" ANTE="2.0" AP="2.0" ARLO="2.0" AXL="2.0" BA="2.0" BBBY="2.0" BBD="2.0" BMY="2.0" BSGM="2.0" BURL="2.0" BXRX="2.0" CAKE="2.0" CCI="2.0" CCIV="2.0" CCJ="2.0" CHNG="2.0" CHX="2.0" CIDM="2.0" CLBS="2.0" CLDR="2.0" CLSN="2.0" CNNE="2.0" COHN="2.0" CRBP="2.0" CSCO="2.0" CVX="2.0" DHT="2.0" DIS="2.0" DISCK="2.0" DNN="2.0" DPW="2.0" DS="2.0" EMAN="2.0" ETSY="2.0" EVRG="2.0" EW="2.0" EWA="2.0" EYE="2.0" EYES="2.0" FAST="2.0" FCAC="2.0" FPRX="2.0" FSLR="2.0" FSR="2.0" FUSE="2.0" GEL="2.0" GME="2.0" GOCO="2.0" GOED="2.0" HBI="2.0" HPQ="2.0" HPR="2.0" HTBX="2.0" HTZ="2.0" HUGE="2.0" HYLN="2.0" HZON="2.0" IDEX="2.0" IDXX="2.0" IGSB="2.0" INFI="2.0" INO="2.0" INTC="2.0" INTU="2.0" IZEA="2.0" JE="2.0" KEYS="2.0" KMPH="2.0" LCI="2.0" LCTX="2.0" LKQ="2.0" LUV="2.0" MBT="2.0" MDII="2.0" MESA="2.0" MFGP="2.0" MMDA1="2.0" MRIN="2.0" MX="2.0" NCLH="2.0" NGD="2.0" NGL="2.0" NIO="2.0" NLOK="2.0" NLSN="2.0" NLST="2.0" NNVC="2.0" NOK="2.0" NOV="2.0" NTP="2.0" NVDA="2.0" OCGN="2.0" OGI="2.0" OPEN="2.0" OPGN="2.0" ORCL="2.0" OTIS="2.0" OVID="2.0" PAA="2.0" PAAS="2.0" PERI="2.0" PFF="2.0" PGX="2.0" POTX="2.0" PPG="2.0" PTE="2.0" RAD="2.0" RKT="2.0" RP="2.0" RPAY="2.0" RRD="2.0" RSX="2.0" RUT="2.0" SAVA="2.0" SID="2.0" SIFY="2.0" SINO="2.0" SIOX="2.0" SITC="2.0" SIVR="2.0" SKLZ="2.0" SKT="2.0" SLQT="2.0" SNAP="2.0" SOS="2.0" SQ="2.0" SWK="2.0" TAP="2.0" TGTX="2.0" TSIA="2.0" TSLA="2.0" TZA="2.0" U="2.0" UAL="2.0" UAMY="2.0" UEC="2.0" UIS="2.0" USWS="2.0" UUUU="2.0" VALE="2.0" VIX="2.0" VJET="2.0" VTRS="2.0" WETF="2.0" WKHS="2.0" X="2.0" XERS="2.0" XL="2.0" XLP="2.0" XLU="2.0" XTLB="2.0" YGMZ="2.0" ZM="2.0"/>
                  </TRG_0>
                  <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-2.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL AA="-2.0" AAL="-2.0" AAPL="-2.0" ADBE="-2.0" AEG="-2.0" AFI="-2.0" AMC="-2.0" AMCR="-2.0" AMD="-2.0" AMRS="-2.0" AMZN="-2.0" ANTE="-2.0" AP="-2.0" ARLO="-2.0" AXL="-2.0" BA="-2.0" BBBY="-2.0" BBD="-2.0" BMY="-2.0" BSGM="-2.0" BURL="-2.0" BXRX="-2.0" CAKE="-2.0" CCI="-2.0" CCIV="-2.0" CCJ="-2.0" CHNG="-2.0" CHX="-2.0" CIDM="-2.0" CLBS="-2.0" CLDR="-2.0" CLSN="-2.0" CNNE="-2.0" COHN="-2.0" CRBP="-2.0" CSCO="-2.0" CVX="-2.0" DHT="-2.0" DIS="-2.0" DISCK="-2.0" DNN="-2.0" DPW="-2.0" DS="-2.0" EMAN="-2.0" ETSY="-2.0" EVRG="-2.0" EW="-2.0" EWA="-2.0" EYE="-2.0" EYES="-2.0" FAST="-2.0" FCAC="-2.0" FPRX="-2.0" FSLR="-2.0" FSR="-2.0" FUSE="-2.0" GEL="-2.0" GME="-2.0" GOCO="-2.0" GOED="-2.0" HBI="-2.0" HPQ="-2.0" HPR="-2.0" HTBX="-2.0" HTZ="-2.0" HUGE="-2.0" HYLN="-2.0" HZON="-2.0" IDEX="-2.0" IDXX="-2.0" IGSB="-2.0" INFI="-2.0" INO="-2.0" INTC="-2.0" INTU="-2.0" IZEA="-2.0" JE="-2.0" KEYS="-2.0" KMPH="-2.0" LCI="-2.0" LCTX="-2.0" LKQ="-2.0" LUV="-2.0" MBT="-2.0" MDII="-2.0" MESA="-2.0" MFGP="-2.0" MMDA1="-2.0" MRIN="-2.0" MX="-2.0" NCLH="-2.0" NGD="-2.0" NGL="-2.0" NIO="-2.0" NLOK="-2.0" NLSN="-2.0" NLST="-2.0" NNVC="-2.0" NOK="-2.0" NOV="-2.0" NTP="-2.0" NVDA="-2.0" OCGN="-2.0" OGI="-2.0" OPEN="-2.0" OPGN="-2.0" ORCL="-2.0" OTIS="-2.0" OVID="-2.0" PAA="-2.0" PAAS="-2.0" PERI="-2.0" PFF="-2.0" PGX="-2.0" POTX="-2.0" PPG="-2.0" PTE="-2.0" RAD="-2.0" RKT="-2.0" RP="-2.0" RPAY="-2.0" RRD="-2.0" RSX="-2.0" RUT="-2.0" SAVA="-2.0" SID="-2.0" SIFY="-2.0" SINO="-2.0" SIOX="-2.0" SITC="-2.0" SIVR="-2.0" SKLZ="-2.0" SKT="-2.0" SLQT="-2.0" SNAP="-2.0" SOS="-2.0" SQ="-2.0" SWK="-2.0" TAP="-2.0" TGTX="-2.0" TSIA="-2.0" TSLA="-2.0" TZA="-2.0" U="-2.0" UAL="-2.0" UAMY="-2.0" UEC="-2.0" UIS="-2.0" USWS="-2.0" UUUU="-2.0" VALE="-2.0" VIX="-2.0" VJET="-2.0" VTRS="-2.0" WETF="-2.0" WKHS="-2.0" X="-2.0" XERS="-2.0" XL="-2.0" XLP="-2.0" XLU="-2.0" XTLB="-2.0" YGMZ="-2.0" ZM="-2.0"/>
                  </TRG_1>
                </_2>
                <_3>
                  <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="3.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL AA="3.0" AAL="3.0" AAPL="3.0" ADBE="3.0" AEG="3.0" AFI="3.0" AMC="3.0" AMCR="3.0" AMD="3.0" AMRS="3.0" AMZN="3.0" ANTE="3.0" AP="3.0" ARLO="3.0" AXL="3.0" BA="3.0" BBBY="3.0" BBD="3.0" BMY="3.0" BSGM="3.0" BURL="3.0" BXRX="3.0" CAKE="3.0" CCI="3.0" CCIV="3.0" CCJ="3.0" CHNG="3.0" CHX="3.0" CIDM="3.0" CLBS="3.0" CLDR="3.0" CLSN="3.0" CNNE="3.0" COHN="3.0" CRBP="3.0" CSCO="3.0" CVX="3.0" DHT="3.0" DIS="3.0" DISCK="3.0" DNN="3.0" DPW="3.0" DS="3.0" EMAN="3.0" ETSY="3.0" EVRG="3.0" EW="3.0" EWA="3.0" EYE="3.0" EYES="3.0" FAST="3.0" FCAC="3.0" FPRX="3.0" FSLR="3.0" FSR="3.0" FUSE="3.0" GEL="3.0" GME="3.0" GOCO="3.0" GOED="3.0" HBI="3.0" HPQ="3.0" HPR="3.0" HTBX="3.0" HTZ="3.0" HUGE="3.0" HYLN="3.0" HZON="3.0" IDEX="3.0" IDXX="3.0" IGSB="3.0" INFI="3.0" INO="3.0" INTC="3.0" INTU="3.0" IZEA="3.0" JE="3.0" KEYS="3.0" KMPH="3.0" LCI="3.0" LCTX="3.0" LKQ="3.0" LUV="3.0" MBT="3.0" MDII="3.0" MESA="3.0" MFGP="3.0" MMDA1="3.0" MRIN="3.0" MX="3.0" NCLH="3.0" NGD="3.0" NGL="3.0" NIO="3.0" NLOK="3.0" NLSN="3.0" NLST="3.0" NNVC="3.0" NOK="3.0" NOV="3.0" NTP="3.0" NVDA="3.0" OCGN="3.0" OGI="3.0" OPEN="3.0" OPGN="3.0" ORCL="3.0" OTIS="3.0" OVID="3.0" PAA="3.0" PAAS="3.0" PERI="3.0" PFF="3.0" PGX="3.0" POTX="3.0" PPG="3.0" PTE="3.0" RAD="3.0" RKT="3.0" RP="3.0" RPAY="3.0" RRD="3.0" RSX="3.0" RUT="3.0" SAVA="3.0" SID="3.0" SIFY="3.0" SINO="3.0" SIOX="3.0" SITC="3.0" SIVR="3.0" SKLZ="3.0" SKT="3.0" SLQT="3.0" SNAP="3.0" SOS="3.0" SQ="3.0" SWK="3.0" TAP="3.0" TGTX="3.0" TSIA="3.0" TSLA="3.0" TZA="3.0" U="3.0" UAL="3.0" UAMY="3.0" UEC="3.0" UIS="3.0" USWS="3.0" UUUU="3.0" VALE="3.0" VIX="3.0" VJET="3.0" VTRS="3.0" WETF="3.0" WKHS="3.0" X="3.0" XERS="3.0" XL="3.0" XLP="3.0" XLU="3.0" XTLB="3.0" YGMZ="3.0" ZM="3.0"/>
                  </TRG_0>
                  <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-3.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL AA="-3.0" AAL="-3.0" AAPL="-3.0" ADBE="-3.0" AEG="-3.0" AFI="-3.0" AMC="-3.0" AMCR="-3.0" AMD="-3.0" AMRS="-3.0" AMZN="-3.0" ANTE="-3.0" AP="-3.0" ARLO="-3.0" AXL="-3.0" BA="-3.0" BBBY="-3.0" BBD="-3.0" BMY="-3.0" BSGM="-3.0" BURL="-3.0" BXRX="-3.0" CAKE="-3.0" CCI="-3.0" CCIV="-3.0" CCJ="-3.0" CHNG="-3.0" CHX="-3.0" CIDM="-3.0" CLBS="-3.0" CLDR="-3.0" CLSN="-3.0" CNNE="-3.0" COHN="-3.0" CRBP="-3.0" CSCO="-3.0" CVX="-3.0" DHT="-3.0" DIS="-3.0" DISCK="-3.0" DNN="-3.0" DPW="-3.0" DS="-3.0" EMAN="-3.0" ETSY="-3.0" EVRG="-3.0" EW="-3.0" EWA="-3.0" EYE="-3.0" EYES="-3.0" FAST="-3.0" FCAC="-3.0" FPRX="-3.0" FSLR="-3.0" FSR="-3.0" FUSE="-3.0" GEL="-3.0" GME="-3.0" GOCO="-3.0" GOED="-3.0" HBI="-3.0" HPQ="-3.0" HPR="-3.0" HTBX="-3.0" HTZ="-3.0" HUGE="-3.0" HYLN="-3.0" HZON="-3.0" IDEX="-3.0" IDXX="-3.0" IGSB="-3.0" INFI="-3.0" INO="-3.0" INTC="-3.0" INTU="-3.0" IZEA="-3.0" JE="-3.0" KEYS="-3.0" KMPH="-3.0" LCI="-3.0" LCTX="-3.0" LKQ="-3.0" LUV="-3.0" MBT="-3.0" MDII="-3.0" MESA="-3.0" MFGP="-3.0" MMDA1="-3.0" MRIN="-3.0" MX="-3.0" NCLH="-3.0" NGD="-3.0" NGL="-3.0" NIO="-3.0" NLOK="-3.0" NLSN="-3.0" NLST="-3.0" NNVC="-3.0" NOK="-3.0" NOV="-3.0" NTP="-3.0" NVDA="-3.0" OCGN="-3.0" OGI="-3.0" OPEN="-3.0" OPGN="-3.0" ORCL="-3.0" OTIS="-3.0" OVID="-3.0" PAA="-3.0" PAAS="-3.0" PERI="-3.0" PFF="-3.0" PGX="-3.0" POTX="-3.0" PPG="-3.0" PTE="-3.0" RAD="-3.0" RKT="-3.0" RP="-3.0" RPAY="-3.0" RRD="-3.0" RSX="-3.0" RUT="-3.0" SAVA="-3.0" SID="-3.0" SIFY="-3.0" SINO="-3.0" SIOX="-3.0" SITC="-3.0" SIVR="-3.0" SKLZ="-3.0" SKT="-3.0" SLQT="-3.0" SNAP="-3.0" SOS="-3.0" SQ="-3.0" SWK="-3.0" TAP="-3.0" TGTX="-3.0" TSIA="-3.0" TSLA="-3.0" TZA="-3.0" U="-3.0" UAL="-3.0" UAMY="-3.0" UEC="-3.0" UIS="-3.0" USWS="-3.0" UUUU="-3.0" VALE="-3.0" VIX="-3.0" VJET="-3.0" VTRS="-3.0" WETF="-3.0" WKHS="-3.0" X="-3.0" XERS="-3.0" XL="-3.0" XLP="-3.0" XLU="-3.0" XTLB="-3.0" YGMZ="-3.0" ZM="-3.0"/>
                  </TRG_1>
                </_3>
              </TRADE_BUTTONS_CONFIG>
            </ACTIVETRADER>
            <BIG_BUTTONS VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <CHART COLUMN_COUNT="1" CONFIGURATION="@v9@%0:com.devexperts.toschart.model,1:com.devexperts.tos.chartdata,2:com.devexperts.tos.thinkscript.constants,3:com.devexperts.tos.thinkscript.data,4:java.awt,5:com.devexperts.toschart.utils,6:com.devexperts.toschart.control.subgraph,7:com.devexperts.toschart.elstudies,8:com.devexperts.toschart.script%owner{chartAggregationPeriods:ChartAggregationPeriodArray0{25::ChartAggregationPeriod0},chartAggregationPeriods=@ChartAggregationPeriodArray0,colors{7::CustomColor0,9::CustomColor1,8::CustomColor2,1::CustomColor3,5::CustomColor4,6::CustomColor5}}#com.devexperts.toschart.core.ChartModel{disabledMessageTypes.+(!%0.BuiltinExplanationMessage$MessageType.findByCode(1)),encodedMixinsState=&quot;{\&quot;common\&quot;:{\&quot;DRAWING_SETS\&quot;:\&quot;{}\&quot;},\&quot;state_props\&quot;:{\&quot;state_type\&quot;:\&quot;REGULAR\&quot;},\&quot;monkey_bars_exp\&quot;:{\&quot;LikefolioMixin\&quot;:\&quot;{\\\&quot;paintingSettings\\\&quot;:{\\\&quot;neutralSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;positiveSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;negativeSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;sentimentSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true}},\\\&quot;shownDivisions\\\&quot;:[],\\\&quot;allDivisions\\\&quot;:[]}\&quot;},\&quot;monkey_bars\&quot;:{},\&quot;seasonality\&quot;:{},\&quot;regular\&quot;:{\&quot;DescriberMixin\&quot;:\&quot;{\\\&quot;visibility\\\&quot;:\\\&quot;HIDE_PANEL\\\&quot;,\\\&quot;studiesMode\\\&quot;:\\\&quot;HIDE_STUDIES\\\&quot;}\&quot;,\&quot;LikefolioMixin\&quot;:\&quot;{\\\&quot;paintingSettings\\\&quot;:{\\\&quot;neutralSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;positiveSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;negativeSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;sentimentSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true}},\\\&quot;shownDivisions\\\&quot;:[],\\\&quot;allDivisions\\\&quot;:[]}\&quot;}}&quot;,encodedPatternsModel=&quot;{\&quot;showPatterns\&quot;:true,\&quot;models\&quot;:[],\&quot;fibModels\&quot;:[]}&quot;,groupId=&quot;default&quot;,styleSettings{activeTool=2,chartAggregationSettings.timeAggregationSettings=!%0.TimeFrameAggregationSettings.createTickOrTimeAggregation(!%1.ChartRange.findByCode(&quot;YEAR10&quot;),@ChartAggregationPeriod0),commonStyleSettings{chartModeName:ChartModeName0,chartModes.!get(@ChartModeName0){chartPaintingType=!java.lang.Enum.valueOf(*%2.ChartPaintingType.class,&quot;BAR&quot;)},colorSettings{backgroundColor=!%3.CustomColor.findByIndex(&quot;101&quot;),barTypeColors{downColor=#%3.CustomColor(#%4.Color(51,51,255,255)),neutralColor=@CustomColor0,upColor=@CustomColor1},candleTypeColors.fillUp=&lt;T,monkeyProfileTypeColors.defaultRowHeight=&lt;F,mpExpandedTypeColors.defaultRowHeight=&lt;F,volumeColor=@CustomColor0},expansion{down=20,right=10,up=20},fitArrowsToScreen=&lt;F,fitStudiesToScreen=&lt;F,leftAxisRegulator{maxValue=21.34114905d,minValue=16.81218429d},manualAxisRegulator{maxValue=22.91426431d,minValue=8.44689373d},overlappedVolume=&lt;T,previousRightExpansion=10,shortCuts{^(&quot;Time Zone&quot;,&lt;F),^(&quot;Show Expiration Friday &quot;,&lt;F),^(&quot;Keep Price Zoom&quot;,&lt;F),^(&quot;enableLeftAxis&quot;,&lt;F),^(&quot;Fit expected price ranges&quot;,&lt;F),^(&quot;emphasizeDigitMPExpanded&quot;,&lt;F),^(&quot;showWicksCandleTrend&quot;,&lt;F),^(&quot;highlightEarnings&quot;,&lt;F),^(&quot;synchronizeCrosshair&quot;,&lt;F),^(&quot;myToolsMode&quot;,&lt;F),^(&quot;seasonalityStyle&quot;,&lt;F),^(&quot;Show Price Subgraph&quot;,&lt;F),^(&quot;closePriceLevel&quot;,&lt;F),^(&quot;Color Volume As Symbol Ticks&quot;,&lt;F),^(&quot;highlightPhantomRBars&quot;,&lt;F),^(&quot;Cross type &quot;,&lt;F),^(&quot;Fit Studies to Screen&quot;,&lt;F),^(&quot;Fit Orders&quot;,&lt;F),^(&quot;Bubbles as Percentage&quot;,&lt;F),^(&quot;hideStatusString&quot;,&lt;F),^(&quot;Show Studies &quot;,&lt;F),^(&quot;showWicksHeikinAshi&quot;,&lt;F),^(&quot;Alerts&quot;,&lt;F),^(&quot;Chart scale&quot;,&lt;F),^(&quot;Fit High/Low&quot;,&lt;F),^(&quot;Orders&quot;,&lt;F),!get:Boolean0(&quot;Chart mode&quot;),^(&quot;Use Log Scale &quot;,@Boolean0),^(&quot;Fit Study Markers to Screen&quot;,&lt;F),^(&quot;Fit Alerts&quot;,&lt;F),^(&quot;Fit patterns&quot;,&lt;F),^(&quot;Percentage View&quot;,&lt;F),^(&quot;Make Auto Zoom &quot;,&lt;F),^(&quot;Show Year Marking Line&quot;,&lt;F),^(&quot;Show Rollover Line&quot;,&lt;F),^(&quot;Show High/Low Bubbles &quot;,&lt;F),^(&quot;Snap mode&quot;,&lt;F),^(&quot;highlightStudies&quot;,&lt;F),^(&quot;Overlapped Volume&quot;,&lt;F),^(&quot;Show Symbol Logo&quot;,&lt;F),^(&quot;Show Last Price Bubble &quot;,&lt;F),^(&quot;emphasizeDigitMP&quot;,&lt;F),^(&quot;Snap crosshairs to&quot;,&lt;F),^(&quot;Show grid&quot;,&lt;F),^(&quot;showWicksCandle&quot;,&lt;F),^(&quot;Show trades&quot;,&lt;F),^(&quot;highlightSeasons&quot;,&lt;F),^(&quot;Snap drawings to&quot;,&lt;F),^(&quot;Extend Order/Alert Line to Left&quot;,&lt;F)},showExpFriday=&lt;F,showTradeExecution=&lt;T,snapMode=!%5.SnapUtils$SnapMode.valueOf(*%5.SnapUtils$SnapMode.class,&quot;SNAP_TO_HLOC&quot;),step=76.92307692307692d,suppressAutoZoom=&lt;T},forexStyleSettings.shortCuts.^(&quot;Show Volume Subgraph&quot;,&lt;F),futuresStyleSettings{highlightExtendedHours=&lt;T,shortCuts{^(&quot;adjustForContractChanges&quot;,&lt;F),^(&quot;Show Open Interest&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,@Boolean0),^(&quot;showContractChangeEvents&quot;,&lt;F),^(&quot;futures_daily_close_price&quot;,&lt;F),^(&quot;Show Options&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,&lt;F),^(&quot;startAtMarketOpen&quot;,&lt;F)},showOpenInterest=&lt;F,showVolume=&lt;F},optionsStyleSettings.shortCuts{^(&quot;Show Open Interest&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,@Boolean0),^(&quot;Show Theo Price&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,&lt;F),^(&quot;startAtMarketOpen&quot;,&lt;F)},otherStyleSettings{shortCuts{^(&quot;Show Social Sentiment&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,@Boolean0),^(&quot;Show Options&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,@Boolean0),^(&quot;Show Corporate Actions&quot;,&lt;F),^(&quot;Show CNBC Video&quot;,&lt;F),^(&quot;startAtMarketOpen&quot;,&lt;F),^(&quot;adjustForDividends&quot;,&lt;F)},showVolume=&lt;F,startAggregationAtMarketOpen=&lt;F},setsIdentifiers.styleSetName=&quot;waveTech6&quot;},subgraphModels{!get(#%6.SubgraphId(&quot;Symbol&quot;)){height=423,storableIndicators{+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence{body=&quot;# @new\n# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2009-2021\n#\n# Source code isn\'t available.\n\nplot slowAvg = Double.NaN;\nplot fastAvg = Double.NaN;\nplot BuySignal = Double.NaN;\nplot SellSignal = Double.NaN;&quot;,name=&quot;PPS&quot;}){hidden=&lt;T}),+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence{body=&quot;# @new\n# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2009-2021\n#\n\n#wizard input: length1\n#wizard text: -period\n#wizard input: averageType1\n#wizard text: crosses\n#wizard input: crossingType\n#wizard input: length2\n#wizard text: -period\n#wizard input: averageType2\n#wizard text: Price:\n#wizard input: price\n\ninput price = close;\ninput length1 = 15;\ninput length2 = 30;\ninput averageType1 = AverageType.Simple;\ninput averageType2 = AverageType.Simple;\ninput crossingType = {default above, below};\n\ndef avg1 = MovingAverage(averageType1, price, length1);\ndef avg2 = MovingAverage(averageType2, price, length2);\n\nplot signal = crosses(avg1, avg2, crossingType == CrossingType.above);\n\nsignal.DefineColor(\&quot;Above\&quot;, GetColor(6));\nsignal.DefineColor(\&quot;Below\&quot;, GetColor(7));\nsignal.AssignValueColor(if crossingType == CrossingType.above then signal.color(\&quot;Above\&quot;) else signal.color(\&quot;Below\&quot;));\n\nsignal.SetPaintingStrategy(if crossingType == CrossingType.above\n    then PaintingStrategy.BOOLEAN_ARROW_UP\n    else PaintingStrategy.BOOLEAN_ARROW_DOWN);&quot;,name=&quot;MovingAvgCrossover&quot;}){inputsMap:TreeMap0{^(&quot;averageType1&quot;,&quot;EXPONENTIAL&quot;),^(&quot;averageType2&quot;,&quot;EXPONENTIAL&quot;),^(&quot;length1&quot;,34),^(&quot;length2&quot;,150),^(&quot;price&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap0,plots{0:{palette.^(&quot;Above&quot;,!%3.CustomColor.findByIndex(&quot;16&quot;))}}}),+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence{body=&quot;# Original Code From: TD Ameritrade IP Company, Inc. (c) 2009-2020\n# Original StudyName: ATRTrailingStop\n# Type: Study\n\n# blackFLAG FTS SwingArms \n# Edited by: Jose Azcarate \n# blackFLAG Futures Trading - FOR EDUCATIONAL PURPOSES ONLY\n# TWITTER: @blackflagfuture\n# Settings Vary. My preferred setting is 28 / 5  But also use 30 / 8 and 5 / 3.5 depending on strategy.\n\ninput trailType = {default modified, unmodified};\ninput ATRPeriod = 28;\ninput ATRFactor = 5;\ninput firstTrade = {default long, short};\ninput averageType = AverageType.WILDERS;\n\ninput fib1Level = 61.8;\ninput fib2Level = 78.6;\ninput fib3Level = 88.6;\n\nAssert(ATRFactor &gt; 0, \&quot;\'atr factor\' must be positive: \&quot; + ATRFactor);\n\ndef HiLo = Min(high - low, 1.5 * Average(high - low, ATRPeriod));\ndef HRef = if low &lt;= high[1]\n    then high - close[1]\n    else (high - close[1]) - 0.5 * (low - high[1]);\ndef LRef = if high &gt;= low[1]\n    then close[1] - low\n    else (close[1] - low) - 0.5 * (low[1] - high);\n\ndef trueRange;\nswitch (trailType) {\ncase modified:\n    trueRange = Max(HiLo, Max(HRef, LRef));\ncase unmodified:\n    trueRange = TrueRange(high, close, low);\n}\ndef loss = ATRFactor * MovingAverage(averageType, trueRange, ATRPeriod);\n\ndef state = {default init, long, short};\ndef trail;\nswitch (state[1]) {\ncase init:\n    if (!IsNaN(loss)) {\n        switch (firstTrade) {\n        case long:\n            state = state.long;\n            trail = close - loss;\n        case short:\n            state = state.short;\n            trail = close + loss;\n    }\n    } else {\n        state = state.init;\n        trail = Double.NaN;\n    }\ncase long:\n    if (close &gt; trail[1]) {\n        state = state.long;\n        trail = Max(trail[1], close - loss);\n    } else {\n        state = state.short;\n        trail = close + loss;\n    }\ncase short:\n    if (close &lt; trail[1]) {\n        state = state.short;\n        trail = Min(trail[1], close + loss);\n    } else {\n        state = state.long;\n        trail = close - loss;\n    }\n}\n\ndef BuySignal = Crosses(state == state.long, 0, CrossingDirection.ABOVE);\ndef SellSignal = Crosses(state == state.short, 0, CrossingDirection.ABOVE);\n\ndef ex = if BuySignal then high else if SellSignal then low else if state == state.long then Max(ex[1], high) else if state == state.short then Min(ex[1], low) else ex[1];\n\nplot TrailingStop = trail;\n\nTrailingStop.SetPaintingStrategy(PaintingStrategy.POINTS);\nTrailingStop.DefineColor(\&quot;Long\&quot;, Color.GREEN);\nTrailingStop.DefineColor(\&quot;Short\&quot;, Color.RED);\nTrailingStop.AssignValueColor(if state == state.long\n    then TrailingStop.Color(\&quot;Long\&quot;)\n    else TrailingStop.Color(\&quot;Short\&quot;));\n\nplot Extremum = ex;\nExtremum.SetPaintingStrategy(PaintingStrategy.POINTS);\nExtremum.DefineColor(\&quot;HH\&quot;, Color.GREEN);\nExtremum.DefineColor(\&quot;LL\&quot;, Color.RED);\nExtremum.AssignValueColor(if state == state.long\n    then Extremum.Color(\&quot;HH\&quot;)\n    else Extremum.Color(\&quot;LL\&quot;));\nExtremum.Hide();\n\ndef f1 = ex + (trail - ex) * fib1Level / 100;\ndef f2 = ex + (trail - ex) * fib2Level / 100;\ndef f3 = ex + (trail - ex) * fib3Level / 100;\ndef l100 = trail + 0;\n###mahi\ninput  price =close;\nplot buySignalcnfm =  state == state.long and price crosses above f3;\nbuySignalcnfm.setPaintingStrategy(paintingStrategy.BOOLEAN_ARROW_UP); #SetPaintingStrategy(PaintingStrategy.POINTS);\nbuysignalcnfm.setLineWeight(5);\nbuysignalcnfm.SetDefaultColor(Color.pink);\n\n\n#####\nplot Fib1 = f1;\nFib1.SetPaintingStrategy(PaintingStrategy.POINTS);\nFib1.SetDefaultColor(Color.white);\nFib1.Hide();\n\nFib1.DefineColor(\&quot;Fshort\&quot;,  Color.light_red);\nFib1.DefineColor(\&quot;Flong\&quot;,  Color.Light_green);\nFib1.AssignValueColor(if state == state.long\n    then Fib1.Color(\&quot;Flong\&quot;)\n    else Fib1.Color(\&quot;Fshort\&quot;));\n\nplot Fib2 = f2;\nFib2.SetPaintingStrategy(PaintingStrategy.POINTS);\nFib2.SetDefaultColor(Color.white);\nFib2.Hide();\nFib2.DefineColor(\&quot;Fshort\&quot;,  Color.red);\nFib2.DefineColor(\&quot;Flong\&quot;,  Color.green);\nFib2.AssignValueColor(if state == state.long\n    then Fib2.Color(\&quot;Flong\&quot;)\n    else Fib2.Color(\&quot;Fshort\&quot;));\n\n\nplot Fib3 = f3;\nFib3.SetPaintingStrategy(PaintingStrategy.POINTS);\nFib3.SetDefaultColor(Color.white);\nFib3.Hide();\nFib3.AssignValueColor(if state == state.long\n    then Fib1.Color(\&quot;Flong\&quot;)\n    else Fib1.Color(\&quot;Fshort\&quot;));\n\n#input show_cloud = yes;\n\ndef Na = Double.NaN;\ninput showCloud= yes;\n\ndef cloudF1 = If( ShowCloud, f1, Na);\ndef cloudF2  = If(ShowCloud, f2, Na);\ndef cloudF3  = If(ShowCloud, f3, Na);\n#AddCloud(cloudhigh, cloudlow, Color.GRAY, Color.GRAY);\n\n\n\n\n\n\nAddCloud(cloudF1, cloudF2, Color.LIGHT_GREEN, Color.LIGHT_RED, no);\nAddCloud(cloudF2,cloudF3, Color.GREEN, Color.RED, no);\nAddCloud(cloudF3, l100, Color.DARK_GREEN, Color.DARK_RED, no);\n\ndef l1 = state[1] == state.long and close crosses below f1[1];\ndef l2 = state[1] == state.long and close crosses below f2[1];\ndef l3 = state[1] == state.long and close crosses below f3[1];\ndef s1 = state[1] == state.short and close crosses above f1[1];\ndef s2 = state[1] == state.short and close crosses above f2[1];\ndef s3 = state[1] == state.short and close crosses above f3[1];\n\ndef atr = Average(TrueRange(high, close, low), 14);\n\nplot LS1 = if l1 then low - atr else Double.NaN;\nplot LS2 = if l2 then low - 1.5 * atr else Double.NaN;\nplot LS3 = if l3 then low - 2 * atr else Double.NaN;\nplot SS1 = if s1 then high + atr else Double.NaN;\nplot SS2 = if s2 then high + 1.5 * atr else Double.NaN;\nplot SS3 = if s3 then high + 2 * atr else Double.NaN;\n\nLS1.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\nLS1.SetDefaultColor(Color.GREEN);\nLS1.SetLineWeight(1);\nLS1.Hide();\nLS2.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\nLS2.SetDefaultColor(Color.GREEN);\nLS2.SetLineWeight(1);\nLS2.Hide();\nLS3.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\nLS3.SetDefaultColor(Color.violet);\nLS3.SetLineWeight(4);\n#LS3.Hide();\n\nSS1.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\nSS1.SetDefaultColor(Color.RED);\nSS1.SetLineWeight(1);\nSS1.Hide();\nSS2.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\nSS2.SetDefaultColor(Color.RED);\nSS2.SetLineWeight(1);\nSS2.Hide();\nSS3.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\nSS3.SetDefaultColor(Color.RED);\nSS3.SetLineWeight(1);\nSS3.Hide();\n\nAlert(l1, \&quot;Price crossed below Fib1 level in long trend\&quot;, Alert.BAR, Sound.Bell);\nAlert(l2, \&quot;Price crossed below Fib2 level in long trend\&quot;, Alert.BAR, Sound.Bell);\nAlert(l3, \&quot;Price crossed below Fib3 level in long trend\&quot;, Alert.BAR, Sound.Bell);\nAlert(s1, \&quot;Price crossed above Fib1 level in short trend\&quot;, Alert.BAR, Sound.Bell);\nAlert(s2, \&quot;Price crossed above Fib2 level in short trend\&quot;, Alert.BAR, Sound.Bell);\nAlert(s3, \&quot;Price crossed above Fib3 level in short trend\&quot;, Alert.BAR, Sound.Bell);\n&quot;,name=&quot;_0bb1d049_f213_41ae_b5c1_8617e7c29471&quot;}){alerts:LocalAlertArray0,alerts=@LocalAlertArray0,hidden=&lt;T,inputsMap:TreeMap1{^(&quot;fib1Level&quot;,0.236d),^(&quot;fib2Level&quot;,0.5d),^(&quot;fib3Level&quot;,0.764d),^(&quot;price&quot;,&quot;CLOSE&quot;),^(&quot;showCloud&quot;,&lt;F)},inputsMap=@TreeMap1,plots{0:{hiding=&lt;T},3:{hiding=&lt;F},4:{hiding=&lt;F},5:{hiding=&lt;F}}}),+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence{body=&quot;input marketThreshold = 0.0025;\ninput timeFrame = {default DAY, \&quot;2 DAYS\&quot;, \&quot;3 DAYS\&quot;, \&quot;4 DAYS\&quot;, WEEK, MONTH, \&quot;OPT EXP\&quot;, QUARTER, YEAR};\ninput showOnlyToday = no;\ninput applyPersonsLevelsFilter = yes;\ninput drawLine =yes;\n\nassert(marketThreshold &gt;= 0, \&quot;\'market threshold\' must not be negative: \&quot; + marketThreshold);\n\ndef marketType = {default DISABLED, NEUTRAL, BEARISH, BULLISH};\n\ndef PP2 = high(period = timeFrame)[2] + low(period = timeFrame)[2] + close(period = timeFrame)[2];\n\nmarketType = if !applyPersonsLevelsFilter then marketType.DISABLED else\nif PP2[-1] &gt; (PP2[-1] + PP2 + PP2[1]) / 3 + marketThreshold then marketType.BULLISH else\nif PP2[-1] &lt; (PP2[-1] + PP2 + PP2[1]) / 3 - marketThreshold then marketType.BEARISH else marketType.NEUTRAL;\n\nplot R3;\nplot R2;\nplot R1;\nplot RR;\nplot PP;\nplot SS;\nplot S1;\nplot S2;\nplot S3;\n\nif showOnlyToday and !IsNaN(close(period = timeFrame)[-1])\nthen {\n    R1 = Double.NaN;\n    R2 = Double.NaN;\n    R3 = Double.NaN;\n    PP = Double.NaN;\n    S1 = Double.NaN;\n    S2 = Double.NaN;\n    S3 = Double.NaN;\n} else {\n    PP = (high(period = timeFrame)[1] + low(period = timeFrame)[1] + close(period = timeFrame)[1]) / 3;\n    R1 = 2 * PP - low(period = timeFrame)[1];\n    R2 = PP + high(period = timeFrame)[1] - low(period = timeFrame)[1];\n    R3 = R2 + high(period = timeFrame)[1] - low(period = timeFrame)[1];\n    S1 = 2 * PP - high(period = timeFrame)[1];\n    S2 = PP - high(period = timeFrame)[1] + low(period = timeFrame)[1];\n    S3 = S2 - high(period = timeFrame)[1] + low(period = timeFrame)[1];\n}\n\nRR = if (marketType == marketType.BEARISH or marketType == marketType.NEUTRAL) then R1 else R2;\nSS = if (marketType == marketType.BULLISH or marketType == marketType.NEUTRAL) then S1 else S2;\n\nRR.setHiding(!applyPersonsLevelsFilter);\nR1.setHiding(applyPersonsLevelsFilter);\nR2.setHiding(applyPersonsLevelsFilter);\nR3.hide();\nSS.setHiding(!applyPersonsLevelsFilter);\nS1.setHiding(applyPersonsLevelsFilter);\nS2.setHiding(applyPersonsLevelsFilter);\nS3.hide();\n\nPP.SetDefaultColor(GetColor(0));\nR1.SetDefaultColor(GetColor(5));\nR2.SetDefaultColor(GetColor(5));\nR3.SetDefaultColor(GetColor(5));\nS1.SetDefaultColor(GetColor(6));\nS2.SetDefaultColor(GetColor(6));\nS3.SetDefaultColor(GetColor(6));\n\nSS.DefineColor(\&quot;S1\&quot;, GetColor(6));\nSS.DefineColor(\&quot;S2\&quot;, GetColor(6));\nSS.AssignValueColor(if SS == S1 then SS.color(\&quot;S1\&quot;) else SS.color(\&quot;S2\&quot;));\n\nRR.DefineColor(\&quot;R1\&quot;, GetColor(5));\nRR.DefineColor(\&quot;R2\&quot;, GetColor(5));\nRR.AssignValueColor(if RR == R1 then RR.color(\&quot;R1\&quot;) else RR.color(\&quot;R2\&quot;));\n\nPP.SetStyle(Curve.SHORT_DASH);\nRR.SetStyle(Curve.SHORT_DASH);\nR1.SetStyle(Curve.SHORT_DASH);\nR2.SetStyle(Curve.SHORT_DASH);\nR3.SetStyle(Curve.SHORT_DASH);\nSS.SetStyle(Curve.SHORT_DASH);\nS1.SetStyle(Curve.SHORT_DASH);\nS2.SetStyle(Curve.SHORT_DASH);\nS3.SetStyle(Curve.SHORT_DASH);\n\n\ndef paintingStrategy ;\n\nif drawLine\n{\npaintingStrategy = if timeframe == timeframe.WEEK then PaintingStrategy.LINE_VS_TRIANGLES else if timeFrame == timeFrame.MONTH or timeFrame == timeFrame.\&quot;OPT EXP\&quot; or timeFrame == timeFrame.QUARTER or timeFrame == timeFrame.YEAR then PaintingStrategy.LINE_VS_SQUARES else PaintingStrategy.LINE_VS_POINTS;\n\n}\nelse\n{\npaintingStrategy = if timeframe == timeframe.WEEK then PaintingStrategy.TRIANGLES else if timeFrame == timeFrame.MONTH or timeFrame == timeFrame.\&quot;OPT EXP\&quot; or timeFrame == timeFrame.QUARTER or timeFrame == timeFrame.YEAR then PaintingStrategy.SQUARES else PaintingStrategy.POINTS;\n\n}\n\n#def paintingStrategy = if timeframe == timeframe.WEEK then PaintingStrategy.LINE_VS_TRIANGLES else if timeFrame == timeFrame.MONTH or timeFrame == timeFrame.\&quot;OPT EXP\&quot; or timeFrame == timeFrame.QUARTER or timeFrame == timeFrame.YEAR then PaintingStrategy.LINE_VS_SQUARES else PaintingStrategy.LINE_VS_POINTS;\n\nPP.SetPaintingStrategy(paintingStrategy);\nRR.SetPaintingStrategy(paintingStrategy);\nR1.SetPaintingStrategy(paintingStrategy);\nR2.SetPaintingStrategy(paintingStrategy);\nR3.SetPaintingStrategy(paintingStrategy);\nSS.SetPaintingStrategy(paintingStrategy);\nS1.SetPaintingStrategy(paintingStrategy);\nS2.SetPaintingStrategy(paintingStrategy);\nS3.SetPaintingStrategy(paintingStrategy);&quot;,name=&quot;_99c08cc0_b776_4b49_a3bf_a01dada4cf51&quot;}){hidden=&lt;T,inputsMap:TreeMap2{^(&quot;applyPersonsLevelsFilter&quot;,&lt;F),^(&quot;drawLine&quot;,&lt;F),^(&quot;timeFrame&quot;,&quot;WEEK&quot;)},inputsMap=@TreeMap2,plots{0:{hiding=&lt;F,lineStyle=1},3:{hiding=&lt;T},5:{hiding=&lt;T},8:{hiding=&lt;F}}}),+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence{body=&quot;# AI_Squeeze_Clouds_v1 \n\n# AlphaInvestor - 09/07/2015 - coded up simple method to show clouds for BB/KC squeeze \n\n \ndeclare weak_volume_dependency;\n\ninput displace = 0;\ninput factor = 1.5; #keltnerChannels\ninput length = 20;\ninput price = close;\ninput averageType = AverageType.SIMPLE;\ninput trueRangeAverageType = AverageType.SIMPLE;\n\nAddCloud(bollingerbands(price,0,length,-2.0,2.0,averageType).LowerBand, keltnerChannels(0,factor,length,price,averagetype.simple,trueRangeAverageType).Lower_Band,   Color.cyan,  Color.gray); \n\nAddCloud(keltnerChannels(0,factor,20,price,averagetype.simple,trueRangeAverageType).Upper_Band,bollingerbands(price,0,length,-2.0,2.0,averageType).UpperBand,  Color.pink,  Color.gray); \n\n \n\n# End Study \n\n\ndef shift = factor * MovingAverage(trueRangeAverageType, TrueRange(high, close, low), length);\n\ndef average = MovingAverage(averageType, price, length);\n\nplot Avg = average[-displace];\nAvg.SetDefaultColor(GetColor(1));\n\nplot Upper_Band = average[-displace] + shift[-displace];\nUpper_Band.SetDefaultColor(GetColor(8));\n\nplot Lower_Band = average[-displace] - shift[-displace];\nLower_Band.SetDefaultColor(GetColor(5));\n&quot;,name=&quot;_5b75a5fd_0525_3fa7_b294_5a19e419d099&quot;}){hidden=&lt;T,inputsMap:TreeMap3{^(&quot;price&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap3,plots{0:{lineStyle=3}}}),+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence{body=&quot;# OvernightHiLowLines_mobius_jq\n# GlobeX or Overnight High / Low without Fibonacci Values \n# Based on code by Mobius # V01.2012 \n# cosmetic alterations by Johnny Quotron\n#    1. removal of fib lines\n#    2. paint ONL bubble below the line\n#    3. addition of other comments\n#    4. addition of bubbles in the expansion area if desired\n#\n# Restrictions:  Hi / Low lines are not drawn for non-traded indicies such as VIX or TNX..JQ\n\ndeclare hide_on_daily;\ninput PlotOverNightExtremes = yes;\ninput DisplayPriceBubbleOnHiLowBar = yes;\ninput DisplayPriceBubbleOnRightEdge = yes;  #Haven\'t figured this out yet..JQ\n\ndef o = open;\ndef h = high;\ndef l = low;\ndef c = close;\ndef v = volume;\ndef bar = BarNumber();\ndef GlobeX = GetTime() &lt; RegularTradingStart(GetYYYYMMDD());\n\ndef vol = if GlobeX and !GlobeX[1]\nthen v\nelse if GlobeX\nthen vol[1] + v\nelse Double.NaN;\n\ndef GlobeX_Volume = vol;\n\ndef ONhigh = if GlobeX and !GlobeX[1]\nthen h\nelse if GlobeX and\nh &gt; ONhigh[1]\nthen h\nelse ONhigh[1];\n\ndef ONhighBar = if GlobeX and h == ONhigh\nthen bar\nelse Double.NaN;\n\ndef ONlow = if GlobeX and !GlobeX[1]\nthen l\nelse if GlobeX and\nl &lt; ONlow[1]\nthen l\nelse ONlow[1];\n\ndef ONlowBar = if GlobeX and l == ONlow\nthen bar\nelse Double.NaN;\n\ndef OverNightHigh = if BarNumber() == HighestAll(ONhighBar)\nthen ONhigh\nelse OverNightHigh[1];\n\ndef OverNightLow = if BarNumber() == HighestAll(ONlowBar)\nthen ONlow\nelse OverNightLow[1];\n\n\n#\nplot ONH = if OverNightHigh &gt; 0\nthen OverNightHigh\nelse Double.NaN;\n\nONH.SetHiding(!PlotOverNightExtremes);\nONH.SetPaintingStrategy(PaintingStrategy.SQUARES);\nONH.SetDefaultColor(Color.BLUE);\nONH.HideBubble();\nONH.HideTitle();\n\n#\nplot ONL = if OverNightLow &gt; 0 \nthen OverNightLow\nelse Double.NaN;\n\nONL.SetHiding(!PlotOverNightExtremes);\nONL.SetPaintingStrategy(PaintingStrategy.SQUARES);\nONL.SetDefaultColor(Color.LIGHT_GRAY);\nONL.HideBubble();\nONL.HideTitle();\n\n\n# Bubble code\n#AddChartBubble(bar == ONhighBar and PlotOverNightExtremes and DisplayPriceBubbleOnHiLowBar, ONH, \&quot;ONH: \&quot; + ONH, createColor(204,204,255));\n#AddChartBubble(bar == ONlowBar and PlotOverNightExtremes and DisplayPriceBubbleOnHiLowBar, ONL, \&quot;ONL: \&quot; + ONL, createColor(204,204,255),no);  #designated that the bubble be painted below the ONL line.  2018-04-07 JQ \n\n\nAddChartBubble(barNumber() == highestAll(barnumber()) and  PlotOverNightExtremes and DisplayPriceBubbleOnRightEdge, ONH, \&quot;ONH: \&quot; + ONH, createColor(204,204,255));\nAddChartBubble(barNumber() == highestAll(barnumber()) and PlotOverNightExtremes and DisplayPriceBubbleOnRightEdge, ONL, \&quot;ONL: \&quot; + ONL, createColor(204,204,255),no); \ninput showLable =yes;\nAddLabel(showLable, \&quot;ONL= \&quot; + astext(ONL), if ONL&lt; close then Color.LIGHT_GREEN else if ONL&gt; close then color.LIGHT_red else Color.GRAY);\nAddLabel(showLable, \&quot;ONH= \&quot; + astext(ONH), if ONH&lt; close then Color.LIGHT_GREEN else if ONH&gt; close then color.LIGHT_red else Color.GRAY);\n# End Code GlobeX or Overnight High / Low without Fibonacci Values &quot;,name=&quot;_2b139ce2_bb93_4663_acef_0fb6255d8008&quot;}){plots{0:{lineStyle=3,paintingStrategy=0},1:{color=#%3.CustomColor(#%4.Color(0,0,255,255)),lineStyle=3,paintingStrategy=0}}}),+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence{body=&quot;# @new\n# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2009-2021\n#\n\n#wizard input: length1\n#wizard text: -period\n#wizard input: averageType1\n#wizard text: crosses\n#wizard input: crossingType\n#wizard input: length2\n#wizard text: -period\n#wizard input: averageType2\n#wizard text: Price:\n#wizard input: price\n\ninput price = close;\ninput length1 = 15;\ninput length2 = 30;\ninput averageType1 = AverageType.Simple;\ninput averageType2 = AverageType.Simple;\ninput crossingType = {default above, below};\n\ndef avg1 = MovingAverage(averageType1, price, length1);\ndef avg2 = MovingAverage(averageType2, price, length2);\n\nplot signal = crosses(avg1, avg2, crossingType == CrossingType.above);\n\nsignal.DefineColor(\&quot;Above\&quot;, GetColor(6));\nsignal.DefineColor(\&quot;Below\&quot;, GetColor(7));\nsignal.AssignValueColor(if crossingType == CrossingType.above then signal.color(\&quot;Above\&quot;) else signal.color(\&quot;Below\&quot;));\n\nsignal.SetPaintingStrategy(if crossingType == CrossingType.above\n    then PaintingStrategy.BOOLEAN_ARROW_UP\n    else PaintingStrategy.BOOLEAN_ARROW_DOWN);&quot;,name=&quot;MovingAvgCrossover&quot;}){hidden=&lt;T,inputsMap:TreeMap4{^(&quot;length1&quot;,10),^(&quot;length2&quot;,21),^(&quot;price&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap4,plots{0:{lineWeight=5,palette{^(&quot;Above&quot;,!%3.CustomColor.findByIndex:CustomColor6(&quot;12&quot;)),^(&quot;Below&quot;,!%3.CustomColor.findByIndex:CustomColor7(&quot;15&quot;))}}}}),+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence{body=&quot;###############################################################################################################################################\n################################################################################################################################################\n#\n# Author: Kory Gill, [USER=212]@korygill[/USER]\n#\n# Created from idea on https://usethinkscript.com/threads/finite-volume-elements.593/\n# Original idea is from http://mkatsanos.com/FVE.html\n#\n# VERSION HISTORY (sortable date and time (your local time is fine), and your initials\n# 20190907-1200-KG    - Created.\n\n###############################################################################\n### NORMALIZATION (Volume Damping adaptation) by Ramon Del Villar AKA PElonsax\n### 7/20/2020 #################################################################\n###############################################################################\n# The damping logic is taken directly from VFI #\n\n#declare once_per_bar;\n\n\n#################################################################$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n\n#########################################%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%$$$$$$$$$$$$$$$$$\n\n\n\n#\n# inputs\n#\ninput RSI_prev = 2; #previous bar to check\ninput def_cond = no;\ninput Samples = 14;\n\n\n\n#vwap vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\n#input numDevUp = 2.0;\ninput vwapTimeFrame = {default DAY, WEEK, MONTH};\n\ndef cap = getAggregationPeriod();\ndef errorInAggregation =\n    vwapTimeFrame == vwapTimeFrame.DAY and cap &gt;= AggregationPeriod.WEEK or\n    vwapTimeFrame== vwapTimeFrame.WEEK and cap &gt;= AggregationPeriod.MONTH;\nassert(!errorInAggregation, \&quot;timeFrame should be not less than current chart aggregation period\&quot;);\n\ndef yyyyMmDd = getYyyyMmDd();\ndef periodIndx;\nswitch (vwapTimeFrame) {\ncase DAY:\n    periodIndx = yyyyMmDd;\ncase WEEK:\n    periodIndx = Floor((daysFromDate(first(yyyyMmDd)) + getDayOfWeek(first(yyyyMmDd))) / 7);\ncase MONTH:\n    periodIndx = roundDown(yyyyMmDd / 100, 0);\n}\ndef isPeriodRolled = compoundValue(1, periodIndx != periodIndx[1], yes);\n\ndef volumeSum;\ndef volumeVwapSum;\ndef volumeVwap2Sum;\n\nif (isPeriodRolled) {\n    volumeSum = volume;\n    volumeVwapSum = volume * vwap;\n    volumeVwap2Sum = volume * Sqr(vwap);\n} else {\n    volumeSum = compoundValue(1, volumeSum[1] + volume, volume);\n    volumeVwapSum = compoundValue(1, volumeVwapSum[1] + volume * vwap, volume * vwap);\n    volumeVwap2Sum = compoundValue(1, volumeVwap2Sum[1] + volume * Sqr(vwap), volume * Sqr(vwap));\n}\ndef vWapprice = volumeVwapSum / volumeSum;\ndef deviation = Sqrt(Max(volumeVwap2Sum / volumeSum - Sqr(vWapprice), 0));\n\ndef VWAP = vWapprice;\n\n\n\ninput vwapCondition =no;\n#input vp=close;\ndef conVwapBuy =if  vwapCondition then  close &gt;= VWAp else 1;\n\n#####^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n\n#\n# FVE logic\n#\ndef bn = BarNumber();\ndef nan = double.NaN;\n\n\ninput maxVolumeCutOff = 2.5;\n###Coefficient used in calculation of “Cut Off” value. Lower values mean stronger damping of volume spikes###\n\nAssert(maxVolumeCutOff &gt; 0, \&quot;\'max volume cut off\' must be positive: \&quot; + maxVolumeCutOff);\n\ndef cutOff = 0.2 * StDev(Log(hlc3) - Log(hlc3[1]), 30) * close;\ndef hlcChange = hlc3 - hlc3[1];\ndef avgVolume = Average(volume, 30)[1];\ndef minVolume = Min(volume, avgVolume * maxVolumeCutOff);\ndef dirVolume = if hlcChange &gt; cutOff\n    then minVolume\n    else if hlcChange &lt; -cutOff\n        then -minVolume\n        else 0;\n\n\ndef mf = (close - (high+low)/2) + hlc3 - hlc3 [1];\ndef fveSum = Sum(dirVolume, Samples);\n\ndef fve = if bn &gt; Samples\n          then (fveSum / (Average(avgVolume, Samples) * Samples)) * 100\n          else nan;\n\n\n#\n# plots\n#\ndef pFVE = fve;\n\ndef pFVE_MA = MovingAverage(AverageType.SIMPLE, fve, 30);\n#pFVE_MA.SetDefaultColor(Color.Gray);\n#PFVE_MA.SetPaintingStrategy(PaintingStrategy.DASHES);\n\ndef zeroLine = 0;\ndef pFVE_Bull = if pFVE crosses above pFVE_MA then pFVE  else double.NaN ;\ndef pFVE_Bear = if pFVE &gt; pFVE_MA and pFVE[1] &gt; pFVE then pFVE else double.NaN ;\n\n#format plot \n\n#zeroLine.SetDefaultColor(Color.White);\n#pFVE.AssignValueColor(if pFVE &gt; pFVE_MA then color.green else color.red) ;\n#pFVE.SetLineWeight(3);\n\n\n#pFVE_Bull.SetPaintingStrategy(PaintingStrategy.SQUARES);\n#pFVE_Bull.SetLineWeight(5);\n#pFVE_Bull.SetDefaultColor(color.dark_green) ;\n\n#pFVE_Bear.SetPaintingStrategy(PaintingStrategy.SQUARES);\n#pFVE_Bear.SetLineWeight(5);\n#pFVE_Bear.SetDefaultColor(color.white) ;\n\n#AddCloud(pFVE, pFVE_MA, color.light_green, color.pink);\n\n\n\n#####################################################################################################################################################\n\n\n\n# Simple 2 Period RSI Trading Indicator\n# Assembled by BenTen at useThinkScript.com\n# You are free to use this code for personal use, and make derivative works from it. You are NOT GRANTED permission to use this code (or derivative works) for commercial purposes which includes and is not limited to selling, reselling, or packaging with other commercial indicators. Headers and attribution in this code should remain as provided, and any derivative works should extend the existing headers.\n\n#MACD\ninput price = close;\n#input length_macd = 14;\ninput displace = 0;\n#input showBreakoutSignals = no;\ninput crossingType = {default above, below};\n\ninput fastLength = 12;\ninput slowLength = 26;\ninput MACDLength = 9;\ndef fastAvg = Sum(volume * price, fastLength) / Sum(volume, fastLength);\ndef slowAvg = Sum(volume * price, slowLength) / Sum(volume, slowLength);\ndef Value = fastAvg - slowAvg;\ndef Avg = ExpAverage(Value, MACDLength);\ndef MACD_Diff  = Value - Avg;\n#def ZeroLine = 0;\n\n# RSI\ninput rsiLength = 14;\ninput overBought = 80;\ninput overSold = 28;\ninput rsiBuyLevel =40;\ninput averageType = AverageType.WILDERS;\ndef NetChgAvg = MovingAverage(averageType, price - price[1], RSIlength);\ndef TotChgAvg = MovingAverage(averageType, AbsValue(price - price[1]), RSIlength);\ndef ChgRatio = if TotChgAvg != 0 then NetChgAvg / TotChgAvg else 0;\ndef RSI = 50 * (ChgRatio + 1);\n#def OverSold = overSold;\n#def OverBought = overBought;\n\n#test\n#plot p= VWAp;#(period= AggregationPeriod.DAY);\n\n####################################\n\ndef cond_logic = if (def_cond) then MACD_Diff &lt;= 0 else yes;\n######\n#def sig_buy = Crosses(RSI(length = RSIlength, averageType = averageType).RSI, over_Sold, crossingType == crossingType.above) within RSI_prev bars and pFVE_Bull and cond_logic; # and Diff &lt;= 0;\ndef sig_buy = conVwapBuy and RSI&lt; rsiBuyLevel and pFVE_Bull  and cond_logic ;# and Diff &gt;= 0;\n#def sig_buy = pFVE_Bull and Diff &gt;= 0;\nplot signal_buy = sig_buy ;\n\n\ndef sig_sell = Crosses(RSI(length = RSIlength, averageType = averageType).RSI, overBought, crossingType == crossingType.below) within RSI_prev bars and pFVE_Bear ;\nplot signal_sell = sig_sell;\n\nsignal_buy.DefineColor(\&quot;Above\&quot;, Color.YELLOW);\nsignal_buy.DefineColor(\&quot;Below\&quot;, GetColor(8));\nsignal_buy.AssignValueColor(if crossingType == crossingType.above then signal_buy.Color(\&quot;Above\&quot;) else signal_buy.Color(\&quot;Below\&quot;));\nsignal_buy.setlineWeight(5);\nsignal_buy.SetPaintingStrategy(if crossingType == crossingType.above\n    then PaintingStrategy.BOOLEAN_ARROW_UP\n    else PaintingStrategy.BOOLEAN_ARROW_DOWN);\n\nsignal_sell.DefineColor(\&quot;Above\&quot;, Color.VIOLET);\nsignal_sell.DefineColor(\&quot;Below\&quot;, GetColor(8));\nsignal_sell.AssignValueColor(if crossingType == crossingType.above then signal_sell.Color(\&quot;Above\&quot;) else signal_sell.Color(\&quot;Below\&quot;));\n\nsignal_sell.SetPaintingStrategy(if crossingType == crossingType.above\n    then PaintingStrategy.BOOLEAN_ARROW_DOWN\n    else PaintingStrategy.BOOLEAN_ARROW_UP);\nsignal_sell.setlineWeight(5);\ninput bubble =no; \nAddChartBubble(bubble and sig_sell == 1, price, \&quot;S= \&quot; + price + \&quot; rsi \&quot; + RSI, Color.VIOLET, no);&quot;,name=&quot;_259d509b_f440_4edf_840b_2df1df75ab8c&quot;}){inputsMap:TreeMap5{^(&quot;price&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap5,plots{0:{lineWeight=4},1:{lineWeight=4}}}),+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence{body=&quot;# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2017-2021\n#\n\ninput price = close;\ninput length = 9;\ninput displace = 0;\ninput showBreakoutSignals = no;\n\nplot SMA = Average(price[-displace], length);\nplot UpSignal = price crosses above SMA;\nplot DownSignal = price crosses below SMA;\n\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\nSMA.SetDefaultColor(GetColor(1));\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);&quot;,name=&quot;SimpleMovingAvg&quot;}){inputsMap:TreeMap6{^(&quot;length&quot;,200),^(&quot;price&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap6,plots{0:{color=@CustomColor6}}}),+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence{body=&quot;\n\n#declare hide_on_daily;\n#declare once_per_bar;\n\n# Variables:\n\ninput AggregationPeriod = AggregationPeriod.DAY;\n\ninput useAggregate = NO;\ninput showLevels = yes;\ninput showLables = yes;\ninput showBoundaryLine = yes;\n\n\n\ninput length = 3;\ndef displace = -1;\n\ninput PivotPrice = {default CLOSE, HLC3, VWAP, OHLC4, OPEN, HL2};\ninput PivotLength = 1;\n\ninput averageType = AverageType.SIMPLE;\ninput fib1 = 0.236; #fib 0.236\ninput fib2 = 0.5;  #fib2 0.5\ninput fib3 = 0.764; #fib3 0.764\ninput fib4 = 1.0; # Extreems\n\n\n\n\n#def mov_avg = MovingAverage(averageType, price[-displace], length);\n\ndef ll;\ndef hh;\ndef pv;\n\nif useAggregate\n{\n    ll = low (period = AggregationPeriod)[-displace];;\n    hh = high (period = AggregationPeriod)[-displace];\n     switch (PivotPrice)\n       {\n            case \&quot;CLOSE\&quot;:\n                    pv = close(period = AggregationPeriod)  [-displace];\n            case \&quot;HLC3\&quot; :\n                    pv = hlc3(period = AggregationPeriod)[-displace];\n\n            case \&quot;VWAP\&quot; :\n                    pv = vwap(period = AggregationPeriod)[-displace];\n            case \&quot;HL2\&quot; :\n                    pv = hl2(period = AggregationPeriod)[-displace];\n            case \&quot;OHLC4\&quot; :\n                    pv = ohlc4(period = AggregationPeriod)[-displace];\n            case \&quot;OPEN\&quot; :\n                    pv = open(period = AggregationPeriod)[-displace];\n       }\n}\nelse\n{\n    ll = average( low[-displace], length);#MovingAverage(averageType, low[-displace], length);\n    hh = average( high[-displace], length);#MovingAverage(averageType, high[-displace], length);\n      switch (PivotPrice)\n       {\n            case \&quot;CLOSE\&quot;:\n                    pv = MovingAverage(averageType, close  [-displace], PivotLength);;\n            case \&quot;HLC3\&quot; :\n                    pv = MovingAverage(averageType,hlc3[-displace], PivotLength);;\n            case \&quot;VWAP\&quot; :\n                    pv = MovingAverage(averageType,vwap[-displace], PivotLength);;\n            case \&quot;HL2\&quot; :\n                    pv =MovingAverage(averageType, hl2[-displace], PivotLength);;\n            case \&quot;OHLC4\&quot; :\n                    pv = MovingAverage(averageType,ohlc4[-displace], PivotLength);;\n            case \&quot;OPEN\&quot; :\n                    pv = MovingAverage(averageType,open[-displace], PivotLength);;\n\n       }\n}\n\n\n\n\n#\n# logic\n#\n    def nan = Double.NaN;\n\n\n    def delta = hh - ll;\n    def pp_ = pv; #pivot Point\n    def s1_ = pp_ - (fib1 * delta);\n    def s2_ = pp_ - (fib2 * delta);\n    def s3_ = pp_ - (fib3 * delta);\n    def s4_ = pp_ - (fib4 * delta);\n    def r1_ = pp_ + (fib1 * delta);\n    def r2_ = pp_ + (fib2 * delta);\n    def r3_ = pp_ + (fib3 * delta);\n    def r4_ = pp_ + (fib4 * delta);\n\n\n    plot RXT = r4_;\n    plot R3 = r3_;\n    plot R2 = r2_;\n    plot R1 = r1_;\n\n    plot pp = pp_;\n    plot S1 = s1_;\n    plot S2 = s2_;\n    plot S3 = s3_;\n    plot SXT = s4_;\n\n\n\n\n\n\n\n    pp.SetDefaultColor(Color.WHITE);\n    S1.SetDefaultColor(Color.ORANGE);\n    S2.SetDefaultColor(Color.ORANGE);\n    S3.SetDefaultColor(Color.ORANGE);\n    R1.SetDefaultColor(Color.YELLOW);\n    R2.SetDefaultColor(Color.YELLOW);\n    R3.SetDefaultColor(Color.YELLOW);\n    RXT.SetDefaultColor(Color.LIGHT_ORANGE);\n    SXT.SetDefaultColor(Color.LIGHT_ORANGE);\n    \n    PP.SetPaintingStrategy(PaintingStrategy.POINTS);\n    S1.SetPaintingStrategy(PaintingStrategy.POINTS);\n    R1.SetPaintingStrategy(PaintingStrategy.POINTS);\n    S2.SetPaintingStrategy(PaintingStrategy.POINTS);\n    R2.SetPaintingStrategy(PaintingStrategy.POINTS);\n    S3.SetPaintingStrategy(PaintingStrategy.POINTS);\n    R3.SetPaintingStrategy(PaintingStrategy.POINTS);\n    RXT.SetStyle(Curve.MEDIUM_DASH);\n    SXT.SetStyle(Curve.MEDIUM_DASH);\n\n\n\n#RXT.SetPaintingStrategy(PaintingStrategy.LINE_VS_POINTS);\n\n\n\n    R1.SetHiding(!showLevels);\n    R2.SetHiding(!showLevels);\n    R3.SetHiding(!showLevels);\n    pp.SetHiding(!showLevels);\n    S1.SetHiding(!showLevels);\n    S2.SetHiding(!showLevels);\n    S3.SetHiding(!showLevels);\n\n    RXT.SetHiding(!showBoundaryLine);\n    SXT.SetHiding(!showBoundaryLine);\n\n# lables\n\n    AddLabel(showLables, \&quot; R1= \&quot; +  RoundUp(R1, 2), if R1 &lt; close then Color.LIGHT_GREEN else if R1 &gt; close then Color.LIGHT_RED else Color.LIGHT_GRAY);\n\n    AddLabel(showLables, \&quot; R2= \&quot; +  RoundUp(R2, 2), if R2 &lt; close then Color.LIGHT_GREEN else if R2 &gt; close then Color.LIGHT_RED else Color.LIGHT_GRAY);\n    AddLabel(showLables, \&quot; R3= \&quot; +  RoundUp(R3, 2), if R3 &lt; close then Color.LIGHT_GREEN else if R3 &gt; close then Color.LIGHT_RED else Color.LIGHT_GRAY);\n\n    AddLabel(showLables, \&quot; S1= \&quot; +  RoundUp(S1, 2), if S1 &lt; close then Color.LIGHT_GREEN else if S1 &gt; close then Color.LIGHT_RED else Color.LIGHT_GRAY);\n    AddLabel(showLables, \&quot; S2= \&quot; +  RoundUp(S2, 2), if S2 &lt; close then Color.LIGHT_GREEN else if S2 &gt; close then Color.LIGHT_RED else Color.LIGHT_GRAY);\n    AddLabel(showLables, \&quot; S3= \&quot; +  RoundUp(S3, 2), if S3 &lt; close then Color.LIGHT_GREEN else if S3 &gt; close then Color.LIGHT_RED else Color.LIGHT_GRAY);\n    AddLabel(showLables, \&quot; RXT= \&quot; +  RoundUp(RXT, 2), if RXT &lt; close then Color.LIGHT_GREEN else if RXT &gt; close then Color.LIGHT_RED else\n Color.LIGHT_GRAY);\n\n    AddLabel(showLables, \&quot; SXT= \&quot; +  RoundUp(SXT, 2), if SXT &lt; close then Color.LIGHT_GREEN else if SXT &gt; close then Color.LIGHT_RED else Color.LIGHT_GRAY);\n\n\n#end&quot;,name=&quot;_5bf53d93_587e_4e7f_b239_a8ba491d37a1&quot;}){inputsMap:TreeMap7{^(&quot;showLables&quot;,&lt;F)},inputsMap=@TreeMap7,plots{0:{lineStyle=3},4:{lineWeight=2},5:{color=@CustomColor2},6:{color=@CustomColor2},7:{color=@CustomColor2},8:{lineStyle=3}}}),+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence{body=&quot;input price = close;\ninput displace = 0;\ninput length = 20;\ninput Num_Dev_Dn = -2.0;\ninput Num_Dev_up = 2.0;\ninput averageType = AverageType.Simple;\ninput showCloud= yes;\n\ndef sDev = stdev(data = price[-displace], length = length);\n\nplot MidLine = MovingAverage(averageType, data = price[-displace], length = length);\nplot LowerBand = MidLine + num_Dev_Dn * sDev;\nplot UpperBand = MidLine + num_Dev_Up * sDev;\n\nLowerBand.SetDefaultColor(GetColor(0));\nMidLine.SetDefaultColor(GetColor(1));\nUpperBand.SetDefaultColor(GetColor(5));\n\n#############################\ndef Na = Double.NaN;\n\ndef cloudhigh = If( ShowCloud, UpperBand, Na);\ndef cloudlow  = If(ShowCloud, LowerBand, Na);\n#AddCloud(cloudhigh, cloudlow, Color.GRAY, Color.GRAY);\n\n\nAddCloud(cloudhigh, Midline, Color.Green, Color.light_Green);\nAddCloud(cloudlow, Midline, Color.Red, Color.light_Red);\n\n\n####$$$$$$$$\n\n\ninput priceSlm = close;\n\ninput superFastLength = 8;\n\ninput fastLengthSlm = 13;\n\ninput slowLengthSlm = 21;\n\n\n\n\ninput averageTypeSlm = AverageType.EXPONENTIAL;\n\ndef mov_avg8 = MovingAverage(averageTypeSlm, priceSlm[-displace], superFastLength);\n\ndef mov_avg13 = MovingAverage(averageTypeSlm, priceSlm[-displace], fastLengthSlm);\n\ndef mov_avg21 = MovingAverage(averageTypeSlm, priceSlm[-displace], slowLengthSlm);\n \n#moving averages\n\ndef Superfast = mov_avg8;\n\ndef Fast = mov_avg13;\n\ndef Slow = mov_avg21;\n\n\ndef buy = mov_avg8 &gt; mov_avg13 and mov_avg13 &gt; mov_avg21 and low &gt; mov_avg8;\n\ndef stopbuy = mov_avg8 &lt;= mov_avg13;\n\ndef buynow = !buy[1] and buy;\n\ndef buysignal = CompoundValue(1, if buynow and !stopbuy then 1 else if buysignal[1] == 1 and stopbuy then 0 else buysignal[1], 0);\n\n\ndef Buy_Signal = buysignal[1] == 0 and buysignal == 1;\n\ndef Momentum_Down = buysignal[1] == 1 and buysignal == 0;\n\n\ndef sell = mov_avg8 &lt; mov_avg13 and mov_avg13 &lt; mov_avg21 and high &lt; mov_avg8;\n\ndef stopsell = mov_avg8 &gt;= mov_avg13;\n\ndef sellnow = !sell[1] and sell;\n\ndef sellsignal = CompoundValue(1, if sellnow and !stopsell then 1 else if sellsignal[1] == 1 and stopsell then 0 else sellsignal[1], 0);\n\n\ndef Sell_Signal = sellsignal[1] == 0 and sellsignal;\n\ndef Momentum_Up = sellsignal[1] == 1 and sellsignal == 0;\n \n# when using this as a custom scan, change the word plot to def\n# then remove the \'#\' from in front of one of the \&quot;plot Scan\&quot; statements below\ndef Colorbars = if buysignal == 1 then 1 else if sellsignal == 1 then -1 else if buysignal == 0 or sellsignal == 0 then 0 else 0;\n\n# use this first Scan plot for SLM Ribbon Momentum UP\n#plot Scan = if Colorbars == 1 then yes else no;\n\n# use this second Scan plot for SLM Ribbon Momentum DOWN\n#plot Scan = if Colorbars == -1 then yes else no;\n\n\n\n\n\n\n###############\n\ndef Colorbars1 = if buysignal == 1 then 1 else if sellsignal == 1 then 2 else if buysignal == 0 or sellsignal == 0 then 3 else 0;\n\ninput lengthHma = 20;\n\ndef HMA = MovingAverage(AverageType.HULL, price, lengthHma);\ndef HMA_Up=  HMA &gt; HMA[1];\ndef HMA_Down =! HMA_UP;\n\n###############\n\n#def Colorbars1 = if buysignal == 1 then 1 else if sellsignal == 1 then 2 else if buysignal == 0 or sellsignal == 0 then 3 else 0;\n\n\n\nMidLine.definecolor(\&quot;Buy\&quot;, color.dark_green);\n\n\nMidLine.definecolor(\&quot;Sell\&quot;, color.red);\n\nMidLine.definecolor(\&quot;Neutral\&quot;, Color.PLUM);\n#MidLine.definecolor(\&quot;NeutralDown\&quot;, Color.orange);\nMidLine.definecolor(\&quot;HullMA_up\&quot;, color.blue);\n\nMidLine.definecolor(\&quot;HullMA_down\&quot;, color.orange);\n\nMidLine.AssignValueColor(if buysignal and HMA_Up then MidLine.color(\&quot;Buy\&quot;) else if buysignal and !HMA_Up then MidLine.color(\&quot;HullMA_down\&quot;) else if sellsignal and HMA_Down  then MidLine.color(\&quot;Sell\&quot;) else  if sellsignal and !HMA_Down  then MidLine.color(\&quot;HullMA_up\&quot;) else  MidLine.color(\&quot;neutral\&quot;));;#\n# if Momentum_Up then  RSI.color(\&quot;neutralUp\&quot;) else  RSI.color(\&quot;neutraldown\&quot;));\n\n\n\n\n\n\n\n#MidLine.definecolor(\&quot;Buy_Signal_Bars\&quot;, color.dark_green);\n\n#MidLine.definecolor(\&quot;Sell_Signal_Bars\&quot;, color.red);\n\n#MidLine.definecolor(\&quot;NeutralUp\&quot;, color.plum);\n\n#MidLine.definecolor(\&quot;NeutralDown\&quot;, color.orange);\n\n#MidLine.AssignValueColor(if Colorbars1 ==1 then MidLine.color(\&quot;buy_signal_bars\&quot;) else if colorbars1 ==2 then #MidLine.color(\&quot;Sell_Signal_bars\&quot;) else if Momentum_Up then  MidLine.color(\&quot;neutralUp\&quot;) else MidLine.color(\&quot;neutralDown\&quot;) );\n\n\nplot UpSignal = if (buysignal and price crosses above MidLine) then LowerBand else Double.NaN;\nplot DownSignal = if (sellsignal and price crosses below MidLine) then UpperBand else Double.NaN;\ninput showBreakoutSignals =no;\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\n\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\n\n\n\nMidLine.setlineWeight(3);\n\n\n\n\n\n\n######$$$$&quot;,name=&quot;_cbc1e041_e9b4_4664_b964_97e197ec9dfd&quot;}){hidden=&lt;T,inputsMap:TreeMap8{^(&quot;price&quot;,&quot;CLOSE&quot;),^(&quot;priceSlm&quot;,&quot;CLOSE&quot;),^(&quot;showCloud&quot;,&lt;F)},inputsMap=@TreeMap8}),+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence{body=&quot;#start\n\n#hint: &lt;b&gt;Ask SLM Ribbon&lt;/b&gt;\\nThe Ask SLM Ribbon is a momentum indicator that uses a combination of three exponential moving averages. When the averages are in alinement, with the \&quot;superfast\&quot; moving average above the \&quot;fast\&quot; moving average and the fast moving average above the \&quot;slow\&quot; moving average, the momentum condition is positive. A \&quot;buy signal\&quot; is generated, with an up arrow, when above conditions are met and a \&quot;clear bar\&quot; occurs; with the low of that bar is above all of the moving averages. The positive momentum ends if the superfast moving average touches the fast moving average; then condition is considered neutral and an oppostive arrow will appear. Negative momentum and a \&quot;Sell signal\&quot; are the opposite of the bullish conditions. \\n \\n\\n--------------------------------------------------------------------------------\\nVolume bars can be colored to match the Chart by clicking on Style&gt;Settings&gt;Appearance&gt;Common, and color symbol as ticks  \\n\n\n\n# Variables:\n\n \n\n#input price = close;\ninput color_bars=no;\n\ninput useHeikinAshi =no;\n\ninput superfast_length = 4;\n\ninput fast_length = 7;\n\ninput slow_length =17;\n\n\ninput displace = 0;\ninput  pSupperFast = hlc3 ;\ninput pFast  = close ;\ninput pSlow  = close ;\ninput averageTypeSuperfast = AverageType.simple;\ninput averageTypefast = AverageType.simple;\ninput averageTypeSlow = AverageType.EXPONENTIAL;\n\n\n\ndef priceSupperFast ;\ndef priceFast ;\ndef priceSlow ;\n#Heikin Ashi\ndef haClose = (open+high+low+close)/4; #Heikin Ashi Close: The arithmetic mean of the current high, low, open, and close prices.\ndef haOpen = (haOpen[1] + haClose[1])/2  ;# Heikin Ashi Open: The midpoint of the previous candle.\ndef haHigh = max(high, max( haOpen, haClose) ) ;#Heikin Ashi High: The highest of the following: the actual high, the Heikin Ashi Open, or the Heikin Ashi Close.\ndef haLow = Min(low,min( haOpen, haClose));# Heikin Ashi Low: The lowest of the following: the actual low, the Heikin Ashi Open, or the Heikin Ashi Close.\n\nif useHeikinAshi \n\n then\n {\n  priceSupperFast = (haHigh +haLow+ haclose)/3;\n  priceFast = haclose;\n  priceSlow = haclose;\n }\nelse\n {\n  priceSupperFast = pSupperFast;\n  priceFast = pFast;\n  priceSlow = pSlow;\n }\n\n\n\ndef mov_avg_superFast = MovingAverage(averageTypeSuperfast, priceSupperFast[-displace], superfast_length);\ndef mov_avg_Fast = MovingAverage(averageTypefast, priceFast[-displace], fast_length);\ndef mov_avg_Slow = MovingAverage(averageTypeSlow, priceSlow[-displace], slow_length);\n\n#moving averages\nPlot Superfast = mov_avg_superFast;\nplot Fast = mov_avg_Fast;\nplot Slow = mov_avg_Slow;\nSuperfast.setdefaultColor(color.yellow);\nFast.setdefaultColor(color.cyan);\nSlow.setdefaultColor(color.blue);\n\n\n \n\ndef buy = mov_avg_superFast &gt; mov_avg_Fast and mov_avg_Fast &gt; mov_avg_Slow and hlc3 &gt; mov_avg_superFast;\n\ndef stopbuy = mov_avg_superFast &lt;= mov_avg_Fast or  hlc3 &lt; mov_avg_Fast;\n\ndef buynow = !buy[1] and buy;\n\ndef buysignal = CompoundValue(1, if buynow and !stopbuy then 1 else if buysignal[1]==1 and stopbuy then 0 else buysignal[1], 0);\n\n \n\nplot Buy_Signal = buysignal[1] == 0 and buysignal==1;\nBuy_signal.setpaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nBuy_signal.setdefaultColor(color.dark_GREEN);\nBuy_signal.hidetitle();\n#Alert(condition = buysignal[1] == 0 and buysignal == 1, text = \&quot;Buy Signal\&quot;, sound = Sound.Bell, \&quot;alert type\&quot; = Alert.BAR);\n\nplot Momentum_Down = buysignal[1] ==1 and buysignal==0;\nMomentum_down.setpaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);\nMomentum_Down.setdefaultColor(color.plum);\nMomentum_down.hidetitle();\n\n#Alert(condition = buysignal[1] == 1 and buysignal == 0, text = \&quot;Momentum_Down\&quot;, sound = Sound.Bell, \&quot;alert type\&quot; = Alert.BAR);\ndef sell = mov_avg_superFast &lt; mov_avg_Fast and mov_avg_Fast &lt; mov_avg_Slow and high &lt; mov_avg_superFast;\ndef stopsell = mov_avg_superFast &gt;= mov_avg_Fast or  close &gt; mov_avg_Fast;;\n\ndef sellnow = !sell[1] and sell;\n\ndef sellsignal = CompoundValue(1, if sellnow and !stopsell then 1 else if sellsignal[1]==1 and stopsell then 0 else sellsignal[1], 0);\n\n \n\nPlot Sell_Signal = sellsignal[1] ==0 and sellsignal;\n\nSell_signal.setpaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_down);\n\nsell_signal.setDefaultColor(color.red);\n\nSell_signal.hidetitle();\n\n#Alert(condition = sellsignal[1] == 0 and sellsignal == 1, text = \&quot;Sell Signal\&quot;, sound = Sound.Bell, \&quot;alert type\&quot; = Alert.BAR);\n\n \n\nPlot Momentum_Up = sellsignal[1]==1 and sellSignal==0;\n\nMomentum_up.setpaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_up);\n\nMomentum_up.setDefaultColor(color.plum);\n\nMomentum_up.hidetitle();\n\n#Alert(condition = sellsignal[1] == 1 and sellSignal == 0, text = \&quot;Momentum_Up\&quot;, sound = Sound.Bell, \&quot;alert type\&quot; = Alert.BAR);\ninput priceHma = close;\n input lengthHma = 20;\n\ndef HMA = MovingAverage(AverageType.HULL, priceHma, lengthHma);\ndef HMA_Up=  HMA &gt; HMA[1];\ndef HMA_Down =! HMA_UP;\n\nplot Colorbars = if buysignal and HMA_Up then 1 else if  buysignal and !HMA_Up then  2 else if sellsignal and HMA_Down then 3  else if sellsignal and !HMA_Down then  4 else if !buysignal or !sellsignal then 5 else 0;\n\ncolorbars.setHiding(1);\n\nColorbars.definecolor(\&quot;Buy\&quot;, color.dark_green);\n\nColorbars.definecolor(\&quot;Sell\&quot;, color.red);\n\nColorbars.definecolor(\&quot;Neutral\&quot;, color.plum);\nColorbars.definecolor(\&quot;HullMA_up\&quot;, color.blue);\n\nColorbars.definecolor(\&quot;HullMA_down\&quot;, color.orange);\n\n\n\n\n\n\n\n\n###############\n\n#def Colorbars1 = if buysignal == 1 then 1 else if sellsignal == 1 then 2 else if buysignal == 0 or sellsignal == 0 then 3 else 0;\n\n\n\n\n\n\n\n\n \n\nAssignPriceColor(if Colorbars ==1 and color_bars then colorbars.color(\&quot;Buy\&quot;) else if colorbars ==2 and color_bars  then colorbars.color(\&quot;HullMA_down\&quot;) else if colorbars ==3 and color_bars  then colorbars.color(\&quot;Sell\&quot;)  else if colorbars ==4 and color_bars  then colorbars.color(\&quot;HullMA_up\&quot;)else if color_bars  then colorbars.color(\&quot;neutral\&quot;) else  Color.CURRENT);\n\n#end&quot;,name=&quot;_65bf37d7_00d7_4e85_986f_9649d9ba6744&quot;}){hidden=&lt;T,inputsMap:TreeMap9{^(&quot;pFast&quot;,&quot;CLOSE&quot;),^(&quot;priceHma&quot;,&quot;CLOSE&quot;),^(&quot;pSlow&quot;,&quot;CLOSE&quot;),^(&quot;pSupperFast&quot;,&quot;(H+L+C)/3&quot;),!get:Integer0(&quot;superfast_length&quot;),!get:Integer1(&quot;slow_length&quot;)},inputsMap=@TreeMap9}),+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence{body=&quot;# @new\n# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2011-2021\n#\n\ninput numDevDn = -2.0;\ninput numDevUp = 2.0;\ninput timeFrame = {default DAY, WEEK, MONTH};\n\ndef cap = getAggregationPeriod();\ndef errorInAggregation =\n    timeFrame == timeFrame.DAY and cap &gt;= AggregationPeriod.WEEK or\n    timeFrame == timeFrame.WEEK and cap &gt;= AggregationPeriod.MONTH;\nassert(!errorInAggregation, \&quot;timeFrame should be not less than current chart aggregation period\&quot;);\n\ndef yyyyMmDd = getYyyyMmDd();\ndef periodIndx;\nswitch (timeFrame) {\ncase DAY:\n    periodIndx = yyyyMmDd;\ncase WEEK:\n    periodIndx = Floor((daysFromDate(first(yyyyMmDd)) + getDayOfWeek(first(yyyyMmDd))) / 7);\ncase MONTH:\n    periodIndx = roundDown(yyyyMmDd / 100, 0);\n}\ndef isPeriodRolled = compoundValue(1, periodIndx != periodIndx[1], yes);\n\ndef volumeSum;\ndef volumeVwapSum;\ndef volumeVwap2Sum;\n\nif (isPeriodRolled) {\n    volumeSum = volume;\n    volumeVwapSum = volume * vwap;\n    volumeVwap2Sum = volume * Sqr(vwap);\n} else {\n    volumeSum = compoundValue(1, volumeSum[1] + volume, volume);\n    volumeVwapSum = compoundValue(1, volumeVwapSum[1] + volume * vwap, volume * vwap);\n    volumeVwap2Sum = compoundValue(1, volumeVwap2Sum[1] + volume * Sqr(vwap), volume * Sqr(vwap));\n}\ndef price = volumeVwapSum / volumeSum;\ndef deviation = Sqrt(Max(volumeVwap2Sum / volumeSum - Sqr(price), 0));\n\nplot VWAP = price;\nplot UpperBand = price + numDevUp * deviation;\nplot LowerBand = price + numDevDn * deviation;\n\nVWAP.setDefaultColor(getColor(0));\nUpperBand.setDefaultColor(getColor(2));\nLowerBand.setDefaultColor(getColor(4));&quot;,name=&quot;VWAP&quot;}){hidden=&lt;T,inputsMap:TreeMap10{^(&quot;timeFrame&quot;,&quot;WEEK&quot;)},inputsMap=@TreeMap10,plots{0:{color=@CustomColor3,lineStyle=6},1:{color=@CustomColor6,lineStyle=6},2:{color=@CustomColor6,lineStyle=6}}}),+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence{body=&quot;### xiuyu vwap cross signal with abnormal volume\n\n#declare hide_on_daily;\n\n####\n#MTF\ndef tFrame = GetAggregationPeriod();\ninput timeFrame = {default DAY, WEEK, MONTH};\ninput aggregationPeriod = AggregationPeriod.HOUR;\ninput useAutoAggegate = yes;\n\n\n\n# Variables:\n#def  =if (useAutoAggegate) then open(period = aggregationPeriod1) else open;\n\ndef AutoAGG = if tFrame &lt;  AggregationPeriod.DAY then AggregationPeriod.DAY\n             else if  tFrame &lt; AggregationPeriod.WEEK then AggregationPeriod.WEEK\n                  else AggregationPeriod.MONTH;\ndef AGG = if (!useAutoAggegate) then aggregationPeriod else AutoAGG;\n\ndef testTimeFrames = if tFrame &lt; AGG  then yes else no;\n\n#AddLabel(useAutoAggegate, if testTimeFrames  then \&quot;Time Frames Are Correct\&quot; else \&quot;Time Frames Are \n\ninput length = 10; #average volume lenght\ninput volMinimum = 50000;\ninput showPriceColor = yes;\ninput factor = 1.50; #show what factors to avgvolume \ninput nDevUp = 2.0;\ninput nDevDn = -2.0;\n\ndef avgvolume = Average(volume, length) * factor;\n\n\n#plot vwap = reference VWAP( AGG);\n#######\n\n\ndef cap = GetAggregationPeriod();\ndef errorInAggregation =\n    timeFrame == timeFrame.DAY and cap &gt;= AggregationPeriod.WEEK or\n    timeFrame == timeFrame.WEEK and cap &gt;= AggregationPeriod.MONTH;\nAssert(!errorInAggregation, \&quot;timeFrame should be not less than current chart aggregation period\&quot;);\n\ndef yyyyMmDd = GetYYYYMMDD();\ndef periodIndx;\nswitch (timeFrame) {\ncase DAY:\n    periodIndx = yyyyMmDd;\ncase WEEK:\n    periodIndx = Floor((DaysFromDate(First(yyyyMmDd)) + GetDayOfWeek(First(yyyyMmDd))) / 7);\ncase MONTH:\n    periodIndx = RoundDown(yyyyMmDd / 100, 0);\n}\ndef isPeriodRolled = CompoundValue(1, periodIndx != periodIndx[1], yes);\n\ndef volumeSum;\ndef volumeVwapSum;\ndef volumeVwap2Sum;\n\nif (isPeriodRolled) {\n    volumeSum = volume;\n    volumeVwapSum = volume * vwap;\n    volumeVwap2Sum = volume * Sqr(vwap);\n} else {\n    volumeSum = CompoundValue(1, volumeSum[1] + volume, volume);\n    volumeVwapSum = CompoundValue(1, volumeVwapSum[1] + volume * vwap, volume * vwap);\n    volumeVwap2Sum = CompoundValue(1, volumeVwap2Sum[1] + volume * Sqr(vwap), volume * Sqr(vwap));\n}\ndef price = volumeVwapSum / volumeSum;\ndef deviation = Sqrt(Max(volumeVwap2Sum / volumeSum - Sqr(price), 0));\n\nplot VWAP = price;\nplot UpperBand = price + nDevUp * deviation;\nplot LowerBand = price + nDevDn * deviation;\nplot UpperBand2 = price + (1+nDevUp) * deviation;\nplot LowerBand2 = price +(-1+ nDevDn) * deviation;\ndef sdvP1=  price + deviation;\ndef sdvN1=  price - deviation;\n#####\n\n\nplot SD1up =close[1] crosses above sdvp1 and ( open&lt; close) and low&gt;sdvp1;\nSD1up.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nSD1up.SetDefaultColor(Color.graY);\nSD1up.SetLineWeight(2);\nAssignPriceColor(if SD1up and showPriceColor and open&lt; close then Color.violet else Color.CURRENT);\n\nAddLabel(yes, \&quot;VWAP= \&quot; + astext(VWAP), if VWAP&lt; close then Color.LIGHT_GREEN else if VWAP&gt; close then color.LIGHT_red else Color.GRAY);\n#AddLabel(yes, \&quot;VWAP= \&quot; + astext(VWAP), Color.White);\ndef vwDif= close- VWAP;\n#AddLabel(yes, \&quot; \&quot;+astext(vwDif), if vwDif&gt; 0 then Color.LIGHT_GREEN else if vwDif&lt; 0 then color.LIGHT_red else Color.GRAY);\nAddLabel(yes and vwDif&gt;0, \&quot; +\&quot;+astext(vwDif),  Color.LIGHT_GREEN );\nAddLabel(yes and vwDif&lt;=0, \&quot; \&quot;+astext(vwDif),  if vwDif&lt; 0 then color.LIGHT_red else Color.LIGHT_GRAY);\n\ninput vwapLableAll =yes;\nAddLabel(vwapLableAll, \&quot;VWAP +1= \&quot; + astext(sdvP1), if sdvP1&lt; close then Color.LIGHT_GREEN else if sdvP1&gt; close then color.LIGHT_red else Color.GRAY);\n\nAddLabel(vwapLableAll, \&quot;VWAP +2= \&quot; + astext(UpperBand), if UpperBand&lt; close then Color.LIGHT_GREEN else if UpperBand&gt; close then color.LIGHT_red else Color.GRAY);\nAddLabel(vwapLableAll, \&quot;VWAP +3= \&quot; + astext(UpperBand2), if UpperBand2&lt; close then Color.LIGHT_GREEN else if UpperBand2&gt; close then color.LIGHT_red else Color.GRAY);\n\nAddLabel(vwapLableAll, \&quot;VWAP -1= \&quot; + astext(sdvN1), if sdvN1&lt; close then Color.LIGHT_GREEN else if sdvN1&gt; close then color.LIGHT_red else Color.GRAY);\nAddLabel(vwapLableAll, \&quot;VWAP -2= \&quot; + astext(LowerBand), if LowerBand&lt; close then Color.LIGHT_GREEN else if LowerBand&gt; close then color.LIGHT_red else Color.GRAY);\nAddLabel(vwapLableAll, \&quot;VWAP -3= \&quot; + astext(LowerBand2), if LowerBand2&lt; close then Color.LIGHT_GREEN else if LowerBand2&gt; close then color.LIGHT_red else Color.GRAY);\n\n#AddLabel(vwapLableAll, \&quot;VWAP R= \&quot; + astext(upperBand/sdvN1 -1)+\&quot;  \&quot;+astext(upperBand/lowerBand -1)+\&quot;  \&quot;+astext(upperBand2/lowerBand2 -1), if LowerBand&lt; close then Color.LIGHT_GREEN else if LowerBand&gt; close then color.LIGHT_red else Color.GRAY);\n\nAddLabel(vwapLableAll, \&quot;VWAP R= \&quot; + astext(upperBand/sdvN1 -1)+\&quot;  \&quot;+astext(upperBand/lowerBand -1)+\&quot;  \&quot;+astext(upperBand2/lowerBand2 -1), if LowerBand&lt; close then Color.LIGHT_GREEN else if LowerBand&gt; close then color.LIGHT_red else Color.GRAY);\n\n\n\ndef volCheck = volume &gt;= avgvolume &amp;&amp; volume &gt;= volMinimum &amp;&amp; volume &gt;= volume[1];\ndef isCross =  close crosses VWAP;\ndef abnormalSignal = isCross and volCheck;\n\n\nVWAP.SetDefaultColor(color.white);#(GetColor(0));\nplot signalup = if abnormalSignal and close &gt; VWAP then low else Double.NaN;\nsignalup.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nsignalup.SetDefaultColor(Color.CYAN);\nsignalup.SetLineWeight(2);\n\nplot signaldown =  if abnormalSignal and close &lt; VWAP then high else Double.NaN;\nsignaldown.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);\nsignaldown.SetDefaultColor(Color.CYAN);\nsignaldown.SetLineWeight(2);\n\nAssignPriceColor(if abnormalSignal and showPriceColor then Color.CYAN else Color.CURRENT);\n\n\n#####\nvwap.SetStyle(Curve.POINTS);\nUpperBand.SetDefaultColor(GetColor(0));\nLowerBand.SetDefaultColor(GetColor(0));\n\nUpperBand.SetStyle(Curve.POINTS);\nLowerBand.SetStyle(Curve.POINTS);\n\nUpperBand2.SetDefaultColor(Color.YELLOW);\nLowerBand2.SetDefaultColor(Color.YELLOW);\n\nUpperBand2.SetStyle(Curve.SHORT_DASH);\nLowerBand2.SetStyle(Curve.SHORT_DASH);\n#input AutoHide=yes;\n#def hideLower = if AutoHide then close &gt;vwap  else 0;;\n#def hideUpper = if AutoHide then  close &lt;vwap  else 0;#- deviation\n#addLabel(yes, \&quot;hide U\&quot;+hideUpper +\&quot; L\&quot;+hideLower);\n#UpperBand.setHiding(hideUpper);\n#LowerBand.setHiding(hideLower);\n#UpperBand.Hide();\n#LowerBand.Hide();\n#UpperBand2.Hide();\n#LowerBand2.Hide();&quot;,name=&quot;_740dc265_6e6e_38a5_ba0e_c0a058a5d552&quot;}){hidden=&lt;T,inputsMap:TreeMap11{^(&quot;vwapLableAll&quot;,&lt;F)},inputsMap=@TreeMap11}),+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence{body=&quot;#start\n\n#hint: &lt;b&gt;Ask SLM Ribbon&lt;/b&gt;\\nThe Ask SLM Ribbon is a momentum indicator that uses a combination of three exponential moving averages. When the averages are in alinement, with the \&quot;superfast\&quot; moving average above the \&quot;fast\&quot; moving average and the fast moving average above the \&quot;slow\&quot; moving average, the momentum condition is positive. A \&quot;buy signal\&quot; is generated, with an up arrow, when above conditions are met and a \&quot;clear bar\&quot; occurs; with the low of that bar is above all of the moving averages. The positive momentum ends if the superfast moving average touches the fast moving average; then condition is considered neutral and an oppostive arrow will appear. Negative momentum and a \&quot;Sell signal\&quot; are the opposite of the bullish conditions. \\n \\n\\n--------------------------------------------------------------------------------\\nVolume bars can be colored to match the Chart by clicking on Style&gt;Settings&gt;Appearance&gt;Common, and color symbol as ticks  \\n\n\n\n# Variables:\n\n \n\n#input price = close;\ninput color_bars=no;\n\ninput useHeikinAshi =no;\n\ninput superfast_length =10;\n\ninput fast_length = 21;\n\ninput slow_length =40;\n\n\ninput displace = 0;\ninput price = close;\ninput pSupperFast = close ;\ninput pFast  = close ;\ninput pSlow  = close ;\ninput averageTypeSuperfast = AverageType.simple;\ninput averageTypefast = AverageType.simple;\ninput averageTypeSlow = AverageType.simPLE;\n\n\n\n\ndef priceSupperFast ;\ndef priceFast ;\ndef priceSlow ;\n#Heikin Ashi\ndef haClose = (open+high+low+close)/4; #Heikin Ashi Close: The arithmetic mean of the current high, low, open, and close prices.\ndef haOpen = (haOpen[1] + haClose[1])/2  ;# Heikin Ashi Open: The midpoint of the previous candle.\ndef haHigh = max(high, max( haOpen, haClose) ) ;#Heikin Ashi High: The highest of the following: the actual high, the Heikin Ashi Open, or the Heikin Ashi Close.\ndef haLow = Min(low,min( haOpen, haClose));# Heikin Ashi Low: The lowest of the following: the actual low, the Heikin Ashi Open, or the Heikin Ashi Close.\n\nif useHeikinAshi \n\n then\n {\n  priceSupperFast = (haHigh +haLow+ haclose)/3;\n  priceFast = haclose;\n  priceSlow = haclose;\n }\nelse\n {\n  priceSupperFast = pSupperFast;\n  priceFast = pFast;\n  priceSlow = pSlow;\n }\n\n\n\ndef mov_avg_superFast = MovingAverage(averageTypeSuperfast, priceSupperFast[-displace], superfast_length);\ndef mov_avg_Fast = MovingAverage(averageTypefast, priceFast[-displace], fast_length);\ndef mov_avg_Slow = MovingAverage(averageTypeSlow, priceSlow[-displace], slow_length);\n\n#moving averages\nPlot SuperfastAvg = mov_avg_superFast;\nplot FastAvg = mov_avg_Fast;\nplot SlowAvg = mov_avg_Slow;\nSuperfastAvg.setdefaultColor(color.yellow);\nFastAvg.setdefaultColor(color.cyan);\nSlowAvg.setdefaultColor(color.blue);\n\n################ppm1\ninput hide_debug =no;\nplot d =( priceSupperFast-priceSupperFast[1]);\nplot d_percnt = 100*( priceSupperFast-priceSupperFast[1])/priceSupperFast[1];\nd.setHiding(hide_debug);\nd_percnt.setHiding(hide_debug);\n\ninput lookback = 1;\n\ninput ppmiSmooth =3;\ninput averageTypePpmiSmooth = AverageType.simple;\ninput d1_length = 10;\ninput d2_length =21;\ninput th =0.25;\ninput show_ppmi = no;\n\n#input showMovingAvgLable =yes;\n\n#moving averages\n\ndef   ppm1_ =100*( SuperfastAvg-SuperfastAvg[lookback])/( SuperfastAvg); \ndef   ppm2_ =100*(FastAvg - FastAvg[lookback])/( FastAvg); \ndef   ppm3_ =100*( SlowAvg-SlowAvg[lookback])/(SlowAvg); \n#Plot ppm1 =MovingAverage(AverageType.EXPONENTIAL,ppm[-displace], signalPeriod);\n\nplot ppm1= MovingAverage(averageTypePpmiSmooth,ppm1_,ppmiSmooth);\nplot ppm2=  MovingAverage(averageTypePpmiSmooth,ppm2_,ppmiSmooth);\nplot ppm3=  MovingAverage(averageTypePpmiSmooth,ppm3_,ppmiSmooth);\n\n\n\nplot ppm_d1  = MovingAverage(averageTypefast, ppm1[-displace], d1_length);\nplot ppm_d2 = MovingAverage(averageTypefast, ppm1[-displace], d2_length);\n\n ppm1.sethiding(!show_ppmi);\n ppm2.sethiding(!show_ppmi);\n ppm3.sethiding(!show_ppmi);\n ppm_d1.sethiding(!show_ppmi);\n ppm_d2.sethiding(!show_ppmi);\n\n#################\n\n\n\n\n\ndef buy;\n\nif getAggregationPeriod()&gt;aggregationPeriod.DAY\n{\n#buy = mov_avg_superFast &gt; mov_avg_Fast and mov_avg_Fast &gt; mov_avg_Slow and price &gt; mov_avg_superFast and ppm1&gt; th and ppm2&gt; th;# and ppm3&gt; th ;\n#buy =  price &gt; mov_avg_superFast and( ppm1&gt; th*3 or   ppm1&gt; th  and( ppm2&gt;0 ));# mov_avg_Fast &gt; mov_avg_Slow and;#mov_avg_superFast &gt; mov_avg_Fast and or ppm3&gt; 0) ;\nbuy = mov_avg_superFast &gt; mov_avg_Fast and mov_avg_Fast  and price &gt; mov_avg_superFast and ppm1&gt; th and ppm2&gt; th and( ppm2&gt;0 );# and ppm3&gt; th ;\n\n}\nelse\n\n{\nbuy = mov_avg_superFast &gt; mov_avg_Fast and mov_avg_superFast &gt; mov_avg_Slow and price &gt; mov_avg_superFast and ppm1&gt; th and( ppm2&gt;0 );#or ppm3&gt; 0) ;\n}\n\n \n\n\n#def stopbuy = mov_avg_superFast &lt;= mov_avg_Fast or  price &lt; mov_avg_Fast ;#or ppm1&lt;=th or ppm2&lt;=th or ppm3&lt;=th;\n\ndef stopbuy =   price &lt; mov_avg_superFast ;#mov_avg_Fast &lt;= mov_avg_Slow or #or ppm1&lt;=th or ppm2&lt;=th or ppm3&lt;=th;\n\ndef buynow = !buy[1] and buy;\n\ndef buysignal = CompoundValue(1, if buynow and !stopbuy then 1 else if buysignal[1]==1 and stopbuy then 0 else buysignal[1], 0);\n\n \n\nplot Buy_Signal = buysignal[1] == 0 and buysignal==1;\nBuy_Signal.setpaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nBuy_Signal.setdefaultColor(color.dark_GREEN);\nBuy_Signal.hidetitle();\n\ndef buy_1_2aL = price &gt; mov_avg_superFast  and (mov_avg_superFast&gt; mov_avg_Fast or  mov_avg_superFast &gt; mov_avg_slow) and ppm1&gt; th;# and( ppm2&gt; 0 or ppm3&gt;0) ;\n\ndef stopbuy_1_2aL =price &lt; mov_avg_superFast  or (mov_avg_superFast&lt;= mov_avg_Fast and  mov_avg_superFast &lt;= mov_avg_slow) ;#or ppm1&lt;=th or ppm2&lt;=th or ppm3&lt;=th;\n\ndef buynow_1_2aL = !buy_1_2aL[1] and buy_1_2aL;\n\ndef buysignal_1_2aL = CompoundValue(1, if buynow_1_2aL and !stopbuy then 1 else if buysignal_1_2aL[1]==1 and stopbuy then 0 else buysignal_1_2aL[1], 0);\n\n \n\nplot Buy_Signal_M1_2aL = buysignal_1_2aL[1] == 0 and buysignal_1_2aL==1;\nBuy_Signal_M1_2aL.setpaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nBuy_Signal_M1_2aL.setdefaultColor(color.white);\nBuy_Signal_M1_2aL.hidetitle();\n\n\n\n\n#Alert(condition = buysignal[1] == 0 and buysignal == 1, text = \&quot;Buy Signal\&quot;, sound = Sound.Bell, \&quot;alert type\&quot; = Alert.BAR);\n\nplot Momentum_Down = buysignal[1] ==1 and buysignal==0;\nMomentum_down.setpaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);\nMomentum_Down.setdefaultColor(color.plum);\nMomentum_down.hidetitle();\n\n#Alert(condition = buysignal[1] == 1 and buysignal == 0, text = \&quot;Momentum_Down\&quot;, sound = Sound.Bell, \&quot;alert type\&quot; = Alert.BAR);\ndef sell_condition1 =  mov_avg_superFast &lt; mov_avg_Fast and mov_avg_superFast &lt; mov_avg_Slow and price &lt; mov_avg_superFast;\ndef sell_condition2 =  mov_avg_superFast &lt; mov_avg_Fast and price &lt; mov_avg_superFast and price &lt; mov_avg_Fast and price &lt; mov_avg_Slow and ppm1&lt;= -1.5 and ppm2&lt;= -1.0 ;\ndef sell_condition3 =price &lt; mov_avg_superFast and ppm1&lt;=0;# and ppm2&lt;= -1.0 ;\ndef sell_condition4 =price &lt; mov_avg_superFast ;#and ppm1&lt;=0;# and ppm2&lt;= -1.0 ;\n\ndef sell =  sell_condition2 or sell_condition4;\ndef stopsell = price &gt; mov_avg_superFast;#mov_avg_superFast &gt;= mov_avg_Fast or  ;;\n\ndef sellnow = !sell[1] and sell;\n\ndef sellsignal = CompoundValue(1, if sellnow and !stopsell then 1 else if sellsignal[1]==1 and stopsell then 0 else sellsignal[1], 0);\n\n \n\nPlot Sell_Signal = sellsignal[1] ==0 and sellsignal;\n\nSell_signal.setpaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_down);\n\nsell_signal.setDefaultColor(color.red);\n\nSell_signal.hidetitle();\n\n#Alert(condition = sellsignal[1] == 0 and sellsignal == 1, text = \&quot;Sell Signal\&quot;, sound = Sound.Bell, \&quot;alert type\&quot; = Alert.BAR);\n\n \n\nPlot Momentum_Up = sellsignal[1]==1 and sellSignal==0;\n\nMomentum_up.setpaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_up);\n\nMomentum_up.setDefaultColor(color.plum);\n\nMomentum_up.hidetitle();\n\n#Alert(condition = sellsignal[1] == 1 and sellSignal == 0, text = \&quot;Momentum_Up\&quot;, sound = Sound.Bell, \&quot;alert type\&quot; = Alert.BAR);\ninput priceHma = close;\n input lengthHma = 20;\n\ndef HMA = MovingAverage(AverageType.HULL, priceHma, lengthHma);\ndef HMA_Up=  HMA &gt; HMA[1];\ndef HMA_Down =! HMA_UP;\n\nplot Colorbars = if buysignal and HMA_Up then 1 else if  buysignal and !HMA_Up then  2 else if sellsignal and HMA_Down then 3  else if sellsignal and !HMA_Down then  4 else if !buysignal or !sellsignal then 5 else 0;\n\ncolorbars.setHiding(1);\n\nColorbars.definecolor(\&quot;Buy\&quot;, color.dark_green);\n\nColorbars.definecolor(\&quot;Sell\&quot;, color.red);\n\nColorbars.definecolor(\&quot;Neutral\&quot;, color.plum);\nColorbars.definecolor(\&quot;HullMA_up\&quot;, color.blue);\n\nColorbars.definecolor(\&quot;HullMA_down\&quot;, color.orange);\n###############\n\n#def Colorbars1 = if buysignal == 1 then 1 else if sellsignal == 1 then 2 else if buysignal == 0 or sellsignal == 0 then 3 else 0;\nAssignPriceColor(if Colorbars ==1 and color_bars then colorbars.color(\&quot;Buy\&quot;) else if colorbars ==2 and color_bars  then colorbars.color(\&quot;HullMA_down\&quot;) else if colorbars ==3 and color_bars  then colorbars.color(\&quot;Sell\&quot;)  else if colorbars ==4 and color_bars  then colorbars.color(\&quot;HullMA_up\&quot;)else if color_bars  then colorbars.color(\&quot;neutral\&quot;) else  Color.CURRENT);\n\n#\n\n\n\n\n###############################\ninput showlable=yes;\n\n\n\ninput showPpmDivLable=yes;\n\nAddLabel(showPpmDivLable, \&quot; ppm1= \&quot;+  roundup(ppm1,3), if ppm1&gt; 0 then Color.LIGHT_GREEN else if ppm1&lt; 0 then color.light_red else Color.Light_GRAY);\nAddLabel(showPpmDivLable, \&quot; d1= \&quot;+  roundup(ppm_d1,3),  Color.green);\nAddLabel(showPpmDivLable, \&quot; d2= \&quot;+  roundup(ppm_d2,3),  Color.cyan);\n\n\n\n#plot ppm1_d1 = MovingAverage(averageTypefast, ppm1[-displace], fast_length);\n#plot ppm1_d2 = MovingAverage(averageTypefast, ppm1[-displace], slow_length);\n\nppm1.setdefaultColor(color.light_ORANGE);\nppm2.setdefaultColor(color.violet);\nppm3.setdefaultColor(color.yellow);\n\nppm2.Hide();\nppm3.Hide();\nppm_d1.setdefaultColor(color.green);\nppm_d2.setdefaultColor(color.cyan);\n\n\nAddLabel(showlable, \&quot;  \&quot;+ superfast_length+ \&quot;MAvg\&quot; ,ppm1.TakeValueColor ());\nAddLabel(showlable,  astext(SuperfastAvg), if ppm1&lt; close then Color.LIGHT_GREEN else if ppm1&gt; close then color.light_red else Color.Light_GRAY);\ndef maDif= close- SuperfastAvg;\n\nAddLabel(showlable and maDif&gt;0, \&quot; +\&quot;+astext(maDif),  Color.LIGHT_GREEN );\nAddLabel(showlable and maDif&lt;=0, \&quot; \&quot;+astext(maDif),  if maDif&lt; 0 then color.LIGHT_red else Color.LIGHT_GRAY);\n\nAddLabel(showlable, \&quot;  \&quot;+ fast_length+ \&quot;MAvg\&quot; ,ppm2.TakeValueColor ());\nAddLabel(showlable,  astext(FastAvg), if ppm2&lt; close then Color.LIGHT_GREEN else if ppm2&gt; close then color.light_red else Color.Light_GRAY);\n\n\nAddLabel(showlable, \&quot;  \&quot;+ slow_length+ \&quot;MAvg\&quot; ,ppm3.TakeValueColor ());\nAddLabel(showlable,  astext(SlowAvg), if ppm3&lt; close then Color.LIGHT_GREEN else if ppm3&gt; close then color.light_red else Color.Light_GRAY);\n\n#AddLabel(showlable, \&quot;MA \&quot; + ppm_length + \&quot;=\&quot;+ astext(movAvg_ppm1), if movAvg_ppm1 &gt; close  then Color.RED else if movAvg_ppm1 &lt; close then  Color.GREEN else Color.GRAY);\n\nAddLabel(yes, \&quot; ppm1= \&quot;+  roundup(ppm1,3), if ppm1&gt; 0 then Color.LIGHT_GREEN else if ppm1&lt; 0 then color.light_red else Color.Light_GRAY);\nAddLabel(yes, \&quot; ppm2= \&quot; +   roundup(ppm2,3), if ppm2&gt; 0 then Color.LIGHT_GREEN else if ppm2&lt; 0 then color.light_red else Color.Light_GRAY);\nAddLabel(yes, \&quot; ppm3= \&quot;+  roundup(ppm3,3), if ppm3&gt; 0 then Color.LIGHT_GREEN else if ppm3&lt; 0 then color.light_red else Color.Light_GRAY);\n\n\n##################################\n\n\n\n\n\n\n\n\n\n\n\n\n#end&quot;,name=&quot;_ae3dde1c_4c60_4560_9ada_eb01ee615711&quot;}){inputsMap:TreeMap12{^(&quot;hide_debug&quot;,@Boolean0),^(&quot;pFast&quot;,&quot;CLOSE&quot;),^(&quot;ppmiSmooth&quot;,1),^(&quot;price&quot;,&quot;CLOSE&quot;),^(&quot;priceHma&quot;,&quot;CLOSE&quot;),^(&quot;pSlow&quot;,&quot;CLOSE&quot;),^(&quot;pSupperFast&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap12,plots{0:{color=@CustomColor4},2:{color=@CustomColor5},3:{hiding=&lt;T},4:{hiding=&lt;T},6:{hiding=&lt;F},7:{hiding=&lt;F},10:{color=@CustomColor1,lineWeight=5},11:{color=@CustomColor6,lineWeight=5},13:{color=@CustomColor4,lineWeight=5}}}),+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence{body=&quot;#ShadowTrader_VA_Pivots\n#ShadowTrader (Copyright ShadowTrader), a division of ShadowTrader Technologies, LLC. 2017. All rights reserved. This ShadowTrader Script is for educational purposes only.  ShadowTrader is not responsible for the use,  functionality or the performance of this Script. This work is copyrighted by ShadowTrader and all rights of this work under the license are reserved. Use of the ShadowTrader licensed code is for private use only and any other use are prohibited. By exercising any of the rights herein, you are accepting the terms of this license. You have a non-exclusive right to use or alter the ShadowTrader code. Use of this ShadowTrader Script other than as provided for in this license is prohibited. Any redistribution is strictly prohibited and will be enforced.\n\n# A big ShadowTrader thank you to Justin Lane Williams for initially creating this script for us.\n#08/31/11: Total redesign, added automated Pivot values, proximity plotting, new features.\n#09/12/11: Added “ShowLevel4” option due to recent volitility. Will plot S4 &amp; R4.\n#12/11/11: Added “AfterHours” option to turn off plot after hours.\n#12/21/11: Bug fixes due to TOS upgrades. Removed “AfterHours”, not workin correctly.\n#01/25/12: Enter daily inputs as 4 digits and script will interpret.\n# -added rounding to make the pivots appear as they do on the show.\n#01/26/12: Removed ability to truncate inputs due to it only being accurate 99% of time.\n#02/02/12: Small update to make sure \&quot;Auto Pivots\&quot; menu option functioned properly.\n#06/07/12: Added (6)VPOC inputs, should be manually entered/deleted, displays when applicable.\n#06/25/12: Removed some code and fixed a few bugs.\n#07/09/12: Fixed one small but important bug.\n#07/13/12: Added value bubbles, removed proximity plot function.\n#08/13/12: Removed a lot of superfluous code plus a few upgrades.\n#08/15/12: Fixed a bug that was giving false numbers.\n#08/30/12: Fixed a bug that wasn\'t plotting the NQ profile.\n#09/02/12: Reordered inputs and removed \&quot;LabelESonly\&quot; input.\n#12/28/12: Made the plot hide on daily charts and updated code to current standards.\n#01/04/13: Fixed a rare bug that hides labels if using tick charts.\n#01/28/13: Added ability to hide each individual level.\n#02/09/21 :mahiby customized for  \n# Pivot values will be off the day following market holidays and possibly the day after rollover.\n# On these days make \&quot;AutoPivots=No\&quot; and manually draw pivots. Change back to \&quot;AutoPivots=Yes\&quot; the day after.\n\ninput PivotTimeFrame =  { \&quot;15 MIN\&quot; ,  \&quot;30 MIN\&quot;,  \&quot;1 HOUR\&quot;, \&quot;2 HOURs\&quot;,  \&quot;4 HOURs\&quot;, default \&quot;DAY\&quot;,  \&quot;2 DAYS\&quot;, \&quot;3 DAYS\&quot;, \&quot;4 DAYS\&quot;, WEEK, MONTH, \&quot;OPT EXP\&quot;, QUARTER, YEAR}; #AggregationPeriod.DAY;#\ninput ProfileTimeFrame = { CHART,  FIVE_MINUTE, TEN_MINUTE, FIFTEEN_MINUTE, THIRTY_MINUTE,   HOUR, TWO_HOUR, FOUR_HOUR, default DAY, TWO_DAY, THREE_DAY, FOUR_DAY, WEEK, TWO_WEEK, THREE_WEEK, MONTH, \&quot;OPT EXP\&quot;, BAR};\ninput ShowCloud1  = yes;#Hint ShowCloud: Shows the value area as a cloud.\ninput ShowCloud2  = yes;#Hint ShowCloud: Shows the value area as a cloud.\ninput showOnlyToday = no;\ninput VaPrevious = yes;\ninput AutoPivots = yes;#Hint AutoPivots: Turns off pivot lines, value area stays on.\ninput showVAH = no;\ninput Labels = {default \&quot;Proximity\&quot;, \&quot;Off\&quot;, \&quot;All\&quot;, \&quot;ValueAreaOnly\&quot;};#Hint Labels: Labels at top of chart.\ninput ShowPivotPoint = yes;#Hint ShowPivotPoint: Hides Pivot Point plot.\ninput ShowLevel4 = yes;#Hint ShowLevel4: Will display S4 and R4 for days with large moves.\ninput ShowLevel5 = yes;#Hint ShowLevel4: Will display S4 and R4 for days with large moves.\ninput ShowLevel6 = no;#Hint ShowLevel4: Will display S4 and R4 for days with large moves.\ninput ShowLevel7 = no;#Hint ShowLevel4: Will display S4 and R4 for days with large moves.\ninput ShowLevel8 = no;#Hint ShowLevel4: Will display S4 and R4 for days with large moves.\ninput PivotBubbles  = yes;#yes;#Hint PivotBubbles: Shows bubbles on pivot plot lines.\ninput ValueBubbles  = yes;#yes;#Hint ValueBubbles: Shows bubbles on value plot lines.\ninput PlotStartTime = 0930;#Hint PlotStartTime: Move to earlier time to shift bubbles to the left.\n\n\ninput CloudOpenOnly = yes;#Hint CloudOpenOnly: Will only cloud open candles.\ninput HideAfterHoursLabel = no;#Hint HideAfterHoursLabel: Hides \&quot;NoShadowPlotAfterHours\&quot; label.\ninput VpocBubbles  = no;#yes;#Hint VpocBubbles: Shows bubbles on VPOC plot lines.\n\ninput ShowS1 = yes;#yes;#Hint ShowS1: Hide/Show S1.\ninput ShowS2 = yes;#Hint ShowS2: Hide/Show S2.\ninput ShowS3 = yes;#yes;#Hint ShowS3: Hide/Show S3.\ninput ShowR1 = yes;#yes;#Hint ShowR1: Hide/Show R1.\ninput ShowR2 = yes;#Hint ShowR2: Hide/Show R2.\ninput ShowR3 = yes;#yes;#Hint ShowR3: Hide/Show R3.\ninput ShowORB = no;#Hint ShowORB: Displays 2 small, dashed lines at the top/bottom of opening range.\ninput OrbTime = 30;#Hint OrbTime: Defines the time range in minutes for the ORB.\n\ninput triggerUpperVaLimitHigh = 5;\ninput triggerUpperVaLimitLow = -5;\ninput triggerLowerVaLimitHigh = 5;\ninput triggerLowerVaLimitLow = -5;\ninput showLines = no;\ninput opacity = 20;\n\ndef Na = Double.NaN;\ninput showDebugLable = yes;\n#declare hide_on_daily;\n\n\n###pps\n\ninput marketThreshold = 0.0025;\n\ninput applyPersonsLevelsFilter = yes;\n\nAssert(marketThreshold &gt;= 0, \&quot;\'market threshold\' must not be negative: \&quot; + marketThreshold);\n\ndef marketType = {default DISABLED, NEUTRAL, BEARISH, BULLISH};\n\ndef PP2 = high(period = PivotTimeFrame)[2] + low(period = PivotTimeFrame)[2] + close(period = PivotTimeFrame)[2];\n\n################\n\nmarketType = if !applyPersonsLevelsFilter then marketType.DISABLED else\nif PP2[-1] &gt; (PP2[-1] + PP2 + PP2[1]) / 3 + marketThreshold then marketType.BULLISH else\nif PP2[-1] &lt; (PP2[-1] + PP2 + PP2[1]) / 3 - marketThreshold then marketType.BEARISH else marketType.NEUTRAL;\n\n#Previous Day Functions\ndef Day   = GetDayOfWeek(GetYYYYMMDD());\ndef CloseTime = SecondsTillTime(1545) &gt;= 0;\ndef OpenTime = SecondsFromTime(0930) &gt;= 0;\ndef RegHrs = CloseTime and OpenTime;\n\n###\ndef PLow ;\ndef PHigh ;\ndef PrevLow ;\ndef PrevHigh;\ndef a = if  \&quot;PivotTimeFrame\&quot; == \&quot;DAY\&quot; then 1 else 0;\n\nif  a {\n    PLow  =  CompoundValue(1, If(Day == Day[1] and RegHrs and low &lt; PLow[1], low, If(SecondsFromTime(0930) &lt;= 0 and RegHrs, low, PLow[1])), low);\n    PHigh = CompoundValue(1, If(Day == Day[1] and RegHrs and high &gt; PHigh[1], high, If(SecondsFromTime(0930) &lt;= 0 and RegHrs, high, PHigh[1])), high);\n    PrevLow  = If(Day != Day[1], PLow[1], PrevLow[1]);\n    PrevHigh = If(Day != Day[1], PHigh[1], PrevHigh[1]);\n\n#AddLabel (yes,period);\n}\n\nelse {\n    PLow  = low(period = PivotTimeFrame);\n    PHigh = high(period = PivotTimeFrame);\n    PrevLow  = low(period = PivotTimeFrame)[1];\n    PrevHigh = high(period = PivotTimeFrame)[1];\n\n}\n##################\n#Prior Day Profile - counting formula by functionform\n\ndef period;\ndef yyyymmdd = GetYYYYMMDD();\ndef seconds = SecondsFromTime(0);\ndef month = GetYear() * 12 + GetMonth();\ndef day_number = DaysFromDate(First(yyyymmdd)) + GetDayOfWeek(First(yyyymmdd));\ndef dom = GetDayOfMonth(yyyymmdd);\ndef dow = GetDayOfWeek(yyyymmdd - dom + 1);\ndef expthismonth = (if dow &gt; 5 then 27 else 20) - dow;\ndef exp_opt = month + (dom &gt; expthismonth);\n\nswitch (ProfileTimeFrame) {\ncase CHART:\n    period = 0;\n#case MINUTE:\n #   period = Floor(seconds / 60 + day_number * 24 * 60);\ncase FIVE_MINUTE:\n    period = Floor(seconds / 60 + day_number * 24 * 60);\n   # timeFrame = \&quot;5 MINUTES\&quot;; #\&quot;2 DAYS\&quot;\ncase TEN_MINUTE:\n    period = Floor(seconds / 60 + day_number * 24 * 60);\n   # timeFrame = \&quot;5 MINUTES\&quot;; #\&quot;2 DAYS\&quot;\ncase FIFTEEN_MINUTE:\n    period = Floor(seconds / 60 + day_number * 24 * 60);\n   # timeFrame = \&quot;15 MINUTES\&quot;; #\&quot;2 DAYS\&quot;\ncase THIRTY_MINUTE:\n    period = Floor(seconds / (30 * 60) + day_number * 24 * 60);\n   # timeFrame = \&quot;30 MINUTES\&quot;; #\&quot;2 DAYS\&quot;\ncase HOUR:\n    period = Floor(seconds / 3600 + day_number * 24);\n   # timeFrame = \&quot;1 HOUR\&quot;; #\&quot;2 DAYS\&quot;\ncase TWO_HOUR:\n    period = Floor(seconds / (2 * 3600) + day_number * 24);\n   # timeFrame = \&quot;2 HOURS\&quot;; #\&quot;2 DAYS\&quot;\ncase FOUR_HOUR:\n    period = Floor(seconds / (4 * 3600) + day_number * 24);\n    #timeFrame = \&quot;4 HOURS\&quot;; #\&quot;2 DAYS\&quot;\ncase DAY:\n    period = CountTradingDays(Min(First(yyyymmdd), yyyymmdd), yyyymmdd) - 1;\n   # timeFrame =  \&quot;1 DAY\&quot;;\ncase TWO_DAY:\n    period =  Floor((CountTradingDays(Min(First(yyyymmdd), yyyymmdd), yyyymmdd) - 1) / 2);\n   # timeFrame =  \&quot;2 DAYS\&quot;;\ncase THREE_DAY:\n    period = Floor((CountTradingDays(Min(First(yyyymmdd), yyyymmdd), yyyymmdd) - 1) / 3);\n   # timeFrame =  \&quot;3 DAYS\&quot;;\ncase FOUR_DAY:\n    period =  Floor((CountTradingDays(Min(First(yyyymmdd), yyyymmdd), yyyymmdd) - 1) / 4);\n   # timeFrame =  \&quot;4 DAYS\&quot;;\ncase WEEK:\n    period = Floor(day_number / 7);\n   # timeFrame =  \&quot;1 WEEK\&quot;;\ncase TWO_WEEK:\n    period = Floor(day_number / 14);\n  #  timeFrame =  \&quot;2 WEEK\&quot;;\ncase THREE_WEEK:\n    period = Floor(day_number / 21);\n   # timeFrame =  \&quot;3 WEEK\&quot;;\ncase MONTH:\n    period = Floor(month - First(month));\n   # timeFrame =  \&quot;MONTH\&quot;;\ncase \&quot;OPT EXP\&quot;:\n    period = exp_opt - First(exp_opt);\n    #timeFrame =  \&quot;OPT EXP\&quot;;\ncase BAR:\n    period = BarNumber() - 1;\n}\n\n\ndef count;\nif VaPrevious\n{\n\n    count = CompoundValue(1, if !(period != period[1]) then count[1] + 1 else 1, 1);\n\n}\nelse\n{\n   # count = CompoundValue(1, if period != period[1] then (count[1] + period - period[1]) else count[1], 0);\n\n\n count = CompoundValue(1, if period != period[1] then count[1]   else  (count[1] + period - period[1]), 0);\n\n\n\n}\ndef cond = count &lt; count[1] + period - period[1];\n\ndef Pivot = hlc3(period = PivotTimeFrame)[1];\n\n\n\ndef priorperiod = if IsNaN(count[1]) then 1 else Max(count, count[1]);\nprofile vol1 = VolumeProfile(\&quot;startNewProfile\&quot; = period != period[1], \&quot;onExpansion\&quot; = no);\n\ndef vahprior = vol1.GetHighestValueArea();\ndef pocprior = vol1.GetPointOfControl();\ndef valprior = vol1.GetLowestValueArea();\n\ndef vahprev = GetValue(vahprior, priorperiod);\ndef pocprev = GetValue(pocprior, priorperiod);\ndef valprev = GetValue(valprior, priorperiod);\n\n#if showProfile then\ndef  showProfile = no;\ndef showPointOfControl = no;\n\n#vol.Show(if showProfile then GlobalColor(\&quot;Profile\&quot;) else Color.CURRENT, if showPointOfControl then GlobalColor(\&quot;Point Of Control\&quot;) else Color.CURRENT, if showValueArea then GlobalColor(\&quot;Value Area\&quot;) else Color.CURRENT, opacity);\n#profile vol = VolumeProfile(\&quot;startNewProfile\&quot; = cond, \&quot;onExpansion\&quot; = no);\n#vol.Show(if showProfile then GlobalColor(\&quot;Profile\&quot;) else Color.CURRENT, if showPointOfControl then GlobalColor(\&quot;Point Of Control\&quot;) else Color.CURRENT, if showValueArea then GlobalColor(\&quot;Value Area\&quot;) else Color.CURRENT, opacity);\ndef VAH = vahprev;\ndef VAL = valprev;\ndef POC = pocprev;\n\n\n############\n#Value Area Functions\ndef PPoint = If(Pivot &gt; 0, Pivot, Na);\ndef VArea  = Between(close, VAL, VAH);\ndef VAreaabove  = close &gt; VAH;\ndef VAreabelow  = close &lt; VAL;\n\n\n###%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n#def oneVol = Roundup(( VAHigh - VALow) / VAHigh, 2);\ndef oneVol = RoundUp(( VAH - VAL) / 100, 2);\ndef upperValimitH = VAH + oneVol * (triggerUpperVaLimitHigh);\ndef upperValimitL = VAH + oneVol * (triggerUpperVaLimitLow);\n\ndef lowerValimitH = VAL + oneVol * (triggerLowerVaLimitHigh);\ndef lowerValimitL = VAL + oneVol * (triggerLowerVaLimitLow);\n#triggerUpperVaLimitlow = if triggerUpperVaLimitlow&gt;=0 then triggerUpperVaLimitlow =-5 else triggerUpperVaLimitlow= triggerUpperVaLimitlow;\n\nplot VA_high_short = upperValimitH;\nplot VA_high_long = upperValimitL;\n\nplot VA_low_short = lowerValimitL;\nplot VA_low_long = lowerValimitH;\n\n#AddCloud(VA_high_long, VA_high_short, Color.LIGHT_RED, Color.LIGHT_RED);\n#AddCloud(VA_high_long, VA_high_short, Color.LIGHT_RED, Color.LIGHT_RED);\n\n#VA_low_short.SetPaintingStrategy(PaintingStrategy.DASHES);\n#VA_low_long.SetDefaultColor(Color.BLUE);\nVA_low_short.SetHiding(!showLines);\nVA_low_short.SetPaintingStrategy(PaintingStrategy.DASHES);\nVA_low_short.SetDefaultColor(Color.RED);\nVA_low_long.SetHiding(!showLines);\nVA_low_long.SetPaintingStrategy(PaintingStrategy.DASHES);\nVA_low_long.SetDefaultColor(Color.GREEN);\n\n\n\nVA_high_short.SetHiding(!showLines);\nVA_high_short.SetPaintingStrategy(PaintingStrategy.DASHES);\nVA_high_short.SetDefaultColor(Color.RED);\nVA_high_long.SetHiding(!showLines);\nVA_high_long.SetPaintingStrategy(PaintingStrategy.DASHES);\nVA_high_long.SetDefaultColor(Color.GREEN);\n\n\n####%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\n\n\n\n\n#Time Functions\ndef timeFrame = getAggregationPeriod();\ndef prdMax =highestAll(if(!IsNaN(close[-1]),period,Na))  ;\ndef cnt =if(period &gt; prdMax-2  ,1,Na);\ndef Chart2  =  if showOnlyToday then cnt else 1 ;;#if showOnlyToday then (IsNaN(period[-1] and (period == period[1])))  else 1 ;\n#def Chart2  =  if showOnlyToday then MarketOpen and NewDay else 1 ;\n\ndef CloseTime2 = SecondsTillTime(1600) &gt;= 0;\ndef OpenTime2 = SecondsFromTime(PlotStartTime) &gt;= 0;\ndef MarketOpen = OpenTime2 and CloseTime2;\ndef NewDay = IsNaN(close(period = “Day”)[-1]);\ndef Chart1;\nif  timeFrame&lt; aggregationPeriod.DAY\n{\nChart1  =  if showOnlyToday then MarketOpen and NewDay else 1 ;\n}\nelse\n{ \n Chart1  =  chart2 ;\n}\n#plot prd =period;\n\n#AddLabel (yes,Chart1);\n#Pivot Functions\ndef Res1  = (2 * PPoint) - PrevLow;\ndef Supp1 = (2 * PPoint) - PrevHigh;\ndef Res2  = PPoint + (Res1 - Supp1);\ndef Supp2 = PPoint - (Res1 - Supp1);\ndef Res3  = PrevHigh + 2 * (PPoint - PrevLow);\ndef Supp3 = PrevLow - 2 * (PrevHigh - PPoint);\ndef Res4  = PrevHigh + 3 * (PPoint - PrevLow);\ndef Supp4 = PrevLow - 3 * (PrevHigh - PPoint);\n\n\n#def Res1  = (2 * PPoint) - PrevLow;\n#def Supp1 = (2 * PPoint) - PrevHigh;\n#def Res2  = PPoint + (Res1 - Supp1); # def Res2  = PPoint + (Res1 - Supp1);\n#def Supp2 = PPoint - (Res1 - Supp1);\n#def Res3  = PPoint + 2 * (PrevHigh - PrevLow);# def Res3  = PrevHigh + 2 * (PPoint - PrevLow);\n#def Supp3 = PPoint - 2 * (PrevHigh - PrevLow);\n#def Res4  = PPoint + 3 * (PrevHigh - PrevLow);#\n#def Supp4 = PPoint - 3 * (PrevHigh - PrevLow);\n\ndef Res5  = PrevHigh + 4 * (PPoint - PrevLow);\ndef Supp5 = PrevLow - 4 * (PrevHigh - PPoint);\n\ndef Res6  = PrevHigh + 5 * (PPoint - PrevLow);\ndef Supp6 = PrevLow - 5 * (PrevHigh - PPoint);\n\ndef Res7  = PrevHigh + 6 * (PPoint - PrevLow);\ndef Supp7 = PrevLow - 6 * (PrevHigh - PPoint);\n\ndef Res8  = PrevHigh + 7 * (PPoint - PrevLow);\ndef Supp8 = PrevLow - 7 * (PrevHigh - PPoint);\n\n\n\n\n#Rounding Functions\ndef round = 0.01;\ndef RI   = RoundDown(Res1, 0) - ((Round(((RoundDown(Res1, 0) - Res1) / round), 0)) * round);\ndef SI   = RoundDown(Supp1, 0) - ((Round(((RoundDown(Supp1, 0) - Supp1) / round), 0)) * round);\ndef RII  = RoundDown(Res2, 0) - ((Round(((RoundDown(Res2, 0) - Res2) / round), 0)) * round);\ndef SII  = RoundDown(Supp2, 0) - ((Round(((RoundDown(Supp2, 0) - Supp2) / round), 0)) * round);\ndef RIII = RoundDown(Res3, 0) - ((Round(((RoundDown(Res3, 0) - Res3) / round), 0)) * round);\ndef SIII = RoundDown(Supp3, 0) - ((Round(((RoundDown(Supp3, 0) - Supp3) / round), 0)) * round);\ndef RIV  = RoundDown(Res4, 0) - ((Round(((RoundDown(Res4, 0) - Res4) / round), 0)) * round);\ndef SIV  = RoundDown(Supp4, 0) - ((Round(((RoundDown(Supp4, 0) - Supp4) / round), 0)) * round);\ndef PivP = RoundDown(PPoint, 0) - ((Round(((RoundDown(PPoint, 0) - PPoint) / round), 0)) * round);\n\ndef RV  = RoundDown(Res5, 0) - ((Round(((RoundDown(Res5, 0) - Res5) / round), 0)) * round);\ndef SV  = RoundDown(Supp5, 0) - ((Round(((RoundDown(Supp5, 0) - Supp5) / round), 0)) * round);\ndef RVI  = RoundDown(Res6, 0) - ((Round(((RoundDown(Res6, 0) - Res6) / round), 0)) * round);\ndef SVI  = RoundDown(Supp6, 0) - ((Round(((RoundDown(Supp6, 0) - Supp6) / round), 0)) * round);\ndef RVII  = RoundDown(Res7, 0) - ((Round(((RoundDown(Res7, 0) - Res7) / round), 0)) * round);\ndef SVII  = RoundDown(Supp7, 0) - ((Round(((RoundDown(Supp7, 0) - Supp7) / round), 0)) * round);\ndef RVIII  = RoundDown(Res8, 0) - ((Round(((RoundDown(Res8, 0) - Res8) / round), 0)) * round);\ndef SVIII  = RoundDown(Supp8, 0) - ((Round(((RoundDown(Supp8, 0) - Supp8) / round), 0)) * round);\n\n\n\n\n#Plots\nplot VH  = If(Chart1 and VAH &gt; 0, VAH, Na);\nplot PC  = If(Chart1 and POC &gt; 0, POC, Na);\nplot VL  = If(Chart1 and VAL &gt; 0, VAL, Na);\n\n##Auto Show \ndef R1_auto_show;\ndef R2_auto_show;\ndef R3_auto_show;\ndef R4_auto_show;\ndef R5_auto_show;\ndef R6_auto_show;\ndef R7_auto_show;\ndef R8_auto_show;\n\ndef S1_auto_show;\ndef S2_auto_show;\ndef S3_auto_show;\ndef S4_auto_show;\ndef S5_auto_show;\ndef S6_auto_show;\ndef S7_auto_show;\ndef S8_auto_show;\n\ndef cmax = highestAll( count);\ndef R1AutoShow = (close&gt;VH or (Between(RI,VL,VH) and close&gt;VL));\ndef S1AutoShow = (close&lt;VL or (Between(SI,VL,VH) and close&lt;VH));;\ndef R2AutoShow =  close &gt; VH and close &lt; RV;\ndef S2AutoShow = (close &lt; VL) and close &gt; SV  ;\ndef R3AutoShow = close &gt; (RI + ((RII - RI) / 2));;\ndef S3AutoShow = close &lt; (SI - ((SI - SII) / 2));\ndef R4AutoShow = close &gt; (RII + ((RIII - RII) / 2));\ndef S4AutoShow =  close &lt; (SII - ((SII - SIII) / 2));\ndef R5AutoShow =  close &gt; (RIII + ((RIV - RIII) / 2));\ndef S5AutoShow =  close &lt; (SIII - ((SIII - SIV) / 2));\ndef R6AutoShow =  close &gt; (RIV + ((RV - RIV) / 2));\ndef S6AutoShow =  close &lt; (SIV - ((SVI - SV) / 2));\ndef R7AutoShow =  close &gt; (RV + ((RVI - RV) / 2));\ndef S7AutoShow =  close &lt; (SV - ((SV - SVI) / 2));\ndef R8AutoShow =  close &gt; (RVI + ((RVII - RVI) / 2));\ndef S8AutoShow =  close &lt; (SVI - ((SVI - SVII) / 2));\n\nR1_auto_show = if ( (period==period[1]) and R1_auto_show[1] )  then R1_auto_show[1] else R1AutoShow;\nR2_auto_show = if ( (period==period[1]) and R2_auto_show[1] )  then R2_auto_show[1] else R2AutoShow;\nR3_auto_show = if ( (period==period[1]) and R3_auto_show[1] )  then R3_auto_show[1] else R3AutoShow;\nR4_auto_show = if ( (period==period[1]) and R4_auto_show[1] )  then R4_auto_show[1] else R4AutoShow;\nR5_auto_show = if ( (period==period[1]) and R5_auto_show[1] )  then R5_auto_show[1] else R5AutoShow;\nR6_auto_show = if ( (period==period[1]) and R6_auto_show[1] )  then R6_auto_show[1] else R6AutoShow;\nR7_auto_show = if ( (period==period[1]) and R7_auto_show[1] )  then R7_auto_show[1] else R7AutoShow;\nR8_auto_show = if ( (period==period[1]) and R8_auto_show[1] )  then R8_auto_show[1] else R8AutoShow;\n\n\nS1_auto_show = CompoundValue(2,if ( (period==period[1]) and S1_auto_show[1] )  then S1_auto_show[1] else S1AutoShow,S1AutoShow);\nS2_auto_show = if ( (period==period[1]) and S2_auto_show[1] )  then S2_auto_show[1] else S2AutoShow;\nS3_auto_show = if ( (period==period[1]) and S3_auto_show[1] )  then S3_auto_show[1] else S3AutoShow;\nS4_auto_show = if ( (period==period[1]) and S4_auto_show[1] )  then S4_auto_show[1] else S4AutoShow;\nS5_auto_show = if ( (period==period[1]) and S5_auto_show[1] )  then S5_auto_show[1] else S5AutoShow;\nS6_auto_show = if ( (period==period[1]) and S6_auto_show[1] )  then S6_auto_show[1] else S6AutoShow;\nS7_auto_show = if ( (period==period[1]) and S7_auto_show[1] )  then S7_auto_show[1] else S7AutoShow;\nS8_auto_show = if ( (period==period[1]) and S8_auto_show[1] )  then S8_auto_show[1] else S8AutoShow;\n\nplot gg=(S1AutoShow);#==1);\nplot ggg = ( s1_auto_show);# if ( isnan( s1_autoshow))then  1 else double.NaN ;\ngg.SetHiding(0);\nggg.SetHiding(0);\n\n#input showHigherLevel =yes;\n##\n\nplot R4  = If(Chart1 and AutoPivots and ShowLevel4 and  R4_auto_show  and RIV &gt; 0, RIV, Na);\nplot R3  = If(Chart1 and AutoPivots and ShowR3  and  R3_auto_show and RIII &gt; 0, RIII,Na);\nplot R2  = If(Chart1 and AutoPivots and ShowR2  and  R2_auto_show and RII &gt; 0, RII, Na);\nplot R1  = If(Chart1 and AutoPivots and ShowR1  and  R1_auto_show and RI &gt; 0, RI, Na);\nplot PP  = If(Chart1 and AutoPivots and ShowPivotPoint and PPoint &gt; 0, PivP, Na);\nplot S1  = If(Chart1 and AutoPivots and ShowS1 and  S1_auto_show  and SI &gt; 0, SI, Na);\nplot S2  = If(Chart1 and AutoPivots and ShowS2 and  S2_auto_show  and SII &gt; 0, SII, Na);\nplot S3  = If(Chart1 and AutoPivots and ShowS3 and  S3_auto_show and SIII &gt; 0, SIII, Na);\nplot S4  = If(Chart1 and AutoPivots and ShowLevel4 and  S4_auto_show and SIV &gt; 0, SIV, Na);\n\n#######\n\nplot R5  = If(Chart1 and AutoPivots and ShowLevel4 and  R5_auto_show  and RV &gt; 0, RV, Na);\nplot R6  = If(Chart1 and AutoPivots and ShowLevel4 and  R6_auto_show  and RVI &gt; 0, RVI, Na);\nplot R7  = If(Chart1 and AutoPivots and ShowLevel4 and  R7_auto_show  and RVII &gt; 0, RVII, Na);\nplot R8  = If(Chart1 and AutoPivots and ShowLevel4 and  R8_auto_show  and RVIII &gt; 0, RVIII, Na);\n\n\nplot S5  = If(Chart1 and AutoPivots and ShowLevel4 and  S5_auto_show  and SV &gt; 0, SV, Na);\nplot S6  = If(Chart1 and AutoPivots and ShowLevel4 and  S6_auto_show  and SVI &gt; 0, SVI, Na);\nplot S7  = If(Chart1 and AutoPivots and ShowLevel4 and  S7_auto_show  and SVII &gt; 0, SVII, Na);\nplot S8  = If(Chart1 and AutoPivots and ShowLevel4 and  S8_auto_show  and SVIII &gt; 0, SVIII, Na);\n####\n\n\ninput closeTimeC = 1615;\n#Value Area Cloud\n#def CloudClose = SecondsTillTime(1615) &gt; 0;\ndef CloudClose = SecondsTillTime(closeTimeC) &gt; 0;\ndef Cloud      = OpenTime and CloudClose;\ndef ChartCloud = if(timeFrame &gt; aggregationPeriod.DAY, Cloud and Chart1, chart1);\ndef CloudTest  = If(CloudOpenOnly, ChartCloud, Chart1);\ndef cloudhigh = If(CloudTest and ShowCloud1, VAH, Na);\ndef cloudlow  = If(CloudTest and ShowCloud1, VAL, Na);\nAddCloud(cloudhigh, cloudlow, Color.GRAY, Color.GRAY);\ndef AfterHours = OpenTime2 and CloudClose;\n\n#Chart Labels\ndef Futures = Between(close, close(\&quot;/es\&quot;) - 15, close(\&quot;/es\&quot;) + 15) or Between(close, close(\&quot;/nq\&quot;) - 15, close(\&quot;/nq\&quot;) + 15);\ndef Label = Chart1;# and Futures;\ndef ZeroTest = VAH &gt; 0 and VAL &gt; 0;\ndef PNotZero = PPoint &gt; 0;\ndef ChartLabels;\nswitch (Labels) {\ncase \&quot;Proximity\&quot;:\n    ChartLabels = 1;\ncase \&quot;Off\&quot;:\n    ChartLabels = 0;\ncase \&quot;All\&quot;:\n    ChartLabels = 2;\ncase \&quot;ValueAreaOnly\&quot;:\n    ChartLabels = 3;\n}\n\n\nAddLabel(ChartLabels == 1 and Label and AutoPivots and VArea and ZeroTest, “InsideValue”, Color.WHITE);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and VAreaabove and ZeroTest, “AboveValue”, Color.GREEN);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and VAreabelow and ZeroTest, “BelowValue”, Color.RED);\nAddLabel(ChartLabels == 1 and Label and !AutoPivots and VArea and ZeroTest, “InsideValueArea”, Color.WHITE);\nAddLabel(ChartLabels == 1 and Label and !AutoPivots and VAreaabove and ZeroTest, “AboveValueArea”, Color.GREEN);\nAddLabel(ChartLabels == 1 and Label and !AutoPivots and VAreabelow and ZeroTest, “BelowValueArea”, Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and Between(close, VL, (RI + ((RII - RI) / 2))), \&quot;VH=\&quot; + AsText(VH), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and Between(close, VL, VH), \&quot;POC=\&quot; + AsText(PC), Color.YELLOW);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and Between(close, (SI - ((SI - SII) / 2)), VH), \&quot;VL=\&quot; + AsText(VL), Color.GREEN);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and (close &gt; VH or (Between(RI, VL, VH) and close &gt; VL)), \&quot;R1=\&quot; + AsText(RI), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and close &gt; VH, \&quot;R2=\&quot; + AsText(RII), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and close &gt; (RI + ((RII - RI) / 2)), \&quot;R3=\&quot; + AsText(RIII), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and ShowLevel4 and close &gt; (RII + ((RIII - RII) / 2)), \&quot;R4=\&quot; + AsText(RIV), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and ShowLevel5 and close &gt; (RIII + ((RIV - RIII) / 2)), \&quot;R5=\&quot; + AsText(RV), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and ShowLevel6 and close &gt; (RII + ((RV - RIV) / 2)), \&quot;R6=\&quot; + AsText(RVI), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and ShowLevel7 and close &gt; (RII + ((RVI - RV) / 2)), \&quot;R7=\&quot; + AsText(RVII), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and ShowLevel8 and close &gt; (RII + ((RVII - RVI) / 2)), \&quot;R8=\&quot; + AsText(RVIII), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and ShowPivotPoint and close &gt; SI and close &lt; RI, \&quot;PP=\&quot; + AsText(PP), Color.WHITE);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and (close &lt; VL or (Between(SI, VL, VH) and close &lt; VH)), \&quot;S1=\&quot; + AsText(SI), Color.GREEN);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and close &lt; VL, \&quot;S2=\&quot; + AsText(SII), Color.GREEN);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and close &lt; (SI - ((SI - SII) / 2)), \&quot;S3=\&quot; + AsText(SIII), Color.GREEN);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and ShowLevel4 and close &lt; (SII - ((SII - SIII) / 2)), \&quot;S4=\&quot; + AsText(SIV), Color.GREEN);\n\nAddLabel(ChartLabels == 2 and Label and ZeroTest, \&quot;VH=\&quot; + AsText(VH), Color.RED);\nAddLabel(ChartLabels == 2 and Label and ZeroTest, \&quot;POC=\&quot; + AsText(PC), Color.YELLOW);\nAddLabel(ChartLabels == 2 and Label and ZeroTest, \&quot;VL=\&quot; + AsText(VL), Color.GREEN);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero, \&quot;R1=\&quot; + AsText(RI), Color.RED);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero, \&quot;R2=\&quot; + AsText(RII), Color.RED);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero, \&quot;R3=\&quot; + AsText(RIII), Color.RED);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero and ShowLevel4, \&quot;R4=\&quot; + AsText(RIV), Color.RED);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero and ShowPivotPoint, \&quot;PP=\&quot; + AsText(PP), Color.WHITE);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero, \&quot;S1=\&quot; + AsText(SI), Color.GREEN);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero, \&quot;S2=\&quot; + AsText(SII), Color.GREEN);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero, \&quot;S3=\&quot; + AsText(SIII), Color.GREEN);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero and ShowLevel4, \&quot;S4=\&quot; + AsText(SIV), Color.GREEN);\n\nAddLabel(ChartLabels == 3 and Label and VArea and ZeroTest, “InsideValueArea”, Color.WHITE);\nAddLabel(ChartLabels == 3 and Label and VAreaabove and ZeroTest, “AboveValueArea”, Color.GREEN);\nAddLabel(ChartLabels == 3 and Label and VAreabelow and ZeroTest, \&quot;BelowValueArea”, Color.RED);\nAddLabel(!AfterHours and !Chart1 and !HideAfterHoursLabel, \&quot;NoShadowPlotAfterHours\&quot;, Color.ORANGE);\n\n#Chart Bubbles\ninput BubbleLeftSide = yes;\ndef  leftLoc =  if BubbleLeftSide then 1 else -1;#\nAddChartBubble(IsNaN(VH[leftLoc]) and ValueBubbles, VH, VH, Color.RED, no);\nAddChartBubble(IsNaN(PC[leftLoc]) and ValueBubbles, PC, PC, Color.YELLOW, no);\nAddChartBubble(IsNaN(VL[leftLoc]) and ValueBubbles, VL, VL, Color.GREEN, no);\nAddChartBubble(IsNaN(S1[leftLoc]) and PivotBubbles and S1_auto_show, S1, “S1”, Color.WHITE, no);\nAddChartBubble(IsNaN(S2[leftLoc]) and PivotBubbles and S2_auto_show, S2, “S2”, Color.WHITE, no);\nAddChartBubble(IsNaN(S3[leftLoc]) and PivotBubbles and S1_auto_show, S3, “S3”, Color.WHITE, no);\nAddChartBubble(IsNaN(S4[leftLoc]) and PivotBubbles and ShowLevel4 and S4_auto_show, S4, “S4”, Color.WHITE, no);\nAddChartBubble(IsNaN(PP[leftLoc]) and ShowPivotPoint and PivotBubbles, PP, “PP”, Color.WHITE, no);\nAddChartBubble(IsNaN(R1[leftLoc]) and PivotBubbles and R1_auto_show, R1, “R1”, Color.WHITE, no);\nAddChartBubble(IsNaN(R2[leftLoc]) and PivotBubbles and R2_auto_show, R2, “R2”, Color.WHITE, no);\nAddChartBubble(IsNaN(R3[leftLoc]) and PivotBubbles and R3_auto_show, R3, “R3”, Color.WHITE, no);\nAddChartBubble(IsNaN(R4[leftLoc]) and PivotBubbles  and ShowLevel4 and R4_auto_show, R4, “R4”, Color.WHITE, no);\n\n\n#Opening Range Breakout Functions\ndef ORBopen = SecondsTillTime(945) &lt;= 0;\ndef IsMarketOpen = ORBopen and CloseTime2;\ndef FirstBar = If(GetDay()[1] != GetDay(), GetDay() - 1, 0);\ndef OpenRange = SecondsFromTime(945);\ndef PastOpeningRange = OpenRange &gt;= (OrbTime - 15) * 60;\ndef DisplayedHigh = If(high &gt; DisplayedHigh[1] and IsMarketOpen and ShowORB, high, If(IsMarketOpen and !FirstBar, DisplayedHigh[1], high));\ndef DisplayedLow = If(low &lt; DisplayedLow[1] and IsMarketOpen and ShowORB, low, If(IsMarketOpen and !FirstBar, DisplayedLow[1], low));\ndef ORBHi = If(PastOpeningRange, ORBHi[1], DisplayedHigh);\ndef ORBLo  = If(PastOpeningRange, ORBLo[1], DisplayedLow);\nplot ORBHigh = If(Chart1 and PastOpeningRange and IsMarketOpen and ShowORB, ORBHi, Na);\nplot ORBLow  = If(Chart1 and PastOpeningRange and IsMarketOpen and ShowORB, ORBLo, Na);\n\n#Plot Criteria\nORBHigh.SetDefaultColor(Color.MAGENTA);\nORBHigh.SetStyle(Curve.SHORT_DASH);\nORBHigh.HideBubble();\nORBLow.SetDefaultColor(Color.MAGENTA);\nORBLow.SetStyle(Curve.SHORT_DASH);\nORBLow.HideBubble();\nVH.SetDefaultColor(Color.RED);\nPC.SetDefaultColor(Color.YELLOW);\nPC.SetStyle(Curve.LONG_DASH);\nVL.SetDefaultColor(Color.GREEN);\nR4.SetDefaultColor(Color.WHITE);\nR3.SetDefaultColor(Color.WHITE);\nR2.SetDefaultColor(Color.WHITE);\nR1.SetDefaultColor(Color.WHITE);\nPP.SetDefaultColor(Color.WHITE);\nS4.SetDefaultColor(Color.WHITE);\nS3.SetDefaultColor(Color.WHITE);\nS2.SetDefaultColor(Color.WHITE);\nS1.SetDefaultColor(Color.WHITE);\n\n#cloudhigh.SetDefaultColor(Color.RED);\n#cloudlow.SetDefaultColor(Color.GREEN);\nAddLabel(showVAH , \&quot;vah= \&quot; + AsText(VAH), Color.PINK);\nAddLabel(showVAH , \&quot;val= \&quot; + AsText(VAL), Color.LIGHT_GREEN);\nAddLabel(showVAH , \&quot;poc= \&quot; + AsText(POC), Color.LIGHT_ORANGE);\nAddLabel(showVAH , \&quot;pivot= \&quot; + AsText(Pivot), Color.PINK);\nVH.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nPC.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nVL.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nPP.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nR1.SetStyle(Curve.SHORT_DASH);\nR1.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nR2.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nR3.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nR4.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nS1.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nS2.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nS3.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nS4.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\n\n\nR1.SetHiding(R1_auto_show);\nR2.SetHiding(R2_auto_show);\nR3.SetHiding(R3_auto_show);\nR4.SetHiding(R4_auto_show);\nS1.SetHiding(S1_auto_show);\nS2.SetHiding(S2_auto_show);\nS3.SetHiding(S3_auto_show);\nS4.SetHiding(S4_auto_show);\n\n\n\n\ndef opacity_inv ;#= if (opacity &gt;= 0 and opacity &lt;= 100) then 100 - opacity else 50;\nif (no)#show_VA_cloud2\nthen\n{\n   opacity_inv = 1000;\n}\nelse\n\n{\n   opacity_inv = if (opacity &gt;= 0 and opacity &lt;= 100) then 100 - opacity else 50;\n}\n\ndef Vls  = If(Chart2 and ShowCloud2 and VA_low_short &gt; 0, VA_low_short, Na);\ndef Vll  = If(Chart2 and ShowCloud2  and VA_low_long &gt; 0, VA_low_long, Na);\ndef Vhs  = If(Chart2 and ShowCloud2  and VA_high_short &gt; 0, VA_high_short, Na);\ndef Vhl  = If(Chart2 and ShowCloud2  and VA_high_long &gt; 0, VA_high_long, Na);\n\nAddCloud(Vls,  Vll , CreateColor(144 * opacity_inv / 100, 240, 144 * opacity_inv / 100),  CreateColor(144 * opacity_inv / 100, 240, 144 * opacity_inv / 100));\n\nAddCloud(Vhs,   Vhl,  CreateColor(204, 184 * opacity_inv / 100, 202 * opacity_inv / 100),   CreateColor(204, 184 * opacity_inv / 100, 202 * opacity_inv / 100));\n\n\n#S5.SetHiding(!S5_auto_show);\n#AddLabel(yes , \&quot;R44= \&quot; + (S5_auto_show), Color.pink);\n#AddLabel(yes , \&quot;R5= \&quot; + ((RIII + ((RIV - SIII) / 2))), Color.pink);&quot;,name=&quot;_27529bda_67d5_4abb_8369_e61450a2de3a&quot;}){inputsMap:TreeMap13{^(&quot;PivotBubbles&quot;,&lt;F),^(&quot;PivotTimeFrame&quot;,&quot;MONTH&quot;),^(&quot;ProfileTimeFrame&quot;,&quot;MONTH&quot;),^(&quot;ShowCloud1&quot;,&lt;F),^(&quot;ShowLevel4&quot;,&lt;F),^(&quot;ShowLevel5&quot;,&lt;F),^(&quot;ShowPivotPoint&quot;,&lt;F),^(&quot;ShowR1&quot;,&lt;F),^(&quot;ShowR2&quot;,&lt;F),^(&quot;ShowR3&quot;,&lt;F),^(&quot;ShowS1&quot;,&lt;F),^(&quot;ShowS2&quot;,&lt;F),^(&quot;ShowS3&quot;,&lt;F),^(&quot;ValueBubbles&quot;,&lt;F)},inputsMap=@TreeMap13,plots{4:{hiding=&lt;T},5:{lineStyle=1},6:{hiding=&lt;T},7:{hiding=&lt;T},8:{hiding=&lt;T},12:{lineStyle=1}}})}},!get(#%6.SubgraphId(&quot;Volume&quot;)){height=80},^(#%6.SubgraphId(&quot;Subgraph3&quot;),#%6.SubgraphStorableModel{height=80,storableIndicators.+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence{body=&quot;declare lower;\n\n################\n\n\n\n\n\n#######\n\n\n\n\n\n\ninput price = close;\n\ninput superfast_length = 8;\n\ninput fast_length = 13;\n\ninput slow_length = 21;\n\ninput displace = 0;\n\n################\ninput averageType = AverageType.EXPONENTIAL;\n\ndef mov_avg8 = MovingAverage(averageType, price[-displace], superfast_length);\n\ndef mov_avg13 = MovingAverage(averageType, price[-displace], fast_length);\n\ndef mov_avg21 = MovingAverage(averageType, price[-displace], slow_length);\n \n#moving averages\n\ndef Superfast = mov_avg8;\n\ndef Fast = mov_avg13;\n\ndef Slow = mov_avg21;\n\n\ndef buy = mov_avg8 &gt; mov_avg13 and mov_avg13 &gt; mov_avg21 and low &gt; mov_avg8;\n\ndef stopbuy = mov_avg8 &lt;= mov_avg13;\n\ndef buynow = !buy[1] and buy;\n\ndef buysignal = CompoundValue(1, if buynow and !stopbuy then 1 else if buysignal[1] == 1 and stopbuy then 0 else buysignal[1], 0);\n\n\ndef Buy_Signal = buysignal[1] == 0 and buysignal == 1;\n\ndef Momentum_Down = buysignal[1] == 1 and buysignal == 0;\n\n\ndef sell = mov_avg8 &lt; mov_avg13 and mov_avg13 &lt; mov_avg21 and high &lt; mov_avg8;\n\ndef stopsell = mov_avg8 &gt;= mov_avg13;\n\ndef sellnow = !sell[1] and sell;\n\ndef sellsignal = CompoundValue(1, if sellnow and !stopsell then 1 else if sellsignal[1] == 1 and stopsell then 0 else sellsignal[1], 0);\n\n\ndef Sell_Signal = sellsignal[1] == 0 and sellsignal;\n\ndef Momentum_Up = sellsignal[1] == 1 and sellsignal == 0;\n \n# when using this as a custom scan, change the word plot to def\n# then remove the \'#\' from in front of one of the \&quot;plot Scan\&quot; statements below\ndef Colorbars = if buysignal == 1 then 1 else if sellsignal == 1 then -1 else if buysignal == 0 or sellsignal == 0 then 0 else 0;\n\n# use this first Scan plot for SLM Ribbon Momentum UP\n#plot Scan = if Colorbars == 1 then yes else no;\n\n# use this second Scan plot for SLM Ribbon Momentum DOWN\n#plot Scan = if Colorbars == -1 then yes else no;\n\n\n\ninput length = 14;\n\ndef MaxBound = HighestWeighted(high, length, LinearRegressionSlope(price = high, length = length));\ndef MinBound = LowestWeighted(low, length, LinearRegressionSlope(price = low, length = length));\ndef diff = MaxBound - MinBound;\n\nplot PROSC = if diff != 0 then 100 * (close - MinBound) / diff else 0;\nplot OverBought = 75;\nplot OverSold = 25;\nplot z =50;\nz.SetDefaultColor(color.gray);\n\nPROSC.SetDefaultColor(GetColor(8));\nOverBought.SetDefaultColor(GetColor(5));\nOverSold.SetDefaultColor(GetColor(5));\n\n\n###############\n\ndef Colorbars1 = if buysignal ==1 then 1 else if sellsignal ==1 then 2 else if buysignal ==0 or sellsignal==0 then 3 else 0;\n\n\n\nPROSC.definecolor(\&quot;Buy_Signal_Bars\&quot;, color.dark_green);\n\nPROSC.definecolor(\&quot;Sell_Signal_Bars\&quot;, color.red);\n\nPROSC.definecolor(\&quot;Neutral\&quot;, color.plum);\n\nPROSC.AssignValueColor(if Colorbars1 ==1 then PROSC.color(\&quot;buy_signal_bars\&quot;) else if colorbars1 ==2 then PROSC.color(\&quot;Sell_Signal_bars\&quot;) else  PROSC.color(\&quot;neutral\&quot;));\nPROSC.setlineWeight(2);\nOverBought.hide();\nOverSold.hide();\n\n\n\n\n\nAddCloud(0, OverSold, Color.RED, Color.light_green);\nAddCloud(OverBought, 100, Color.Green, Color.light_red);\n\n\nplot UpSignal = if (buysignal and PROSC crosses above OverSold) then OverSold else Double.NaN;\nplot DownSignal = if (sellsignal and PROSC crosses below OverBought) then OverBought else Double.NaN;\nplot DownSignal2 = if (( Momentum_Down or sellsignal) and PROSC  crosses below OverSold) then OverSold else Double.NaN;\n\nplot UpSignal2 = if ( Momentum_Up and PROSC&gt;= overbought) then overbought else Double.NaN;\ninput showBreakoutSignals =yes;\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\n\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\nUpSignal2.SetDefaultColor(Color.plum);\nUpSignal2.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\n\nDownSignal2.SetDefaultColor(Color.plum);\nDownSignal2.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\n\n\n\n&quot;,name=&quot;_bc0d152e_88dc_44b4_99a7_78acd8502e84&quot;}){hidden=&lt;T,inputsMap:TreeMap14{^(&quot;price&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap14})}),^(#%6.SubgraphId(&quot;Subgraph7&quot;),#%6.SubgraphStorableModel{height=81,storableIndicators.+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence{body=&quot;# RSI-Laguerre Self Adjusting With Fractal Energy Gaussian Price Filter\n# Mobius\n# V01.12.2016\n# Both Fractal Energy and RSI are plotted. RSI in cyan and FE in yellow. Look for trend exhaustion in the FE and a reversal of RSI or Price compression in FE and an RSI reversal.\n\ndeclare lower;\n\n#Inputs: \ninput nFE = 8;#hint nFE: length for Fractal Energy calculation. \ninput AlertOn = no;\ninput Glength  = 13;\ninput betaDev =  8;\ninput data = close;\n\ndef w = (2 * Double.Pi / Glength);\ndef beta = (1 - Cos(w)) / (Power(1.414, 2.0 / betaDev) - 1 );\ndef alpha = (-beta + Sqrt(beta * beta + 2 * beta));\ndef Go = Power(alpha, 4) * open + \n             4 * (1 – alpha) * Go[1] – 6 * Power( 1 - alpha, 2 ) * Go[2] + \n             4 * Power( 1 - alpha, 3 ) * Go[3] - Power( 1 - alpha, 4 ) * Go[4];\ndef Gh = Power(alpha, 4) * high + \n             4 * (1 – alpha) * Gh[1] – 6 * Power( 1 - alpha, 2 ) * Gh[2] + \n             4 * Power( 1 - alpha, 3 ) * Gh[3] - Power( 1 - alpha, 4 ) * Gh[4];\ndef Gl = Power(alpha, 4) * low + \n             4 * (1 – alpha) * Gl[1] – 6 * Power( 1 - alpha, 2 ) * Gl[2] + \n             4 * Power( 1 - alpha, 3 ) * Gl[3] - Power( 1 - alpha, 4 ) * Gl[4];\ndef Gc = Power(alpha, 4) * data + \n             4 * (1 – alpha) * Gc[1] – 6 * Power( 1 - alpha, 2 ) * Gc[2] + \n             4 * Power( 1 - alpha, 3 ) * Gc[3] - Power( 1 - alpha, 4 ) * Gc[4];\n# Variables:\ndef o;\ndef h;\ndef l;\ndef c;\ndef CU1;\ndef CU2;\ndef CU;\ndef CD1;\ndef CD2;\ndef CD;\ndef L0;\ndef L1;\ndef L2;\ndef L3;\nplot RSI;\nplot OS;\nplot OB;\nplot M;\n\n# Calculations\no = (Go + Gc[1]) / 2;\nh = Max(Gh, Gc[1]);\nl = Min(Gl, Gc[1]);\nc = (o + h + l + Gc) / 4;\nplot gamma = Log(Sum((Max(Gh, Gc[1]) - Min(Gl, Gc[1])), nFE) / \n        (Highest(Gh, nFE) - Lowest(Gl, nFE)))\n            / Log(nFE);\ngamma.SetDefaultColor(Color.YELLOW);\nL0 = (1 – gamma) * Gc + gamma * L0[1];\nL1 = -gamma * L0 + L0[1] + gamma * L1[1];\nL2 = -gamma * L1 + L1[1] + gamma * L2[1];\nL3 = -gamma * L2 + L2[1] + gamma * L3[1];\nif L0 &gt;= L1\nthen {\n    CU1 = L0 - L1;\n    CD1 = 0;\n} else {\n    CD1 = L1 - L0;\n    CU1 = 0;\n}\nif L1 &gt;= L2\nthen {\n    CU2 = CU1 + L1 - L2;\n    CD2 = CD1;\n} else {\n    CD2 = CD1 + L2 - L1;\n    CU2 = CU1;\n}\nif L2 &gt;= L3\nthen {\n    CU = CU2 + L2 - L3;\n    CD = CD2;\n} else {\n    CU = CU2;\n    CD = CD2 + L3 - L2;\n}\n\nRSI = if CU + CD &lt;&gt; 0 then CU / (CU + CD) else 0;\nRSI.SetDefaultColor(Color.CYAN);\nOS = if IsNaN(c) then Double.NaN else 0.2;\nOS.SetDefaultColor(Color.GRAY);\nOS.HideBubble();\nOS.HideTitle();\nOB = if IsNaN(c) then Double.NaN else 0.8;\nOB.SetDefaultColor(Color.GRAY);\nOB.HideBubble();\nOB.HideTitle();\nM = if IsNaN(c) then Double.NaN else 0.5;\nM.SetStyle(Curve.LONG_DASH);\nM.SetDefaultColor(Color.GRAY);\nM.HideBubble();\nM.HideTitle();\nplot FEh = if IsNaN(c) then Double.NaN else .618;\nFEh.SetStyle(Curve.SHORT_DASH);\nFEh.HideBubble();\nFEh.SetDefaultColor(Color.GRAY);\nFEh.HideTitle();\nplot FEl = if IsNaN(c) then Double.NaN else .382;\nFEl.SetStyle(Curve.SHORT_DASH);\nFEl.SetDefaultColor(Color.GRAY);\nFEl.HideBubble();\nFEl.HideTitle();\nAddCloud(0, OS, Color.RED, Color.GREEN);\nAddCloud(OB, 1, Color.GREEN, Color.RED);\nAlert(AlertOn and RSI crosses below .8, \&quot;\&quot;, Alert.BAR, Sound.Bell);\nAlert(AlertOn and RSI crosses above .2, \&quot;\&quot;, Alert.BAR, Sound.Bell);\n\n#######\n\n#SLIM ribon\ninput price = close;\n\ninput superfast_length =4;\n\ninput fast_length = 7;\n\ninput slow_length = 21;\n\ninput displace = 0;\n\n################\ninput averageTypeSuperfast = AverageType.simple;\ninput averageTypefast = AverageType.simple;\ninput averageTypeSlow = AverageType.EXPONENTIAL;\n\ninput  priceSupperFast = hlc3 ;\ninput priceFast  = close ;\ninput priceSlow  = close ;\n\ndef mov_avg_superFast = MovingAverage(averageTypeSuperfast, priceSupperFast[-displace], superfast_length);\ndef mov_avg_Fast = MovingAverage(averageTypefast, priceFast[-displace], fast_length);\ndef mov_avg_Slow = MovingAverage(averageTypeSlow, priceSlow[-displace], slow_length);\n\n#moving averages\ndef Superfast = mov_avg_superFast;\ndef Fast = mov_avg_Fast;\ndef Slow = mov_avg_Slow;\n\n################################\ndef buy = mov_avg_superFast &gt; mov_avg_Fast and mov_avg_Fast &gt; mov_avg_Slow and low &gt; mov_avg_superFast;\n\ndef stopbuy = mov_avg_superFast &lt;= mov_avg_Fast;\n\ndef buynow = !buy[1] and buy;\n\ndef buysignal = CompoundValue(1, if buynow and !stopbuy then 1 else if buysignal[1] == 1 and stopbuy then 0 else buysignal[1], 0);\n\n\ndef Buy_Signal = buysignal[1] == 0 and buysignal == 1;\n\ndef Momentum_Down = buysignal[1] == 1 and buysignal == 0;\n\n\ndef sell = mov_avg_superFast &lt; mov_avg_Fast and mov_avg_Fast &lt; mov_avg_Slow and high &lt; mov_avg_superFast;\n\ndef stopsell = mov_avg_superFast &gt;= mov_avg_Fast;\n\n\n\n###########################\ndef sellnow = !sell[1] and sell;\n\ndef sellsignal = CompoundValue(1, if sellnow and !stopsell then 1 else if sellsignal[1] == 1 and stopsell then 0 else sellsignal[1], 0);\n\n\ndef Sell_Signal = sellsignal[1] == 0 and sellsignal;\n\ndef Momentum_Up = sellsignal[1] == 1 and sellsignal == 0;\n \n# when using this as a custom scan, change the word plot to def\n# then remove the \'#\' from in front of one of the \&quot;plot Scan\&quot; statements below\ndef Colorbars = if buysignal == 1 then 1 else if sellsignal == 1 then -1 else if buysignal == 0 or sellsignal == 0 then 0 else 0;\n\n# use this first Scan plot for SLM Ribbon Momentum UP\n#plot Scan = if Colorbars == 1 then yes else no;\n\n# use this second Scan plot for SLM Ribbon Momentum DOWN\n#plot Scan = if Colorbars == -1 then yes else no;\n\ninput length = 19;\n\ndef HMA = MovingAverage(AverageType.HULL, price, length)[-displace];\ndef HMA_Up=  HMA &gt; HMA[1];\ndef HMA_Down =! HMA_UP;\n\n###############\n\n#def Colorbars1 = if buysignal == 1 then 1 else if sellsignal == 1 then 2 else if buysignal == 0 or sellsignal == 0 then 3 else 0;\n\n\n\nRSI.definecolor(\&quot;Buy\&quot;, color.dark_green);\n\n\nRSI.definecolor(\&quot;Sell\&quot;, color.red);\n\nRSI.DefineColor(\&quot;Neutral\&quot;, Color.PLUM);\n#RSI.DefineColor(\&quot;NeutralDown\&quot;, Color.orange);\nRSI.definecolor(\&quot;HullMA_up\&quot;, color.blue);\n\nRSI.definecolor(\&quot;HullMA_down\&quot;, color.orange);\n\nRSI.AssignValueColor(if buysignal and HMA_Up then RSI.color(\&quot;Buy\&quot;) else if buysignal and !HMA_Up then RSI.color(\&quot;HullMA_down\&quot;) else if sellsignal and HMA_Down  then RSI.color(\&quot;Sell\&quot;) else  if sellsignal and !HMA_Down  then RSI.color(\&quot;HullMA_up\&quot;) else  RSI.color(\&quot;neutral\&quot;));;#\n# if Momentum_Up then  RSI.color(\&quot;neutralUp\&quot;) else  RSI.color(\&quot;neutraldown\&quot;));\n\n\n\n\n####$$$$$$$$$$$$$$$$\n###############\n\n\n\n\nplot UpSignal = if (buysignal and RSI crosses above OS) then RSI-0.1 else Double.NaN;\nplot DownSignal = if (sellsignal and RSI crosses below OB) then RSI+0.1 else Double.NaN;\ninput showBreakoutSignals =yes;\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\n\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\n\n\n\n\n\n\n\n\n\n# End Code RSI_Laguerre Self Adjusting with Fractal Energy&quot;,name=&quot;_94f3daa4_27de_42e1_9e1c_1f3e66613988&quot;}){alerts:LocalAlertArray1,alerts=@LocalAlertArray1,inputsMap:TreeMap15{^(&quot;data&quot;,&quot;CLOSE&quot;),^(&quot;price&quot;,&quot;CLOSE&quot;),^(&quot;priceFast&quot;,&quot;CLOSE&quot;),^(&quot;priceSlow&quot;,&quot;CLOSE&quot;),^(&quot;priceSupperFast&quot;,&quot;(H+L+C)/3&quot;)},inputsMap=@TreeMap15,plots{0:{lineWeight=3}}})}),^(#%6.SubgraphId(&quot;Subgraph9&quot;),#%6.SubgraphStorableModel{height=80,storableIndicators.+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence{body=&quot;#converted from mobisu macd to ppo\n# this is actually macd and sqz indicator in one\n# added pivots\n\ndeclare lower;\n\ninput fastPeriod   = 12; #9/18/6 for 5m\ninput slowPeriod   = 26;\ninput signalPeriod = 9;\ninput price        = close;\ninput show = yes;\n\n\ndef fastEma   = ExpAverage( price, fastPeriod );\ndef slowEma   = ExpAverage( price, slowPeriod );\ndef periodOK  = fastPeriod &lt; slowPeriod;\nAddLabel( !periodOK, \&quot;ERROR: fastPeriod MUST be less than slowPeriod\&quot; );\ndef _ppo      = if periodOK then ((fastEma - slowEma) / slowEma) * 100 else 0;\ndef _signal   = ExpAverage( _ppo, signalPeriod );\n\n# generic plots wiht colors\nplot pmain   = _ppo;\npmain.SetDefaultColor( Color.BLUE );\npmain.SetLineWeight(2);\npmain.AssignValueColor(if pmain &lt; 0 and pmain &lt; pmain[1]  then Color.RED\n                       else if pmain &lt; 0 and  pmain &gt; pmain[1] then Color.DARK_GREEN\n                       else if pmain &gt; 0 and pmain &gt; pmain[1] then Color.GREEN\n                       else Color.DARK_RED);\npmain.HideBubble();\n\nplot mainEma   = _signal;\nmainEma.SetDefaultColor( Color.RED );\nmainEma.HideBubble();\nAddCloud(pmain, mainEma, Color.GREEN, Color.RED);\n\n#diff as histogram\nplot diff    = _ppo - _signal;\ndiff.SetDefaultColor(GetColor(5));\ndiff.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);\ndiff.SetLineWeight(3);\ndiff.DefineColor(\&quot;Positive and Up\&quot;, Color.GREEN);\ndiff.DefineColor(\&quot;Positive and Down\&quot;, Color.DARK_GREEN);\ndiff.DefineColor(\&quot;Negative and Down\&quot;, Color.RED);\ndiff.DefineColor(\&quot;Negative and Up\&quot;, Color.DARK_RED);\ndiff.AssignValueColor(if diff &gt;= 0 then if diff &gt; diff[1] then diff.Color(\&quot;Positive and Up\&quot;) else diff.Color(\&quot;Positive and Down\&quot;) else if diff &lt; diff[1] then diff.Color(\&quot;Negative and Down\&quot;) else diff.Color(\&quot;Negative and Up\&quot;));\n\n\n#mobius divergence calc\ndef pmainh = CompoundValue(1, \n            if pmain &lt; 0 then Double.NaN\n            else if pmain crosses above 0  then pmain\n            else if pmain &gt; 0 and  pmain &gt; pmainh[1]\n            then pmain else pmainh[1], 0);\n\ndef Valueh = CompoundValue(1, \n             if pmain &lt; 0 then Double.NaN\n             else if pmain crosses above 0  then high\n             else if pmain &gt; 0 and high &gt; Valueh[1] then high\n             else Valueh[1], 0);\n\nplot divLowSignal = if pmain &gt; 0 and  high &gt; Valueh[1] and pmain &lt; pmainh[1] then 0\n                 else Double.NaN;\ndivLowSignal.SetPaintingStrategy(PaintingStrategy.SQUARES);\ndivLowSignal.SetLineWeight(5);\ndivLowSignal.SetDefaultColor(Color.dark_orange);\n\ndef pmainL = CompoundValue(1, if pmain &gt; 0 then Double.NaN\n                             else if pmain crosses below 0  then pmain\n                             else if pmain &lt; 0 and pmain &lt; pmainl[1] then pmain\n                             else pmainl[1], 0);\n\ndef ValueL = CompoundValue(1, if pmain &gt; 0  then Double.NaN\n                              else if pmain crosses below 0 then low\n                              else if pmain &lt; 0 and low &lt; Valuel[1] then low\n                              else Valuel[1], 0);\n\nplot divUpSignall = if pmain &lt; 0 and   low &lt; Valuel[1] and pmain &gt; pmainl[1] then 0\n                 else Double.NaN;\ndivupSignall.SetPaintingStrategy(PaintingStrategy.SQUARES);\ndivUpSignall.SetLineWeight(5);\ndivUPSignall.SetDefaultColor(Color.blue);\n\n\n\n#zeroline\nplot zeroLine = 0;\nzeroLine.SetPaintingStrategy(PaintingStrategy.LINE);\nzeroLine.SetLineWeight(1);\nzeroLine.SetDefaultColor(Color.BLACK);\n\n\n#pivots\n\ndef ptrend = pmain;\ndef prange = 2;\ndef pivotHigh = if IsNaN(ptrend[-1]) then 0  else Lowest(ptrend, prange)[1] &gt; ptrend and Lowest(ptrend, prange)[-prange] &gt; ptrend ;\ndef pivotLow =  if  IsNaN(ptrend[-1]) then 0  else Highest(ptrend, prange)[1] &lt; ptrend and Highest(ptrend, prange)[-prange] &lt; ptrend ;\n#study\nplot plotPH = if pivotHigh and show then ptrend else Double.NaN;\nplotPH.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\nplotPH.SetDefaultColor(Color.GREEN);\n\nplot phline = if pivotHigh then pmain else Double.NaN;\nphline.SetDefaultColor(Color.DARK_GREEN);\nphline.EnableApproximation();phline.Hide();\n#\nplot plotPL = if pivotLow and show then ptrend else Double.NaN;\nplotPL.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\nplotPL.SetDefaultColor(Color.RED);\n\nplot plline = if pivotLow then pmain else Double.NaN;\nplline.SetDefaultColor(Color.RED);\nplline.EnableApproximation(); plline.hide();&quot;,name=&quot;_58fa56d7_7ed3_4ff5_b1a8_d0c87dfe1afc&quot;}){inputsMap:TreeMap16{^(&quot;price&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap16})}),^(#%6.SubgraphId(&quot;Subgraph11&quot;),#%6.SubgraphStorableModel{height=80,storableIndicators.+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence:ScriptEssence0{body=&quot;# OBV/OBV_MA  by MerryDay 5/24/20\n#When the OBV (On Balance Volume) crosses OBV’s 20-period moving average, the divergence signal of a trend reversal is confirmed. While research indicates a default of 20 is norm, I have been using a 34 period.  The difference is slight.\n# If the OBV is greater than the OBV ma then a green cloud appears under the OBV.\n\ndeclare lower;\ninput length = 20; #default = 20\ninput price = close;\n\nplot OBV = TotalSum(Sign(price - price[1]) * volume);\nplot OBVma = Average(OBV, length);\n\ndef aboveMA   = OBV &gt;= OBVma ;\n\n\n## LIPSTICK ##\nDefineGlobalColor(\&quot;LabelGreen\&quot;, CreateColor(0, 190, 0)) ;\nDefineGlobalColor(\&quot;PaleGreen\&quot;, CreateColor(180, 220, 180)) ;\nDefineGlobalColor(\&quot;PaleRed\&quot;, CreateColor (220, 200, 200)) ;\nDefineGlobalColor(\&quot;DullGold\&quot;, CreateColor(220, 220, 128)) ;\nDefineGlobalColor(\&quot;BlueJeans\&quot;, CreateColor(0, 150, 200)) ;\nOBVma.SetDefaultColor(GlobalColor(\&quot;DullGold\&quot;));\nOBVma.SetLineWeight(3);\nOBVma.HideBubble();\nOBVma.HideTitle();\n\nOBV.SetPaintingStrategy(PaintingStrategy.LINE_VS_TRIANGLES);\nOBV.SetLineWeight(2);\nOBV.HideBubble();\nOBV.HideTitle();\nOBV.DefineColor(\&quot;Up\&quot;, GlobalColor(\&quot;LabelGreen\&quot;));\nOBV.DefineColor(\&quot;Weak\&quot;, Color.LIGHT_GRAY);\nOBV.DefineColor(\&quot;Down\&quot;, GlobalColor(\&quot;PaleRed\&quot;));\nOBV.AssignValueColor(if OBV &gt; OBVma  then OBV.Color(\&quot;Up\&quot;) else OBV.Color(\&quot;Down\&quot;));\n\nplot OBVlow = if  OBV crosses below OBVma then 1 else 0;\nOBVlow.hide();\n\nplot crossup = if OBV crosses above OBVma then OBV else double.NaN;\ncrossup.HideBubble() ;\ncrossup.HideTitle() ;\ncrossup.SetPaintingStrategy(PaintingStrategy.TRIANGLES);\ncrossup.SetLineWeight(5);\ncrossup.SetDefaultColor(color.blue) ;\nplot crossdown = if OBV crosses below OBVma then OBV else double.NaN;\ncrossdown.HideBubble() ;\ncrossdown.HideTitle() ;\ncrossdown.SetPaintingStrategy(PaintingStrategy.TRIANGLES);\ncrossdown.SetLineWeight(5);\ncrossdown.SetDefaultColor(color.pink) ;\n\nAddCloud(OBV, OBVma, Color.LIGHT_GREEN, Color.PINK);\n\n#Alert(crosses_above_MA, \&quot;What\'s going to happen?\&quot; + GetSymbol(), Alert.BAR, Sound.bell);\nDefineGlobalColor(\&quot;MyCyan\&quot;, CreateColor(150, 0, 255)) ;\nDefineGlobalColor(\&quot;Sell\&quot;, CreateColor(255, 150, 0)) ;\n\n\n# End of OBV/OBV_MA &quot;,name=&quot;_5a6a53b8_41ce_3ef6_a10e_07a88a720b77&quot;}){hidden=&lt;T,inputsMap:TreeMap17{^(&quot;price&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap17})}),^(#%6.SubgraphId(&quot;Subgraph41&quot;),#%6.SubgraphStorableModel{height=80,storableIndicators.+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence:ScriptEssence1{body=&quot;#\n\ndeclare lower;\n\n\n\n###############################\ninput showlable=yes;\n\ninput pricePpm1 = close;\ninput pricePpm2 = close;\ninput pricePpm3 = close;\ninput ppmiSmooth =3;\ninput averageTypePpmiSmooth = AverageType.simple;\n#input signalPeriod = 1;\ndef lookback = 1;\n\ninput ppm1_length = 10;\ninput ppm2_length = 21;\ninput ppm3_length = 40;\ninput fast_length = 10;\ninput slow_length =21;\ndef displace = 0;\ninput averageTypePpm = AverageType.simple;\ninput averageTypefast = AverageType.simple;\ninput averageTypeSlow = AverageType.simple;;# AverageType.EXPONENTIAL;\n#input showMovingAvgLable =yes;\n\n\ndef movAvg_ppm1 = MovingAverage(averageTypePpm, pricePpm1, ppm1_length);\n#def sign = MovingAverage(averageTypePpm, movAvg_ppm1[-displace], signalPeriod);\ndef movAvg_ppm2 = MovingAverage(averageTypePpm, pricePpm2, ppm2_length);\ndef movAvg_ppm3 = MovingAverage(averageTypePpm, pricePpm3, ppm3_length);\n\n \n\n\n \n\n#moving averages\n\ndef   ppm1_ =100*( movAvg_ppm1-movAvg_ppm1[lookback])/( movAvg_ppm1); \ndef   ppm2_ =100*( movAvg_ppm2-movAvg_ppm2[lookback])/( movAvg_ppm2); \ndef   ppm3_ =100*( movAvg_ppm3-movAvg_ppm3[lookback])/(movAvg_ppm3); \n#Plot ppm1 =MovingAverage(AverageType.EXPONENTIAL,ppm[-displace], signalPeriod);\n\n\n\nplot ppm1= MovingAverage(averageTypePpmiSmooth,ppm1_,ppmiSmooth);\nplot ppm2=  MovingAverage(averageTypePpmiSmooth,ppm2_,ppmiSmooth);\nplot ppm3=  MovingAverage(averageTypePpmiSmooth,ppm3_,ppmiSmooth);\n\n\n\n\n\n\n\n\n\n\n\n\n#####\n\n\n\n\n\n\n\n#AddLabel(yes, \&quot; ppm1\&quot;, Color.white);\nplot ppm_d1  = MovingAverage(averageTypefast, ppm1[-displace], fast_length);\nplot ppm_d2 = MovingAverage(averageTypefast, ppm1[-displace], slow_length);\n\ninput showPpmDivLable=yes;\n\nAddLabel(showPpmDivLable, \&quot; ppm1= \&quot;+  roundup(ppm1,3), if ppm1&gt; 0 then Color.LIGHT_GREEN else if ppm1&lt; 0 then color.light_red else Color.Light_GRAY);\nAddLabel(showPpmDivLable, \&quot; d1= \&quot;+  roundup(ppm_d1,3),  Color.green);\nAddLabel(showPpmDivLable, \&quot; d2= \&quot;+  roundup(ppm_d2,3),  Color.cyan);\n\n\n\n#plot ppm1_d1 = MovingAverage(averageTypefast, ppm1[-displace], fast_length);\n#plot ppm1_d2 = MovingAverage(averageTypefast, ppm1[-displace], slow_length);\n\nppm1.setdefaultColor(color.light_ORANGE);\nppm2.setdefaultColor(color.violet);\nppm3.setdefaultColor(color.yellow);\n\nppm2.Hide();\nppm3.Hide();\nppm_d1.setdefaultColor(color.green);\nppm_d2.setdefaultColor(color.cyan);\n\n\nAddLabel(showlable, \&quot;  \&quot;+ ppm1_length+ \&quot;MAvg\&quot; ,ppm1.TakeValueColor ());\nAddLabel(showlable,  astext(movAvg_ppm1), if ppm1&lt; close then Color.LIGHT_GREEN else if ppm1&gt; close then color.light_red else Color.Light_GRAY);\ndef maDif= close- movAvg_ppm1;\n\nAddLabel(showlable and maDif&gt;0, \&quot; +\&quot;+astext(maDif),  Color.LIGHT_GREEN );\nAddLabel(showlable and maDif&lt;=0, \&quot; \&quot;+astext(maDif),  if maDif&lt; 0 then color.LIGHT_red else Color.LIGHT_GRAY);\n\nAddLabel(showlable, \&quot;  \&quot;+ ppm2_length+ \&quot;MAvg\&quot; ,ppm2.TakeValueColor ());\nAddLabel(showlable,  astext(movAvg_ppm2), if ppm2&lt; close then Color.LIGHT_GREEN else if ppm2&gt; close then color.light_red else Color.Light_GRAY);\n\n\nAddLabel(showlable, \&quot;  \&quot;+ ppm3_length+ \&quot;MAvg\&quot; ,ppm3.TakeValueColor ());\nAddLabel(showlable,  astext(movAvg_ppm3), if ppm3&lt; close then Color.LIGHT_GREEN else if ppm3&gt; close then color.light_red else Color.Light_GRAY);\n\n#AddLabel(showlable, \&quot;MA \&quot; + ppm_length + \&quot;=\&quot;+ astext(movAvg_ppm1), if movAvg_ppm1 &gt; close  then Color.RED else if movAvg_ppm1 &lt; close then  Color.GREEN else Color.GRAY);\n\nAddLabel(yes, \&quot; ppm1= \&quot;+  roundup(ppm1,3), if ppm1&gt; 0 then Color.LIGHT_GREEN else if ppm1&lt; 0 then color.light_red else Color.Light_GRAY);\nAddLabel(yes, \&quot; ppm2= \&quot; +   roundup(ppm2,3), if ppm2&gt; 0 then Color.LIGHT_GREEN else if ppm2&lt; 0 then color.light_red else Color.Light_GRAY);\nAddLabel(yes, \&quot; ppm3= \&quot;+  roundup(ppm3,3), if ppm3&gt; 0 then Color.LIGHT_GREEN else if ppm3&lt; 0 then color.light_red else Color.Light_GRAY);\n\n\n##################################\n\n&quot;,name=&quot;_41afd57b_6e78_4ddc_afbf_2d19525412ae&quot;}){inputsMap:TreeMap18{^(&quot;ppmiSmooth&quot;,1),^(&quot;pricePpm1&quot;,&quot;CLOSE&quot;),^(&quot;pricePpm2&quot;,&quot;CLOSE&quot;),^(&quot;pricePpm3&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap18})}),^(#%6.SubgraphId(&quot;Subgraph43&quot;),#%6.SubgraphStorableModel{height=96,storableIndicators.+(!%7.CompiledStudy.resolveStudy(@ScriptEssence1){hidden=&lt;T,inputsMap:TreeMap19{^(&quot;averageTypePpmiSmooth&quot;,&quot;HULL&quot;),^(&quot;ppmiSmooth&quot;,@Integer0),^(&quot;pricePpm1&quot;,&quot;CLOSE&quot;),^(&quot;pricePpm2&quot;,&quot;CLOSE&quot;),^(&quot;pricePpm3&quot;,&quot;CLOSE&quot;),^(&quot;showlable&quot;,&lt;F)},inputsMap=@TreeMap19})}),^(#%6.SubgraphId(&quot;Subgraph45&quot;),#%6.SubgraphStorableModel{height=80,storableIndicators.+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence{body=&quot;#\n\ndeclare lower;\n\n\n\n###############################\ninput showlable=yes;\n\ninput pricePpm1 = close;\ninput pricePpm2 = close;\ninput pricePpm3 = close;\ninput ppmiSmooth =3;\ninput averageTypePpmiSmooth = AverageType.simple;\n#input signalPeriod = 1;\ndef lookback = 1;\n\ninput ppm1_length = 10;\ninput ppm2_length = 21;\ninput ppm3_length = 40;\ninput fast_length = 10;\ninput slow_length =21;\ndef displace = 0;\ninput averageTypePpm = AverageType.simple;\ninput averageTypefast = AverageType.simple;\ninput averageTypeSlow = AverageType.simple;;# AverageType.EXPONENTIAL;\n#input showMovingAvgLable =yes;\n\n\ndef movAvg_ppm1 = MovingAverage(averageTypePpm, pricePpm1, ppm1_length);\n#def sign = MovingAverage(averageTypePpm, movAvg_ppm1[-displace], signalPeriod);\ndef movAvg_ppm2 = MovingAverage(averageTypePpm, pricePpm2, ppm2_length);\ndef movAvg_ppm3 = MovingAverage(averageTypePpm, pricePpm3, ppm3_length);\n\n \n\n\n \n\n#moving averages\n\ndef   ppm1_ =100*( movAvg_ppm1-movAvg_ppm1[lookback])/( movAvg_ppm1); \ndef   ppm2_ =100*( movAvg_ppm2-movAvg_ppm2[lookback])/( movAvg_ppm2); \ndef   ppm3_ =100*( movAvg_ppm3-movAvg_ppm3[lookback])/(movAvg_ppm3); \n#Plot ppm1 =MovingAverage(AverageType.EXPONENTIAL,ppm[-displace], signalPeriod);\n\n\n\nplot ppm1= MovingAverage(averageTypePpmiSmooth,ppm1_,ppmiSmooth);\nplot ppm2=  MovingAverage(averageTypePpmiSmooth,ppm2_,ppmiSmooth);\nplot ppm3=  MovingAverage(averageTypePpmiSmooth,ppm3_,ppmiSmooth);\n\n#AddLabel(yes, \&quot; ppm2\&quot;, Color.white);\nplot ppm_d1  = MovingAverage(averageTypefast, ppm2[-displace], fast_length);\nplot ppm_d2 = MovingAverage(averageTypefast, ppm2[-displace], slow_length);\n\ninput showPpmDivLable=yes;\n\nAddLabel(showPpmDivLable, \&quot; ppm2= \&quot;+  roundup(ppm2,3), if ppm2&gt; 0 then Color.LIGHT_GREEN else if ppm2&lt; 0 then color.light_red else Color.Light_GRAY);\nAddLabel(showPpmDivLable, \&quot; d1= \&quot;+  roundup(ppm_d1,3),  Color.green);\nAddLabel(showPpmDivLable, \&quot; d2= \&quot;+  roundup(ppm_d2,3),  Color.cyan);\n\n\n\n#plot ppm1_d1 = MovingAverage(averageTypefast, ppm1[-displace], fast_length);\n#plot ppm1_d2 = MovingAverage(averageTypefast, ppm1[-displace], slow_length);\n\nppm2.setdefaultColor(color.light_ORANGE);\nppm1.setdefaultColor(color.violet);\nppm3.setdefaultColor(color.yellow);\n\nppm1.Hide();\nppm3.Hide();\nppm_d1.setdefaultColor(color.green);\nppm_d2.setdefaultColor(color.cyan);\n\n\nAddLabel(showlable, \&quot;  \&quot;+ ppm1_length+ \&quot;MAvg\&quot; ,ppm1.TakeValueColor ());\nAddLabel(showlable,  astext(movAvg_ppm1), if ppm1&lt; close then Color.LIGHT_GREEN else if ppm1&gt; close then color.light_red else Color.Light_GRAY);\ndef maDif= close- movAvg_ppm1;\n\nAddLabel(showlable and maDif&gt;0, \&quot; +\&quot;+astext(maDif),  Color.LIGHT_GREEN );\nAddLabel(showlable and maDif&lt;=0, \&quot; \&quot;+astext(maDif),  if maDif&lt; 0 then color.LIGHT_red else Color.LIGHT_GRAY);\n\nAddLabel(showlable, \&quot;  \&quot;+ ppm2_length+ \&quot;MAvg\&quot; ,ppm2.TakeValueColor ());\nAddLabel(showlable,  astext(movAvg_ppm2), if ppm2&lt; close then Color.LIGHT_GREEN else if ppm2&gt; close then color.light_red else Color.Light_GRAY);\n\n\nAddLabel(showlable, \&quot;  \&quot;+ ppm3_length+ \&quot;MAvg\&quot; ,ppm3.TakeValueColor ());\nAddLabel(showlable,  astext(movAvg_ppm3), if ppm3&lt; close then Color.LIGHT_GREEN else if ppm3&gt; close then color.light_red else Color.Light_GRAY);\n\n#AddLabel(showlable, \&quot;MA \&quot; + ppm_length + \&quot;=\&quot;+ astext(movAvg_ppm1), if movAvg_ppm1 &gt; close  then Color.RED else if movAvg_ppm1 &lt; close then  Color.GREEN else Color.GRAY);\n\nAddLabel(yes, \&quot; ppm1= \&quot;+  roundup(ppm1,3), if ppm1&gt; 0 then Color.LIGHT_GREEN else if ppm1&lt; 0 then color.light_red else Color.Light_GRAY);\nAddLabel(yes, \&quot; ppm2= \&quot; +   roundup(ppm2,3), if ppm2&gt; 0 then Color.LIGHT_GREEN else if ppm2&lt; 0 then color.light_red else Color.Light_GRAY);\nAddLabel(yes, \&quot; ppm3= \&quot;+  roundup(ppm3,3), if ppm3&gt; 0 then Color.LIGHT_GREEN else if ppm3&lt; 0 then color.light_red else Color.Light_GRAY);\n\n\n##################################\n\n&quot;,name=&quot;_241ab338_5374_4fa4_814b_3fe4a4769fae&quot;}){inputsMap:TreeMap20{^(&quot;ppmiSmooth&quot;,1),^(&quot;pricePpm1&quot;,&quot;CLOSE&quot;),^(&quot;pricePpm2&quot;,&quot;CLOSE&quot;),^(&quot;pricePpm3&quot;,&quot;CLOSE&quot;),^(&quot;showlable&quot;,&lt;F)},inputsMap=@TreeMap20})}),^(#%6.SubgraphId(&quot;Subgraph47&quot;),#%6.SubgraphStorableModel{height=80,storableIndicators.+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence{body=&quot;#\n\ndeclare lower;\n\n\n\n###############################\ninput showMovLable=yes;\ninput showPpmDivLable=yes;\ninput pricePpm1 = close;\ninput pricePpm2 = close;\ninput pricePpm3 = close;\ninput ppmiSmooth =3;\ninput averageTypePpmiSmooth = AverageType.simple;\n#input signalPeriod = 1;\ndef lookback = 1;\n\ninput ppm1_length = 10;\ninput ppm2_length = 21;\ninput ppm3_length = 40;\ninput fast_length = 10;\ninput slow_length =21;\ndef displace = 0;\ninput averageTypePpm = AverageType.simple;\ninput averageTypefast = AverageType.simple;\ninput averageTypeSlow = AverageType.simple;;# AverageType.EXPONENTIAL;\n#input showMovingAvgLable =yes;\n\n\ndef movAvg_ppm1 = MovingAverage(averageTypePpm, pricePpm1, ppm1_length);\n#def sign = MovingAverage(averageTypePpm, movAvg_ppm1[-displace], signalPeriod);\ndef movAvg_ppm2 = MovingAverage(averageTypePpm, pricePpm2, ppm2_length);\ndef movAvg_ppm3 = MovingAverage(averageTypePpm, pricePpm3, ppm3_length);\n\n \n\n\n \n\n#moving averages\n\ndef   ppm1_ =100*( movAvg_ppm1-movAvg_ppm1[lookback])/( movAvg_ppm1); \ndef   ppm2_ =100*( movAvg_ppm2-movAvg_ppm2[lookback])/( movAvg_ppm2); \ndef   ppm3_ =100*( movAvg_ppm3-movAvg_ppm3[lookback])/(movAvg_ppm3); \n#Plot ppm1 =MovingAverage(AverageType.EXPONENTIAL,ppm[-displace], signalPeriod);\n\n\n\nplot ppm1= MovingAverage(averageTypePpmiSmooth,ppm1_,ppmiSmooth);\nplot ppm2=  MovingAverage(averageTypePpmiSmooth,ppm2_,ppmiSmooth);\nplot ppm3=  MovingAverage(averageTypePpmiSmooth,ppm3_,ppmiSmooth);\n\n\n#AddLabel(yes, \&quot; ppm3\&quot;, Color.white);\nplot ppm_d1  = MovingAverage(averageTypefast, ppm3[-displace], fast_length);\nplot ppm_d2 = MovingAverage(averageTypefast, ppm3[-displace], slow_length);\n\n\nAddLabel(showPpmDivLable, \&quot; ppm3= \&quot;+  roundup(ppm3,3), if ppm3&gt; 0 then Color.LIGHT_GREEN else if ppm3&lt; 0 then color.light_red else Color.Light_GRAY);\nAddLabel(showPpmDivLable, \&quot; d1= \&quot;+  roundup(ppm_d1,3),  Color.green);\nAddLabel(showPpmDivLable, \&quot; d2= \&quot;+  roundup(ppm_d2,3),  Color.cyan);\n\n\n#plot ppm1_d1 = MovingAverage(averageTypefast, ppm1[-displace], fast_length);\n#plot ppm1_d2 = MovingAverage(averageTypefast, ppm1[-displace], slow_length);\n\nppm3.setdefaultColor(color.light_ORANGE);\nppm1.setdefaultColor(color.violet);\nppm2.setdefaultColor(color.yellow);\n\nppm1.Hide();\nppm2.Hide();\nppm_d1.setdefaultColor(color.green);\nppm_d2.setdefaultColor(color.cyan);\n\n\nAddLabel(showMovLable, \&quot;  \&quot;+ ppm1_length+ \&quot;MAvg\&quot; ,ppm1.TakeValueColor ());\nAddLabel(showMovLable,  astext(movAvg_ppm1), if ppm1&lt; close then Color.LIGHT_GREEN else if ppm1&gt; close then color.light_red else Color.Light_GRAY);\ndef maDif= close- movAvg_ppm1;\n\nAddLabel(showMovLable and maDif&gt;0, \&quot; +\&quot;+astext(maDif),  Color.LIGHT_GREEN );\nAddLabel(showMovLable and maDif&lt;=0, \&quot; \&quot;+astext(maDif),  if maDif&lt; 0 then color.LIGHT_red else Color.LIGHT_GRAY);\n\nAddLabel(showMovLable, \&quot;  \&quot;+ ppm2_length+ \&quot;MAvg\&quot; ,ppm2.TakeValueColor ());\nAddLabel(showMovLable,  astext(movAvg_ppm2), if ppm2&lt; close then Color.LIGHT_GREEN else if ppm2&gt; close then color.light_red else Color.Light_GRAY);\n\n\nAddLabel(showMovLable, \&quot;  \&quot;+ ppm3_length+ \&quot;MAvg\&quot; ,ppm3.TakeValueColor ());\nAddLabel(showMovLable,  astext(movAvg_ppm3), if ppm3&lt; close then Color.LIGHT_GREEN else if ppm3&gt; close then color.light_red else Color.Light_GRAY);\n\n#AddLabel(showlable, \&quot;MA \&quot; + ppm_length + \&quot;=\&quot;+ astext(movAvg_ppm1), if movAvg_ppm1 &gt; close  then Color.RED else if movAvg_ppm1 &lt; close then  Color.GREEN else Color.GRAY);\n\nAddLabel(yes, \&quot; ppm1= \&quot;+  roundup(ppm1,3), if ppm1&gt; 0 then Color.LIGHT_GREEN else if ppm1&lt; 0 then color.light_red else Color.Light_GRAY);\nAddLabel(yes, \&quot; ppm2= \&quot; +   roundup(ppm2,3), if ppm2&gt; 0 then Color.LIGHT_GREEN else if ppm2&lt; 0 then color.light_red else Color.Light_GRAY);\nAddLabel(yes, \&quot; ppm3= \&quot;+  roundup(ppm3,3), if ppm3&gt; 0 then Color.LIGHT_GREEN else if ppm3&lt; 0 then color.light_red else Color.Light_GRAY);\n\n\n##################################\n\n&quot;,name=&quot;_eabbbfd6_185e_4ece_8538_e1ec527454ae&quot;}){inputsMap:TreeMap21{^(&quot;ppmiSmooth&quot;,1),^(&quot;pricePpm1&quot;,&quot;CLOSE&quot;),^(&quot;pricePpm2&quot;,&quot;CLOSE&quot;),^(&quot;pricePpm3&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap21})}),^(#%6.SubgraphId(&quot;Subgraph51&quot;),#%6.SubgraphStorableModel{height=171,storableIndicators.+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence{body=&quot;declare lower;\ninput priceSmi = hlc3;\ninput price = close;\n\ninput over_bought = 40.0;\ninput over_sold = -40.0;\ninput percentDLength = 4;\ninput percentKLength = 5;\n\ndef min_low = Lowest(low, percentKLength);\ndef max_high = Highest(high, percentKLength);\ndef rel_diff = priceSmi - (max_high + min_low) / 2;\ndef diff = max_high - min_low;\n\ndef avgrel = ExpAverage(ExpAverage(rel_diff, percentDLength), percentDLength);\ndef avgdiff = ExpAverage(ExpAverage(diff, percentDLength), percentDLength);\n\nplot SMI = if avgdiff != 0 then avgrel / (avgdiff / 2) * 100 else 0;\nSMI.SetDefaultColor(GetColor(1));\n\nplot AvgSMI = ExpAverage(SMI, percentDLength);\nAvgSMI.SetDefaultColor(Color.CYAN);\nplot z = 0;\nz.SetStyle(Curve.SHORT_DASH);\nz.SetDefaultColor(Color.YELLOW);\n\nplot overbought = over_bought;\noverbought.SetDefaultColor(GetColor(5));\n\nplot oversold = over_sold;\noversold.SetDefaultColor(GetColor(5));\n\ninput Buyth=-40;\n\ninput thCondition = {default \&quot;blw\&quot; , \&quot;abv\&quot;};\ndef cond;\ndef Na = Double.Nan;\n\nswitch (thCondition)\n{\n case blw: \n    cond = 1;\ncase abv :\n   cond = 0;\n}\nplot buySmi;\nplot sellsmi;\n\nif cond \n{\n buySmi = if SMI crosses above AvgSMI and SMI &lt;Buyth and SMI&lt;over_bought then SMI* 0.996 else Na;\n#sell = if SMI crosses below AvgSMI and SMI &gt;Sth and SMI&lt;80 then 1 else 0;\n}\nelse{\n buySmi = if SMI crosses above AvgSMI and SMI &gt;Buyth and SMI&lt;60 then Smi* 0.996 else na;\n\n\n}\n\n\n\nsellSmi = if SMI crosses below AvgSMI and SMI &gt;60 and SMI&lt;80 then smi* 1.004 else na;\n\nSellSmi.setpaintingStrategy(PaintingStrategy.ARROW_down);\n\nsellSmi.setDefaultColor(color.pink);\nBuySmi.setpaintingStrategy(PaintingStrategy.ARROW_up);\n\nBuySmi.setDefaultColor(color.yellow);\nBuySMI.SetLineWeight(3);\nSellSMI.SetLineWeight(3);\n\n\n#AddCloud(-100, over_sold, Color.RED, Color.GREEN);\n#AddCloud(over_bought, 100, Color.GREEN, Color.RED);\n\n#####\ndef cldH = if SMI &gt;= overbought then SMI else overbought;\nAddCloud(cldH, overbought, Color.GREEN, Color.GREEN);\n\ndef cldL = if SMI &lt; oversold then SMI else oversold;\nAddCloud(cldL, oversold, Color.RED, Color.RED);\noverbought.SetDefaultColor(GetColor(7));\noversold.SetDefaultColor(GetColor(7));\nSMI.SetLineWeight(1);\nAvgSMI.SetLineWeight(3);\noverbought.SetStyle(Curve.SHORT_DASH);\noversold.SetStyle(Curve.SHORT_DASH);\n\n####\n\n\n####$$$$$$$$\n\n\ninput priceSlm = close;\n\ninput superFastLength = 8;\n\ninput fastLengthSlm = 13;\n\ninput slowLengthSlm = 21;\n\ninput displaceSlm = 0;\n\n\ninput averageTypeSlm = AverageType.EXPONENTIAL;\n\ndef mov_avg8 = MovingAverage(averageTypeSlm, priceSlm[-displaceSlm], superFastLength);\n\ndef mov_avg13 = MovingAverage(averageTypeSlm, priceSlm[-displaceSlm], fastLengthSlm);\n\ndef mov_avg21 = MovingAverage(averageTypeSlm, priceSlm[-displaceSlm], slowLengthSlm);\n \n#moving averages\n\ndef Superfast = mov_avg8;\n\ndef Fast = mov_avg13;\n\ndef Slow = mov_avg21;\n\n\ndef buy = mov_avg8 &gt; mov_avg13 and mov_avg13 &gt; mov_avg21 and low &gt; mov_avg8;\n\ndef stopbuy = mov_avg8 &lt;= mov_avg13;\n\ndef buynow = !buy[1] and buy;\n\ndef buysignal = CompoundValue(1, if buynow and !stopbuy then 1 else if buysignal[1] == 1 and stopbuy then 0 else buysignal[1], 0);\n\n\ndef Buy_Signal = buysignal[1] == 0 and buysignal == 1;\n\ndef Momentum_Down = buysignal[1] == 1 and buysignal == 0;\n\n\ndef sell = mov_avg8 &lt; mov_avg13 and mov_avg13 &lt; mov_avg21 and high &lt; mov_avg8;\n\ndef stopsell = mov_avg8 &gt;= mov_avg13;\n\ndef sellnow = !sell[1] and sell;\n\ndef sellsignal = CompoundValue(1, if sellnow and !stopsell then 1 else if sellsignal[1] == 1 and stopsell then 0 else sellsignal[1], 0);\n\n\ndef Sell_Signal = sellsignal[1] == 0 and sellsignal;\n\ndef Momentum_Up = sellsignal[1] == 1 and sellsignal == 0;\n \n# when using this as a custom scan, change the word plot to def\n# then remove the \'#\' from in front of one of the \&quot;plot Scan\&quot; statements below\n########\n\ninput length = 20;\ninput priceHMA = close;\n\ndef HMA = MovingAverage(AverageType.HULL, priceHMA, length);\ndef HMA_Up =  HMA &gt; HMA[1];\ndef HMA_Down = ! HMA_Up;\n\n###############\n\n#def Colorbars1 = if buysignal == 1 then 1 else if sellsignal == 1 then 2 else if buysignal == 0 or sellsignal == 0 then 3 else 0;\n\n\n\nAvgSMI.DefineColor(\&quot;Buy\&quot;, Color.DARK_GREEN);\n\n\nAvgSMI.DefineColor(\&quot;Sell\&quot;, Color.RED);\n\nAvgSMI.DefineColor(\&quot;Neutral\&quot;, Color.PLUM);\n#RSI.DefineColor(\&quot;NeutralDown\&quot;, Color.orange);\nAvgSMI.DefineColor(\&quot;HullMA_up\&quot;, Color.BLUE);\n\nAvgSMI.DefineColor(\&quot;HullMA_down\&quot;, Color.ORANGE);\n\nAvgSMI.AssignValueColor(if buysignal and HMA_Up then AvgSMI.Color(\&quot;Buy\&quot;) else if buysignal and !HMA_Up then AvgSMI.Color(\&quot;HullMA_down\&quot;) else if sellsignal and HMA_Down  then AvgSMI.Color(\&quot;Sell\&quot;) else  if sellsignal and !HMA_Down  then AvgSMI.Color(\&quot;HullMA_up\&quot;) else  AvgSMI.Color(\&quot;neutral\&quot;));\n;#\n# if Momentum_Up then  RSI.color(\&quot;neutralUp\&quot;) else  RSI.color(\&quot;neutraldown\&quot;));\n\n\n\n\n\n####$$$$$$$$$$$$$$$$\n###############\n\n\n\n#plot UpSignal = if (buysignal and SMI crosses above AvgSMI-3 and SMI &lt;40) then SMI-3 else Double.NaN;\n\nplot UpSignal = if ((buysignal or Momentum_Up) and SMI crosses above AvgSMI ) then SMI - 3 else Double.NaN;\nplot DownSignal = if (sellsignal and SMI crosses below AvgSMI + 3 and SMI &gt; over_bought) then SMI + 3 else Double.NaN;\ninput showBreakoutSignals = yes;\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\n\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\n\n\n\n\n\n######$$$$\n\n\n#RSI\ninput overBoughtRsi = 75;\ninput overSoldRsi = 25;\ninput rsiLength = 14;\ninput rsiPrice = close;\ninput rsi_th = 42;\ndef rsi_val = reference RSI(length = rsiLength, price = rsiPrice );\nplot rsi_val_normalized = rsi_val - 50;\n####\n\n\n\nAddLabel(yes, \&quot;RSI = \&quot; + rsi_val , if rsi_val &gt; overBoughtRsi  then Color.RED else if rsi_val &lt; overSoldRsi then  Color.GREEN else Color.GRAY);\n##########\n#########################RSI\n\n\n\n\n\nrsi_val_normalized.DefineColor(\&quot;OverBought\&quot;, Color.LIGHT_RED);\nrsi_val_normalized.DefineColor(\&quot;Normal\&quot;, GetColor(7));\nrsi_val_normalized.DefineColor(\&quot;OverSold\&quot;, Color.LIGHT_GREEN);\nrsi_val_normalized.DefineColor(\&quot;Below50\&quot;, Color.CYAN);\nrsi_val_normalized.DefineColor(\&quot;Above50\&quot;, Color.PINK);\n\nrsi_val_normalized.AssignValueColor(if rsi_val &gt;= overBoughtRsi then rsi_val_normalized.Color(\&quot;OverBought\&quot;) else if rsi_val &lt;= overSoldRsi then rsi_val_normalized.Color(\&quot;OverSold\&quot;) else if (rsi_val &gt; overSoldRsi and rsi_val &lt; rsi_th) then rsi_val_normalized.Color(\&quot;Below50\&quot;) else if (rsi_val &lt; overBoughtRsi and rsi_val &gt; rsi_th) then rsi_val_normalized.Color(\&quot;Above50\&quot;) else  rsi_val_normalized.Color(\&quot;Normal\&quot;)) ;\n\n\n\n\n\n#########\ndef ImpVol = imp_volatility();\n\nAddLabel(yes, \&quot;iV= \&quot; + ImpVol, Color.GRAY);\n\n#trend reversal\ndef y = rsi_val ;\ninput riReversLength = 2;\ninput lookBack = 2;\n\n\ndef rsi_expAvg = ExpAverage(rsi_val, riReversLength);\n\n#trend reversal\ndef overBoughtReversal = if ((rsi_expAvg &gt; overBoughtRsi)within 2 bar) and  (rsi_expAvg crosses above rsi_val) then price else 0;# if (rsi_expAvg &gt; OverBought and  rsi_expAvg crosses above rsi_val  within 3 bar ) then 40 else 0;\ndef oversoldRevesal = if ((rsi_expAvg &lt; overSoldRsi)within 2 bar) and  (rsi_expAvg crosses below rsi_val within 2 bar) then price else 0;\n\n##############\n########!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n#vwap vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\n\n#####^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n#MACD\n\ninput fastLength = 12;\ninput slowLength = 26;\ninput MACDLength = 9;\ninput displace = 0;\ndef fastAvg = Sum(volume * price, fastLength) / Sum(volume, fastLength);\ndef slowAvg = Sum(volume * price, slowLength) / Sum(volume, slowLength);\ndef Value = fastAvg - slowAvg;\ndef Avg = ExpAverage(Value, MACDLength);\ndef MACD_Diff  = Value - Avg;\n#def ZeroLine = 0;\n\ninput def_cond = no;\ndef MACD_cond_logic = if (def_cond) then MACD_Diff &lt;= 0 else yes;\n\n\n#MACD Pivot reversal\n#input FilterLength=3;\n######################\n#def MACDV_Diff_expAvg = ExpAverage(MACD_Diff, FilterLength);\n#plot oversoldRevesalMACDV =if ((Diff_MACDV &lt; MacdZeroLine)within lookBack bar) and  ( Diff_MACDV crosses above   MACDV_Diff_expAvg within lookBack bar)and Diff_MACDV &gt; Diff_MACDV[1] then 1 else 0;# if (MACDV_Diff_expAvg &gt; OverBought and  MACDV_Diff_expAvg crosses above rsi_val  within 3 bar ) then 40 else 0;\n#plot overBoughtReversalMACDV = if ((Diff_MACDV &gt; MacdZeroLine)within lookBack bar) and  (MACDV_Diff_expAvg crosses above  Diff_MACDV  within lookBack bar)  and Diff_MACDV &lt; Diff_MACDV[1] and Diff_MACDV&gt;0 then 1 else 0;\n\n\n#trend Pivot reversal\ndef twoBarPivotMACD_Buy =  MACD_Diff &gt; MACD_Diff[1] and MACD_Diff[1] &gt; MACD_Diff[2] and MACD_Diff[2] &lt; MACD_Diff[3] and MACD_Diff[3] &lt; MACD_Diff [4];\ndef twoBarPivotMACD_Sell = MACD_Diff &lt; MACD_Diff[1] and MACD_Diff[1] &lt; MACD_Diff[2] and MACD_Diff[2] &gt; MACD_Diff[3] and MACD_Diff[3] &gt; MACD_Diff [4];\n###################\n\n\ndef uptrend = if price &gt; price[1] and price[1] &gt;= price[2] then 1 else 0;\n\n#####################################-----------------\n\n\n\ndef SMI_Buy_Signal = if  (AvgSMI crosses above overbought  within lookBack bar) and SMI &gt;  AvgSMI and (rsi_val &gt; overSoldRsi and rsi_val &lt; overBoughtRsi + 10 ) and (uptrend) then 1 else 0;\n\n\nplot buy2 = SMI_Buy_Signal;\n\n#def  buySvix_Signal = if ( MACD_cond_logic  and  EMA_condition and  oversoldRevesal  and buySvix &lt; Zeroline - 10 ) then 1 else 0;\n#plot buy3 = buySvix_Signal;\n\n\n\n\n\n\ndef SMI_Sell_Signal = if ( (SMI crosses below AvgSMI within lookBack bar) and (overBoughtReversal)) then 1 else 0;\n#def sellSignal2 = if ((rsi_val  &gt; overBoughtRsi within 3 bar) and (smi crosses below AvgSMI within 3 bar)) then 1 else 0;\n\n\nplot sell2 = SMI_Sell_Signal;\n\n#######\n\n#def FVE_buySignal = conVwapBuy and oversoldRevesal and pFVE_Bull  and MACD_cond_logic ;# and Diff &gt;= 0;\n#def sig_buy = pFVE_Bull and Diff &gt;= 0;\n#plot buy4 = FVE_buySignal ;\n\n\n#def FVE_sellSignal = overBoughtReversal and pFVE_Bear ;\n#plot sell4 = FVE_sellSignal;\nplot buy5 = twoBarPivotMACD_Buy and oversoldRevesal;\nplot sell5 = twoBarPivotMACD_Sell and overBoughtReversal;\n\n####\n#def buySignal2 = if (oversoldRevesal  and buythedip2 &lt; Zeroline ) then 1 else 0;\n\n#def buySignal3 = if ( oversoldRevesal  and buythedip3 &lt; Zeroline - 10 ) then 1 else 0;\n#plot buy3 = buySignal3;\ninput bubble = no;\nAddChartBubble(bubble and buy2 == 1, buy2, \&quot;B2SMI= \&quot; +  low[1] + \&quot; rsi \&quot; + rsi_val + \&quot; w \&quot; + vwap[1], Color.LIGHT_ORANGE, no);\n#AddChartBubble(buy3 == 1, buy3,  \&quot;B3Svix= \&quot; + price + \&quot; rsi \&quot; + rsi_val, Color.LIGHT_GRAY, no);\n#AddChartBubble(buy4 == 1, buy4,  \&quot;B4FVE= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.YELLOW, no);\nAddChartBubble(bubble and buy5 == 1, buy5,  \&quot;B5Macd= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.CYAN, no);\n\n#AddChartBubble(sell1 == 1, sell1, \&quot;S1STR= \&quot; + price + \&quot; rsi \&quot; + rsi_val, Color.LIGHT_RED, no);#Buy the Dip\n\nAddChartBubble(bubble and sell2 == 1, sell2, \&quot;S2SMI= \&quot; + price + \&quot; rsi \&quot; + rsi_val, Color.PINK, no);#Buy the Dip\n#AddChartBubble(sell4 == 1, sell4, \&quot;S4FVE= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.VIOLET, no);#Buy the Dip\nAddChartBubble(bubble and sell5 == 1, sell5, \&quot;S5Macd= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.BLUE, no);#Buy the Dip\n#AddChartBubble(oversoldRevesal , close, rsi_val, Color.blue, no);#Buy the Dip\n\ndef o = open;\ndef c = close;\ndef h = high;\ndef l = low;\n\nplot d1 = ((h - l) / o) * 100;\nplot d2 = ((h - l) / (c - o)) * 1;\nplot d = ((c - c[1]) / c[1]) * 100;\nd1.Hide();\nd2.Hide();\nd.Hide();\n\n\ninput vfiLength = 130;\ninput averageLength = 100;\ninput trendQualityLength = 63;\ninput maxStiffness = 7;\ninput marketIndex = \&quot;SPY\&quot;;\ninput weightForMoneyFlow = 1.0;\ninput weightForTradingAboveAverage = 1.0;\ninput weightForUptrend = 1.0;\ninput weightForTrendQuality = 1.0;\ninput weightForMarketDirection = 2.0;\ninput showLabel = No;\n\ndef vfi = reference VolumeFlowIndicator(length = vfiLength, \&quot;max volume cut off\&quot; = 2.5);\ndef sma = Average(close, averageLength);\ndef ema = ExpAverage(close(marketIndex), averageLength);\ndef stiffness = Sum(close &lt; sma, trendQualityLength);\n\ndef Score;\ndef MoneyFlow = vfi &gt; 0;\ndef TradingAboveAverage = close &gt; sma;\ndef Uptrend1 = sma &gt; sma[4];\ndef TrendQuality = stiffness &lt;= maxStiffness;\ndef MarketDirection = ema &gt;= ema[2];\n\nScore = weightForMoneyFlow * MoneyFlow + weightForTradingAboveAverage * TradingAboveAverage + weightForUptrend * uptrend + weightForTrendQuality * TrendQuality + weightForMarketDirection * MarketDirection;\n\n\nAddLabel(showLabel and MoneyFlow, \&quot;Money flow\&quot;, GetColor(2));\nAddLabel(showLabel and TradingAboveAverage, \&quot;Trading above average\&quot;, GetColor(3));\nAddLabel(showLabel and Uptrend1, \&quot;Uptrend\&quot;, GetColor(4));\nAddLabel(showLabel and TrendQuality, \&quot;Trend quality\&quot;, GetColor(5));\nAddLabel(showLabel and TrendQuality, \&quot;Trend quality\&quot;, GetColor(5));\nAddLabel(showLabel and MarketDirection, \&quot;Market direction\&quot;, GetColor(6));\nAddLabel(showLabel , \&quot;Market score \&quot; + Score, GetColor(7));&quot;,name=&quot;_7662dae8_fa6f_4a07_aa35_2ec04cb46236&quot;}){hidden=&lt;T,inputsMap:TreeMap22{^(&quot;price&quot;,&quot;CLOSE&quot;),^(&quot;priceSlm&quot;,&quot;CLOSE&quot;),^(&quot;rsiPrice&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap22})}),^(#%6.SubgraphId(&quot;Subgraph53&quot;),#%6.SubgraphStorableModel{height=289,storableIndicators.+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence{body=&quot;plot Data = close;#Created by Buy Low and given permission to share\n#Renamed SMI Trigger System by Hguru\n#IronRod Lower (may2015)- hull smoothed SMI with AwsomeOscillator histogram\n#  ribbonStudy added- based on distance between midprice and ema(20)\n# This is the smi-based lower Ive been using for quite a while:  I look for red on red and green on green for trading, where for example both the cloud is red and the smi dashed line is red.  Most reliable and easy to read signals Ive found.\n\n#Look for the Dashed lines to turn color and Avg line to cross the Dash line for an entry but with more risk, next entry when avg line and dashed color line  crosses the 40 line. Next and probably the best risk is when the avg line and dashed line cross the zero line and Dashed line and cloud are the same color. I use this with a MACD crossover arrow setting at 5,13,4 or 5,13,6 or 3,13,6\n\n#Not 100% on the ADX vertical line and histogram this might need to be adjusted to match a normal ADX line. The ADX vertical line can be turned off in the edit study. The hisotgram can be hidden as well.\n\n#Use with the Upper matching MP_SMIandVerticalLineWarning System  here&gt;&gt;&gt;  http://tos.mx/mDvxaX\n\n#use setting gridsize .10 for/CL for tick charts and lower agg time frames and 1.0 for 1 hour and Daily.\n\ndeclare lower;\n#SMI engine\ninput gridsize = 1.0;\ninput aoscale = 1;\ninput smiscale = 100;\ninput audio = yes;\ninput label = yes;\ninput smilimit = 40.0;\ninput adxvline = yes;\n\ndef percentDLength = 13;\ndef percentKLength = 21;\ndef smihull = 5;\ndef anglescalingfactor = 1 / gridsize;\n\ndef min_low = Lowest(low, percentKLength);\ndef max_high = Highest(high, percentKLength);\ndef rel_diff = close - (max_high + min_low) / 2;\ndef diffx = max_high - min_low;\n\ndef avgrel = ExpAverage(ExpAverage(rel_diff, percentDLength), percentDLength);\ndef avgdiff = ExpAverage(ExpAverage(diffx, percentDLength), percentDLength);\n#plot SMI =  if avgdiff != 0 then avgrel / (avgdiff / 2) * smiscale else 0;\nplot SMI = ExpAverage( if avgdiff != 0 then avgrel / (avgdiff / 2) * smiscale else 0, 3);\n#smi.setDefaultColor(getColor(1));\nSMI.DefineColor(\&quot;Up\&quot;, Color.DARK_GREEN);\nSMI.DefineColor(\&quot;Down\&quot;, Color.DOWNTICK);\nSMI.DefineColor(\&quot;flat\&quot;, Color.GRAY);\nSMI.AssignValueColor(if SMI &gt;= SMI[1] then SMI.Color(\&quot;up\&quot;) else SMI.Color(\&quot;down\&quot;));\nSMI.SetLineWeight(4);\nSMI.SetStyle(Curve.SHORT_DASH);\n\nplot SMI1 = if avgdiff != 0 then avgrel / (avgdiff / 2) * smiscale else 0;\nSMI1.SetDefaultColor(Color.GRAY);\n\nplot upper = smilimit;\nupper.SetDefaultColor(Color.BLUE);\n\nplot lower = -smilimit;\nlower.SetDefaultColor(Color.BLUE);\n\n\n\nplot Zero = 0;\nZero.SetDefaultColor(Color.DARK_GRAY);\n\n#AddCloud(SMI, smilimit, Color.GREEN, Color.LIGHT_GRAY);\n#AddCloud(-smilimit, SMI, Color.RED, Color.LIGHT_GRAY);\nAddCloud(SMI, 0, Color.LIGHT_GREEN, CreateColor(255, 50, 50));\n\nAlert(audio and SMI crosses above 0, \&quot;SMI Long\&quot;,  Alert.BAR, Sound.Ring);\nAlert(audio and SMI crosses below 0, \&quot;SMI Short\&quot;,  Alert.BAR, Sound.Ring);\nAlert(audio and SMI crosses smilimit, \&quot;\&quot;, Alert.BAR, Sound.Bell);\nupper.SetDefaultColor(Color.RED);\n#upper.SetStyle(Curve.SHORT_DASH);\nlower.SetDefaultColor(Color.UPTICK);\n#lower.SetStyle(Curve.SHORT_DASH);\n\n#AddCloud(diff, SMI, Color.DOWNTICK, Color.UPTICK);\nAddLabel(label and yes, \&quot;Dashed= SMI, cloud w/limit; Histogram = mAwesomeOscillator\&quot; , Color.BLUE);\n\n#adx histogram\n\ninput length = 14;#5;\ninput averageType = AverageType.WILDERS;\n\nplot ADX = (DMI(length, averageType).ADX) - 18;\nADX.SetPaintingStrategy(PaintingStrategy.LINE);\nADX.SetLineWeight(1);\nADX.DefineColor(\&quot;Up\&quot;, Color.BLUE);\nADX.DefineColor(\&quot;Down\&quot;, Color.DARK_ORANGE);\nADX.AssignValueColor(\n      if ADX &gt;= ADX[1] then ADX.Color(\&quot;up\&quot;)\nelse ADX.Color(\&quot;down\&quot;));\nplot adxcaut = 20;\nadxcaut.SetDefaultColor(Color.DARK_ORANGE);\n\nAddVerticalLine (adxvline and ADX &gt;= 1 and ADX &lt; ADX[1] and ADX[1] &gt; ADX[2], \&quot;mADX\&quot;, Color.BLUE);\n#alert(ADX1 &gt;= 1 and ADX1 &lt; ADX1[1] and ADX1[1] &gt; ADX1[2], alert.bar, sound.bell);&quot;,name=&quot;_cb18973f_9434_3c5b_adec_fac0de14f50d&quot;}){alerts:LocalAlertArray2,alerts=@LocalAlertArray2,hidden=&lt;T})}),^(#%6.SubgraphId(&quot;Subgraph55&quot;),#%6.SubgraphStorableModel{height=80,storableIndicators.+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence{body=&quot;\ndeclare lower; \ninput price = close;\ninput displace = 0;\ninput length = 20;\ninput Num_Dev_Dn = -2.0;\ninput Num_Dev_up = 2.0;\ninput averageType = AverageType.Simple;\ninput showCloud= yes;\n\ndef sDev = stdev(data = price[-displace], length = length);\n\nplot MidLine = MovingAverage(averageType, data = price[-displace], length = length);\nplot LowerBand = MidLine + num_Dev_Dn * sDev;\nplot UpperBand = MidLine + num_Dev_Up * sDev;\n\nLowerBand.SetDefaultColor(GetColor(0));\nMidLine.SetDefaultColor(GetColor(1));\nUpperBand.SetDefaultColor(GetColor(5));\n\n#############################\ndef Na = Double.NaN;\n\ndef cloudhigh = If( ShowCloud, UpperBand, Na);\ndef cloudlow  = If(ShowCloud, LowerBand, Na);\n#AddCloud(cloudhigh, cloudlow, Color.GRAY, Color.GRAY);\n\n\nAddCloud(cloudhigh, Midline, Color.Green, Color.light_Green);\nAddCloud(cloudlow, Midline, Color.Red, Color.light_Red);\n\nplot b= (close -lowerBand)/(upperBand-lowerBand);\n####$$$$$$$$\n\n\ninput priceSlm = close;\n\ninput superFastLength = 8;\n\ninput fastLengthSlm = 13;\n\ninput slowLengthSlm = 21;\n\n\n\n\ninput averageTypeSlm = AverageType.EXPONENTIAL;\n\ndef mov_avg8 = MovingAverage(averageTypeSlm, priceSlm[-displace], superFastLength);\n\ndef mov_avg13 = MovingAverage(averageTypeSlm, priceSlm[-displace], fastLengthSlm);\n\ndef mov_avg21 = MovingAverage(averageTypeSlm, priceSlm[-displace], slowLengthSlm);\n \n#moving averages\n\ndef Superfast = mov_avg8;\n\ndef Fast = mov_avg13;\n\ndef Slow = mov_avg21;\n\n\ndef buy = mov_avg8 &gt; mov_avg13 and mov_avg13 &gt; mov_avg21 and low &gt; mov_avg8;\n\ndef stopbuy = mov_avg8 &lt;= mov_avg13;\n\ndef buynow = !buy[1] and buy;\n\ndef buysignal = CompoundValue(1, if buynow and !stopbuy then 1 else if buysignal[1] == 1 and stopbuy then 0 else buysignal[1], 0);\n\n\ndef Buy_Signal = buysignal[1] == 0 and buysignal == 1;\n\ndef Momentum_Down = buysignal[1] == 1 and buysignal == 0;\n\n\ndef sell = mov_avg8 &lt; mov_avg13 and mov_avg13 &lt; mov_avg21 and high &lt; mov_avg8;\n\ndef stopsell = mov_avg8 &gt;= mov_avg13;\n\ndef sellnow = !sell[1] and sell;\n\ndef sellsignal = CompoundValue(1, if sellnow and !stopsell then 1 else if sellsignal[1] == 1 and stopsell then 0 else sellsignal[1], 0);\n\n\ndef Sell_Signal = sellsignal[1] == 0 and sellsignal;\n\ndef Momentum_Up = sellsignal[1] == 1 and sellsignal == 0;\n \n# when using this as a custom scan, change the word plot to def\n# then remove the \'#\' from in front of one of the \&quot;plot Scan\&quot; statements below\ndef Colorbars = if buysignal == 1 then 1 else if sellsignal == 1 then -1 else if buysignal == 0 or sellsignal == 0 then 0 else 0;\n\n# use this first Scan plot for SLM Ribbon Momentum UP\n#plot Scan = if Colorbars == 1 then yes else no;\n\n# use this second Scan plot for SLM Ribbon Momentum DOWN\n#plot Scan = if Colorbars == -1 then yes else no;\n\n\n\n\n\n\n###############\n\ndef Colorbars1 = if buysignal == 1 then 1 else if sellsignal == 1 then 2 else if buysignal == 0 or sellsignal == 0 then 3 else 0;\n\ninput lengthHma = 20;\n\ndef HMA = MovingAverage(AverageType.HULL, price, lengthHma);\ndef HMA_Up=  HMA &gt; HMA[1];\ndef HMA_Down =! HMA_UP;\n\n###############\n\n#def Colorbars1 = if buysignal == 1 then 1 else if sellsignal == 1 then 2 else if buysignal == 0 or sellsignal == 0 then 3 else 0;\n\n\n\nMidLine.definecolor(\&quot;Buy\&quot;, color.dark_green);\n\n\nMidLine.definecolor(\&quot;Sell\&quot;, color.red);\n\nMidLine.definecolor(\&quot;Neutral\&quot;, Color.PLUM);\n#MidLine.definecolor(\&quot;NeutralDown\&quot;, Color.orange);\nMidLine.definecolor(\&quot;HullMA_up\&quot;, color.blue);\n\nMidLine.definecolor(\&quot;HullMA_down\&quot;, color.orange);\n\nMidLine.AssignValueColor(if buysignal and HMA_Up then MidLine.color(\&quot;Buy\&quot;) else if buysignal and !HMA_Up then MidLine.color(\&quot;HullMA_down\&quot;) else if sellsignal and HMA_Down  then MidLine.color(\&quot;Sell\&quot;) else  if sellsignal and !HMA_Down  then MidLine.color(\&quot;HullMA_up\&quot;) else  MidLine.color(\&quot;neutral\&quot;));;#\n\nb.AssignValueColor(if buysignal and HMA_Up then MidLine.color(\&quot;Buy\&quot;) else if buysignal and !HMA_Up then MidLine.color(\&quot;HullMA_down\&quot;) else if sellsignal and HMA_Down  then MidLine.color(\&quot;Sell\&quot;) else  if sellsignal and !HMA_Down  then MidLine.color(\&quot;HullMA_up\&quot;) else  MidLine.color(\&quot;neutral\&quot;));;#\n# if Momentum_Up then  RSI.color(\&quot;neutralUp\&quot;) else  RSI.color(\&quot;neutraldown\&quot;));\n\nplot one =1;\nplot z =0;\nplot half=0.5;\n\n\n\n\n#MidLine.definecolor(\&quot;Buy_Signal_Bars\&quot;, color.dark_green);\n\n#MidLine.definecolor(\&quot;Sell_Signal_Bars\&quot;, color.red);\n\n#MidLine.definecolor(\&quot;NeutralUp\&quot;, color.plum);\n\n#MidLine.definecolor(\&quot;NeutralDown\&quot;, color.orange);\n\n#MidLine.AssignValueColor(if Colorbars1 ==1 then MidLine.color(\&quot;buy_signal_bars\&quot;) else if colorbars1 ==2 then #MidLine.color(\&quot;Sell_Signal_bars\&quot;) else if Momentum_Up then  MidLine.color(\&quot;neutralUp\&quot;) else MidLine.color(\&quot;neutralDown\&quot;) );\n\n\nplot UpSignal = if (buysignal and price crosses above MidLine) then LowerBand else Double.NaN;\nplot DownSignal = if (sellsignal and price crosses below MidLine) then UpperBand else Double.NaN;\ninput showBreakoutSignals =no;\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\n\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\n\n\n\nMidLine.setlineWeight(3);\n\n\n\n\n\n\n######$$$$&quot;,name=&quot;_a508af02_4cde_429d_ba94_3d375dee61fb&quot;}){inputsMap:TreeMap23{^(&quot;lengthHma&quot;,@Integer1),^(&quot;price&quot;,&quot;CLOSE&quot;),^(&quot;priceSlm&quot;,&quot;CLOSE&quot;),^(&quot;showCloud&quot;,&lt;F)},inputsMap=@TreeMap23,plots{0:{hiding=&lt;T},1:{hiding=&lt;T},2:{hiding=&lt;T},6:{color=@CustomColor7}}})}),^(#%6.SubgraphId(&quot;Subgraph57&quot;),#%6.SubgraphStorableModel{height=80,storableIndicators.+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence{body=&quot;\ndeclare lower; \n#Intraday Intensity Index\ninput price = close;\ninput displace = 0;\ninput length = 20;\ninput Num_Dev_Dn = -2.0;\ninput Num_Dev_up = 2.0;\ninput averageType = AverageType.Simple;\ninput showCloud= no;\n\ndef sDev = stdev(data = price[-displace], length = length);\n\nplot MidLine = MovingAverage(averageType, data = price[-displace], length = length);\nplot LowerBand = MidLine + num_Dev_Dn * sDev;\nplot UpperBand = MidLine + num_Dev_Up * sDev;\n\nLowerBand.SetDefaultColor(GetColor(0));\nMidLine.SetDefaultColor(GetColor(1));\nUpperBand.SetDefaultColor(GetColor(5));\nlowerband.hide();\nmidline.hide();\nupperBand.hide();\n\n\n#############################\ndef Na = Double.NaN;\n\ndef cloudhigh = If( ShowCloud, UpperBand, Na);\ndef cloudlow  = If(ShowCloud, LowerBand, Na);\n#AddCloud(cloudhigh, cloudlow, Color.GRAY, Color.GRAY);\n\n\nAddCloud(cloudhigh, Midline, Color.Green, Color.light_Green);\nAddCloud(cloudlow, Midline, Color.Red, Color.light_Red);\n\nplot b= (close -lowerBand)/(upperBand-lowerBand);\n####$$$$$$$$\n\n\ninput priceSlm = close;\n\ninput superFastLength = 8;\n\ninput fastLengthSlm = 13;\n\ninput slowLengthSlm = 21;\n\n\n\n\ninput averageTypeSlm = AverageType.EXPONENTIAL;\n\ndef mov_avg8 = MovingAverage(averageTypeSlm, priceSlm[-displace], superFastLength);\n\ndef mov_avg13 = MovingAverage(averageTypeSlm, priceSlm[-displace], fastLengthSlm);\n\ndef mov_avg21 = MovingAverage(averageTypeSlm, priceSlm[-displace], slowLengthSlm);\n \n#moving averages\n\ndef Superfast = mov_avg8;\n\ndef Fast = mov_avg13;\n\ndef Slow = mov_avg21;\n\n\ndef buy = mov_avg8 &gt; mov_avg13 and mov_avg13 &gt; mov_avg21 and low &gt; mov_avg8;\n\ndef stopbuy = mov_avg8 &lt;= mov_avg13;\n\ndef buynow = !buy[1] and buy;\n\ndef buysignal = CompoundValue(1, if buynow and !stopbuy then 1 else if buysignal[1] == 1 and stopbuy then 0 else buysignal[1], 0);\n\n\ndef Buy_Signal = buysignal[1] == 0 and buysignal == 1;\n\ndef Momentum_Down = buysignal[1] == 1 and buysignal == 0;\n\n\ndef sell = mov_avg8 &lt; mov_avg13 and mov_avg13 &lt; mov_avg21 and high &lt; mov_avg8;\n\ndef stopsell = mov_avg8 &gt;= mov_avg13;\n\ndef sellnow = !sell[1] and sell;\n\ndef sellsignal = CompoundValue(1, if sellnow and !stopsell then 1 else if sellsignal[1] == 1 and stopsell then 0 else sellsignal[1], 0);\n\n\ndef Sell_Signal = sellsignal[1] == 0 and sellsignal;\n\ndef Momentum_Up = sellsignal[1] == 1 and sellsignal == 0;\n \n# when using this as a custom scan, change the word plot to def\n# then remove the \'#\' from in front of one of the \&quot;plot Scan\&quot; statements below\ndef Colorbars = if buysignal == 1 then 1 else if sellsignal == 1 then -1 else if buysignal == 0 or sellsignal == 0 then 0 else 0;\n\n# use this first Scan plot for SLM Ribbon Momentum UP\n#plot Scan = if Colorbars == 1 then yes else no;\n\n# use this second Scan plot for SLM Ribbon Momentum DOWN\n#plot Scan = if Colorbars == -1 then yes else no;\n\n\n\n\n\n\n###############\n\ndef Colorbars1 = if buysignal == 1 then 1 else if sellsignal == 1 then 2 else if buysignal == 0 or sellsignal == 0 then 3 else 0;\n\ninput lengthHma = 20;\n\ndef HMA = MovingAverage(AverageType.HULL, price, lengthHma);\ndef HMA_Up=  HMA &gt; HMA[1];\ndef HMA_Down =! HMA_UP;\n\n###############\n\n#def Colorbars1 = if buysignal == 1 then 1 else if sellsignal == 1 then 2 else if buysignal == 0 or sellsignal == 0 then 3 else 0;\n\n\n\nMidLine.definecolor(\&quot;Buy\&quot;, color.dark_green);\n\n\nMidLine.definecolor(\&quot;Sell\&quot;, color.red);\n\nMidLine.definecolor(\&quot;Neutral\&quot;, Color.PLUM);\n#MidLine.definecolor(\&quot;NeutralDown\&quot;, Color.orange);\nMidLine.definecolor(\&quot;HullMA_up\&quot;, color.blue);\n\nMidLine.definecolor(\&quot;HullMA_down\&quot;, color.orange);\n\nMidLine.AssignValueColor(if buysignal and HMA_Up then MidLine.color(\&quot;Buy\&quot;) else if buysignal and !HMA_Up then MidLine.color(\&quot;HullMA_down\&quot;) else if sellsignal and HMA_Down  then MidLine.color(\&quot;Sell\&quot;) else  if sellsignal and !HMA_Down  then MidLine.color(\&quot;HullMA_up\&quot;) else  MidLine.color(\&quot;neutral\&quot;));;#\n\nb.AssignValueColor(if buysignal and HMA_Up then MidLine.color(\&quot;Buy\&quot;) else if buysignal and !HMA_Up then MidLine.color(\&quot;HullMA_down\&quot;) else if sellsignal and HMA_Down  then MidLine.color(\&quot;Sell\&quot;) else  if sellsignal and !HMA_Down  then MidLine.color(\&quot;HullMA_up\&quot;) else  MidLine.color(\&quot;neutral\&quot;));;#\n# if Momentum_Up then  RSI.color(\&quot;neutralUp\&quot;) else  RSI.color(\&quot;neutraldown\&quot;));\n\n# Intraday Intensity Index\n# Assembled by BenTen at useThinkScript.com\n# Converted from https://www.tradingview.com/script/klr607Yi-INTRADAY-INTENSITY-INDEX-IIIX-by-KIVAN%C3%87-fr3762/\n\n\n\ninput length2 = 21;\n#def K1 = (2 * close - high - low) * volume;\ndef K1 = ( close - open) * volume;\n\ndef K2 = if(high != low, high - low, 1);\ndef INT = K1 / K2;\ndef INTSUM = sum(INT, length2);\n\nplot histogram = INTSUM;\nplot a = INT;\n\nhistogram.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);\nhistogram.AssignValueColor(if INTSUM&gt;0 then color.blue else color.red);\na.SetDefaultColor(GetColor(0));\n\n\n\n\n\n\n\n\n\n#MidLine.definecolor(\&quot;Buy_Signal_Bars\&quot;, color.dark_green);\n\n#MidLine.definecolor(\&quot;Sell_Signal_Bars\&quot;, color.red);\n\n#MidLine.definecolor(\&quot;NeutralUp\&quot;, color.plum);\n\n#MidLine.definecolor(\&quot;NeutralDown\&quot;, color.orange);\n\n#MidLine.AssignValueColor(if Colorbars1 ==1 then MidLine.color(\&quot;buy_signal_bars\&quot;) else if colorbars1 ==2 then #MidLine.color(\&quot;Sell_Signal_bars\&quot;) else if Momentum_Up then  MidLine.color(\&quot;neutralUp\&quot;) else MidLine.color(\&quot;neutralDown\&quot;) );\n\n\nplot UpSignal = if (buysignal and price crosses above MidLine) then LowerBand else Double.NaN;\nplot DownSignal = if (sellsignal and price crosses below MidLine) then UpperBand else Double.NaN;\ninput showBreakoutSignals =no;\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\n\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\n\n\n\nMidLine.setlineWeight(3);\n\n\n\n\n\n\n######$$$$&quot;,name=&quot;_b9c241fe_a444_430e_90cb_11c5582e4030&quot;}){hidden=&lt;T,inputsMap:TreeMap24{^(&quot;price&quot;,&quot;CLOSE&quot;),^(&quot;priceSlm&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap24})}),^(#%6.SubgraphId(&quot;Subgraph59&quot;),#%6.SubgraphStorableModel{height=88,storableIndicators.+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence{body=&quot;\ndeclare lower; \ninput price = close;\ninput displace = 0;\ninput length = 20;\ninput Num_Dev_Dn = -2.0;\ninput Num_Dev_up = 2.0;\ninput averageType = AverageType.Simple;\ninput showCloud= no;\ninput useATR=no;\ndef sDev = stdev(data = price[-displace], length = length);\n\nplot MidLine = MovingAverage(averageType, data = price[-displace], length = length);\nplot LowerBand = MidLine + num_Dev_Dn * sDev;\nplot UpperBand = MidLine + num_Dev_Up * sDev;\n\nLowerBand.SetDefaultColor(GetColor(0));\nMidLine.SetDefaultColor(GetColor(1));\nUpperBand.SetDefaultColor(GetColor(5));\nlowerband.hide();\nmidline.hide();\nupperBand.hide();\n\n\n#############################\ndef Na = Double.NaN;\n\ndef cloudhigh = If( ShowCloud, UpperBand, Na);\ndef cloudlow  = If(ShowCloud, LowerBand, Na);\n#AddCloud(cloudhigh, cloudlow, Color.GRAY, Color.GRAY);\n\n\nAddCloud(cloudhigh, Midline, Color.Green, Color.light_Green);\nAddCloud(cloudlow, Midline, Color.Red, Color.light_Red);\n\nplot b= (close -lowerBand)/(upperBand-lowerBand);\n\n\n\n####$$$$$$$$\n\n\ninput priceSlm = close;\n\ninput superFastLength = 8;\n\ninput fastLengthSlm = 13;\n\ninput slowLengthSlm = 21;\n\n\n\n\ninput averageTypeSlm = AverageType.EXPONENTIAL;\n\ndef mov_avg8 = MovingAverage(averageTypeSlm, priceSlm[-displace], superFastLength);\n\ndef mov_avg13 = MovingAverage(averageTypeSlm, priceSlm[-displace], fastLengthSlm);\n\ndef mov_avg21 = MovingAverage(averageTypeSlm, priceSlm[-displace], slowLengthSlm);\n \n#moving averages\n\ndef Superfast = mov_avg8;\n\ndef Fast = mov_avg13;\n\ndef Slow = mov_avg21;\n\n\ndef buy = mov_avg8 &gt; mov_avg13 and mov_avg13 &gt; mov_avg21 and low &gt; mov_avg8;\n\ndef stopbuy = mov_avg8 &lt;= mov_avg13;\n\ndef buynow = !buy[1] and buy;\n\ndef buysignal = CompoundValue(1, if buynow and !stopbuy then 1 else if buysignal[1] == 1 and stopbuy then 0 else buysignal[1], 0);\n\n\ndef Buy_Signal = buysignal[1] == 0 and buysignal == 1;\n\ndef Momentum_Down = buysignal[1] == 1 and buysignal == 0;\n\n\ndef sell = mov_avg8 &lt; mov_avg13 and mov_avg13 &lt; mov_avg21 and high &lt; mov_avg8;\n\ndef stopsell = mov_avg8 &gt;= mov_avg13;\n\ndef sellnow = !sell[1] and sell;\n\ndef sellsignal = CompoundValue(1, if sellnow and !stopsell then 1 else if sellsignal[1] == 1 and stopsell then 0 else sellsignal[1], 0);\n\n\ndef Sell_Signal = sellsignal[1] == 0 and sellsignal;\n\ndef Momentum_Up = sellsignal[1] == 1 and sellsignal == 0;\n \n# when using this as a custom scan, change the word plot to def\n# then remove the \'#\' from in front of one of the \&quot;plot Scan\&quot; statements below\ndef Colorbars = if buysignal == 1 then 1 else if sellsignal == 1 then -1 else if buysignal == 0 or sellsignal == 0 then 0 else 0;\n\n# use this first Scan plot for SLM Ribbon Momentum UP\n#plot Scan = if Colorbars == 1 then yes else no;\n\n# use this second Scan plot for SLM Ribbon Momentum DOWN\n#plot Scan = if Colorbars == -1 then yes else no;\n\n\n\n\n\n\n###############\n\ndef Colorbars1 = if buysignal == 1 then 1 else if sellsignal == 1 then 2 else if buysignal == 0 or sellsignal == 0 then 3 else 0;\n\ninput lengthHma = 20;\n\ndef HMA = MovingAverage(AverageType.HULL, price, lengthHma);\ndef HMA_Up=  HMA &gt; HMA[1];\ndef HMA_Down =! HMA_UP;\n\n###############\n\n#def Colorbars1 = if buysignal == 1 then 1 else if sellsignal == 1 then 2 else if buysignal == 0 or sellsignal == 0 then 3 else 0;\n\n\n\nMidLine.definecolor(\&quot;Buy\&quot;, color.dark_green);\n\n\nMidLine.definecolor(\&quot;Sell\&quot;, color.red);\n\nMidLine.definecolor(\&quot;Neutral\&quot;, Color.PLUM);\n#MidLine.definecolor(\&quot;NeutralDown\&quot;, Color.orange);\nMidLine.definecolor(\&quot;HullMA_up\&quot;, color.blue);\n\nMidLine.definecolor(\&quot;HullMA_down\&quot;, color.orange);\n\nMidLine.AssignValueColor(if buysignal and HMA_Up then MidLine.color(\&quot;Buy\&quot;) else if buysignal and !HMA_Up then MidLine.color(\&quot;HullMA_down\&quot;) else if sellsignal and HMA_Down  then MidLine.color(\&quot;Sell\&quot;) else  if sellsignal and !HMA_Down  then MidLine.color(\&quot;HullMA_up\&quot;) else  MidLine.color(\&quot;neutral\&quot;));;#\n\nb.AssignValueColor(if buysignal and HMA_Up then MidLine.color(\&quot;Buy\&quot;) else if buysignal and !HMA_Up then MidLine.color(\&quot;HullMA_down\&quot;) else if sellsignal and HMA_Down  then MidLine.color(\&quot;Sell\&quot;) else  if sellsignal and !HMA_Down  then MidLine.color(\&quot;HullMA_up\&quot;) else  MidLine.color(\&quot;neutral\&quot;));;#\n# if Momentum_Up then  RSI.color(\&quot;neutralUp\&quot;) else  RSI.color(\&quot;neutraldown\&quot;));\n\nplot one =1;\nplot z =0;\nplot half=0.5;\nb.hide();\none.hide();\nhalf.hide();\ninput bWidthLookBack=125;\n\n\n\n\n\ninput lengthAtr = 14;\ninput averageTypeAtr = AverageType.WILDERS;\n\nplot ATR = MovingAverage(averageTypeAtr, TrueRange(high, close, low), lengthAtr);\nATR.SetDefaultColor(GetColor(8));\nATR.hide();\n#plot v_volatility= volume*((2*close-high-low)/(high-low));\nplot BB_bandwidth;\n if (!useATR)\n{\n BB_bandwidth = (upperBand-lowerBand)/(midline);\n}\n else \n{\n BB_bandwidth=(upperBand-lowerBand)/(ATR);\n}\nplot BW_H= highest(BB_bandwidth,bWidthLookBack);\nplot BW_L= lowest(BB_bandwidth,bWidthLookBack);\n\n\n#################!!!!!!!!!!!!!!!!!!!!!!!!!!!!\nplot BuysignalB = if(close crosses above  UpperBand,BB_bandwidth,na)  ;\n\nBuysignalB.DefineColor(\&quot;Above\&quot;, GetColor(1));\nBuysignalB.DefineColor(\&quot;Below\&quot;, GetColor(2));\n#signal.AssignValueColor(if crossingType == CrossingType.above then signal.color(\&quot;Above\&quot;) else signal.color(\&quot;Below\&quot;));\nBuysignalB.AssignValueColor( BuysignalB.color(\&quot;Above\&quot;) );\n\n\n#signal.SetPaintingStrategy(if crossingType == CrossingType.above\n #   then PaintingStrategy.BOOLEAN_ARROW_UP\n  #  else PaintingStrategy.BOOLEAN_ARROW_DOWN);\n\nBuysignalB.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\n\n\n\n\n\n\n##################################!!!!!!!!!!!!!!!!!!!!!!!\n\n\n\n\n\n\nBB_bandwidth.AssignValueColor(if buysignal and HMA_Up then MidLine.color(\&quot;Buy\&quot;) else if buysignal and !HMA_Up then MidLine.color(\&quot;HullMA_down\&quot;) else if sellsignal and HMA_Down  then MidLine.color(\&quot;Sell\&quot;) else  if sellsignal and !HMA_Down  then MidLine.color(\&quot;HullMA_up\&quot;) else  MidLine.color(\&quot;neutral\&quot;));;#\n# if Momentum_Up then  RSI.color(\&quot;neutralUp\&quot;) else  RSI.color(\&quot;neutraldown\&quot;));\n\n#MidLine.definecolor(\&quot;Buy_Signal_Bars\&quot;, color.dark_green);\n\n#MidLine.definecolor(\&quot;Sell_Signal_Bars\&quot;, color.red);\n\n#MidLine.definecolor(\&quot;NeutralUp\&quot;, color.plum);\n\n#MidLine.definecolor(\&quot;NeutralDown\&quot;, color.orange);\n\n#MidLine.AssignValueColor(if Colorbars1 ==1 then MidLine.color(\&quot;buy_signal_bars\&quot;) else if colorbars1 ==2 then #MidLine.color(\&quot;Sell_Signal_bars\&quot;) else if Momentum_Up then  MidLine.color(\&quot;neutralUp\&quot;) else MidLine.color(\&quot;neutralDown\&quot;) );\n\n\nplot UpSignal = if (buysignal and price crosses above MidLine) then LowerBand else Double.NaN;\nplot DownSignal = if (sellsignal and price crosses below MidLine) then UpperBand else Double.NaN;\ninput showBreakoutSignals =no;\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\n\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\n\n\n\nMidLine.setlineWeight(3);\n\n\n\n\n\n\n######$$$$&quot;,name=&quot;_c9bebc7b_c43e_4a5a_90e4_19ba478e5d83&quot;}){hidden=&lt;T,inputsMap:TreeMap25{^(&quot;bWidthLookBack&quot;,50),^(&quot;price&quot;,&quot;CLOSE&quot;),^(&quot;priceSlm&quot;,&quot;CLOSE&quot;),^(&quot;useATR&quot;,@Boolean0)},inputsMap=@TreeMap25})}),^(#%6.SubgraphId(&quot;Subgraph61&quot;),#%6.SubgraphStorableModel{height=108,storableIndicators.+(!%7.CompiledStudy.resolveStudy(@ScriptEssence0){hidden=&lt;T,inputsMap:TreeMap26{^(&quot;price&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap26})}),^(#%6.SubgraphId(&quot;Subgraph77&quot;),#%6.SubgraphStorableModel{height=154,storableIndicators.+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence{body=&quot;# OBV/OBV_MA  by MerryDay 5/24/20\n#When the OBV (On Balance Volume) crosses OBV’s 20-period moving average, the divergence signal of a trend reversal is confirmed. While research indicates a default of 20 is norm, I have been using a 34 period.  The difference is slight.\n# If the OBV is greater than the OBV ma then a green cloud appears under the OBV.\n\ndeclare lower;\ninput length = 20; #default = 20\ninput length2 = 21;\ninput price = close;\n\n\n\n\n\ndef K1 = ( close - open - low) * volume;\ndef K2 = if(high != low, high - low, 1);\ndef INT = K1 / K2;\ndef INTSUM = sum(INT, length2);\n\nplot OBV = TotalSum(Sign(INT - INT[1]) * volume);\nplot OBVma = Average(OBV, length);\ndef aboveMA   = OBV &gt;= OBVma ;\n\n#plot histogram = INTSUM;\n\n\n## LIPSTICK ##\nDefineGlobalColor(\&quot;LabelGreen\&quot;, CreateColor(0, 190, 0)) ;\nDefineGlobalColor(\&quot;PaleGreen\&quot;, CreateColor(180, 220, 180)) ;\nDefineGlobalColor(\&quot;PaleRed\&quot;, CreateColor (220, 200, 200)) ;\nDefineGlobalColor(\&quot;DullGold\&quot;, CreateColor(220, 220, 128)) ;\nDefineGlobalColor(\&quot;BlueJeans\&quot;, CreateColor(0, 150, 200)) ;\nOBVma.SetDefaultColor(GlobalColor(\&quot;DullGold\&quot;));\nOBVma.SetLineWeight(3);\nOBVma.HideBubble();\nOBVma.HideTitle();\n\nOBV.SetPaintingStrategy(PaintingStrategy.LINE_VS_TRIANGLES);\nOBV.SetLineWeight(2);\nOBV.HideBubble();\nOBV.HideTitle();\nOBV.DefineColor(\&quot;Up\&quot;, GlobalColor(\&quot;LabelGreen\&quot;));\nOBV.DefineColor(\&quot;Weak\&quot;, Color.LIGHT_GRAY);\nOBV.DefineColor(\&quot;Down\&quot;, GlobalColor(\&quot;PaleRed\&quot;));\nOBV.AssignValueColor(if OBV &gt; OBVma  then OBV.Color(\&quot;Up\&quot;) else OBV.Color(\&quot;Down\&quot;));\n\nplot OBVlow = if  OBV crosses below OBVma then 1 else 0;\nOBVlow.hide();\n\nplot crossup = if OBV crosses above OBVma then OBV else double.NaN;\ncrossup.HideBubble() ;\ncrossup.HideTitle() ;\ncrossup.SetPaintingStrategy(PaintingStrategy.TRIANGLES);\ncrossup.SetLineWeight(5);\ncrossup.SetDefaultColor(color.blue) ;\nplot crossdown = if OBV crosses below OBVma then OBV else double.NaN;\ncrossdown.HideBubble() ;\ncrossdown.HideTitle() ;\ncrossdown.SetPaintingStrategy(PaintingStrategy.TRIANGLES);\ncrossdown.SetLineWeight(5);\ncrossdown.SetDefaultColor(color.pink) ;\n\nAddCloud(OBV, OBVma, Color.LIGHT_GREEN, Color.PINK);\n\n#Alert(crosses_above_MA, \&quot;What\'s going to happen?\&quot; + GetSymbol(), Alert.BAR, Sound.bell);\nDefineGlobalColor(\&quot;MyCyan\&quot;, CreateColor(150, 0, 255)) ;\nDefineGlobalColor(\&quot;Sell\&quot;, CreateColor(255, 150, 0)) ;\n\n\n# End of OBV/OBV_MA &quot;,name=&quot;_d493e752_9de1_494d_b2e6_1ebb5a0de209&quot;}){hidden=&lt;T,inputsMap:TreeMap27{^(&quot;price&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap27})})}}" DEFAULT_TYPE="DASHBOARD" ORDER_ENTRY_EXPANDED="false" ORDER_ENTRY_PINNED_PROPERTY="false" ROW_COUNT="1" SHARED_USER_SCRIPTS="@v6@owner{chartAggregationPeriods:ChartAggregationPeriodArray0,chartAggregationPeriods=@ChartAggregationPeriodArray0}#java.util.HashMap{^(&quot;_60475667_d5a0_4a24_8038_b84ac1548626&quot;,&quot;TheoProjectionPivots&quot;),^(&quot;_f59c642e_bc17_46b6_b151_447e2c413c14&quot;,&quot;rsiLaguerreTime&quot;)}" SYMBOL="DCTH" SYMBOL_GROUP="2" VERTICAL="false" VISIBLE="true" WEIGHT="3.0"/>
            <DASHBOARD SYMBOL="MESA" SYMBOL_GROUP="2" VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <LEVEL_II SYMBOL="OCGN" SYMBOL_GROUP="2" VERTICAL="false" VISIBLE="false" WEIGHT="1.0">
              <SORTING COLUMN="BID" ORDER="-1"/>
              <SORTING1 COLUMN="ASK" ORDER="1"/>
            </LEVEL_II>
            <LIVE_NEWS SYMBOL="WAFU" SYMBOL_GROUP="2" VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <PHASE_SCORES VERTICAL="false" VISIBLE="false" WEIGHT="2.0"/>
            <TIME_SALES VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <TRADE CONFIGURATION_NAME="SINGLE" ORDER_RULES_SET="STOCK" ORDER_TYPE="LIMIT" OS_AUTO="false" OS_EXPANDED="true" OS_TIF="DAY" QTY="100.0" QTY_STEP="1.0" TEMPLATE="SINGLE" TRADE_BUTTONS="BUY_MKT;SELL_MKT;MULTI_CANCEL;REVERSE;FLAT;SECOND_LINE;QUANTITY;AUTO_SEND;ORDER_SETUP" VISIBLE="false">
              <OCO_STOP>
                <TRG_0 TRG_ENBL="true" TRG_LINK="ASK_BID" TRG_OFFSET_MODE="TICK" TRG_OT="STOP" TRG_SETUP="10.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AA="10.0" AAL="10.0" AAP="10.0" AAPL="10.0" ABG="10.0" ABML="10.0" ACER="10.0" ADBE="10.0" ADMP="10.0" AEG="10.0" AEHL="10.0" AFI="10.0" AJRD="10.0" AKU="10.0" ALEC="10.0" AMC="10.0" AMCR="10.0" AMD="10.0" AMRS="10.0" AMTX="10.0" AMZN="10.0" ANIX="10.0" ANPC="10.0" ANTE="10.0" AP="10.0" APOP="10.0" APTO="10.0" AR="10.0" AREC="10.0" ARES="10.0" ARLO="10.0" ASLEW="10.0" ATHM="10.0" ATIF="10.0" ATNF="10.0" AUY="10.0" AVCO="10.0" AXL="10.0" AZN="10.0" AZRX="10.0" BA="10.0" BABA="10.0" BBBY="10.0" BBD="10.0" BBDC="10.0" BFT="10.0" BILI="10.0" BLIN="10.0" BMY="10.0" BOX="10.0" BP="10.0" BRQS="10.0" BSGM="10.0" BURL="10.0" BWAY="10.0" BXRX="10.0" BYFC="10.0" CAKE="10.0" CAL="10.0" CCI="10.0" CCIV="10.0" CCJ="10.0" CEQPP="10.0" CHNG="10.0" CHX="10.0" CIDM="10.0" CIIC="10.0" CLBS="10.0" CLDR="10.0" CLEU="10.0" CLSN="10.0" CLVS="10.0" CNNE="10.0" COHN="10.0" COMP="10.0" CPRX="10.0" CRBP="10.0" CRTD="10.0" CSCO="10.0" CTIC="10.0" CUB="10.0" CVX="10.0" DCTH="10.0" DHT="10.0" DIS="10.0" DISCK="10.0" DNN="10.0" DOX="10.0" DPW="10.0" DS="10.0" DSKE="10.0" DTSS="10.0" EARS="10.0" EBS="10.0" EDTK="10.0" EMAN="10.0" ENPH="10.0" ETSY="10.0" EURN="10.0" EVRG="10.0" EW="10.0" EWA="10.0" EXEL="10.0" EYE="10.0" EYES="10.0" FAST="10.0" FB="10.0" FCAC="10.0" FLR="10.0" FLY="10.0" FPRX="10.0" FSLR="10.0" FSR="10.0" FUSE="10.0" FUV="10.0" GEL="10.0" GLOP="10.0" GME="10.0" GMER="10.0" GNCA="10.0" GOCO="10.0" GOED="10.0" HBI="10.0" HCHC="10.0" HENKY="10.0" HPE="10.0" HPQ="10.0" HPR="10.0" HTBX="10.0" HTHIY="10.0" HTZ="10.0" HUGE="10.0" HYLN="10.0" HZON="10.0" IDEX="10.0" IDXX="10.0" IGSB="10.0" IMTE="10.0" INFI="10.0" INFY="10.0" ING="10.0" INO="10.0" INPX="10.0" INTC="10.0" INTU="10.0" INUV="10.0" INVO="10.0" INVU="10.0" IWM="10.0" IZEA="10.0" JE="10.0" JENGQ="10.0" JFIN="10.0" JOB="10.0" K="10.0" KBR="10.0" KEYS="10.0" KMPH="10.0" KMX="10.0" KR="10.0" LAZR="10.0" LCI="10.0" LCTX="10.0" LEAF="10.0" LIVX="10.0" LKQ="10.0" LODE="10.0" LRTNF="10.0" LUV="10.0" MARA="10.0" MBT="10.0" MDII="10.0" MESA="10.0" METX="10.0" MFGP="10.0" MMDA1="10.0" MRIN="10.0" MSFT="10.0" MTEM="10.0" MU="10.0" MVIS="10.0" MX="10.0" MYO="10.0" MYSZ="10.0" NCLH="10.0" NDX="10.0" NEOS="10.0" NGD="10.0" NGL="10.0" NIO="10.0" NLOK="10.0" NLSN="10.0" NLSP="10.0" NLST="10.0" NNVC="10.0" NOK="10.0" NOV="10.0" NQ="10.0" NSLP="10.0" NTP="10.0" NUZE="10.0" NVDA="10.0" NXE="10.0" OCGN="10.0" OGEN="10.0" OGI="10.0" OHI="10.0" OI="10.0" OLO="10.0" OPEN="10.0" OPGN="10.0" ORCL="10.0" ORMP="10.0" OTIS="10.0" OVID="10.0" PAA="10.0" PAAS="10.0" PERI="10.0" PFF="10.0" PGX="10.0" PHM="10.0" PNC="10.0" POTX="10.0" PPG="10.0" PPL="10.0" PTE="10.0" QQQ="10.0" QSR="10.0" RAD="10.0" RAIL="10.0" RIBT="10.0" RKT="10.0" RMO="10.0" RP="10.0" RPAY="10.0" RRD="10.0" RSX="10.0" RUT="10.0" RVLV="10.0" RYCEY="10.0" SAVA="10.0" SAVE="10.0" SGLB="10.0" SID="10.0" SIFY="10.0" SINO="10.0" SINT="10.0" SIOX="10.0" SIRI="10.0" SITC="10.0" SIVR="10.0" SJI="10.0" SKLZ="10.0" SKT="10.0" SLDB="10.0" SLQT="10.0" SNAP="10.0" SNCA="10.0" SNOA="10.0" SOGO="10.0" SOS="10.0" SPCB="10.0" SPD="10.0" SPRT="10.0" SPX="10.0" SPY="10.0" SQ="10.0" STON="10.0" SUNW="10.0" SWI="10.0" SWK="10.0" T="10.0" TAP="10.0" TGTX="10.0" TH="10.0" THTX="10.0" TSIA="10.0" TSLA="10.0" TSLAX="10.0" TZA="10.0" U="10.0" UAL="10.0" UAMY="10.0" UEC="10.0" UIS="10.0" ULTA="10.0" USAC="10.0" USWS="10.0" UTZ="10.0" UUUU="10.0" UXIN="10.0" VALE="10.0" VEU="10.0" VIX="10.0" VJET="10.0" VSTM="10.0" VTRS="10.0" VVOS="10.0" VWO="10.0" WAFU="10.0" WETF="10.0" WKEY="10.0" WKHS="10.0" X="10.0" XELA="10.0" XERS="10.0" XL="10.0" XLP="10.0" XLU="10.0" XTLB="10.0" YGMZ="10.0" ZKIN="10.0" ZM="10.0"/>
                </TRG_0>
              </OCO_STOP>
              <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="1.0" TRG_TIF="DAY">
                <OFFSET_PER_SYMBOL AA="1.0" AAL="1.0" AAP="1.0" AAPL="1.0" ABG="1.0" ABML="1.0" ACER="1.0" ADBE="1.0" ADMP="1.0" AEG="1.0" AEHL="1.0" AFI="1.0" AJRD="1.0" AKU="1.0" ALEC="1.0" AMC="1.0" AMCR="1.0" AMD="1.0" AMRS="1.0" AMTX="1.0" AMZN="1.0" ANIX="1.0" ANPC="1.0" ANTE="1.0" AP="1.0" APOP="1.0" APTO="1.0" AR="1.0" AREC="1.0" ARES="1.0" ARLO="1.0" ASLEW="1.0" ATHM="1.0" ATIF="1.0" ATNF="1.0" AUY="1.0" AVCO="1.0" AXL="1.0" AZN="1.0" AZRX="1.0" BA="1.0" BABA="1.0" BBBY="1.0" BBD="1.0" BBDC="1.0" BFT="1.0" BILI="1.0" BLIN="1.0" BMY="1.0" BOX="1.0" BP="1.0" BRQS="1.0" BSGM="1.0" BURL="1.0" BWAY="1.0" BXRX="1.0" BYFC="1.0" CAKE="1.0" CAL="1.0" CCI="1.0" CCIV="1.0" CCJ="1.0" CEQPP="1.0" CHNG="1.0" CHX="1.0" CIDM="1.0" CIIC="1.0" CLBS="1.0" CLDR="1.0" CLEU="1.0" CLSN="1.0" CLVS="1.0" CNNE="1.0" COHN="1.0" COMP="1.0" CPRX="1.0" CRBP="1.0" CRTD="1.0" CSCO="1.0" CTIC="1.0" CUB="1.0" CVX="1.0" DCTH="1.0" DHT="1.0" DIS="1.0" DISCK="1.0" DNN="1.0" DOX="1.0" DPW="1.0" DS="1.0" DSKE="1.0" DTSS="1.0" EARS="1.0" EBS="1.0" EDTK="1.0" EMAN="1.0" ENPH="1.0" ETSY="1.0" EURN="1.0" EVRG="1.0" EW="1.0" EWA="1.0" EXEL="1.0" EYE="1.0" EYES="1.0" FAST="1.0" FB="1.0" FCAC="1.0" FLR="1.0" FLY="1.0" FPRX="1.0" FSLR="1.0" FSR="1.0" FUSE="1.0" FUV="1.0" GEL="1.0" GLOP="1.0" GME="1.0" GMER="1.0" GNCA="1.0" GOCO="1.0" GOED="1.0" HBI="1.0" HCHC="1.0" HENKY="1.0" HPE="1.0" HPQ="1.0" HPR="1.0" HTBX="1.0" HTHIY="1.0" HTZ="1.0" HUGE="1.0" HYLN="1.0" HZON="1.0" IDEX="1.0" IDXX="1.0" IGSB="1.0" IMTE="1.0" INFI="1.0" INFY="1.0" ING="1.0" INO="1.0" INPX="1.0" INTC="1.0" INTU="1.0" INUV="1.0" INVO="1.0" INVU="1.0" IWM="1.0" IZEA="1.0" JE="1.0" JENGQ="1.0" JFIN="1.0" JOB="1.0" K="1.0" KBR="1.0" KEYS="1.0" KMPH="1.0" KMX="1.0" KR="1.0" LAZR="1.0" LCI="1.0" LCTX="1.0" LEAF="1.0" LIVX="1.0" LKQ="1.0" LODE="1.0" LRTNF="1.0" LUV="1.0" MARA="1.0" MBT="1.0" MDII="1.0" MESA="1.0" METX="1.0" MFGP="1.0" MMDA1="1.0" MRIN="1.0" MSFT="1.0" MTEM="1.0" MU="1.0" MVIS="1.0" MX="1.0" MYO="1.0" MYSZ="1.0" NCLH="1.0" NDX="1.0" NEOS="1.0" NGD="1.0" NGL="1.0" NIO="1.0" NLOK="1.0" NLSN="1.0" NLSP="1.0" NLST="1.0" NNVC="1.0" NOK="1.0" NOV="1.0" NQ="1.0" NSLP="1.0" NTP="1.0" NUZE="1.0" NVDA="1.0" NXE="1.0" OCGN="1.0" OGEN="1.0" OGI="1.0" OHI="1.0" OI="1.0" OLO="1.0" OPEN="1.0" OPGN="1.0" ORCL="1.0" ORMP="1.0" OTIS="1.0" OVID="1.0" PAA="1.0" PAAS="1.0" PERI="1.0" PFF="1.0" PGX="1.0" PHM="1.0" PNC="1.0" POTX="1.0" PPG="1.0" PPL="1.0" PTE="1.0" QQQ="1.0" QSR="1.0" RAD="1.0" RAIL="1.0" RIBT="1.0" RKT="1.0" RMO="1.0" RP="1.0" RPAY="1.0" RRD="1.0" RSX="1.0" RUT="1.0" RVLV="1.0" RYCEY="1.0" SAVA="1.0" SAVE="1.0" SGLB="1.0" SID="1.0" SIFY="1.0" SINO="1.0" SINT="1.0" SIOX="1.0" SIRI="1.0" SITC="1.0" SIVR="1.0" SJI="1.0" SKLZ="1.0" SKT="1.0" SLDB="1.0" SLQT="1.0" SNAP="1.0" SNCA="1.0" SNOA="1.0" SOGO="1.0" SOS="1.0" SPCB="1.0" SPD="1.0" SPRT="1.0" SPX="1.0" SPY="1.0" SQ="1.0" STON="1.0" SUNW="1.0" SWI="1.0" SWK="1.0" T="1.0" TAP="1.0" TGTX="1.0" TH="1.0" THTX="1.0" TSIA="1.0" TSLA="1.0" TSLAX="1.0" TZA="1.0" U="1.0" UAL="1.0" UAMY="1.0" UEC="1.0" UIS="1.0" ULTA="1.0" USAC="1.0" USWS="1.0" UTZ="1.0" UUUU="1.0" UXIN="1.0" VALE="1.0" VEU="1.0" VIX="1.0" VJET="1.0" VSTM="1.0" VTRS="1.0" VVOS="1.0" VWO="1.0" WAFU="1.0" WETF="1.0" WKEY="1.0" WKHS="1.0" X="1.0" XELA="1.0" XERS="1.0" XL="1.0" XLP="1.0" XLU="1.0" XTLB="1.0" YGMZ="1.0" ZKIN="1.0" ZM="1.0"/>
              </TRG_0>
              <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-1.0" TRG_TIF="DAY">
                <OFFSET_PER_SYMBOL AA="-1.0" AAL="-1.0" AAP="-1.0" AAPL="-1.0" ABG="-1.0" ABML="-1.0" ACER="-1.0" ADBE="-1.0" ADMP="-1.0" AEG="-1.0" AEHL="-1.0" AFI="-1.0" AJRD="-1.0" AKU="-1.0" ALEC="-1.0" AMC="-1.0" AMCR="-1.0" AMD="-1.0" AMRS="-1.0" AMTX="-1.0" AMZN="-1.0" ANIX="-1.0" ANPC="-1.0" ANTE="-1.0" AP="-1.0" APOP="-1.0" APTO="-1.0" AR="-1.0" AREC="-1.0" ARES="-1.0" ARLO="-1.0" ASLEW="-1.0" ATHM="-1.0" ATIF="-1.0" ATNF="-1.0" AUY="-1.0" AVCO="-1.0" AXL="-1.0" AZN="-1.0" AZRX="-1.0" BA="-1.0" BABA="-1.0" BBBY="-1.0" BBD="-1.0" BBDC="-1.0" BFT="-1.0" BILI="-1.0" BLIN="-1.0" BMY="-1.0" BOX="-1.0" BP="-1.0" BRQS="-1.0" BSGM="-1.0" BURL="-1.0" BWAY="-1.0" BXRX="-1.0" BYFC="-1.0" CAKE="-1.0" CAL="-1.0" CCI="-1.0" CCIV="-1.0" CCJ="-1.0" CEQPP="-1.0" CHNG="-1.0" CHX="-1.0" CIDM="-1.0" CIIC="-1.0" CLBS="-1.0" CLDR="-1.0" CLEU="-1.0" CLSN="-1.0" CLVS="-1.0" CNNE="-1.0" COHN="-1.0" COMP="-1.0" CPRX="-1.0" CRBP="-1.0" CRTD="-1.0" CSCO="-1.0" CTIC="-1.0" CUB="-1.0" CVX="-1.0" DCTH="-1.0" DHT="-1.0" DIS="-1.0" DISCK="-1.0" DNN="-1.0" DOX="-1.0" DPW="-1.0" DS="-1.0" DSKE="-1.0" DTSS="-1.0" EARS="-1.0" EBS="-1.0" EDTK="-1.0" EMAN="-1.0" ENPH="-1.0" ETSY="-1.0" EURN="-1.0" EVRG="-1.0" EW="-1.0" EWA="-1.0" EXEL="-1.0" EYE="-1.0" EYES="-1.0" FAST="-1.0" FB="-1.0" FCAC="-1.0" FLR="-1.0" FLY="-1.0" FPRX="-1.0" FSLR="-1.0" FSR="-1.0" FUSE="-1.0" FUV="-1.0" GEL="-1.0" GLOP="-1.0" GME="-1.0" GMER="-1.0" GNCA="-1.0" GOCO="-1.0" GOED="-1.0" HBI="-1.0" HCHC="-1.0" HENKY="-1.0" HPE="-1.0" HPQ="-1.0" HPR="-1.0" HTBX="-1.0" HTHIY="-1.0" HTZ="-1.0" HUGE="-1.0" HYLN="-1.0" HZON="-1.0" IDEX="-1.0" IDXX="-1.0" IGSB="-1.0" IMTE="-1.0" INFI="-1.0" INFY="-1.0" ING="-1.0" INO="-1.0" INPX="-1.0" INTC="-1.0" INTU="-1.0" INUV="-1.0" INVO="-1.0" INVU="-1.0" IWM="-1.0" IZEA="-1.0" JE="-1.0" JENGQ="-1.0" JFIN="-1.0" JOB="-1.0" K="-1.0" KBR="-1.0" KEYS="-1.0" KMPH="-1.0" KMX="-1.0" KR="-1.0" LAZR="-1.0" LCI="-1.0" LCTX="-1.0" LEAF="-1.0" LIVX="-1.0" LKQ="-1.0" LODE="-1.0" LRTNF="-1.0" LUV="-1.0" MARA="-1.0" MBT="-1.0" MDII="-1.0" MESA="-1.0" METX="-1.0" MFGP="-1.0" MMDA1="-1.0" MRIN="-1.0" MSFT="-1.0" MTEM="-1.0" MU="-1.0" MVIS="-1.0" MX="-1.0" MYO="-1.0" MYSZ="-1.0" NCLH="-1.0" NDX="-1.0" NEOS="-1.0" NGD="-1.0" NGL="-1.0" NIO="-1.0" NLOK="-1.0" NLSN="-1.0" NLSP="-1.0" NLST="-1.0" NNVC="-1.0" NOK="-1.0" NOV="-1.0" NQ="-1.0" NSLP="-1.0" NTP="-1.0" NUZE="-1.0" NVDA="-1.0" NXE="-1.0" OCGN="-1.0" OGEN="-1.0" OGI="-1.0" OHI="-1.0" OI="-1.0" OLO="-1.0" OPEN="-1.0" OPGN="-1.0" ORCL="-1.0" ORMP="-1.0" OTIS="-1.0" OVID="-1.0" PAA="-1.0" PAAS="-1.0" PERI="-1.0" PFF="-1.0" PGX="-1.0" PHM="-1.0" PNC="-1.0" POTX="-1.0" PPG="-1.0" PPL="-1.0" PTE="-1.0" QQQ="-1.0" QSR="-1.0" RAD="-1.0" RAIL="-1.0" RIBT="-1.0" RKT="-1.0" RMO="-1.0" RP="-1.0" RPAY="-1.0" RRD="-1.0" RSX="-1.0" RUT="-1.0" RVLV="-1.0" RYCEY="-1.0" SAVA="-1.0" SAVE="-1.0" SGLB="-1.0" SID="-1.0" SIFY="-1.0" SINO="-1.0" SINT="-1.0" SIOX="-1.0" SIRI="-1.0" SITC="-1.0" SIVR="-1.0" SJI="-1.0" SKLZ="-1.0" SKT="-1.0" SLDB="-1.0" SLQT="-1.0" SNAP="-1.0" SNCA="-1.0" SNOA="-1.0" SOGO="-1.0" SOS="-1.0" SPCB="-1.0" SPD="-1.0" SPRT="-1.0" SPX="-1.0" SPY="-1.0" SQ="-1.0" STON="-1.0" SUNW="-1.0" SWI="-1.0" SWK="-1.0" T="-1.0" TAP="-1.0" TGTX="-1.0" TH="-1.0" THTX="-1.0" TSIA="-1.0" TSLA="-1.0" TSLAX="-1.0" TZA="-1.0" U="-1.0" UAL="-1.0" UAMY="-1.0" UEC="-1.0" UIS="-1.0" ULTA="-1.0" USAC="-1.0" USWS="-1.0" UTZ="-1.0" UUUU="-1.0" UXIN="-1.0" VALE="-1.0" VEU="-1.0" VIX="-1.0" VJET="-1.0" VSTM="-1.0" VTRS="-1.0" VVOS="-1.0" VWO="-1.0" WAFU="-1.0" WETF="-1.0" WKEY="-1.0" WKHS="-1.0" X="-1.0" XELA="-1.0" XERS="-1.0" XL="-1.0" XLP="-1.0" XLU="-1.0" XTLB="-1.0" YGMZ="-1.0" ZKIN="-1.0" ZM="-1.0"/>
              </TRG_1>
              <_2>
                <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="2.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AA="2.0" AAL="2.0" AAP="2.0" AAPL="2.0" ABG="2.0" ABML="2.0" ACER="2.0" ADBE="2.0" ADMP="2.0" AEG="2.0" AEHL="2.0" AFI="2.0" AJRD="2.0" AKU="2.0" ALEC="2.0" AMC="2.0" AMCR="2.0" AMD="2.0" AMRS="2.0" AMTX="2.0" AMZN="2.0" ANIX="2.0" ANPC="2.0" ANTE="2.0" AP="2.0" APOP="2.0" APTO="2.0" AR="2.0" AREC="2.0" ARES="2.0" ARLO="2.0" ASLEW="2.0" ATHM="2.0" ATIF="2.0" ATNF="2.0" AUY="2.0" AVCO="2.0" AXL="2.0" AZN="2.0" AZRX="2.0" BA="2.0" BABA="2.0" BBBY="2.0" BBD="2.0" BBDC="2.0" BFT="2.0" BILI="2.0" BLIN="2.0" BMY="2.0" BOX="2.0" BP="2.0" BRQS="2.0" BSGM="2.0" BURL="2.0" BWAY="2.0" BXRX="2.0" BYFC="2.0" CAKE="2.0" CAL="2.0" CCI="2.0" CCIV="2.0" CCJ="2.0" CEQPP="2.0" CHNG="2.0" CHX="2.0" CIDM="2.0" CIIC="2.0" CLBS="2.0" CLDR="2.0" CLEU="2.0" CLSN="2.0" CLVS="2.0" CNNE="2.0" COHN="2.0" COMP="2.0" CPRX="2.0" CRBP="2.0" CRTD="2.0" CSCO="2.0" CTIC="2.0" CUB="2.0" CVX="2.0" DCTH="2.0" DHT="2.0" DIS="2.0" DISCK="2.0" DNN="2.0" DOX="2.0" DPW="2.0" DS="2.0" DSKE="2.0" DTSS="2.0" EARS="2.0" EBS="2.0" EDTK="2.0" EMAN="2.0" ENPH="2.0" ETSY="2.0" EURN="2.0" EVRG="2.0" EW="2.0" EWA="2.0" EXEL="2.0" EYE="2.0" EYES="2.0" FAST="2.0" FB="2.0" FCAC="2.0" FLR="2.0" FLY="2.0" FPRX="2.0" FSLR="2.0" FSR="2.0" FUSE="2.0" FUV="2.0" GEL="2.0" GLOP="2.0" GME="2.0" GMER="2.0" GNCA="2.0" GOCO="2.0" GOED="2.0" HBI="2.0" HCHC="2.0" HENKY="2.0" HPE="2.0" HPQ="2.0" HPR="2.0" HTBX="2.0" HTHIY="2.0" HTZ="2.0" HUGE="2.0" HYLN="2.0" HZON="2.0" IDEX="2.0" IDXX="2.0" IGSB="2.0" IMTE="2.0" INFI="2.0" INFY="2.0" ING="2.0" INO="2.0" INPX="2.0" INTC="2.0" INTU="2.0" INUV="2.0" INVO="2.0" INVU="2.0" IWM="2.0" IZEA="2.0" JE="2.0" JENGQ="2.0" JFIN="2.0" JOB="2.0" K="2.0" KBR="2.0" KEYS="2.0" KMPH="2.0" KMX="2.0" KR="2.0" LAZR="2.0" LCI="2.0" LCTX="2.0" LEAF="2.0" LIVX="2.0" LKQ="2.0" LODE="2.0" LRTNF="2.0" LUV="2.0" MARA="2.0" MBT="2.0" MDII="2.0" MESA="2.0" METX="2.0" MFGP="2.0" MMDA1="2.0" MRIN="2.0" MSFT="2.0" MTEM="2.0" MU="2.0" MVIS="2.0" MX="2.0" MYO="2.0" MYSZ="2.0" NCLH="2.0" NDX="2.0" NEOS="2.0" NGD="2.0" NGL="2.0" NIO="2.0" NLOK="2.0" NLSN="2.0" NLSP="2.0" NLST="2.0" NNVC="2.0" NOK="2.0" NOV="2.0" NQ="2.0" NSLP="2.0" NTP="2.0" NUZE="2.0" NVDA="2.0" NXE="2.0" OCGN="2.0" OGEN="2.0" OGI="2.0" OHI="2.0" OI="2.0" OLO="2.0" OPEN="2.0" OPGN="2.0" ORCL="2.0" ORMP="2.0" OTIS="2.0" OVID="2.0" PAA="2.0" PAAS="2.0" PERI="2.0" PFF="2.0" PGX="2.0" PHM="2.0" PNC="2.0" POTX="2.0" PPG="2.0" PPL="2.0" PTE="2.0" QQQ="2.0" QSR="2.0" RAD="2.0" RAIL="2.0" RIBT="2.0" RKT="2.0" RMO="2.0" RP="2.0" RPAY="2.0" RRD="2.0" RSX="2.0" RUT="2.0" RVLV="2.0" RYCEY="2.0" SAVA="2.0" SAVE="2.0" SGLB="2.0" SID="2.0" SIFY="2.0" SINO="2.0" SINT="2.0" SIOX="2.0" SIRI="2.0" SITC="2.0" SIVR="2.0" SJI="2.0" SKLZ="2.0" SKT="2.0" SLDB="2.0" SLQT="2.0" SNAP="2.0" SNCA="2.0" SNOA="2.0" SOGO="2.0" SOS="2.0" SPCB="2.0" SPD="2.0" SPRT="2.0" SPX="2.0" SPY="2.0" SQ="2.0" STON="2.0" SUNW="2.0" SWI="2.0" SWK="2.0" T="2.0" TAP="2.0" TGTX="2.0" TH="2.0" THTX="2.0" TSIA="2.0" TSLA="2.0" TSLAX="2.0" TZA="2.0" U="2.0" UAL="2.0" UAMY="2.0" UEC="2.0" UIS="2.0" ULTA="2.0" USAC="2.0" USWS="2.0" UTZ="2.0" UUUU="2.0" UXIN="2.0" VALE="2.0" VEU="2.0" VIX="2.0" VJET="2.0" VSTM="2.0" VTRS="2.0" VVOS="2.0" VWO="2.0" WAFU="2.0" WETF="2.0" WKEY="2.0" WKHS="2.0" X="2.0" XELA="2.0" XERS="2.0" XL="2.0" XLP="2.0" XLU="2.0" XTLB="2.0" YGMZ="2.0" ZKIN="2.0" ZM="2.0"/>
                </TRG_0>
                <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-2.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AA="-2.0" AAL="-2.0" AAP="-2.0" AAPL="-2.0" ABG="-2.0" ABML="-2.0" ACER="-2.0" ADBE="-2.0" ADMP="-2.0" AEG="-2.0" AEHL="-2.0" AFI="-2.0" AJRD="-2.0" AKU="-2.0" ALEC="-2.0" AMC="-2.0" AMCR="-2.0" AMD="-2.0" AMRS="-2.0" AMTX="-2.0" AMZN="-2.0" ANIX="-2.0" ANPC="-2.0" ANTE="-2.0" AP="-2.0" APOP="-2.0" APTO="-2.0" AR="-2.0" AREC="-2.0" ARES="-2.0" ARLO="-2.0" ASLEW="-2.0" ATHM="-2.0" ATIF="-2.0" ATNF="-2.0" AUY="-2.0" AVCO="-2.0" AXL="-2.0" AZN="-2.0" AZRX="-2.0" BA="-2.0" BABA="-2.0" BBBY="-2.0" BBD="-2.0" BBDC="-2.0" BFT="-2.0" BILI="-2.0" BLIN="-2.0" BMY="-2.0" BOX="-2.0" BP="-2.0" BRQS="-2.0" BSGM="-2.0" BURL="-2.0" BWAY="-2.0" BXRX="-2.0" BYFC="-2.0" CAKE="-2.0" CAL="-2.0" CCI="-2.0" CCIV="-2.0" CCJ="-2.0" CEQPP="-2.0" CHNG="-2.0" CHX="-2.0" CIDM="-2.0" CIIC="-2.0" CLBS="-2.0" CLDR="-2.0" CLEU="-2.0" CLSN="-2.0" CLVS="-2.0" CNNE="-2.0" COHN="-2.0" COMP="-2.0" CPRX="-2.0" CRBP="-2.0" CRTD="-2.0" CSCO="-2.0" CTIC="-2.0" CUB="-2.0" CVX="-2.0" DCTH="-2.0" DHT="-2.0" DIS="-2.0" DISCK="-2.0" DNN="-2.0" DOX="-2.0" DPW="-2.0" DS="-2.0" DSKE="-2.0" DTSS="-2.0" EARS="-2.0" EBS="-2.0" EDTK="-2.0" EMAN="-2.0" ENPH="-2.0" ETSY="-2.0" EURN="-2.0" EVRG="-2.0" EW="-2.0" EWA="-2.0" EXEL="-2.0" EYE="-2.0" EYES="-2.0" FAST="-2.0" FB="-2.0" FCAC="-2.0" FLR="-2.0" FLY="-2.0" FPRX="-2.0" FSLR="-2.0" FSR="-2.0" FUSE="-2.0" FUV="-2.0" GEL="-2.0" GLOP="-2.0" GME="-2.0" GMER="-2.0" GNCA="-2.0" GOCO="-2.0" GOED="-2.0" HBI="-2.0" HCHC="-2.0" HENKY="-2.0" HPE="-2.0" HPQ="-2.0" HPR="-2.0" HTBX="-2.0" HTHIY="-2.0" HTZ="-2.0" HUGE="-2.0" HYLN="-2.0" HZON="-2.0" IDEX="-2.0" IDXX="-2.0" IGSB="-2.0" IMTE="-2.0" INFI="-2.0" INFY="-2.0" ING="-2.0" INO="-2.0" INPX="-2.0" INTC="-2.0" INTU="-2.0" INUV="-2.0" INVO="-2.0" INVU="-2.0" IWM="-2.0" IZEA="-2.0" JE="-2.0" JENGQ="-2.0" JFIN="-2.0" JOB="-2.0" K="-2.0" KBR="-2.0" KEYS="-2.0" KMPH="-2.0" KMX="-2.0" KR="-2.0" LAZR="-2.0" LCI="-2.0" LCTX="-2.0" LEAF="-2.0" LIVX="-2.0" LKQ="-2.0" LODE="-2.0" LRTNF="-2.0" LUV="-2.0" MARA="-2.0" MBT="-2.0" MDII="-2.0" MESA="-2.0" METX="-2.0" MFGP="-2.0" MMDA1="-2.0" MRIN="-2.0" MSFT="-2.0" MTEM="-2.0" MU="-2.0" MVIS="-2.0" MX="-2.0" MYO="-2.0" MYSZ="-2.0" NCLH="-2.0" NDX="-2.0" NEOS="-2.0" NGD="-2.0" NGL="-2.0" NIO="-2.0" NLOK="-2.0" NLSN="-2.0" NLSP="-2.0" NLST="-2.0" NNVC="-2.0" NOK="-2.0" NOV="-2.0" NQ="-2.0" NSLP="-2.0" NTP="-2.0" NUZE="-2.0" NVDA="-2.0" NXE="-2.0" OCGN="-2.0" OGEN="-2.0" OGI="-2.0" OHI="-2.0" OI="-2.0" OLO="-2.0" OPEN="-2.0" OPGN="-2.0" ORCL="-2.0" ORMP="-2.0" OTIS="-2.0" OVID="-2.0" PAA="-2.0" PAAS="-2.0" PERI="-2.0" PFF="-2.0" PGX="-2.0" PHM="-2.0" PNC="-2.0" POTX="-2.0" PPG="-2.0" PPL="-2.0" PTE="-2.0" QQQ="-2.0" QSR="-2.0" RAD="-2.0" RAIL="-2.0" RIBT="-2.0" RKT="-2.0" RMO="-2.0" RP="-2.0" RPAY="-2.0" RRD="-2.0" RSX="-2.0" RUT="-2.0" RVLV="-2.0" RYCEY="-2.0" SAVA="-2.0" SAVE="-2.0" SGLB="-2.0" SID="-2.0" SIFY="-2.0" SINO="-2.0" SINT="-2.0" SIOX="-2.0" SIRI="-2.0" SITC="-2.0" SIVR="-2.0" SJI="-2.0" SKLZ="-2.0" SKT="-2.0" SLDB="-2.0" SLQT="-2.0" SNAP="-2.0" SNCA="-2.0" SNOA="-2.0" SOGO="-2.0" SOS="-2.0" SPCB="-2.0" SPD="-2.0" SPRT="-2.0" SPX="-2.0" SPY="-2.0" SQ="-2.0" STON="-2.0" SUNW="-2.0" SWI="-2.0" SWK="-2.0" T="-2.0" TAP="-2.0" TGTX="-2.0" TH="-2.0" THTX="-2.0" TSIA="-2.0" TSLA="-2.0" TSLAX="-2.0" TZA="-2.0" U="-2.0" UAL="-2.0" UAMY="-2.0" UEC="-2.0" UIS="-2.0" ULTA="-2.0" USAC="-2.0" USWS="-2.0" UTZ="-2.0" UUUU="-2.0" UXIN="-2.0" VALE="-2.0" VEU="-2.0" VIX="-2.0" VJET="-2.0" VSTM="-2.0" VTRS="-2.0" VVOS="-2.0" VWO="-2.0" WAFU="-2.0" WETF="-2.0" WKEY="-2.0" WKHS="-2.0" X="-2.0" XELA="-2.0" XERS="-2.0" XL="-2.0" XLP="-2.0" XLU="-2.0" XTLB="-2.0" YGMZ="-2.0" ZKIN="-2.0" ZM="-2.0"/>
                </TRG_1>
              </_2>
              <_3>
                <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="3.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AA="3.0" AAL="3.0" AAP="3.0" AAPL="3.0" ABG="3.0" ABML="3.0" ACER="3.0" ADBE="3.0" ADMP="3.0" AEG="3.0" AEHL="3.0" AFI="3.0" AJRD="3.0" AKU="3.0" ALEC="3.0" AMC="3.0" AMCR="3.0" AMD="3.0" AMRS="3.0" AMTX="3.0" AMZN="3.0" ANIX="3.0" ANPC="3.0" ANTE="3.0" AP="3.0" APOP="3.0" APTO="3.0" AR="3.0" AREC="3.0" ARES="3.0" ARLO="3.0" ASLEW="3.0" ATHM="3.0" ATIF="3.0" ATNF="3.0" AUY="3.0" AVCO="3.0" AXL="3.0" AZN="3.0" AZRX="3.0" BA="3.0" BABA="3.0" BBBY="3.0" BBD="3.0" BBDC="3.0" BFT="3.0" BILI="3.0" BLIN="3.0" BMY="3.0" BOX="3.0" BP="3.0" BRQS="3.0" BSGM="3.0" BURL="3.0" BWAY="3.0" BXRX="3.0" BYFC="3.0" CAKE="3.0" CAL="3.0" CCI="3.0" CCIV="3.0" CCJ="3.0" CEQPP="3.0" CHNG="3.0" CHX="3.0" CIDM="3.0" CIIC="3.0" CLBS="3.0" CLDR="3.0" CLEU="3.0" CLSN="3.0" CLVS="3.0" CNNE="3.0" COHN="3.0" COMP="3.0" CPRX="3.0" CRBP="3.0" CRTD="3.0" CSCO="3.0" CTIC="3.0" CUB="3.0" CVX="3.0" DCTH="3.0" DHT="3.0" DIS="3.0" DISCK="3.0" DNN="3.0" DOX="3.0" DPW="3.0" DS="3.0" DSKE="3.0" DTSS="3.0" EARS="3.0" EBS="3.0" EDTK="3.0" EMAN="3.0" ENPH="3.0" ETSY="3.0" EURN="3.0" EVRG="3.0" EW="3.0" EWA="3.0" EXEL="3.0" EYE="3.0" EYES="3.0" FAST="3.0" FB="3.0" FCAC="3.0" FLR="3.0" FLY="3.0" FPRX="3.0" FSLR="3.0" FSR="3.0" FUSE="3.0" FUV="3.0" GEL="3.0" GLOP="3.0" GME="3.0" GMER="3.0" GNCA="3.0" GOCO="3.0" GOED="3.0" HBI="3.0" HCHC="3.0" HENKY="3.0" HPE="3.0" HPQ="3.0" HPR="3.0" HTBX="3.0" HTHIY="3.0" HTZ="3.0" HUGE="3.0" HYLN="3.0" HZON="3.0" IDEX="3.0" IDXX="3.0" IGSB="3.0" IMTE="3.0" INFI="3.0" INFY="3.0" ING="3.0" INO="3.0" INPX="3.0" INTC="3.0" INTU="3.0" INUV="3.0" INVO="3.0" INVU="3.0" IWM="3.0" IZEA="3.0" JE="3.0" JENGQ="3.0" JFIN="3.0" JOB="3.0" K="3.0" KBR="3.0" KEYS="3.0" KMPH="3.0" KMX="3.0" KR="3.0" LAZR="3.0" LCI="3.0" LCTX="3.0" LEAF="3.0" LIVX="3.0" LKQ="3.0" LODE="3.0" LRTNF="3.0" LUV="3.0" MARA="3.0" MBT="3.0" MDII="3.0" MESA="3.0" METX="3.0" MFGP="3.0" MMDA1="3.0" MRIN="3.0" MSFT="3.0" MTEM="3.0" MU="3.0" MVIS="3.0" MX="3.0" MYO="3.0" MYSZ="3.0" NCLH="3.0" NDX="3.0" NEOS="3.0" NGD="3.0" NGL="3.0" NIO="3.0" NLOK="3.0" NLSN="3.0" NLSP="3.0" NLST="3.0" NNVC="3.0" NOK="3.0" NOV="3.0" NQ="3.0" NSLP="3.0" NTP="3.0" NUZE="3.0" NVDA="3.0" NXE="3.0" OCGN="3.0" OGEN="3.0" OGI="3.0" OHI="3.0" OI="3.0" OLO="3.0" OPEN="3.0" OPGN="3.0" ORCL="3.0" ORMP="3.0" OTIS="3.0" OVID="3.0" PAA="3.0" PAAS="3.0" PERI="3.0" PFF="3.0" PGX="3.0" PHM="3.0" PNC="3.0" POTX="3.0" PPG="3.0" PPL="3.0" PTE="3.0" QQQ="3.0" QSR="3.0" RAD="3.0" RAIL="3.0" RIBT="3.0" RKT="3.0" RMO="3.0" RP="3.0" RPAY="3.0" RRD="3.0" RSX="3.0" RUT="3.0" RVLV="3.0" RYCEY="3.0" SAVA="3.0" SAVE="3.0" SGLB="3.0" SID="3.0" SIFY="3.0" SINO="3.0" SINT="3.0" SIOX="3.0" SIRI="3.0" SITC="3.0" SIVR="3.0" SJI="3.0" SKLZ="3.0" SKT="3.0" SLDB="3.0" SLQT="3.0" SNAP="3.0" SNCA="3.0" SNOA="3.0" SOGO="3.0" SOS="3.0" SPCB="3.0" SPD="3.0" SPRT="3.0" SPX="3.0" SPY="3.0" SQ="3.0" STON="3.0" SUNW="3.0" SWI="3.0" SWK="3.0" T="3.0" TAP="3.0" TGTX="3.0" TH="3.0" THTX="3.0" TSIA="3.0" TSLA="3.0" TSLAX="3.0" TZA="3.0" U="3.0" UAL="3.0" UAMY="3.0" UEC="3.0" UIS="3.0" ULTA="3.0" USAC="3.0" USWS="3.0" UTZ="3.0" UUUU="3.0" UXIN="3.0" VALE="3.0" VEU="3.0" VIX="3.0" VJET="3.0" VSTM="3.0" VTRS="3.0" VVOS="3.0" VWO="3.0" WAFU="3.0" WETF="3.0" WKEY="3.0" WKHS="3.0" X="3.0" XELA="3.0" XERS="3.0" XL="3.0" XLP="3.0" XLU="3.0" XTLB="3.0" YGMZ="3.0" ZKIN="3.0" ZM="3.0"/>
                </TRG_0>
                <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-3.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AA="-3.0" AAL="-3.0" AAP="-3.0" AAPL="-3.0" ABG="-3.0" ABML="-3.0" ACER="-3.0" ADBE="-3.0" ADMP="-3.0" AEG="-3.0" AEHL="-3.0" AFI="-3.0" AJRD="-3.0" AKU="-3.0" ALEC="-3.0" AMC="-3.0" AMCR="-3.0" AMD="-3.0" AMRS="-3.0" AMTX="-3.0" AMZN="-3.0" ANIX="-3.0" ANPC="-3.0" ANTE="-3.0" AP="-3.0" APOP="-3.0" APTO="-3.0" AR="-3.0" AREC="-3.0" ARES="-3.0" ARLO="-3.0" ASLEW="-3.0" ATHM="-3.0" ATIF="-3.0" ATNF="-3.0" AUY="-3.0" AVCO="-3.0" AXL="-3.0" AZN="-3.0" AZRX="-3.0" BA="-3.0" BABA="-3.0" BBBY="-3.0" BBD="-3.0" BBDC="-3.0" BFT="-3.0" BILI="-3.0" BLIN="-3.0" BMY="-3.0" BOX="-3.0" BP="-3.0" BRQS="-3.0" BSGM="-3.0" BURL="-3.0" BWAY="-3.0" BXRX="-3.0" BYFC="-3.0" CAKE="-3.0" CAL="-3.0" CCI="-3.0" CCIV="-3.0" CCJ="-3.0" CEQPP="-3.0" CHNG="-3.0" CHX="-3.0" CIDM="-3.0" CIIC="-3.0" CLBS="-3.0" CLDR="-3.0" CLEU="-3.0" CLSN="-3.0" CLVS="-3.0" CNNE="-3.0" COHN="-3.0" COMP="-3.0" CPRX="-3.0" CRBP="-3.0" CRTD="-3.0" CSCO="-3.0" CTIC="-3.0" CUB="-3.0" CVX="-3.0" DCTH="-3.0" DHT="-3.0" DIS="-3.0" DISCK="-3.0" DNN="-3.0" DOX="-3.0" DPW="-3.0" DS="-3.0" DSKE="-3.0" DTSS="-3.0" EARS="-3.0" EBS="-3.0" EDTK="-3.0" EMAN="-3.0" ENPH="-3.0" ETSY="-3.0" EURN="-3.0" EVRG="-3.0" EW="-3.0" EWA="-3.0" EXEL="-3.0" EYE="-3.0" EYES="-3.0" FAST="-3.0" FB="-3.0" FCAC="-3.0" FLR="-3.0" FLY="-3.0" FPRX="-3.0" FSLR="-3.0" FSR="-3.0" FUSE="-3.0" FUV="-3.0" GEL="-3.0" GLOP="-3.0" GME="-3.0" GMER="-3.0" GNCA="-3.0" GOCO="-3.0" GOED="-3.0" HBI="-3.0" HCHC="-3.0" HENKY="-3.0" HPE="-3.0" HPQ="-3.0" HPR="-3.0" HTBX="-3.0" HTHIY="-3.0" HTZ="-3.0" HUGE="-3.0" HYLN="-3.0" HZON="-3.0" IDEX="-3.0" IDXX="-3.0" IGSB="-3.0" IMTE="-3.0" INFI="-3.0" INFY="-3.0" ING="-3.0" INO="-3.0" INPX="-3.0" INTC="-3.0" INTU="-3.0" INUV="-3.0" INVO="-3.0" INVU="-3.0" IWM="-3.0" IZEA="-3.0" JE="-3.0" JENGQ="-3.0" JFIN="-3.0" JOB="-3.0" K="-3.0" KBR="-3.0" KEYS="-3.0" KMPH="-3.0" KMX="-3.0" KR="-3.0" LAZR="-3.0" LCI="-3.0" LCTX="-3.0" LEAF="-3.0" LIVX="-3.0" LKQ="-3.0" LODE="-3.0" LRTNF="-3.0" LUV="-3.0" MARA="-3.0" MBT="-3.0" MDII="-3.0" MESA="-3.0" METX="-3.0" MFGP="-3.0" MMDA1="-3.0" MRIN="-3.0" MSFT="-3.0" MTEM="-3.0" MU="-3.0" MVIS="-3.0" MX="-3.0" MYO="-3.0" MYSZ="-3.0" NCLH="-3.0" NDX="-3.0" NEOS="-3.0" NGD="-3.0" NGL="-3.0" NIO="-3.0" NLOK="-3.0" NLSN="-3.0" NLSP="-3.0" NLST="-3.0" NNVC="-3.0" NOK="-3.0" NOV="-3.0" NQ="-3.0" NSLP="-3.0" NTP="-3.0" NUZE="-3.0" NVDA="-3.0" NXE="-3.0" OCGN="-3.0" OGEN="-3.0" OGI="-3.0" OHI="-3.0" OI="-3.0" OLO="-3.0" OPEN="-3.0" OPGN="-3.0" ORCL="-3.0" ORMP="-3.0" OTIS="-3.0" OVID="-3.0" PAA="-3.0" PAAS="-3.0" PERI="-3.0" PFF="-3.0" PGX="-3.0" PHM="-3.0" PNC="-3.0" POTX="-3.0" PPG="-3.0" PPL="-3.0" PTE="-3.0" QQQ="-3.0" QSR="-3.0" RAD="-3.0" RAIL="-3.0" RIBT="-3.0" RKT="-3.0" RMO="-3.0" RP="-3.0" RPAY="-3.0" RRD="-3.0" RSX="-3.0" RUT="-3.0" RVLV="-3.0" RYCEY="-3.0" SAVA="-3.0" SAVE="-3.0" SGLB="-3.0" SID="-3.0" SIFY="-3.0" SINO="-3.0" SINT="-3.0" SIOX="-3.0" SIRI="-3.0" SITC="-3.0" SIVR="-3.0" SJI="-3.0" SKLZ="-3.0" SKT="-3.0" SLDB="-3.0" SLQT="-3.0" SNAP="-3.0" SNCA="-3.0" SNOA="-3.0" SOGO="-3.0" SOS="-3.0" SPCB="-3.0" SPD="-3.0" SPRT="-3.0" SPX="-3.0" SPY="-3.0" SQ="-3.0" STON="-3.0" SUNW="-3.0" SWI="-3.0" SWK="-3.0" T="-3.0" TAP="-3.0" TGTX="-3.0" TH="-3.0" THTX="-3.0" TSIA="-3.0" TSLA="-3.0" TSLAX="-3.0" TZA="-3.0" U="-3.0" UAL="-3.0" UAMY="-3.0" UEC="-3.0" UIS="-3.0" ULTA="-3.0" USAC="-3.0" USWS="-3.0" UTZ="-3.0" UUUU="-3.0" UXIN="-3.0" VALE="-3.0" VEU="-3.0" VIX="-3.0" VJET="-3.0" VSTM="-3.0" VTRS="-3.0" VVOS="-3.0" VWO="-3.0" WAFU="-3.0" WETF="-3.0" WKEY="-3.0" WKHS="-3.0" X="-3.0" XELA="-3.0" XERS="-3.0" XL="-3.0" XLP="-3.0" XLU="-3.0" XTLB="-3.0" YGMZ="-3.0" ZKIN="-3.0" ZM="-3.0"/>
                </TRG_1>
              </_3>
            </TRADE>
          </CELL0>
          <CELL1 ROWSPANELWEIGHT="1.0" ROWWEIGHT0="1.5557851239669422" ROWWEIGHT1="0.44421487603305787" SELECTED_TYPE="CHART" SIDEBAR_IS_ACTIVE="true" SYMBOL="DCTH" SYMBOL_GROUP="2" TRADE_BUTTONS_MIGRATED="true">
            <ACTIVETRADER CELL_IDS="POSITION_BREAKDOWN;NET_POSITION;AVERAGE_PRICE;PL_OPEN;PL_DAY" COLUMNS="TRADE_AMOUNT:43:,BUY_ORDER:59:,BIDSIZE:20:,PRICE:69:,ASKSIZE:24:,SELL_ORDER:48:" ENABLED="true" SHOW_STUDY_MARKERS="false" SYMBOL="AAPL" SYMBOL_GROUP="2" SYNC_AT_AND_CHART_CROSSHAIR="true" VERTICAL="false" VISIBLE="false" WEIGHT="1.4930182599355533" ZOOMING_STEPS="1">
              <POSITION_SUMMARY_PANEL CELL_IDS="POSITION_BREAKDOWN;NET_POSITION;AVERAGE_PRICE;PL_OPEN;PL_DAY" ENABLED="true"/>
              <TRADE_BUTTONS_CONFIG CONFIGURATION_NAME="SINGLE" ORDER_RULES_SET="STOCK" ORDER_TYPE="LIMIT" OS_AUTO="false" OS_EXPANDED="false" OS_TIF="DAY" QTY="100.0" QTY_STEP="1.0" TEMPLATE="SINGLE" TRADE_BUTTONS="BUY_MKT;SELL_MKT;MULTI_CANCEL;REVERSE;FLAT;SECOND_LINE;QUANTITY_WITH_BUTTONS;ORDER_TEMPLATE;AUTO_SEND;ORDER_SETUP">
                <OCO_STOP>
                  <TRG_0 TRG_ENBL="true" TRG_LINK="ASK_BID" TRG_OFFSET_MODE="TICK" TRG_OT="STOP" TRG_SETUP="10.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL AAL="10.0" AAPL="10.0" AFI="10.0" AMC="10.0" AMD="10.0" AMZN="10.0" ANTE="10.0" ARLO="10.0" AXL="10.0" BBD="10.0" BMY="10.0" BSGM="10.0" BXRX="10.0" CCJ="10.0" CCL="10.0" CHNG="10.0" CHX="10.0" CIDM="10.0" CLBS="10.0" CLDR="10.0" CLSN="10.0" CRBP="10.0" CSCO="10.0" DIS="10.0" DISCK="10.0" DNN="10.0" DPW="10.0" DS="10.0" EMAN="10.0" ETSY="10.0" EW="10.0" EWA="10.0" FCAC="10.0" FSR="10.0" FUSE="10.0" GME="10.0" GOCO="10.0" HBI="10.0" HPQ="10.0" HPR="10.0" HTZ="10.0" HUGE="10.0" HYLN="10.0" IDEX="10.0" IGSB="10.0" INFI="10.0" INO="10.0" INTC="10.0" IZEA="10.0" JE="10.0" KEYS="10.0" LCI="10.0" LKQ="10.0" LUV="10.0" MBT="10.0" MDII="10.0" MMDA1="10.0" MRIN="10.0" NGD="10.0" NIO="10.0" NLOK="10.0" NLSN="10.0" NNVC="10.0" NOK="10.0" OGI="10.0" OPEN="10.0" OPGN="10.0" PAAS="10.0" PERI="10.0" PGX="10.0" POTX="10.0" RAD="10.0" RKT="10.0" RP="10.0" RRD="10.0" RSX="10.0" SAVA="10.0" SIOX="10.0" SITC="10.0" SIVR="10.0" SKLZ="10.0" SLQT="10.0" SNAP="10.0" SOS="10.0" SQ="10.0" TGTX="10.0" TSLA="10.0" TZA="10.0" U="10.0" UAMY="10.0" UEC="10.0" USWS="10.0" UUUU="10.0" VJET="10.0" VTRS="10.0" WETF="10.0" X="10.0" XL="10.0" XLP="10.0" XLU="10.0" ZM="10.0"/>
                  </TRG_0>
                </OCO_STOP>
                <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="1.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AAL="1.0" AAPL="1.0" AFI="1.0" AMC="1.0" AMD="1.0" AMZN="1.0" ANTE="1.0" ARLO="1.0" AXL="1.0" BBD="1.0" BMY="1.0" BSGM="1.0" BXRX="1.0" CCJ="1.0" CCL="1.0" CHNG="1.0" CHX="1.0" CIDM="1.0" CLBS="1.0" CLDR="1.0" CLSN="1.0" CRBP="1.0" CSCO="1.0" DIS="1.0" DISCK="1.0" DNN="1.0" DPW="1.0" DS="1.0" EMAN="1.0" ETSY="1.0" EW="1.0" EWA="1.0" FCAC="1.0" FSR="1.0" FUSE="1.0" GME="1.0" GOCO="1.0" HBI="1.0" HPQ="1.0" HPR="1.0" HTZ="1.0" HUGE="1.0" HYLN="1.0" IDEX="1.0" IGSB="1.0" INFI="1.0" INO="1.0" INTC="1.0" IZEA="1.0" JE="1.0" KEYS="1.0" LCI="1.0" LKQ="1.0" LUV="1.0" MBT="1.0" MDII="1.0" MMDA1="1.0" MRIN="1.0" NGD="1.0" NIO="1.0" NLOK="1.0" NLSN="1.0" NNVC="1.0" NOK="1.0" OGI="1.0" OPEN="1.0" OPGN="1.0" PAAS="1.0" PERI="1.0" PGX="1.0" POTX="1.0" RAD="1.0" RKT="1.0" RP="1.0" RRD="1.0" RSX="1.0" SAVA="1.0" SIOX="1.0" SITC="1.0" SIVR="1.0" SKLZ="1.0" SLQT="1.0" SNAP="1.0" SOS="1.0" SQ="1.0" TGTX="1.0" TSLA="1.0" TZA="1.0" U="1.0" UAMY="1.0" UEC="1.0" USWS="1.0" UUUU="1.0" VJET="1.0" VTRS="1.0" WETF="1.0" X="1.0" XL="1.0" XLP="1.0" XLU="1.0" ZM="1.0"/>
                </TRG_0>
                <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-1.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AAL="-1.0" AAPL="-1.0" AFI="-1.0" AMC="-1.0" AMD="-1.0" AMZN="-1.0" ANTE="-1.0" ARLO="-1.0" AXL="-1.0" BBD="-1.0" BMY="-1.0" BSGM="-1.0" BXRX="-1.0" CCJ="-1.0" CCL="-1.0" CHNG="-1.0" CHX="-1.0" CIDM="-1.0" CLBS="-1.0" CLDR="-1.0" CLSN="-1.0" CRBP="-1.0" CSCO="-1.0" DIS="-1.0" DISCK="-1.0" DNN="-1.0" DPW="-1.0" DS="-1.0" EMAN="-1.0" ETSY="-1.0" EW="-1.0" EWA="-1.0" FCAC="-1.0" FSR="-1.0" FUSE="-1.0" GME="-1.0" GOCO="-1.0" HBI="-1.0" HPQ="-1.0" HPR="-1.0" HTZ="-1.0" HUGE="-1.0" HYLN="-1.0" IDEX="-1.0" IGSB="-1.0" INFI="-1.0" INO="-1.0" INTC="-1.0" IZEA="-1.0" JE="-1.0" KEYS="-1.0" LCI="-1.0" LKQ="-1.0" LUV="-1.0" MBT="-1.0" MDII="-1.0" MMDA1="-1.0" MRIN="-1.0" NGD="-1.0" NIO="-1.0" NLOK="-1.0" NLSN="-1.0" NNVC="-1.0" NOK="-1.0" OGI="-1.0" OPEN="-1.0" OPGN="-1.0" PAAS="-1.0" PERI="-1.0" PGX="-1.0" POTX="-1.0" RAD="-1.0" RKT="-1.0" RP="-1.0" RRD="-1.0" RSX="-1.0" SAVA="-1.0" SIOX="-1.0" SITC="-1.0" SIVR="-1.0" SKLZ="-1.0" SLQT="-1.0" SNAP="-1.0" SOS="-1.0" SQ="-1.0" TGTX="-1.0" TSLA="-1.0" TZA="-1.0" U="-1.0" UAMY="-1.0" UEC="-1.0" USWS="-1.0" UUUU="-1.0" VJET="-1.0" VTRS="-1.0" WETF="-1.0" X="-1.0" XL="-1.0" XLP="-1.0" XLU="-1.0" ZM="-1.0"/>
                </TRG_1>
                <_2>
                  <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="2.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL AAL="2.0" AAPL="2.0" AFI="2.0" AMC="2.0" AMD="2.0" AMZN="2.0" ANTE="2.0" ARLO="2.0" AXL="2.0" BBD="2.0" BMY="2.0" BSGM="2.0" BXRX="2.0" CCJ="2.0" CCL="2.0" CHNG="2.0" CHX="2.0" CIDM="2.0" CLBS="2.0" CLDR="2.0" CLSN="2.0" CRBP="2.0" CSCO="2.0" DIS="2.0" DISCK="2.0" DNN="2.0" DPW="2.0" DS="2.0" EMAN="2.0" ETSY="2.0" EW="2.0" EWA="2.0" FCAC="2.0" FSR="2.0" FUSE="2.0" GME="2.0" GOCO="2.0" HBI="2.0" HPQ="2.0" HPR="2.0" HTZ="2.0" HUGE="2.0" HYLN="2.0" IDEX="2.0" IGSB="2.0" INFI="2.0" INO="2.0" INTC="2.0" IZEA="2.0" JE="2.0" KEYS="2.0" LCI="2.0" LKQ="2.0" LUV="2.0" MBT="2.0" MDII="2.0" MMDA1="2.0" MRIN="2.0" NGD="2.0" NIO="2.0" NLOK="2.0" NLSN="2.0" NNVC="2.0" NOK="2.0" OGI="2.0" OPEN="2.0" OPGN="2.0" PAAS="2.0" PERI="2.0" PGX="2.0" POTX="2.0" RAD="2.0" RKT="2.0" RP="2.0" RRD="2.0" RSX="2.0" SAVA="2.0" SIOX="2.0" SITC="2.0" SIVR="2.0" SKLZ="2.0" SLQT="2.0" SNAP="2.0" SOS="2.0" SQ="2.0" TGTX="2.0" TSLA="2.0" TZA="2.0" U="2.0" UAMY="2.0" UEC="2.0" USWS="2.0" UUUU="2.0" VJET="2.0" VTRS="2.0" WETF="2.0" X="2.0" XL="2.0" XLP="2.0" XLU="2.0" ZM="2.0"/>
                  </TRG_0>
                  <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-2.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL AAL="-2.0" AAPL="-2.0" AFI="-2.0" AMC="-2.0" AMD="-2.0" AMZN="-2.0" ANTE="-2.0" ARLO="-2.0" AXL="-2.0" BBD="-2.0" BMY="-2.0" BSGM="-2.0" BXRX="-2.0" CCJ="-2.0" CCL="-2.0" CHNG="-2.0" CHX="-2.0" CIDM="-2.0" CLBS="-2.0" CLDR="-2.0" CLSN="-2.0" CRBP="-2.0" CSCO="-2.0" DIS="-2.0" DISCK="-2.0" DNN="-2.0" DPW="-2.0" DS="-2.0" EMAN="-2.0" ETSY="-2.0" EW="-2.0" EWA="-2.0" FCAC="-2.0" FSR="-2.0" FUSE="-2.0" GME="-2.0" GOCO="-2.0" HBI="-2.0" HPQ="-2.0" HPR="-2.0" HTZ="-2.0" HUGE="-2.0" HYLN="-2.0" IDEX="-2.0" IGSB="-2.0" INFI="-2.0" INO="-2.0" INTC="-2.0" IZEA="-2.0" JE="-2.0" KEYS="-2.0" LCI="-2.0" LKQ="-2.0" LUV="-2.0" MBT="-2.0" MDII="-2.0" MMDA1="-2.0" MRIN="-2.0" NGD="-2.0" NIO="-2.0" NLOK="-2.0" NLSN="-2.0" NNVC="-2.0" NOK="-2.0" OGI="-2.0" OPEN="-2.0" OPGN="-2.0" PAAS="-2.0" PERI="-2.0" PGX="-2.0" POTX="-2.0" RAD="-2.0" RKT="-2.0" RP="-2.0" RRD="-2.0" RSX="-2.0" SAVA="-2.0" SIOX="-2.0" SITC="-2.0" SIVR="-2.0" SKLZ="-2.0" SLQT="-2.0" SNAP="-2.0" SOS="-2.0" SQ="-2.0" TGTX="-2.0" TSLA="-2.0" TZA="-2.0" U="-2.0" UAMY="-2.0" UEC="-2.0" USWS="-2.0" UUUU="-2.0" VJET="-2.0" VTRS="-2.0" WETF="-2.0" X="-2.0" XL="-2.0" XLP="-2.0" XLU="-2.0" ZM="-2.0"/>
                  </TRG_1>
                </_2>
                <_3>
                  <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="3.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL AAL="3.0" AAPL="3.0" AFI="3.0" AMC="3.0" AMD="3.0" AMZN="3.0" ANTE="3.0" ARLO="3.0" AXL="3.0" BBD="3.0" BMY="3.0" BSGM="3.0" BXRX="3.0" CCJ="3.0" CCL="3.0" CHNG="3.0" CHX="3.0" CIDM="3.0" CLBS="3.0" CLDR="3.0" CLSN="3.0" CRBP="3.0" CSCO="3.0" DIS="3.0" DISCK="3.0" DNN="3.0" DPW="3.0" DS="3.0" EMAN="3.0" ETSY="3.0" EW="3.0" EWA="3.0" FCAC="3.0" FSR="3.0" FUSE="3.0" GME="3.0" GOCO="3.0" HBI="3.0" HPQ="3.0" HPR="3.0" HTZ="3.0" HUGE="3.0" HYLN="3.0" IDEX="3.0" IGSB="3.0" INFI="3.0" INO="3.0" INTC="3.0" IZEA="3.0" JE="3.0" KEYS="3.0" LCI="3.0" LKQ="3.0" LUV="3.0" MBT="3.0" MDII="3.0" MMDA1="3.0" MRIN="3.0" NGD="3.0" NIO="3.0" NLOK="3.0" NLSN="3.0" NNVC="3.0" NOK="3.0" OGI="3.0" OPEN="3.0" OPGN="3.0" PAAS="3.0" PERI="3.0" PGX="3.0" POTX="3.0" RAD="3.0" RKT="3.0" RP="3.0" RRD="3.0" RSX="3.0" SAVA="3.0" SIOX="3.0" SITC="3.0" SIVR="3.0" SKLZ="3.0" SLQT="3.0" SNAP="3.0" SOS="3.0" SQ="3.0" TGTX="3.0" TSLA="3.0" TZA="3.0" U="3.0" UAMY="3.0" UEC="3.0" USWS="3.0" UUUU="3.0" VJET="3.0" VTRS="3.0" WETF="3.0" X="3.0" XL="3.0" XLP="3.0" XLU="3.0" ZM="3.0"/>
                  </TRG_0>
                  <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-3.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL AAL="-3.0" AAPL="-3.0" AFI="-3.0" AMC="-3.0" AMD="-3.0" AMZN="-3.0" ANTE="-3.0" ARLO="-3.0" AXL="-3.0" BBD="-3.0" BMY="-3.0" BSGM="-3.0" BXRX="-3.0" CCJ="-3.0" CCL="-3.0" CHNG="-3.0" CHX="-3.0" CIDM="-3.0" CLBS="-3.0" CLDR="-3.0" CLSN="-3.0" CRBP="-3.0" CSCO="-3.0" DIS="-3.0" DISCK="-3.0" DNN="-3.0" DPW="-3.0" DS="-3.0" EMAN="-3.0" ETSY="-3.0" EW="-3.0" EWA="-3.0" FCAC="-3.0" FSR="-3.0" FUSE="-3.0" GME="-3.0" GOCO="-3.0" HBI="-3.0" HPQ="-3.0" HPR="-3.0" HTZ="-3.0" HUGE="-3.0" HYLN="-3.0" IDEX="-3.0" IGSB="-3.0" INFI="-3.0" INO="-3.0" INTC="-3.0" IZEA="-3.0" JE="-3.0" KEYS="-3.0" LCI="-3.0" LKQ="-3.0" LUV="-3.0" MBT="-3.0" MDII="-3.0" MMDA1="-3.0" MRIN="-3.0" NGD="-3.0" NIO="-3.0" NLOK="-3.0" NLSN="-3.0" NNVC="-3.0" NOK="-3.0" OGI="-3.0" OPEN="-3.0" OPGN="-3.0" PAAS="-3.0" PERI="-3.0" PGX="-3.0" POTX="-3.0" RAD="-3.0" RKT="-3.0" RP="-3.0" RRD="-3.0" RSX="-3.0" SAVA="-3.0" SIOX="-3.0" SITC="-3.0" SIVR="-3.0" SKLZ="-3.0" SLQT="-3.0" SNAP="-3.0" SOS="-3.0" SQ="-3.0" TGTX="-3.0" TSLA="-3.0" TZA="-3.0" U="-3.0" UAMY="-3.0" UEC="-3.0" USWS="-3.0" UUUU="-3.0" VJET="-3.0" VTRS="-3.0" WETF="-3.0" X="-3.0" XL="-3.0" XLP="-3.0" XLU="-3.0" ZM="-3.0"/>
                  </TRG_1>
                </_3>
              </TRADE_BUTTONS_CONFIG>
            </ACTIVETRADER>
            <BIG_BUTTONS VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <CHART CONFIGURATION="@v9@%0:com.devexperts.toschart.model,1:com.devexperts.tos.chartdata,2:com.devexperts.tos.thinkscript.constants,3:com.devexperts.tos.thinkscript.data,4:java.awt,5:com.devexperts.toschart.utils,6:com.devexperts.toschart.control.subgraph,7:com.devexperts.toschart.elstudies,8:com.devexperts.toschart.script%owner{chartAggregationPeriods:ChartAggregationPeriodArray0{17::ChartAggregationPeriod0,15::ChartAggregationPeriod1},chartAggregationPeriods=@ChartAggregationPeriodArray0,colors{7::CustomColor0,9::CustomColor1,1::CustomColor2,5::CustomColor3,6::CustomColor4,0::CustomColor5,8::CustomColor6}}#com.devexperts.toschart.core.ChartModel{encodedMixinsState=&quot;{\&quot;common\&quot;:{\&quot;DRAWING_SETS\&quot;:\&quot;{}\&quot;},\&quot;state_props\&quot;:{\&quot;state_type\&quot;:\&quot;REGULAR\&quot;},\&quot;monkey_bars_exp\&quot;:{\&quot;LikefolioMixin\&quot;:\&quot;{\\\&quot;paintingSettings\\\&quot;:{\\\&quot;neutralSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;positiveSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;negativeSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;sentimentSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true}},\\\&quot;shownDivisions\\\&quot;:[],\\\&quot;allDivisions\\\&quot;:[]}\&quot;},\&quot;monkey_bars\&quot;:{},\&quot;seasonality\&quot;:{},\&quot;regular\&quot;:{\&quot;DescriberMixin\&quot;:\&quot;{\\\&quot;visibility\\\&quot;:\\\&quot;HIDE_PANEL\\\&quot;,\\\&quot;studiesMode\\\&quot;:\\\&quot;HIDE_STUDIES\\\&quot;}\&quot;,\&quot;LikefolioMixin\&quot;:\&quot;{\\\&quot;paintingSettings\\\&quot;:{\\\&quot;neutralSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;positiveSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;negativeSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;sentimentSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true}},\\\&quot;shownDivisions\\\&quot;:[],\\\&quot;allDivisions\\\&quot;:[]}\&quot;}}&quot;,encodedPatternsModel=&quot;{\&quot;showPatterns\&quot;:true,\&quot;models\&quot;:[],\&quot;fibModels\&quot;:[]}&quot;,groupId=&quot;default&quot;,styleSettings{activeTool=2,chartAggregationSettings{monkeyChartsAggSettings=!%0.TimeFrameAggregationSettings.createTickOrTimeAggregation(!%1.ChartRange.findByCode(&quot;DAY3&quot;),@ChartAggregationPeriod0),timeAggregationSettings=!%0.TimeFrameAggregationSettings.createTickOrTimeAggregation(!%1.ChartRange.findByCode(&quot;DAY20&quot;),@ChartAggregationPeriod1)},commonStyleSettings{chartModeName:ChartModeName0,chartModes.!get(@ChartModeName0){chartPaintingType=!java.lang.Enum.valueOf(*%2.ChartPaintingType.class,&quot;BAR&quot;)},colorSettings{backgroundColor=!%3.CustomColor.findByIndex(&quot;101&quot;),barTypeColors{downColor=#%3.CustomColor(#%4.Color(51,51,255,255)),neutralColor=@CustomColor0,upColor=@CustomColor1},candleTypeColors.fillUp=&lt;T,monkeyProfileTypeColors.defaultRowHeight=&lt;F,mpExpandedTypeColors.defaultRowHeight=&lt;F,volumeColor=@CustomColor0},expansion{down=20,right=10,up=20},fitArrowsToScreen=&lt;F,fitStudiesToScreen=&lt;F,leftAxisRegulator{maxValue=21.34114905d,minValue=16.81218429d},manualAxisRegulator{maxValue=16.44246377d,minValue=10.98992754d},overlappedVolume=&lt;T,previousRightExpansion=10,shortCuts{^(&quot;Time Zone&quot;,&lt;F),^(&quot;Show Expiration Friday &quot;,&lt;F),^(&quot;Keep Price Zoom&quot;,&lt;F),^(&quot;enableLeftAxis&quot;,&lt;F),^(&quot;Fit expected price ranges&quot;,&lt;F),^(&quot;emphasizeDigitMPExpanded&quot;,&lt;F),^(&quot;showWicksCandleTrend&quot;,&lt;F),^(&quot;highlightEarnings&quot;,&lt;F),^(&quot;synchronizeCrosshair&quot;,&lt;F),^(&quot;myToolsMode&quot;,&lt;F),^(&quot;seasonalityStyle&quot;,&lt;F),^(&quot;Show Price Subgraph&quot;,&lt;F),^(&quot;closePriceLevel&quot;,&lt;F),^(&quot;Color Volume As Symbol Ticks&quot;,&lt;F),^(&quot;highlightPhantomRBars&quot;,&lt;F),^(&quot;Cross type &quot;,&lt;F),^(&quot;Fit Studies to Screen&quot;,&lt;F),^(&quot;Fit Orders&quot;,&lt;F),^(&quot;Bubbles as Percentage&quot;,&lt;F),^(&quot;hideStatusString&quot;,&lt;F),^(&quot;Show Studies &quot;,&lt;F),^(&quot;showWicksHeikinAshi&quot;,&lt;F),^(&quot;Alerts&quot;,&lt;F),^(&quot;Chart scale&quot;,&lt;F),^(&quot;Fit High/Low&quot;,&lt;F),^(&quot;Orders&quot;,&lt;F),!get:Boolean0(&quot;Chart mode&quot;),^(&quot;Use Log Scale &quot;,@Boolean0),^(&quot;Fit Study Markers to Screen&quot;,&lt;F),^(&quot;Fit Alerts&quot;,&lt;F),^(&quot;Fit patterns&quot;,&lt;F),^(&quot;Percentage View&quot;,&lt;F),^(&quot;Make Auto Zoom &quot;,&lt;F),^(&quot;Show Year Marking Line&quot;,&lt;F),^(&quot;Show Rollover Line&quot;,&lt;F),^(&quot;Show High/Low Bubbles &quot;,&lt;F),^(&quot;Snap mode&quot;,&lt;F),^(&quot;highlightStudies&quot;,&lt;F),^(&quot;Overlapped Volume&quot;,&lt;F),^(&quot;Show Symbol Logo&quot;,&lt;F),^(&quot;Show Last Price Bubble &quot;,&lt;F),^(&quot;emphasizeDigitMP&quot;,&lt;F),^(&quot;Snap crosshairs to&quot;,&lt;F),^(&quot;Show grid&quot;,&lt;F),^(&quot;showWicksCandle&quot;,&lt;F),^(&quot;Show trades&quot;,&lt;F),^(&quot;highlightSeasons&quot;,&lt;F),^(&quot;Snap drawings to&quot;,&lt;F),^(&quot;Extend Order/Alert Line to Left&quot;,&lt;F)},showExpFriday=&lt;F,showTradeExecution=&lt;T,snapMode=!%5.SnapUtils$SnapMode.valueOf(*%5.SnapUtils$SnapMode.class,&quot;SNAP_TO_HLOC&quot;),step=20.833333333333332d,suppressAutoZoom=&lt;T},forexStyleSettings.shortCuts.^(&quot;Show Volume Subgraph&quot;,&lt;F),futuresStyleSettings{highlightExtendedHours=&lt;T,shortCuts{^(&quot;adjustForContractChanges&quot;,&lt;F),^(&quot;Show Open Interest&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,@Boolean0),^(&quot;showContractChangeEvents&quot;,&lt;F),^(&quot;futures_daily_close_price&quot;,&lt;F),^(&quot;Show Options&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,&lt;F),^(&quot;startAtMarketOpen&quot;,&lt;F)},showOpenInterest=&lt;F,showVolume=&lt;F},optionsStyleSettings.shortCuts{^(&quot;Show Open Interest&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,@Boolean0),^(&quot;Show Theo Price&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,&lt;F),^(&quot;startAtMarketOpen&quot;,&lt;F)},otherStyleSettings{shortCuts{^(&quot;Show Social Sentiment&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,@Boolean0),^(&quot;Show Options&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,@Boolean0),^(&quot;Show Corporate Actions&quot;,&lt;F),^(&quot;Show CNBC Video&quot;,&lt;F),^(&quot;startAtMarketOpen&quot;,&lt;F),^(&quot;adjustForDividends&quot;,&lt;F)},showVolume=&lt;F,startAggregationAtMarketOpen=&lt;F,tradingHoursOnly=&lt;T},setsIdentifiers.styleSetName=&quot;waveTech6&quot;},subgraphModels{!get(#%6.SubgraphId(&quot;Symbol&quot;)){height=424,storableIndicators{+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence{body=&quot;# @new\n# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2009-2021\n#\n# Source code isn\'t available.\n\nplot slowAvg = Double.NaN;\nplot fastAvg = Double.NaN;\nplot BuySignal = Double.NaN;\nplot SellSignal = Double.NaN;&quot;,name=&quot;PPS&quot;}){hidden=&lt;T}),+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence{body=&quot;# @new\n# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2009-2021\n#\n\n#wizard input: length1\n#wizard text: -period\n#wizard input: averageType1\n#wizard text: crosses\n#wizard input: crossingType\n#wizard input: length2\n#wizard text: -period\n#wizard input: averageType2\n#wizard text: Price:\n#wizard input: price\n\ninput price = close;\ninput length1 = 15;\ninput length2 = 30;\ninput averageType1 = AverageType.Simple;\ninput averageType2 = AverageType.Simple;\ninput crossingType = {default above, below};\n\ndef avg1 = MovingAverage(averageType1, price, length1);\ndef avg2 = MovingAverage(averageType2, price, length2);\n\nplot signal = crosses(avg1, avg2, crossingType == CrossingType.above);\n\nsignal.DefineColor(\&quot;Above\&quot;, GetColor(6));\nsignal.DefineColor(\&quot;Below\&quot;, GetColor(7));\nsignal.AssignValueColor(if crossingType == CrossingType.above then signal.color(\&quot;Above\&quot;) else signal.color(\&quot;Below\&quot;));\n\nsignal.SetPaintingStrategy(if crossingType == CrossingType.above\n    then PaintingStrategy.BOOLEAN_ARROW_UP\n    else PaintingStrategy.BOOLEAN_ARROW_DOWN);&quot;,name=&quot;MovingAvgCrossover&quot;}){inputsMap:TreeMap0{^(&quot;averageType1&quot;,&quot;EXPONENTIAL&quot;),^(&quot;averageType2&quot;,&quot;EXPONENTIAL&quot;),^(&quot;length1&quot;,34),^(&quot;length2&quot;,150),^(&quot;price&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap0,plots{0:{palette.^(&quot;Above&quot;,!%3.CustomColor.findByIndex(&quot;16&quot;))}}}),+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence{body=&quot;# Original Code From: TD Ameritrade IP Company, Inc. (c) 2009-2020\n# Original StudyName: ATRTrailingStop\n# Type: Study\n\n# blackFLAG FTS SwingArms \n# Edited by: Jose Azcarate \n# blackFLAG Futures Trading - FOR EDUCATIONAL PURPOSES ONLY\n# TWITTER: @blackflagfuture\n# Settings Vary. My preferred setting is 28 / 5  But also use 30 / 8 and 5 / 3.5 depending on strategy.\n\ninput trailType = {default modified, unmodified};\ninput ATRPeriod = 28;\ninput ATRFactor = 5;\ninput firstTrade = {default long, short};\ninput averageType = AverageType.WILDERS;\n\ninput fib1Level = 61.8;\ninput fib2Level = 78.6;\ninput fib3Level = 88.6;\n\nAssert(ATRFactor &gt; 0, \&quot;\'atr factor\' must be positive: \&quot; + ATRFactor);\n\ndef HiLo = Min(high - low, 1.5 * Average(high - low, ATRPeriod));\ndef HRef = if low &lt;= high[1]\n    then high - close[1]\n    else (high - close[1]) - 0.5 * (low - high[1]);\ndef LRef = if high &gt;= low[1]\n    then close[1] - low\n    else (close[1] - low) - 0.5 * (low[1] - high);\n\ndef trueRange;\nswitch (trailType) {\ncase modified:\n    trueRange = Max(HiLo, Max(HRef, LRef));\ncase unmodified:\n    trueRange = TrueRange(high, close, low);\n}\ndef loss = ATRFactor * MovingAverage(averageType, trueRange, ATRPeriod);\n\ndef state = {default init, long, short};\ndef trail;\nswitch (state[1]) {\ncase init:\n    if (!IsNaN(loss)) {\n        switch (firstTrade) {\n        case long:\n            state = state.long;\n            trail = close - loss;\n        case short:\n            state = state.short;\n            trail = close + loss;\n    }\n    } else {\n        state = state.init;\n        trail = Double.NaN;\n    }\ncase long:\n    if (close &gt; trail[1]) {\n        state = state.long;\n        trail = Max(trail[1], close - loss);\n    } else {\n        state = state.short;\n        trail = close + loss;\n    }\ncase short:\n    if (close &lt; trail[1]) {\n        state = state.short;\n        trail = Min(trail[1], close + loss);\n    } else {\n        state = state.long;\n        trail = close - loss;\n    }\n}\n\ndef BuySignal = Crosses(state == state.long, 0, CrossingDirection.ABOVE);\ndef SellSignal = Crosses(state == state.short, 0, CrossingDirection.ABOVE);\n\ndef ex = if BuySignal then high else if SellSignal then low else if state == state.long then Max(ex[1], high) else if state == state.short then Min(ex[1], low) else ex[1];\n\nplot TrailingStop = trail;\n\nTrailingStop.SetPaintingStrategy(PaintingStrategy.POINTS);\nTrailingStop.DefineColor(\&quot;Long\&quot;, Color.GREEN);\nTrailingStop.DefineColor(\&quot;Short\&quot;, Color.RED);\nTrailingStop.AssignValueColor(if state == state.long\n    then TrailingStop.Color(\&quot;Long\&quot;)\n    else TrailingStop.Color(\&quot;Short\&quot;));\n\nplot Extremum = ex;\nExtremum.SetPaintingStrategy(PaintingStrategy.POINTS);\nExtremum.DefineColor(\&quot;HH\&quot;, Color.GREEN);\nExtremum.DefineColor(\&quot;LL\&quot;, Color.RED);\nExtremum.AssignValueColor(if state == state.long\n    then Extremum.Color(\&quot;HH\&quot;)\n    else Extremum.Color(\&quot;LL\&quot;));\nExtremum.Hide();\n\ndef f1 = ex + (trail - ex) * fib1Level / 100;\ndef f2 = ex + (trail - ex) * fib2Level / 100;\ndef f3 = ex + (trail - ex) * fib3Level / 100;\ndef l100 = trail + 0;\n###mahi\ninput  price =close;\nplot buySignalcnfm =  state == state.long and price crosses above f3;\nbuySignalcnfm.setPaintingStrategy(paintingStrategy.BOOLEAN_ARROW_UP); #SetPaintingStrategy(PaintingStrategy.POINTS);\nbuysignalcnfm.setLineWeight(5);\nbuysignalcnfm.SetDefaultColor(Color.pink);\n\n\n#####\nplot Fib1 = f1;\nFib1.SetPaintingStrategy(PaintingStrategy.POINTS);\nFib1.SetDefaultColor(Color.white);\nFib1.Hide();\n\nFib1.DefineColor(\&quot;Fshort\&quot;,  Color.light_red);\nFib1.DefineColor(\&quot;Flong\&quot;,  Color.Light_green);\nFib1.AssignValueColor(if state == state.long\n    then Fib1.Color(\&quot;Flong\&quot;)\n    else Fib1.Color(\&quot;Fshort\&quot;));\n\nplot Fib2 = f2;\nFib2.SetPaintingStrategy(PaintingStrategy.POINTS);\nFib2.SetDefaultColor(Color.white);\nFib2.Hide();\nFib2.DefineColor(\&quot;Fshort\&quot;,  Color.red);\nFib2.DefineColor(\&quot;Flong\&quot;,  Color.green);\nFib2.AssignValueColor(if state == state.long\n    then Fib2.Color(\&quot;Flong\&quot;)\n    else Fib2.Color(\&quot;Fshort\&quot;));\n\n\nplot Fib3 = f3;\nFib3.SetPaintingStrategy(PaintingStrategy.POINTS);\nFib3.SetDefaultColor(Color.white);\nFib3.Hide();\nFib3.AssignValueColor(if state == state.long\n    then Fib1.Color(\&quot;Flong\&quot;)\n    else Fib1.Color(\&quot;Fshort\&quot;));\n\n#input show_cloud = yes;\n\ndef Na = Double.NaN;\ninput showCloud= yes;\n\ndef cloudF1 = If( ShowCloud, f1, Na);\ndef cloudF2  = If(ShowCloud, f2, Na);\ndef cloudF3  = If(ShowCloud, f3, Na);\n#AddCloud(cloudhigh, cloudlow, Color.GRAY, Color.GRAY);\n\n\n\n\n\n\nAddCloud(cloudF1, cloudF2, Color.LIGHT_GREEN, Color.LIGHT_RED, no);\nAddCloud(cloudF2,cloudF3, Color.GREEN, Color.RED, no);\nAddCloud(cloudF3, l100, Color.DARK_GREEN, Color.DARK_RED, no);\n\ndef l1 = state[1] == state.long and close crosses below f1[1];\ndef l2 = state[1] == state.long and close crosses below f2[1];\ndef l3 = state[1] == state.long and close crosses below f3[1];\ndef s1 = state[1] == state.short and close crosses above f1[1];\ndef s2 = state[1] == state.short and close crosses above f2[1];\ndef s3 = state[1] == state.short and close crosses above f3[1];\n\ndef atr = Average(TrueRange(high, close, low), 14);\n\nplot LS1 = if l1 then low - atr else Double.NaN;\nplot LS2 = if l2 then low - 1.5 * atr else Double.NaN;\nplot LS3 = if l3 then low - 2 * atr else Double.NaN;\nplot SS1 = if s1 then high + atr else Double.NaN;\nplot SS2 = if s2 then high + 1.5 * atr else Double.NaN;\nplot SS3 = if s3 then high + 2 * atr else Double.NaN;\n\nLS1.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\nLS1.SetDefaultColor(Color.GREEN);\nLS1.SetLineWeight(1);\nLS1.Hide();\nLS2.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\nLS2.SetDefaultColor(Color.GREEN);\nLS2.SetLineWeight(1);\nLS2.Hide();\nLS3.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\nLS3.SetDefaultColor(Color.violet);\nLS3.SetLineWeight(4);\n#LS3.Hide();\n\nSS1.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\nSS1.SetDefaultColor(Color.RED);\nSS1.SetLineWeight(1);\nSS1.Hide();\nSS2.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\nSS2.SetDefaultColor(Color.RED);\nSS2.SetLineWeight(1);\nSS2.Hide();\nSS3.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\nSS3.SetDefaultColor(Color.RED);\nSS3.SetLineWeight(1);\nSS3.Hide();\n\nAlert(l1, \&quot;Price crossed below Fib1 level in long trend\&quot;, Alert.BAR, Sound.Bell);\nAlert(l2, \&quot;Price crossed below Fib2 level in long trend\&quot;, Alert.BAR, Sound.Bell);\nAlert(l3, \&quot;Price crossed below Fib3 level in long trend\&quot;, Alert.BAR, Sound.Bell);\nAlert(s1, \&quot;Price crossed above Fib1 level in short trend\&quot;, Alert.BAR, Sound.Bell);\nAlert(s2, \&quot;Price crossed above Fib2 level in short trend\&quot;, Alert.BAR, Sound.Bell);\nAlert(s3, \&quot;Price crossed above Fib3 level in short trend\&quot;, Alert.BAR, Sound.Bell);\n&quot;,name=&quot;_0bb1d049_f213_41ae_b5c1_8617e7c29471&quot;}){alerts:LocalAlertArray0,alerts=@LocalAlertArray0,hidden=&lt;T,inputsMap:TreeMap1{^(&quot;fib1Level&quot;,0.236d),^(&quot;fib2Level&quot;,0.5d),^(&quot;fib3Level&quot;,0.764d),^(&quot;price&quot;,&quot;CLOSE&quot;),^(&quot;showCloud&quot;,&lt;F)},inputsMap=@TreeMap1,plots{0:{hiding=&lt;T},3:{hiding=&lt;F},4:{hiding=&lt;F},5:{hiding=&lt;F}}}),+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence{body=&quot;input marketThreshold = 0.0025;\ninput timeFrame = {default DAY, \&quot;2 DAYS\&quot;, \&quot;3 DAYS\&quot;, \&quot;4 DAYS\&quot;, WEEK, MONTH, \&quot;OPT EXP\&quot;, QUARTER, YEAR};\ninput showOnlyToday = no;\ninput applyPersonsLevelsFilter = yes;\ninput drawLine =yes;\n\nassert(marketThreshold &gt;= 0, \&quot;\'market threshold\' must not be negative: \&quot; + marketThreshold);\n\ndef marketType = {default DISABLED, NEUTRAL, BEARISH, BULLISH};\n\ndef PP2 = high(period = timeFrame)[2] + low(period = timeFrame)[2] + close(period = timeFrame)[2];\n\nmarketType = if !applyPersonsLevelsFilter then marketType.DISABLED else\nif PP2[-1] &gt; (PP2[-1] + PP2 + PP2[1]) / 3 + marketThreshold then marketType.BULLISH else\nif PP2[-1] &lt; (PP2[-1] + PP2 + PP2[1]) / 3 - marketThreshold then marketType.BEARISH else marketType.NEUTRAL;\n\nplot R3;\nplot R2;\nplot R1;\nplot RR;\nplot PP;\nplot SS;\nplot S1;\nplot S2;\nplot S3;\n\nif showOnlyToday and !IsNaN(close(period = timeFrame)[-1])\nthen {\n    R1 = Double.NaN;\n    R2 = Double.NaN;\n    R3 = Double.NaN;\n    PP = Double.NaN;\n    S1 = Double.NaN;\n    S2 = Double.NaN;\n    S3 = Double.NaN;\n} else {\n    PP = (high(period = timeFrame)[1] + low(period = timeFrame)[1] + close(period = timeFrame)[1]) / 3;\n    R1 = 2 * PP - low(period = timeFrame)[1];\n    R2 = PP + high(period = timeFrame)[1] - low(period = timeFrame)[1];\n    R3 = R2 + high(period = timeFrame)[1] - low(period = timeFrame)[1];\n    S1 = 2 * PP - high(period = timeFrame)[1];\n    S2 = PP - high(period = timeFrame)[1] + low(period = timeFrame)[1];\n    S3 = S2 - high(period = timeFrame)[1] + low(period = timeFrame)[1];\n}\n\nRR = if (marketType == marketType.BEARISH or marketType == marketType.NEUTRAL) then R1 else R2;\nSS = if (marketType == marketType.BULLISH or marketType == marketType.NEUTRAL) then S1 else S2;\n\nRR.setHiding(!applyPersonsLevelsFilter);\nR1.setHiding(applyPersonsLevelsFilter);\nR2.setHiding(applyPersonsLevelsFilter);\nR3.hide();\nSS.setHiding(!applyPersonsLevelsFilter);\nS1.setHiding(applyPersonsLevelsFilter);\nS2.setHiding(applyPersonsLevelsFilter);\nS3.hide();\n\nPP.SetDefaultColor(GetColor(0));\nR1.SetDefaultColor(GetColor(5));\nR2.SetDefaultColor(GetColor(5));\nR3.SetDefaultColor(GetColor(5));\nS1.SetDefaultColor(GetColor(6));\nS2.SetDefaultColor(GetColor(6));\nS3.SetDefaultColor(GetColor(6));\n\nSS.DefineColor(\&quot;S1\&quot;, GetColor(6));\nSS.DefineColor(\&quot;S2\&quot;, GetColor(6));\nSS.AssignValueColor(if SS == S1 then SS.color(\&quot;S1\&quot;) else SS.color(\&quot;S2\&quot;));\n\nRR.DefineColor(\&quot;R1\&quot;, GetColor(5));\nRR.DefineColor(\&quot;R2\&quot;, GetColor(5));\nRR.AssignValueColor(if RR == R1 then RR.color(\&quot;R1\&quot;) else RR.color(\&quot;R2\&quot;));\n\nPP.SetStyle(Curve.SHORT_DASH);\nRR.SetStyle(Curve.SHORT_DASH);\nR1.SetStyle(Curve.SHORT_DASH);\nR2.SetStyle(Curve.SHORT_DASH);\nR3.SetStyle(Curve.SHORT_DASH);\nSS.SetStyle(Curve.SHORT_DASH);\nS1.SetStyle(Curve.SHORT_DASH);\nS2.SetStyle(Curve.SHORT_DASH);\nS3.SetStyle(Curve.SHORT_DASH);\n\n\ndef paintingStrategy ;\n\nif drawLine\n{\npaintingStrategy = if timeframe == timeframe.WEEK then PaintingStrategy.LINE_VS_TRIANGLES else if timeFrame == timeFrame.MONTH or timeFrame == timeFrame.\&quot;OPT EXP\&quot; or timeFrame == timeFrame.QUARTER or timeFrame == timeFrame.YEAR then PaintingStrategy.LINE_VS_SQUARES else PaintingStrategy.LINE_VS_POINTS;\n\n}\nelse\n{\npaintingStrategy = if timeframe == timeframe.WEEK then PaintingStrategy.TRIANGLES else if timeFrame == timeFrame.MONTH or timeFrame == timeFrame.\&quot;OPT EXP\&quot; or timeFrame == timeFrame.QUARTER or timeFrame == timeFrame.YEAR then PaintingStrategy.SQUARES else PaintingStrategy.POINTS;\n\n}\n\n#def paintingStrategy = if timeframe == timeframe.WEEK then PaintingStrategy.LINE_VS_TRIANGLES else if timeFrame == timeFrame.MONTH or timeFrame == timeFrame.\&quot;OPT EXP\&quot; or timeFrame == timeFrame.QUARTER or timeFrame == timeFrame.YEAR then PaintingStrategy.LINE_VS_SQUARES else PaintingStrategy.LINE_VS_POINTS;\n\nPP.SetPaintingStrategy(paintingStrategy);\nRR.SetPaintingStrategy(paintingStrategy);\nR1.SetPaintingStrategy(paintingStrategy);\nR2.SetPaintingStrategy(paintingStrategy);\nR3.SetPaintingStrategy(paintingStrategy);\nSS.SetPaintingStrategy(paintingStrategy);\nS1.SetPaintingStrategy(paintingStrategy);\nS2.SetPaintingStrategy(paintingStrategy);\nS3.SetPaintingStrategy(paintingStrategy);&quot;,name=&quot;_99c08cc0_b776_4b49_a3bf_a01dada4cf51&quot;}){hidden=&lt;T,inputsMap:TreeMap2{^(&quot;applyPersonsLevelsFilter&quot;,&lt;F),^(&quot;drawLine&quot;,&lt;F),^(&quot;timeFrame&quot;,&quot;WEEK&quot;)},inputsMap=@TreeMap2,plots{0:{hiding=&lt;F,lineStyle=1},3:{hiding=&lt;T},5:{hiding=&lt;T},8:{hiding=&lt;F}}}),+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence{body=&quot;# AI_Squeeze_Clouds_v1 \n\n# AlphaInvestor - 09/07/2015 - coded up simple method to show clouds for BB/KC squeeze \n\n \ndeclare weak_volume_dependency;\n\ninput displace = 0;\ninput factor = 1.5; #keltnerChannels\ninput length = 20;\ninput price = close;\ninput averageType = AverageType.SIMPLE;\ninput trueRangeAverageType = AverageType.SIMPLE;\n\nAddCloud(bollingerbands(price,0,length,-2.0,2.0,averageType).LowerBand, keltnerChannels(0,factor,length,price,averagetype.simple,trueRangeAverageType).Lower_Band,   Color.cyan,  Color.gray); \n\nAddCloud(keltnerChannels(0,factor,20,price,averagetype.simple,trueRangeAverageType).Upper_Band,bollingerbands(price,0,length,-2.0,2.0,averageType).UpperBand,  Color.pink,  Color.gray); \n\n \n\n# End Study \n\n\ndef shift = factor * MovingAverage(trueRangeAverageType, TrueRange(high, close, low), length);\n\ndef average = MovingAverage(averageType, price, length);\n\nplot Avg = average[-displace];\nAvg.SetDefaultColor(GetColor(1));\n\nplot Upper_Band = average[-displace] + shift[-displace];\nUpper_Band.SetDefaultColor(GetColor(8));\n\nplot Lower_Band = average[-displace] - shift[-displace];\nLower_Band.SetDefaultColor(GetColor(5));\n&quot;,name=&quot;_5b75a5fd_0525_3fa7_b294_5a19e419d099&quot;}){hidden=&lt;T,inputsMap:TreeMap3{^(&quot;price&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap3,plots{0:{lineStyle=3}}}),+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence{body=&quot;# OvernightHiLowLines_mobius_jq\n# GlobeX or Overnight High / Low without Fibonacci Values \n# Based on code by Mobius # V01.2012 \n# cosmetic alterations by Johnny Quotron\n#    1. removal of fib lines\n#    2. paint ONL bubble below the line\n#    3. addition of other comments\n#    4. addition of bubbles in the expansion area if desired\n#\n# Restrictions:  Hi / Low lines are not drawn for non-traded indicies such as VIX or TNX..JQ\n\ndeclare hide_on_daily;\ninput PlotOverNightExtremes = yes;\ninput DisplayPriceBubbleOnHiLowBar = yes;\ninput DisplayPriceBubbleOnRightEdge = yes;  #Haven\'t figured this out yet..JQ\n\ndef o = open;\ndef h = high;\ndef l = low;\ndef c = close;\ndef v = volume;\ndef bar = BarNumber();\ndef GlobeX = GetTime() &lt; RegularTradingStart(GetYYYYMMDD());\n\ndef vol = if GlobeX and !GlobeX[1]\nthen v\nelse if GlobeX\nthen vol[1] + v\nelse Double.NaN;\n\ndef GlobeX_Volume = vol;\n\ndef ONhigh = if GlobeX and !GlobeX[1]\nthen h\nelse if GlobeX and\nh &gt; ONhigh[1]\nthen h\nelse ONhigh[1];\n\ndef ONhighBar = if GlobeX and h == ONhigh\nthen bar\nelse Double.NaN;\n\ndef ONlow = if GlobeX and !GlobeX[1]\nthen l\nelse if GlobeX and\nl &lt; ONlow[1]\nthen l\nelse ONlow[1];\n\ndef ONlowBar = if GlobeX and l == ONlow\nthen bar\nelse Double.NaN;\n\ndef OverNightHigh = if BarNumber() == HighestAll(ONhighBar)\nthen ONhigh\nelse OverNightHigh[1];\n\ndef OverNightLow = if BarNumber() == HighestAll(ONlowBar)\nthen ONlow\nelse OverNightLow[1];\n\n\n#\nplot ONH = if OverNightHigh &gt; 0\nthen OverNightHigh\nelse Double.NaN;\n\nONH.SetHiding(!PlotOverNightExtremes);\nONH.SetPaintingStrategy(PaintingStrategy.SQUARES);\nONH.SetDefaultColor(Color.BLUE);\nONH.HideBubble();\nONH.HideTitle();\n\n#\nplot ONL = if OverNightLow &gt; 0 \nthen OverNightLow\nelse Double.NaN;\n\nONL.SetHiding(!PlotOverNightExtremes);\nONL.SetPaintingStrategy(PaintingStrategy.SQUARES);\nONL.SetDefaultColor(Color.LIGHT_GRAY);\nONL.HideBubble();\nONL.HideTitle();\n\n\n# Bubble code\n#AddChartBubble(bar == ONhighBar and PlotOverNightExtremes and DisplayPriceBubbleOnHiLowBar, ONH, \&quot;ONH: \&quot; + ONH, createColor(204,204,255));\n#AddChartBubble(bar == ONlowBar and PlotOverNightExtremes and DisplayPriceBubbleOnHiLowBar, ONL, \&quot;ONL: \&quot; + ONL, createColor(204,204,255),no);  #designated that the bubble be painted below the ONL line.  2018-04-07 JQ \n\n\nAddChartBubble(barNumber() == highestAll(barnumber()) and  PlotOverNightExtremes and DisplayPriceBubbleOnRightEdge, ONH, \&quot;ONH: \&quot; + ONH, createColor(204,204,255));\nAddChartBubble(barNumber() == highestAll(barnumber()) and PlotOverNightExtremes and DisplayPriceBubbleOnRightEdge, ONL, \&quot;ONL: \&quot; + ONL, createColor(204,204,255),no); \ninput showLable =yes;\nAddLabel(showLable, \&quot;ONL= \&quot; + astext(ONL), if ONL&lt; close then Color.LIGHT_GREEN else if ONL&gt; close then color.LIGHT_red else Color.GRAY);\nAddLabel(showLable, \&quot;ONH= \&quot; + astext(ONH), if ONH&lt; close then Color.LIGHT_GREEN else if ONH&gt; close then color.LIGHT_red else Color.GRAY);\n# End Code GlobeX or Overnight High / Low without Fibonacci Values &quot;,name=&quot;_2b139ce2_bb93_4663_acef_0fb6255d8008&quot;}){plots{0:{lineStyle=3,paintingStrategy=0},1:{color=#%3.CustomColor(#%4.Color(0,0,255,255)),lineStyle=3,paintingStrategy=0}}}),+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence{body=&quot;# @new\n# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2009-2021\n#\n\n#wizard input: length1\n#wizard text: -period\n#wizard input: averageType1\n#wizard text: crosses\n#wizard input: crossingType\n#wizard input: length2\n#wizard text: -period\n#wizard input: averageType2\n#wizard text: Price:\n#wizard input: price\n\ninput price = close;\ninput length1 = 15;\ninput length2 = 30;\ninput averageType1 = AverageType.Simple;\ninput averageType2 = AverageType.Simple;\ninput crossingType = {default above, below};\n\ndef avg1 = MovingAverage(averageType1, price, length1);\ndef avg2 = MovingAverage(averageType2, price, length2);\n\nplot signal = crosses(avg1, avg2, crossingType == CrossingType.above);\n\nsignal.DefineColor(\&quot;Above\&quot;, GetColor(6));\nsignal.DefineColor(\&quot;Below\&quot;, GetColor(7));\nsignal.AssignValueColor(if crossingType == CrossingType.above then signal.color(\&quot;Above\&quot;) else signal.color(\&quot;Below\&quot;));\n\nsignal.SetPaintingStrategy(if crossingType == CrossingType.above\n    then PaintingStrategy.BOOLEAN_ARROW_UP\n    else PaintingStrategy.BOOLEAN_ARROW_DOWN);&quot;,name=&quot;MovingAvgCrossover&quot;}){hidden=&lt;T,inputsMap:TreeMap4{^(&quot;length1&quot;,10),^(&quot;length2&quot;,21),^(&quot;price&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap4,plots{0:{lineWeight=5,palette{^(&quot;Above&quot;,!%3.CustomColor.findByIndex:CustomColor7(&quot;12&quot;)),^(&quot;Below&quot;,!%3.CustomColor.findByIndex:CustomColor8(&quot;15&quot;))}}}}),+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence{body=&quot;###############################################################################################################################################\n################################################################################################################################################\n#\n# Author: Kory Gill, [USER=212]@korygill[/USER]\n#\n# Created from idea on https://usethinkscript.com/threads/finite-volume-elements.593/\n# Original idea is from http://mkatsanos.com/FVE.html\n#\n# VERSION HISTORY (sortable date and time (your local time is fine), and your initials\n# 20190907-1200-KG    - Created.\n\n###############################################################################\n### NORMALIZATION (Volume Damping adaptation) by Ramon Del Villar AKA PElonsax\n### 7/20/2020 #################################################################\n###############################################################################\n# The damping logic is taken directly from VFI #\n\n#declare once_per_bar;\n\n\n#################################################################$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n\n#########################################%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%$$$$$$$$$$$$$$$$$\n\n\n\n#\n# inputs\n#\ninput RSI_prev = 2; #previous bar to check\ninput def_cond = no;\ninput Samples = 14;\n\n\n\n#vwap vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\n#input numDevUp = 2.0;\ninput vwapTimeFrame = {default DAY, WEEK, MONTH};\n\ndef cap = getAggregationPeriod();\ndef errorInAggregation =\n    vwapTimeFrame == vwapTimeFrame.DAY and cap &gt;= AggregationPeriod.WEEK or\n    vwapTimeFrame== vwapTimeFrame.WEEK and cap &gt;= AggregationPeriod.MONTH;\nassert(!errorInAggregation, \&quot;timeFrame should be not less than current chart aggregation period\&quot;);\n\ndef yyyyMmDd = getYyyyMmDd();\ndef periodIndx;\nswitch (vwapTimeFrame) {\ncase DAY:\n    periodIndx = yyyyMmDd;\ncase WEEK:\n    periodIndx = Floor((daysFromDate(first(yyyyMmDd)) + getDayOfWeek(first(yyyyMmDd))) / 7);\ncase MONTH:\n    periodIndx = roundDown(yyyyMmDd / 100, 0);\n}\ndef isPeriodRolled = compoundValue(1, periodIndx != periodIndx[1], yes);\n\ndef volumeSum;\ndef volumeVwapSum;\ndef volumeVwap2Sum;\n\nif (isPeriodRolled) {\n    volumeSum = volume;\n    volumeVwapSum = volume * vwap;\n    volumeVwap2Sum = volume * Sqr(vwap);\n} else {\n    volumeSum = compoundValue(1, volumeSum[1] + volume, volume);\n    volumeVwapSum = compoundValue(1, volumeVwapSum[1] + volume * vwap, volume * vwap);\n    volumeVwap2Sum = compoundValue(1, volumeVwap2Sum[1] + volume * Sqr(vwap), volume * Sqr(vwap));\n}\ndef vWapprice = volumeVwapSum / volumeSum;\ndef deviation = Sqrt(Max(volumeVwap2Sum / volumeSum - Sqr(vWapprice), 0));\n\ndef VWAP = vWapprice;\n\n\n\ninput vwapCondition =no;\n#input vp=close;\ndef conVwapBuy =if  vwapCondition then  close &gt;= VWAp else 1;\n\n#####^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n\n#\n# FVE logic\n#\ndef bn = BarNumber();\ndef nan = double.NaN;\n\n\ninput maxVolumeCutOff = 2.5;\n###Coefficient used in calculation of “Cut Off” value. Lower values mean stronger damping of volume spikes###\n\nAssert(maxVolumeCutOff &gt; 0, \&quot;\'max volume cut off\' must be positive: \&quot; + maxVolumeCutOff);\n\ndef cutOff = 0.2 * StDev(Log(hlc3) - Log(hlc3[1]), 30) * close;\ndef hlcChange = hlc3 - hlc3[1];\ndef avgVolume = Average(volume, 30)[1];\ndef minVolume = Min(volume, avgVolume * maxVolumeCutOff);\ndef dirVolume = if hlcChange &gt; cutOff\n    then minVolume\n    else if hlcChange &lt; -cutOff\n        then -minVolume\n        else 0;\n\n\ndef mf = (close - (high+low)/2) + hlc3 - hlc3 [1];\ndef fveSum = Sum(dirVolume, Samples);\n\ndef fve = if bn &gt; Samples\n          then (fveSum / (Average(avgVolume, Samples) * Samples)) * 100\n          else nan;\n\n\n#\n# plots\n#\ndef pFVE = fve;\n\ndef pFVE_MA = MovingAverage(AverageType.SIMPLE, fve, 30);\n#pFVE_MA.SetDefaultColor(Color.Gray);\n#PFVE_MA.SetPaintingStrategy(PaintingStrategy.DASHES);\n\ndef zeroLine = 0;\ndef pFVE_Bull = if pFVE crosses above pFVE_MA then pFVE  else double.NaN ;\ndef pFVE_Bear = if pFVE &gt; pFVE_MA and pFVE[1] &gt; pFVE then pFVE else double.NaN ;\n\n#format plot \n\n#zeroLine.SetDefaultColor(Color.White);\n#pFVE.AssignValueColor(if pFVE &gt; pFVE_MA then color.green else color.red) ;\n#pFVE.SetLineWeight(3);\n\n\n#pFVE_Bull.SetPaintingStrategy(PaintingStrategy.SQUARES);\n#pFVE_Bull.SetLineWeight(5);\n#pFVE_Bull.SetDefaultColor(color.dark_green) ;\n\n#pFVE_Bear.SetPaintingStrategy(PaintingStrategy.SQUARES);\n#pFVE_Bear.SetLineWeight(5);\n#pFVE_Bear.SetDefaultColor(color.white) ;\n\n#AddCloud(pFVE, pFVE_MA, color.light_green, color.pink);\n\n\n\n#####################################################################################################################################################\n\n\n\n# Simple 2 Period RSI Trading Indicator\n# Assembled by BenTen at useThinkScript.com\n# You are free to use this code for personal use, and make derivative works from it. You are NOT GRANTED permission to use this code (or derivative works) for commercial purposes which includes and is not limited to selling, reselling, or packaging with other commercial indicators. Headers and attribution in this code should remain as provided, and any derivative works should extend the existing headers.\n\n#MACD\ninput price = close;\n#input length_macd = 14;\ninput displace = 0;\n#input showBreakoutSignals = no;\ninput crossingType = {default above, below};\n\ninput fastLength = 12;\ninput slowLength = 26;\ninput MACDLength = 9;\ndef fastAvg = Sum(volume * price, fastLength) / Sum(volume, fastLength);\ndef slowAvg = Sum(volume * price, slowLength) / Sum(volume, slowLength);\ndef Value = fastAvg - slowAvg;\ndef Avg = ExpAverage(Value, MACDLength);\ndef MACD_Diff  = Value - Avg;\n#def ZeroLine = 0;\n\n# RSI\ninput rsiLength = 14;\ninput overBought = 80;\ninput overSold = 28;\ninput rsiBuyLevel =40;\ninput averageType = AverageType.WILDERS;\ndef NetChgAvg = MovingAverage(averageType, price - price[1], RSIlength);\ndef TotChgAvg = MovingAverage(averageType, AbsValue(price - price[1]), RSIlength);\ndef ChgRatio = if TotChgAvg != 0 then NetChgAvg / TotChgAvg else 0;\ndef RSI = 50 * (ChgRatio + 1);\n#def OverSold = overSold;\n#def OverBought = overBought;\n\n#test\n#plot p= VWAp;#(period= AggregationPeriod.DAY);\n\n####################################\n\ndef cond_logic = if (def_cond) then MACD_Diff &lt;= 0 else yes;\n######\n#def sig_buy = Crosses(RSI(length = RSIlength, averageType = averageType).RSI, over_Sold, crossingType == crossingType.above) within RSI_prev bars and pFVE_Bull and cond_logic; # and Diff &lt;= 0;\ndef sig_buy = conVwapBuy and RSI&lt; rsiBuyLevel and pFVE_Bull  and cond_logic ;# and Diff &gt;= 0;\n#def sig_buy = pFVE_Bull and Diff &gt;= 0;\nplot signal_buy = sig_buy ;\n\n\ndef sig_sell = Crosses(RSI(length = RSIlength, averageType = averageType).RSI, overBought, crossingType == crossingType.below) within RSI_prev bars and pFVE_Bear ;\nplot signal_sell = sig_sell;\n\nsignal_buy.DefineColor(\&quot;Above\&quot;, Color.YELLOW);\nsignal_buy.DefineColor(\&quot;Below\&quot;, GetColor(8));\nsignal_buy.AssignValueColor(if crossingType == crossingType.above then signal_buy.Color(\&quot;Above\&quot;) else signal_buy.Color(\&quot;Below\&quot;));\nsignal_buy.setlineWeight(5);\nsignal_buy.SetPaintingStrategy(if crossingType == crossingType.above\n    then PaintingStrategy.BOOLEAN_ARROW_UP\n    else PaintingStrategy.BOOLEAN_ARROW_DOWN);\n\nsignal_sell.DefineColor(\&quot;Above\&quot;, Color.VIOLET);\nsignal_sell.DefineColor(\&quot;Below\&quot;, GetColor(8));\nsignal_sell.AssignValueColor(if crossingType == crossingType.above then signal_sell.Color(\&quot;Above\&quot;) else signal_sell.Color(\&quot;Below\&quot;));\n\nsignal_sell.SetPaintingStrategy(if crossingType == crossingType.above\n    then PaintingStrategy.BOOLEAN_ARROW_DOWN\n    else PaintingStrategy.BOOLEAN_ARROW_UP);\nsignal_sell.setlineWeight(5);\ninput bubble =no; \nAddChartBubble(bubble and sig_sell == 1, price, \&quot;S= \&quot; + price + \&quot; rsi \&quot; + RSI, Color.VIOLET, no);&quot;,name=&quot;_259d509b_f440_4edf_840b_2df1df75ab8c&quot;}){inputsMap:TreeMap5{^(&quot;price&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap5,plots{0:{lineWeight=4},1:{lineWeight=4}}}),+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence{body=&quot;# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2017-2021\n#\n\ninput price = close;\ninput length = 9;\ninput displace = 0;\ninput showBreakoutSignals = no;\n\nplot SMA = Average(price[-displace], length);\nplot UpSignal = price crosses above SMA;\nplot DownSignal = price crosses below SMA;\n\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\nSMA.SetDefaultColor(GetColor(1));\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);&quot;,name=&quot;SimpleMovingAvg&quot;}){inputsMap:TreeMap6{^(&quot;length&quot;,200),^(&quot;price&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap6,plots{0:{color=@CustomColor7}}}),+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence{body=&quot;input price = close;\ninput displace = 0;\ninput length = 20;\ninput Num_Dev_Dn = -2.0;\ninput Num_Dev_up = 2.0;\ninput averageType = AverageType.Simple;\ninput showCloud= yes;\n\ndef sDev = stdev(data = price[-displace], length = length);\n\nplot MidLine = MovingAverage(averageType, data = price[-displace], length = length);\nplot LowerBand = MidLine + num_Dev_Dn * sDev;\nplot UpperBand = MidLine + num_Dev_Up * sDev;\n\nLowerBand.SetDefaultColor(GetColor(0));\nMidLine.SetDefaultColor(GetColor(1));\nUpperBand.SetDefaultColor(GetColor(5));\n\n#############################\ndef Na = Double.NaN;\n\ndef cloudhigh = If( ShowCloud, UpperBand, Na);\ndef cloudlow  = If(ShowCloud, LowerBand, Na);\n#AddCloud(cloudhigh, cloudlow, Color.GRAY, Color.GRAY);\n\n\nAddCloud(cloudhigh, Midline, Color.Green, Color.light_Green);\nAddCloud(cloudlow, Midline, Color.Red, Color.light_Red);\n\n\n####$$$$$$$$\n\n\ninput priceSlm = close;\n\ninput superFastLength = 8;\n\ninput fastLengthSlm = 13;\n\ninput slowLengthSlm = 21;\n\n\n\n\ninput averageTypeSlm = AverageType.EXPONENTIAL;\n\ndef mov_avg8 = MovingAverage(averageTypeSlm, priceSlm[-displace], superFastLength);\n\ndef mov_avg13 = MovingAverage(averageTypeSlm, priceSlm[-displace], fastLengthSlm);\n\ndef mov_avg21 = MovingAverage(averageTypeSlm, priceSlm[-displace], slowLengthSlm);\n \n#moving averages\n\ndef Superfast = mov_avg8;\n\ndef Fast = mov_avg13;\n\ndef Slow = mov_avg21;\n\n\ndef buy = mov_avg8 &gt; mov_avg13 and mov_avg13 &gt; mov_avg21 and low &gt; mov_avg8;\n\ndef stopbuy = mov_avg8 &lt;= mov_avg13;\n\ndef buynow = !buy[1] and buy;\n\ndef buysignal = CompoundValue(1, if buynow and !stopbuy then 1 else if buysignal[1] == 1 and stopbuy then 0 else buysignal[1], 0);\n\n\ndef Buy_Signal = buysignal[1] == 0 and buysignal == 1;\n\ndef Momentum_Down = buysignal[1] == 1 and buysignal == 0;\n\n\ndef sell = mov_avg8 &lt; mov_avg13 and mov_avg13 &lt; mov_avg21 and high &lt; mov_avg8;\n\ndef stopsell = mov_avg8 &gt;= mov_avg13;\n\ndef sellnow = !sell[1] and sell;\n\ndef sellsignal = CompoundValue(1, if sellnow and !stopsell then 1 else if sellsignal[1] == 1 and stopsell then 0 else sellsignal[1], 0);\n\n\ndef Sell_Signal = sellsignal[1] == 0 and sellsignal;\n\ndef Momentum_Up = sellsignal[1] == 1 and sellsignal == 0;\n \n# when using this as a custom scan, change the word plot to def\n# then remove the \'#\' from in front of one of the \&quot;plot Scan\&quot; statements below\ndef Colorbars = if buysignal == 1 then 1 else if sellsignal == 1 then -1 else if buysignal == 0 or sellsignal == 0 then 0 else 0;\n\n# use this first Scan plot for SLM Ribbon Momentum UP\n#plot Scan = if Colorbars == 1 then yes else no;\n\n# use this second Scan plot for SLM Ribbon Momentum DOWN\n#plot Scan = if Colorbars == -1 then yes else no;\n\n\n\n\n\n\n###############\n\ndef Colorbars1 = if buysignal == 1 then 1 else if sellsignal == 1 then 2 else if buysignal == 0 or sellsignal == 0 then 3 else 0;\n\ninput lengthHma = 20;\n\ndef HMA = MovingAverage(AverageType.HULL, price, lengthHma);\ndef HMA_Up=  HMA &gt; HMA[1];\ndef HMA_Down =! HMA_UP;\n\n###############\n\n#def Colorbars1 = if buysignal == 1 then 1 else if sellsignal == 1 then 2 else if buysignal == 0 or sellsignal == 0 then 3 else 0;\n\n\n\nMidLine.definecolor(\&quot;Buy\&quot;, color.dark_green);\n\n\nMidLine.definecolor(\&quot;Sell\&quot;, color.red);\n\nMidLine.definecolor(\&quot;Neutral\&quot;, Color.PLUM);\n#MidLine.definecolor(\&quot;NeutralDown\&quot;, Color.orange);\nMidLine.definecolor(\&quot;HullMA_up\&quot;, color.blue);\n\nMidLine.definecolor(\&quot;HullMA_down\&quot;, color.orange);\n\nMidLine.AssignValueColor(if buysignal and HMA_Up then MidLine.color(\&quot;Buy\&quot;) else if buysignal and !HMA_Up then MidLine.color(\&quot;HullMA_down\&quot;) else if sellsignal and HMA_Down  then MidLine.color(\&quot;Sell\&quot;) else  if sellsignal and !HMA_Down  then MidLine.color(\&quot;HullMA_up\&quot;) else  MidLine.color(\&quot;neutral\&quot;));;#\n# if Momentum_Up then  RSI.color(\&quot;neutralUp\&quot;) else  RSI.color(\&quot;neutraldown\&quot;));\n\n\n\n\n\n\n\n#MidLine.definecolor(\&quot;Buy_Signal_Bars\&quot;, color.dark_green);\n\n#MidLine.definecolor(\&quot;Sell_Signal_Bars\&quot;, color.red);\n\n#MidLine.definecolor(\&quot;NeutralUp\&quot;, color.plum);\n\n#MidLine.definecolor(\&quot;NeutralDown\&quot;, color.orange);\n\n#MidLine.AssignValueColor(if Colorbars1 ==1 then MidLine.color(\&quot;buy_signal_bars\&quot;) else if colorbars1 ==2 then #MidLine.color(\&quot;Sell_Signal_bars\&quot;) else if Momentum_Up then  MidLine.color(\&quot;neutralUp\&quot;) else MidLine.color(\&quot;neutralDown\&quot;) );\n\n\nplot UpSignal = if (buysignal and price crosses above MidLine) then LowerBand else Double.NaN;\nplot DownSignal = if (sellsignal and price crosses below MidLine) then UpperBand else Double.NaN;\ninput showBreakoutSignals =no;\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\n\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\n\n\n\nMidLine.setlineWeight(3);\n\n\n\n\n\n\n######$$$$&quot;,name=&quot;_cbc1e041_e9b4_4664_b964_97e197ec9dfd&quot;}){hidden=&lt;T,inputsMap:TreeMap7{^(&quot;price&quot;,&quot;CLOSE&quot;),^(&quot;priceSlm&quot;,&quot;CLOSE&quot;),^(&quot;showCloud&quot;,&lt;F)},inputsMap=@TreeMap7}),+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence{body=&quot;#start\n\n#hint: &lt;b&gt;Ask SLM Ribbon&lt;/b&gt;\\nThe Ask SLM Ribbon is a momentum indicator that uses a combination of three exponential moving averages. When the averages are in alinement, with the \&quot;superfast\&quot; moving average above the \&quot;fast\&quot; moving average and the fast moving average above the \&quot;slow\&quot; moving average, the momentum condition is positive. A \&quot;buy signal\&quot; is generated, with an up arrow, when above conditions are met and a \&quot;clear bar\&quot; occurs; with the low of that bar is above all of the moving averages. The positive momentum ends if the superfast moving average touches the fast moving average; then condition is considered neutral and an oppostive arrow will appear. Negative momentum and a \&quot;Sell signal\&quot; are the opposite of the bullish conditions. \\n \\n\\n--------------------------------------------------------------------------------\\nVolume bars can be colored to match the Chart by clicking on Style&gt;Settings&gt;Appearance&gt;Common, and color symbol as ticks  \\n\n\n\n# Variables:\n\n \n\n#input price = close;\ninput color_bars=no;\n\ninput useHeikinAshi =no;\n\ninput superfast_length = 4;\n\ninput fast_length = 7;\n\ninput slow_length =17;\n\n\ninput displace = 0;\ninput  pSupperFast = hlc3 ;\ninput pFast  = close ;\ninput pSlow  = close ;\ninput averageTypeSuperfast = AverageType.simple;\ninput averageTypefast = AverageType.simple;\ninput averageTypeSlow = AverageType.EXPONENTIAL;\n\n\n\ndef priceSupperFast ;\ndef priceFast ;\ndef priceSlow ;\n#Heikin Ashi\ndef haClose = (open+high+low+close)/4; #Heikin Ashi Close: The arithmetic mean of the current high, low, open, and close prices.\ndef haOpen = (haOpen[1] + haClose[1])/2  ;# Heikin Ashi Open: The midpoint of the previous candle.\ndef haHigh = max(high, max( haOpen, haClose) ) ;#Heikin Ashi High: The highest of the following: the actual high, the Heikin Ashi Open, or the Heikin Ashi Close.\ndef haLow = Min(low,min( haOpen, haClose));# Heikin Ashi Low: The lowest of the following: the actual low, the Heikin Ashi Open, or the Heikin Ashi Close.\n\nif useHeikinAshi \n\n then\n {\n  priceSupperFast = (haHigh +haLow+ haclose)/3;\n  priceFast = haclose;\n  priceSlow = haclose;\n }\nelse\n {\n  priceSupperFast = pSupperFast;\n  priceFast = pFast;\n  priceSlow = pSlow;\n }\n\n\n\ndef mov_avg_superFast = MovingAverage(averageTypeSuperfast, priceSupperFast[-displace], superfast_length);\ndef mov_avg_Fast = MovingAverage(averageTypefast, priceFast[-displace], fast_length);\ndef mov_avg_Slow = MovingAverage(averageTypeSlow, priceSlow[-displace], slow_length);\n\n#moving averages\nPlot Superfast = mov_avg_superFast;\nplot Fast = mov_avg_Fast;\nplot Slow = mov_avg_Slow;\nSuperfast.setdefaultColor(color.yellow);\nFast.setdefaultColor(color.cyan);\nSlow.setdefaultColor(color.blue);\n\n\n \n\ndef buy = mov_avg_superFast &gt; mov_avg_Fast and mov_avg_Fast &gt; mov_avg_Slow and hlc3 &gt; mov_avg_superFast;\n\ndef stopbuy = mov_avg_superFast &lt;= mov_avg_Fast or  hlc3 &lt; mov_avg_Fast;\n\ndef buynow = !buy[1] and buy;\n\ndef buysignal = CompoundValue(1, if buynow and !stopbuy then 1 else if buysignal[1]==1 and stopbuy then 0 else buysignal[1], 0);\n\n \n\nplot Buy_Signal = buysignal[1] == 0 and buysignal==1;\nBuy_signal.setpaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nBuy_signal.setdefaultColor(color.dark_GREEN);\nBuy_signal.hidetitle();\n#Alert(condition = buysignal[1] == 0 and buysignal == 1, text = \&quot;Buy Signal\&quot;, sound = Sound.Bell, \&quot;alert type\&quot; = Alert.BAR);\n\nplot Momentum_Down = buysignal[1] ==1 and buysignal==0;\nMomentum_down.setpaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);\nMomentum_Down.setdefaultColor(color.plum);\nMomentum_down.hidetitle();\n\n#Alert(condition = buysignal[1] == 1 and buysignal == 0, text = \&quot;Momentum_Down\&quot;, sound = Sound.Bell, \&quot;alert type\&quot; = Alert.BAR);\ndef sell = mov_avg_superFast &lt; mov_avg_Fast and mov_avg_Fast &lt; mov_avg_Slow and high &lt; mov_avg_superFast;\ndef stopsell = mov_avg_superFast &gt;= mov_avg_Fast or  close &gt; mov_avg_Fast;;\n\ndef sellnow = !sell[1] and sell;\n\ndef sellsignal = CompoundValue(1, if sellnow and !stopsell then 1 else if sellsignal[1]==1 and stopsell then 0 else sellsignal[1], 0);\n\n \n\nPlot Sell_Signal = sellsignal[1] ==0 and sellsignal;\n\nSell_signal.setpaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_down);\n\nsell_signal.setDefaultColor(color.red);\n\nSell_signal.hidetitle();\n\n#Alert(condition = sellsignal[1] == 0 and sellsignal == 1, text = \&quot;Sell Signal\&quot;, sound = Sound.Bell, \&quot;alert type\&quot; = Alert.BAR);\n\n \n\nPlot Momentum_Up = sellsignal[1]==1 and sellSignal==0;\n\nMomentum_up.setpaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_up);\n\nMomentum_up.setDefaultColor(color.plum);\n\nMomentum_up.hidetitle();\n\n#Alert(condition = sellsignal[1] == 1 and sellSignal == 0, text = \&quot;Momentum_Up\&quot;, sound = Sound.Bell, \&quot;alert type\&quot; = Alert.BAR);\ninput priceHma = close;\n input lengthHma = 20;\n\ndef HMA = MovingAverage(AverageType.HULL, priceHma, lengthHma);\ndef HMA_Up=  HMA &gt; HMA[1];\ndef HMA_Down =! HMA_UP;\n\nplot Colorbars = if buysignal and HMA_Up then 1 else if  buysignal and !HMA_Up then  2 else if sellsignal and HMA_Down then 3  else if sellsignal and !HMA_Down then  4 else if !buysignal or !sellsignal then 5 else 0;\n\ncolorbars.setHiding(1);\n\nColorbars.definecolor(\&quot;Buy\&quot;, color.dark_green);\n\nColorbars.definecolor(\&quot;Sell\&quot;, color.red);\n\nColorbars.definecolor(\&quot;Neutral\&quot;, color.plum);\nColorbars.definecolor(\&quot;HullMA_up\&quot;, color.blue);\n\nColorbars.definecolor(\&quot;HullMA_down\&quot;, color.orange);\n\n\n\n\n\n\n\n\n###############\n\n#def Colorbars1 = if buysignal == 1 then 1 else if sellsignal == 1 then 2 else if buysignal == 0 or sellsignal == 0 then 3 else 0;\n\n\n\n\n\n\n\n\n \n\nAssignPriceColor(if Colorbars ==1 and color_bars then colorbars.color(\&quot;Buy\&quot;) else if colorbars ==2 and color_bars  then colorbars.color(\&quot;HullMA_down\&quot;) else if colorbars ==3 and color_bars  then colorbars.color(\&quot;Sell\&quot;)  else if colorbars ==4 and color_bars  then colorbars.color(\&quot;HullMA_up\&quot;)else if color_bars  then colorbars.color(\&quot;neutral\&quot;) else  Color.CURRENT);\n\n#end&quot;,name=&quot;_65bf37d7_00d7_4e85_986f_9649d9ba6744&quot;}){hidden=&lt;T,inputsMap:TreeMap8{^(&quot;pFast&quot;,&quot;CLOSE&quot;),^(&quot;priceHma&quot;,&quot;CLOSE&quot;),^(&quot;pSlow&quot;,&quot;CLOSE&quot;),^(&quot;pSupperFast&quot;,&quot;(H+L+C)/3&quot;),!get:Integer0(&quot;superfast_length&quot;),!get:Integer1(&quot;slow_length&quot;)},inputsMap=@TreeMap8}),+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence{body=&quot;# @new\n# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2011-2021\n#\n\ninput numDevDn = -2.0;\ninput numDevUp = 2.0;\ninput timeFrame = {default DAY, WEEK, MONTH};\n\ndef cap = getAggregationPeriod();\ndef errorInAggregation =\n    timeFrame == timeFrame.DAY and cap &gt;= AggregationPeriod.WEEK or\n    timeFrame == timeFrame.WEEK and cap &gt;= AggregationPeriod.MONTH;\nassert(!errorInAggregation, \&quot;timeFrame should be not less than current chart aggregation period\&quot;);\n\ndef yyyyMmDd = getYyyyMmDd();\ndef periodIndx;\nswitch (timeFrame) {\ncase DAY:\n    periodIndx = yyyyMmDd;\ncase WEEK:\n    periodIndx = Floor((daysFromDate(first(yyyyMmDd)) + getDayOfWeek(first(yyyyMmDd))) / 7);\ncase MONTH:\n    periodIndx = roundDown(yyyyMmDd / 100, 0);\n}\ndef isPeriodRolled = compoundValue(1, periodIndx != periodIndx[1], yes);\n\ndef volumeSum;\ndef volumeVwapSum;\ndef volumeVwap2Sum;\n\nif (isPeriodRolled) {\n    volumeSum = volume;\n    volumeVwapSum = volume * vwap;\n    volumeVwap2Sum = volume * Sqr(vwap);\n} else {\n    volumeSum = compoundValue(1, volumeSum[1] + volume, volume);\n    volumeVwapSum = compoundValue(1, volumeVwapSum[1] + volume * vwap, volume * vwap);\n    volumeVwap2Sum = compoundValue(1, volumeVwap2Sum[1] + volume * Sqr(vwap), volume * Sqr(vwap));\n}\ndef price = volumeVwapSum / volumeSum;\ndef deviation = Sqrt(Max(volumeVwap2Sum / volumeSum - Sqr(price), 0));\n\nplot VWAP = price;\nplot UpperBand = price + numDevUp * deviation;\nplot LowerBand = price + numDevDn * deviation;\n\nVWAP.setDefaultColor(getColor(0));\nUpperBand.setDefaultColor(getColor(2));\nLowerBand.setDefaultColor(getColor(4));&quot;,name=&quot;VWAP&quot;}){hidden=&lt;T,inputsMap:TreeMap9{^(&quot;timeFrame&quot;,&quot;WEEK&quot;)},inputsMap=@TreeMap9,plots{0:{color=@CustomColor2,lineStyle=6},1:{color=@CustomColor7,lineStyle=6},2:{color=@CustomColor7,lineStyle=6}}}),+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence{body=&quot;### xiuyu vwap cross signal with abnormal volume\n\n#declare hide_on_daily;\n\n####\n#MTF\ndef tFrame = GetAggregationPeriod();\ninput timeFrame = {default DAY, WEEK, MONTH};\ninput aggregationPeriod = AggregationPeriod.HOUR;\ninput useAutoAggegate = yes;\n\n\n\n# Variables:\n#def  =if (useAutoAggegate) then open(period = aggregationPeriod1) else open;\n\ndef AutoAGG = if tFrame &lt;  AggregationPeriod.DAY then AggregationPeriod.DAY\n             else if  tFrame &lt; AggregationPeriod.WEEK then AggregationPeriod.WEEK\n                  else AggregationPeriod.MONTH;\ndef AGG = if (!useAutoAggegate) then aggregationPeriod else AutoAGG;\n\ndef testTimeFrames = if tFrame &lt; AGG  then yes else no;\n\n#AddLabel(useAutoAggegate, if testTimeFrames  then \&quot;Time Frames Are Correct\&quot; else \&quot;Time Frames Are \n\ninput length = 10; #average volume lenght\ninput volMinimum = 50000;\ninput showPriceColor = yes;\ninput factor = 1.50; #show what factors to avgvolume \ninput nDevUp = 2.0;\ninput nDevDn = -2.0;\n\ndef avgvolume = Average(volume, length) * factor;\n\n\n#plot vwap = reference VWAP( AGG);\n#######\n\n\ndef cap = GetAggregationPeriod();\ndef errorInAggregation =\n    timeFrame == timeFrame.DAY and cap &gt;= AggregationPeriod.WEEK or\n    timeFrame == timeFrame.WEEK and cap &gt;= AggregationPeriod.MONTH;\nAssert(!errorInAggregation, \&quot;timeFrame should be not less than current chart aggregation period\&quot;);\n\ndef yyyyMmDd = GetYYYYMMDD();\ndef periodIndx;\nswitch (timeFrame) {\ncase DAY:\n    periodIndx = yyyyMmDd;\ncase WEEK:\n    periodIndx = Floor((DaysFromDate(First(yyyyMmDd)) + GetDayOfWeek(First(yyyyMmDd))) / 7);\ncase MONTH:\n    periodIndx = RoundDown(yyyyMmDd / 100, 0);\n}\ndef isPeriodRolled = CompoundValue(1, periodIndx != periodIndx[1], yes);\n\ndef volumeSum;\ndef volumeVwapSum;\ndef volumeVwap2Sum;\n\nif (isPeriodRolled) {\n    volumeSum = volume;\n    volumeVwapSum = volume * vwap;\n    volumeVwap2Sum = volume * Sqr(vwap);\n} else {\n    volumeSum = CompoundValue(1, volumeSum[1] + volume, volume);\n    volumeVwapSum = CompoundValue(1, volumeVwapSum[1] + volume * vwap, volume * vwap);\n    volumeVwap2Sum = CompoundValue(1, volumeVwap2Sum[1] + volume * Sqr(vwap), volume * Sqr(vwap));\n}\ndef price = volumeVwapSum / volumeSum;\ndef deviation = Sqrt(Max(volumeVwap2Sum / volumeSum - Sqr(price), 0));\n\nplot VWAP = price;\nplot UpperBand = price + nDevUp * deviation;\nplot LowerBand = price + nDevDn * deviation;\nplot UpperBand2 = price + (1+nDevUp) * deviation;\nplot LowerBand2 = price +(-1+ nDevDn) * deviation;\ndef sdvP1=  price + deviation;\ndef sdvN1=  price - deviation;\n#####\n\n\nplot SD1up =close[1] crosses above sdvp1 and ( open&lt; close) and low&gt;sdvp1;\nSD1up.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nSD1up.SetDefaultColor(Color.graY);\nSD1up.SetLineWeight(2);\nAssignPriceColor(if SD1up and showPriceColor and open&lt; close then Color.violet else Color.CURRENT);\n\nAddLabel(yes, \&quot;VWAP= \&quot; + astext(VWAP), if VWAP&lt; close then Color.LIGHT_GREEN else if VWAP&gt; close then color.LIGHT_red else Color.GRAY);\n#AddLabel(yes, \&quot;VWAP= \&quot; + astext(VWAP), Color.White);\ndef vwDif= close- VWAP;\n#AddLabel(yes, \&quot; \&quot;+astext(vwDif), if vwDif&gt; 0 then Color.LIGHT_GREEN else if vwDif&lt; 0 then color.LIGHT_red else Color.GRAY);\nAddLabel(yes and vwDif&gt;0, \&quot; +\&quot;+astext(vwDif),  Color.LIGHT_GREEN );\nAddLabel(yes and vwDif&lt;=0, \&quot; \&quot;+astext(vwDif),  if vwDif&lt; 0 then color.LIGHT_red else Color.LIGHT_GRAY);\n\ninput vwapLableAll =yes;\nAddLabel(vwapLableAll, \&quot;VWAP +1= \&quot; + astext(sdvP1), if sdvP1&lt; close then Color.LIGHT_GREEN else if sdvP1&gt; close then color.LIGHT_red else Color.GRAY);\n\nAddLabel(vwapLableAll, \&quot;VWAP +2= \&quot; + astext(UpperBand), if UpperBand&lt; close then Color.LIGHT_GREEN else if UpperBand&gt; close then color.LIGHT_red else Color.GRAY);\nAddLabel(vwapLableAll, \&quot;VWAP +3= \&quot; + astext(UpperBand2), if UpperBand2&lt; close then Color.LIGHT_GREEN else if UpperBand2&gt; close then color.LIGHT_red else Color.GRAY);\n\nAddLabel(vwapLableAll, \&quot;VWAP -1= \&quot; + astext(sdvN1), if sdvN1&lt; close then Color.LIGHT_GREEN else if sdvN1&gt; close then color.LIGHT_red else Color.GRAY);\nAddLabel(vwapLableAll, \&quot;VWAP -2= \&quot; + astext(LowerBand), if LowerBand&lt; close then Color.LIGHT_GREEN else if LowerBand&gt; close then color.LIGHT_red else Color.GRAY);\nAddLabel(vwapLableAll, \&quot;VWAP -3= \&quot; + astext(LowerBand2), if LowerBand2&lt; close then Color.LIGHT_GREEN else if LowerBand2&gt; close then color.LIGHT_red else Color.GRAY);\n\n#AddLabel(vwapLableAll, \&quot;VWAP R= \&quot; + astext(upperBand/sdvN1 -1)+\&quot;  \&quot;+astext(upperBand/lowerBand -1)+\&quot;  \&quot;+astext(upperBand2/lowerBand2 -1), if LowerBand&lt; close then Color.LIGHT_GREEN else if LowerBand&gt; close then color.LIGHT_red else Color.GRAY);\n\nAddLabel(vwapLableAll, \&quot;VWAP R= \&quot; + astext(upperBand/sdvN1 -1)+\&quot;  \&quot;+astext(upperBand/lowerBand -1)+\&quot;  \&quot;+astext(upperBand2/lowerBand2 -1), if LowerBand&lt; close then Color.LIGHT_GREEN else if LowerBand&gt; close then color.LIGHT_red else Color.GRAY);\n\n\n\ndef volCheck = volume &gt;= avgvolume &amp;&amp; volume &gt;= volMinimum &amp;&amp; volume &gt;= volume[1];\ndef isCross =  close crosses VWAP;\ndef abnormalSignal = isCross and volCheck;\n\n\nVWAP.SetDefaultColor(color.white);#(GetColor(0));\nplot signalup = if abnormalSignal and close &gt; VWAP then low else Double.NaN;\nsignalup.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nsignalup.SetDefaultColor(Color.CYAN);\nsignalup.SetLineWeight(2);\n\nplot signaldown =  if abnormalSignal and close &lt; VWAP then high else Double.NaN;\nsignaldown.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);\nsignaldown.SetDefaultColor(Color.CYAN);\nsignaldown.SetLineWeight(2);\n\nAssignPriceColor(if abnormalSignal and showPriceColor then Color.CYAN else Color.CURRENT);\n\n\n#####\nvwap.SetStyle(Curve.POINTS);\nUpperBand.SetDefaultColor(GetColor(0));\nLowerBand.SetDefaultColor(GetColor(0));\n\nUpperBand.SetStyle(Curve.POINTS);\nLowerBand.SetStyle(Curve.POINTS);\n\nUpperBand2.SetDefaultColor(Color.YELLOW);\nLowerBand2.SetDefaultColor(Color.YELLOW);\n\nUpperBand2.SetStyle(Curve.SHORT_DASH);\nLowerBand2.SetStyle(Curve.SHORT_DASH);\n#input AutoHide=yes;\n#def hideLower = if AutoHide then close &gt;vwap  else 0;;\n#def hideUpper = if AutoHide then  close &lt;vwap  else 0;#- deviation\n#addLabel(yes, \&quot;hide U\&quot;+hideUpper +\&quot; L\&quot;+hideLower);\n#UpperBand.setHiding(hideUpper);\n#LowerBand.setHiding(hideLower);\n#UpperBand.Hide();\n#LowerBand.Hide();\n#UpperBand2.Hide();\n#LowerBand2.Hide();&quot;,name=&quot;_740dc265_6e6e_38a5_ba0e_c0a058a5d552&quot;}){hidden=&lt;T,inputsMap:TreeMap10{^(&quot;vwapLableAll&quot;,&lt;F)},inputsMap=@TreeMap10}),+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence{body=&quot;#start\n\n#hint: &lt;b&gt;Ask SLM Ribbon&lt;/b&gt;\\nThe Ask SLM Ribbon is a momentum indicator that uses a combination of three exponential moving averages. When the averages are in alinement, with the \&quot;superfast\&quot; moving average above the \&quot;fast\&quot; moving average and the fast moving average above the \&quot;slow\&quot; moving average, the momentum condition is positive. A \&quot;buy signal\&quot; is generated, with an up arrow, when above conditions are met and a \&quot;clear bar\&quot; occurs; with the low of that bar is above all of the moving averages. The positive momentum ends if the superfast moving average touches the fast moving average; then condition is considered neutral and an oppostive arrow will appear. Negative momentum and a \&quot;Sell signal\&quot; are the opposite of the bullish conditions. \\n \\n\\n--------------------------------------------------------------------------------\\nVolume bars can be colored to match the Chart by clicking on Style&gt;Settings&gt;Appearance&gt;Common, and color symbol as ticks  \\n\n\n\n# Variables:\n\n \n\n#input price = close;\ninput color_bars=no;\n\ninput useHeikinAshi =no;\n\ninput superfast_length =10;\n\ninput fast_length = 21;\n\ninput slow_length =40;\n\n\ninput displace = 0;\ninput price = close;\ninput pSupperFast = close ;\ninput pFast  = close ;\ninput pSlow  = close ;\ninput averageTypeSuperfast = AverageType.simple;\ninput averageTypefast = AverageType.simple;\ninput averageTypeSlow = AverageType.simPLE;\n\n\n\n\ndef priceSupperFast ;\ndef priceFast ;\ndef priceSlow ;\n#Heikin Ashi\ndef haClose = (open+high+low+close)/4; #Heikin Ashi Close: The arithmetic mean of the current high, low, open, and close prices.\ndef haOpen = (haOpen[1] + haClose[1])/2  ;# Heikin Ashi Open: The midpoint of the previous candle.\ndef haHigh = max(high, max( haOpen, haClose) ) ;#Heikin Ashi High: The highest of the following: the actual high, the Heikin Ashi Open, or the Heikin Ashi Close.\ndef haLow = Min(low,min( haOpen, haClose));# Heikin Ashi Low: The lowest of the following: the actual low, the Heikin Ashi Open, or the Heikin Ashi Close.\n\nif useHeikinAshi \n\n then\n {\n  priceSupperFast = (haHigh +haLow+ haclose)/3;\n  priceFast = haclose;\n  priceSlow = haclose;\n }\nelse\n {\n  priceSupperFast = pSupperFast;\n  priceFast = pFast;\n  priceSlow = pSlow;\n }\n\n\n\ndef mov_avg_superFast = MovingAverage(averageTypeSuperfast, priceSupperFast[-displace], superfast_length);\ndef mov_avg_Fast = MovingAverage(averageTypefast, priceFast[-displace], fast_length);\ndef mov_avg_Slow = MovingAverage(averageTypeSlow, priceSlow[-displace], slow_length);\n\n#moving averages\nPlot SuperfastAvg = mov_avg_superFast;\nplot FastAvg = mov_avg_Fast;\nplot SlowAvg = mov_avg_Slow;\nSuperfastAvg.setdefaultColor(color.yellow);\nFastAvg.setdefaultColor(color.cyan);\nSlowAvg.setdefaultColor(color.blue);\n\n################ppm1\ninput hide_debug =no;\nplot d =( priceSupperFast-priceSupperFast[1]);\nplot d_percnt = 100*( priceSupperFast-priceSupperFast[1])/priceSupperFast[1];\nd.setHiding(hide_debug);\nd_percnt.setHiding(hide_debug);\n\ninput lookback = 1;\n\ninput ppmiSmooth =3;\ninput averageTypePpmiSmooth = AverageType.simple;\ninput d1_length = 10;\ninput d2_length =21;\ninput th =0.25;\ninput show_ppmi = no;\n\n#input showMovingAvgLable =yes;\n\n#moving averages\n\ndef   ppm1_ =100*( SuperfastAvg-SuperfastAvg[lookback])/( SuperfastAvg); \ndef   ppm2_ =100*(FastAvg - FastAvg[lookback])/( FastAvg); \ndef   ppm3_ =100*( SlowAvg-SlowAvg[lookback])/(SlowAvg); \n#Plot ppm1 =MovingAverage(AverageType.EXPONENTIAL,ppm[-displace], signalPeriod);\n\nplot ppm1= MovingAverage(averageTypePpmiSmooth,ppm1_,ppmiSmooth);\nplot ppm2=  MovingAverage(averageTypePpmiSmooth,ppm2_,ppmiSmooth);\nplot ppm3=  MovingAverage(averageTypePpmiSmooth,ppm3_,ppmiSmooth);\n\n\n\nplot ppm_d1  = MovingAverage(averageTypefast, ppm1[-displace], d1_length);\nplot ppm_d2 = MovingAverage(averageTypefast, ppm1[-displace], d2_length);\n\n ppm1.sethiding(!show_ppmi);\n ppm2.sethiding(!show_ppmi);\n ppm3.sethiding(!show_ppmi);\n ppm_d1.sethiding(!show_ppmi);\n ppm_d2.sethiding(!show_ppmi);\n\n#################\n\n\n\n\n\ndef buy;\n\nif getAggregationPeriod()&gt;aggregationPeriod.DAY\n{\n#buy = mov_avg_superFast &gt; mov_avg_Fast and mov_avg_Fast &gt; mov_avg_Slow and price &gt; mov_avg_superFast and ppm1&gt; th and ppm2&gt; th;# and ppm3&gt; th ;\n#buy =  price &gt; mov_avg_superFast and( ppm1&gt; th*3 or   ppm1&gt; th  and( ppm2&gt;0 ));# mov_avg_Fast &gt; mov_avg_Slow and;#mov_avg_superFast &gt; mov_avg_Fast and or ppm3&gt; 0) ;\nbuy = mov_avg_superFast &gt; mov_avg_Fast and mov_avg_Fast  and price &gt; mov_avg_superFast and ppm1&gt; th and ppm2&gt; th and( ppm2&gt;0 );# and ppm3&gt; th ;\n\n}\nelse\n\n{\nbuy = mov_avg_superFast &gt; mov_avg_Fast and mov_avg_superFast &gt; mov_avg_Slow and price &gt; mov_avg_superFast and ppm1&gt; th and( ppm2&gt;0 );#or ppm3&gt; 0) ;\n}\n\n \n\n\n#def stopbuy = mov_avg_superFast &lt;= mov_avg_Fast or  price &lt; mov_avg_Fast ;#or ppm1&lt;=th or ppm2&lt;=th or ppm3&lt;=th;\n\ndef stopbuy =   price &lt; mov_avg_superFast ;#mov_avg_Fast &lt;= mov_avg_Slow or #or ppm1&lt;=th or ppm2&lt;=th or ppm3&lt;=th;\n\ndef buynow = !buy[1] and buy;\n\ndef buysignal = CompoundValue(1, if buynow and !stopbuy then 1 else if buysignal[1]==1 and stopbuy then 0 else buysignal[1], 0);\n\n \n\nplot Buy_Signal = buysignal[1] == 0 and buysignal==1;\nBuy_Signal.setpaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nBuy_Signal.setdefaultColor(color.dark_GREEN);\nBuy_Signal.hidetitle();\n\ndef buy_1_2aL = price &gt; mov_avg_superFast  and (mov_avg_superFast&gt; mov_avg_Fast or  mov_avg_superFast &gt; mov_avg_slow) and ppm1&gt; th;# and( ppm2&gt; 0 or ppm3&gt;0) ;\n\ndef stopbuy_1_2aL =price &lt; mov_avg_superFast  or (mov_avg_superFast&lt;= mov_avg_Fast and  mov_avg_superFast &lt;= mov_avg_slow) ;#or ppm1&lt;=th or ppm2&lt;=th or ppm3&lt;=th;\n\ndef buynow_1_2aL = !buy_1_2aL[1] and buy_1_2aL;\n\ndef buysignal_1_2aL = CompoundValue(1, if buynow_1_2aL and !stopbuy then 1 else if buysignal_1_2aL[1]==1 and stopbuy then 0 else buysignal_1_2aL[1], 0);\n\n \n\nplot Buy_Signal_M1_2aL = buysignal_1_2aL[1] == 0 and buysignal_1_2aL==1;\nBuy_Signal_M1_2aL.setpaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nBuy_Signal_M1_2aL.setdefaultColor(color.white);\nBuy_Signal_M1_2aL.hidetitle();\n\n\n\n\n#Alert(condition = buysignal[1] == 0 and buysignal == 1, text = \&quot;Buy Signal\&quot;, sound = Sound.Bell, \&quot;alert type\&quot; = Alert.BAR);\n\nplot Momentum_Down = buysignal[1] ==1 and buysignal==0;\nMomentum_down.setpaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);\nMomentum_Down.setdefaultColor(color.plum);\nMomentum_down.hidetitle();\n\n#Alert(condition = buysignal[1] == 1 and buysignal == 0, text = \&quot;Momentum_Down\&quot;, sound = Sound.Bell, \&quot;alert type\&quot; = Alert.BAR);\ndef sell_condition1 =  mov_avg_superFast &lt; mov_avg_Fast and mov_avg_superFast &lt; mov_avg_Slow and price &lt; mov_avg_superFast;\ndef sell_condition2 =  mov_avg_superFast &lt; mov_avg_Fast and price &lt; mov_avg_superFast and price &lt; mov_avg_Fast and price &lt; mov_avg_Slow and ppm1&lt;= -1.5 and ppm2&lt;= -1.0 ;\ndef sell_condition3 =price &lt; mov_avg_superFast and ppm1&lt;=0;# and ppm2&lt;= -1.0 ;\ndef sell_condition4 =price &lt; mov_avg_superFast ;#and ppm1&lt;=0;# and ppm2&lt;= -1.0 ;\n\ndef sell =  sell_condition2 or sell_condition4;\ndef stopsell = price &gt; mov_avg_superFast;#mov_avg_superFast &gt;= mov_avg_Fast or  ;;\n\ndef sellnow = !sell[1] and sell;\n\ndef sellsignal = CompoundValue(1, if sellnow and !stopsell then 1 else if sellsignal[1]==1 and stopsell then 0 else sellsignal[1], 0);\n\n \n\nPlot Sell_Signal = sellsignal[1] ==0 and sellsignal;\n\nSell_signal.setpaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_down);\n\nsell_signal.setDefaultColor(color.red);\n\nSell_signal.hidetitle();\n\n#Alert(condition = sellsignal[1] == 0 and sellsignal == 1, text = \&quot;Sell Signal\&quot;, sound = Sound.Bell, \&quot;alert type\&quot; = Alert.BAR);\n\n \n\nPlot Momentum_Up = sellsignal[1]==1 and sellSignal==0;\n\nMomentum_up.setpaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_up);\n\nMomentum_up.setDefaultColor(color.plum);\n\nMomentum_up.hidetitle();\n\n#Alert(condition = sellsignal[1] == 1 and sellSignal == 0, text = \&quot;Momentum_Up\&quot;, sound = Sound.Bell, \&quot;alert type\&quot; = Alert.BAR);\ninput priceHma = close;\n input lengthHma = 20;\n\ndef HMA = MovingAverage(AverageType.HULL, priceHma, lengthHma);\ndef HMA_Up=  HMA &gt; HMA[1];\ndef HMA_Down =! HMA_UP;\n\nplot Colorbars = if buysignal and HMA_Up then 1 else if  buysignal and !HMA_Up then  2 else if sellsignal and HMA_Down then 3  else if sellsignal and !HMA_Down then  4 else if !buysignal or !sellsignal then 5 else 0;\n\ncolorbars.setHiding(1);\n\nColorbars.definecolor(\&quot;Buy\&quot;, color.dark_green);\n\nColorbars.definecolor(\&quot;Sell\&quot;, color.red);\n\nColorbars.definecolor(\&quot;Neutral\&quot;, color.plum);\nColorbars.definecolor(\&quot;HullMA_up\&quot;, color.blue);\n\nColorbars.definecolor(\&quot;HullMA_down\&quot;, color.orange);\n###############\n\n#def Colorbars1 = if buysignal == 1 then 1 else if sellsignal == 1 then 2 else if buysignal == 0 or sellsignal == 0 then 3 else 0;\nAssignPriceColor(if Colorbars ==1 and color_bars then colorbars.color(\&quot;Buy\&quot;) else if colorbars ==2 and color_bars  then colorbars.color(\&quot;HullMA_down\&quot;) else if colorbars ==3 and color_bars  then colorbars.color(\&quot;Sell\&quot;)  else if colorbars ==4 and color_bars  then colorbars.color(\&quot;HullMA_up\&quot;)else if color_bars  then colorbars.color(\&quot;neutral\&quot;) else  Color.CURRENT);\n\n#\n\n\n\n\n###############################\ninput showlable=yes;\n\n\n\ninput showPpmDivLable=yes;\n\nAddLabel(showPpmDivLable, \&quot; ppm1= \&quot;+  roundup(ppm1,3), if ppm1&gt; 0 then Color.LIGHT_GREEN else if ppm1&lt; 0 then color.light_red else Color.Light_GRAY);\nAddLabel(showPpmDivLable, \&quot; d1= \&quot;+  roundup(ppm_d1,3),  Color.green);\nAddLabel(showPpmDivLable, \&quot; d2= \&quot;+  roundup(ppm_d2,3),  Color.cyan);\n\n\n\n#plot ppm1_d1 = MovingAverage(averageTypefast, ppm1[-displace], fast_length);\n#plot ppm1_d2 = MovingAverage(averageTypefast, ppm1[-displace], slow_length);\n\nppm1.setdefaultColor(color.light_ORANGE);\nppm2.setdefaultColor(color.violet);\nppm3.setdefaultColor(color.yellow);\n\nppm2.Hide();\nppm3.Hide();\nppm_d1.setdefaultColor(color.green);\nppm_d2.setdefaultColor(color.cyan);\n\n\nAddLabel(showlable, \&quot;  \&quot;+ superfast_length+ \&quot;MAvg\&quot; ,ppm1.TakeValueColor ());\nAddLabel(showlable,  astext(SuperfastAvg), if ppm1&lt; close then Color.LIGHT_GREEN else if ppm1&gt; close then color.light_red else Color.Light_GRAY);\ndef maDif= close- SuperfastAvg;\n\nAddLabel(showlable and maDif&gt;0, \&quot; +\&quot;+astext(maDif),  Color.LIGHT_GREEN );\nAddLabel(showlable and maDif&lt;=0, \&quot; \&quot;+astext(maDif),  if maDif&lt; 0 then color.LIGHT_red else Color.LIGHT_GRAY);\n\nAddLabel(showlable, \&quot;  \&quot;+ fast_length+ \&quot;MAvg\&quot; ,ppm2.TakeValueColor ());\nAddLabel(showlable,  astext(FastAvg), if ppm2&lt; close then Color.LIGHT_GREEN else if ppm2&gt; close then color.light_red else Color.Light_GRAY);\n\n\nAddLabel(showlable, \&quot;  \&quot;+ slow_length+ \&quot;MAvg\&quot; ,ppm3.TakeValueColor ());\nAddLabel(showlable,  astext(SlowAvg), if ppm3&lt; close then Color.LIGHT_GREEN else if ppm3&gt; close then color.light_red else Color.Light_GRAY);\n\n#AddLabel(showlable, \&quot;MA \&quot; + ppm_length + \&quot;=\&quot;+ astext(movAvg_ppm1), if movAvg_ppm1 &gt; close  then Color.RED else if movAvg_ppm1 &lt; close then  Color.GREEN else Color.GRAY);\n\nAddLabel(yes, \&quot; ppm1= \&quot;+  roundup(ppm1,3), if ppm1&gt; 0 then Color.LIGHT_GREEN else if ppm1&lt; 0 then color.light_red else Color.Light_GRAY);\nAddLabel(yes, \&quot; ppm2= \&quot; +   roundup(ppm2,3), if ppm2&gt; 0 then Color.LIGHT_GREEN else if ppm2&lt; 0 then color.light_red else Color.Light_GRAY);\nAddLabel(yes, \&quot; ppm3= \&quot;+  roundup(ppm3,3), if ppm3&gt; 0 then Color.LIGHT_GREEN else if ppm3&lt; 0 then color.light_red else Color.Light_GRAY);\n\n\n##################################\n\n\n\n\n\n\n\n\n\n\n\n\n#end&quot;,name=&quot;_ae3dde1c_4c60_4560_9ada_eb01ee615711&quot;}){inputsMap:TreeMap11{^(&quot;hide_debug&quot;,@Boolean0),^(&quot;pFast&quot;,&quot;CLOSE&quot;),!get:Integer2(&quot;lookback&quot;),^(&quot;ppmiSmooth&quot;,@Integer2),^(&quot;price&quot;,&quot;CLOSE&quot;),^(&quot;priceHma&quot;,&quot;CLOSE&quot;),^(&quot;pSlow&quot;,&quot;CLOSE&quot;),^(&quot;pSupperFast&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap11,plots{0:{color=@CustomColor3},2:{color=@CustomColor4},3:{hiding=&lt;T},4:{hiding=&lt;T},6:{hiding=&lt;F},7:{hiding=&lt;F},10:{color=@CustomColor1,lineWeight=5},11:{color=@CustomColor7,lineWeight=5},13:{color=@CustomColor3,lineWeight=5}}}),+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence{body=&quot;#ShadowTrader_VA_Pivots\n#ShadowTrader (Copyright ShadowTrader), a division of ShadowTrader Technologies, LLC. 2017. All rights reserved. This ShadowTrader Script is for educational purposes only.  ShadowTrader is not responsible for the use,  functionality or the performance of this Script. This work is copyrighted by ShadowTrader and all rights of this work under the license are reserved. Use of the ShadowTrader licensed code is for private use only and any other use are prohibited. By exercising any of the rights herein, you are accepting the terms of this license. You have a non-exclusive right to use or alter the ShadowTrader code. Use of this ShadowTrader Script other than as provided for in this license is prohibited. Any redistribution is strictly prohibited and will be enforced.\n\n# A big ShadowTrader thank you to Justin Lane Williams for initially creating this script for us.\n#08/31/11: Total redesign, added automated Pivot values, proximity plotting, new features.\n#09/12/11: Added “ShowLevel4” option due to recent volitility. Will plot S4 &amp; R4.\n#12/11/11: Added “AfterHours” option to turn off plot after hours.\n#12/21/11: Bug fixes due to TOS upgrades. Removed “AfterHours”, not workin correctly.\n#01/25/12: Enter daily inputs as 4 digits and script will interpret.\n# -added rounding to make the pivots appear as they do on the show.\n#01/26/12: Removed ability to truncate inputs due to it only being accurate 99% of time.\n#02/02/12: Small update to make sure \&quot;Auto Pivots\&quot; menu option functioned properly.\n#06/07/12: Added (6)VPOC inputs, should be manually entered/deleted, displays when applicable.\n#06/25/12: Removed some code and fixed a few bugs.\n#07/09/12: Fixed one small but important bug.\n#07/13/12: Added value bubbles, removed proximity plot function.\n#08/13/12: Removed a lot of superfluous code plus a few upgrades.\n#08/15/12: Fixed a bug that was giving false numbers.\n#08/30/12: Fixed a bug that wasn\'t plotting the NQ profile.\n#09/02/12: Reordered inputs and removed \&quot;LabelESonly\&quot; input.\n#12/28/12: Made the plot hide on daily charts and updated code to current standards.\n#01/04/13: Fixed a rare bug that hides labels if using tick charts.\n#01/28/13: Added ability to hide each individual level.\n#02/09/21 :mahiby customized for  \n# Pivot values will be off the day following market holidays and possibly the day after rollover.\n# On these days make \&quot;AutoPivots=No\&quot; and manually draw pivots. Change back to \&quot;AutoPivots=Yes\&quot; the day after.\n\ninput PivotTimeFrame =  { \&quot;15 MIN\&quot; ,  \&quot;30 MIN\&quot;,  \&quot;1 HOUR\&quot;, \&quot;2 HOURs\&quot;,  \&quot;4 HOURs\&quot;, default \&quot;DAY\&quot;,  \&quot;2 DAYS\&quot;, \&quot;3 DAYS\&quot;, \&quot;4 DAYS\&quot;, WEEK, MONTH, \&quot;OPT EXP\&quot;, QUARTER, YEAR}; #AggregationPeriod.DAY;#\ninput ProfileTimeFrame = { CHART,  FIVE_MINUTE, TEN_MINUTE, FIFTEEN_MINUTE, THIRTY_MINUTE,   HOUR, TWO_HOUR, FOUR_HOUR, default DAY, TWO_DAY, THREE_DAY, FOUR_DAY, WEEK, TWO_WEEK, THREE_WEEK, MONTH, \&quot;OPT EXP\&quot;, BAR};\ninput ShowCloud1  = yes;#Hint ShowCloud: Shows the value area as a cloud.\ninput ShowCloud2  = yes;#Hint ShowCloud: Shows the value area as a cloud.\ninput showOnlyToday = no;\ninput VaPrevious = yes;\ninput AutoPivots = yes;#Hint AutoPivots: Turns off pivot lines, value area stays on.\ninput showVAH = no;\ninput Labels = {default \&quot;Proximity\&quot;, \&quot;Off\&quot;, \&quot;All\&quot;, \&quot;ValueAreaOnly\&quot;};#Hint Labels: Labels at top of chart.\ninput ShowPivotPoint = yes;#Hint ShowPivotPoint: Hides Pivot Point plot.\ninput ShowLevel4 = yes;#Hint ShowLevel4: Will display S4 and R4 for days with large moves.\ninput ShowLevel5 = yes;#Hint ShowLevel4: Will display S4 and R4 for days with large moves.\ninput ShowLevel6 = no;#Hint ShowLevel4: Will display S4 and R4 for days with large moves.\ninput ShowLevel7 = no;#Hint ShowLevel4: Will display S4 and R4 for days with large moves.\ninput ShowLevel8 = no;#Hint ShowLevel4: Will display S4 and R4 for days with large moves.\ninput PivotBubbles  = yes;#yes;#Hint PivotBubbles: Shows bubbles on pivot plot lines.\ninput ValueBubbles  = yes;#yes;#Hint ValueBubbles: Shows bubbles on value plot lines.\ninput PlotStartTime = 0930;#Hint PlotStartTime: Move to earlier time to shift bubbles to the left.\n\n\ninput CloudOpenOnly = yes;#Hint CloudOpenOnly: Will only cloud open candles.\ninput HideAfterHoursLabel = no;#Hint HideAfterHoursLabel: Hides \&quot;NoShadowPlotAfterHours\&quot; label.\ninput VpocBubbles  = no;#yes;#Hint VpocBubbles: Shows bubbles on VPOC plot lines.\n\ninput ShowS1 = yes;#yes;#Hint ShowS1: Hide/Show S1.\ninput ShowS2 = yes;#Hint ShowS2: Hide/Show S2.\ninput ShowS3 = yes;#yes;#Hint ShowS3: Hide/Show S3.\ninput ShowR1 = yes;#yes;#Hint ShowR1: Hide/Show R1.\ninput ShowR2 = yes;#Hint ShowR2: Hide/Show R2.\ninput ShowR3 = yes;#yes;#Hint ShowR3: Hide/Show R3.\ninput ShowORB = no;#Hint ShowORB: Displays 2 small, dashed lines at the top/bottom of opening range.\ninput OrbTime = 30;#Hint OrbTime: Defines the time range in minutes for the ORB.\n\ninput triggerUpperVaLimitHigh = 5;\ninput triggerUpperVaLimitLow = -5;\ninput triggerLowerVaLimitHigh = 5;\ninput triggerLowerVaLimitLow = -5;\ninput showLines = no;\ninput opacity = 20;\n\ndef Na = Double.NaN;\ninput showDebugLable = yes;\n#declare hide_on_daily;\n\n\n###pps\n\ninput marketThreshold = 0.0025;\n\ninput applyPersonsLevelsFilter = yes;\n\nAssert(marketThreshold &gt;= 0, \&quot;\'market threshold\' must not be negative: \&quot; + marketThreshold);\n\ndef marketType = {default DISABLED, NEUTRAL, BEARISH, BULLISH};\n\ndef PP2 = high(period = PivotTimeFrame)[2] + low(period = PivotTimeFrame)[2] + close(period = PivotTimeFrame)[2];\n\n################\n\nmarketType = if !applyPersonsLevelsFilter then marketType.DISABLED else\nif PP2[-1] &gt; (PP2[-1] + PP2 + PP2[1]) / 3 + marketThreshold then marketType.BULLISH else\nif PP2[-1] &lt; (PP2[-1] + PP2 + PP2[1]) / 3 - marketThreshold then marketType.BEARISH else marketType.NEUTRAL;\n\n#Previous Day Functions\ndef Day   = GetDayOfWeek(GetYYYYMMDD());\ndef CloseTime = SecondsTillTime(1545) &gt;= 0;\ndef OpenTime = SecondsFromTime(0930) &gt;= 0;\ndef RegHrs = CloseTime and OpenTime;\n\n###\ndef PLow ;\ndef PHigh ;\ndef PrevLow ;\ndef PrevHigh;\ndef a = if  \&quot;PivotTimeFrame\&quot; == \&quot;DAY\&quot; then 1 else 0;\n\nif  a {\n    PLow  =  CompoundValue(1, If(Day == Day[1] and RegHrs and low &lt; PLow[1], low, If(SecondsFromTime(0930) &lt;= 0 and RegHrs, low, PLow[1])), low);\n    PHigh = CompoundValue(1, If(Day == Day[1] and RegHrs and high &gt; PHigh[1], high, If(SecondsFromTime(0930) &lt;= 0 and RegHrs, high, PHigh[1])), high);\n    PrevLow  = If(Day != Day[1], PLow[1], PrevLow[1]);\n    PrevHigh = If(Day != Day[1], PHigh[1], PrevHigh[1]);\n\n#AddLabel (yes,period);\n}\n\nelse {\n    PLow  = low(period = PivotTimeFrame);\n    PHigh = high(period = PivotTimeFrame);\n    PrevLow  = low(period = PivotTimeFrame)[1];\n    PrevHigh = high(period = PivotTimeFrame)[1];\n\n}\n##################\n#Prior Day Profile - counting formula by functionform\n\ndef period;\ndef yyyymmdd = GetYYYYMMDD();\ndef seconds = SecondsFromTime(0);\ndef month = GetYear() * 12 + GetMonth();\ndef day_number = DaysFromDate(First(yyyymmdd)) + GetDayOfWeek(First(yyyymmdd));\ndef dom = GetDayOfMonth(yyyymmdd);\ndef dow = GetDayOfWeek(yyyymmdd - dom + 1);\ndef expthismonth = (if dow &gt; 5 then 27 else 20) - dow;\ndef exp_opt = month + (dom &gt; expthismonth);\n\nswitch (ProfileTimeFrame) {\ncase CHART:\n    period = 0;\n#case MINUTE:\n #   period = Floor(seconds / 60 + day_number * 24 * 60);\ncase FIVE_MINUTE:\n    period = Floor(seconds / 60 + day_number * 24 * 60);\n   # timeFrame = \&quot;5 MINUTES\&quot;; #\&quot;2 DAYS\&quot;\ncase TEN_MINUTE:\n    period = Floor(seconds / 60 + day_number * 24 * 60);\n   # timeFrame = \&quot;5 MINUTES\&quot;; #\&quot;2 DAYS\&quot;\ncase FIFTEEN_MINUTE:\n    period = Floor(seconds / 60 + day_number * 24 * 60);\n   # timeFrame = \&quot;15 MINUTES\&quot;; #\&quot;2 DAYS\&quot;\ncase THIRTY_MINUTE:\n    period = Floor(seconds / (30 * 60) + day_number * 24 * 60);\n   # timeFrame = \&quot;30 MINUTES\&quot;; #\&quot;2 DAYS\&quot;\ncase HOUR:\n    period = Floor(seconds / 3600 + day_number * 24);\n   # timeFrame = \&quot;1 HOUR\&quot;; #\&quot;2 DAYS\&quot;\ncase TWO_HOUR:\n    period = Floor(seconds / (2 * 3600) + day_number * 24);\n   # timeFrame = \&quot;2 HOURS\&quot;; #\&quot;2 DAYS\&quot;\ncase FOUR_HOUR:\n    period = Floor(seconds / (4 * 3600) + day_number * 24);\n    #timeFrame = \&quot;4 HOURS\&quot;; #\&quot;2 DAYS\&quot;\ncase DAY:\n    period = CountTradingDays(Min(First(yyyymmdd), yyyymmdd), yyyymmdd) - 1;\n   # timeFrame =  \&quot;1 DAY\&quot;;\ncase TWO_DAY:\n    period =  Floor((CountTradingDays(Min(First(yyyymmdd), yyyymmdd), yyyymmdd) - 1) / 2);\n   # timeFrame =  \&quot;2 DAYS\&quot;;\ncase THREE_DAY:\n    period = Floor((CountTradingDays(Min(First(yyyymmdd), yyyymmdd), yyyymmdd) - 1) / 3);\n   # timeFrame =  \&quot;3 DAYS\&quot;;\ncase FOUR_DAY:\n    period =  Floor((CountTradingDays(Min(First(yyyymmdd), yyyymmdd), yyyymmdd) - 1) / 4);\n   # timeFrame =  \&quot;4 DAYS\&quot;;\ncase WEEK:\n    period = Floor(day_number / 7);\n   # timeFrame =  \&quot;1 WEEK\&quot;;\ncase TWO_WEEK:\n    period = Floor(day_number / 14);\n  #  timeFrame =  \&quot;2 WEEK\&quot;;\ncase THREE_WEEK:\n    period = Floor(day_number / 21);\n   # timeFrame =  \&quot;3 WEEK\&quot;;\ncase MONTH:\n    period = Floor(month - First(month));\n   # timeFrame =  \&quot;MONTH\&quot;;\ncase \&quot;OPT EXP\&quot;:\n    period = exp_opt - First(exp_opt);\n    #timeFrame =  \&quot;OPT EXP\&quot;;\ncase BAR:\n    period = BarNumber() - 1;\n}\n\n\ndef count;\nif VaPrevious\n{\n\n    count = CompoundValue(1, if !(period != period[1]) then count[1] + 1 else 1, 1);\n\n}\nelse\n{\n   # count = CompoundValue(1, if period != period[1] then (count[1] + period - period[1]) else count[1], 0);\n\n\n count = CompoundValue(1, if period != period[1] then count[1]   else  (count[1] + period - period[1]), 0);\n\n\n\n}\ndef cond = count &lt; count[1] + period - period[1];\n\ndef Pivot = hlc3(period = PivotTimeFrame)[1];\n\n\n\ndef priorperiod = if IsNaN(count[1]) then 1 else Max(count, count[1]);\nprofile vol1 = VolumeProfile(\&quot;startNewProfile\&quot; = period != period[1], \&quot;onExpansion\&quot; = no);\n\ndef vahprior = vol1.GetHighestValueArea();\ndef pocprior = vol1.GetPointOfControl();\ndef valprior = vol1.GetLowestValueArea();\n\ndef vahprev = GetValue(vahprior, priorperiod);\ndef pocprev = GetValue(pocprior, priorperiod);\ndef valprev = GetValue(valprior, priorperiod);\n\n#if showProfile then\ndef  showProfile = no;\ndef showPointOfControl = no;\n\n#vol.Show(if showProfile then GlobalColor(\&quot;Profile\&quot;) else Color.CURRENT, if showPointOfControl then GlobalColor(\&quot;Point Of Control\&quot;) else Color.CURRENT, if showValueArea then GlobalColor(\&quot;Value Area\&quot;) else Color.CURRENT, opacity);\n#profile vol = VolumeProfile(\&quot;startNewProfile\&quot; = cond, \&quot;onExpansion\&quot; = no);\n#vol.Show(if showProfile then GlobalColor(\&quot;Profile\&quot;) else Color.CURRENT, if showPointOfControl then GlobalColor(\&quot;Point Of Control\&quot;) else Color.CURRENT, if showValueArea then GlobalColor(\&quot;Value Area\&quot;) else Color.CURRENT, opacity);\ndef VAH = vahprev;\ndef VAL = valprev;\ndef POC = pocprev;\n\n\n############\n#Value Area Functions\ndef PPoint = If(Pivot &gt; 0, Pivot, Na);\ndef VArea  = Between(close, VAL, VAH);\ndef VAreaabove  = close &gt; VAH;\ndef VAreabelow  = close &lt; VAL;\n\n\n###%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n#def oneVol = Roundup(( VAHigh - VALow) / VAHigh, 2);\ndef oneVol = RoundUp(( VAH - VAL) / 100, 2);\ndef upperValimitH = VAH + oneVol * (triggerUpperVaLimitHigh);\ndef upperValimitL = VAH + oneVol * (triggerUpperVaLimitLow);\n\ndef lowerValimitH = VAL + oneVol * (triggerLowerVaLimitHigh);\ndef lowerValimitL = VAL + oneVol * (triggerLowerVaLimitLow);\n#triggerUpperVaLimitlow = if triggerUpperVaLimitlow&gt;=0 then triggerUpperVaLimitlow =-5 else triggerUpperVaLimitlow= triggerUpperVaLimitlow;\n\nplot VA_high_short = upperValimitH;\nplot VA_high_long = upperValimitL;\n\nplot VA_low_short = lowerValimitL;\nplot VA_low_long = lowerValimitH;\n\n#AddCloud(VA_high_long, VA_high_short, Color.LIGHT_RED, Color.LIGHT_RED);\n#AddCloud(VA_high_long, VA_high_short, Color.LIGHT_RED, Color.LIGHT_RED);\n\n#VA_low_short.SetPaintingStrategy(PaintingStrategy.DASHES);\n#VA_low_long.SetDefaultColor(Color.BLUE);\nVA_low_short.SetHiding(!showLines);\nVA_low_short.SetPaintingStrategy(PaintingStrategy.DASHES);\nVA_low_short.SetDefaultColor(Color.RED);\nVA_low_long.SetHiding(!showLines);\nVA_low_long.SetPaintingStrategy(PaintingStrategy.DASHES);\nVA_low_long.SetDefaultColor(Color.GREEN);\n\n\n\nVA_high_short.SetHiding(!showLines);\nVA_high_short.SetPaintingStrategy(PaintingStrategy.DASHES);\nVA_high_short.SetDefaultColor(Color.RED);\nVA_high_long.SetHiding(!showLines);\nVA_high_long.SetPaintingStrategy(PaintingStrategy.DASHES);\nVA_high_long.SetDefaultColor(Color.GREEN);\n\n\n####%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\n\n\n\n\n#Time Functions\ndef timeFrame = getAggregationPeriod();\ndef prdMax =highestAll(if(!IsNaN(close[-1]),period,Na))  ;\ndef cnt =if(period &gt; prdMax-2  ,1,Na);\ndef Chart2  =  if showOnlyToday then cnt else 1 ;;#if showOnlyToday then (IsNaN(period[-1] and (period == period[1])))  else 1 ;\n#def Chart2  =  if showOnlyToday then MarketOpen and NewDay else 1 ;\n\ndef CloseTime2 = SecondsTillTime(1600) &gt;= 0;\ndef OpenTime2 = SecondsFromTime(PlotStartTime) &gt;= 0;\ndef MarketOpen = OpenTime2 and CloseTime2;\ndef NewDay = IsNaN(close(period = “Day”)[-1]);\ndef Chart1;\nif  timeFrame&lt; aggregationPeriod.DAY\n{\nChart1  =  if showOnlyToday then MarketOpen and NewDay else 1 ;\n}\nelse\n{ \n Chart1  =  chart2 ;\n}\n#plot prd =period;\n\n#AddLabel (yes,Chart1);\n#Pivot Functions\ndef Res1  = (2 * PPoint) - PrevLow;\ndef Supp1 = (2 * PPoint) - PrevHigh;\ndef Res2  = PPoint + (Res1 - Supp1);\ndef Supp2 = PPoint - (Res1 - Supp1);\ndef Res3  = PrevHigh + 2 * (PPoint - PrevLow);\ndef Supp3 = PrevLow - 2 * (PrevHigh - PPoint);\ndef Res4  = PrevHigh + 3 * (PPoint - PrevLow);\ndef Supp4 = PrevLow - 3 * (PrevHigh - PPoint);\n\n\n#def Res1  = (2 * PPoint) - PrevLow;\n#def Supp1 = (2 * PPoint) - PrevHigh;\n#def Res2  = PPoint + (Res1 - Supp1); # def Res2  = PPoint + (Res1 - Supp1);\n#def Supp2 = PPoint - (Res1 - Supp1);\n#def Res3  = PPoint + 2 * (PrevHigh - PrevLow);# def Res3  = PrevHigh + 2 * (PPoint - PrevLow);\n#def Supp3 = PPoint - 2 * (PrevHigh - PrevLow);\n#def Res4  = PPoint + 3 * (PrevHigh - PrevLow);#\n#def Supp4 = PPoint - 3 * (PrevHigh - PrevLow);\n\ndef Res5  = PrevHigh + 4 * (PPoint - PrevLow);\ndef Supp5 = PrevLow - 4 * (PrevHigh - PPoint);\n\ndef Res6  = PrevHigh + 5 * (PPoint - PrevLow);\ndef Supp6 = PrevLow - 5 * (PrevHigh - PPoint);\n\ndef Res7  = PrevHigh + 6 * (PPoint - PrevLow);\ndef Supp7 = PrevLow - 6 * (PrevHigh - PPoint);\n\ndef Res8  = PrevHigh + 7 * (PPoint - PrevLow);\ndef Supp8 = PrevLow - 7 * (PrevHigh - PPoint);\n\n\n\n\n#Rounding Functions\ndef round = 0.01;\ndef RI   = RoundDown(Res1, 0) - ((Round(((RoundDown(Res1, 0) - Res1) / round), 0)) * round);\ndef SI   = RoundDown(Supp1, 0) - ((Round(((RoundDown(Supp1, 0) - Supp1) / round), 0)) * round);\ndef RII  = RoundDown(Res2, 0) - ((Round(((RoundDown(Res2, 0) - Res2) / round), 0)) * round);\ndef SII  = RoundDown(Supp2, 0) - ((Round(((RoundDown(Supp2, 0) - Supp2) / round), 0)) * round);\ndef RIII = RoundDown(Res3, 0) - ((Round(((RoundDown(Res3, 0) - Res3) / round), 0)) * round);\ndef SIII = RoundDown(Supp3, 0) - ((Round(((RoundDown(Supp3, 0) - Supp3) / round), 0)) * round);\ndef RIV  = RoundDown(Res4, 0) - ((Round(((RoundDown(Res4, 0) - Res4) / round), 0)) * round);\ndef SIV  = RoundDown(Supp4, 0) - ((Round(((RoundDown(Supp4, 0) - Supp4) / round), 0)) * round);\ndef PivP = RoundDown(PPoint, 0) - ((Round(((RoundDown(PPoint, 0) - PPoint) / round), 0)) * round);\n\ndef RV  = RoundDown(Res5, 0) - ((Round(((RoundDown(Res5, 0) - Res5) / round), 0)) * round);\ndef SV  = RoundDown(Supp5, 0) - ((Round(((RoundDown(Supp5, 0) - Supp5) / round), 0)) * round);\ndef RVI  = RoundDown(Res6, 0) - ((Round(((RoundDown(Res6, 0) - Res6) / round), 0)) * round);\ndef SVI  = RoundDown(Supp6, 0) - ((Round(((RoundDown(Supp6, 0) - Supp6) / round), 0)) * round);\ndef RVII  = RoundDown(Res7, 0) - ((Round(((RoundDown(Res7, 0) - Res7) / round), 0)) * round);\ndef SVII  = RoundDown(Supp7, 0) - ((Round(((RoundDown(Supp7, 0) - Supp7) / round), 0)) * round);\ndef RVIII  = RoundDown(Res8, 0) - ((Round(((RoundDown(Res8, 0) - Res8) / round), 0)) * round);\ndef SVIII  = RoundDown(Supp8, 0) - ((Round(((RoundDown(Supp8, 0) - Supp8) / round), 0)) * round);\n\n\n\n\n#Plots\nplot VH  = If(Chart1 and VAH &gt; 0, VAH, Na);\nplot PC  = If(Chart1 and POC &gt; 0, POC, Na);\nplot VL  = If(Chart1 and VAL &gt; 0, VAL, Na);\n\n##Auto Show \ndef R1_auto_show;\ndef R2_auto_show;\ndef R3_auto_show;\ndef R4_auto_show;\ndef R5_auto_show;\ndef R6_auto_show;\ndef R7_auto_show;\ndef R8_auto_show;\n\ndef S1_auto_show;\ndef S2_auto_show;\ndef S3_auto_show;\ndef S4_auto_show;\ndef S5_auto_show;\ndef S6_auto_show;\ndef S7_auto_show;\ndef S8_auto_show;\n\ndef cmax = highestAll( count);\ndef R1AutoShow = (close&gt;VH or (Between(RI,VL,VH) and close&gt;VL));\ndef S1AutoShow = (close&lt;VL or (Between(SI,VL,VH) and close&lt;VH));;\ndef R2AutoShow =  close &gt; VH and close &lt; RV;\ndef S2AutoShow = (close &lt; VL) and close &gt; SV  ;\ndef R3AutoShow = close &gt; (RI + ((RII - RI) / 2));;\ndef S3AutoShow = close &lt; (SI - ((SI - SII) / 2));\ndef R4AutoShow = close &gt; (RII + ((RIII - RII) / 2));\ndef S4AutoShow =  close &lt; (SII - ((SII - SIII) / 2));\ndef R5AutoShow =  close &gt; (RIII + ((RIV - RIII) / 2));\ndef S5AutoShow =  close &lt; (SIII - ((SIII - SIV) / 2));\ndef R6AutoShow =  close &gt; (RIV + ((RV - RIV) / 2));\ndef S6AutoShow =  close &lt; (SIV - ((SVI - SV) / 2));\ndef R7AutoShow =  close &gt; (RV + ((RVI - RV) / 2));\ndef S7AutoShow =  close &lt; (SV - ((SV - SVI) / 2));\ndef R8AutoShow =  close &gt; (RVI + ((RVII - RVI) / 2));\ndef S8AutoShow =  close &lt; (SVI - ((SVI - SVII) / 2));\n\nR1_auto_show = if ( (period==period[1]) and R1_auto_show[1] )  then R1_auto_show[1] else R1AutoShow;\nR2_auto_show = if ( (period==period[1]) and R2_auto_show[1] )  then R2_auto_show[1] else R2AutoShow;\nR3_auto_show = if ( (period==period[1]) and R3_auto_show[1] )  then R3_auto_show[1] else R3AutoShow;\nR4_auto_show = if ( (period==period[1]) and R4_auto_show[1] )  then R4_auto_show[1] else R4AutoShow;\nR5_auto_show = if ( (period==period[1]) and R5_auto_show[1] )  then R5_auto_show[1] else R5AutoShow;\nR6_auto_show = if ( (period==period[1]) and R6_auto_show[1] )  then R6_auto_show[1] else R6AutoShow;\nR7_auto_show = if ( (period==period[1]) and R7_auto_show[1] )  then R7_auto_show[1] else R7AutoShow;\nR8_auto_show = if ( (period==period[1]) and R8_auto_show[1] )  then R8_auto_show[1] else R8AutoShow;\n\n\nS1_auto_show = CompoundValue(2,if ( (period==period[1]) and S1_auto_show[1] )  then S1_auto_show[1] else S1AutoShow,S1AutoShow);\nS2_auto_show = if ( (period==period[1]) and S2_auto_show[1] )  then S2_auto_show[1] else S2AutoShow;\nS3_auto_show = if ( (period==period[1]) and S3_auto_show[1] )  then S3_auto_show[1] else S3AutoShow;\nS4_auto_show = if ( (period==period[1]) and S4_auto_show[1] )  then S4_auto_show[1] else S4AutoShow;\nS5_auto_show = if ( (period==period[1]) and S5_auto_show[1] )  then S5_auto_show[1] else S5AutoShow;\nS6_auto_show = if ( (period==period[1]) and S6_auto_show[1] )  then S6_auto_show[1] else S6AutoShow;\nS7_auto_show = if ( (period==period[1]) and S7_auto_show[1] )  then S7_auto_show[1] else S7AutoShow;\nS8_auto_show = if ( (period==period[1]) and S8_auto_show[1] )  then S8_auto_show[1] else S8AutoShow;\n\nplot gg=(S1AutoShow);#==1);\nplot ggg = ( s1_auto_show);# if ( isnan( s1_autoshow))then  1 else double.NaN ;\ngg.SetHiding(0);\nggg.SetHiding(0);\n\n#input showHigherLevel =yes;\n##\n\nplot R4  = If(Chart1 and AutoPivots and ShowLevel4 and  R4_auto_show  and RIV &gt; 0, RIV, Na);\nplot R3  = If(Chart1 and AutoPivots and ShowR3  and  R3_auto_show and RIII &gt; 0, RIII,Na);\nplot R2  = If(Chart1 and AutoPivots and ShowR2  and  R2_auto_show and RII &gt; 0, RII, Na);\nplot R1  = If(Chart1 and AutoPivots and ShowR1  and  R1_auto_show and RI &gt; 0, RI, Na);\nplot PP  = If(Chart1 and AutoPivots and ShowPivotPoint and PPoint &gt; 0, PivP, Na);\nplot S1  = If(Chart1 and AutoPivots and ShowS1 and  S1_auto_show  and SI &gt; 0, SI, Na);\nplot S2  = If(Chart1 and AutoPivots and ShowS2 and  S2_auto_show  and SII &gt; 0, SII, Na);\nplot S3  = If(Chart1 and AutoPivots and ShowS3 and  S3_auto_show and SIII &gt; 0, SIII, Na);\nplot S4  = If(Chart1 and AutoPivots and ShowLevel4 and  S4_auto_show and SIV &gt; 0, SIV, Na);\n\n#######\n\nplot R5  = If(Chart1 and AutoPivots and ShowLevel4 and  R5_auto_show  and RV &gt; 0, RV, Na);\nplot R6  = If(Chart1 and AutoPivots and ShowLevel4 and  R6_auto_show  and RVI &gt; 0, RVI, Na);\nplot R7  = If(Chart1 and AutoPivots and ShowLevel4 and  R7_auto_show  and RVII &gt; 0, RVII, Na);\nplot R8  = If(Chart1 and AutoPivots and ShowLevel4 and  R8_auto_show  and RVIII &gt; 0, RVIII, Na);\n\n\nplot S5  = If(Chart1 and AutoPivots and ShowLevel4 and  S5_auto_show  and SV &gt; 0, SV, Na);\nplot S6  = If(Chart1 and AutoPivots and ShowLevel4 and  S6_auto_show  and SVI &gt; 0, SVI, Na);\nplot S7  = If(Chart1 and AutoPivots and ShowLevel4 and  S7_auto_show  and SVII &gt; 0, SVII, Na);\nplot S8  = If(Chart1 and AutoPivots and ShowLevel4 and  S8_auto_show  and SVIII &gt; 0, SVIII, Na);\n####\n\n\ninput closeTimeC = 1615;\n#Value Area Cloud\n#def CloudClose = SecondsTillTime(1615) &gt; 0;\ndef CloudClose = SecondsTillTime(closeTimeC) &gt; 0;\ndef Cloud      = OpenTime and CloudClose;\ndef ChartCloud = if(timeFrame &gt; aggregationPeriod.DAY, Cloud and Chart1, chart1);\ndef CloudTest  = If(CloudOpenOnly, ChartCloud, Chart1);\ndef cloudhigh = If(CloudTest and ShowCloud1, VAH, Na);\ndef cloudlow  = If(CloudTest and ShowCloud1, VAL, Na);\nAddCloud(cloudhigh, cloudlow, Color.GRAY, Color.GRAY);\ndef AfterHours = OpenTime2 and CloudClose;\n\n#Chart Labels\ndef Futures = Between(close, close(\&quot;/es\&quot;) - 15, close(\&quot;/es\&quot;) + 15) or Between(close, close(\&quot;/nq\&quot;) - 15, close(\&quot;/nq\&quot;) + 15);\ndef Label = Chart1;# and Futures;\ndef ZeroTest = VAH &gt; 0 and VAL &gt; 0;\ndef PNotZero = PPoint &gt; 0;\ndef ChartLabels;\nswitch (Labels) {\ncase \&quot;Proximity\&quot;:\n    ChartLabels = 1;\ncase \&quot;Off\&quot;:\n    ChartLabels = 0;\ncase \&quot;All\&quot;:\n    ChartLabels = 2;\ncase \&quot;ValueAreaOnly\&quot;:\n    ChartLabels = 3;\n}\n\n\nAddLabel(ChartLabels == 1 and Label and AutoPivots and VArea and ZeroTest, “InsideValue”, Color.WHITE);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and VAreaabove and ZeroTest, “AboveValue”, Color.GREEN);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and VAreabelow and ZeroTest, “BelowValue”, Color.RED);\nAddLabel(ChartLabels == 1 and Label and !AutoPivots and VArea and ZeroTest, “InsideValueArea”, Color.WHITE);\nAddLabel(ChartLabels == 1 and Label and !AutoPivots and VAreaabove and ZeroTest, “AboveValueArea”, Color.GREEN);\nAddLabel(ChartLabels == 1 and Label and !AutoPivots and VAreabelow and ZeroTest, “BelowValueArea”, Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and Between(close, VL, (RI + ((RII - RI) / 2))), \&quot;VH=\&quot; + AsText(VH), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and Between(close, VL, VH), \&quot;POC=\&quot; + AsText(PC), Color.YELLOW);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and Between(close, (SI - ((SI - SII) / 2)), VH), \&quot;VL=\&quot; + AsText(VL), Color.GREEN);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and (close &gt; VH or (Between(RI, VL, VH) and close &gt; VL)), \&quot;R1=\&quot; + AsText(RI), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and close &gt; VH, \&quot;R2=\&quot; + AsText(RII), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and close &gt; (RI + ((RII - RI) / 2)), \&quot;R3=\&quot; + AsText(RIII), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and ShowLevel4 and close &gt; (RII + ((RIII - RII) / 2)), \&quot;R4=\&quot; + AsText(RIV), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and ShowLevel5 and close &gt; (RIII + ((RIV - RIII) / 2)), \&quot;R5=\&quot; + AsText(RV), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and ShowLevel6 and close &gt; (RII + ((RV - RIV) / 2)), \&quot;R6=\&quot; + AsText(RVI), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and ShowLevel7 and close &gt; (RII + ((RVI - RV) / 2)), \&quot;R7=\&quot; + AsText(RVII), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and ShowLevel8 and close &gt; (RII + ((RVII - RVI) / 2)), \&quot;R8=\&quot; + AsText(RVIII), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and ShowPivotPoint and close &gt; SI and close &lt; RI, \&quot;PP=\&quot; + AsText(PP), Color.WHITE);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and (close &lt; VL or (Between(SI, VL, VH) and close &lt; VH)), \&quot;S1=\&quot; + AsText(SI), Color.GREEN);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and close &lt; VL, \&quot;S2=\&quot; + AsText(SII), Color.GREEN);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and close &lt; (SI - ((SI - SII) / 2)), \&quot;S3=\&quot; + AsText(SIII), Color.GREEN);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and ShowLevel4 and close &lt; (SII - ((SII - SIII) / 2)), \&quot;S4=\&quot; + AsText(SIV), Color.GREEN);\n\nAddLabel(ChartLabels == 2 and Label and ZeroTest, \&quot;VH=\&quot; + AsText(VH), Color.RED);\nAddLabel(ChartLabels == 2 and Label and ZeroTest, \&quot;POC=\&quot; + AsText(PC), Color.YELLOW);\nAddLabel(ChartLabels == 2 and Label and ZeroTest, \&quot;VL=\&quot; + AsText(VL), Color.GREEN);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero, \&quot;R1=\&quot; + AsText(RI), Color.RED);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero, \&quot;R2=\&quot; + AsText(RII), Color.RED);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero, \&quot;R3=\&quot; + AsText(RIII), Color.RED);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero and ShowLevel4, \&quot;R4=\&quot; + AsText(RIV), Color.RED);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero and ShowPivotPoint, \&quot;PP=\&quot; + AsText(PP), Color.WHITE);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero, \&quot;S1=\&quot; + AsText(SI), Color.GREEN);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero, \&quot;S2=\&quot; + AsText(SII), Color.GREEN);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero, \&quot;S3=\&quot; + AsText(SIII), Color.GREEN);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero and ShowLevel4, \&quot;S4=\&quot; + AsText(SIV), Color.GREEN);\n\nAddLabel(ChartLabels == 3 and Label and VArea and ZeroTest, “InsideValueArea”, Color.WHITE);\nAddLabel(ChartLabels == 3 and Label and VAreaabove and ZeroTest, “AboveValueArea”, Color.GREEN);\nAddLabel(ChartLabels == 3 and Label and VAreabelow and ZeroTest, \&quot;BelowValueArea”, Color.RED);\nAddLabel(!AfterHours and !Chart1 and !HideAfterHoursLabel, \&quot;NoShadowPlotAfterHours\&quot;, Color.ORANGE);\n\n#Chart Bubbles\ninput BubbleLeftSide = yes;\ndef  leftLoc =  if BubbleLeftSide then 1 else -1;#\nAddChartBubble(IsNaN(VH[leftLoc]) and ValueBubbles, VH, VH, Color.RED, no);\nAddChartBubble(IsNaN(PC[leftLoc]) and ValueBubbles, PC, PC, Color.YELLOW, no);\nAddChartBubble(IsNaN(VL[leftLoc]) and ValueBubbles, VL, VL, Color.GREEN, no);\nAddChartBubble(IsNaN(S1[leftLoc]) and PivotBubbles and S1_auto_show, S1, “S1”, Color.WHITE, no);\nAddChartBubble(IsNaN(S2[leftLoc]) and PivotBubbles and S2_auto_show, S2, “S2”, Color.WHITE, no);\nAddChartBubble(IsNaN(S3[leftLoc]) and PivotBubbles and S1_auto_show, S3, “S3”, Color.WHITE, no);\nAddChartBubble(IsNaN(S4[leftLoc]) and PivotBubbles and ShowLevel4 and S4_auto_show, S4, “S4”, Color.WHITE, no);\nAddChartBubble(IsNaN(PP[leftLoc]) and ShowPivotPoint and PivotBubbles, PP, “PP”, Color.WHITE, no);\nAddChartBubble(IsNaN(R1[leftLoc]) and PivotBubbles and R1_auto_show, R1, “R1”, Color.WHITE, no);\nAddChartBubble(IsNaN(R2[leftLoc]) and PivotBubbles and R2_auto_show, R2, “R2”, Color.WHITE, no);\nAddChartBubble(IsNaN(R3[leftLoc]) and PivotBubbles and R3_auto_show, R3, “R3”, Color.WHITE, no);\nAddChartBubble(IsNaN(R4[leftLoc]) and PivotBubbles  and ShowLevel4 and R4_auto_show, R4, “R4”, Color.WHITE, no);\n\n\n#Opening Range Breakout Functions\ndef ORBopen = SecondsTillTime(945) &lt;= 0;\ndef IsMarketOpen = ORBopen and CloseTime2;\ndef FirstBar = If(GetDay()[1] != GetDay(), GetDay() - 1, 0);\ndef OpenRange = SecondsFromTime(945);\ndef PastOpeningRange = OpenRange &gt;= (OrbTime - 15) * 60;\ndef DisplayedHigh = If(high &gt; DisplayedHigh[1] and IsMarketOpen and ShowORB, high, If(IsMarketOpen and !FirstBar, DisplayedHigh[1], high));\ndef DisplayedLow = If(low &lt; DisplayedLow[1] and IsMarketOpen and ShowORB, low, If(IsMarketOpen and !FirstBar, DisplayedLow[1], low));\ndef ORBHi = If(PastOpeningRange, ORBHi[1], DisplayedHigh);\ndef ORBLo  = If(PastOpeningRange, ORBLo[1], DisplayedLow);\nplot ORBHigh = If(Chart1 and PastOpeningRange and IsMarketOpen and ShowORB, ORBHi, Na);\nplot ORBLow  = If(Chart1 and PastOpeningRange and IsMarketOpen and ShowORB, ORBLo, Na);\n\n#Plot Criteria\nORBHigh.SetDefaultColor(Color.MAGENTA);\nORBHigh.SetStyle(Curve.SHORT_DASH);\nORBHigh.HideBubble();\nORBLow.SetDefaultColor(Color.MAGENTA);\nORBLow.SetStyle(Curve.SHORT_DASH);\nORBLow.HideBubble();\nVH.SetDefaultColor(Color.RED);\nPC.SetDefaultColor(Color.YELLOW);\nPC.SetStyle(Curve.LONG_DASH);\nVL.SetDefaultColor(Color.GREEN);\nR4.SetDefaultColor(Color.WHITE);\nR3.SetDefaultColor(Color.WHITE);\nR2.SetDefaultColor(Color.WHITE);\nR1.SetDefaultColor(Color.WHITE);\nPP.SetDefaultColor(Color.WHITE);\nS4.SetDefaultColor(Color.WHITE);\nS3.SetDefaultColor(Color.WHITE);\nS2.SetDefaultColor(Color.WHITE);\nS1.SetDefaultColor(Color.WHITE);\n\n#cloudhigh.SetDefaultColor(Color.RED);\n#cloudlow.SetDefaultColor(Color.GREEN);\nAddLabel(showVAH , \&quot;vah= \&quot; + AsText(VAH), Color.PINK);\nAddLabel(showVAH , \&quot;val= \&quot; + AsText(VAL), Color.LIGHT_GREEN);\nAddLabel(showVAH , \&quot;poc= \&quot; + AsText(POC), Color.LIGHT_ORANGE);\nAddLabel(showVAH , \&quot;pivot= \&quot; + AsText(Pivot), Color.PINK);\nVH.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nPC.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nVL.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nPP.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nR1.SetStyle(Curve.SHORT_DASH);\nR1.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nR2.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nR3.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nR4.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nS1.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nS2.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nS3.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nS4.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\n\n\nR1.SetHiding(R1_auto_show);\nR2.SetHiding(R2_auto_show);\nR3.SetHiding(R3_auto_show);\nR4.SetHiding(R4_auto_show);\nS1.SetHiding(S1_auto_show);\nS2.SetHiding(S2_auto_show);\nS3.SetHiding(S3_auto_show);\nS4.SetHiding(S4_auto_show);\n\n\n\n\ndef opacity_inv ;#= if (opacity &gt;= 0 and opacity &lt;= 100) then 100 - opacity else 50;\nif (no)#show_VA_cloud2\nthen\n{\n   opacity_inv = 1000;\n}\nelse\n\n{\n   opacity_inv = if (opacity &gt;= 0 and opacity &lt;= 100) then 100 - opacity else 50;\n}\n\ndef Vls  = If(Chart2 and ShowCloud2 and VA_low_short &gt; 0, VA_low_short, Na);\ndef Vll  = If(Chart2 and ShowCloud2  and VA_low_long &gt; 0, VA_low_long, Na);\ndef Vhs  = If(Chart2 and ShowCloud2  and VA_high_short &gt; 0, VA_high_short, Na);\ndef Vhl  = If(Chart2 and ShowCloud2  and VA_high_long &gt; 0, VA_high_long, Na);\n\nAddCloud(Vls,  Vll , CreateColor(144 * opacity_inv / 100, 240, 144 * opacity_inv / 100),  CreateColor(144 * opacity_inv / 100, 240, 144 * opacity_inv / 100));\n\nAddCloud(Vhs,   Vhl,  CreateColor(204, 184 * opacity_inv / 100, 202 * opacity_inv / 100),   CreateColor(204, 184 * opacity_inv / 100, 202 * opacity_inv / 100));\n\n\n#S5.SetHiding(!S5_auto_show);\n#AddLabel(yes , \&quot;R44= \&quot; + (S5_auto_show), Color.pink);\n#AddLabel(yes , \&quot;R5= \&quot; + ((RIII + ((RIV - SIII) / 2))), Color.pink);&quot;,name=&quot;_27529bda_67d5_4abb_8369_e61450a2de3a&quot;}){inputsMap:TreeMap12{^(&quot;PivotBubbles&quot;,&lt;F),^(&quot;PivotTimeFrame&quot;,&quot;WEEK&quot;),^(&quot;ProfileTimeFrame&quot;,&quot;WEEK&quot;),^(&quot;ShowCloud1&quot;,&lt;F),^(&quot;ShowLevel4&quot;,&lt;F),^(&quot;ShowLevel5&quot;,&lt;F),^(&quot;ShowPivotPoint&quot;,&lt;F),^(&quot;ShowR1&quot;,&lt;F),^(&quot;ShowR2&quot;,&lt;F),^(&quot;ShowR3&quot;,&lt;F),^(&quot;ShowS1&quot;,&lt;F),^(&quot;ShowS2&quot;,&lt;F),^(&quot;ShowS3&quot;,&lt;F),^(&quot;ValueBubbles&quot;,&lt;F)},inputsMap=@TreeMap12,plots{4:{hiding=&lt;T},5:{lineStyle=1},6:{hiding=&lt;T},7:{hiding=&lt;T},8:{hiding=&lt;T},12:{lineStyle=1}}}),+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence{body=&quot;\n\n#declare hide_on_daily;\n#declare once_per_bar;\n\n# Variables:\n\ninput AggregationPeriod = AggregationPeriod.DAY;\n\ninput useAggregate = NO;\ninput showLevels = yes;\ninput showLables = yes;\ninput showBoundaryLine = yes;\n\n\n\ninput length = 3;\ndef displace = -1;\n\ninput PivotPrice = {default CLOSE, HLC3, VWAP, OHLC4, OPEN, HL2};\ninput PivotLength = 1;\n\ninput averageType = AverageType.SIMPLE;\ninput fib1 = 0.236; #fib 0.236\ninput fib2 = 0.5;  #fib2 0.5\ninput fib3 = 0.764; #fib3 0.764\ninput fib4 = 1.0; # Extreems\n\n\n\n\n#def mov_avg = MovingAverage(averageType, price[-displace], length);\n\ndef ll;\ndef hh;\ndef pv;\n\nif useAggregate\n{\n    ll = low (period = AggregationPeriod)[-displace];;\n    hh = high (period = AggregationPeriod)[-displace];\n     switch (PivotPrice)\n       {\n            case \&quot;CLOSE\&quot;:\n                    pv = close(period = AggregationPeriod)  [-displace];\n            case \&quot;HLC3\&quot; :\n                    pv = hlc3(period = AggregationPeriod)[-displace];\n\n            case \&quot;VWAP\&quot; :\n                    pv = vwap(period = AggregationPeriod)[-displace];\n            case \&quot;HL2\&quot; :\n                    pv = hl2(period = AggregationPeriod)[-displace];\n            case \&quot;OHLC4\&quot; :\n                    pv = ohlc4(period = AggregationPeriod)[-displace];\n            case \&quot;OPEN\&quot; :\n                    pv = open(period = AggregationPeriod)[-displace];\n       }\n}\nelse\n{\n    ll = average( low[-displace], length);#MovingAverage(averageType, low[-displace], length);\n    hh = average( high[-displace], length);#MovingAverage(averageType, high[-displace], length);\n      switch (PivotPrice)\n       {\n            case \&quot;CLOSE\&quot;:\n                    pv = MovingAverage(averageType, close  [-displace], PivotLength);;\n            case \&quot;HLC3\&quot; :\n                    pv = MovingAverage(averageType,hlc3[-displace], PivotLength);;\n            case \&quot;VWAP\&quot; :\n                    pv = MovingAverage(averageType,vwap[-displace], PivotLength);;\n            case \&quot;HL2\&quot; :\n                    pv =MovingAverage(averageType, hl2[-displace], PivotLength);;\n            case \&quot;OHLC4\&quot; :\n                    pv = MovingAverage(averageType,ohlc4[-displace], PivotLength);;\n            case \&quot;OPEN\&quot; :\n                    pv = MovingAverage(averageType,open[-displace], PivotLength);;\n\n       }\n}\n\n\n\n\n#\n# logic\n#\n    def nan = Double.NaN;\n\n\n    def delta = hh - ll;\n    def pp_ = pv; #pivot Point\n    def s1_ = pp_ - (fib1 * delta);\n    def s2_ = pp_ - (fib2 * delta);\n    def s3_ = pp_ - (fib3 * delta);\n    def s4_ = pp_ - (fib4 * delta);\n    def r1_ = pp_ + (fib1 * delta);\n    def r2_ = pp_ + (fib2 * delta);\n    def r3_ = pp_ + (fib3 * delta);\n    def r4_ = pp_ + (fib4 * delta);\n\n\n    plot RXT = r4_;\n    plot R3 = r3_;\n    plot R2 = r2_;\n    plot R1 = r1_;\n\n    plot pp = pp_;\n    plot S1 = s1_;\n    plot S2 = s2_;\n    plot S3 = s3_;\n    plot SXT = s4_;\n\n\n\n\n\n\n\n    pp.SetDefaultColor(Color.WHITE);\n    S1.SetDefaultColor(Color.ORANGE);\n    S2.SetDefaultColor(Color.ORANGE);\n    S3.SetDefaultColor(Color.ORANGE);\n    R1.SetDefaultColor(Color.YELLOW);\n    R2.SetDefaultColor(Color.YELLOW);\n    R3.SetDefaultColor(Color.YELLOW);\n    RXT.SetDefaultColor(Color.LIGHT_ORANGE);\n    SXT.SetDefaultColor(Color.LIGHT_ORANGE);\n    \n    PP.SetPaintingStrategy(PaintingStrategy.POINTS);\n    S1.SetPaintingStrategy(PaintingStrategy.POINTS);\n    R1.SetPaintingStrategy(PaintingStrategy.POINTS);\n    S2.SetPaintingStrategy(PaintingStrategy.POINTS);\n    R2.SetPaintingStrategy(PaintingStrategy.POINTS);\n    S3.SetPaintingStrategy(PaintingStrategy.POINTS);\n    R3.SetPaintingStrategy(PaintingStrategy.POINTS);\n    RXT.SetStyle(Curve.MEDIUM_DASH);\n    SXT.SetStyle(Curve.MEDIUM_DASH);\n\n\n\n#RXT.SetPaintingStrategy(PaintingStrategy.LINE_VS_POINTS);\n\n\n\n    R1.SetHiding(!showLevels);\n    R2.SetHiding(!showLevels);\n    R3.SetHiding(!showLevels);\n    pp.SetHiding(!showLevels);\n    S1.SetHiding(!showLevels);\n    S2.SetHiding(!showLevels);\n    S3.SetHiding(!showLevels);\n\n    RXT.SetHiding(!showBoundaryLine);\n    SXT.SetHiding(!showBoundaryLine);\n\n# lables\n\n    AddLabel(showLables, \&quot; R1= \&quot; +  RoundUp(R1, 2), if R1 &lt; close then Color.LIGHT_GREEN else if R1 &gt; close then Color.LIGHT_RED else Color.LIGHT_GRAY);\n\n    AddLabel(showLables, \&quot; R2= \&quot; +  RoundUp(R2, 2), if R2 &lt; close then Color.LIGHT_GREEN else if R2 &gt; close then Color.LIGHT_RED else Color.LIGHT_GRAY);\n    AddLabel(showLables, \&quot; R3= \&quot; +  RoundUp(R3, 2), if R3 &lt; close then Color.LIGHT_GREEN else if R3 &gt; close then Color.LIGHT_RED else Color.LIGHT_GRAY);\n\n    AddLabel(showLables, \&quot; S1= \&quot; +  RoundUp(S1, 2), if S1 &lt; close then Color.LIGHT_GREEN else if S1 &gt; close then Color.LIGHT_RED else Color.LIGHT_GRAY);\n    AddLabel(showLables, \&quot; S2= \&quot; +  RoundUp(S2, 2), if S2 &lt; close then Color.LIGHT_GREEN else if S2 &gt; close then Color.LIGHT_RED else Color.LIGHT_GRAY);\n    AddLabel(showLables, \&quot; S3= \&quot; +  RoundUp(S3, 2), if S3 &lt; close then Color.LIGHT_GREEN else if S3 &gt; close then Color.LIGHT_RED else Color.LIGHT_GRAY);\n    AddLabel(showLables, \&quot; RXT= \&quot; +  RoundUp(RXT, 2), if RXT &lt; close then Color.LIGHT_GREEN else if RXT &gt; close then Color.LIGHT_RED else\n Color.LIGHT_GRAY);\n\n    AddLabel(showLables, \&quot; SXT= \&quot; +  RoundUp(SXT, 2), if SXT &lt; close then Color.LIGHT_GREEN else if SXT &gt; close then Color.LIGHT_RED else Color.LIGHT_GRAY);\n\n\n#end&quot;,name=&quot;_5bf53d93_587e_4e7f_b239_a8ba491d37a1&quot;}){inputsMap:TreeMap13{^(&quot;showLables&quot;,&lt;F),^(&quot;showLevels&quot;,&lt;F),^(&quot;useAggregate&quot;,@Boolean0)},inputsMap=@TreeMap13,plots{0:{lineStyle=3},4:{color=@CustomColor5,hiding=&lt;T,lineWeight=2},5:{color=@CustomColor6},6:{color=@CustomColor6},7:{color=@CustomColor6},8:{lineStyle=3}}}),+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence{body=&quot;#ShadowTrader_VA_Pivots\n#ShadowTrader (Copyright ShadowTrader), a division of ShadowTrader Technologies, LLC. 2017. All rights reserved. This ShadowTrader Script is for educational purposes only.  ShadowTrader is not responsible for the use,  functionality or the performance of this Script. This work is copyrighted by ShadowTrader and all rights of this work under the license are reserved. Use of the ShadowTrader licensed code is for private use only and any other use are prohibited. By exercising any of the rights herein, you are accepting the terms of this license. You have a non-exclusive right to use or alter the ShadowTrader code. Use of this ShadowTrader Script other than as provided for in this license is prohibited. Any redistribution is strictly prohibited and will be enforced.\n\n# A big ShadowTrader thank you to Justin Lane Williams for initially creating this script for us.\n#08/31/11: Total redesign, added automated Pivot values, proximity plotting, new features.\n#09/12/11: Added “ShowLevel4” option due to recent volitility. Will plot S4 &amp; R4.\n#12/11/11: Added “AfterHours” option to turn off plot after hours.\n#12/21/11: Bug fixes due to TOS upgrades. Removed “AfterHours”, not workin correctly.\n#01/25/12: Enter daily inputs as 4 digits and script will interpret.\n# -added rounding to make the pivots appear as they do on the show.\n#01/26/12: Removed ability to truncate inputs due to it only being accurate 99% of time.\n#02/02/12: Small update to make sure \&quot;Auto Pivots\&quot; menu option functioned properly.\n#06/07/12: Added (6)VPOC inputs, should be manually entered/deleted, displays when applicable.\n#06/25/12: Removed some code and fixed a few bugs.\n#07/09/12: Fixed one small but important bug.\n#07/13/12: Added value bubbles, removed proximity plot function.\n#08/13/12: Removed a lot of superfluous code plus a few upgrades.\n#08/15/12: Fixed a bug that was giving false numbers.\n#08/30/12: Fixed a bug that wasn\'t plotting the NQ profile.\n#09/02/12: Reordered inputs and removed \&quot;LabelESonly\&quot; input.\n#12/28/12: Made the plot hide on daily charts and updated code to current standards.\n#01/04/13: Fixed a rare bug that hides labels if using tick charts.\n#01/28/13: Added ability to hide each individual level.\n#02/09/21 :mahiby customized for  \n# Pivot values will be off the day following market holidays and possibly the day after rollover.\n# On these days make \&quot;AutoPivots=No\&quot; and manually draw pivots. Change back to \&quot;AutoPivots=Yes\&quot; the day after.\n\ninput AggPeriod =  { \&quot;CHART\&quot;, \&quot;5 MIN\&quot; , \&quot;10 MIN\&quot;, \&quot;15 MIN\&quot; ,  \&quot;30 MIN\&quot;,  \&quot;1 HOUR\&quot;, \&quot;2 HOURs\&quot;,  \&quot;4 HOURs\&quot;, default \&quot;DAY\&quot;,  \&quot;2 DAYS\&quot;, \&quot;3 DAYS\&quot;, \&quot;4 DAYS\&quot;, WEEK, MONTH, \&quot;OPT EXP\&quot;, QUARTER, YEAR}; #AggregationPeriod.DAY;#\ninput VaPrior = yes;\ninput ShowCloud1  = no;#Hint ShowCloud: Shows the value area as a cloud.\ninput ShowCloud2  = yes;#Hint ShowCloud: Shows the value area as a cloud.\ninput CloudOpenOnly = yes;#Hint CloudOpenOnly: Will only cloud open candles.\ninput showOnlyToday = no;\n\ninput AutoPivots = yes;#Hint AutoPivots: Turns off pivot lines, value area stays on.\ndef showVAH = no; # for debuging\ninput Labels = {default \&quot;Proximity\&quot;, \&quot;Off\&quot;, \&quot;All\&quot;, \&quot;ValueAreaOnly\&quot;};#Hint Labels: Labels at top of chart.\ninput ShowPivotPoint = no;#Hint ShowPivotPoint: Hides Pivot Point plot.\n\ninput PivotBubbles  = no;#yes;#Hint PivotBubbles: Shows bubbles on pivot plot lines.\ninput ValueBubbles  = no;#yes;#Hint ValueBubbles: Shows bubbles on value plot lines.\ninput PlotStartTime = 0930;#Hint PlotStartTime: Move to earlier time to shift bubbles to the left.\n\n\n\ninput HideAfterHoursLabel = no;#Hint HideAfterHoursLabel: Hides \&quot;NoShadowPlotAfterHours\&quot; label.\ninput VpocBubbles  = no;#yes;#Hint VpocBubbles: Shows bubbles on VPOC plot lines.\n\ninput ShowL1 = yes;#Hint ShowS1: Hide/Show S1 /R1.\ninput ShowL2 = yes;#Hint ShowS2: Hide/Show S2 /R2.\ninput ShowL3 =yes;#Hint ShowS3: Hide/Show S3 /R3.\ninput ShowLevel4UP = no;#Hint ShowLevel4 and UP: Will display S4 and R4 for days with large moves.\n\ninput ShowORB = no;#Hint ShowORB: Displays 2 small, dashed lines at the top/bottom of opening range.\ninput OrbTime = 30;#Hint OrbTime: Defines the time range in minutes for the ORB.\n\ninput triggerUpperVaLimitHigh = 5;\ninput triggerUpperVaLimitLow = -5;\ninput triggerLowerVaLimitHigh = 5;\ninput triggerLowerVaLimitLow = -5;\ninput showLines = no;\ninput opacity = 20;\n\ndef Na = Double.NaN;\ninput showDebugLable = yes;\n#declare hide_on_daily;\n\n\n#Previous Day Functions\ndef Day   = GetDayOfWeek(GetYYYYMMDD());\ndef CloseTime = SecondsTillTime(1545) &gt;= 0;\ndef OpenTime = SecondsFromTime(0930) &gt;= 0;\ndef RegHrs = CloseTime and OpenTime;\n\n###\ndef PLow ;\ndef PHigh ;\ndef PrevLow ;\ndef PrevHigh;\ndef a = if  \&quot;TimeFrame\&quot; == \&quot;DAY\&quot; then 1 else 0;\n\nif  a {\n    PLow  =  CompoundValue(1, If(Day == Day[1] and RegHrs and low &lt; PLow[1], low, If(SecondsFromTime(0930) &lt;= 0 and RegHrs, low, PLow[1])), low);\n    PHigh = CompoundValue(1, If(Day == Day[1] and RegHrs and high &gt; PHigh[1], high, If(SecondsFromTime(0930) &lt;= 0 and RegHrs, high, PHigh[1])), high);\n    PrevLow  = If(Day != Day[1], PLow[1], PrevLow[1]);\n    PrevHigh = If(Day != Day[1], PHigh[1], PrevHigh[1]);\n\n#AddLabel (yes,period);\n}\n\nelse {\n    PLow  = low(period = AggPeriod);\n    PHigh = high(period = AggPeriod);\n    PrevLow  = low(period = AggPeriod)[1];\n    PrevHigh = high(period = AggPeriod)[1];\n\n}\n##################\n#Prior Day Profile - counting formula by functionform\n\ndef period;\ndef yyyymmdd = GetYYYYMMDD();\ndef seconds = SecondsFromTime(0);\ndef month = GetYear() * 12 + GetMonth();\ndef day_number = DaysFromDate(First(yyyymmdd)) + GetDayOfWeek(First(yyyymmdd));\ndef dom = GetDayOfMonth(yyyymmdd);\ndef dow = GetDayOfWeek(yyyymmdd - dom + 1);\ndef expthismonth = (if dow &gt; 5 then 27 else 20) - dow;\ndef exp_opt = month + (dom &gt; expthismonth);\n\nswitch (AggPeriod) {\ncase CHART:\n    period = 0;\n\ncase \&quot;5 MIN\&quot;:\n    period = Floor(seconds / 60 + day_number * 24 * 60);\ncase \&quot;10 MIN\&quot;:\n    period = Floor(seconds / 60 + day_number * 24 * 60);\n  \ncase \&quot;15 MIN\&quot;:\n    period = Floor(seconds / 60 + day_number * 24 * 60);\n\ncase \&quot;30 MIN\&quot;:\n    period = Floor(seconds / (30 * 60) + day_number * 24 * 60);\n   # timeFrame = \&quot;30 MINUTES\&quot;; #\&quot;2 DAYS\&quot;\ncase \&quot;1 HOUR\&quot;:\n    period = Floor(seconds / 3600 + day_number * 24);\n   # timeFrame = \&quot;1 HOUR\&quot;; #\&quot;2 DAYS\&quot;\ncase \&quot;2 HOURS\&quot;:\n    period = Floor(seconds / (2 * 3600) + day_number * 24);\n   # timeFrame = \&quot;2 HOURS\&quot;; #\&quot;2 DAYS\&quot;\ncase \&quot;4 HOURS\&quot;:\n    period = Floor(seconds / (4 * 3600) + day_number * 24);\n   \ncase DAY:\n    period = CountTradingDays(Min(First(yyyymmdd), yyyymmdd), yyyymmdd) - 1;\n   # timeFrame =  \&quot;1 DAY\&quot;;\ncase \&quot;2 DAYS\&quot;:\n    period =  Floor((CountTradingDays(Min(First(yyyymmdd), yyyymmdd), yyyymmdd) - 1) / 2);\n   # timeFrame =  \&quot;2 DAYS\&quot;;\ncase \&quot;3 DAYS\&quot; :\n    period = Floor((CountTradingDays(Min(First(yyyymmdd), yyyymmdd), yyyymmdd) - 1) / 3);\n  \ncase \&quot;4 DAYS\&quot;:\n    period =  Floor((CountTradingDays(Min(First(yyyymmdd), yyyymmdd), yyyymmdd) - 1) / 4);\n  \ncase WEEK:\n    period = Floor(day_number / 7);\n  \n\ncase MONTH:\n    period = Floor(month - First(month));\n  \ncase \&quot;OPT EXP\&quot;:\n    period = exp_opt - First(exp_opt);\n\ncase \&quot;Quarter\&quot;:\n\n    period =  Floor((CountTradingDays(Min(First(yyyymmdd), yyyymmdd), yyyymmdd) - 1) / 90);\n  \n\ncase \&quot;Year\&quot;:\n\n    period =  Floor((CountTradingDays(Min(First(yyyymmdd), yyyymmdd), yyyymmdd) - 1) /365);\n  \n\n   \n#case BAR:\n #   period = BarNumber() - 1;\n}\n\n\ndef count;\nif VaPrior\n{\n\n    count = CompoundValue(1, if !(period != period[1]) then count[1] + 1 else 1, 1);\n\n}\nelse\n{\n\n\n\n count = CompoundValue(1, if period != period[1] then count[1]   else  (count[1] + period - period[1]), 0);\n\n\n\n}\ndef cond = count &lt; count[1] + period - period[1];\n\ndef Pivot = hlc3(period = AggPeriod)[1];\n\n\n\ndef priorperiod = if IsNaN(count[1]) then 1 else Max(count, count[1]);\nprofile vol1 = VolumeProfile(\&quot;startNewProfile\&quot; = period != period[1], \&quot;onExpansion\&quot; = no);\n\ndef vahprior = vol1.GetHighestValueArea();\ndef pocprior = vol1.GetPointOfControl();\ndef valprior = vol1.GetLowestValueArea();\n\ndef vahprev = GetValue(vahprior, priorperiod);\ndef pocprev = GetValue(pocprior, priorperiod);\ndef valprev = GetValue(valprior, priorperiod);\n\n#if showProfile then\ndef  showProfile = no;\ndef showPointOfControl = no;\n\n#vol.Show(if showProfile then GlobalColor(\&quot;Profile\&quot;) else Color.CURRENT, if showPointOfControl then GlobalColor(\&quot;Point Of Control\&quot;) else Color.CURRENT, if showValueArea then GlobalColor(\&quot;Value Area\&quot;) else Color.CURRENT, opacity);\n#profile vol = VolumeProfile(\&quot;startNewProfile\&quot; = cond, \&quot;onExpansion\&quot; = no);\n#vol.Show(if showProfile then GlobalColor(\&quot;Profile\&quot;) else Color.CURRENT, if showPointOfControl then GlobalColor(\&quot;Point Of Control\&quot;) else Color.CURRENT, if showValueArea then GlobalColor(\&quot;Value Area\&quot;) else Color.CURRENT, opacity);\ndef VAH = vahprev;\ndef VAL = valprev;\ndef POC = pocprev;\n\n\n############\n#Value Area Functions\ndef PPoint = If(Pivot &gt; 0, Pivot, Na);\ndef VArea  = Between(close, VAL, VAH);\ndef VAreaabove  = close &gt; VAH;\ndef VAreabelow  = close &lt; VAL;\n\n\n###%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n#def oneVol = Roundup(( VAHigh - VALow) / VAHigh, 2);\ndef oneVol = RoundUp(( VAH - VAL) / 100, 2);\ndef upperValimitH = VAH + oneVol * (triggerUpperVaLimitHigh);\ndef upperValimitL = VAH + oneVol * (triggerUpperVaLimitLow);\n\ndef lowerValimitH = VAL + oneVol * (triggerLowerVaLimitHigh);\ndef lowerValimitL = VAL + oneVol * (triggerLowerVaLimitLow);\n#triggerUpperVaLimitlow = if triggerUpperVaLimitlow&gt;=0 then triggerUpperVaLimitlow =-5 else triggerUpperVaLimitlow= triggerUpperVaLimitlow;\n\nplot VA_high_short = upperValimitH;\nplot VA_high_long = upperValimitL;\n\nplot VA_low_short = lowerValimitL;\nplot VA_low_long = lowerValimitH;\n\n#AddCloud(VA_high_long, VA_high_short, Color.LIGHT_RED, Color.LIGHT_RED);\n#AddCloud(VA_high_long, VA_high_short, Color.LIGHT_RED, Color.LIGHT_RED);\n\n#VA_low_short.SetPaintingStrategy(PaintingStrategy.DASHES);\n#VA_low_long.SetDefaultColor(Color.BLUE);\nVA_low_short.SetHiding(!showLines);\nVA_low_short.SetPaintingStrategy(PaintingStrategy.DASHES);\nVA_low_short.SetDefaultColor(Color.RED);\nVA_low_long.SetHiding(!showLines);\nVA_low_long.SetPaintingStrategy(PaintingStrategy.DASHES);\nVA_low_long.SetDefaultColor(Color.GREEN);\n\n\n\nVA_high_short.SetHiding(!showLines);\nVA_high_short.SetPaintingStrategy(PaintingStrategy.DASHES);\nVA_high_short.SetDefaultColor(Color.RED);\nVA_high_long.SetHiding(!showLines);\nVA_high_long.SetPaintingStrategy(PaintingStrategy.DASHES);\nVA_high_long.SetDefaultColor(Color.GREEN);\n\n\n####%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\n\n\n\n\n#Time Functions\ndef timeFrame = getAggregationPeriod();\ndef prdMax =highestAll(if(!IsNaN(close[-1]),period,Na))  ;\ndef cnt =if(period &gt; prdMax-2  ,1,Na);\ndef Chart2  =  if showOnlyToday then cnt else 1 ;;#if showOnlyToday then (IsNaN(period[-1] and (period == period[1])))  else 1 ;\n#def Chart2  =  if showOnlyToday then MarketOpen and NewDay else 1 ;\n\ndef CloseTime2 = SecondsTillTime(1600) &gt;= 0;\ndef OpenTime2 = SecondsFromTime(PlotStartTime) &gt;= 0;\ndef MarketOpen = OpenTime2 and CloseTime2;\ndef NewDay = IsNaN(close(period = “Day”)[-1]);\ndef Chart1;\nif  timeFrame&lt; aggregationPeriod.DAY\n{\nChart1  =  if showOnlyToday then MarketOpen and NewDay else 1 ;\n}\nelse\n{ \n Chart1  =  chart2 ;\n}\n#plot prd =period;\n\n#AddLabel (yes,Chart1);\n#Pivot Functions\ninput useFib =no;\n\n###################\n\n\n\ninput FibUseAggregate = NO;\n\n\n\ninput length = 3;\ndef displace = -1;\n\ninput PivotPrice = {default CLOSE, HLC3, VWAP, OHLC4, OPEN, HL2};\ninput PivotLength = 1;\n\ndef averageType = AverageType.SIMPLE;\ndef fib1 = 0.236; #fib 0.236\ndef fib2 = 0.5;  #fib2 0.5\ndef fib3 = 0.764; #fib3 0.764\ndef fib4 = 1.0; # Extreems\n\n\n\n\n#def mov_avg = MovingAverage(averageType, price[-displace], length);\n\ndef ll;\ndef hh;\ndef pv;\n\nif FibUseAggregate\n{\n    ll = low (period = AggPeriod)[-displace];;\n    hh = high (period = AggPeriod)[-displace];\n     switch (PivotPrice)\n       {\n            case \&quot;CLOSE\&quot;:\n                    pv = close(period = AggPeriod)  [-displace];\n            case \&quot;HLC3\&quot; :\n                    pv = hlc3(period = AggPeriod)[-displace];\n\n            case \&quot;VWAP\&quot; :\n                    pv = vwap(period = AggPeriod)[-displace];\n            case \&quot;HL2\&quot; :\n                    pv = hl2(period = AggPeriod)[-displace];\n            case \&quot;OHLC4\&quot; :\n                    pv = ohlc4(period = AggPeriod)[-displace];\n            case \&quot;OPEN\&quot; :\n                    pv = open(period = AggPeriod)[-displace];\n       }\n}\nelse\n{\n    ll = average( low[-displace], length);#MovingAverage(averageType, low[-displace], length);\n    hh = average( high[-displace], length);#MovingAverage(averageType, high[-displace], length);\n      switch (PivotPrice)\n       {\n            case \&quot;CLOSE\&quot;:\n                    pv = MovingAverage(averageType, close  [-displace], PivotLength);;\n            case \&quot;HLC3\&quot; :\n                    pv = MovingAverage(averageType,hlc3[-displace], PivotLength);;\n            case \&quot;VWAP\&quot; :\n                    pv = MovingAverage(averageType,vwap[-displace], PivotLength);;\n            case \&quot;HL2\&quot; :\n                    pv =MovingAverage(averageType, hl2[-displace], PivotLength);;\n            case \&quot;OHLC4\&quot; :\n                    pv = MovingAverage(averageType,ohlc4[-displace], PivotLength);;\n            case \&quot;OPEN\&quot; :\n                    pv = MovingAverage(averageType,open[-displace], PivotLength);;\n\n       }\n}\n\n\n\n\n#\n# logic\n#\n    def nan = Double.NaN;\n\n\n    def delta = hh - ll;\n    def pp_ = pv; #pivot Point\n    def s1_ = pp_ - (fib1 * delta);\n    def s2_ = pp_ - (fib2 * delta);\n    def s3_ = pp_ - (fib3 * delta);\n    def s4_ = pp_ - (fib4 * delta);\n    def r1_ = pp_ + (fib1 * delta);\n    def r2_ = pp_ + (fib2 * delta);\n    def r3_ = pp_ + (fib3 * delta);\n    def r4_ = pp_ + (fib4 * delta);\n\n\n\n\n\n##########\n\ndef Res1  =if(usefib, r1_, (2 * PPoint) - PrevLow);\ndef Supp1 =if(usefib, s1_, (2 * PPoint) - PrevHigh);\ndef Res2  = if(usefib, r2_, PPoint + (Res1 - Supp1));\ndef Supp2 = if(usefib, s2_, PPoint - (Res1 - Supp1));\ndef Res3  = if(usefib, r3_, PrevHigh + 2 * (PPoint - PrevLow));\ndef Supp3 = if(usefib, s3_, PrevLow - 2 * (PrevHigh - PPoint));\ndef Res4  = if(usefib, r4_, PrevHigh + 3 * (PPoint - PrevLow));\ndef Supp4 = if(usefib, s4_, PrevLow - 3 * (PrevHigh - PPoint));\ndef Res5  = PrevHigh + 4 * (PPoint - PrevLow);\ndef Supp5 = PrevLow - 4 * (PrevHigh - PPoint);\n\ndef Res6  = PrevHigh + 5 * (PPoint - PrevLow);\ndef Supp6 = PrevLow - 5 * (PrevHigh - PPoint);\n\ndef Res7  = PrevHigh + 6 * (PPoint - PrevLow);\ndef Supp7 = PrevLow - 6 * (PrevHigh - PPoint);\n\ndef Res8  = PrevHigh + 7 * (PPoint - PrevLow);\ndef Supp8 = PrevLow - 7 * (PrevHigh - PPoint);\n\n\n\n\n\n\n\n\n\n\n\n#Rounding Functions\ndef round = 0.01;\ndef RI   = RoundDown(Res1, 0) - ((Round(((RoundDown(Res1, 0) - Res1) / round), 0)) * round);\ndef SI   = RoundDown(Supp1, 0) - ((Round(((RoundDown(Supp1, 0) - Supp1) / round), 0)) * round);\ndef RII  = RoundDown(Res2, 0) - ((Round(((RoundDown(Res2, 0) - Res2) / round), 0)) * round);\ndef SII  = RoundDown(Supp2, 0) - ((Round(((RoundDown(Supp2, 0) - Supp2) / round), 0)) * round);\ndef RIII = RoundDown(Res3, 0) - ((Round(((RoundDown(Res3, 0) - Res3) / round), 0)) * round);\ndef SIII = RoundDown(Supp3, 0) - ((Round(((RoundDown(Supp3, 0) - Supp3) / round), 0)) * round);\ndef RIV  = RoundDown(Res4, 0) - ((Round(((RoundDown(Res4, 0) - Res4) / round), 0)) * round);\ndef SIV  = RoundDown(Supp4, 0) - ((Round(((RoundDown(Supp4, 0) - Supp4) / round), 0)) * round);\n\n\ndef RV  = RoundDown(Res5, 0) - ((Round(((RoundDown(Res5, 0) - Res5) / round), 0)) * round);\ndef SV  = RoundDown(Supp5, 0) - ((Round(((RoundDown(Supp5, 0) - Supp5) / round), 0)) * round);\ndef RVI  = RoundDown(Res6, 0) - ((Round(((RoundDown(Res6, 0) - Res6) / round), 0)) * round);\ndef SVI  = RoundDown(Supp6, 0) - ((Round(((RoundDown(Supp6, 0) - Supp6) / round), 0)) * round);\ndef RVII  = RoundDown(Res7, 0) - ((Round(((RoundDown(Res7, 0) - Res7) / round), 0)) * round);\ndef SVII  = RoundDown(Supp7, 0) - ((Round(((RoundDown(Supp7, 0) - Supp7) / round), 0)) * round);\ndef RVIII  = RoundDown(Res8, 0) - ((Round(((RoundDown(Res8, 0) - Res8) / round), 0)) * round);\ndef SVIII  = RoundDown(Supp8, 0) - ((Round(((RoundDown(Supp8, 0) - Supp8) / round), 0)) * round);\ndef PivP = RoundDown(PPoint, 0) - ((Round(((RoundDown(PPoint, 0) - PPoint) / round), 0)) * round);\n\n\n\n#Plots\nplot VH  = If(Chart1 and VAH &gt; 0, VAH, Na);\nplot PC  = If(Chart1 and POC &gt; 0, POC, Na);\nplot VL  = If(Chart1 and VAL &gt; 0, VAL, Na);\n\n##Auto Show \ndef R1_auto_show;\ndef R2_auto_show;\ndef R3_auto_show;\ndef R4_auto_show;\ndef R5_auto_show;\ndef R6_auto_show;\ndef R7_auto_show;\ndef R8_auto_show;\n\ndef S1_auto_show;\ndef S2_auto_show;\ndef S3_auto_show;\ndef S4_auto_show;\ndef S5_auto_show;\ndef S6_auto_show;\ndef S7_auto_show;\ndef S8_auto_show;\n\ndef cmax = highestAll( count);\ndef R1AutoShow = (close&gt;VH or (Between(RI,VL,VH) and close&gt;VL));\ndef S1AutoShow = (close&lt;VL or (Between(SI,VL,VH) and close&lt;VH));;\ndef R2AutoShow =  close &gt; VH and close &lt; RV;\ndef S2AutoShow = (close &lt; VL) and close &gt; SV  ;\ndef R3AutoShow = close &gt; (RI + ((RII - RI) / 2));;\ndef S3AutoShow = close &lt; (SI - ((SI - SII) / 2));\ndef R4AutoShow = close &gt; (RII + ((RIII - RII) / 2));\ndef S4AutoShow =  close &lt; (SII - ((SII - SIII) / 2));\ndef R5AutoShow =  close &gt; (RIII + ((RIV - RIII) / 2));\ndef S5AutoShow =  close &lt; (SIII - ((SIII - SIV) / 2));\ndef R6AutoShow =  close &gt; (RIV + ((RV - RIV) / 2));\ndef S6AutoShow =  close &lt; (SIV - ((SVI - SV) / 2));\ndef R7AutoShow =  close &gt; (RV + ((RVI - RV) / 2));\ndef S7AutoShow =  close &lt; (SV - ((SV - SVI) / 2));\ndef R8AutoShow =  close &gt; (RVI + ((RVII - RVI) / 2));\ndef S8AutoShow =  close &lt; (SVI - ((SVI - SVII) / 2));\n\nR1_auto_show = if ( (period==period[1]) and R1_auto_show[1] )  then R1_auto_show[1] else R1AutoShow;\nR2_auto_show = if ( (period==period[1]) and R2_auto_show[1] )  then R2_auto_show[1] else R2AutoShow;\nR3_auto_show = if ( (period==period[1]) and R3_auto_show[1] )  then R3_auto_show[1] else R3AutoShow;\nR4_auto_show = if ( (period==period[1]) and R4_auto_show[1] )  then R4_auto_show[1] else R4AutoShow;\nR5_auto_show = if ( (period==period[1]) and R5_auto_show[1] )  then R5_auto_show[1] else R5AutoShow;\nR6_auto_show = if ( (period==period[1]) and R6_auto_show[1] )  then R6_auto_show[1] else R6AutoShow;\nR7_auto_show = if ( (period==period[1]) and R7_auto_show[1] )  then R7_auto_show[1] else R7AutoShow;\nR8_auto_show = if ( (period==period[1]) and R8_auto_show[1] )  then R8_auto_show[1] else R8AutoShow;\n\n\nS1_auto_show = CompoundValue(2,if ( (period==period[1]) and S1_auto_show[1] )  then S1_auto_show[1] else S1AutoShow,S1AutoShow);\nS2_auto_show = if ( (period==period[1]) and S2_auto_show[1] )  then S2_auto_show[1] else S2AutoShow;\nS3_auto_show = if ( (period==period[1]) and S3_auto_show[1] )  then S3_auto_show[1] else S3AutoShow;\nS4_auto_show = if ( (period==period[1]) and S4_auto_show[1] )  then S4_auto_show[1] else S4AutoShow;\nS5_auto_show = if ( (period==period[1]) and S5_auto_show[1] )  then S5_auto_show[1] else S5AutoShow;\nS6_auto_show = if ( (period==period[1]) and S6_auto_show[1] )  then S6_auto_show[1] else S6AutoShow;\nS7_auto_show = if ( (period==period[1]) and S7_auto_show[1] )  then S7_auto_show[1] else S7AutoShow;\nS8_auto_show = if ( (period==period[1]) and S8_auto_show[1] )  then S8_auto_show[1] else S8AutoShow;\n\n#plot gg=(S1AutoShow);#==1);\n#plot ggg = ( s1_auto_show);# if ( isnan( s1_autoshow))then  1 else double.NaN ;\n#gg.SetHiding(0);\n#ggg.SetHiding(0);\n\n#input showHigherLevel =yes;\n##\n\nplot R4  = If(Chart1 and AutoPivots and ShowLevel4UP and   RIV &gt; 0, RIV, Na);\nplot R3  = If(Chart1 and AutoPivots and ShowL3   and RIII &gt; 0, RIII,Na);\nplot R2  = If(Chart1 and AutoPivots and ShowL2   and RII &gt; 0, RII, Na);\nplot R1  = If(Chart1 and AutoPivots and ShowL1   and RI &gt; 0, RI, Na);\nplot PP  = If(Chart1 and AutoPivots and ShowPivotPoint and PPoint &gt; 0, PivP, Na);\nplot S1  = If(Chart1 and AutoPivots and ShowL1   and SI &gt; 0, SI, Na);\nplot S2  = If(Chart1 and AutoPivots and ShowL2   and SII &gt; 0, SII, Na);\nplot S3  = If(Chart1 and AutoPivots and ShowL3  and SIII &gt; 0, SIII, Na);\nplot S4  = If(Chart1 and AutoPivots and ShowLevel4UP and SIV &gt; 0, SIV, Na);\n\n#######\n\nplot R5  = If(Chart1 and AutoPivots and ShowLevel4UP  and RV &gt; 0, RV, Na);\nplot R6  = If(Chart1 and AutoPivots and ShowLevel4UP and RVI &gt; 0, RVI, Na);\nplot R7  = If(Chart1 and AutoPivots and ShowLevel4UP  and RVII &gt; 0, RVII, Na);\nplot R8  = If(Chart1 and AutoPivots and ShowLevel4UP   and RVIII &gt; 0, RVIII, Na);\n\n\nplot S5  = If(Chart1 and AutoPivots and ShowLevel4UP   and SV &gt; 0, SV, Na);\nplot S6  = If(Chart1 and AutoPivots and ShowLevel4UP and SVI &gt; 0, SVI, Na);\nplot S7  = If(Chart1 and AutoPivots and ShowLevel4UP and SVII &gt; 0, SVII, Na);\nplot S8  = If(Chart1 and AutoPivots and ShowLevel4UP and SVIII &gt; 0, SVIII, Na);\n####\n\n\ninput closeTimeC = 1615;\n#Value Area Cloud\n#def CloudClose = SecondsTillTime(1615) &gt; 0;\ndef CloudClose = SecondsTillTime(closeTimeC) &gt; 0;\ndef Cloud      = OpenTime and CloudClose;\ndef ChartCloud = if(timeFrame &gt; aggregationPeriod.DAY, Cloud and Chart1, chart1);\ndef CloudTest  = If(CloudOpenOnly, ChartCloud, Chart1);\ndef cloudhigh = If(CloudTest and ShowCloud1, VAH, Na);\ndef cloudlow  = If(CloudTest and ShowCloud1, VAL, Na);\nAddCloud(cloudhigh, cloudlow, Color.GRAY, Color.GRAY);\ndef AfterHours = OpenTime2 and CloudClose;\n\n#Chart Labels\ndef Futures = Between(close, close(\&quot;/es\&quot;) - 15, close(\&quot;/es\&quot;) + 15) or Between(close, close(\&quot;/nq\&quot;) - 15, close(\&quot;/nq\&quot;) + 15);\ndef Label = Chart1;# and Futures;\ndef ZeroTest = VAH &gt; 0 and VAL &gt; 0;\ndef PNotZero = PPoint &gt; 0;\ndef ChartLabels;\nswitch (Labels) {\ncase \&quot;Proximity\&quot;:\n    ChartLabels = 1;\ncase \&quot;Off\&quot;:\n    ChartLabels = 0;\ncase \&quot;All\&quot;:\n    ChartLabels = 2;\ncase \&quot;ValueAreaOnly\&quot;:\n    ChartLabels = 3;\n}\n\n\nAddLabel(ChartLabels == 1 and Label and AutoPivots and VArea and ZeroTest, “InsideValue: ” + AggPeriod, Color.WHITE);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and VAreaabove and ZeroTest, “AboveValue: ”  + AggPeriod, Color.GREEN);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and VAreabelow and ZeroTest, “BelowValue: ”  + AggPeriod, Color.RED);\nAddLabel(ChartLabels == 1 and Label and !AutoPivots and VArea and ZeroTest, “InsideValueArea: ”  + AggPeriod, Color.WHITE);\nAddLabel(ChartLabels == 1 and Label and !AutoPivots and VAreaabove and ZeroTest, “AboveValueArea: ”  + AggPeriod, Color.GREEN);\nAddLabel(ChartLabels == 1 and Label and !AutoPivots and VAreabelow and ZeroTest, “BelowValueArea: ”  + AggPeriod, Color.RED);\n\n\nAddLabel(ChartLabels == 1 and Label and AutoPivots and Between(close, VL, (RI + ((RII - RI) / 2))), \&quot;VH=\&quot; + AsText(VH), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and Between(close, VL, VH), \&quot;POC=\&quot; + AsText(PC), Color.YELLOW);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and Between(close, (SI - ((SI - SII) / 2)), VH), \&quot;VL=\&quot; + AsText(VL), Color.GREEN);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and (close &gt; VH or (Between(RI, VL, VH) and close &gt; VL)), \&quot;R1=\&quot; + AsText(RI), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and close &gt; VH, \&quot;R2=\&quot; + AsText(RII), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and close &gt; (RI + ((RII - RI) / 2)), \&quot;R3=\&quot; + AsText(RIII), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and ShowLevel4UP and close &gt; (RII + ((RIII - RII) / 2)), \&quot;R4=\&quot; + AsText(RIV), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and ShowLevel4UP and close &gt; (RIII + ((RIV - RIII) / 2)), \&quot;R5=\&quot; + AsText(RV), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and ShowLevel4UP and close &gt; (RII + ((RV - RIV) / 2)), \&quot;R6=\&quot; + AsText(RVI), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and ShowLevel4UP and close &gt; (RII + ((RVI - RV) / 2)), \&quot;R7=\&quot; + AsText(RVII), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and ShowLevel4UP and close &gt; (RII + ((RVII - RVI) / 2)), \&quot;R8=\&quot; + AsText(RVIII), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and ShowPivotPoint and close &gt; SI and close &lt; RI, \&quot;PP=\&quot; + AsText(PP), Color.WHITE);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and (close &lt; VL or (Between(SI, VL, VH) and close &lt; VH)), \&quot;S1=\&quot; + AsText(SI), Color.GREEN);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and close &lt; VL, \&quot;S2=\&quot; + AsText(SII), Color.GREEN);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and close &lt; (SI - ((SI - SII) / 2)), \&quot;S3=\&quot; + AsText(SIII), Color.GREEN);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and ShowLevel4UP and close &lt; (SII - ((SII - SIII) / 2)), \&quot;S4=\&quot; + AsText(SIV), Color.GREEN);\n\nAddLabel(ChartLabels == 2 and Label and ZeroTest, \&quot;VH=\&quot; + AsText(VH), Color.RED);\nAddLabel(ChartLabels == 2 and Label and ZeroTest, \&quot;POC=\&quot; + AsText(PC), Color.YELLOW);\nAddLabel(ChartLabels == 2 and Label and ZeroTest, \&quot;VL=\&quot; + AsText(VL), Color.GREEN);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero, \&quot;R1=\&quot; + AsText(RI), Color.RED);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero, \&quot;R2=\&quot; + AsText(RII), Color.RED);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero, \&quot;R3=\&quot; + AsText(RIII), Color.RED);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero and ShowLevel4UP, \&quot;R4=\&quot; + AsText(RIV), Color.RED);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero and ShowPivotPoint, \&quot;PP=\&quot; + AsText(PP), Color.WHITE);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero, \&quot;S1=\&quot; + AsText(SI), Color.GREEN);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero, \&quot;S2=\&quot; + AsText(SII), Color.GREEN);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero, \&quot;S3=\&quot; + AsText(SIII), Color.GREEN);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero and ShowLevel4UP, \&quot;S4=\&quot; + AsText(SIV), Color.GREEN);\n\nAddLabel(ChartLabels == 3 and Label and VArea and ZeroTest, “InsideValueArea”, Color.WHITE);\nAddLabel(ChartLabels == 3 and Label and VAreaabove and ZeroTest, “AboveValueArea”, Color.GREEN);\nAddLabel(ChartLabels == 3 and Label and VAreabelow and ZeroTest, \&quot;BelowValueArea”, Color.RED);\nAddLabel(!AfterHours and !Chart1 and !HideAfterHoursLabel, \&quot;NoShadowPlotAfterHours\&quot;, Color.ORANGE);\n\n#Chart Bubbles\ninput BubbleLeftSide = yes;\ndef  leftLoc =  if BubbleLeftSide then 1 else -1;#\nAddChartBubble(IsNaN(VH[leftLoc]) and ValueBubbles, VH, VH, Color.RED, no);\nAddChartBubble(IsNaN(PC[leftLoc]) and ValueBubbles, PC, PC, Color.YELLOW, no);\nAddChartBubble(IsNaN(VL[leftLoc]) and ValueBubbles, VL, VL, Color.GREEN, no);\nAddChartBubble(IsNaN(S1[leftLoc]) and PivotBubbles and S1_auto_show, S1, “S1”, Color.WHITE, no);\nAddChartBubble(IsNaN(S2[leftLoc]) and PivotBubbles and S2_auto_show, S2, “S2”, Color.WHITE, no);\nAddChartBubble(IsNaN(S3[leftLoc]) and PivotBubbles and S1_auto_show, S3, “S3”, Color.WHITE, no);\nAddChartBubble(IsNaN(S4[leftLoc]) and PivotBubbles and ShowLevel4UP and S4_auto_show, S4, “S4”, Color.WHITE, no);\nAddChartBubble(IsNaN(PP[leftLoc]) and ShowPivotPoint and PivotBubbles, PP, “PP”, Color.WHITE, no);\nAddChartBubble(IsNaN(R1[leftLoc]) and PivotBubbles and R1_auto_show, R1, “R1”, Color.WHITE, no);\nAddChartBubble(IsNaN(R2[leftLoc]) and PivotBubbles and R2_auto_show, R2, “R2”, Color.WHITE, no);\nAddChartBubble(IsNaN(R3[leftLoc]) and PivotBubbles and R3_auto_show, R3, “R3”, Color.WHITE, no);\nAddChartBubble(IsNaN(R4[leftLoc]) and PivotBubbles  and ShowLevel4UP and R4_auto_show, R4, “R4”, Color.WHITE, no);\n\n\n#Opening Range Breakout Functions\ndef ORBopen = SecondsTillTime(945) &lt;= 0;\ndef IsMarketOpen = ORBopen and CloseTime2;\ndef FirstBar = If(GetDay()[1] != GetDay(), GetDay() - 1, 0);\ndef OpenRange = SecondsFromTime(945);\ndef PastOpeningRange = OpenRange &gt;= (OrbTime - 15) * 60;\ndef DisplayedHigh = If(high &gt; DisplayedHigh[1] and IsMarketOpen and ShowORB, high, If(IsMarketOpen and !FirstBar, DisplayedHigh[1], high));\ndef DisplayedLow = If(low &lt; DisplayedLow[1] and IsMarketOpen and ShowORB, low, If(IsMarketOpen and !FirstBar, DisplayedLow[1], low));\ndef ORBHi = If(PastOpeningRange, ORBHi[1], DisplayedHigh);\ndef ORBLo  = If(PastOpeningRange, ORBLo[1], DisplayedLow);\nplot ORBHigh = If(Chart1 and PastOpeningRange and IsMarketOpen and ShowORB, ORBHi, Na);\nplot ORBLow  = If(Chart1 and PastOpeningRange and IsMarketOpen and ShowORB, ORBLo, Na);\n\n#Plot Criteria\nORBHigh.SetDefaultColor(Color.MAGENTA);\nORBHigh.SetStyle(Curve.SHORT_DASH);\nORBHigh.HideBubble();\nORBLow.SetDefaultColor(Color.MAGENTA);\nORBLow.SetStyle(Curve.SHORT_DASH);\nORBLow.HideBubble();\nVH.SetDefaultColor(Color.RED);\nPC.SetDefaultColor(Color.YELLOW);\nPC.SetStyle(Curve.LONG_DASH);\nVL.SetDefaultColor(Color.GREEN);\nR4.SetDefaultColor(Color.WHITE);\nR3.SetDefaultColor(Color.WHITE);\nR2.SetDefaultColor(Color.WHITE);\nR1.SetDefaultColor(Color.WHITE);\nPP.SetDefaultColor(Color.WHITE);\nS4.SetDefaultColor(Color.WHITE);\nS3.SetDefaultColor(Color.WHITE);\nS2.SetDefaultColor(Color.WHITE);\nS1.SetDefaultColor(Color.WHITE);\n\n#cloudhigh.SetDefaultColor(Color.RED);\n#cloudlow.SetDefaultColor(Color.GREEN);\nAddLabel(showVAH , \&quot;vah= \&quot; + AsText(VAH), Color.PINK);\nAddLabel(showVAH , \&quot;val= \&quot; + AsText(VAL), Color.LIGHT_GREEN);\nAddLabel(showVAH , \&quot;poc= \&quot; + AsText(POC), Color.LIGHT_ORANGE);\nAddLabel(showVAH , \&quot;pivot= \&quot; + AsText(Pivot), Color.PINK);\nVH.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nPC.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nVL.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nPP.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nR1.SetStyle(Curve.SHORT_DASH);\nR1.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nR2.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nR3.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nR4.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nS1.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nS2.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nS3.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nS4.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\n\n\nR1.SetHiding(R1_auto_show);\nR2.SetHiding(R2_auto_show);\nR3.SetHiding(R3_auto_show);\nR4.SetHiding(R4_auto_show);\nS1.SetHiding(S1_auto_show);\nS2.SetHiding(S2_auto_show);\nS3.SetHiding(S3_auto_show);\nS4.SetHiding(S4_auto_show);\n\n\n\n\ndef opacity_inv ;#= if (opacity &gt;= 0 and opacity &lt;= 100) then 100 - opacity else 50;\nif (no)#show_VA_cloud2\nthen\n{\n   opacity_inv = 1000;\n}\nelse\n\n{\n   opacity_inv = if (opacity &gt;= 0 and opacity &lt;= 100) then 100 - opacity else 50;\n}\n\ndef Vls  = If(Chart2 and ShowCloud2 and VA_low_short &gt; 0, VA_low_short, Na);\ndef Vll  = If(Chart2 and ShowCloud2  and VA_low_long &gt; 0, VA_low_long, Na);\ndef Vhs  = If(Chart2 and ShowCloud2  and VA_high_short &gt; 0, VA_high_short, Na);\ndef Vhl  = If(Chart2 and ShowCloud2  and VA_high_long &gt; 0, VA_high_long, Na);\n\nAddCloud(Vls,  Vll , CreateColor(144 * opacity_inv / 100, 240, 144 * opacity_inv / 100),  CreateColor(144 * opacity_inv / 100, 240, 144 * opacity_inv / 100));\n\nAddCloud(Vhs,   Vhl,  CreateColor(204, 184 * opacity_inv / 100, 202 * opacity_inv / 100),   CreateColor(204, 184 * opacity_inv / 100, 202 * opacity_inv / 100));\n\n\n#S5.SetHiding(!S5_auto_show);\n#AddLabel(yes , \&quot;R44= \&quot; + (S5_auto_show), Color.pink);\n#AddLabel(yes , \&quot;R5= \&quot; + ((RIII + ((RIV - SIII) / 2))), Color.pink);&quot;,name=&quot;_8c4f0368_c01c_4494_9a23_2b992ac82dab&quot;}){inputsMap:TreeMap14{^(&quot;ShowCloud1&quot;,@Boolean0),^(&quot;ShowCloud2&quot;,&lt;F),^(&quot;showOnlyToday&quot;,@Boolean0)},inputsMap=@TreeMap14,plots{5:{lineStyle=1},10:{lineStyle=1}}})}},!get(#%6.SubgraphId(&quot;Volume&quot;)){height=80},^(#%6.SubgraphId(&quot;Subgraph3&quot;),#%6.SubgraphStorableModel{height=80,storableIndicators.+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence{body=&quot;declare lower;\n\n################\n\n\n\n\n\n#######\n\n\n\n\n\n\ninput price = close;\n\ninput superfast_length = 8;\n\ninput fast_length = 13;\n\ninput slow_length = 21;\n\ninput displace = 0;\n\n################\ninput averageType = AverageType.EXPONENTIAL;\n\ndef mov_avg8 = MovingAverage(averageType, price[-displace], superfast_length);\n\ndef mov_avg13 = MovingAverage(averageType, price[-displace], fast_length);\n\ndef mov_avg21 = MovingAverage(averageType, price[-displace], slow_length);\n \n#moving averages\n\ndef Superfast = mov_avg8;\n\ndef Fast = mov_avg13;\n\ndef Slow = mov_avg21;\n\n\ndef buy = mov_avg8 &gt; mov_avg13 and mov_avg13 &gt; mov_avg21 and low &gt; mov_avg8;\n\ndef stopbuy = mov_avg8 &lt;= mov_avg13;\n\ndef buynow = !buy[1] and buy;\n\ndef buysignal = CompoundValue(1, if buynow and !stopbuy then 1 else if buysignal[1] == 1 and stopbuy then 0 else buysignal[1], 0);\n\n\ndef Buy_Signal = buysignal[1] == 0 and buysignal == 1;\n\ndef Momentum_Down = buysignal[1] == 1 and buysignal == 0;\n\n\ndef sell = mov_avg8 &lt; mov_avg13 and mov_avg13 &lt; mov_avg21 and high &lt; mov_avg8;\n\ndef stopsell = mov_avg8 &gt;= mov_avg13;\n\ndef sellnow = !sell[1] and sell;\n\ndef sellsignal = CompoundValue(1, if sellnow and !stopsell then 1 else if sellsignal[1] == 1 and stopsell then 0 else sellsignal[1], 0);\n\n\ndef Sell_Signal = sellsignal[1] == 0 and sellsignal;\n\ndef Momentum_Up = sellsignal[1] == 1 and sellsignal == 0;\n \n# when using this as a custom scan, change the word plot to def\n# then remove the \'#\' from in front of one of the \&quot;plot Scan\&quot; statements below\ndef Colorbars = if buysignal == 1 then 1 else if sellsignal == 1 then -1 else if buysignal == 0 or sellsignal == 0 then 0 else 0;\n\n# use this first Scan plot for SLM Ribbon Momentum UP\n#plot Scan = if Colorbars == 1 then yes else no;\n\n# use this second Scan plot for SLM Ribbon Momentum DOWN\n#plot Scan = if Colorbars == -1 then yes else no;\n\n\n\ninput length = 14;\n\ndef MaxBound = HighestWeighted(high, length, LinearRegressionSlope(price = high, length = length));\ndef MinBound = LowestWeighted(low, length, LinearRegressionSlope(price = low, length = length));\ndef diff = MaxBound - MinBound;\n\nplot PROSC = if diff != 0 then 100 * (close - MinBound) / diff else 0;\nplot OverBought = 75;\nplot OverSold = 25;\nplot z =50;\nz.SetDefaultColor(color.gray);\n\nPROSC.SetDefaultColor(GetColor(8));\nOverBought.SetDefaultColor(GetColor(5));\nOverSold.SetDefaultColor(GetColor(5));\n\n\n###############\n\ndef Colorbars1 = if buysignal ==1 then 1 else if sellsignal ==1 then 2 else if buysignal ==0 or sellsignal==0 then 3 else 0;\n\n\n\nPROSC.definecolor(\&quot;Buy_Signal_Bars\&quot;, color.dark_green);\n\nPROSC.definecolor(\&quot;Sell_Signal_Bars\&quot;, color.red);\n\nPROSC.definecolor(\&quot;Neutral\&quot;, color.plum);\n\nPROSC.AssignValueColor(if Colorbars1 ==1 then PROSC.color(\&quot;buy_signal_bars\&quot;) else if colorbars1 ==2 then PROSC.color(\&quot;Sell_Signal_bars\&quot;) else  PROSC.color(\&quot;neutral\&quot;));\nPROSC.setlineWeight(2);\nOverBought.hide();\nOverSold.hide();\n\n\n\n\n\nAddCloud(0, OverSold, Color.RED, Color.light_green);\nAddCloud(OverBought, 100, Color.Green, Color.light_red);\n\n\nplot UpSignal = if (buysignal and PROSC crosses above OverSold) then OverSold else Double.NaN;\nplot DownSignal = if (sellsignal and PROSC crosses below OverBought) then OverBought else Double.NaN;\nplot DownSignal2 = if (( Momentum_Down or sellsignal) and PROSC  crosses below OverSold) then OverSold else Double.NaN;\n\nplot UpSignal2 = if ( Momentum_Up and PROSC&gt;= overbought) then overbought else Double.NaN;\ninput showBreakoutSignals =yes;\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\n\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\nUpSignal2.SetDefaultColor(Color.plum);\nUpSignal2.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\n\nDownSignal2.SetDefaultColor(Color.plum);\nDownSignal2.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\n\n\n\n&quot;,name=&quot;_bc0d152e_88dc_44b4_99a7_78acd8502e84&quot;}){hidden=&lt;T,inputsMap:TreeMap15{^(&quot;price&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap15})}),^(#%6.SubgraphId(&quot;Subgraph7&quot;),#%6.SubgraphStorableModel{height=80,storableIndicators.+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence{body=&quot;# RSI-Laguerre Self Adjusting With Fractal Energy Gaussian Price Filter\n# Mobius\n# V01.12.2016\n# Both Fractal Energy and RSI are plotted. RSI in cyan and FE in yellow. Look for trend exhaustion in the FE and a reversal of RSI or Price compression in FE and an RSI reversal.\n\ndeclare lower;\n\n#Inputs: \ninput nFE = 8;#hint nFE: length for Fractal Energy calculation. \ninput AlertOn = no;\ninput Glength  = 13;\ninput betaDev =  8;\ninput data = close;\n\ndef w = (2 * Double.Pi / Glength);\ndef beta = (1 - Cos(w)) / (Power(1.414, 2.0 / betaDev) - 1 );\ndef alpha = (-beta + Sqrt(beta * beta + 2 * beta));\ndef Go = Power(alpha, 4) * open + \n             4 * (1 – alpha) * Go[1] – 6 * Power( 1 - alpha, 2 ) * Go[2] + \n             4 * Power( 1 - alpha, 3 ) * Go[3] - Power( 1 - alpha, 4 ) * Go[4];\ndef Gh = Power(alpha, 4) * high + \n             4 * (1 – alpha) * Gh[1] – 6 * Power( 1 - alpha, 2 ) * Gh[2] + \n             4 * Power( 1 - alpha, 3 ) * Gh[3] - Power( 1 - alpha, 4 ) * Gh[4];\ndef Gl = Power(alpha, 4) * low + \n             4 * (1 – alpha) * Gl[1] – 6 * Power( 1 - alpha, 2 ) * Gl[2] + \n             4 * Power( 1 - alpha, 3 ) * Gl[3] - Power( 1 - alpha, 4 ) * Gl[4];\ndef Gc = Power(alpha, 4) * data + \n             4 * (1 – alpha) * Gc[1] – 6 * Power( 1 - alpha, 2 ) * Gc[2] + \n             4 * Power( 1 - alpha, 3 ) * Gc[3] - Power( 1 - alpha, 4 ) * Gc[4];\n# Variables:\ndef o;\ndef h;\ndef l;\ndef c;\ndef CU1;\ndef CU2;\ndef CU;\ndef CD1;\ndef CD2;\ndef CD;\ndef L0;\ndef L1;\ndef L2;\ndef L3;\nplot RSI;\nplot OS;\nplot OB;\nplot M;\n\n# Calculations\no = (Go + Gc[1]) / 2;\nh = Max(Gh, Gc[1]);\nl = Min(Gl, Gc[1]);\nc = (o + h + l + Gc) / 4;\nplot gamma = Log(Sum((Max(Gh, Gc[1]) - Min(Gl, Gc[1])), nFE) / \n        (Highest(Gh, nFE) - Lowest(Gl, nFE)))\n            / Log(nFE);\ngamma.SetDefaultColor(Color.YELLOW);\nL0 = (1 – gamma) * Gc + gamma * L0[1];\nL1 = -gamma * L0 + L0[1] + gamma * L1[1];\nL2 = -gamma * L1 + L1[1] + gamma * L2[1];\nL3 = -gamma * L2 + L2[1] + gamma * L3[1];\nif L0 &gt;= L1\nthen {\n    CU1 = L0 - L1;\n    CD1 = 0;\n} else {\n    CD1 = L1 - L0;\n    CU1 = 0;\n}\nif L1 &gt;= L2\nthen {\n    CU2 = CU1 + L1 - L2;\n    CD2 = CD1;\n} else {\n    CD2 = CD1 + L2 - L1;\n    CU2 = CU1;\n}\nif L2 &gt;= L3\nthen {\n    CU = CU2 + L2 - L3;\n    CD = CD2;\n} else {\n    CU = CU2;\n    CD = CD2 + L3 - L2;\n}\n\nRSI = if CU + CD &lt;&gt; 0 then CU / (CU + CD) else 0;\nRSI.SetDefaultColor(Color.CYAN);\nOS = if IsNaN(c) then Double.NaN else 0.2;\nOS.SetDefaultColor(Color.GRAY);\nOS.HideBubble();\nOS.HideTitle();\nOB = if IsNaN(c) then Double.NaN else 0.8;\nOB.SetDefaultColor(Color.GRAY);\nOB.HideBubble();\nOB.HideTitle();\nM = if IsNaN(c) then Double.NaN else 0.5;\nM.SetStyle(Curve.LONG_DASH);\nM.SetDefaultColor(Color.GRAY);\nM.HideBubble();\nM.HideTitle();\nplot FEh = if IsNaN(c) then Double.NaN else .618;\nFEh.SetStyle(Curve.SHORT_DASH);\nFEh.HideBubble();\nFEh.SetDefaultColor(Color.GRAY);\nFEh.HideTitle();\nplot FEl = if IsNaN(c) then Double.NaN else .382;\nFEl.SetStyle(Curve.SHORT_DASH);\nFEl.SetDefaultColor(Color.GRAY);\nFEl.HideBubble();\nFEl.HideTitle();\nAddCloud(0, OS, Color.RED, Color.GREEN);\nAddCloud(OB, 1, Color.GREEN, Color.RED);\nAlert(AlertOn and RSI crosses below .8, \&quot;\&quot;, Alert.BAR, Sound.Bell);\nAlert(AlertOn and RSI crosses above .2, \&quot;\&quot;, Alert.BAR, Sound.Bell);\n\n#######\n\n#SLIM ribon\ninput price = close;\n\ninput superfast_length =4;\n\ninput fast_length = 7;\n\ninput slow_length = 21;\n\ninput displace = 0;\n\n################\ninput averageTypeSuperfast = AverageType.simple;\ninput averageTypefast = AverageType.simple;\ninput averageTypeSlow = AverageType.EXPONENTIAL;\n\ninput  priceSupperFast = hlc3 ;\ninput priceFast  = close ;\ninput priceSlow  = close ;\n\ndef mov_avg_superFast = MovingAverage(averageTypeSuperfast, priceSupperFast[-displace], superfast_length);\ndef mov_avg_Fast = MovingAverage(averageTypefast, priceFast[-displace], fast_length);\ndef mov_avg_Slow = MovingAverage(averageTypeSlow, priceSlow[-displace], slow_length);\n\n#moving averages\ndef Superfast = mov_avg_superFast;\ndef Fast = mov_avg_Fast;\ndef Slow = mov_avg_Slow;\n\n################################\ndef buy = mov_avg_superFast &gt; mov_avg_Fast and mov_avg_Fast &gt; mov_avg_Slow and low &gt; mov_avg_superFast;\n\ndef stopbuy = mov_avg_superFast &lt;= mov_avg_Fast;\n\ndef buynow = !buy[1] and buy;\n\ndef buysignal = CompoundValue(1, if buynow and !stopbuy then 1 else if buysignal[1] == 1 and stopbuy then 0 else buysignal[1], 0);\n\n\ndef Buy_Signal = buysignal[1] == 0 and buysignal == 1;\n\ndef Momentum_Down = buysignal[1] == 1 and buysignal == 0;\n\n\ndef sell = mov_avg_superFast &lt; mov_avg_Fast and mov_avg_Fast &lt; mov_avg_Slow and high &lt; mov_avg_superFast;\n\ndef stopsell = mov_avg_superFast &gt;= mov_avg_Fast;\n\n\n\n###########################\ndef sellnow = !sell[1] and sell;\n\ndef sellsignal = CompoundValue(1, if sellnow and !stopsell then 1 else if sellsignal[1] == 1 and stopsell then 0 else sellsignal[1], 0);\n\n\ndef Sell_Signal = sellsignal[1] == 0 and sellsignal;\n\ndef Momentum_Up = sellsignal[1] == 1 and sellsignal == 0;\n \n# when using this as a custom scan, change the word plot to def\n# then remove the \'#\' from in front of one of the \&quot;plot Scan\&quot; statements below\ndef Colorbars = if buysignal == 1 then 1 else if sellsignal == 1 then -1 else if buysignal == 0 or sellsignal == 0 then 0 else 0;\n\n# use this first Scan plot for SLM Ribbon Momentum UP\n#plot Scan = if Colorbars == 1 then yes else no;\n\n# use this second Scan plot for SLM Ribbon Momentum DOWN\n#plot Scan = if Colorbars == -1 then yes else no;\n\ninput length = 19;\n\ndef HMA = MovingAverage(AverageType.HULL, price, length)[-displace];\ndef HMA_Up=  HMA &gt; HMA[1];\ndef HMA_Down =! HMA_UP;\n\n###############\n\n#def Colorbars1 = if buysignal == 1 then 1 else if sellsignal == 1 then 2 else if buysignal == 0 or sellsignal == 0 then 3 else 0;\n\n\n\nRSI.definecolor(\&quot;Buy\&quot;, color.dark_green);\n\n\nRSI.definecolor(\&quot;Sell\&quot;, color.red);\n\nRSI.DefineColor(\&quot;Neutral\&quot;, Color.PLUM);\n#RSI.DefineColor(\&quot;NeutralDown\&quot;, Color.orange);\nRSI.definecolor(\&quot;HullMA_up\&quot;, color.blue);\n\nRSI.definecolor(\&quot;HullMA_down\&quot;, color.orange);\n\nRSI.AssignValueColor(if buysignal and HMA_Up then RSI.color(\&quot;Buy\&quot;) else if buysignal and !HMA_Up then RSI.color(\&quot;HullMA_down\&quot;) else if sellsignal and HMA_Down  then RSI.color(\&quot;Sell\&quot;) else  if sellsignal and !HMA_Down  then RSI.color(\&quot;HullMA_up\&quot;) else  RSI.color(\&quot;neutral\&quot;));;#\n# if Momentum_Up then  RSI.color(\&quot;neutralUp\&quot;) else  RSI.color(\&quot;neutraldown\&quot;));\n\n\n\n\n####$$$$$$$$$$$$$$$$\n###############\n\n\n\n\nplot UpSignal = if (buysignal and RSI crosses above OS) then RSI-0.1 else Double.NaN;\nplot DownSignal = if (sellsignal and RSI crosses below OB) then RSI+0.1 else Double.NaN;\ninput showBreakoutSignals =yes;\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\n\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\n\n\n\n\n\n\n\n\n\n# End Code RSI_Laguerre Self Adjusting with Fractal Energy&quot;,name=&quot;_94f3daa4_27de_42e1_9e1c_1f3e66613988&quot;}){alerts:LocalAlertArray1,alerts=@LocalAlertArray1,inputsMap:TreeMap16{^(&quot;data&quot;,&quot;CLOSE&quot;),^(&quot;price&quot;,&quot;CLOSE&quot;),^(&quot;priceFast&quot;,&quot;CLOSE&quot;),^(&quot;priceSlow&quot;,&quot;CLOSE&quot;),^(&quot;priceSupperFast&quot;,&quot;(H+L+C)/3&quot;)},inputsMap=@TreeMap16,plots{0:{lineWeight=3}}})}),^(#%6.SubgraphId(&quot;Subgraph9&quot;),#%6.SubgraphStorableModel{height=80,storableIndicators.+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence{body=&quot;#converted from mobisu macd to ppo\n# this is actually macd and sqz indicator in one\n# added pivots\n\ndeclare lower;\n\ninput fastPeriod   = 12; #9/18/6 for 5m\ninput slowPeriod   = 26;\ninput signalPeriod = 9;\ninput price        = close;\ninput show = yes;\n\n\ndef fastEma   = ExpAverage( price, fastPeriod );\ndef slowEma   = ExpAverage( price, slowPeriod );\ndef periodOK  = fastPeriod &lt; slowPeriod;\nAddLabel( !periodOK, \&quot;ERROR: fastPeriod MUST be less than slowPeriod\&quot; );\ndef _ppo      = if periodOK then ((fastEma - slowEma) / slowEma) * 100 else 0;\ndef _signal   = ExpAverage( _ppo, signalPeriod );\n\n# generic plots wiht colors\nplot pmain   = _ppo;\npmain.SetDefaultColor( Color.BLUE );\npmain.SetLineWeight(2);\npmain.AssignValueColor(if pmain &lt; 0 and pmain &lt; pmain[1]  then Color.RED\n                       else if pmain &lt; 0 and  pmain &gt; pmain[1] then Color.DARK_GREEN\n                       else if pmain &gt; 0 and pmain &gt; pmain[1] then Color.GREEN\n                       else Color.DARK_RED);\npmain.HideBubble();\n\nplot mainEma   = _signal;\nmainEma.SetDefaultColor( Color.RED );\nmainEma.HideBubble();\nAddCloud(pmain, mainEma, Color.GREEN, Color.RED);\n\n#diff as histogram\nplot diff    = _ppo - _signal;\ndiff.SetDefaultColor(GetColor(5));\ndiff.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);\ndiff.SetLineWeight(3);\ndiff.DefineColor(\&quot;Positive and Up\&quot;, Color.GREEN);\ndiff.DefineColor(\&quot;Positive and Down\&quot;, Color.DARK_GREEN);\ndiff.DefineColor(\&quot;Negative and Down\&quot;, Color.RED);\ndiff.DefineColor(\&quot;Negative and Up\&quot;, Color.DARK_RED);\ndiff.AssignValueColor(if diff &gt;= 0 then if diff &gt; diff[1] then diff.Color(\&quot;Positive and Up\&quot;) else diff.Color(\&quot;Positive and Down\&quot;) else if diff &lt; diff[1] then diff.Color(\&quot;Negative and Down\&quot;) else diff.Color(\&quot;Negative and Up\&quot;));\n\n\n#mobius divergence calc\ndef pmainh = CompoundValue(1, \n            if pmain &lt; 0 then Double.NaN\n            else if pmain crosses above 0  then pmain\n            else if pmain &gt; 0 and  pmain &gt; pmainh[1]\n            then pmain else pmainh[1], 0);\n\ndef Valueh = CompoundValue(1, \n             if pmain &lt; 0 then Double.NaN\n             else if pmain crosses above 0  then high\n             else if pmain &gt; 0 and high &gt; Valueh[1] then high\n             else Valueh[1], 0);\n\nplot divLowSignal = if pmain &gt; 0 and  high &gt; Valueh[1] and pmain &lt; pmainh[1] then 0\n                 else Double.NaN;\ndivLowSignal.SetPaintingStrategy(PaintingStrategy.SQUARES);\ndivLowSignal.SetLineWeight(5);\ndivLowSignal.SetDefaultColor(Color.dark_orange);\n\ndef pmainL = CompoundValue(1, if pmain &gt; 0 then Double.NaN\n                             else if pmain crosses below 0  then pmain\n                             else if pmain &lt; 0 and pmain &lt; pmainl[1] then pmain\n                             else pmainl[1], 0);\n\ndef ValueL = CompoundValue(1, if pmain &gt; 0  then Double.NaN\n                              else if pmain crosses below 0 then low\n                              else if pmain &lt; 0 and low &lt; Valuel[1] then low\n                              else Valuel[1], 0);\n\nplot divUpSignall = if pmain &lt; 0 and   low &lt; Valuel[1] and pmain &gt; pmainl[1] then 0\n                 else Double.NaN;\ndivupSignall.SetPaintingStrategy(PaintingStrategy.SQUARES);\ndivUpSignall.SetLineWeight(5);\ndivUPSignall.SetDefaultColor(Color.blue);\n\n\n\n#zeroline\nplot zeroLine = 0;\nzeroLine.SetPaintingStrategy(PaintingStrategy.LINE);\nzeroLine.SetLineWeight(1);\nzeroLine.SetDefaultColor(Color.BLACK);\n\n\n#pivots\n\ndef ptrend = pmain;\ndef prange = 2;\ndef pivotHigh = if IsNaN(ptrend[-1]) then 0  else Lowest(ptrend, prange)[1] &gt; ptrend and Lowest(ptrend, prange)[-prange] &gt; ptrend ;\ndef pivotLow =  if  IsNaN(ptrend[-1]) then 0  else Highest(ptrend, prange)[1] &lt; ptrend and Highest(ptrend, prange)[-prange] &lt; ptrend ;\n#study\nplot plotPH = if pivotHigh and show then ptrend else Double.NaN;\nplotPH.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\nplotPH.SetDefaultColor(Color.GREEN);\n\nplot phline = if pivotHigh then pmain else Double.NaN;\nphline.SetDefaultColor(Color.DARK_GREEN);\nphline.EnableApproximation();phline.Hide();\n#\nplot plotPL = if pivotLow and show then ptrend else Double.NaN;\nplotPL.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\nplotPL.SetDefaultColor(Color.RED);\n\nplot plline = if pivotLow then pmain else Double.NaN;\nplline.SetDefaultColor(Color.RED);\nplline.EnableApproximation(); plline.hide();&quot;,name=&quot;_58fa56d7_7ed3_4ff5_b1a8_d0c87dfe1afc&quot;}){inputsMap:TreeMap17{^(&quot;price&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap17})}),^(#%6.SubgraphId(&quot;Subgraph11&quot;),#%6.SubgraphStorableModel{height=80,storableIndicators.+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence:ScriptEssence0{body=&quot;# OBV/OBV_MA  by MerryDay 5/24/20\n#When the OBV (On Balance Volume) crosses OBV’s 20-period moving average, the divergence signal of a trend reversal is confirmed. While research indicates a default of 20 is norm, I have been using a 34 period.  The difference is slight.\n# If the OBV is greater than the OBV ma then a green cloud appears under the OBV.\n\ndeclare lower;\ninput length = 20; #default = 20\ninput price = close;\n\nplot OBV = TotalSum(Sign(price - price[1]) * volume);\nplot OBVma = Average(OBV, length);\n\ndef aboveMA   = OBV &gt;= OBVma ;\n\n\n## LIPSTICK ##\nDefineGlobalColor(\&quot;LabelGreen\&quot;, CreateColor(0, 190, 0)) ;\nDefineGlobalColor(\&quot;PaleGreen\&quot;, CreateColor(180, 220, 180)) ;\nDefineGlobalColor(\&quot;PaleRed\&quot;, CreateColor (220, 200, 200)) ;\nDefineGlobalColor(\&quot;DullGold\&quot;, CreateColor(220, 220, 128)) ;\nDefineGlobalColor(\&quot;BlueJeans\&quot;, CreateColor(0, 150, 200)) ;\nOBVma.SetDefaultColor(GlobalColor(\&quot;DullGold\&quot;));\nOBVma.SetLineWeight(3);\nOBVma.HideBubble();\nOBVma.HideTitle();\n\nOBV.SetPaintingStrategy(PaintingStrategy.LINE_VS_TRIANGLES);\nOBV.SetLineWeight(2);\nOBV.HideBubble();\nOBV.HideTitle();\nOBV.DefineColor(\&quot;Up\&quot;, GlobalColor(\&quot;LabelGreen\&quot;));\nOBV.DefineColor(\&quot;Weak\&quot;, Color.LIGHT_GRAY);\nOBV.DefineColor(\&quot;Down\&quot;, GlobalColor(\&quot;PaleRed\&quot;));\nOBV.AssignValueColor(if OBV &gt; OBVma  then OBV.Color(\&quot;Up\&quot;) else OBV.Color(\&quot;Down\&quot;));\n\nplot OBVlow = if  OBV crosses below OBVma then 1 else 0;\nOBVlow.hide();\n\nplot crossup = if OBV crosses above OBVma then OBV else double.NaN;\ncrossup.HideBubble() ;\ncrossup.HideTitle() ;\ncrossup.SetPaintingStrategy(PaintingStrategy.TRIANGLES);\ncrossup.SetLineWeight(5);\ncrossup.SetDefaultColor(color.blue) ;\nplot crossdown = if OBV crosses below OBVma then OBV else double.NaN;\ncrossdown.HideBubble() ;\ncrossdown.HideTitle() ;\ncrossdown.SetPaintingStrategy(PaintingStrategy.TRIANGLES);\ncrossdown.SetLineWeight(5);\ncrossdown.SetDefaultColor(color.pink) ;\n\nAddCloud(OBV, OBVma, Color.LIGHT_GREEN, Color.PINK);\n\n#Alert(crosses_above_MA, \&quot;What\'s going to happen?\&quot; + GetSymbol(), Alert.BAR, Sound.bell);\nDefineGlobalColor(\&quot;MyCyan\&quot;, CreateColor(150, 0, 255)) ;\nDefineGlobalColor(\&quot;Sell\&quot;, CreateColor(255, 150, 0)) ;\n\n\n# End of OBV/OBV_MA &quot;,name=&quot;_5a6a53b8_41ce_3ef6_a10e_07a88a720b77&quot;}){hidden=&lt;T,inputsMap:TreeMap18{^(&quot;price&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap18})}),^(#%6.SubgraphId(&quot;Subgraph41&quot;),#%6.SubgraphStorableModel{height=80,storableIndicators.+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence:ScriptEssence1{body=&quot;#\n\ndeclare lower;\n\n\n\n###############################\ninput showlable=yes;\n\ninput pricePpm1 = close;\ninput pricePpm2 = close;\ninput pricePpm3 = close;\ninput ppmiSmooth =3;\ninput averageTypePpmiSmooth = AverageType.simple;\n#input signalPeriod = 1;\ndef lookback = 1;\n\ninput ppm1_length = 10;\ninput ppm2_length = 21;\ninput ppm3_length = 40;\ninput fast_length = 10;\ninput slow_length =21;\ndef displace = 0;\ninput averageTypePpm = AverageType.simple;\ninput averageTypefast = AverageType.simple;\ninput averageTypeSlow = AverageType.simple;;# AverageType.EXPONENTIAL;\n#input showMovingAvgLable =yes;\n\n\ndef movAvg_ppm1 = MovingAverage(averageTypePpm, pricePpm1, ppm1_length);\n#def sign = MovingAverage(averageTypePpm, movAvg_ppm1[-displace], signalPeriod);\ndef movAvg_ppm2 = MovingAverage(averageTypePpm, pricePpm2, ppm2_length);\ndef movAvg_ppm3 = MovingAverage(averageTypePpm, pricePpm3, ppm3_length);\n\n \n\n\n \n\n#moving averages\n\ndef   ppm1_ =100*( movAvg_ppm1-movAvg_ppm1[lookback])/( movAvg_ppm1); \ndef   ppm2_ =100*( movAvg_ppm2-movAvg_ppm2[lookback])/( movAvg_ppm2); \ndef   ppm3_ =100*( movAvg_ppm3-movAvg_ppm3[lookback])/(movAvg_ppm3); \n#Plot ppm1 =MovingAverage(AverageType.EXPONENTIAL,ppm[-displace], signalPeriod);\n\n\n\nplot ppm1= MovingAverage(averageTypePpmiSmooth,ppm1_,ppmiSmooth);\nplot ppm2=  MovingAverage(averageTypePpmiSmooth,ppm2_,ppmiSmooth);\nplot ppm3=  MovingAverage(averageTypePpmiSmooth,ppm3_,ppmiSmooth);\n\n\n\n\n\n\n\n\n\n\n\n\n#####\n\n\n\n\n\n\n\n#AddLabel(yes, \&quot; ppm1\&quot;, Color.white);\nplot ppm_d1  = MovingAverage(averageTypefast, ppm1[-displace], fast_length);\nplot ppm_d2 = MovingAverage(averageTypefast, ppm1[-displace], slow_length);\n\ninput showPpmDivLable=yes;\n\nAddLabel(showPpmDivLable, \&quot; ppm1= \&quot;+  roundup(ppm1,3), if ppm1&gt; 0 then Color.LIGHT_GREEN else if ppm1&lt; 0 then color.light_red else Color.Light_GRAY);\nAddLabel(showPpmDivLable, \&quot; d1= \&quot;+  roundup(ppm_d1,3),  Color.green);\nAddLabel(showPpmDivLable, \&quot; d2= \&quot;+  roundup(ppm_d2,3),  Color.cyan);\n\n\n\n#plot ppm1_d1 = MovingAverage(averageTypefast, ppm1[-displace], fast_length);\n#plot ppm1_d2 = MovingAverage(averageTypefast, ppm1[-displace], slow_length);\n\nppm1.setdefaultColor(color.light_ORANGE);\nppm2.setdefaultColor(color.violet);\nppm3.setdefaultColor(color.yellow);\n\nppm2.Hide();\nppm3.Hide();\nppm_d1.setdefaultColor(color.green);\nppm_d2.setdefaultColor(color.cyan);\n\n\nAddLabel(showlable, \&quot;  \&quot;+ ppm1_length+ \&quot;MAvg\&quot; ,ppm1.TakeValueColor ());\nAddLabel(showlable,  astext(movAvg_ppm1), if ppm1&lt; close then Color.LIGHT_GREEN else if ppm1&gt; close then color.light_red else Color.Light_GRAY);\ndef maDif= close- movAvg_ppm1;\n\nAddLabel(showlable and maDif&gt;0, \&quot; +\&quot;+astext(maDif),  Color.LIGHT_GREEN );\nAddLabel(showlable and maDif&lt;=0, \&quot; \&quot;+astext(maDif),  if maDif&lt; 0 then color.LIGHT_red else Color.LIGHT_GRAY);\n\nAddLabel(showlable, \&quot;  \&quot;+ ppm2_length+ \&quot;MAvg\&quot; ,ppm2.TakeValueColor ());\nAddLabel(showlable,  astext(movAvg_ppm2), if ppm2&lt; close then Color.LIGHT_GREEN else if ppm2&gt; close then color.light_red else Color.Light_GRAY);\n\n\nAddLabel(showlable, \&quot;  \&quot;+ ppm3_length+ \&quot;MAvg\&quot; ,ppm3.TakeValueColor ());\nAddLabel(showlable,  astext(movAvg_ppm3), if ppm3&lt; close then Color.LIGHT_GREEN else if ppm3&gt; close then color.light_red else Color.Light_GRAY);\n\n#AddLabel(showlable, \&quot;MA \&quot; + ppm_length + \&quot;=\&quot;+ astext(movAvg_ppm1), if movAvg_ppm1 &gt; close  then Color.RED else if movAvg_ppm1 &lt; close then  Color.GREEN else Color.GRAY);\n\nAddLabel(yes, \&quot; ppm1= \&quot;+  roundup(ppm1,3), if ppm1&gt; 0 then Color.LIGHT_GREEN else if ppm1&lt; 0 then color.light_red else Color.Light_GRAY);\nAddLabel(yes, \&quot; ppm2= \&quot; +   roundup(ppm2,3), if ppm2&gt; 0 then Color.LIGHT_GREEN else if ppm2&lt; 0 then color.light_red else Color.Light_GRAY);\nAddLabel(yes, \&quot; ppm3= \&quot;+  roundup(ppm3,3), if ppm3&gt; 0 then Color.LIGHT_GREEN else if ppm3&lt; 0 then color.light_red else Color.Light_GRAY);\n\n\n##################################\n\n&quot;,name=&quot;_41afd57b_6e78_4ddc_afbf_2d19525412ae&quot;}){inputsMap:TreeMap19{^(&quot;ppmiSmooth&quot;,@Integer2),^(&quot;pricePpm1&quot;,&quot;CLOSE&quot;),^(&quot;pricePpm2&quot;,&quot;CLOSE&quot;),^(&quot;pricePpm3&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap19})}),^(#%6.SubgraphId(&quot;Subgraph43&quot;),#%6.SubgraphStorableModel{height=96,storableIndicators.+(!%7.CompiledStudy.resolveStudy(@ScriptEssence1){hidden=&lt;T,inputsMap:TreeMap20{^(&quot;averageTypePpmiSmooth&quot;,&quot;HULL&quot;),^(&quot;ppmiSmooth&quot;,@Integer0),^(&quot;pricePpm1&quot;,&quot;CLOSE&quot;),^(&quot;pricePpm2&quot;,&quot;CLOSE&quot;),^(&quot;pricePpm3&quot;,&quot;CLOSE&quot;),^(&quot;showlable&quot;,&lt;F)},inputsMap=@TreeMap20})}),^(#%6.SubgraphId(&quot;Subgraph45&quot;),#%6.SubgraphStorableModel{height=80,storableIndicators.+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence{body=&quot;#\n\ndeclare lower;\n\n\n\n###############################\ninput showlable=yes;\n\ninput pricePpm1 = close;\ninput pricePpm2 = close;\ninput pricePpm3 = close;\ninput ppmiSmooth =3;\ninput averageTypePpmiSmooth = AverageType.simple;\n#input signalPeriod = 1;\ndef lookback = 1;\n\ninput ppm1_length = 10;\ninput ppm2_length = 21;\ninput ppm3_length = 40;\ninput fast_length = 10;\ninput slow_length =21;\ndef displace = 0;\ninput averageTypePpm = AverageType.simple;\ninput averageTypefast = AverageType.simple;\ninput averageTypeSlow = AverageType.simple;;# AverageType.EXPONENTIAL;\n#input showMovingAvgLable =yes;\n\n\ndef movAvg_ppm1 = MovingAverage(averageTypePpm, pricePpm1, ppm1_length);\n#def sign = MovingAverage(averageTypePpm, movAvg_ppm1[-displace], signalPeriod);\ndef movAvg_ppm2 = MovingAverage(averageTypePpm, pricePpm2, ppm2_length);\ndef movAvg_ppm3 = MovingAverage(averageTypePpm, pricePpm3, ppm3_length);\n\n \n\n\n \n\n#moving averages\n\ndef   ppm1_ =100*( movAvg_ppm1-movAvg_ppm1[lookback])/( movAvg_ppm1); \ndef   ppm2_ =100*( movAvg_ppm2-movAvg_ppm2[lookback])/( movAvg_ppm2); \ndef   ppm3_ =100*( movAvg_ppm3-movAvg_ppm3[lookback])/(movAvg_ppm3); \n#Plot ppm1 =MovingAverage(AverageType.EXPONENTIAL,ppm[-displace], signalPeriod);\n\n\n\nplot ppm1= MovingAverage(averageTypePpmiSmooth,ppm1_,ppmiSmooth);\nplot ppm2=  MovingAverage(averageTypePpmiSmooth,ppm2_,ppmiSmooth);\nplot ppm3=  MovingAverage(averageTypePpmiSmooth,ppm3_,ppmiSmooth);\n\n#AddLabel(yes, \&quot; ppm2\&quot;, Color.white);\nplot ppm_d1  = MovingAverage(averageTypefast, ppm2[-displace], fast_length);\nplot ppm_d2 = MovingAverage(averageTypefast, ppm2[-displace], slow_length);\n\ninput showPpmDivLable=yes;\n\nAddLabel(showPpmDivLable, \&quot; ppm2= \&quot;+  roundup(ppm2,3), if ppm2&gt; 0 then Color.LIGHT_GREEN else if ppm2&lt; 0 then color.light_red else Color.Light_GRAY);\nAddLabel(showPpmDivLable, \&quot; d1= \&quot;+  roundup(ppm_d1,3),  Color.green);\nAddLabel(showPpmDivLable, \&quot; d2= \&quot;+  roundup(ppm_d2,3),  Color.cyan);\n\n\n\n#plot ppm1_d1 = MovingAverage(averageTypefast, ppm1[-displace], fast_length);\n#plot ppm1_d2 = MovingAverage(averageTypefast, ppm1[-displace], slow_length);\n\nppm2.setdefaultColor(color.light_ORANGE);\nppm1.setdefaultColor(color.violet);\nppm3.setdefaultColor(color.yellow);\n\nppm1.Hide();\nppm3.Hide();\nppm_d1.setdefaultColor(color.green);\nppm_d2.setdefaultColor(color.cyan);\n\n\nAddLabel(showlable, \&quot;  \&quot;+ ppm1_length+ \&quot;MAvg\&quot; ,ppm1.TakeValueColor ());\nAddLabel(showlable,  astext(movAvg_ppm1), if ppm1&lt; close then Color.LIGHT_GREEN else if ppm1&gt; close then color.light_red else Color.Light_GRAY);\ndef maDif= close- movAvg_ppm1;\n\nAddLabel(showlable and maDif&gt;0, \&quot; +\&quot;+astext(maDif),  Color.LIGHT_GREEN );\nAddLabel(showlable and maDif&lt;=0, \&quot; \&quot;+astext(maDif),  if maDif&lt; 0 then color.LIGHT_red else Color.LIGHT_GRAY);\n\nAddLabel(showlable, \&quot;  \&quot;+ ppm2_length+ \&quot;MAvg\&quot; ,ppm2.TakeValueColor ());\nAddLabel(showlable,  astext(movAvg_ppm2), if ppm2&lt; close then Color.LIGHT_GREEN else if ppm2&gt; close then color.light_red else Color.Light_GRAY);\n\n\nAddLabel(showlable, \&quot;  \&quot;+ ppm3_length+ \&quot;MAvg\&quot; ,ppm3.TakeValueColor ());\nAddLabel(showlable,  astext(movAvg_ppm3), if ppm3&lt; close then Color.LIGHT_GREEN else if ppm3&gt; close then color.light_red else Color.Light_GRAY);\n\n#AddLabel(showlable, \&quot;MA \&quot; + ppm_length + \&quot;=\&quot;+ astext(movAvg_ppm1), if movAvg_ppm1 &gt; close  then Color.RED else if movAvg_ppm1 &lt; close then  Color.GREEN else Color.GRAY);\n\nAddLabel(yes, \&quot; ppm1= \&quot;+  roundup(ppm1,3), if ppm1&gt; 0 then Color.LIGHT_GREEN else if ppm1&lt; 0 then color.light_red else Color.Light_GRAY);\nAddLabel(yes, \&quot; ppm2= \&quot; +   roundup(ppm2,3), if ppm2&gt; 0 then Color.LIGHT_GREEN else if ppm2&lt; 0 then color.light_red else Color.Light_GRAY);\nAddLabel(yes, \&quot; ppm3= \&quot;+  roundup(ppm3,3), if ppm3&gt; 0 then Color.LIGHT_GREEN else if ppm3&lt; 0 then color.light_red else Color.Light_GRAY);\n\n\n##################################\n\n&quot;,name=&quot;_241ab338_5374_4fa4_814b_3fe4a4769fae&quot;}){inputsMap:TreeMap21{^(&quot;ppmiSmooth&quot;,@Integer2),^(&quot;pricePpm1&quot;,&quot;CLOSE&quot;),^(&quot;pricePpm2&quot;,&quot;CLOSE&quot;),^(&quot;pricePpm3&quot;,&quot;CLOSE&quot;),^(&quot;showlable&quot;,&lt;F)},inputsMap=@TreeMap21})}),^(#%6.SubgraphId(&quot;Subgraph47&quot;),#%6.SubgraphStorableModel{height=80,storableIndicators.+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence{body=&quot;#\n\ndeclare lower;\n\n\n\n###############################\ninput showMovLable=yes;\ninput showPpmDivLable=yes;\ninput pricePpm1 = close;\ninput pricePpm2 = close;\ninput pricePpm3 = close;\ninput ppmiSmooth =3;\ninput averageTypePpmiSmooth = AverageType.simple;\n#input signalPeriod = 1;\ndef lookback = 1;\n\ninput ppm1_length = 10;\ninput ppm2_length = 21;\ninput ppm3_length = 40;\ninput fast_length = 10;\ninput slow_length =21;\ndef displace = 0;\ninput averageTypePpm = AverageType.simple;\ninput averageTypefast = AverageType.simple;\ninput averageTypeSlow = AverageType.simple;;# AverageType.EXPONENTIAL;\n#input showMovingAvgLable =yes;\n\n\ndef movAvg_ppm1 = MovingAverage(averageTypePpm, pricePpm1, ppm1_length);\n#def sign = MovingAverage(averageTypePpm, movAvg_ppm1[-displace], signalPeriod);\ndef movAvg_ppm2 = MovingAverage(averageTypePpm, pricePpm2, ppm2_length);\ndef movAvg_ppm3 = MovingAverage(averageTypePpm, pricePpm3, ppm3_length);\n\n \n\n\n \n\n#moving averages\n\ndef   ppm1_ =100*( movAvg_ppm1-movAvg_ppm1[lookback])/( movAvg_ppm1); \ndef   ppm2_ =100*( movAvg_ppm2-movAvg_ppm2[lookback])/( movAvg_ppm2); \ndef   ppm3_ =100*( movAvg_ppm3-movAvg_ppm3[lookback])/(movAvg_ppm3); \n#Plot ppm1 =MovingAverage(AverageType.EXPONENTIAL,ppm[-displace], signalPeriod);\n\n\n\nplot ppm1= MovingAverage(averageTypePpmiSmooth,ppm1_,ppmiSmooth);\nplot ppm2=  MovingAverage(averageTypePpmiSmooth,ppm2_,ppmiSmooth);\nplot ppm3=  MovingAverage(averageTypePpmiSmooth,ppm3_,ppmiSmooth);\n\n\n#AddLabel(yes, \&quot; ppm3\&quot;, Color.white);\nplot ppm_d1  = MovingAverage(averageTypefast, ppm3[-displace], fast_length);\nplot ppm_d2 = MovingAverage(averageTypefast, ppm3[-displace], slow_length);\n\n\nAddLabel(showPpmDivLable, \&quot; ppm3= \&quot;+  roundup(ppm3,3), if ppm3&gt; 0 then Color.LIGHT_GREEN else if ppm3&lt; 0 then color.light_red else Color.Light_GRAY);\nAddLabel(showPpmDivLable, \&quot; d1= \&quot;+  roundup(ppm_d1,3),  Color.green);\nAddLabel(showPpmDivLable, \&quot; d2= \&quot;+  roundup(ppm_d2,3),  Color.cyan);\n\n\n#plot ppm1_d1 = MovingAverage(averageTypefast, ppm1[-displace], fast_length);\n#plot ppm1_d2 = MovingAverage(averageTypefast, ppm1[-displace], slow_length);\n\nppm3.setdefaultColor(color.light_ORANGE);\nppm1.setdefaultColor(color.violet);\nppm2.setdefaultColor(color.yellow);\n\nppm1.Hide();\nppm2.Hide();\nppm_d1.setdefaultColor(color.green);\nppm_d2.setdefaultColor(color.cyan);\n\n\nAddLabel(showMovLable, \&quot;  \&quot;+ ppm1_length+ \&quot;MAvg\&quot; ,ppm1.TakeValueColor ());\nAddLabel(showMovLable,  astext(movAvg_ppm1), if ppm1&lt; close then Color.LIGHT_GREEN else if ppm1&gt; close then color.light_red else Color.Light_GRAY);\ndef maDif= close- movAvg_ppm1;\n\nAddLabel(showMovLable and maDif&gt;0, \&quot; +\&quot;+astext(maDif),  Color.LIGHT_GREEN );\nAddLabel(showMovLable and maDif&lt;=0, \&quot; \&quot;+astext(maDif),  if maDif&lt; 0 then color.LIGHT_red else Color.LIGHT_GRAY);\n\nAddLabel(showMovLable, \&quot;  \&quot;+ ppm2_length+ \&quot;MAvg\&quot; ,ppm2.TakeValueColor ());\nAddLabel(showMovLable,  astext(movAvg_ppm2), if ppm2&lt; close then Color.LIGHT_GREEN else if ppm2&gt; close then color.light_red else Color.Light_GRAY);\n\n\nAddLabel(showMovLable, \&quot;  \&quot;+ ppm3_length+ \&quot;MAvg\&quot; ,ppm3.TakeValueColor ());\nAddLabel(showMovLable,  astext(movAvg_ppm3), if ppm3&lt; close then Color.LIGHT_GREEN else if ppm3&gt; close then color.light_red else Color.Light_GRAY);\n\n#AddLabel(showlable, \&quot;MA \&quot; + ppm_length + \&quot;=\&quot;+ astext(movAvg_ppm1), if movAvg_ppm1 &gt; close  then Color.RED else if movAvg_ppm1 &lt; close then  Color.GREEN else Color.GRAY);\n\nAddLabel(yes, \&quot; ppm1= \&quot;+  roundup(ppm1,3), if ppm1&gt; 0 then Color.LIGHT_GREEN else if ppm1&lt; 0 then color.light_red else Color.Light_GRAY);\nAddLabel(yes, \&quot; ppm2= \&quot; +   roundup(ppm2,3), if ppm2&gt; 0 then Color.LIGHT_GREEN else if ppm2&lt; 0 then color.light_red else Color.Light_GRAY);\nAddLabel(yes, \&quot; ppm3= \&quot;+  roundup(ppm3,3), if ppm3&gt; 0 then Color.LIGHT_GREEN else if ppm3&lt; 0 then color.light_red else Color.Light_GRAY);\n\n\n##################################\n\n&quot;,name=&quot;_eabbbfd6_185e_4ece_8538_e1ec527454ae&quot;}){inputsMap:TreeMap22{^(&quot;ppmiSmooth&quot;,@Integer2),^(&quot;pricePpm1&quot;,&quot;CLOSE&quot;),^(&quot;pricePpm2&quot;,&quot;CLOSE&quot;),^(&quot;pricePpm3&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap22})}),^(#%6.SubgraphId(&quot;Subgraph51&quot;),#%6.SubgraphStorableModel{height=171,storableIndicators.+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence{body=&quot;declare lower;\ninput priceSmi = hlc3;\ninput price = close;\n\ninput over_bought = 40.0;\ninput over_sold = -40.0;\ninput percentDLength = 4;\ninput percentKLength = 5;\n\ndef min_low = Lowest(low, percentKLength);\ndef max_high = Highest(high, percentKLength);\ndef rel_diff = priceSmi - (max_high + min_low) / 2;\ndef diff = max_high - min_low;\n\ndef avgrel = ExpAverage(ExpAverage(rel_diff, percentDLength), percentDLength);\ndef avgdiff = ExpAverage(ExpAverage(diff, percentDLength), percentDLength);\n\nplot SMI = if avgdiff != 0 then avgrel / (avgdiff / 2) * 100 else 0;\nSMI.SetDefaultColor(GetColor(1));\n\nplot AvgSMI = ExpAverage(SMI, percentDLength);\nAvgSMI.SetDefaultColor(Color.CYAN);\nplot z = 0;\nz.SetStyle(Curve.SHORT_DASH);\nz.SetDefaultColor(Color.YELLOW);\n\nplot overbought = over_bought;\noverbought.SetDefaultColor(GetColor(5));\n\nplot oversold = over_sold;\noversold.SetDefaultColor(GetColor(5));\n\ninput Buyth=-40;\n\ninput thCondition = {default \&quot;blw\&quot; , \&quot;abv\&quot;};\ndef cond;\ndef Na = Double.Nan;\n\nswitch (thCondition)\n{\n case blw: \n    cond = 1;\ncase abv :\n   cond = 0;\n}\nplot buySmi;\nplot sellsmi;\n\nif cond \n{\n buySmi = if SMI crosses above AvgSMI and SMI &lt;Buyth and SMI&lt;over_bought then SMI* 0.996 else Na;\n#sell = if SMI crosses below AvgSMI and SMI &gt;Sth and SMI&lt;80 then 1 else 0;\n}\nelse{\n buySmi = if SMI crosses above AvgSMI and SMI &gt;Buyth and SMI&lt;60 then Smi* 0.996 else na;\n\n\n}\n\n\n\nsellSmi = if SMI crosses below AvgSMI and SMI &gt;60 and SMI&lt;80 then smi* 1.004 else na;\n\nSellSmi.setpaintingStrategy(PaintingStrategy.ARROW_down);\n\nsellSmi.setDefaultColor(color.pink);\nBuySmi.setpaintingStrategy(PaintingStrategy.ARROW_up);\n\nBuySmi.setDefaultColor(color.yellow);\nBuySMI.SetLineWeight(3);\nSellSMI.SetLineWeight(3);\n\n\n#AddCloud(-100, over_sold, Color.RED, Color.GREEN);\n#AddCloud(over_bought, 100, Color.GREEN, Color.RED);\n\n#####\ndef cldH = if SMI &gt;= overbought then SMI else overbought;\nAddCloud(cldH, overbought, Color.GREEN, Color.GREEN);\n\ndef cldL = if SMI &lt; oversold then SMI else oversold;\nAddCloud(cldL, oversold, Color.RED, Color.RED);\noverbought.SetDefaultColor(GetColor(7));\noversold.SetDefaultColor(GetColor(7));\nSMI.SetLineWeight(1);\nAvgSMI.SetLineWeight(3);\noverbought.SetStyle(Curve.SHORT_DASH);\noversold.SetStyle(Curve.SHORT_DASH);\n\n####\n\n\n####$$$$$$$$\n\n\ninput priceSlm = close;\n\ninput superFastLength = 8;\n\ninput fastLengthSlm = 13;\n\ninput slowLengthSlm = 21;\n\ninput displaceSlm = 0;\n\n\ninput averageTypeSlm = AverageType.EXPONENTIAL;\n\ndef mov_avg8 = MovingAverage(averageTypeSlm, priceSlm[-displaceSlm], superFastLength);\n\ndef mov_avg13 = MovingAverage(averageTypeSlm, priceSlm[-displaceSlm], fastLengthSlm);\n\ndef mov_avg21 = MovingAverage(averageTypeSlm, priceSlm[-displaceSlm], slowLengthSlm);\n \n#moving averages\n\ndef Superfast = mov_avg8;\n\ndef Fast = mov_avg13;\n\ndef Slow = mov_avg21;\n\n\ndef buy = mov_avg8 &gt; mov_avg13 and mov_avg13 &gt; mov_avg21 and low &gt; mov_avg8;\n\ndef stopbuy = mov_avg8 &lt;= mov_avg13;\n\ndef buynow = !buy[1] and buy;\n\ndef buysignal = CompoundValue(1, if buynow and !stopbuy then 1 else if buysignal[1] == 1 and stopbuy then 0 else buysignal[1], 0);\n\n\ndef Buy_Signal = buysignal[1] == 0 and buysignal == 1;\n\ndef Momentum_Down = buysignal[1] == 1 and buysignal == 0;\n\n\ndef sell = mov_avg8 &lt; mov_avg13 and mov_avg13 &lt; mov_avg21 and high &lt; mov_avg8;\n\ndef stopsell = mov_avg8 &gt;= mov_avg13;\n\ndef sellnow = !sell[1] and sell;\n\ndef sellsignal = CompoundValue(1, if sellnow and !stopsell then 1 else if sellsignal[1] == 1 and stopsell then 0 else sellsignal[1], 0);\n\n\ndef Sell_Signal = sellsignal[1] == 0 and sellsignal;\n\ndef Momentum_Up = sellsignal[1] == 1 and sellsignal == 0;\n \n# when using this as a custom scan, change the word plot to def\n# then remove the \'#\' from in front of one of the \&quot;plot Scan\&quot; statements below\n########\n\ninput length = 20;\ninput priceHMA = close;\n\ndef HMA = MovingAverage(AverageType.HULL, priceHMA, length);\ndef HMA_Up =  HMA &gt; HMA[1];\ndef HMA_Down = ! HMA_Up;\n\n###############\n\n#def Colorbars1 = if buysignal == 1 then 1 else if sellsignal == 1 then 2 else if buysignal == 0 or sellsignal == 0 then 3 else 0;\n\n\n\nAvgSMI.DefineColor(\&quot;Buy\&quot;, Color.DARK_GREEN);\n\n\nAvgSMI.DefineColor(\&quot;Sell\&quot;, Color.RED);\n\nAvgSMI.DefineColor(\&quot;Neutral\&quot;, Color.PLUM);\n#RSI.DefineColor(\&quot;NeutralDown\&quot;, Color.orange);\nAvgSMI.DefineColor(\&quot;HullMA_up\&quot;, Color.BLUE);\n\nAvgSMI.DefineColor(\&quot;HullMA_down\&quot;, Color.ORANGE);\n\nAvgSMI.AssignValueColor(if buysignal and HMA_Up then AvgSMI.Color(\&quot;Buy\&quot;) else if buysignal and !HMA_Up then AvgSMI.Color(\&quot;HullMA_down\&quot;) else if sellsignal and HMA_Down  then AvgSMI.Color(\&quot;Sell\&quot;) else  if sellsignal and !HMA_Down  then AvgSMI.Color(\&quot;HullMA_up\&quot;) else  AvgSMI.Color(\&quot;neutral\&quot;));\n;#\n# if Momentum_Up then  RSI.color(\&quot;neutralUp\&quot;) else  RSI.color(\&quot;neutraldown\&quot;));\n\n\n\n\n\n####$$$$$$$$$$$$$$$$\n###############\n\n\n\n#plot UpSignal = if (buysignal and SMI crosses above AvgSMI-3 and SMI &lt;40) then SMI-3 else Double.NaN;\n\nplot UpSignal = if ((buysignal or Momentum_Up) and SMI crosses above AvgSMI ) then SMI - 3 else Double.NaN;\nplot DownSignal = if (sellsignal and SMI crosses below AvgSMI + 3 and SMI &gt; over_bought) then SMI + 3 else Double.NaN;\ninput showBreakoutSignals = yes;\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\n\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\n\n\n\n\n\n######$$$$\n\n\n#RSI\ninput overBoughtRsi = 75;\ninput overSoldRsi = 25;\ninput rsiLength = 14;\ninput rsiPrice = close;\ninput rsi_th = 42;\ndef rsi_val = reference RSI(length = rsiLength, price = rsiPrice );\nplot rsi_val_normalized = rsi_val - 50;\n####\n\n\n\nAddLabel(yes, \&quot;RSI = \&quot; + rsi_val , if rsi_val &gt; overBoughtRsi  then Color.RED else if rsi_val &lt; overSoldRsi then  Color.GREEN else Color.GRAY);\n##########\n#########################RSI\n\n\n\n\n\nrsi_val_normalized.DefineColor(\&quot;OverBought\&quot;, Color.LIGHT_RED);\nrsi_val_normalized.DefineColor(\&quot;Normal\&quot;, GetColor(7));\nrsi_val_normalized.DefineColor(\&quot;OverSold\&quot;, Color.LIGHT_GREEN);\nrsi_val_normalized.DefineColor(\&quot;Below50\&quot;, Color.CYAN);\nrsi_val_normalized.DefineColor(\&quot;Above50\&quot;, Color.PINK);\n\nrsi_val_normalized.AssignValueColor(if rsi_val &gt;= overBoughtRsi then rsi_val_normalized.Color(\&quot;OverBought\&quot;) else if rsi_val &lt;= overSoldRsi then rsi_val_normalized.Color(\&quot;OverSold\&quot;) else if (rsi_val &gt; overSoldRsi and rsi_val &lt; rsi_th) then rsi_val_normalized.Color(\&quot;Below50\&quot;) else if (rsi_val &lt; overBoughtRsi and rsi_val &gt; rsi_th) then rsi_val_normalized.Color(\&quot;Above50\&quot;) else  rsi_val_normalized.Color(\&quot;Normal\&quot;)) ;\n\n\n\n\n\n#########\ndef ImpVol = imp_volatility();\n\nAddLabel(yes, \&quot;iV= \&quot; + ImpVol, Color.GRAY);\n\n#trend reversal\ndef y = rsi_val ;\ninput riReversLength = 2;\ninput lookBack = 2;\n\n\ndef rsi_expAvg = ExpAverage(rsi_val, riReversLength);\n\n#trend reversal\ndef overBoughtReversal = if ((rsi_expAvg &gt; overBoughtRsi)within 2 bar) and  (rsi_expAvg crosses above rsi_val) then price else 0;# if (rsi_expAvg &gt; OverBought and  rsi_expAvg crosses above rsi_val  within 3 bar ) then 40 else 0;\ndef oversoldRevesal = if ((rsi_expAvg &lt; overSoldRsi)within 2 bar) and  (rsi_expAvg crosses below rsi_val within 2 bar) then price else 0;\n\n##############\n########!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n#vwap vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\n\n#####^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n#MACD\n\ninput fastLength = 12;\ninput slowLength = 26;\ninput MACDLength = 9;\ninput displace = 0;\ndef fastAvg = Sum(volume * price, fastLength) / Sum(volume, fastLength);\ndef slowAvg = Sum(volume * price, slowLength) / Sum(volume, slowLength);\ndef Value = fastAvg - slowAvg;\ndef Avg = ExpAverage(Value, MACDLength);\ndef MACD_Diff  = Value - Avg;\n#def ZeroLine = 0;\n\ninput def_cond = no;\ndef MACD_cond_logic = if (def_cond) then MACD_Diff &lt;= 0 else yes;\n\n\n#MACD Pivot reversal\n#input FilterLength=3;\n######################\n#def MACDV_Diff_expAvg = ExpAverage(MACD_Diff, FilterLength);\n#plot oversoldRevesalMACDV =if ((Diff_MACDV &lt; MacdZeroLine)within lookBack bar) and  ( Diff_MACDV crosses above   MACDV_Diff_expAvg within lookBack bar)and Diff_MACDV &gt; Diff_MACDV[1] then 1 else 0;# if (MACDV_Diff_expAvg &gt; OverBought and  MACDV_Diff_expAvg crosses above rsi_val  within 3 bar ) then 40 else 0;\n#plot overBoughtReversalMACDV = if ((Diff_MACDV &gt; MacdZeroLine)within lookBack bar) and  (MACDV_Diff_expAvg crosses above  Diff_MACDV  within lookBack bar)  and Diff_MACDV &lt; Diff_MACDV[1] and Diff_MACDV&gt;0 then 1 else 0;\n\n\n#trend Pivot reversal\ndef twoBarPivotMACD_Buy =  MACD_Diff &gt; MACD_Diff[1] and MACD_Diff[1] &gt; MACD_Diff[2] and MACD_Diff[2] &lt; MACD_Diff[3] and MACD_Diff[3] &lt; MACD_Diff [4];\ndef twoBarPivotMACD_Sell = MACD_Diff &lt; MACD_Diff[1] and MACD_Diff[1] &lt; MACD_Diff[2] and MACD_Diff[2] &gt; MACD_Diff[3] and MACD_Diff[3] &gt; MACD_Diff [4];\n###################\n\n\ndef uptrend = if price &gt; price[1] and price[1] &gt;= price[2] then 1 else 0;\n\n#####################################-----------------\n\n\n\ndef SMI_Buy_Signal = if  (AvgSMI crosses above overbought  within lookBack bar) and SMI &gt;  AvgSMI and (rsi_val &gt; overSoldRsi and rsi_val &lt; overBoughtRsi + 10 ) and (uptrend) then 1 else 0;\n\n\nplot buy2 = SMI_Buy_Signal;\n\n#def  buySvix_Signal = if ( MACD_cond_logic  and  EMA_condition and  oversoldRevesal  and buySvix &lt; Zeroline - 10 ) then 1 else 0;\n#plot buy3 = buySvix_Signal;\n\n\n\n\n\n\ndef SMI_Sell_Signal = if ( (SMI crosses below AvgSMI within lookBack bar) and (overBoughtReversal)) then 1 else 0;\n#def sellSignal2 = if ((rsi_val  &gt; overBoughtRsi within 3 bar) and (smi crosses below AvgSMI within 3 bar)) then 1 else 0;\n\n\nplot sell2 = SMI_Sell_Signal;\n\n#######\n\n#def FVE_buySignal = conVwapBuy and oversoldRevesal and pFVE_Bull  and MACD_cond_logic ;# and Diff &gt;= 0;\n#def sig_buy = pFVE_Bull and Diff &gt;= 0;\n#plot buy4 = FVE_buySignal ;\n\n\n#def FVE_sellSignal = overBoughtReversal and pFVE_Bear ;\n#plot sell4 = FVE_sellSignal;\nplot buy5 = twoBarPivotMACD_Buy and oversoldRevesal;\nplot sell5 = twoBarPivotMACD_Sell and overBoughtReversal;\n\n####\n#def buySignal2 = if (oversoldRevesal  and buythedip2 &lt; Zeroline ) then 1 else 0;\n\n#def buySignal3 = if ( oversoldRevesal  and buythedip3 &lt; Zeroline - 10 ) then 1 else 0;\n#plot buy3 = buySignal3;\ninput bubble = no;\nAddChartBubble(bubble and buy2 == 1, buy2, \&quot;B2SMI= \&quot; +  low[1] + \&quot; rsi \&quot; + rsi_val + \&quot; w \&quot; + vwap[1], Color.LIGHT_ORANGE, no);\n#AddChartBubble(buy3 == 1, buy3,  \&quot;B3Svix= \&quot; + price + \&quot; rsi \&quot; + rsi_val, Color.LIGHT_GRAY, no);\n#AddChartBubble(buy4 == 1, buy4,  \&quot;B4FVE= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.YELLOW, no);\nAddChartBubble(bubble and buy5 == 1, buy5,  \&quot;B5Macd= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.CYAN, no);\n\n#AddChartBubble(sell1 == 1, sell1, \&quot;S1STR= \&quot; + price + \&quot; rsi \&quot; + rsi_val, Color.LIGHT_RED, no);#Buy the Dip\n\nAddChartBubble(bubble and sell2 == 1, sell2, \&quot;S2SMI= \&quot; + price + \&quot; rsi \&quot; + rsi_val, Color.PINK, no);#Buy the Dip\n#AddChartBubble(sell4 == 1, sell4, \&quot;S4FVE= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.VIOLET, no);#Buy the Dip\nAddChartBubble(bubble and sell5 == 1, sell5, \&quot;S5Macd= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.BLUE, no);#Buy the Dip\n#AddChartBubble(oversoldRevesal , close, rsi_val, Color.blue, no);#Buy the Dip\n\ndef o = open;\ndef c = close;\ndef h = high;\ndef l = low;\n\nplot d1 = ((h - l) / o) * 100;\nplot d2 = ((h - l) / (c - o)) * 1;\nplot d = ((c - c[1]) / c[1]) * 100;\nd1.Hide();\nd2.Hide();\nd.Hide();\n\n\ninput vfiLength = 130;\ninput averageLength = 100;\ninput trendQualityLength = 63;\ninput maxStiffness = 7;\ninput marketIndex = \&quot;SPY\&quot;;\ninput weightForMoneyFlow = 1.0;\ninput weightForTradingAboveAverage = 1.0;\ninput weightForUptrend = 1.0;\ninput weightForTrendQuality = 1.0;\ninput weightForMarketDirection = 2.0;\ninput showLabel = No;\n\ndef vfi = reference VolumeFlowIndicator(length = vfiLength, \&quot;max volume cut off\&quot; = 2.5);\ndef sma = Average(close, averageLength);\ndef ema = ExpAverage(close(marketIndex), averageLength);\ndef stiffness = Sum(close &lt; sma, trendQualityLength);\n\ndef Score;\ndef MoneyFlow = vfi &gt; 0;\ndef TradingAboveAverage = close &gt; sma;\ndef Uptrend1 = sma &gt; sma[4];\ndef TrendQuality = stiffness &lt;= maxStiffness;\ndef MarketDirection = ema &gt;= ema[2];\n\nScore = weightForMoneyFlow * MoneyFlow + weightForTradingAboveAverage * TradingAboveAverage + weightForUptrend * uptrend + weightForTrendQuality * TrendQuality + weightForMarketDirection * MarketDirection;\n\n\nAddLabel(showLabel and MoneyFlow, \&quot;Money flow\&quot;, GetColor(2));\nAddLabel(showLabel and TradingAboveAverage, \&quot;Trading above average\&quot;, GetColor(3));\nAddLabel(showLabel and Uptrend1, \&quot;Uptrend\&quot;, GetColor(4));\nAddLabel(showLabel and TrendQuality, \&quot;Trend quality\&quot;, GetColor(5));\nAddLabel(showLabel and TrendQuality, \&quot;Trend quality\&quot;, GetColor(5));\nAddLabel(showLabel and MarketDirection, \&quot;Market direction\&quot;, GetColor(6));\nAddLabel(showLabel , \&quot;Market score \&quot; + Score, GetColor(7));&quot;,name=&quot;_7662dae8_fa6f_4a07_aa35_2ec04cb46236&quot;}){hidden=&lt;T,inputsMap:TreeMap23{^(&quot;price&quot;,&quot;CLOSE&quot;),^(&quot;priceSlm&quot;,&quot;CLOSE&quot;),^(&quot;rsiPrice&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap23})}),^(#%6.SubgraphId(&quot;Subgraph53&quot;),#%6.SubgraphStorableModel{height=289,storableIndicators.+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence{body=&quot;plot Data = close;#Created by Buy Low and given permission to share\n#Renamed SMI Trigger System by Hguru\n#IronRod Lower (may2015)- hull smoothed SMI with AwsomeOscillator histogram\n#  ribbonStudy added- based on distance between midprice and ema(20)\n# This is the smi-based lower Ive been using for quite a while:  I look for red on red and green on green for trading, where for example both the cloud is red and the smi dashed line is red.  Most reliable and easy to read signals Ive found.\n\n#Look for the Dashed lines to turn color and Avg line to cross the Dash line for an entry but with more risk, next entry when avg line and dashed color line  crosses the 40 line. Next and probably the best risk is when the avg line and dashed line cross the zero line and Dashed line and cloud are the same color. I use this with a MACD crossover arrow setting at 5,13,4 or 5,13,6 or 3,13,6\n\n#Not 100% on the ADX vertical line and histogram this might need to be adjusted to match a normal ADX line. The ADX vertical line can be turned off in the edit study. The hisotgram can be hidden as well.\n\n#Use with the Upper matching MP_SMIandVerticalLineWarning System  here&gt;&gt;&gt;  http://tos.mx/mDvxaX\n\n#use setting gridsize .10 for/CL for tick charts and lower agg time frames and 1.0 for 1 hour and Daily.\n\ndeclare lower;\n#SMI engine\ninput gridsize = 1.0;\ninput aoscale = 1;\ninput smiscale = 100;\ninput audio = yes;\ninput label = yes;\ninput smilimit = 40.0;\ninput adxvline = yes;\n\ndef percentDLength = 13;\ndef percentKLength = 21;\ndef smihull = 5;\ndef anglescalingfactor = 1 / gridsize;\n\ndef min_low = Lowest(low, percentKLength);\ndef max_high = Highest(high, percentKLength);\ndef rel_diff = close - (max_high + min_low) / 2;\ndef diffx = max_high - min_low;\n\ndef avgrel = ExpAverage(ExpAverage(rel_diff, percentDLength), percentDLength);\ndef avgdiff = ExpAverage(ExpAverage(diffx, percentDLength), percentDLength);\n#plot SMI =  if avgdiff != 0 then avgrel / (avgdiff / 2) * smiscale else 0;\nplot SMI = ExpAverage( if avgdiff != 0 then avgrel / (avgdiff / 2) * smiscale else 0, 3);\n#smi.setDefaultColor(getColor(1));\nSMI.DefineColor(\&quot;Up\&quot;, Color.DARK_GREEN);\nSMI.DefineColor(\&quot;Down\&quot;, Color.DOWNTICK);\nSMI.DefineColor(\&quot;flat\&quot;, Color.GRAY);\nSMI.AssignValueColor(if SMI &gt;= SMI[1] then SMI.Color(\&quot;up\&quot;) else SMI.Color(\&quot;down\&quot;));\nSMI.SetLineWeight(4);\nSMI.SetStyle(Curve.SHORT_DASH);\n\nplot SMI1 = if avgdiff != 0 then avgrel / (avgdiff / 2) * smiscale else 0;\nSMI1.SetDefaultColor(Color.GRAY);\n\nplot upper = smilimit;\nupper.SetDefaultColor(Color.BLUE);\n\nplot lower = -smilimit;\nlower.SetDefaultColor(Color.BLUE);\n\n\n\nplot Zero = 0;\nZero.SetDefaultColor(Color.DARK_GRAY);\n\n#AddCloud(SMI, smilimit, Color.GREEN, Color.LIGHT_GRAY);\n#AddCloud(-smilimit, SMI, Color.RED, Color.LIGHT_GRAY);\nAddCloud(SMI, 0, Color.LIGHT_GREEN, CreateColor(255, 50, 50));\n\nAlert(audio and SMI crosses above 0, \&quot;SMI Long\&quot;,  Alert.BAR, Sound.Ring);\nAlert(audio and SMI crosses below 0, \&quot;SMI Short\&quot;,  Alert.BAR, Sound.Ring);\nAlert(audio and SMI crosses smilimit, \&quot;\&quot;, Alert.BAR, Sound.Bell);\nupper.SetDefaultColor(Color.RED);\n#upper.SetStyle(Curve.SHORT_DASH);\nlower.SetDefaultColor(Color.UPTICK);\n#lower.SetStyle(Curve.SHORT_DASH);\n\n#AddCloud(diff, SMI, Color.DOWNTICK, Color.UPTICK);\nAddLabel(label and yes, \&quot;Dashed= SMI, cloud w/limit; Histogram = mAwesomeOscillator\&quot; , Color.BLUE);\n\n#adx histogram\n\ninput length = 14;#5;\ninput averageType = AverageType.WILDERS;\n\nplot ADX = (DMI(length, averageType).ADX) - 18;\nADX.SetPaintingStrategy(PaintingStrategy.LINE);\nADX.SetLineWeight(1);\nADX.DefineColor(\&quot;Up\&quot;, Color.BLUE);\nADX.DefineColor(\&quot;Down\&quot;, Color.DARK_ORANGE);\nADX.AssignValueColor(\n      if ADX &gt;= ADX[1] then ADX.Color(\&quot;up\&quot;)\nelse ADX.Color(\&quot;down\&quot;));\nplot adxcaut = 20;\nadxcaut.SetDefaultColor(Color.DARK_ORANGE);\n\nAddVerticalLine (adxvline and ADX &gt;= 1 and ADX &lt; ADX[1] and ADX[1] &gt; ADX[2], \&quot;mADX\&quot;, Color.BLUE);\n#alert(ADX1 &gt;= 1 and ADX1 &lt; ADX1[1] and ADX1[1] &gt; ADX1[2], alert.bar, sound.bell);&quot;,name=&quot;_cb18973f_9434_3c5b_adec_fac0de14f50d&quot;}){alerts:LocalAlertArray2,alerts=@LocalAlertArray2,hidden=&lt;T})}),^(#%6.SubgraphId(&quot;Subgraph55&quot;),#%6.SubgraphStorableModel{height=80,storableIndicators.+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence{body=&quot;\ndeclare lower; \ninput price = close;\ninput displace = 0;\ninput length = 20;\ninput Num_Dev_Dn = -2.0;\ninput Num_Dev_up = 2.0;\ninput averageType = AverageType.Simple;\ninput showCloud= yes;\n\ndef sDev = stdev(data = price[-displace], length = length);\n\nplot MidLine = MovingAverage(averageType, data = price[-displace], length = length);\nplot LowerBand = MidLine + num_Dev_Dn * sDev;\nplot UpperBand = MidLine + num_Dev_Up * sDev;\n\nLowerBand.SetDefaultColor(GetColor(0));\nMidLine.SetDefaultColor(GetColor(1));\nUpperBand.SetDefaultColor(GetColor(5));\n\n#############################\ndef Na = Double.NaN;\n\ndef cloudhigh = If( ShowCloud, UpperBand, Na);\ndef cloudlow  = If(ShowCloud, LowerBand, Na);\n#AddCloud(cloudhigh, cloudlow, Color.GRAY, Color.GRAY);\n\n\nAddCloud(cloudhigh, Midline, Color.Green, Color.light_Green);\nAddCloud(cloudlow, Midline, Color.Red, Color.light_Red);\n\nplot b= (close -lowerBand)/(upperBand-lowerBand);\n####$$$$$$$$\n\n\ninput priceSlm = close;\n\ninput superFastLength = 8;\n\ninput fastLengthSlm = 13;\n\ninput slowLengthSlm = 21;\n\n\n\n\ninput averageTypeSlm = AverageType.EXPONENTIAL;\n\ndef mov_avg8 = MovingAverage(averageTypeSlm, priceSlm[-displace], superFastLength);\n\ndef mov_avg13 = MovingAverage(averageTypeSlm, priceSlm[-displace], fastLengthSlm);\n\ndef mov_avg21 = MovingAverage(averageTypeSlm, priceSlm[-displace], slowLengthSlm);\n \n#moving averages\n\ndef Superfast = mov_avg8;\n\ndef Fast = mov_avg13;\n\ndef Slow = mov_avg21;\n\n\ndef buy = mov_avg8 &gt; mov_avg13 and mov_avg13 &gt; mov_avg21 and low &gt; mov_avg8;\n\ndef stopbuy = mov_avg8 &lt;= mov_avg13;\n\ndef buynow = !buy[1] and buy;\n\ndef buysignal = CompoundValue(1, if buynow and !stopbuy then 1 else if buysignal[1] == 1 and stopbuy then 0 else buysignal[1], 0);\n\n\ndef Buy_Signal = buysignal[1] == 0 and buysignal == 1;\n\ndef Momentum_Down = buysignal[1] == 1 and buysignal == 0;\n\n\ndef sell = mov_avg8 &lt; mov_avg13 and mov_avg13 &lt; mov_avg21 and high &lt; mov_avg8;\n\ndef stopsell = mov_avg8 &gt;= mov_avg13;\n\ndef sellnow = !sell[1] and sell;\n\ndef sellsignal = CompoundValue(1, if sellnow and !stopsell then 1 else if sellsignal[1] == 1 and stopsell then 0 else sellsignal[1], 0);\n\n\ndef Sell_Signal = sellsignal[1] == 0 and sellsignal;\n\ndef Momentum_Up = sellsignal[1] == 1 and sellsignal == 0;\n \n# when using this as a custom scan, change the word plot to def\n# then remove the \'#\' from in front of one of the \&quot;plot Scan\&quot; statements below\ndef Colorbars = if buysignal == 1 then 1 else if sellsignal == 1 then -1 else if buysignal == 0 or sellsignal == 0 then 0 else 0;\n\n# use this first Scan plot for SLM Ribbon Momentum UP\n#plot Scan = if Colorbars == 1 then yes else no;\n\n# use this second Scan plot for SLM Ribbon Momentum DOWN\n#plot Scan = if Colorbars == -1 then yes else no;\n\n\n\n\n\n\n###############\n\ndef Colorbars1 = if buysignal == 1 then 1 else if sellsignal == 1 then 2 else if buysignal == 0 or sellsignal == 0 then 3 else 0;\n\ninput lengthHma = 20;\n\ndef HMA = MovingAverage(AverageType.HULL, price, lengthHma);\ndef HMA_Up=  HMA &gt; HMA[1];\ndef HMA_Down =! HMA_UP;\n\n###############\n\n#def Colorbars1 = if buysignal == 1 then 1 else if sellsignal == 1 then 2 else if buysignal == 0 or sellsignal == 0 then 3 else 0;\n\n\n\nMidLine.definecolor(\&quot;Buy\&quot;, color.dark_green);\n\n\nMidLine.definecolor(\&quot;Sell\&quot;, color.red);\n\nMidLine.definecolor(\&quot;Neutral\&quot;, Color.PLUM);\n#MidLine.definecolor(\&quot;NeutralDown\&quot;, Color.orange);\nMidLine.definecolor(\&quot;HullMA_up\&quot;, color.blue);\n\nMidLine.definecolor(\&quot;HullMA_down\&quot;, color.orange);\n\nMidLine.AssignValueColor(if buysignal and HMA_Up then MidLine.color(\&quot;Buy\&quot;) else if buysignal and !HMA_Up then MidLine.color(\&quot;HullMA_down\&quot;) else if sellsignal and HMA_Down  then MidLine.color(\&quot;Sell\&quot;) else  if sellsignal and !HMA_Down  then MidLine.color(\&quot;HullMA_up\&quot;) else  MidLine.color(\&quot;neutral\&quot;));;#\n\nb.AssignValueColor(if buysignal and HMA_Up then MidLine.color(\&quot;Buy\&quot;) else if buysignal and !HMA_Up then MidLine.color(\&quot;HullMA_down\&quot;) else if sellsignal and HMA_Down  then MidLine.color(\&quot;Sell\&quot;) else  if sellsignal and !HMA_Down  then MidLine.color(\&quot;HullMA_up\&quot;) else  MidLine.color(\&quot;neutral\&quot;));;#\n# if Momentum_Up then  RSI.color(\&quot;neutralUp\&quot;) else  RSI.color(\&quot;neutraldown\&quot;));\n\nplot one =1;\nplot z =0;\nplot half=0.5;\n\n\n\n\n#MidLine.definecolor(\&quot;Buy_Signal_Bars\&quot;, color.dark_green);\n\n#MidLine.definecolor(\&quot;Sell_Signal_Bars\&quot;, color.red);\n\n#MidLine.definecolor(\&quot;NeutralUp\&quot;, color.plum);\n\n#MidLine.definecolor(\&quot;NeutralDown\&quot;, color.orange);\n\n#MidLine.AssignValueColor(if Colorbars1 ==1 then MidLine.color(\&quot;buy_signal_bars\&quot;) else if colorbars1 ==2 then #MidLine.color(\&quot;Sell_Signal_bars\&quot;) else if Momentum_Up then  MidLine.color(\&quot;neutralUp\&quot;) else MidLine.color(\&quot;neutralDown\&quot;) );\n\n\nplot UpSignal = if (buysignal and price crosses above MidLine) then LowerBand else Double.NaN;\nplot DownSignal = if (sellsignal and price crosses below MidLine) then UpperBand else Double.NaN;\ninput showBreakoutSignals =no;\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\n\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\n\n\n\nMidLine.setlineWeight(3);\n\n\n\n\n\n\n######$$$$&quot;,name=&quot;_a508af02_4cde_429d_ba94_3d375dee61fb&quot;}){inputsMap:TreeMap24{^(&quot;lengthHma&quot;,@Integer1),^(&quot;price&quot;,&quot;CLOSE&quot;),^(&quot;priceSlm&quot;,&quot;CLOSE&quot;),^(&quot;showCloud&quot;,&lt;F)},inputsMap=@TreeMap24,plots{0:{hiding=&lt;T},1:{hiding=&lt;T},2:{hiding=&lt;T},6:{color=@CustomColor8}}})}),^(#%6.SubgraphId(&quot;Subgraph57&quot;),#%6.SubgraphStorableModel{height=80,storableIndicators.+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence{body=&quot;\ndeclare lower; \n#Intraday Intensity Index\ninput price = close;\ninput displace = 0;\ninput length = 20;\ninput Num_Dev_Dn = -2.0;\ninput Num_Dev_up = 2.0;\ninput averageType = AverageType.Simple;\ninput showCloud= no;\n\ndef sDev = stdev(data = price[-displace], length = length);\n\nplot MidLine = MovingAverage(averageType, data = price[-displace], length = length);\nplot LowerBand = MidLine + num_Dev_Dn * sDev;\nplot UpperBand = MidLine + num_Dev_Up * sDev;\n\nLowerBand.SetDefaultColor(GetColor(0));\nMidLine.SetDefaultColor(GetColor(1));\nUpperBand.SetDefaultColor(GetColor(5));\nlowerband.hide();\nmidline.hide();\nupperBand.hide();\n\n\n#############################\ndef Na = Double.NaN;\n\ndef cloudhigh = If( ShowCloud, UpperBand, Na);\ndef cloudlow  = If(ShowCloud, LowerBand, Na);\n#AddCloud(cloudhigh, cloudlow, Color.GRAY, Color.GRAY);\n\n\nAddCloud(cloudhigh, Midline, Color.Green, Color.light_Green);\nAddCloud(cloudlow, Midline, Color.Red, Color.light_Red);\n\nplot b= (close -lowerBand)/(upperBand-lowerBand);\n####$$$$$$$$\n\n\ninput priceSlm = close;\n\ninput superFastLength = 8;\n\ninput fastLengthSlm = 13;\n\ninput slowLengthSlm = 21;\n\n\n\n\ninput averageTypeSlm = AverageType.EXPONENTIAL;\n\ndef mov_avg8 = MovingAverage(averageTypeSlm, priceSlm[-displace], superFastLength);\n\ndef mov_avg13 = MovingAverage(averageTypeSlm, priceSlm[-displace], fastLengthSlm);\n\ndef mov_avg21 = MovingAverage(averageTypeSlm, priceSlm[-displace], slowLengthSlm);\n \n#moving averages\n\ndef Superfast = mov_avg8;\n\ndef Fast = mov_avg13;\n\ndef Slow = mov_avg21;\n\n\ndef buy = mov_avg8 &gt; mov_avg13 and mov_avg13 &gt; mov_avg21 and low &gt; mov_avg8;\n\ndef stopbuy = mov_avg8 &lt;= mov_avg13;\n\ndef buynow = !buy[1] and buy;\n\ndef buysignal = CompoundValue(1, if buynow and !stopbuy then 1 else if buysignal[1] == 1 and stopbuy then 0 else buysignal[1], 0);\n\n\ndef Buy_Signal = buysignal[1] == 0 and buysignal == 1;\n\ndef Momentum_Down = buysignal[1] == 1 and buysignal == 0;\n\n\ndef sell = mov_avg8 &lt; mov_avg13 and mov_avg13 &lt; mov_avg21 and high &lt; mov_avg8;\n\ndef stopsell = mov_avg8 &gt;= mov_avg13;\n\ndef sellnow = !sell[1] and sell;\n\ndef sellsignal = CompoundValue(1, if sellnow and !stopsell then 1 else if sellsignal[1] == 1 and stopsell then 0 else sellsignal[1], 0);\n\n\ndef Sell_Signal = sellsignal[1] == 0 and sellsignal;\n\ndef Momentum_Up = sellsignal[1] == 1 and sellsignal == 0;\n \n# when using this as a custom scan, change the word plot to def\n# then remove the \'#\' from in front of one of the \&quot;plot Scan\&quot; statements below\ndef Colorbars = if buysignal == 1 then 1 else if sellsignal == 1 then -1 else if buysignal == 0 or sellsignal == 0 then 0 else 0;\n\n# use this first Scan plot for SLM Ribbon Momentum UP\n#plot Scan = if Colorbars == 1 then yes else no;\n\n# use this second Scan plot for SLM Ribbon Momentum DOWN\n#plot Scan = if Colorbars == -1 then yes else no;\n\n\n\n\n\n\n###############\n\ndef Colorbars1 = if buysignal == 1 then 1 else if sellsignal == 1 then 2 else if buysignal == 0 or sellsignal == 0 then 3 else 0;\n\ninput lengthHma = 20;\n\ndef HMA = MovingAverage(AverageType.HULL, price, lengthHma);\ndef HMA_Up=  HMA &gt; HMA[1];\ndef HMA_Down =! HMA_UP;\n\n###############\n\n#def Colorbars1 = if buysignal == 1 then 1 else if sellsignal == 1 then 2 else if buysignal == 0 or sellsignal == 0 then 3 else 0;\n\n\n\nMidLine.definecolor(\&quot;Buy\&quot;, color.dark_green);\n\n\nMidLine.definecolor(\&quot;Sell\&quot;, color.red);\n\nMidLine.definecolor(\&quot;Neutral\&quot;, Color.PLUM);\n#MidLine.definecolor(\&quot;NeutralDown\&quot;, Color.orange);\nMidLine.definecolor(\&quot;HullMA_up\&quot;, color.blue);\n\nMidLine.definecolor(\&quot;HullMA_down\&quot;, color.orange);\n\nMidLine.AssignValueColor(if buysignal and HMA_Up then MidLine.color(\&quot;Buy\&quot;) else if buysignal and !HMA_Up then MidLine.color(\&quot;HullMA_down\&quot;) else if sellsignal and HMA_Down  then MidLine.color(\&quot;Sell\&quot;) else  if sellsignal and !HMA_Down  then MidLine.color(\&quot;HullMA_up\&quot;) else  MidLine.color(\&quot;neutral\&quot;));;#\n\nb.AssignValueColor(if buysignal and HMA_Up then MidLine.color(\&quot;Buy\&quot;) else if buysignal and !HMA_Up then MidLine.color(\&quot;HullMA_down\&quot;) else if sellsignal and HMA_Down  then MidLine.color(\&quot;Sell\&quot;) else  if sellsignal and !HMA_Down  then MidLine.color(\&quot;HullMA_up\&quot;) else  MidLine.color(\&quot;neutral\&quot;));;#\n# if Momentum_Up then  RSI.color(\&quot;neutralUp\&quot;) else  RSI.color(\&quot;neutraldown\&quot;));\n\n# Intraday Intensity Index\n# Assembled by BenTen at useThinkScript.com\n# Converted from https://www.tradingview.com/script/klr607Yi-INTRADAY-INTENSITY-INDEX-IIIX-by-KIVAN%C3%87-fr3762/\n\n\n\ninput length2 = 21;\n#def K1 = (2 * close - high - low) * volume;\ndef K1 = ( close - open) * volume;\n\ndef K2 = if(high != low, high - low, 1);\ndef INT = K1 / K2;\ndef INTSUM = sum(INT, length2);\n\nplot histogram = INTSUM;\nplot a = INT;\n\nhistogram.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);\nhistogram.AssignValueColor(if INTSUM&gt;0 then color.blue else color.red);\na.SetDefaultColor(GetColor(0));\n\n\n\n\n\n\n\n\n\n#MidLine.definecolor(\&quot;Buy_Signal_Bars\&quot;, color.dark_green);\n\n#MidLine.definecolor(\&quot;Sell_Signal_Bars\&quot;, color.red);\n\n#MidLine.definecolor(\&quot;NeutralUp\&quot;, color.plum);\n\n#MidLine.definecolor(\&quot;NeutralDown\&quot;, color.orange);\n\n#MidLine.AssignValueColor(if Colorbars1 ==1 then MidLine.color(\&quot;buy_signal_bars\&quot;) else if colorbars1 ==2 then #MidLine.color(\&quot;Sell_Signal_bars\&quot;) else if Momentum_Up then  MidLine.color(\&quot;neutralUp\&quot;) else MidLine.color(\&quot;neutralDown\&quot;) );\n\n\nplot UpSignal = if (buysignal and price crosses above MidLine) then LowerBand else Double.NaN;\nplot DownSignal = if (sellsignal and price crosses below MidLine) then UpperBand else Double.NaN;\ninput showBreakoutSignals =no;\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\n\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\n\n\n\nMidLine.setlineWeight(3);\n\n\n\n\n\n\n######$$$$&quot;,name=&quot;_b9c241fe_a444_430e_90cb_11c5582e4030&quot;}){hidden=&lt;T,inputsMap:TreeMap25{^(&quot;price&quot;,&quot;CLOSE&quot;),^(&quot;priceSlm&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap25})}),^(#%6.SubgraphId(&quot;Subgraph59&quot;),#%6.SubgraphStorableModel{height=88,storableIndicators.+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence{body=&quot;\ndeclare lower; \ninput price = close;\ninput displace = 0;\ninput length = 20;\ninput Num_Dev_Dn = -2.0;\ninput Num_Dev_up = 2.0;\ninput averageType = AverageType.Simple;\ninput showCloud= no;\ninput useATR=no;\ndef sDev = stdev(data = price[-displace], length = length);\n\nplot MidLine = MovingAverage(averageType, data = price[-displace], length = length);\nplot LowerBand = MidLine + num_Dev_Dn * sDev;\nplot UpperBand = MidLine + num_Dev_Up * sDev;\n\nLowerBand.SetDefaultColor(GetColor(0));\nMidLine.SetDefaultColor(GetColor(1));\nUpperBand.SetDefaultColor(GetColor(5));\nlowerband.hide();\nmidline.hide();\nupperBand.hide();\n\n\n#############################\ndef Na = Double.NaN;\n\ndef cloudhigh = If( ShowCloud, UpperBand, Na);\ndef cloudlow  = If(ShowCloud, LowerBand, Na);\n#AddCloud(cloudhigh, cloudlow, Color.GRAY, Color.GRAY);\n\n\nAddCloud(cloudhigh, Midline, Color.Green, Color.light_Green);\nAddCloud(cloudlow, Midline, Color.Red, Color.light_Red);\n\nplot b= (close -lowerBand)/(upperBand-lowerBand);\n\n\n\n####$$$$$$$$\n\n\ninput priceSlm = close;\n\ninput superFastLength = 8;\n\ninput fastLengthSlm = 13;\n\ninput slowLengthSlm = 21;\n\n\n\n\ninput averageTypeSlm = AverageType.EXPONENTIAL;\n\ndef mov_avg8 = MovingAverage(averageTypeSlm, priceSlm[-displace], superFastLength);\n\ndef mov_avg13 = MovingAverage(averageTypeSlm, priceSlm[-displace], fastLengthSlm);\n\ndef mov_avg21 = MovingAverage(averageTypeSlm, priceSlm[-displace], slowLengthSlm);\n \n#moving averages\n\ndef Superfast = mov_avg8;\n\ndef Fast = mov_avg13;\n\ndef Slow = mov_avg21;\n\n\ndef buy = mov_avg8 &gt; mov_avg13 and mov_avg13 &gt; mov_avg21 and low &gt; mov_avg8;\n\ndef stopbuy = mov_avg8 &lt;= mov_avg13;\n\ndef buynow = !buy[1] and buy;\n\ndef buysignal = CompoundValue(1, if buynow and !stopbuy then 1 else if buysignal[1] == 1 and stopbuy then 0 else buysignal[1], 0);\n\n\ndef Buy_Signal = buysignal[1] == 0 and buysignal == 1;\n\ndef Momentum_Down = buysignal[1] == 1 and buysignal == 0;\n\n\ndef sell = mov_avg8 &lt; mov_avg13 and mov_avg13 &lt; mov_avg21 and high &lt; mov_avg8;\n\ndef stopsell = mov_avg8 &gt;= mov_avg13;\n\ndef sellnow = !sell[1] and sell;\n\ndef sellsignal = CompoundValue(1, if sellnow and !stopsell then 1 else if sellsignal[1] == 1 and stopsell then 0 else sellsignal[1], 0);\n\n\ndef Sell_Signal = sellsignal[1] == 0 and sellsignal;\n\ndef Momentum_Up = sellsignal[1] == 1 and sellsignal == 0;\n \n# when using this as a custom scan, change the word plot to def\n# then remove the \'#\' from in front of one of the \&quot;plot Scan\&quot; statements below\ndef Colorbars = if buysignal == 1 then 1 else if sellsignal == 1 then -1 else if buysignal == 0 or sellsignal == 0 then 0 else 0;\n\n# use this first Scan plot for SLM Ribbon Momentum UP\n#plot Scan = if Colorbars == 1 then yes else no;\n\n# use this second Scan plot for SLM Ribbon Momentum DOWN\n#plot Scan = if Colorbars == -1 then yes else no;\n\n\n\n\n\n\n###############\n\ndef Colorbars1 = if buysignal == 1 then 1 else if sellsignal == 1 then 2 else if buysignal == 0 or sellsignal == 0 then 3 else 0;\n\ninput lengthHma = 20;\n\ndef HMA = MovingAverage(AverageType.HULL, price, lengthHma);\ndef HMA_Up=  HMA &gt; HMA[1];\ndef HMA_Down =! HMA_UP;\n\n###############\n\n#def Colorbars1 = if buysignal == 1 then 1 else if sellsignal == 1 then 2 else if buysignal == 0 or sellsignal == 0 then 3 else 0;\n\n\n\nMidLine.definecolor(\&quot;Buy\&quot;, color.dark_green);\n\n\nMidLine.definecolor(\&quot;Sell\&quot;, color.red);\n\nMidLine.definecolor(\&quot;Neutral\&quot;, Color.PLUM);\n#MidLine.definecolor(\&quot;NeutralDown\&quot;, Color.orange);\nMidLine.definecolor(\&quot;HullMA_up\&quot;, color.blue);\n\nMidLine.definecolor(\&quot;HullMA_down\&quot;, color.orange);\n\nMidLine.AssignValueColor(if buysignal and HMA_Up then MidLine.color(\&quot;Buy\&quot;) else if buysignal and !HMA_Up then MidLine.color(\&quot;HullMA_down\&quot;) else if sellsignal and HMA_Down  then MidLine.color(\&quot;Sell\&quot;) else  if sellsignal and !HMA_Down  then MidLine.color(\&quot;HullMA_up\&quot;) else  MidLine.color(\&quot;neutral\&quot;));;#\n\nb.AssignValueColor(if buysignal and HMA_Up then MidLine.color(\&quot;Buy\&quot;) else if buysignal and !HMA_Up then MidLine.color(\&quot;HullMA_down\&quot;) else if sellsignal and HMA_Down  then MidLine.color(\&quot;Sell\&quot;) else  if sellsignal and !HMA_Down  then MidLine.color(\&quot;HullMA_up\&quot;) else  MidLine.color(\&quot;neutral\&quot;));;#\n# if Momentum_Up then  RSI.color(\&quot;neutralUp\&quot;) else  RSI.color(\&quot;neutraldown\&quot;));\n\nplot one =1;\nplot z =0;\nplot half=0.5;\nb.hide();\none.hide();\nhalf.hide();\ninput bWidthLookBack=125;\n\n\n\n\n\ninput lengthAtr = 14;\ninput averageTypeAtr = AverageType.WILDERS;\n\nplot ATR = MovingAverage(averageTypeAtr, TrueRange(high, close, low), lengthAtr);\nATR.SetDefaultColor(GetColor(8));\nATR.hide();\n#plot v_volatility= volume*((2*close-high-low)/(high-low));\nplot BB_bandwidth;\n if (!useATR)\n{\n BB_bandwidth = (upperBand-lowerBand)/(midline);\n}\n else \n{\n BB_bandwidth=(upperBand-lowerBand)/(ATR);\n}\nplot BW_H= highest(BB_bandwidth,bWidthLookBack);\nplot BW_L= lowest(BB_bandwidth,bWidthLookBack);\n\n\n#################!!!!!!!!!!!!!!!!!!!!!!!!!!!!\nplot BuysignalB = if(close crosses above  UpperBand,BB_bandwidth,na)  ;\n\nBuysignalB.DefineColor(\&quot;Above\&quot;, GetColor(1));\nBuysignalB.DefineColor(\&quot;Below\&quot;, GetColor(2));\n#signal.AssignValueColor(if crossingType == CrossingType.above then signal.color(\&quot;Above\&quot;) else signal.color(\&quot;Below\&quot;));\nBuysignalB.AssignValueColor( BuysignalB.color(\&quot;Above\&quot;) );\n\n\n#signal.SetPaintingStrategy(if crossingType == CrossingType.above\n #   then PaintingStrategy.BOOLEAN_ARROW_UP\n  #  else PaintingStrategy.BOOLEAN_ARROW_DOWN);\n\nBuysignalB.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\n\n\n\n\n\n\n##################################!!!!!!!!!!!!!!!!!!!!!!!\n\n\n\n\n\n\nBB_bandwidth.AssignValueColor(if buysignal and HMA_Up then MidLine.color(\&quot;Buy\&quot;) else if buysignal and !HMA_Up then MidLine.color(\&quot;HullMA_down\&quot;) else if sellsignal and HMA_Down  then MidLine.color(\&quot;Sell\&quot;) else  if sellsignal and !HMA_Down  then MidLine.color(\&quot;HullMA_up\&quot;) else  MidLine.color(\&quot;neutral\&quot;));;#\n# if Momentum_Up then  RSI.color(\&quot;neutralUp\&quot;) else  RSI.color(\&quot;neutraldown\&quot;));\n\n#MidLine.definecolor(\&quot;Buy_Signal_Bars\&quot;, color.dark_green);\n\n#MidLine.definecolor(\&quot;Sell_Signal_Bars\&quot;, color.red);\n\n#MidLine.definecolor(\&quot;NeutralUp\&quot;, color.plum);\n\n#MidLine.definecolor(\&quot;NeutralDown\&quot;, color.orange);\n\n#MidLine.AssignValueColor(if Colorbars1 ==1 then MidLine.color(\&quot;buy_signal_bars\&quot;) else if colorbars1 ==2 then #MidLine.color(\&quot;Sell_Signal_bars\&quot;) else if Momentum_Up then  MidLine.color(\&quot;neutralUp\&quot;) else MidLine.color(\&quot;neutralDown\&quot;) );\n\n\nplot UpSignal = if (buysignal and price crosses above MidLine) then LowerBand else Double.NaN;\nplot DownSignal = if (sellsignal and price crosses below MidLine) then UpperBand else Double.NaN;\ninput showBreakoutSignals =no;\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\n\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\n\n\n\nMidLine.setlineWeight(3);\n\n\n\n\n\n\n######$$$$&quot;,name=&quot;_c9bebc7b_c43e_4a5a_90e4_19ba478e5d83&quot;}){hidden=&lt;T,inputsMap:TreeMap26{^(&quot;bWidthLookBack&quot;,50),^(&quot;price&quot;,&quot;CLOSE&quot;),^(&quot;priceSlm&quot;,&quot;CLOSE&quot;),^(&quot;useATR&quot;,@Boolean0)},inputsMap=@TreeMap26})}),^(#%6.SubgraphId(&quot;Subgraph61&quot;),#%6.SubgraphStorableModel{height=108,storableIndicators.+(!%7.CompiledStudy.resolveStudy(@ScriptEssence0){hidden=&lt;T,inputsMap:TreeMap27{^(&quot;price&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap27})}),^(#%6.SubgraphId(&quot;Subgraph77&quot;),#%6.SubgraphStorableModel{height=154,storableIndicators.+(!%7.CompiledStudy.resolveStudy(#%8.ScriptEssence{body=&quot;# OBV/OBV_MA  by MerryDay 5/24/20\n#When the OBV (On Balance Volume) crosses OBV’s 20-period moving average, the divergence signal of a trend reversal is confirmed. While research indicates a default of 20 is norm, I have been using a 34 period.  The difference is slight.\n# If the OBV is greater than the OBV ma then a green cloud appears under the OBV.\n\ndeclare lower;\ninput length = 20; #default = 20\ninput length2 = 21;\ninput price = close;\n\n\n\n\n\ndef K1 = ( close - open - low) * volume;\ndef K2 = if(high != low, high - low, 1);\ndef INT = K1 / K2;\ndef INTSUM = sum(INT, length2);\n\nplot OBV = TotalSum(Sign(INT - INT[1]) * volume);\nplot OBVma = Average(OBV, length);\ndef aboveMA   = OBV &gt;= OBVma ;\n\n#plot histogram = INTSUM;\n\n\n## LIPSTICK ##\nDefineGlobalColor(\&quot;LabelGreen\&quot;, CreateColor(0, 190, 0)) ;\nDefineGlobalColor(\&quot;PaleGreen\&quot;, CreateColor(180, 220, 180)) ;\nDefineGlobalColor(\&quot;PaleRed\&quot;, CreateColor (220, 200, 200)) ;\nDefineGlobalColor(\&quot;DullGold\&quot;, CreateColor(220, 220, 128)) ;\nDefineGlobalColor(\&quot;BlueJeans\&quot;, CreateColor(0, 150, 200)) ;\nOBVma.SetDefaultColor(GlobalColor(\&quot;DullGold\&quot;));\nOBVma.SetLineWeight(3);\nOBVma.HideBubble();\nOBVma.HideTitle();\n\nOBV.SetPaintingStrategy(PaintingStrategy.LINE_VS_TRIANGLES);\nOBV.SetLineWeight(2);\nOBV.HideBubble();\nOBV.HideTitle();\nOBV.DefineColor(\&quot;Up\&quot;, GlobalColor(\&quot;LabelGreen\&quot;));\nOBV.DefineColor(\&quot;Weak\&quot;, Color.LIGHT_GRAY);\nOBV.DefineColor(\&quot;Down\&quot;, GlobalColor(\&quot;PaleRed\&quot;));\nOBV.AssignValueColor(if OBV &gt; OBVma  then OBV.Color(\&quot;Up\&quot;) else OBV.Color(\&quot;Down\&quot;));\n\nplot OBVlow = if  OBV crosses below OBVma then 1 else 0;\nOBVlow.hide();\n\nplot crossup = if OBV crosses above OBVma then OBV else double.NaN;\ncrossup.HideBubble() ;\ncrossup.HideTitle() ;\ncrossup.SetPaintingStrategy(PaintingStrategy.TRIANGLES);\ncrossup.SetLineWeight(5);\ncrossup.SetDefaultColor(color.blue) ;\nplot crossdown = if OBV crosses below OBVma then OBV else double.NaN;\ncrossdown.HideBubble() ;\ncrossdown.HideTitle() ;\ncrossdown.SetPaintingStrategy(PaintingStrategy.TRIANGLES);\ncrossdown.SetLineWeight(5);\ncrossdown.SetDefaultColor(color.pink) ;\n\nAddCloud(OBV, OBVma, Color.LIGHT_GREEN, Color.PINK);\n\n#Alert(crosses_above_MA, \&quot;What\'s going to happen?\&quot; + GetSymbol(), Alert.BAR, Sound.bell);\nDefineGlobalColor(\&quot;MyCyan\&quot;, CreateColor(150, 0, 255)) ;\nDefineGlobalColor(\&quot;Sell\&quot;, CreateColor(255, 150, 0)) ;\n\n\n# End of OBV/OBV_MA &quot;,name=&quot;_d493e752_9de1_494d_b2e6_1ebb5a0de209&quot;}){hidden=&lt;T,inputsMap:TreeMap28{^(&quot;price&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap28})})}}" SYMBOL="DCTH" SYMBOL_GROUP="2" VERTICAL="false" VISIBLE="true" WEIGHT="3.506981740064447"/>
            <DASHBOARD SYMBOL="AAPL" SYMBOL_GROUP="2" VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <LEVEL_II SYMBOL="NVDA" SYMBOL_GROUP="2" VERTICAL="false" VISIBLE="false" WEIGHT="1.0">
              <SORTING COLUMN="BID" ORDER="-1"/>
              <SORTING1 COLUMN="ASK" ORDER="1"/>
            </LEVEL_II>
            <LIVE_NEWS SYMBOL="AAPL" SYMBOL_GROUP="2" VERTICAL="false" VISIBLE="false" WEIGHT="1.0">
              <SORTING COLUMN="TIME" ORDER="-1"/>
            </LIVE_NEWS>
            <PHASE_SCORES VERTICAL="false" VISIBLE="false" WEIGHT="2.0"/>
            <TIME_SALES VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <TRADE CONFIGURATION_NAME="SINGLE" ORDER_RULES_SET="STOCK" ORDER_TYPE="LIMIT" OS_AUTO="false" OS_EXPANDED="false" OS_TIF="DAY" QTY="100.0" QTY_STEP="1.0" TEMPLATE="SINGLE" TRADE_BUTTONS="BUY_MKT;SELL_MKT;MULTI_CANCEL;REVERSE;FLAT;SECOND_LINE;QUANTITY;AUTO_SEND;ORDER_SETUP" VISIBLE="false">
              <OCO_STOP>
                <TRG_0 TRG_ENBL="true" TRG_LINK="ASK_BID" TRG_OFFSET_MODE="TICK" TRG_OT="STOP" TRG_SETUP="10.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AA="10.0" AAL="10.0" AAP="10.0" AAPL="10.0" ABG="10.0" ABML="10.0" ACER="10.0" ADMP="10.0" AEG="10.0" AEHL="10.0" AFI="10.0" AJRD="10.0" AKU="10.0" ALEC="10.0" AMC="10.0" AMCR="10.0" AMD="10.0" AMRS="10.0" AMTX="10.0" AMZN="10.0" ANIX="10.0" ANPC="10.0" ANTE="10.0" AP="10.0" APOP="10.0" APTO="10.0" AR="10.0" AREC="10.0" ARES="10.0" ARLO="10.0" ASLEW="10.0" ATHM="10.0" ATIF="10.0" ATNF="10.0" AUY="10.0" AVCO="10.0" AXL="10.0" AZN="10.0" AZRX="10.0" BABA="10.0" BBD="10.0" BBDC="10.0" BFT="10.0" BILI="10.0" BLIN="10.0" BMY="10.0" BOX="10.0" BP="10.0" BRQS="10.0" BSGM="10.0" BURL="10.0" BWAY="10.0" BXRX="10.0" BYFC="10.0" CAKE="10.0" CAL="10.0" CCI="10.0" CCIV="10.0" CCJ="10.0" CCL="10.0" CEQPP="10.0" CHNG="10.0" CHX="10.0" CIDM="10.0" CIIC="10.0" CLBS="10.0" CLDR="10.0" CLEU="10.0" CLSN="10.0" CLVS="10.0" CNNE="10.0" COHN="10.0" COMP="10.0" CPHI="10.0" CPRX="10.0" CRBP="10.0" CRTD="10.0" CSCO="10.0" CTIC="10.0" CUB="10.0" CVX="10.0" DCTH="10.0" DHT="10.0" DIS="10.0" DISCK="10.0" DNN="10.0" DOX="10.0" DPW="10.0" DS="10.0" DSKE="10.0" DTSS="10.0" EARS="10.0" EBS="10.0" EDTK="10.0" EMAN="10.0" ENPH="10.0" ETSY="10.0" EURN="10.0" EVRG="10.0" EW="10.0" EWA="10.0" EXEL="10.0" EYE="10.0" EYES="10.0" FAST="10.0" FB="10.0" FCAC="10.0" FLR="10.0" FLY="10.0" FPRX="10.0" FSLR="10.0" FSR="10.0" FUSE="10.0" FUV="10.0" GEL="10.0" GLOP="10.0" GME="10.0" GMER="10.0" GNCA="10.0" GOCO="10.0" HBI="10.0" HCHC="10.0" HENKY="10.0" HPE="10.0" HPQ="10.0" HPR="10.0" HTBX="10.0" HTHIY="10.0" HTZ="10.0" HUGE="10.0" HYLN="10.0" HZON="10.0" IDEX="10.0" IGSB="10.0" IMTE="10.0" INFI="10.0" INFY="10.0" ING="10.0" INO="10.0" INPX="10.0" INTC="10.0" INUV="10.0" INVO="10.0" INVU="10.0" IWM="10.0" IZEA="10.0" JE="10.0" JENGQ="10.0" JFIN="10.0" JOB="10.0" K="10.0" KBR="10.0" KEYS="10.0" KMPH="10.0" KMX="10.0" KR="10.0" LAZR="10.0" LCI="10.0" LCTX="10.0" LEAF="10.0" LIVX="10.0" LKQ="10.0" LODE="10.0" LRTNF="10.0" LUV="10.0" MARA="10.0" MBT="10.0" MDII="10.0" MESA="10.0" METX="10.0" MFGP="10.0" MMDA1="10.0" MRIN="10.0" MSFT="10.0" MTEM="10.0" MU="10.0" MVIS="10.0" MX="10.0" MYO="10.0" MYSZ="10.0" NCLH="10.0" NDX="10.0" NEOS="10.0" NGD="10.0" NGL="10.0" NIO="10.0" NLOK="10.0" NLSN="10.0" NLSP="10.0" NLST="10.0" NNVC="10.0" NOK="10.0" NOV="10.0" NQ="10.0" NSLP="10.0" NTP="10.0" NUZE="10.0" NVDA="10.0" NXE="10.0" OCGN="10.0" OGEN="10.0" OGI="10.0" OHI="10.0" OI="10.0" OLO="10.0" OPEN="10.0" OPGN="10.0" ORCL="10.0" ORMP="10.0" OTIS="10.0" OVID="10.0" PAA="10.0" PAAS="10.0" PERI="10.0" PFF="10.0" PGX="10.0" PHM="10.0" PNC="10.0" POTX="10.0" PPG="10.0" PPL="10.0" PTE="10.0" QQQ="10.0" QSR="10.0" RAD="10.0" RAIL="10.0" RIBT="10.0" RKT="10.0" RMO="10.0" RP="10.0" RPAY="10.0" RRD="10.0" RSX="10.0" RUT="10.0" RVLV="10.0" RYCEY="10.0" SAVA="10.0" SAVE="10.0" SGLB="10.0" SID="10.0" SIFY="10.0" SINO="10.0" SINT="10.0" SIOX="10.0" SIRI="10.0" SITC="10.0" SIVR="10.0" SJI="10.0" SKLZ="10.0" SKT="10.0" SLDB="10.0" SLQT="10.0" SNAP="10.0" SNCA="10.0" SNOA="10.0" SOGO="10.0" SOS="10.0" SPCB="10.0" SPD="10.0" SPRT="10.0" SPX="10.0" SPY="10.0" SQ="10.0" STON="10.0" SUNW="10.0" SWI="10.0" SWK="10.0" T="10.0" TGTX="10.0" TH="10.0" THTX="10.0" TSIA="10.0" TSLA="10.0" TSLAX="10.0" TZA="10.0" U="10.0" UAL="10.0" UAMY="10.0" UEC="10.0" UIS="10.0" ULTA="10.0" USAC="10.0" USWS="10.0" UTZ="10.0" UUUU="10.0" UXIN="10.0" VALE="10.0" VEU="10.0" VJET="10.0" VSTM="10.0" VTRS="10.0" VVOS="10.0" VWO="10.0" WAFU="10.0" WETF="10.0" WKEY="10.0" X="10.0" XELA="10.0" XERS="10.0" XL="10.0" XLP="10.0" XLU="10.0" XTLB="10.0" YGMZ="10.0" ZKIN="10.0" ZM="10.0"/>
                </TRG_0>
              </OCO_STOP>
              <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="1.0" TRG_TIF="DAY">
                <OFFSET_PER_SYMBOL AA="1.0" AAL="1.0" AAP="1.0" AAPL="1.0" ABG="1.0" ABML="1.0" ACER="1.0" ADMP="1.0" AEG="1.0" AEHL="1.0" AFI="1.0" AJRD="1.0" AKU="1.0" ALEC="1.0" AMC="1.0" AMCR="1.0" AMD="1.0" AMRS="1.0" AMTX="1.0" AMZN="1.0" ANIX="1.0" ANPC="1.0" ANTE="1.0" AP="1.0" APOP="1.0" APTO="1.0" AR="1.0" AREC="1.0" ARES="1.0" ARLO="1.0" ASLEW="1.0" ATHM="1.0" ATIF="1.0" ATNF="1.0" AUY="1.0" AVCO="1.0" AXL="1.0" AZN="1.0" AZRX="1.0" BABA="1.0" BBD="1.0" BBDC="1.0" BFT="1.0" BILI="1.0" BLIN="1.0" BMY="1.0" BOX="1.0" BP="1.0" BRQS="1.0" BSGM="1.0" BURL="1.0" BWAY="1.0" BXRX="1.0" BYFC="1.0" CAKE="1.0" CAL="1.0" CCI="1.0" CCIV="1.0" CCJ="1.0" CCL="1.0" CEQPP="1.0" CHNG="1.0" CHX="1.0" CIDM="1.0" CIIC="1.0" CLBS="1.0" CLDR="1.0" CLEU="1.0" CLSN="1.0" CLVS="1.0" CNNE="1.0" COHN="1.0" COMP="1.0" CPHI="1.0" CPRX="1.0" CRBP="1.0" CRTD="1.0" CSCO="1.0" CTIC="1.0" CUB="1.0" CVX="1.0" DCTH="1.0" DHT="1.0" DIS="1.0" DISCK="1.0" DNN="1.0" DOX="1.0" DPW="1.0" DS="1.0" DSKE="1.0" DTSS="1.0" EARS="1.0" EBS="1.0" EDTK="1.0" EMAN="1.0" ENPH="1.0" ETSY="1.0" EURN="1.0" EVRG="1.0" EW="1.0" EWA="1.0" EXEL="1.0" EYE="1.0" EYES="1.0" FAST="1.0" FB="1.0" FCAC="1.0" FLR="1.0" FLY="1.0" FPRX="1.0" FSLR="1.0" FSR="1.0" FUSE="1.0" FUV="1.0" GEL="1.0" GLOP="1.0" GME="1.0" GMER="1.0" GNCA="1.0" GOCO="1.0" HBI="1.0" HCHC="1.0" HENKY="1.0" HPE="1.0" HPQ="1.0" HPR="1.0" HTBX="1.0" HTHIY="1.0" HTZ="1.0" HUGE="1.0" HYLN="1.0" HZON="1.0" IDEX="1.0" IGSB="1.0" IMTE="1.0" INFI="1.0" INFY="1.0" ING="1.0" INO="1.0" INPX="1.0" INTC="1.0" INUV="1.0" INVO="1.0" INVU="1.0" IWM="1.0" IZEA="1.0" JE="1.0" JENGQ="1.0" JFIN="1.0" JOB="1.0" K="1.0" KBR="1.0" KEYS="1.0" KMPH="1.0" KMX="1.0" KR="1.0" LAZR="1.0" LCI="1.0" LCTX="1.0" LEAF="1.0" LIVX="1.0" LKQ="1.0" LODE="1.0" LRTNF="1.0" LUV="1.0" MARA="1.0" MBT="1.0" MDII="1.0" MESA="1.0" METX="1.0" MFGP="1.0" MMDA1="1.0" MRIN="1.0" MSFT="1.0" MTEM="1.0" MU="1.0" MVIS="1.0" MX="1.0" MYO="1.0" MYSZ="1.0" NCLH="1.0" NDX="1.0" NEOS="1.0" NGD="1.0" NGL="1.0" NIO="1.0" NLOK="1.0" NLSN="1.0" NLSP="1.0" NLST="1.0" NNVC="1.0" NOK="1.0" NOV="1.0" NQ="1.0" NSLP="1.0" NTP="1.0" NUZE="1.0" NVDA="1.0" NXE="1.0" OCGN="1.0" OGEN="1.0" OGI="1.0" OHI="1.0" OI="1.0" OLO="1.0" OPEN="1.0" OPGN="1.0" ORCL="1.0" ORMP="1.0" OTIS="1.0" OVID="1.0" PAA="1.0" PAAS="1.0" PERI="1.0" PFF="1.0" PGX="1.0" PHM="1.0" PNC="1.0" POTX="1.0" PPG="1.0" PPL="1.0" PTE="1.0" QQQ="1.0" QSR="1.0" RAD="1.0" RAIL="1.0" RIBT="1.0" RKT="1.0" RMO="1.0" RP="1.0" RPAY="1.0" RRD="1.0" RSX="1.0" RUT="1.0" RVLV="1.0" RYCEY="1.0" SAVA="1.0" SAVE="1.0" SGLB="1.0" SID="1.0" SIFY="1.0" SINO="1.0" SINT="1.0" SIOX="1.0" SIRI="1.0" SITC="1.0" SIVR="1.0" SJI="1.0" SKLZ="1.0" SKT="1.0" SLDB="1.0" SLQT="1.0" SNAP="1.0" SNCA="1.0" SNOA="1.0" SOGO="1.0" SOS="1.0" SPCB="1.0" SPD="1.0" SPRT="1.0" SPX="1.0" SPY="1.0" SQ="1.0" STON="1.0" SUNW="1.0" SWI="1.0" SWK="1.0" T="1.0" TGTX="1.0" TH="1.0" THTX="1.0" TSIA="1.0" TSLA="1.0" TSLAX="1.0" TZA="1.0" U="1.0" UAL="1.0" UAMY="1.0" UEC="1.0" UIS="1.0" ULTA="1.0" USAC="1.0" USWS="1.0" UTZ="1.0" UUUU="1.0" UXIN="1.0" VALE="1.0" VEU="1.0" VJET="1.0" VSTM="1.0" VTRS="1.0" VVOS="1.0" VWO="1.0" WAFU="1.0" WETF="1.0" WKEY="1.0" X="1.0" XELA="1.0" XERS="1.0" XL="1.0" XLP="1.0" XLU="1.0" XTLB="1.0" YGMZ="1.0" ZKIN="1.0" ZM="1.0"/>
              </TRG_0>
              <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-1.0" TRG_TIF="DAY">
                <OFFSET_PER_SYMBOL AA="-1.0" AAL="-1.0" AAP="-1.0" AAPL="-1.0" ABG="-1.0" ABML="-1.0" ACER="-1.0" ADMP="-1.0" AEG="-1.0" AEHL="-1.0" AFI="-1.0" AJRD="-1.0" AKU="-1.0" ALEC="-1.0" AMC="-1.0" AMCR="-1.0" AMD="-1.0" AMRS="-1.0" AMTX="-1.0" AMZN="-1.0" ANIX="-1.0" ANPC="-1.0" ANTE="-1.0" AP="-1.0" APOP="-1.0" APTO="-1.0" AR="-1.0" AREC="-1.0" ARES="-1.0" ARLO="-1.0" ASLEW="-1.0" ATHM="-1.0" ATIF="-1.0" ATNF="-1.0" AUY="-1.0" AVCO="-1.0" AXL="-1.0" AZN="-1.0" AZRX="-1.0" BABA="-1.0" BBD="-1.0" BBDC="-1.0" BFT="-1.0" BILI="-1.0" BLIN="-1.0" BMY="-1.0" BOX="-1.0" BP="-1.0" BRQS="-1.0" BSGM="-1.0" BURL="-1.0" BWAY="-1.0" BXRX="-1.0" BYFC="-1.0" CAKE="-1.0" CAL="-1.0" CCI="-1.0" CCIV="-1.0" CCJ="-1.0" CCL="-1.0" CEQPP="-1.0" CHNG="-1.0" CHX="-1.0" CIDM="-1.0" CIIC="-1.0" CLBS="-1.0" CLDR="-1.0" CLEU="-1.0" CLSN="-1.0" CLVS="-1.0" CNNE="-1.0" COHN="-1.0" COMP="-1.0" CPHI="-1.0" CPRX="-1.0" CRBP="-1.0" CRTD="-1.0" CSCO="-1.0" CTIC="-1.0" CUB="-1.0" CVX="-1.0" DCTH="-1.0" DHT="-1.0" DIS="-1.0" DISCK="-1.0" DNN="-1.0" DOX="-1.0" DPW="-1.0" DS="-1.0" DSKE="-1.0" DTSS="-1.0" EARS="-1.0" EBS="-1.0" EDTK="-1.0" EMAN="-1.0" ENPH="-1.0" ETSY="-1.0" EURN="-1.0" EVRG="-1.0" EW="-1.0" EWA="-1.0" EXEL="-1.0" EYE="-1.0" EYES="-1.0" FAST="-1.0" FB="-1.0" FCAC="-1.0" FLR="-1.0" FLY="-1.0" FPRX="-1.0" FSLR="-1.0" FSR="-1.0" FUSE="-1.0" FUV="-1.0" GEL="-1.0" GLOP="-1.0" GME="-1.0" GMER="-1.0" GNCA="-1.0" GOCO="-1.0" HBI="-1.0" HCHC="-1.0" HENKY="-1.0" HPE="-1.0" HPQ="-1.0" HPR="-1.0" HTBX="-1.0" HTHIY="-1.0" HTZ="-1.0" HUGE="-1.0" HYLN="-1.0" HZON="-1.0" IDEX="-1.0" IGSB="-1.0" IMTE="-1.0" INFI="-1.0" INFY="-1.0" ING="-1.0" INO="-1.0" INPX="-1.0" INTC="-1.0" INUV="-1.0" INVO="-1.0" INVU="-1.0" IWM="-1.0" IZEA="-1.0" JE="-1.0" JENGQ="-1.0" JFIN="-1.0" JOB="-1.0" K="-1.0" KBR="-1.0" KEYS="-1.0" KMPH="-1.0" KMX="-1.0" KR="-1.0" LAZR="-1.0" LCI="-1.0" LCTX="-1.0" LEAF="-1.0" LIVX="-1.0" LKQ="-1.0" LODE="-1.0" LRTNF="-1.0" LUV="-1.0" MARA="-1.0" MBT="-1.0" MDII="-1.0" MESA="-1.0" METX="-1.0" MFGP="-1.0" MMDA1="-1.0" MRIN="-1.0" MSFT="-1.0" MTEM="-1.0" MU="-1.0" MVIS="-1.0" MX="-1.0" MYO="-1.0" MYSZ="-1.0" NCLH="-1.0" NDX="-1.0" NEOS="-1.0" NGD="-1.0" NGL="-1.0" NIO="-1.0" NLOK="-1.0" NLSN="-1.0" NLSP="-1.0" NLST="-1.0" NNVC="-1.0" NOK="-1.0" NOV="-1.0" NQ="-1.0" NSLP="-1.0" NTP="-1.0" NUZE="-1.0" NVDA="-1.0" NXE="-1.0" OCGN="-1.0" OGEN="-1.0" OGI="-1.0" OHI="-1.0" OI="-1.0" OLO="-1.0" OPEN="-1.0" OPGN="-1.0" ORCL="-1.0" ORMP="-1.0" OTIS="-1.0" OVID="-1.0" PAA="-1.0" PAAS="-1.0" PERI="-1.0" PFF="-1.0" PGX="-1.0" PHM="-1.0" PNC="-1.0" POTX="-1.0" PPG="-1.0" PPL="-1.0" PTE="-1.0" QQQ="-1.0" QSR="-1.0" RAD="-1.0" RAIL="-1.0" RIBT="-1.0" RKT="-1.0" RMO="-1.0" RP="-1.0" RPAY="-1.0" RRD="-1.0" RSX="-1.0" RUT="-1.0" RVLV="-1.0" RYCEY="-1.0" SAVA="-1.0" SAVE="-1.0" SGLB="-1.0" SID="-1.0" SIFY="-1.0" SINO="-1.0" SINT="-1.0" SIOX="-1.0" SIRI="-1.0" SITC="-1.0" SIVR="-1.0" SJI="-1.0" SKLZ="-1.0" SKT="-1.0" SLDB="-1.0" SLQT="-1.0" SNAP="-1.0" SNCA="-1.0" SNOA="-1.0" SOGO="-1.0" SOS="-1.0" SPCB="-1.0" SPD="-1.0" SPRT="-1.0" SPX="-1.0" SPY="-1.0" SQ="-1.0" STON="-1.0" SUNW="-1.0" SWI="-1.0" SWK="-1.0" T="-1.0" TGTX="-1.0" TH="-1.0" THTX="-1.0" TSIA="-1.0" TSLA="-1.0" TSLAX="-1.0" TZA="-1.0" U="-1.0" UAL="-1.0" UAMY="-1.0" UEC="-1.0" UIS="-1.0" ULTA="-1.0" USAC="-1.0" USWS="-1.0" UTZ="-1.0" UUUU="-1.0" UXIN="-1.0" VALE="-1.0" VEU="-1.0" VJET="-1.0" VSTM="-1.0" VTRS="-1.0" VVOS="-1.0" VWO="-1.0" WAFU="-1.0" WETF="-1.0" WKEY="-1.0" X="-1.0" XELA="-1.0" XERS="-1.0" XL="-1.0" XLP="-1.0" XLU="-1.0" XTLB="-1.0" YGMZ="-1.0" ZKIN="-1.0" ZM="-1.0"/>
              </TRG_1>
              <_2>
                <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="2.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AA="2.0" AAL="2.0" AAP="2.0" AAPL="2.0" ABG="2.0" ABML="2.0" ACER="2.0" ADMP="2.0" AEG="2.0" AEHL="2.0" AFI="2.0" AJRD="2.0" AKU="2.0" ALEC="2.0" AMC="2.0" AMCR="2.0" AMD="2.0" AMRS="2.0" AMTX="2.0" AMZN="2.0" ANIX="2.0" ANPC="2.0" ANTE="2.0" AP="2.0" APOP="2.0" APTO="2.0" AR="2.0" AREC="2.0" ARES="2.0" ARLO="2.0" ASLEW="2.0" ATHM="2.0" ATIF="2.0" ATNF="2.0" AUY="2.0" AVCO="2.0" AXL="2.0" AZN="2.0" AZRX="2.0" BABA="2.0" BBD="2.0" BBDC="2.0" BFT="2.0" BILI="2.0" BLIN="2.0" BMY="2.0" BOX="2.0" BP="2.0" BRQS="2.0" BSGM="2.0" BURL="2.0" BWAY="2.0" BXRX="2.0" BYFC="2.0" CAKE="2.0" CAL="2.0" CCI="2.0" CCIV="2.0" CCJ="2.0" CCL="2.0" CEQPP="2.0" CHNG="2.0" CHX="2.0" CIDM="2.0" CIIC="2.0" CLBS="2.0" CLDR="2.0" CLEU="2.0" CLSN="2.0" CLVS="2.0" CNNE="2.0" COHN="2.0" COMP="2.0" CPHI="2.0" CPRX="2.0" CRBP="2.0" CRTD="2.0" CSCO="2.0" CTIC="2.0" CUB="2.0" CVX="2.0" DCTH="2.0" DHT="2.0" DIS="2.0" DISCK="2.0" DNN="2.0" DOX="2.0" DPW="2.0" DS="2.0" DSKE="2.0" DTSS="2.0" EARS="2.0" EBS="2.0" EDTK="2.0" EMAN="2.0" ENPH="2.0" ETSY="2.0" EURN="2.0" EVRG="2.0" EW="2.0" EWA="2.0" EXEL="2.0" EYE="2.0" EYES="2.0" FAST="2.0" FB="2.0" FCAC="2.0" FLR="2.0" FLY="2.0" FPRX="2.0" FSLR="2.0" FSR="2.0" FUSE="2.0" FUV="2.0" GEL="2.0" GLOP="2.0" GME="2.0" GMER="2.0" GNCA="2.0" GOCO="2.0" HBI="2.0" HCHC="2.0" HENKY="2.0" HPE="2.0" HPQ="2.0" HPR="2.0" HTBX="2.0" HTHIY="2.0" HTZ="2.0" HUGE="2.0" HYLN="2.0" HZON="2.0" IDEX="2.0" IGSB="2.0" IMTE="2.0" INFI="2.0" INFY="2.0" ING="2.0" INO="2.0" INPX="2.0" INTC="2.0" INUV="2.0" INVO="2.0" INVU="2.0" IWM="2.0" IZEA="2.0" JE="2.0" JENGQ="2.0" JFIN="2.0" JOB="2.0" K="2.0" KBR="2.0" KEYS="2.0" KMPH="2.0" KMX="2.0" KR="2.0" LAZR="2.0" LCI="2.0" LCTX="2.0" LEAF="2.0" LIVX="2.0" LKQ="2.0" LODE="2.0" LRTNF="2.0" LUV="2.0" MARA="2.0" MBT="2.0" MDII="2.0" MESA="2.0" METX="2.0" MFGP="2.0" MMDA1="2.0" MRIN="2.0" MSFT="2.0" MTEM="2.0" MU="2.0" MVIS="2.0" MX="2.0" MYO="2.0" MYSZ="2.0" NCLH="2.0" NDX="2.0" NEOS="2.0" NGD="2.0" NGL="2.0" NIO="2.0" NLOK="2.0" NLSN="2.0" NLSP="2.0" NLST="2.0" NNVC="2.0" NOK="2.0" NOV="2.0" NQ="2.0" NSLP="2.0" NTP="2.0" NUZE="2.0" NVDA="2.0" NXE="2.0" OCGN="2.0" OGEN="2.0" OGI="2.0" OHI="2.0" OI="2.0" OLO="2.0" OPEN="2.0" OPGN="2.0" ORCL="2.0" ORMP="2.0" OTIS="2.0" OVID="2.0" PAA="2.0" PAAS="2.0" PERI="2.0" PFF="2.0" PGX="2.0" PHM="2.0" PNC="2.0" POTX="2.0" PPG="2.0" PPL="2.0" PTE="2.0" QQQ="2.0" QSR="2.0" RAD="2.0" RAIL="2.0" RIBT="2.0" RKT="2.0" RMO="2.0" RP="2.0" RPAY="2.0" RRD="2.0" RSX="2.0" RUT="2.0" RVLV="2.0" RYCEY="2.0" SAVA="2.0" SAVE="2.0" SGLB="2.0" SID="2.0" SIFY="2.0" SINO="2.0" SINT="2.0" SIOX="2.0" SIRI="2.0" SITC="2.0" SIVR="2.0" SJI="2.0" SKLZ="2.0" SKT="2.0" SLDB="2.0" SLQT="2.0" SNAP="2.0" SNCA="2.0" SNOA="2.0" SOGO="2.0" SOS="2.0" SPCB="2.0" SPD="2.0" SPRT="2.0" SPX="2.0" SPY="2.0" SQ="2.0" STON="2.0" SUNW="2.0" SWI="2.0" SWK="2.0" T="2.0" TGTX="2.0" TH="2.0" THTX="2.0" TSIA="2.0" TSLA="2.0" TSLAX="2.0" TZA="2.0" U="2.0" UAL="2.0" UAMY="2.0" UEC="2.0" UIS="2.0" ULTA="2.0" USAC="2.0" USWS="2.0" UTZ="2.0" UUUU="2.0" UXIN="2.0" VALE="2.0" VEU="2.0" VJET="2.0" VSTM="2.0" VTRS="2.0" VVOS="2.0" VWO="2.0" WAFU="2.0" WETF="2.0" WKEY="2.0" X="2.0" XELA="2.0" XERS="2.0" XL="2.0" XLP="2.0" XLU="2.0" XTLB="2.0" YGMZ="2.0" ZKIN="2.0" ZM="2.0"/>
                </TRG_0>
                <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-2.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AA="-2.0" AAL="-2.0" AAP="-2.0" AAPL="-2.0" ABG="-2.0" ABML="-2.0" ACER="-2.0" ADMP="-2.0" AEG="-2.0" AEHL="-2.0" AFI="-2.0" AJRD="-2.0" AKU="-2.0" ALEC="-2.0" AMC="-2.0" AMCR="-2.0" AMD="-2.0" AMRS="-2.0" AMTX="-2.0" AMZN="-2.0" ANIX="-2.0" ANPC="-2.0" ANTE="-2.0" AP="-2.0" APOP="-2.0" APTO="-2.0" AR="-2.0" AREC="-2.0" ARES="-2.0" ARLO="-2.0" ASLEW="-2.0" ATHM="-2.0" ATIF="-2.0" ATNF="-2.0" AUY="-2.0" AVCO="-2.0" AXL="-2.0" AZN="-2.0" AZRX="-2.0" BABA="-2.0" BBD="-2.0" BBDC="-2.0" BFT="-2.0" BILI="-2.0" BLIN="-2.0" BMY="-2.0" BOX="-2.0" BP="-2.0" BRQS="-2.0" BSGM="-2.0" BURL="-2.0" BWAY="-2.0" BXRX="-2.0" BYFC="-2.0" CAKE="-2.0" CAL="-2.0" CCI="-2.0" CCIV="-2.0" CCJ="-2.0" CCL="-2.0" CEQPP="-2.0" CHNG="-2.0" CHX="-2.0" CIDM="-2.0" CIIC="-2.0" CLBS="-2.0" CLDR="-2.0" CLEU="-2.0" CLSN="-2.0" CLVS="-2.0" CNNE="-2.0" COHN="-2.0" COMP="-2.0" CPHI="-2.0" CPRX="-2.0" CRBP="-2.0" CRTD="-2.0" CSCO="-2.0" CTIC="-2.0" CUB="-2.0" CVX="-2.0" DCTH="-2.0" DHT="-2.0" DIS="-2.0" DISCK="-2.0" DNN="-2.0" DOX="-2.0" DPW="-2.0" DS="-2.0" DSKE="-2.0" DTSS="-2.0" EARS="-2.0" EBS="-2.0" EDTK="-2.0" EMAN="-2.0" ENPH="-2.0" ETSY="-2.0" EURN="-2.0" EVRG="-2.0" EW="-2.0" EWA="-2.0" EXEL="-2.0" EYE="-2.0" EYES="-2.0" FAST="-2.0" FB="-2.0" FCAC="-2.0" FLR="-2.0" FLY="-2.0" FPRX="-2.0" FSLR="-2.0" FSR="-2.0" FUSE="-2.0" FUV="-2.0" GEL="-2.0" GLOP="-2.0" GME="-2.0" GMER="-2.0" GNCA="-2.0" GOCO="-2.0" HBI="-2.0" HCHC="-2.0" HENKY="-2.0" HPE="-2.0" HPQ="-2.0" HPR="-2.0" HTBX="-2.0" HTHIY="-2.0" HTZ="-2.0" HUGE="-2.0" HYLN="-2.0" HZON="-2.0" IDEX="-2.0" IGSB="-2.0" IMTE="-2.0" INFI="-2.0" INFY="-2.0" ING="-2.0" INO="-2.0" INPX="-2.0" INTC="-2.0" INUV="-2.0" INVO="-2.0" INVU="-2.0" IWM="-2.0" IZEA="-2.0" JE="-2.0" JENGQ="-2.0" JFIN="-2.0" JOB="-2.0" K="-2.0" KBR="-2.0" KEYS="-2.0" KMPH="-2.0" KMX="-2.0" KR="-2.0" LAZR="-2.0" LCI="-2.0" LCTX="-2.0" LEAF="-2.0" LIVX="-2.0" LKQ="-2.0" LODE="-2.0" LRTNF="-2.0" LUV="-2.0" MARA="-2.0" MBT="-2.0" MDII="-2.0" MESA="-2.0" METX="-2.0" MFGP="-2.0" MMDA1="-2.0" MRIN="-2.0" MSFT="-2.0" MTEM="-2.0" MU="-2.0" MVIS="-2.0" MX="-2.0" MYO="-2.0" MYSZ="-2.0" NCLH="-2.0" NDX="-2.0" NEOS="-2.0" NGD="-2.0" NGL="-2.0" NIO="-2.0" NLOK="-2.0" NLSN="-2.0" NLSP="-2.0" NLST="-2.0" NNVC="-2.0" NOK="-2.0" NOV="-2.0" NQ="-2.0" NSLP="-2.0" NTP="-2.0" NUZE="-2.0" NVDA="-2.0" NXE="-2.0" OCGN="-2.0" OGEN="-2.0" OGI="-2.0" OHI="-2.0" OI="-2.0" OLO="-2.0" OPEN="-2.0" OPGN="-2.0" ORCL="-2.0" ORMP="-2.0" OTIS="-2.0" OVID="-2.0" PAA="-2.0" PAAS="-2.0" PERI="-2.0" PFF="-2.0" PGX="-2.0" PHM="-2.0" PNC="-2.0" POTX="-2.0" PPG="-2.0" PPL="-2.0" PTE="-2.0" QQQ="-2.0" QSR="-2.0" RAD="-2.0" RAIL="-2.0" RIBT="-2.0" RKT="-2.0" RMO="-2.0" RP="-2.0" RPAY="-2.0" RRD="-2.0" RSX="-2.0" RUT="-2.0" RVLV="-2.0" RYCEY="-2.0" SAVA="-2.0" SAVE="-2.0" SGLB="-2.0" SID="-2.0" SIFY="-2.0" SINO="-2.0" SINT="-2.0" SIOX="-2.0" SIRI="-2.0" SITC="-2.0" SIVR="-2.0" SJI="-2.0" SKLZ="-2.0" SKT="-2.0" SLDB="-2.0" SLQT="-2.0" SNAP="-2.0" SNCA="-2.0" SNOA="-2.0" SOGO="-2.0" SOS="-2.0" SPCB="-2.0" SPD="-2.0" SPRT="-2.0" SPX="-2.0" SPY="-2.0" SQ="-2.0" STON="-2.0" SUNW="-2.0" SWI="-2.0" SWK="-2.0" T="-2.0" TGTX="-2.0" TH="-2.0" THTX="-2.0" TSIA="-2.0" TSLA="-2.0" TSLAX="-2.0" TZA="-2.0" U="-2.0" UAL="-2.0" UAMY="-2.0" UEC="-2.0" UIS="-2.0" ULTA="-2.0" USAC="-2.0" USWS="-2.0" UTZ="-2.0" UUUU="-2.0" UXIN="-2.0" VALE="-2.0" VEU="-2.0" VJET="-2.0" VSTM="-2.0" VTRS="-2.0" VVOS="-2.0" VWO="-2.0" WAFU="-2.0" WETF="-2.0" WKEY="-2.0" X="-2.0" XELA="-2.0" XERS="-2.0" XL="-2.0" XLP="-2.0" XLU="-2.0" XTLB="-2.0" YGMZ="-2.0" ZKIN="-2.0" ZM="-2.0"/>
                </TRG_1>
              </_2>
              <_3>
                <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="3.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AA="3.0" AAL="3.0" AAP="3.0" AAPL="3.0" ABG="3.0" ABML="3.0" ACER="3.0" ADMP="3.0" AEG="3.0" AEHL="3.0" AFI="3.0" AJRD="3.0" AKU="3.0" ALEC="3.0" AMC="3.0" AMCR="3.0" AMD="3.0" AMRS="3.0" AMTX="3.0" AMZN="3.0" ANIX="3.0" ANPC="3.0" ANTE="3.0" AP="3.0" APOP="3.0" APTO="3.0" AR="3.0" AREC="3.0" ARES="3.0" ARLO="3.0" ASLEW="3.0" ATHM="3.0" ATIF="3.0" ATNF="3.0" AUY="3.0" AVCO="3.0" AXL="3.0" AZN="3.0" AZRX="3.0" BABA="3.0" BBD="3.0" BBDC="3.0" BFT="3.0" BILI="3.0" BLIN="3.0" BMY="3.0" BOX="3.0" BP="3.0" BRQS="3.0" BSGM="3.0" BURL="3.0" BWAY="3.0" BXRX="3.0" BYFC="3.0" CAKE="3.0" CAL="3.0" CCI="3.0" CCIV="3.0" CCJ="3.0" CCL="3.0" CEQPP="3.0" CHNG="3.0" CHX="3.0" CIDM="3.0" CIIC="3.0" CLBS="3.0" CLDR="3.0" CLEU="3.0" CLSN="3.0" CLVS="3.0" CNNE="3.0" COHN="3.0" COMP="3.0" CPHI="3.0" CPRX="3.0" CRBP="3.0" CRTD="3.0" CSCO="3.0" CTIC="3.0" CUB="3.0" CVX="3.0" DCTH="3.0" DHT="3.0" DIS="3.0" DISCK="3.0" DNN="3.0" DOX="3.0" DPW="3.0" DS="3.0" DSKE="3.0" DTSS="3.0" EARS="3.0" EBS="3.0" EDTK="3.0" EMAN="3.0" ENPH="3.0" ETSY="3.0" EURN="3.0" EVRG="3.0" EW="3.0" EWA="3.0" EXEL="3.0" EYE="3.0" EYES="3.0" FAST="3.0" FB="3.0" FCAC="3.0" FLR="3.0" FLY="3.0" FPRX="3.0" FSLR="3.0" FSR="3.0" FUSE="3.0" FUV="3.0" GEL="3.0" GLOP="3.0" GME="3.0" GMER="3.0" GNCA="3.0" GOCO="3.0" HBI="3.0" HCHC="3.0" HENKY="3.0" HPE="3.0" HPQ="3.0" HPR="3.0" HTBX="3.0" HTHIY="3.0" HTZ="3.0" HUGE="3.0" HYLN="3.0" HZON="3.0" IDEX="3.0" IGSB="3.0" IMTE="3.0" INFI="3.0" INFY="3.0" ING="3.0" INO="3.0" INPX="3.0" INTC="3.0" INUV="3.0" INVO="3.0" INVU="3.0" IWM="3.0" IZEA="3.0" JE="3.0" JENGQ="3.0" JFIN="3.0" JOB="3.0" K="3.0" KBR="3.0" KEYS="3.0" KMPH="3.0" KMX="3.0" KR="3.0" LAZR="3.0" LCI="3.0" LCTX="3.0" LEAF="3.0" LIVX="3.0" LKQ="3.0" LODE="3.0" LRTNF="3.0" LUV="3.0" MARA="3.0" MBT="3.0" MDII="3.0" MESA="3.0" METX="3.0" MFGP="3.0" MMDA1="3.0" MRIN="3.0" MSFT="3.0" MTEM="3.0" MU="3.0" MVIS="3.0" MX="3.0" MYO="3.0" MYSZ="3.0" NCLH="3.0" NDX="3.0" NEOS="3.0" NGD="3.0" NGL="3.0" NIO="3.0" NLOK="3.0" NLSN="3.0" NLSP="3.0" NLST="3.0" NNVC="3.0" NOK="3.0" NOV="3.0" NQ="3.0" NSLP="3.0" NTP="3.0" NUZE="3.0" NVDA="3.0" NXE="3.0" OCGN="3.0" OGEN="3.0" OGI="3.0" OHI="3.0" OI="3.0" OLO="3.0" OPEN="3.0" OPGN="3.0" ORCL="3.0" ORMP="3.0" OTIS="3.0" OVID="3.0" PAA="3.0" PAAS="3.0" PERI="3.0" PFF="3.0" PGX="3.0" PHM="3.0" PNC="3.0" POTX="3.0" PPG="3.0" PPL="3.0" PTE="3.0" QQQ="3.0" QSR="3.0" RAD="3.0" RAIL="3.0" RIBT="3.0" RKT="3.0" RMO="3.0" RP="3.0" RPAY="3.0" RRD="3.0" RSX="3.0" RUT="3.0" RVLV="3.0" RYCEY="3.0" SAVA="3.0" SAVE="3.0" SGLB="3.0" SID="3.0" SIFY="3.0" SINO="3.0" SINT="3.0" SIOX="3.0" SIRI="3.0" SITC="3.0" SIVR="3.0" SJI="3.0" SKLZ="3.0" SKT="3.0" SLDB="3.0" SLQT="3.0" SNAP="3.0" SNCA="3.0" SNOA="3.0" SOGO="3.0" SOS="3.0" SPCB="3.0" SPD="3.0" SPRT="3.0" SPX="3.0" SPY="3.0" SQ="3.0" STON="3.0" SUNW="3.0" SWI="3.0" SWK="3.0" T="3.0" TGTX="3.0" TH="3.0" THTX="3.0" TSIA="3.0" TSLA="3.0" TSLAX="3.0" TZA="3.0" U="3.0" UAL="3.0" UAMY="3.0" UEC="3.0" UIS="3.0" ULTA="3.0" USAC="3.0" USWS="3.0" UTZ="3.0" UUUU="3.0" UXIN="3.0" VALE="3.0" VEU="3.0" VJET="3.0" VSTM="3.0" VTRS="3.0" VVOS="3.0" VWO="3.0" WAFU="3.0" WETF="3.0" WKEY="3.0" X="3.0" XELA="3.0" XERS="3.0" XL="3.0" XLP="3.0" XLU="3.0" XTLB="3.0" YGMZ="3.0" ZKIN="3.0" ZM="3.0"/>
                </TRG_0>
                <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-3.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AA="-3.0" AAL="-3.0" AAP="-3.0" AAPL="-3.0" ABG="-3.0" ABML="-3.0" ACER="-3.0" ADMP="-3.0" AEG="-3.0" AEHL="-3.0" AFI="-3.0" AJRD="-3.0" AKU="-3.0" ALEC="-3.0" AMC="-3.0" AMCR="-3.0" AMD="-3.0" AMRS="-3.0" AMTX="-3.0" AMZN="-3.0" ANIX="-3.0" ANPC="-3.0" ANTE="-3.0" AP="-3.0" APOP="-3.0" APTO="-3.0" AR="-3.0" AREC="-3.0" ARES="-3.0" ARLO="-3.0" ASLEW="-3.0" ATHM="-3.0" ATIF="-3.0" ATNF="-3.0" AUY="-3.0" AVCO="-3.0" AXL="-3.0" AZN="-3.0" AZRX="-3.0" BABA="-3.0" BBD="-3.0" BBDC="-3.0" BFT="-3.0" BILI="-3.0" BLIN="-3.0" BMY="-3.0" BOX="-3.0" BP="-3.0" BRQS="-3.0" BSGM="-3.0" BURL="-3.0" BWAY="-3.0" BXRX="-3.0" BYFC="-3.0" CAKE="-3.0" CAL="-3.0" CCI="-3.0" CCIV="-3.0" CCJ="-3.0" CCL="-3.0" CEQPP="-3.0" CHNG="-3.0" CHX="-3.0" CIDM="-3.0" CIIC="-3.0" CLBS="-3.0" CLDR="-3.0" CLEU="-3.0" CLSN="-3.0" CLVS="-3.0" CNNE="-3.0" COHN="-3.0" COMP="-3.0" CPHI="-3.0" CPRX="-3.0" CRBP="-3.0" CRTD="-3.0" CSCO="-3.0" CTIC="-3.0" CUB="-3.0" CVX="-3.0" DCTH="-3.0" DHT="-3.0" DIS="-3.0" DISCK="-3.0" DNN="-3.0" DOX="-3.0" DPW="-3.0" DS="-3.0" DSKE="-3.0" DTSS="-3.0" EARS="-3.0" EBS="-3.0" EDTK="-3.0" EMAN="-3.0" ENPH="-3.0" ETSY="-3.0" EURN="-3.0" EVRG="-3.0" EW="-3.0" EWA="-3.0" EXEL="-3.0" EYE="-3.0" EYES="-3.0" FAST="-3.0" FB="-3.0" FCAC="-3.0" FLR="-3.0" FLY="-3.0" FPRX="-3.0" FSLR="-3.0" FSR="-3.0" FUSE="-3.0" FUV="-3.0" GEL="-3.0" GLOP="-3.0" GME="-3.0" GMER="-3.0" GNCA="-3.0" GOCO="-3.0" HBI="-3.0" HCHC="-3.0" HENKY="-3.0" HPE="-3.0" HPQ="-3.0" HPR="-3.0" HTBX="-3.0" HTHIY="-3.0" HTZ="-3.0" HUGE="-3.0" HYLN="-3.0" HZON="-3.0" IDEX="-3.0" IGSB="-3.0" IMTE="-3.0" INFI="-3.0" INFY="-3.0" ING="-3.0" INO="-3.0" INPX="-3.0" INTC="-3.0" INUV="-3.0" INVO="-3.0" INVU="-3.0" IWM="-3.0" IZEA="-3.0" JE="-3.0" JENGQ="-3.0" JFIN="-3.0" JOB="-3.0" K="-3.0" KBR="-3.0" KEYS="-3.0" KMPH="-3.0" KMX="-3.0" KR="-3.0" LAZR="-3.0" LCI="-3.0" LCTX="-3.0" LEAF="-3.0" LIVX="-3.0" LKQ="-3.0" LODE="-3.0" LRTNF="-3.0" LUV="-3.0" MARA="-3.0" MBT="-3.0" MDII="-3.0" MESA="-3.0" METX="-3.0" MFGP="-3.0" MMDA1="-3.0" MRIN="-3.0" MSFT="-3.0" MTEM="-3.0" MU="-3.0" MVIS="-3.0" MX="-3.0" MYO="-3.0" MYSZ="-3.0" NCLH="-3.0" NDX="-3.0" NEOS="-3.0" NGD="-3.0" NGL="-3.0" NIO="-3.0" NLOK="-3.0" NLSN="-3.0" NLSP="-3.0" NLST="-3.0" NNVC="-3.0" NOK="-3.0" NOV="-3.0" NQ="-3.0" NSLP="-3.0" NTP="-3.0" NUZE="-3.0" NVDA="-3.0" NXE="-3.0" OCGN="-3.0" OGEN="-3.0" OGI="-3.0" OHI="-3.0" OI="-3.0" OLO="-3.0" OPEN="-3.0" OPGN="-3.0" ORCL="-3.0" ORMP="-3.0" OTIS="-3.0" OVID="-3.0" PAA="-3.0" PAAS="-3.0" PERI="-3.0" PFF="-3.0" PGX="-3.0" PHM="-3.0" PNC="-3.0" POTX="-3.0" PPG="-3.0" PPL="-3.0" PTE="-3.0" QQQ="-3.0" QSR="-3.0" RAD="-3.0" RAIL="-3.0" RIBT="-3.0" RKT="-3.0" RMO="-3.0" RP="-3.0" RPAY="-3.0" RRD="-3.0" RSX="-3.0" RUT="-3.0" RVLV="-3.0" RYCEY="-3.0" SAVA="-3.0" SAVE="-3.0" SGLB="-3.0" SID="-3.0" SIFY="-3.0" SINO="-3.0" SINT="-3.0" SIOX="-3.0" SIRI="-3.0" SITC="-3.0" SIVR="-3.0" SJI="-3.0" SKLZ="-3.0" SKT="-3.0" SLDB="-3.0" SLQT="-3.0" SNAP="-3.0" SNCA="-3.0" SNOA="-3.0" SOGO="-3.0" SOS="-3.0" SPCB="-3.0" SPD="-3.0" SPRT="-3.0" SPX="-3.0" SPY="-3.0" SQ="-3.0" STON="-3.0" SUNW="-3.0" SWI="-3.0" SWK="-3.0" T="-3.0" TGTX="-3.0" TH="-3.0" THTX="-3.0" TSIA="-3.0" TSLA="-3.0" TSLAX="-3.0" TZA="-3.0" U="-3.0" UAL="-3.0" UAMY="-3.0" UEC="-3.0" UIS="-3.0" ULTA="-3.0" USAC="-3.0" USWS="-3.0" UTZ="-3.0" UUUU="-3.0" UXIN="-3.0" VALE="-3.0" VEU="-3.0" VJET="-3.0" VSTM="-3.0" VTRS="-3.0" VVOS="-3.0" VWO="-3.0" WAFU="-3.0" WETF="-3.0" WKEY="-3.0" X="-3.0" XELA="-3.0" XERS="-3.0" XL="-3.0" XLP="-3.0" XLU="-3.0" XTLB="-3.0" YGMZ="-3.0" ZKIN="-3.0" ZM="-3.0"/>
                </TRG_1>
              </_3>
            </TRADE>
          </CELL1>
          <MODELNODE0 COUNT="2" ROWLAYOUT="true" TYPE="SPLIT" WEIGHT="0.0">
            <MODELNODE0 COMPOSITENAME="CELL0" NAME="0" TYPE="LEAF" WEIGHT="0.5002630194634403"/>
            <MODELNODE1 COMPOSITENAME="CELL1" NAME="1" TYPE="LEAF" WEIGHT="0.4997369805365597"/>
          </MODELNODE0>
        </TOS_CHARTS>
      </DETACHED_FRAME_119>
      <DETACHED_FRAME_120 ALWAYS_ON_TOP="false" HEIGHT="1056" LAYOUT="CHARTS_GROUP" STATE="MAXIMIZED_HORIZ  MAXIMIZED_VERT" WIDTH="1936" X="-1928" Y="-8">
        <CHARTS_GROUP ORDER_ENTRY_EXPANDED="false" SELECTED_LAYOUT="TOS CHARTS"/>
        <ORDERBOOKPANEL SELECTED_TAB="0"/>
        <ORDERBOOK_STRATEGY_TABLE_SORTING/>
        <ORDER_AND_STRATEGY_BOOK EXPANDED="true"/>
        <ORDER_ENTRY_AND_ORDER_QUEUE>
          <GROUP MARKER="SINGLE"/>
        </ORDER_ENTRY_AND_ORDER_QUEUE>
        <ORDER_ENTRY_AND_SAVED_ORDERS EXPANDED="false"/>
        <PRICE_CONTROL CONDITION="1" CONDITION_LOCKED="false" PRICE="11.7" UNLOCKED="false"/>
        <SORTING COLUMN="TIME" ORDER="-1"/>
        <SWITCH POSITION="0"/>
        <TOS_CHARTS COLUMN_COUNT="3" CURRENT_GRID_NAME="mahot" DEFAULT_TYPE="DASHBOARD" ORDER_ENTRY_EXPANDED="false" ROW_COUNT="1">
          <CELL0 ROWSPANELWEIGHT="1.0" ROWWEIGHT0="1.0" ROWWEIGHT1="1.0" SELECTED_TYPE="CHART" SIDEBAR_IS_ACTIVE="true" SYMBOL="DCTH" SYMBOL_GROUP="2" TRADE_BUTTONS_MIGRATED="true">
            <ACTIVETRADER CELL_IDS="POSITION_BREAKDOWN;NET_POSITION;AVERAGE_PRICE;PL_OPEN;PL_DAY" COLUMNS="TRADE_AMOUNT:100:,BUY_ORDER:150:,BIDSIZE:60:,PRICE:100:,ASKSIZE:60:,SELL_ORDER:150:" ENABLED="true" SHOW_STUDY_MARKERS="false" SYMBOL="OCGN" SYMBOL_GROUP="2" SYNC_AT_AND_CHART_CROSSHAIR="true" VERTICAL="false" VISIBLE="false" WEIGHT="2.0" ZOOMING_STEPS="1">
              <POSITION_SUMMARY_PANEL CELL_IDS="POSITION_BREAKDOWN;NET_POSITION;AVERAGE_PRICE;PL_OPEN;PL_DAY" ENABLED="true"/>
              <TRADE_BUTTONS_CONFIG CONFIGURATION_NAME="SINGLE" ORDER_RULES_SET="STOCK" ORDER_TYPE="LIMIT" OS_AUTO="false" OS_EXPANDED="true" OS_TIF="DAY" QTY="200.0" QTY_STEP="1.0" TEMPLATE="SINGLE" TRADE_BUTTONS="BUY_MKT;SELL_MKT;MULTI_CANCEL;REVERSE;FLAT;SECOND_LINE;QUANTITY_WITH_BUTTONS;ORDER_TEMPLATE;AUTO_SEND;ORDER_SETUP">
                <OCO_STOP>
                  <TRG_0 TRG_ENBL="true" TRG_LINK="ASK_BID" TRG_OFFSET_MODE="TICK" TRG_OT="STOP" TRG_SETUP="10.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL AA="10.0" AAL="10.0" AAPL="10.0" ADBE="10.0" AEG="10.0" AFI="10.0" AMC="10.0" AMCR="10.0" AMD="10.0" AMRS="10.0" AMZN="10.0" ANTE="10.0" AP="10.0" ARLO="10.0" AXL="10.0" BA="10.0" BBBY="10.0" BBD="10.0" BMY="10.0" BSGM="10.0" BURL="10.0" BXRX="10.0" CAKE="10.0" CCI="10.0" CCIV="10.0" CCJ="10.0" CHNG="10.0" CHX="10.0" CIDM="10.0" CLBS="10.0" CLDR="10.0" CLSN="10.0" CNNE="10.0" COHN="10.0" CRBP="10.0" CSCO="10.0" CVX="10.0" DHT="10.0" DIS="10.0" DISCK="10.0" DNN="10.0" DPW="10.0" DS="10.0" EMAN="10.0" ETSY="10.0" EVRG="10.0" EW="10.0" EWA="10.0" EYE="10.0" EYES="10.0" FAST="10.0" FCAC="10.0" FPRX="10.0" FSLR="10.0" FSR="10.0" FUSE="10.0" GEL="10.0" GME="10.0" GOCO="10.0" GOED="10.0" HBI="10.0" HPQ="10.0" HPR="10.0" HTBX="10.0" HTZ="10.0" HUGE="10.0" HYLN="10.0" HZON="10.0" IDEX="10.0" IDXX="10.0" IGSB="10.0" INFI="10.0" INO="10.0" INTC="10.0" INTU="10.0" IZEA="10.0" JE="10.0" KEYS="10.0" KMPH="10.0" LCI="10.0" LCTX="10.0" LKQ="10.0" LUV="10.0" MBT="10.0" MDII="10.0" MESA="10.0" MFGP="10.0" MMDA1="10.0" MRIN="10.0" MX="10.0" NCLH="10.0" NGD="10.0" NGL="10.0" NIO="10.0" NLOK="10.0" NLSN="10.0" NLST="10.0" NNVC="10.0" NOK="10.0" NOV="10.0" NTP="10.0" NVDA="10.0" OCGN="10.0" OGI="10.0" OPEN="10.0" OPGN="10.0" ORCL="10.0" OTIS="10.0" OVID="10.0" PAA="10.0" PAAS="10.0" PERI="10.0" PFF="10.0" PGX="10.0" POTX="10.0" PPG="10.0" PTE="10.0" RAD="10.0" RKT="10.0" RP="10.0" RPAY="10.0" RRD="10.0" RSX="10.0" RUT="10.0" SAVA="10.0" SID="10.0" SIFY="10.0" SINO="10.0" SIOX="10.0" SITC="10.0" SIVR="10.0" SKLZ="10.0" SKT="10.0" SLQT="10.0" SNAP="10.0" SOS="10.0" SQ="10.0" SWK="10.0" TAP="10.0" TGTX="10.0" TSIA="10.0" TSLA="10.0" TZA="10.0" U="10.0" UAL="10.0" UAMY="10.0" UEC="10.0" UIS="10.0" USWS="10.0" UUUU="10.0" VALE="10.0" VIX="10.0" VJET="10.0" VTRS="10.0" WETF="10.0" WKHS="10.0" X="10.0" XERS="10.0" XL="10.0" XLP="10.0" XLU="10.0" XTLB="10.0" YGMZ="10.0" ZM="10.0"/>
                  </TRG_0>
                </OCO_STOP>
                <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="1.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AA="1.0" AAL="1.0" AAPL="1.0" ADBE="1.0" AEG="1.0" AFI="1.0" AMC="1.0" AMCR="1.0" AMD="1.0" AMRS="1.0" AMZN="1.0" ANTE="1.0" AP="1.0" ARLO="1.0" AXL="1.0" BA="1.0" BBBY="1.0" BBD="1.0" BMY="1.0" BSGM="1.0" BURL="1.0" BXRX="1.0" CAKE="1.0" CCI="1.0" CCIV="1.0" CCJ="1.0" CHNG="1.0" CHX="1.0" CIDM="1.0" CLBS="1.0" CLDR="1.0" CLSN="1.0" CNNE="1.0" COHN="1.0" CRBP="1.0" CSCO="1.0" CVX="1.0" DHT="1.0" DIS="1.0" DISCK="1.0" DNN="1.0" DPW="1.0" DS="1.0" EMAN="1.0" ETSY="1.0" EVRG="1.0" EW="1.0" EWA="1.0" EYE="1.0" EYES="1.0" FAST="1.0" FCAC="1.0" FPRX="1.0" FSLR="1.0" FSR="1.0" FUSE="1.0" GEL="1.0" GME="1.0" GOCO="1.0" GOED="1.0" HBI="1.0" HPQ="1.0" HPR="1.0" HTBX="1.0" HTZ="1.0" HUGE="1.0" HYLN="1.0" HZON="1.0" IDEX="1.0" IDXX="1.0" IGSB="1.0" INFI="1.0" INO="1.0" INTC="1.0" INTU="1.0" IZEA="1.0" JE="1.0" KEYS="1.0" KMPH="1.0" LCI="1.0" LCTX="1.0" LKQ="1.0" LUV="1.0" MBT="1.0" MDII="1.0" MESA="1.0" MFGP="1.0" MMDA1="1.0" MRIN="1.0" MX="1.0" NCLH="1.0" NGD="1.0" NGL="1.0" NIO="1.0" NLOK="1.0" NLSN="1.0" NLST="1.0" NNVC="1.0" NOK="1.0" NOV="1.0" NTP="1.0" NVDA="1.0" OCGN="1.0" OGI="1.0" OPEN="1.0" OPGN="1.0" ORCL="1.0" OTIS="1.0" OVID="1.0" PAA="1.0" PAAS="1.0" PERI="1.0" PFF="1.0" PGX="1.0" POTX="1.0" PPG="1.0" PTE="1.0" RAD="1.0" RKT="1.0" RP="1.0" RPAY="1.0" RRD="1.0" RSX="1.0" RUT="1.0" SAVA="1.0" SID="1.0" SIFY="1.0" SINO="1.0" SIOX="1.0" SITC="1.0" SIVR="1.0" SKLZ="1.0" SKT="1.0" SLQT="1.0" SNAP="1.0" SOS="1.0" SQ="1.0" SWK="1.0" TAP="1.0" TGTX="1.0" TSIA="1.0" TSLA="1.0" TZA="1.0" U="1.0" UAL="1.0" UAMY="1.0" UEC="1.0" UIS="1.0" USWS="1.0" UUUU="1.0" VALE="1.0" VIX="1.0" VJET="1.0" VTRS="1.0" WETF="1.0" WKHS="1.0" X="1.0" XERS="1.0" XL="1.0" XLP="1.0" XLU="1.0" XTLB="1.0" YGMZ="1.0" ZM="1.0"/>
                </TRG_0>
                <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-1.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AA="-1.0" AAL="-1.0" AAPL="-1.0" ADBE="-1.0" AEG="-1.0" AFI="-1.0" AMC="-1.0" AMCR="-1.0" AMD="-1.0" AMRS="-1.0" AMZN="-1.0" ANTE="-1.0" AP="-1.0" ARLO="-1.0" AXL="-1.0" BA="-1.0" BBBY="-1.0" BBD="-1.0" BMY="-1.0" BSGM="-1.0" BURL="-1.0" BXRX="-1.0" CAKE="-1.0" CCI="-1.0" CCIV="-1.0" CCJ="-1.0" CHNG="-1.0" CHX="-1.0" CIDM="-1.0" CLBS="-1.0" CLDR="-1.0" CLSN="-1.0" CNNE="-1.0" COHN="-1.0" CRBP="-1.0" CSCO="-1.0" CVX="-1.0" DHT="-1.0" DIS="-1.0" DISCK="-1.0" DNN="-1.0" DPW="-1.0" DS="-1.0" EMAN="-1.0" ETSY="-1.0" EVRG="-1.0" EW="-1.0" EWA="-1.0" EYE="-1.0" EYES="-1.0" FAST="-1.0" FCAC="-1.0" FPRX="-1.0" FSLR="-1.0" FSR="-1.0" FUSE="-1.0" GEL="-1.0" GME="-1.0" GOCO="-1.0" GOED="-1.0" HBI="-1.0" HPQ="-1.0" HPR="-1.0" HTBX="-1.0" HTZ="-1.0" HUGE="-1.0" HYLN="-1.0" HZON="-1.0" IDEX="-1.0" IDXX="-1.0" IGSB="-1.0" INFI="-1.0" INO="-1.0" INTC="-1.0" INTU="-1.0" IZEA="-1.0" JE="-1.0" KEYS="-1.0" KMPH="-1.0" LCI="-1.0" LCTX="-1.0" LKQ="-1.0" LUV="-1.0" MBT="-1.0" MDII="-1.0" MESA="-1.0" MFGP="-1.0" MMDA1="-1.0" MRIN="-1.0" MX="-1.0" NCLH="-1.0" NGD="-1.0" NGL="-1.0" NIO="-1.0" NLOK="-1.0" NLSN="-1.0" NLST="-1.0" NNVC="-1.0" NOK="-1.0" NOV="-1.0" NTP="-1.0" NVDA="-1.0" OCGN="-1.0" OGI="-1.0" OPEN="-1.0" OPGN="-1.0" ORCL="-1.0" OTIS="-1.0" OVID="-1.0" PAA="-1.0" PAAS="-1.0" PERI="-1.0" PFF="-1.0" PGX="-1.0" POTX="-1.0" PPG="-1.0" PTE="-1.0" RAD="-1.0" RKT="-1.0" RP="-1.0" RPAY="-1.0" RRD="-1.0" RSX="-1.0" RUT="-1.0" SAVA="-1.0" SID="-1.0" SIFY="-1.0" SINO="-1.0" SIOX="-1.0" SITC="-1.0" SIVR="-1.0" SKLZ="-1.0" SKT="-1.0" SLQT="-1.0" SNAP="-1.0" SOS="-1.0" SQ="-1.0" SWK="-1.0" TAP="-1.0" TGTX="-1.0" TSIA="-1.0" TSLA="-1.0" TZA="-1.0" U="-1.0" UAL="-1.0" UAMY="-1.0" UEC="-1.0" UIS="-1.0" USWS="-1.0" UUUU="-1.0" VALE="-1.0" VIX="-1.0" VJET="-1.0" VTRS="-1.0" WETF="-1.0" WKHS="-1.0" X="-1.0" XERS="-1.0" XL="-1.0" XLP="-1.0" XLU="-1.0" XTLB="-1.0" YGMZ="-1.0" ZM="-1.0"/>
                </TRG_1>
                <_2>
                  <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="2.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL AA="2.0" AAL="2.0" AAPL="2.0" ADBE="2.0" AEG="2.0" AFI="2.0" AMC="2.0" AMCR="2.0" AMD="2.0" AMRS="2.0" AMZN="2.0" ANTE="2.0" AP="2.0" ARLO="2.0" AXL="2.0" BA="2.0" BBBY="2.0" BBD="2.0" BMY="2.0" BSGM="2.0" BURL="2.0" BXRX="2.0" CAKE="2.0" CCI="2.0" CCIV="2.0" CCJ="2.0" CHNG="2.0" CHX="2.0" CIDM="2.0" CLBS="2.0" CLDR="2.0" CLSN="2.0" CNNE="2.0" COHN="2.0" CRBP="2.0" CSCO="2.0" CVX="2.0" DHT="2.0" DIS="2.0" DISCK="2.0" DNN="2.0" DPW="2.0" DS="2.0" EMAN="2.0" ETSY="2.0" EVRG="2.0" EW="2.0" EWA="2.0" EYE="2.0" EYES="2.0" FAST="2.0" FCAC="2.0" FPRX="2.0" FSLR="2.0" FSR="2.0" FUSE="2.0" GEL="2.0" GME="2.0" GOCO="2.0" GOED="2.0" HBI="2.0" HPQ="2.0" HPR="2.0" HTBX="2.0" HTZ="2.0" HUGE="2.0" HYLN="2.0" HZON="2.0" IDEX="2.0" IDXX="2.0" IGSB="2.0" INFI="2.0" INO="2.0" INTC="2.0" INTU="2.0" IZEA="2.0" JE="2.0" KEYS="2.0" KMPH="2.0" LCI="2.0" LCTX="2.0" LKQ="2.0" LUV="2.0" MBT="2.0" MDII="2.0" MESA="2.0" MFGP="2.0" MMDA1="2.0" MRIN="2.0" MX="2.0" NCLH="2.0" NGD="2.0" NGL="2.0" NIO="2.0" NLOK="2.0" NLSN="2.0" NLST="2.0" NNVC="2.0" NOK="2.0" NOV="2.0" NTP="2.0" NVDA="2.0" OCGN="2.0" OGI="2.0" OPEN="2.0" OPGN="2.0" ORCL="2.0" OTIS="2.0" OVID="2.0" PAA="2.0" PAAS="2.0" PERI="2.0" PFF="2.0" PGX="2.0" POTX="2.0" PPG="2.0" PTE="2.0" RAD="2.0" RKT="2.0" RP="2.0" RPAY="2.0" RRD="2.0" RSX="2.0" RUT="2.0" SAVA="2.0" SID="2.0" SIFY="2.0" SINO="2.0" SIOX="2.0" SITC="2.0" SIVR="2.0" SKLZ="2.0" SKT="2.0" SLQT="2.0" SNAP="2.0" SOS="2.0" SQ="2.0" SWK="2.0" TAP="2.0" TGTX="2.0" TSIA="2.0" TSLA="2.0" TZA="2.0" U="2.0" UAL="2.0" UAMY="2.0" UEC="2.0" UIS="2.0" USWS="2.0" UUUU="2.0" VALE="2.0" VIX="2.0" VJET="2.0" VTRS="2.0" WETF="2.0" WKHS="2.0" X="2.0" XERS="2.0" XL="2.0" XLP="2.0" XLU="2.0" XTLB="2.0" YGMZ="2.0" ZM="2.0"/>
                  </TRG_0>
                  <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-2.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL AA="-2.0" AAL="-2.0" AAPL="-2.0" ADBE="-2.0" AEG="-2.0" AFI="-2.0" AMC="-2.0" AMCR="-2.0" AMD="-2.0" AMRS="-2.0" AMZN="-2.0" ANTE="-2.0" AP="-2.0" ARLO="-2.0" AXL="-2.0" BA="-2.0" BBBY="-2.0" BBD="-2.0" BMY="-2.0" BSGM="-2.0" BURL="-2.0" BXRX="-2.0" CAKE="-2.0" CCI="-2.0" CCIV="-2.0" CCJ="-2.0" CHNG="-2.0" CHX="-2.0" CIDM="-2.0" CLBS="-2.0" CLDR="-2.0" CLSN="-2.0" CNNE="-2.0" COHN="-2.0" CRBP="-2.0" CSCO="-2.0" CVX="-2.0" DHT="-2.0" DIS="-2.0" DISCK="-2.0" DNN="-2.0" DPW="-2.0" DS="-2.0" EMAN="-2.0" ETSY="-2.0" EVRG="-2.0" EW="-2.0" EWA="-2.0" EYE="-2.0" EYES="-2.0" FAST="-2.0" FCAC="-2.0" FPRX="-2.0" FSLR="-2.0" FSR="-2.0" FUSE="-2.0" GEL="-2.0" GME="-2.0" GOCO="-2.0" GOED="-2.0" HBI="-2.0" HPQ="-2.0" HPR="-2.0" HTBX="-2.0" HTZ="-2.0" HUGE="-2.0" HYLN="-2.0" HZON="-2.0" IDEX="-2.0" IDXX="-2.0" IGSB="-2.0" INFI="-2.0" INO="-2.0" INTC="-2.0" INTU="-2.0" IZEA="-2.0" JE="-2.0" KEYS="-2.0" KMPH="-2.0" LCI="-2.0" LCTX="-2.0" LKQ="-2.0" LUV="-2.0" MBT="-2.0" MDII="-2.0" MESA="-2.0" MFGP="-2.0" MMDA1="-2.0" MRIN="-2.0" MX="-2.0" NCLH="-2.0" NGD="-2.0" NGL="-2.0" NIO="-2.0" NLOK="-2.0" NLSN="-2.0" NLST="-2.0" NNVC="-2.0" NOK="-2.0" NOV="-2.0" NTP="-2.0" NVDA="-2.0" OCGN="-2.0" OGI="-2.0" OPEN="-2.0" OPGN="-2.0" ORCL="-2.0" OTIS="-2.0" OVID="-2.0" PAA="-2.0" PAAS="-2.0" PERI="-2.0" PFF="-2.0" PGX="-2.0" POTX="-2.0" PPG="-2.0" PTE="-2.0" RAD="-2.0" RKT="-2.0" RP="-2.0" RPAY="-2.0" RRD="-2.0" RSX="-2.0" RUT="-2.0" SAVA="-2.0" SID="-2.0" SIFY="-2.0" SINO="-2.0" SIOX="-2.0" SITC="-2.0" SIVR="-2.0" SKLZ="-2.0" SKT="-2.0" SLQT="-2.0" SNAP="-2.0" SOS="-2.0" SQ="-2.0" SWK="-2.0" TAP="-2.0" TGTX="-2.0" TSIA="-2.0" TSLA="-2.0" TZA="-2.0" U="-2.0" UAL="-2.0" UAMY="-2.0" UEC="-2.0" UIS="-2.0" USWS="-2.0" UUUU="-2.0" VALE="-2.0" VIX="-2.0" VJET="-2.0" VTRS="-2.0" WETF="-2.0" WKHS="-2.0" X="-2.0" XERS="-2.0" XL="-2.0" XLP="-2.0" XLU="-2.0" XTLB="-2.0" YGMZ="-2.0" ZM="-2.0"/>
                  </TRG_1>
                </_2>
                <_3>
                  <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="3.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL AA="3.0" AAL="3.0" AAPL="3.0" ADBE="3.0" AEG="3.0" AFI="3.0" AMC="3.0" AMCR="3.0" AMD="3.0" AMRS="3.0" AMZN="3.0" ANTE="3.0" AP="3.0" ARLO="3.0" AXL="3.0" BA="3.0" BBBY="3.0" BBD="3.0" BMY="3.0" BSGM="3.0" BURL="3.0" BXRX="3.0" CAKE="3.0" CCI="3.0" CCIV="3.0" CCJ="3.0" CHNG="3.0" CHX="3.0" CIDM="3.0" CLBS="3.0" CLDR="3.0" CLSN="3.0" CNNE="3.0" COHN="3.0" CRBP="3.0" CSCO="3.0" CVX="3.0" DHT="3.0" DIS="3.0" DISCK="3.0" DNN="3.0" DPW="3.0" DS="3.0" EMAN="3.0" ETSY="3.0" EVRG="3.0" EW="3.0" EWA="3.0" EYE="3.0" EYES="3.0" FAST="3.0" FCAC="3.0" FPRX="3.0" FSLR="3.0" FSR="3.0" FUSE="3.0" GEL="3.0" GME="3.0" GOCO="3.0" GOED="3.0" HBI="3.0" HPQ="3.0" HPR="3.0" HTBX="3.0" HTZ="3.0" HUGE="3.0" HYLN="3.0" HZON="3.0" IDEX="3.0" IDXX="3.0" IGSB="3.0" INFI="3.0" INO="3.0" INTC="3.0" INTU="3.0" IZEA="3.0" JE="3.0" KEYS="3.0" KMPH="3.0" LCI="3.0" LCTX="3.0" LKQ="3.0" LUV="3.0" MBT="3.0" MDII="3.0" MESA="3.0" MFGP="3.0" MMDA1="3.0" MRIN="3.0" MX="3.0" NCLH="3.0" NGD="3.0" NGL="3.0" NIO="3.0" NLOK="3.0" NLSN="3.0" NLST="3.0" NNVC="3.0" NOK="3.0" NOV="3.0" NTP="3.0" NVDA="3.0" OCGN="3.0" OGI="3.0" OPEN="3.0" OPGN="3.0" ORCL="3.0" OTIS="3.0" OVID="3.0" PAA="3.0" PAAS="3.0" PERI="3.0" PFF="3.0" PGX="3.0" POTX="3.0" PPG="3.0" PTE="3.0" RAD="3.0" RKT="3.0" RP="3.0" RPAY="3.0" RRD="3.0" RSX="3.0" RUT="3.0" SAVA="3.0" SID="3.0" SIFY="3.0" SINO="3.0" SIOX="3.0" SITC="3.0" SIVR="3.0" SKLZ="3.0" SKT="3.0" SLQT="3.0" SNAP="3.0" SOS="3.0" SQ="3.0" SWK="3.0" TAP="3.0" TGTX="3.0" TSIA="3.0" TSLA="3.0" TZA="3.0" U="3.0" UAL="3.0" UAMY="3.0" UEC="3.0" UIS="3.0" USWS="3.0" UUUU="3.0" VALE="3.0" VIX="3.0" VJET="3.0" VTRS="3.0" WETF="3.0" WKHS="3.0" X="3.0" XERS="3.0" XL="3.0" XLP="3.0" XLU="3.0" XTLB="3.0" YGMZ="3.0" ZM="3.0"/>
                  </TRG_0>
                  <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-3.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL AA="-3.0" AAL="-3.0" AAPL="-3.0" ADBE="-3.0" AEG="-3.0" AFI="-3.0" AMC="-3.0" AMCR="-3.0" AMD="-3.0" AMRS="-3.0" AMZN="-3.0" ANTE="-3.0" AP="-3.0" ARLO="-3.0" AXL="-3.0" BA="-3.0" BBBY="-3.0" BBD="-3.0" BMY="-3.0" BSGM="-3.0" BURL="-3.0" BXRX="-3.0" CAKE="-3.0" CCI="-3.0" CCIV="-3.0" CCJ="-3.0" CHNG="-3.0" CHX="-3.0" CIDM="-3.0" CLBS="-3.0" CLDR="-3.0" CLSN="-3.0" CNNE="-3.0" COHN="-3.0" CRBP="-3.0" CSCO="-3.0" CVX="-3.0" DHT="-3.0" DIS="-3.0" DISCK="-3.0" DNN="-3.0" DPW="-3.0" DS="-3.0" EMAN="-3.0" ETSY="-3.0" EVRG="-3.0" EW="-3.0" EWA="-3.0" EYE="-3.0" EYES="-3.0" FAST="-3.0" FCAC="-3.0" FPRX="-3.0" FSLR="-3.0" FSR="-3.0" FUSE="-3.0" GEL="-3.0" GME="-3.0" GOCO="-3.0" GOED="-3.0" HBI="-3.0" HPQ="-3.0" HPR="-3.0" HTBX="-3.0" HTZ="-3.0" HUGE="-3.0" HYLN="-3.0" HZON="-3.0" IDEX="-3.0" IDXX="-3.0" IGSB="-3.0" INFI="-3.0" INO="-3.0" INTC="-3.0" INTU="-3.0" IZEA="-3.0" JE="-3.0" KEYS="-3.0" KMPH="-3.0" LCI="-3.0" LCTX="-3.0" LKQ="-3.0" LUV="-3.0" MBT="-3.0" MDII="-3.0" MESA="-3.0" MFGP="-3.0" MMDA1="-3.0" MRIN="-3.0" MX="-3.0" NCLH="-3.0" NGD="-3.0" NGL="-3.0" NIO="-3.0" NLOK="-3.0" NLSN="-3.0" NLST="-3.0" NNVC="-3.0" NOK="-3.0" NOV="-3.0" NTP="-3.0" NVDA="-3.0" OCGN="-3.0" OGI="-3.0" OPEN="-3.0" OPGN="-3.0" ORCL="-3.0" OTIS="-3.0" OVID="-3.0" PAA="-3.0" PAAS="-3.0" PERI="-3.0" PFF="-3.0" PGX="-3.0" POTX="-3.0" PPG="-3.0" PTE="-3.0" RAD="-3.0" RKT="-3.0" RP="-3.0" RPAY="-3.0" RRD="-3.0" RSX="-3.0" RUT="-3.0" SAVA="-3.0" SID="-3.0" SIFY="-3.0" SINO="-3.0" SIOX="-3.0" SITC="-3.0" SIVR="-3.0" SKLZ="-3.0" SKT="-3.0" SLQT="-3.0" SNAP="-3.0" SOS="-3.0" SQ="-3.0" SWK="-3.0" TAP="-3.0" TGTX="-3.0" TSIA="-3.0" TSLA="-3.0" TZA="-3.0" U="-3.0" UAL="-3.0" UAMY="-3.0" UEC="-3.0" UIS="-3.0" USWS="-3.0" UUUU="-3.0" VALE="-3.0" VIX="-3.0" VJET="-3.0" VTRS="-3.0" WETF="-3.0" WKHS="-3.0" X="-3.0" XERS="-3.0" XL="-3.0" XLP="-3.0" XLU="-3.0" XTLB="-3.0" YGMZ="-3.0" ZM="-3.0"/>
                  </TRG_1>
                </_3>
              </TRADE_BUTTONS_CONFIG>
            </ACTIVETRADER>
            <BIG_BUTTONS VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <CHART COLUMN_COUNT="1" CONFIGURATION="@v9@%0:com.devexperts.toschart.model,1:com.devexperts.tos.chartdata,2:com.devexperts.tos.thinkscript.data,3:java.awt,4:com.devexperts.toschart.control.subgraph,5:com.devexperts.toschart.elstudies,6:com.devexperts.toschart.script,7:com.devexperts.tos.thinkscript%owner{chartAggregationPeriods:ChartAggregationPeriodArray0{9::ChartAggregationPeriod0},chartAggregationPeriods=@ChartAggregationPeriodArray0,colors{5::CustomColor0,6::CustomColor1,9::CustomColor2,8::CustomColor3,4::CustomColor4}}#com.devexperts.toschart.core.ChartModel{disabledMessageTypes.+(!%0.BuiltinExplanationMessage$MessageType.findByCode(1)),encodedMixinsState=&quot;{\&quot;common\&quot;:{\&quot;DRAWING_SETS\&quot;:\&quot;{}\&quot;},\&quot;state_props\&quot;:{\&quot;state_type\&quot;:\&quot;REGULAR\&quot;},\&quot;monkey_bars_exp\&quot;:{\&quot;LikefolioMixin\&quot;:\&quot;{\\\&quot;paintingSettings\\\&quot;:{\\\&quot;neutralSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;positiveSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;negativeSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;sentimentSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true}},\\\&quot;shownDivisions\\\&quot;:[],\\\&quot;allDivisions\\\&quot;:[]}\&quot;},\&quot;monkey_bars\&quot;:{},\&quot;seasonality\&quot;:{},\&quot;regular\&quot;:{\&quot;DescriberMixin\&quot;:\&quot;{\\\&quot;visibility\\\&quot;:\\\&quot;HIDE_PANEL\\\&quot;,\\\&quot;studiesMode\\\&quot;:\\\&quot;HIDE_STUDIES\\\&quot;}\&quot;,\&quot;LikefolioMixin\&quot;:\&quot;{\\\&quot;paintingSettings\\\&quot;:{\\\&quot;neutralSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;positiveSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;negativeSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;sentimentSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true}},\\\&quot;shownDivisions\\\&quot;:[],\\\&quot;allDivisions\\\&quot;:[]}\&quot;}}&quot;,encodedPatternsModel=&quot;{\&quot;showPatterns\&quot;:true,\&quot;models\&quot;:[],\&quot;fibModels\&quot;:[]}&quot;,groupId=&quot;default&quot;,styleSettings{activeTool=13,chartAggregationSettings{priceAggregationSettings.timePeriod:ChartRange0,tickAggregationSettings=!%0.TimeFrameAggregationSettings.createTickOrTimeAggregation(@ChartRange0,!%1.ChartAggregationPeriod.create(&quot;50t&quot;)),timeAggregationSettings=!%0.TimeFrameAggregationSettings.createTickOrTimeAggregation(@ChartRange0,@ChartAggregationPeriod0)},commonStyleSettings{colorSettings{backgroundColor=!%2.CustomColor.findByIndex(&quot;101&quot;),candleTypeColors.fillUp=&lt;T,gridTypeColor=#%2.CustomColor(#%3.Color(51,51,255,255)),monkeyProfileTypeColors.defaultRowHeight=&lt;F,mpExpandedTypeColors.defaultRowHeight=&lt;F,volumeColor=#%2.CustomColor(#%3.Color(153,153,153,255))},expansion{right=145,up=10},fitStudiesToScreen=&lt;F,leftAxisEnabled=&lt;F,manualAxisRegulator{maxValue=15.7690099d,minValue=11.99871287d},orderShowMode=!%0.OrderShowType.valueOf(*%0.OrderShowType.class,&quot;DO_NOT_SHOW&quot;),percentageBubbles=&lt;F,previousRightExpansion=145,shortCuts{^(&quot;Time Zone&quot;,&lt;F),^(&quot;Show Expiration Friday &quot;,&lt;F),^(&quot;Chart mode&quot;,&lt;F),^(&quot;Keep Price Zoom&quot;,&lt;F),^(&quot;enableLeftAxis&quot;,&lt;T),^(&quot;Fit expected price ranges&quot;,&lt;F),^(&quot;emphasizeDigitMPExpanded&quot;,&lt;F),^(&quot;showWicksCandleTrend&quot;,&lt;F),^(&quot;highlightEarnings&quot;,&lt;F),^(&quot;synchronizeCrosshair&quot;,&lt;F),^(&quot;myToolsMode&quot;,&lt;T),^(&quot;seasonalityStyle&quot;,&lt;F),^(&quot;Show Price Subgraph&quot;,&lt;F),^(&quot;closePriceLevel&quot;,&lt;F),^(&quot;Color Volume As Symbol Ticks&quot;,&lt;T),^(&quot;highlightPhantomRBars&quot;,&lt;F),^(&quot;Cross type &quot;,&lt;F),^(&quot;Fit Studies to Screen&quot;,&lt;T),^(&quot;Chart type &quot;,&lt;F),^(&quot;Fit Orders&quot;,&lt;F),^(&quot;Bubbles as Percentage&quot;,&lt;F),^(&quot;hideStatusString&quot;,&lt;F),^(&quot;Show Studies &quot;,&lt;F),^(&quot;showWicksHeikinAshi&quot;,&lt;F),^(&quot;Alerts&quot;,&lt;F),^(&quot;Chart scale&quot;,&lt;F),^(&quot;Fit High/Low&quot;,&lt;F),^(&quot;Orders&quot;,&lt;F),^(&quot;Use Log Scale &quot;,&lt;T),^(&quot;Fit Study Markers to Screen&quot;,&lt;F),^(&quot;Fit Alerts&quot;,&lt;F),^(&quot;Fit patterns&quot;,&lt;F),^(&quot;Percentage View&quot;,&lt;T),^(&quot;Make Auto Zoom &quot;,&lt;F),^(&quot;Show Year Marking Line&quot;,&lt;F),^(&quot;Show Rollover Line&quot;,&lt;T),^(&quot;Show High/Low Bubbles &quot;,&lt;T),^(&quot;Snap mode&quot;,&lt;F),^(&quot;highlightStudies&quot;,&lt;F),^(&quot;Overlapped Volume&quot;,&lt;T),^(&quot;Show Symbol Logo&quot;,&lt;F),^(&quot;Show Last Price Bubble &quot;,&lt;F),^(&quot;emphasizeDigitMP&quot;,&lt;F),^(&quot;Snap crosshairs to&quot;,&lt;F),^(&quot;Show grid&quot;,&lt;T),^(&quot;databoxMode&quot;,&lt;F),^(&quot;Synchronize Drawings&quot;,&lt;F),^(&quot;showWicksCandle&quot;,&lt;F),^(&quot;Show trades&quot;,&lt;F),^(&quot;highlightSeasons&quot;,&lt;F),^(&quot;Snap drawings to&quot;,&lt;F),^(&quot;Extend Order/Alert Line to Left&quot;,&lt;F)},showBubbles=&lt;F,showDayRollover=&lt;F,showGrid=&lt;F,showYearMarkingLine=&lt;F,step=1.8315018315018314d,volumeColorByTicks=&lt;T},forexStyleSettings.shortCuts.^(&quot;Show Volume Subgraph&quot;,&lt;F),futuresStyleSettings{adjustForContractChanges=&lt;T,highlightExtendedHours=&lt;T,shortCuts{^(&quot;adjustForContractChanges&quot;,&lt;F),^(&quot;Show Open Interest&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,&lt;T),^(&quot;showContractChangeEvents&quot;,&lt;F),^(&quot;futures_daily_close_price&quot;,&lt;F),^(&quot;Show Options&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,&lt;T),^(&quot;startAtMarketOpen&quot;,&lt;F)}},optionsStyleSettings.shortCuts{^(&quot;Show Open Interest&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,&lt;T),^(&quot;Show Theo Price&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,&lt;T),^(&quot;startAtMarketOpen&quot;,&lt;F)},otherStyleSettings{shortCuts{^(&quot;Show Social Sentiment&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,&lt;T),^(&quot;Price type&quot;,&lt;F),^(&quot;Show Options&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,&lt;T),^(&quot;Show Corporate Actions&quot;,&lt;F),^(&quot;Show CNBC Video&quot;,&lt;F),^(&quot;startAtMarketOpen&quot;,&lt;T),^(&quot;adjustForDividends&quot;,&lt;F)},showVolume=&lt;F,startAggregationAtMarketOpen=&lt;F},setsIdentifiers.styleSetName=&quot;slm_po4&quot;},subgraphModels{!get(#%4.SubgraphId(&quot;Symbol&quot;)){height=356,storableIndicators{+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# OvernightHiLowLines_mobius_jq\n# GlobeX or Overnight High / Low without Fibonacci Values \n# Based on code by Mobius # V01.2012 \n# cosmetic alterations by Johnny Quotron\n#    1. removal of fib lines\n#    2. paint ONL bubble below the line\n#    3. addition of other comments\n#    4. addition of bubbles in the expansion area if desired\n#\n# Restrictions:  Hi / Low lines are not drawn for non-traded indicies such as VIX or TNX..JQ\n\ndeclare hide_on_daily;\ninput PlotOverNightExtremes = yes;\ninput DisplayPriceBubbleOnHiLowBar = yes;\ninput DisplayPriceBubbleOnRightEdge = yes;  #Haven\'t figured this out yet..JQ\n\ndef o = open;\ndef h = high;\ndef l = low;\ndef c = close;\ndef v = volume;\ndef bar = BarNumber();\ndef GlobeX = GetTime() &lt; RegularTradingStart(GetYYYYMMDD());\n\ndef vol = if GlobeX and !GlobeX[1]\nthen v\nelse if GlobeX\nthen vol[1] + v\nelse Double.NaN;\n\ndef GlobeX_Volume = vol;\n\ndef ONhigh = if GlobeX and !GlobeX[1]\nthen h\nelse if GlobeX and\nh &gt; ONhigh[1]\nthen h\nelse ONhigh[1];\n\ndef ONhighBar = if GlobeX and h == ONhigh\nthen bar\nelse Double.NaN;\n\ndef ONlow = if GlobeX and !GlobeX[1]\nthen l\nelse if GlobeX and\nl &lt; ONlow[1]\nthen l\nelse ONlow[1];\n\ndef ONlowBar = if GlobeX and l == ONlow\nthen bar\nelse Double.NaN;\n\ndef OverNightHigh = if BarNumber() == HighestAll(ONhighBar)\nthen ONhigh\nelse OverNightHigh[1];\n\ndef OverNightLow = if BarNumber() == HighestAll(ONlowBar)\nthen ONlow\nelse OverNightLow[1];\n\n\n#\nplot ONH = if OverNightHigh &gt; 0\nthen OverNightHigh\nelse Double.NaN;\n\nONH.SetHiding(!PlotOverNightExtremes);\nONH.SetPaintingStrategy(PaintingStrategy.SQUARES);\nONH.SetDefaultColor(Color.BLUE);\nONH.HideBubble();\nONH.HideTitle();\n\n#\nplot ONL = if OverNightLow &gt; 0 \nthen OverNightLow\nelse Double.NaN;\n\nONL.SetHiding(!PlotOverNightExtremes);\nONL.SetPaintingStrategy(PaintingStrategy.SQUARES);\nONL.SetDefaultColor(Color.LIGHT_GRAY);\nONL.HideBubble();\nONL.HideTitle();\n\n\n# Bubble code\n#AddChartBubble(bar == ONhighBar and PlotOverNightExtremes and DisplayPriceBubbleOnHiLowBar, ONH, \&quot;ONH: \&quot; + ONH, createColor(204,204,255));\n#AddChartBubble(bar == ONlowBar and PlotOverNightExtremes and DisplayPriceBubbleOnHiLowBar, ONL, \&quot;ONL: \&quot; + ONL, createColor(204,204,255),no);  #designated that the bubble be painted below the ONL line.  2018-04-07 JQ \n\n\nAddChartBubble(barNumber() == highestAll(barnumber()) and  PlotOverNightExtremes and DisplayPriceBubbleOnRightEdge, ONH, \&quot;ONH: \&quot; + ONH, createColor(204,204,255));\nAddChartBubble(barNumber() == highestAll(barnumber()) and PlotOverNightExtremes and DisplayPriceBubbleOnRightEdge, ONL, \&quot;ONL: \&quot; + ONL, createColor(204,204,255),no); \ninput showLable =yes;\nAddLabel(showLable, \&quot;ONL= \&quot; + astext(ONL), if ONL&lt; close then Color.LIGHT_GREEN else if ONL&gt; close then color.LIGHT_red else Color.GRAY);\nAddLabel(showLable, \&quot;ONH= \&quot; + astext(ONH), if ONH&lt; close then Color.LIGHT_GREEN else if ONH&gt; close then color.LIGHT_red else Color.GRAY);\n# End Code GlobeX or Overnight High / Low without Fibonacci Values &quot;,name=&quot;_2b139ce2_bb93_4663_acef_0fb6255d8008&quot;}){plots{0:{lineStyle=3,paintingStrategy=0},1:{color=#%2.CustomColor(#%3.Color(0,0,255,255)),lineStyle=3,paintingStrategy=0}}}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;#ShadowTrader_VA_Pivots\n#ShadowTrader (Copyright ShadowTrader), a division of ShadowTrader Technologies, LLC. 2017. All rights reserved. This ShadowTrader Script is for educational purposes only.  ShadowTrader is not responsible for the use,  functionality or the performance of this Script. This work is copyrighted by ShadowTrader and all rights of this work under the license are reserved. Use of the ShadowTrader licensed code is for private use only and any other use are prohibited. By exercising any of the rights herein, you are accepting the terms of this license. You have a non-exclusive right to use or alter the ShadowTrader code. Use of this ShadowTrader Script other than as provided for in this license is prohibited. Any redistribution is strictly prohibited and will be enforced.\n\n# A big ShadowTrader thank you to Justin Lane Williams for initially creating this script for us.\n#08/31/11: Total redesign, added automated Pivot values, proximity plotting, new features.\n#09/12/11: Added “ShowLevel4” option due to recent volitility. Will plot S4 &amp; R4.\n#12/11/11: Added “AfterHours” option to turn off plot after hours.\n#12/21/11: Bug fixes due to TOS upgrades. Removed “AfterHours”, not workin correctly.\n#01/25/12: Enter daily inputs as 4 digits and script will interpret.\n# -added rounding to make the pivots appear as they do on the show.\n#01/26/12: Removed ability to truncate inputs due to it only being accurate 99% of time.\n#02/02/12: Small update to make sure \&quot;Auto Pivots\&quot; menu option functioned properly.\n#06/07/12: Added (6)VPOC inputs, should be manually entered/deleted, displays when applicable.\n#06/25/12: Removed some code and fixed a few bugs.\n#07/09/12: Fixed one small but important bug.\n#07/13/12: Added value bubbles, removed proximity plot function.\n#08/13/12: Removed a lot of superfluous code plus a few upgrades.\n#08/15/12: Fixed a bug that was giving false numbers.\n#08/30/12: Fixed a bug that wasn\'t plotting the NQ profile.\n#09/02/12: Reordered inputs and removed \&quot;LabelESonly\&quot; input.\n#12/28/12: Made the plot hide on daily charts and updated code to current standards.\n#01/04/13: Fixed a rare bug that hides labels if using tick charts.\n#01/28/13: Added ability to hide each individual level.\n\n# Pivot values will be off the day following market holidays and possibly the day after rollover.\n# On these days make \&quot;AutoPivots=No\&quot; and manually draw pivots. Change back to \&quot;AutoPivots=Yes\&quot; the day after.\n\n#Inputs\n#def VAH ;#  = 2170.75;#Hint VAH: Must be manually entered daily, tinyurl.com/3lbmu4o\n#def POC ;#  = 2166.75;#Hint POC: Must be manually entered daily, tinyurl.com/3lbmu4o\n#def VAL ;#;  = 2161.75;#Hint VAL: Must be manually entered daily, tinyurl.com/3lbmu4o\ndef Pivot = hlc3(period = AggregationPeriod.DAY)[1];# = 2164.75;#Hint Pivot: Must be manually entered daily, tinyurl.com/3lbmu4o\ninput AutoPivots = yes;#Hint AutoPivots: Turns off pivot lines, value area stays on.\ninput showVAH =no;\ninput Labels = {default \&quot;Proximity\&quot;, \&quot;Off\&quot;, \&quot;All\&quot;, \&quot;ValueAreaOnly\&quot;};#Hint Labels: Labels at top of chart.\ninput ShowPivotPoint = no;#Hint ShowPivotPoint: Hides Pivot Point plot.\ninput ShowLevel4 = no;#Hint ShowLevel4: Will display S4 and R4 for days with large moves.\ninput ShowLevel5 = no;#Hint ShowLevel4: Will display S4 and R4 for days with large moves.\ninput ShowLevel6 = no;#Hint ShowLevel4: Will display S4 and R4 for days with large moves.\ninput ShowLevel7 = no;#Hint ShowLevel4: Will display S4 and R4 for days with large moves.\ninput ShowLevel8 = no;#Hint ShowLevel4: Will display S4 and R4 for days with large moves.\ninput PivotBubbles  = no;#yes;#Hint PivotBubbles: Shows bubbles on pivot plot lines.\ninput ValueBubbles  = no;#yes;#Hint ValueBubbles: Shows bubbles on value plot lines.\ninput PlotStartTime = 0930;#Hint PlotStartTime: Move to earlier time to shift bubbles to the left.\ninput ShowCloud  = yes;#Hint ShowCloud: Shows the value area as a cloud.\ninput CloudOpenOnly = yes;#Hint CloudOpenOnly: Will only cloud open candles.\ninput HideAfterHoursLabel = no;#Hint HideAfterHoursLabel: Hides \&quot;NoShadowPlotAfterHours\&quot; label.\ninput VpocBubbles  = no;#yes;#Hint VpocBubbles: Shows bubbles on VPOC plot lines.\n\ninput ShowS1 = yes;#yes;#Hint ShowS1: Hide/Show S1.\ninput ShowS2 = yes;#Hint ShowS2: Hide/Show S2.\ninput ShowS3 = yes;#yes;#Hint ShowS3: Hide/Show S3.\ninput ShowR1 = yes;#yes;#Hint ShowR1: Hide/Show R1.\ninput ShowR2 = yes;#Hint ShowR2: Hide/Show R2.\ninput ShowR3 = yes;#yes;#Hint ShowR3: Hide/Show R3.\ninput ShowORB = no;#Hint ShowORB: Displays 2 small, dashed lines at the top/bottom of opening range.\ninput OrbTime = 30;#Hint OrbTime: Defines the time range in minutes for the ORB.\n\ndef Na = Double.NaN;\n#declare hide_on_daily;\n\ninput marketThreshold = 0.0025;\ninput timeFrame = {default DAY, \&quot;2 DAYS\&quot;, \&quot;3 DAYS\&quot;, \&quot;4 DAYS\&quot;, WEEK, MONTH, \&quot;OPT EXP\&quot;, QUARTER, YEAR};\ninput showOnlyToday = yes;\ninput applyPersonsLevelsFilter = yes;\n\nassert(marketThreshold &gt;= 0, \&quot;\'market threshold\' must not be negative: \&quot; + marketThreshold);\n\ndef marketType = {default DISABLED, NEUTRAL, BEARISH, BULLISH};\n\ndef PP2 = high(period = timeFrame)[2] + low(period = timeFrame)[2] + close(period = timeFrame)[2];\n\nmarketType = if !applyPersonsLevelsFilter then marketType.DISABLED else\nif PP2[-1] &gt; (PP2[-1] + PP2 + PP2[1]) / 3 + marketThreshold then marketType.BULLISH else\nif PP2[-1] &lt; (PP2[-1] + PP2 + PP2[1]) / 3 - marketThreshold then marketType.BEARISH else marketType.NEUTRAL;\n\n#Previous Day Functions\ndef Day   = GetDayOfWeek(GetYYYYMMDD());\ndef CloseTime = SecondsTillTime(1545) &gt;= 0;\ndef OpenTime = SecondsFromTime(0930) &gt;= 0;\ndef RegHrs = CloseTime and OpenTime;\ndef PLow  =  CompoundValue(1, If(Day == Day[1] and RegHrs and low &lt; PLow[1], low, If(SecondsFromTime(0930) &lt;= 0 and RegHrs, low, PLow[1])), low);\ndef PHigh = CompoundValue(1, If(Day == Day[1] and RegHrs and high &gt; PHigh[1], high, If(SecondsFromTime(0930) &lt;= 0 and RegHrs, high, PHigh[1])), high);\ndef PrevLow  = If(Day != Day[1], PLow[1], PrevLow[1]);\ndef PrevHigh = If(Day != Day[1], PHigh[1], PrevHigh[1]);\n##################\n#Prior Day Profile - counting formula by functionform\nrec count1 = CompoundValue(1, if !(GetDay() != GetDay()[1]) then count1[1] + 1 else 1, 1);\ndef priorperiod = if IsNaN(count1[1]) then 1 else Max(count1, count1[1]);\nprofile vol1 = VolumeProfile(\&quot;startNewProfile\&quot; = GetDay() != GetDay()[1], \&quot;onExpansion\&quot; = no);\nprofile vol = VolumeProfile(\&quot;startNewProfile\&quot; = GetDay() != GetDay(), \&quot;onExpansion\&quot; = no);\ndef vahprior = vol1.GetHighestValueArea();\ndef pocprior = vol1.GetPointOfControl();\ndef valprior = vol1.GetLowestValueArea();\n\ndef vahprev = GetValue(vahprior, priorperiod);\ndef pocprev = GetValue(pocprior, priorperiod);\ndef valprev = GetValue(valprior, priorperiod);\n\n#if showProfile then\ndef  showProfile = no;\ndef showPointOfControl = no;\ndef opacity = 50;\n#vol.Show(if showProfile then GlobalColor(\&quot;Profile\&quot;) else Color.CURRENT, if showPointOfControl then GlobalColor(\&quot;Point Of Control\&quot;) else Color.CURRENT, if showValueArea then GlobalColor(\&quot;Value Area\&quot;) else Color.CURRENT, opacity);\n#profile vol = VolumeProfile(\&quot;startNewProfile\&quot; = cond, \&quot;onExpansion\&quot; = no);\n#vol.Show(if showProfile then GlobalColor(\&quot;Profile\&quot;) else Color.CURRENT, if showPointOfControl then GlobalColor(\&quot;Point Of Control\&quot;) else Color.CURRENT, if showValueArea then GlobalColor(\&quot;Value Area\&quot;) else Color.CURRENT, opacity);\ndef VAH = vahprev;\ndef VAL = valprev;\ndef POC = pocprev;\ndef POC_Devp =vol.GetPointOfControl();\n\n\n############\n#Value Area Functions\ndef PPoint = If(Pivot &gt; 0, Pivot, Na);\ndef VArea  = Between(close, VAL, VAH);\ndef VAreaabove  = close &gt; VAH;\ndef VAreabelow  = close &lt; VAL;\n\n\n#Time Functions\ndef CloseTime2 = SecondsTillTime(1600) &gt;= 0;\ndef OpenTime2 = SecondsFromTime(PlotStartTime) &gt;= 0;\ndef MarketOpen = OpenTime2 and CloseTime2;\ndef NewDay = IsNaN(close(period = “Day”)[-1]);\ndef Chart  = if showOnlyToday then MarketOpen and NewDay else 1 ;\n\n#Pivot Functions\ndef Res1  = (2 * PPoint) - PrevLow;\ndef Supp1 = (2 * PPoint) - PrevHigh;\ndef Res2  = PPoint + (Res1 - Supp1); # def Res2  = PPoint + (Res1 - Supp1);\ndef Supp2 = PPoint - (Res1 - Supp1);\ndef Res3  =PPoint + 2*(PrevHigh - PrevLow);# def Res3  = PrevHigh + 2 * (PPoint - PrevLow);\ndef Supp3 = PPoint - 2*(PrevHigh - PrevLow);\ndef Res4  =PPoint + 3*(PrevHigh - PrevLow);#\ndef Supp4 = PPoint - 3*(PrevHigh - PrevLow);\ndef Res5  =PPoint + 4*(PrevHigh - PrevLow);#\ndef Supp5 = PPoint - 4*(PrevHigh - PrevLow);\ndef Res6  =PPoint + 5*(PrevHigh - PrevLow);#\ndef Supp6 = PPoint - 5*(PrevHigh - PrevLow);\ndef Res7  =PPoint + 6*(PrevHigh - PrevLow);#\ndef Supp7 = PPoint - 6*(PrevHigh - PrevLow);\n\ndef Res8  =PPoint + 7*(PrevHigh - PrevLow);#\ndef Supp8 = PPoint - 7*(PrevHigh - PrevLow);\n\n\n\n\n#def Res4  = PrevHigh + 3 * (PPoint - PrevLow);\n#def Supp4 = PrevLow - 3 * (PrevHigh - PPoint);\n#def Res5  = PrevHigh + 4 * (PPoint - PrevLow);\n#def Supp5 = PrevLow - 4 * (PrevHigh - PPoint);\n#def Res6  = PrevHigh + 5 * (PPoint - PrevLow);\n#def Supp6 = PrevLow - 5 * (PrevHigh - PPoint);\n#def Res7  = PrevHigh + 6 * (PPoint - PrevLow);\n#def Supp7 = PrevLow - 6 * (PrevHigh - PPoint);\n#def Res8  = PrevHigh + 7 * (PPoint - PrevLow);\n#def Supp8 = PrevLow - 7 * (PrevHigh - PPoint);\n\n#Rounding Functions\ndef RI   = RoundDown(Res1, 0) - ((Round(((RoundDown(Res1, 0) - Res1) / 0.25), 0)) * 0.25);\ndef SI   = RoundDown(Supp1, 0) - ((Round(((RoundDown(Supp1, 0) - Supp1) / 0.25), 0)) * 0.25);\ndef RII  = RoundDown(Res2, 0) - ((Round(((RoundDown(Res2, 0) - Res2) / 0.25), 0)) * 0.25);\ndef SII  = RoundDown(Supp2, 0) - ((Round(((RoundDown(Supp2, 0) - Supp2) / 0.25), 0)) * 0.25);\ndef RIII = RoundDown(Res3, 0) - ((Round(((RoundDown(Res3, 0) - Res3) / 0.25), 0)) * 0.25);\ndef SIII = RoundDown(Supp3, 0) - ((Round(((RoundDown(Supp3, 0) - Supp3) / 0.25), 0)) * 0.25);\ndef RIV  = RoundDown(Res4, 0) - ((Round(((RoundDown(Res4, 0) - Res4) / 0.25), 0)) * 0.25);\ndef SIV  = RoundDown(Supp4, 0) - ((Round(((RoundDown(Supp4, 0) - Supp4) / 0.25), 0)) * 0.25);\ndef PivP = RoundDown(PPoint, 0) - ((Round(((RoundDown(PPoint, 0) - PPoint) / 0.25), 0)) * 0.25);\ndef RV  = RoundDown(Res5, 0) - ((Round(((RoundDown(Res5, 0) - Res5) / 0.25), 0)) * 0.25);\ndef SV  = RoundDown(Supp5, 0) - ((Round(((RoundDown(Supp5, 0) - Supp5) / 0.25), 0)) * 0.25);\ndef RVI  = RoundDown(Res6, 0) - ((Round(((RoundDown(Res6, 0) - Res6) / 0.25), 0)) * 0.25);\ndef SVI  = RoundDown(Supp6, 0) - ((Round(((RoundDown(Supp6, 0) - Supp6) / 0.25), 0)) * 0.25);\ndef RVII  = RoundDown(Res7, 0) - ((Round(((RoundDown(Res7, 0) - Res7) / 0.25), 0)) * 0.25);\ndef SVII  = RoundDown(Supp7, 0) - ((Round(((RoundDown(Supp7, 0) - Supp7) / 0.25), 0)) * 0.25);\ndef RVIII  = RoundDown(Res8, 0) - ((Round(((RoundDown(Res8, 0) - Res8) / 0.25), 0)) * 0.25);\ndef SVIII  = RoundDown(Supp8, 0) - ((Round(((RoundDown(Supp8, 0) - Supp8) / 0.25), 0)) * 0.25);\n\n\n\n\n#Plots\nplot VH  = If(Chart and VAH &gt; 0, VAH, Na);\nplot PC  = If(Chart and POC &gt; 0, POC, Na);\nplot VL  = If(Chart and VAL &gt; 0, VAL, Na);\n\n##\ndef R1_auto_show = (Between(RI, VL, VH) and close &gt; VL);\ndef S1_auto_show = (close &lt; VL or (Between(SI, VL, VH) and close &lt; VH));\n\ndef R2_auto_show = close &gt; VH;\ndef S2_auto_show = close &lt; VL;\n\ndef R3_auto_show = close &gt; (RI + ((RII - RI) / 2));\ndef S3_auto_show = close &lt; (SI - ((SI - SII) / 2));\n\ndef R4_auto_show = close &gt; (RII + ((RIII - RII) / 2));\ndef S4_auto_show =  close &lt; (SII - ((SII - SIII) / 2));\n\ndef R5_auto_show =  close &gt; (RIII + ((RIV - RIII) / 2));\ndef S5_auto_show =  close &lt; (SIII - ((SIII - SIV) / 2));\n\ndef R6_auto_show =  close &gt; (RIV + ((RV - RIV) / 2));\ndef S6_auto_show =  close &lt; (SIV - ((SVI - SV) / 2));\n\ndef R7_auto_show =  close &gt; (RV + ((RVI - RV) / 2));\ndef S7_auto_show =  close &lt; (SV- ((SV - SVI) / 2));\n\ndef R8_auto_show =  close &gt; (RVI + ((RVII - RVI) / 2));\ndef S8_auto_show =  close &lt; (SVI - ((SVI - SVII) / 2));\n#input showHigherLevel =yes;\n##\n\nplot R4  = If(Chart and AutoPivots and ShowLevel4 and  R4_auto_show  and RIV &gt; 0, RIV, Na);\nplot R3  = If(Chart and AutoPivots and ShowR3  and  R3_auto_show and RIII &gt; 0, RIII, Na);\nplot R2  = If(Chart and AutoPivots and ShowR2  and  R2_auto_show and RII &gt; 0, RII, Na);\nplot R1  = If(Chart and AutoPivots and ShowR1  and  R1_auto_show and RI &gt; 0, RI, Na);\nplot PP  = If(Chart and AutoPivots and ShowPivotPoint and PPoint &gt; 0, PivP, Na);\nplot S1  = If(Chart and AutoPivots and ShowS1 and  S1_auto_show  and SI &gt; 0, SI, Na);\nplot S2  = If(Chart and AutoPivots and ShowS2 and  S2_auto_show  and SII &gt; 0, SII, Na);\nplot S3  = If(Chart and AutoPivots and ShowS3 and  S3_auto_show and SIII &gt; 0, SIII, Na);\nplot S4  = If(Chart and AutoPivots and ShowLevel4 and  S4_auto_show and SIV &gt; 0, SIV, Na);\n\n\n#######\n\nplot R5  = If(Chart and AutoPivots and ShowLevel4 and  R5_auto_show  and RV &gt; 0, RV, Na);\nplot R6  = If(Chart and AutoPivots and ShowLevel4 and  R6_auto_show  and RVI &gt; 0, RVI, Na);\nplot R7  = If(Chart and AutoPivots and ShowLevel4 and  R7_auto_show  and RVII &gt; 0, RVII, Na);\nplot R8  = If(Chart and AutoPivots and ShowLevel4 and  R8_auto_show  and RVIII &gt; 0, RVIII, Na);\n\n####\n\n\ninput closeTimeC = 1615;\n#Value Area Cloud\n#def CloudClose = SecondsTillTime(1615) &gt; 0;\ndef CloudClose = SecondsTillTime(closeTimeC) &gt; 0;\ndef Cloud      = OpenTime and CloudClose;\ndef ChartCloud = Cloud and Chart;\ndef CloudTest  = If(CloudOpenOnly, ChartCloud, Chart);\nplot cloudhigh = If(CloudTest and ShowCloud, VAH, Na);\nplot cloudlow  = If(CloudTest and ShowCloud, VAL, Na);\nAddCloud(cloudhigh, cloudlow, Color.GRAY, Color.GRAY);\ndef AfterHours = OpenTime2 and CloudClose;\n\n#Chart Labels\ndef Futures = Between(close, close(\&quot;/es\&quot;) - 15, close(\&quot;/es\&quot;) + 15) or Between(close, close(\&quot;/nq\&quot;) - 15, close(\&quot;/nq\&quot;) + 15);\ndef Label = Chart;# and Futures;\ndef ZeroTest = VAH &gt; 0 and VAL &gt; 0;\ndef PNotZero = PPoint &gt; 0;\ndef ChartLabels;\nswitch (Labels) {\ncase \&quot;Proximity\&quot;:\n    ChartLabels = 1;\ncase \&quot;Off\&quot;:\n    ChartLabels = 0;\ncase \&quot;All\&quot;:\n    ChartLabels = 2;\ncase \&quot;ValueAreaOnly\&quot;:\n    ChartLabels = 3;\n}\n\n\nAddLabel(ChartLabels == 1 and Label and AutoPivots and VArea and ZeroTest, “InsideValue”, Color.WHITE);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and VAreaabove and ZeroTest, “AboveValue”, Color.GREEN);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and VAreabelow and ZeroTest, “BelowValue”, Color.RED);\nAddLabel(ChartLabels == 1 and Label and !AutoPivots and VArea and ZeroTest, “InsideValueArea”, Color.WHITE);\nAddLabel(ChartLabels == 1 and Label and !AutoPivots and VAreaabove and ZeroTest, “AboveValueArea”, Color.GREEN);\nAddLabel(ChartLabels == 1 and Label and !AutoPivots and VAreabelow and ZeroTest, “BelowValueArea”, Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and Between(close, VL, (RI + ((RII - RI) / 2))), \&quot;VH=\&quot; + AsText(VH), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and Between(close, VL, VH), \&quot;POC=\&quot; + AsText(PC), Color.YELLOW);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and Between(close, (SI - ((SI - SII) / 2)), VH), \&quot;VL=\&quot; + AsText(VL), Color.GREEN);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and (close &gt; VH or (Between(RI, VL, VH) and close &gt; VL)), \&quot;R1=\&quot; + AsText(RI), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots , \&quot;POC_D=\&quot; + AsText(POC_Devp), Color.YELLOW);\ndef pocDif= POC_Devp-PC;\n\n#AddLabel(yes, \&quot; \&quot;+astext(vwDif), if vwDif&gt; 0 then Color.LIGHT_GREEN else if vwDif&lt; 0 then color.LIGHT_red else Color.GRAY);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and pocDif&gt;0, \&quot; +\&quot;+astext(pocDif),  Color.LIGHT_GREEN );\nAddLabel(ChartLabels == 1 and Label and AutoPivots and pocDif&lt;=0, \&quot; \&quot;+astext(pocDif),  if pocDif&lt; 0 then color.LIGHT_red else Color.LIGHT_GRAY);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and close &gt; VH, \&quot;R2=\&quot; + AsText(RII), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and close &gt; (RI + ((RII - RI) / 2)), \&quot;R3=\&quot; + AsText(RIII), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and ShowLevel4 and close &gt; (RII + ((RIII - RII) / 2)), \&quot;R4=\&quot; + AsText(RIV), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and ShowLevel5 and close &gt; (RIII + ((RIV - RIII) / 2)), \&quot;R5=\&quot; + AsText(RV), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and ShowLevel6 and close &gt; (RII + ((RV- RIV) / 2)), \&quot;R6=\&quot; + AsText(RVI), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and ShowLevel7 and close &gt; (RII + ((RVI - RV) / 2)), \&quot;R7=\&quot; + AsText(RVII), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and ShowLevel8 and close &gt; (RII + ((RVII - RVI) / 2)), \&quot;R8=\&quot; + AsText(RVIII), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and ShowPivotPoint and close &gt; SI and close &lt; RI, \&quot;PP=\&quot; + AsText(PP), Color.WHITE);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and (close &lt; VL or (Between(SI, VL, VH) and close &lt; VH)), \&quot;S1=\&quot; + AsText(SI), Color.GREEN);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and close &lt; VL, \&quot;S2=\&quot; + AsText(SII), Color.GREEN);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and close &lt; (SI - ((SI - SII) / 2)), \&quot;S3=\&quot; + AsText(SIII), Color.GREEN);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and ShowLevel4 and close &lt; (SII - ((SII - SIII) / 2)), \&quot;S4=\&quot; + AsText(SIV), Color.GREEN);\n\nAddLabel(ChartLabels == 2 and Label and ZeroTest, \&quot;VH=\&quot; + AsText(VH), Color.RED);\nAddLabel(ChartLabels == 2 and Label and ZeroTest, \&quot;POC=\&quot; + AsText(PC), Color.YELLOW);\nAddLabel(ChartLabels == 2 and Label and ZeroTest, \&quot;VL=\&quot; + AsText(VL), Color.GREEN);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero, \&quot;R1=\&quot; + AsText(RI), Color.RED);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero, \&quot;R2=\&quot; + AsText(RII), Color.RED);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero, \&quot;R3=\&quot; + AsText(RIII), Color.RED);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero and ShowLevel4, \&quot;R4=\&quot; + AsText(RIV), Color.RED);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero and ShowPivotPoint, \&quot;PP=\&quot; + AsText(PP), Color.WHITE);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero, \&quot;S1=\&quot; + AsText(SI), Color.GREEN);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero, \&quot;S2=\&quot; + AsText(SII), Color.GREEN);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero, \&quot;S3=\&quot; + AsText(SIII), Color.GREEN);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero and ShowLevel4, \&quot;S4=\&quot; + AsText(SIV), Color.GREEN);\n\nAddLabel(ChartLabels == 3 and Label and VArea and ZeroTest, “InsideValueArea”, Color.WHITE);\nAddLabel(ChartLabels == 3 and Label and VAreaabove and ZeroTest, “AboveValueArea”, Color.GREEN);\nAddLabel(ChartLabels == 3 and Label and VAreabelow and ZeroTest, \&quot;BelowValueArea”, Color.RED);\nAddLabel(!AfterHours and !Chart and !HideAfterHoursLabel, \&quot;NoShadowPlotAfterHours\&quot;, Color.ORANGE);\n\n#Chart Bubbles\ninput BubbleLeftSide =yes;\ndef  leftLoc =  if BubbleLeftSide then 1 else -1;#\nAddChartBubble(IsNaN(VH[leftLoc]) and ValueBubbles, VH, VH, Color.RED, no);\nAddChartBubble(IsNaN(PC[leftLoc]) and ValueBubbles, PC, PC, Color.YELLOW, no);\nAddChartBubble(IsNaN(VL[leftLoc]) and ValueBubbles, VL, VL, Color.GREEN, no);\nAddChartBubble(IsNaN(S1[leftLoc]) and PivotBubbles, S1, “S1”, Color.WHITE, no);\nAddChartBubble(IsNaN(S2[leftLoc]) and PivotBubbles, S2, “S2”, Color.WHITE, no);\nAddChartBubble(IsNaN(S3[leftLoc]) and PivotBubbles, S3, “S3”, Color.WHITE, no);\nAddChartBubble(IsNaN(S4[leftLoc]) and PivotBubbles and ShowLevel4 and S4_auto_show, S4, “S4”, Color.WHITE, no);\nAddChartBubble(IsNaN(PP[leftLoc]) and ShowPivotPoint and PivotBubbles, PP, “PP”, Color.WHITE, no);\nAddChartBubble(IsNaN(R1[leftLoc]) and PivotBubbles, R1, “R1”, Color.WHITE, no);\nAddChartBubble(IsNaN(R2[leftLoc]) and PivotBubbles, R2, “R2”, Color.WHITE, no);\nAddChartBubble(IsNaN(R3[leftLoc]) and PivotBubbles, R3, “R3”, Color.WHITE, no);\nAddChartBubble(IsNaN(R4[leftLoc]) and PivotBubbles and ShowLevel4, R4, “R4”, Color.WHITE, no);\n\n\n#Opening Range Breakout Functions\ndef ORBopen = SecondsTillTime(945) &lt;= 0;\ndef IsMarketOpen = ORBopen and CloseTime2;\ndef FirstBar = If(GetDay()[1] != GetDay(), GetDay() - 1, 0);\ndef OpenRange = SecondsFromTime(945);\ndef PastOpeningRange = OpenRange &gt;= (OrbTime - 15) * 60;\ndef DisplayedHigh = If(high &gt; DisplayedHigh[1] and IsMarketOpen and ShowORB, high, If(IsMarketOpen and !FirstBar, DisplayedHigh[1], high));\ndef DisplayedLow = If(low &lt; DisplayedLow[1] and IsMarketOpen and ShowORB, low, If(IsMarketOpen and !FirstBar, DisplayedLow[1], low));\ndef ORBHi = If(PastOpeningRange, ORBHi[1], DisplayedHigh);\ndef ORBLo  = If(PastOpeningRange, ORBLo[1], DisplayedLow);\nplot ORBHigh = If(Chart and PastOpeningRange and IsMarketOpen and ShowORB, ORBHi, Na);\nplot ORBLow  = If(Chart and PastOpeningRange and IsMarketOpen and ShowORB, ORBLo, Na);\n\n#Plot Criteria\nORBHigh.SetDefaultColor(Color.MAGENTA);\nORBHigh.SetStyle(Curve.SHORT_DASH);\nORBHigh.HideBubble();\nORBLow.SetDefaultColor(Color.MAGENTA);\nORBLow.SetStyle(Curve.SHORT_DASH);\nORBLow.HideBubble();\nVH.SetDefaultColor(Color.RED);\nPC.SetDefaultColor(Color.YELLOW);\nPC.SetStyle(Curve.LONG_DASH);\nVL.SetDefaultColor(Color.GREEN);\nR4.SetDefaultColor(Color.WHITE);\nR3.SetDefaultColor(Color.WHITE);\nR2.SetDefaultColor(Color.WHITE);\nR1.SetDefaultColor(Color.WHITE);\nPP.SetDefaultColor(Color.WHITE);\nS4.SetDefaultColor(Color.WHITE);\nS3.SetDefaultColor(Color.WHITE);\nS2.SetDefaultColor(Color.WHITE);\nS1.SetDefaultColor(Color.WHITE);\n\ncloudhigh.SetDefaultColor(Color.RED);\ncloudlow.SetDefaultColor(Color.GREEN);\nAddLabel(showVAH , \&quot;vah= \&quot; + AsText(vah), Color.pink);\nAddLabel(showVAH , \&quot;val= \&quot; + AsText(val), Color.light_green);\nAddLabel(showVAH , \&quot;poc= \&quot; + AsText(poc), Color.light_orANGE);\nAddLabel(showVAH , \&quot;pivot= \&quot; + AsText(pivot), Color.pink);\nVH.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nPC.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nVL.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\ncloudhigh.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\ncloudlow.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nPP.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nR1.SetStyle(Curve.SHORT_DASH);\nR1.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nR2.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nR3.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nR4.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nS1.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nS2.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nS3.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nS4.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\n\n\nR1.SetHiding(R1_auto_show);\nR2.SetHiding(R2_auto_show);\nR3.SetHiding(R3_auto_show);\nR4.SetHiding(R4_auto_show);\nS1.SetHiding(S1_auto_show);\nS2.SetHiding(S2_auto_show);\nS3.SetHiding(S3_auto_show);\nS4.SetHiding(!S4_auto_show);\n#S5.SetHiding(!S5_auto_show);\n#AddLabel(yes , \&quot;R44= \&quot; + (S5_auto_show), Color.pink);\n#AddLabel(yes , \&quot;R5= \&quot; + ((RIII + ((RIV - SIII) / 2))), Color.pink);\n\n\n#Vwap\ninput vwapTimeFrame = {default DAY, WEEK, MONTH};\ninput vwapLable =yes;\n\n\ndef cap = getAggregationPeriod();\ndef errorInAggregation =\n    vwapTimeFrame == vwapTimeFrame.DAY and cap &gt;= AggregationPeriod.WEEK or\n    vwapTimeFrame == vwapTimeFrame.WEEK and cap &gt;= AggregationPeriod.MONTH;\nassert(!errorInAggregation, \&quot;timeFrame should be not less than current chart aggregation period\&quot;);\n\ndef yyyyMmDd = getYyyyMmDd();\ndef periodIndx;\nswitch (vwapTimeFrame) {\ncase DAY:\n    periodIndx = yyyyMmDd;\ncase WEEK:\n    periodIndx = Floor((daysFromDate(first(yyyyMmDd)) + getDayOfWeek(first(yyyyMmDd))) / 7);\ncase MONTH:\n    periodIndx = roundDown(yyyyMmDd / 100, 0);\n}\ndef isPeriodRolled = compoundValue(1, periodIndx != periodIndx[1], yes);\n\ndef volumeSum;\ndef volumeVwapSum;\ndef volumeVwap2Sum;\n\nif (isPeriodRolled) {\n    volumeSum = volume;\n    volumeVwapSum = volume * vwap;\n    volumeVwap2Sum = volume * Sqr(vwap);\n} else {\n    volumeSum = compoundValue(1, volumeSum[1] + volume, volume);\n    volumeVwapSum = compoundValue(1, volumeVwapSum[1] + volume * vwap, volume * vwap);\n    volumeVwap2Sum = compoundValue(1, volumeVwap2Sum[1] + volume * Sqr(vwap), volume * Sqr(vwap));\n}\ndef VWprice = volumeVwapSum / volumeSum;\n\n\ndef VWAP = VWprice;\n#vwap\n\nAddLabel(vwapLable, \&quot;VWAP= \&quot; + astext(VWAP), if VWAP&lt; close then Color.LIGHT_GREEN else if VWAP&gt; close then color.LIGHT_red else Color.GRAY);\n#AddLabel(vwapLable, \&quot;VWAP= \&quot; + astext(VWAP), Color.White);\ndef vwDif= close- VWAP;\n\n#AddLabel(yes, \&quot; \&quot;+astext(vwDif), if vwDif&gt; 0 then Color.LIGHT_GREEN else if vwDif&lt; 0 then color.LIGHT_red else Color.GRAY);\nAddLabel(vwapLable and vwDif&gt;0, \&quot; +\&quot;+astext(vwDif),  Color.LIGHT_GREEN );\nAddLabel(vwapLable and vwDif&lt;=0, \&quot; \&quot;+astext(vwDif),  if vwDif&lt; 0 then color.LIGHT_red else Color.LIGHT_GRAY);\n\n\n\n&quot;,name=&quot;_8530afbb_30ff_4431_88c9_cca8caf1d61d&quot;}){hidden=&lt;T,plots{1:{lineStyle=1},6:{lineStyle=1}}}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;#hint: yakBro daily ATR 2020\n#yakbro.com\n\ndeclare upper;\n\ninput atrLength =5;\ninput averageType = AverageType.WILDERS;\ninput Period = AggregationPeriod.DAY;\ninput atrLength2 =5;\n\ninput Period2 = AggregationPeriod.HOUR;\ninput offset = 0;\ninput prctOfDr = 50;\ninput showATR = yes;\ninput showTodayRS = yes; #show strength to today\'s range\n\ndef ATR = MovingAverage(averageType, TrueRange(high(period= Period), close(period = Period), low(period = Period)), ATRlength)[offset];\ndef ATR2 = MovingAverage(averageType, TrueRange(high(period= Period2), close(period = Period2), low(period = Period2)), ATRlength2)[offset];\ndef todayHigh = high(period = Period);\ndef todayLow = low(period = Period);\ndef DR = todayHigh - todayLow;#current range\ndef a = todayLow + DR * prctOfDr/100;#.5; #50% of DR price\ndef b = close(period=Period) - todayLow; #last close price to DR\ndef x = b / DR * 100; #current DR range\ndef rangeDiff = roundUp(ATR - DR); #Range left\n\n#labels\nAddLabel(showATR, \&quot;ATR: \&quot;+Round(DR,2)+ \&quot;/ ATR(\&quot;+atrLength+\&quot;):\&quot;+Round(ATR,2), (if DR &gt; ATR then Color.downtick else Color.LIGHT_GRAY));\n\nAddLabel(showATR, \&quot;Diff:\&quot; +absValue(rangeDiff),if rangeDiff &lt; 0 then Color.downtick else color.green);\nAddLabel(showATR, \&quot;/ ATR2(\&quot;+atrLength2+\&quot;):\&quot;+Round(ATR2,2), (if DR &gt; ATR2 then Color.downtick else Color.LIGHT_GRAY));\nAddLabel(showTodayRS,\&quot;RS: \&quot;+round(x,2) + \&quot;%\&quot;,if x &gt;70 then Color.GREEN else if x&gt;60 then color.LIGHT_GREEN else if x&gt;40 then color.orange else color.red);\n\n&quot;,name=&quot;_843536f6_4cec_345a_b9ad_7b0f7d848b54&quot;})),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2008-2021\n#\n\ninput price = close;\ninput length = 20;\ninput displace = 0;\n\nplot HMA = MovingAverage(AverageType.HULL, price, length)[-displace];\n\nHMA.DefineColor(\&quot;Up\&quot;, GetColor(1));\nHMA.DefineColor(\&quot;Down\&quot;, GetColor(0));\nHMA.AssignValueColor(if HMA &gt; HMA[1] then HMA.color(\&quot;Up\&quot;) else HMA.color(\&quot;Down\&quot;));&quot;,name=&quot;HullMovingAvg&quot;}){inputsMap:TreeMap0{^(&quot;price&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap0,plots{0:{lineStyle=2,lineWeight=2,palette{^(&quot;Down&quot;,@CustomColor0),^(&quot;Up&quot;,@CustomColor1)}}}}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence:ScriptEssence0{body=&quot;input price = close;\ninput displace = 0;\ninput length = 20;\ninput Num_Dev_Dn = -2.0;\ninput Num_Dev_up = 2.0;\ninput averageType = AverageType.Simple;\ninput showCloud= yes;\n\ndef sDev = stdev(data = price[-displace], length = length);\n\nplot MidLine = MovingAverage(averageType, data = price[-displace], length = length);\nplot LowerBand = MidLine + num_Dev_Dn * sDev;\nplot UpperBand = MidLine + num_Dev_Up * sDev;\n\nLowerBand.SetDefaultColor(GetColor(0));\nMidLine.SetDefaultColor(GetColor(1));\nUpperBand.SetDefaultColor(GetColor(5));\n\n#############################\ndef Na = Double.NaN;\n\ndef cloudhigh = If( ShowCloud, UpperBand, Na);\ndef cloudlow  = If(ShowCloud, LowerBand, Na);\n#AddCloud(cloudhigh, cloudlow, Color.GRAY, Color.GRAY);\n\n\nAddCloud(cloudhigh, Midline, Color.Green, Color.light_Green);\nAddCloud(cloudlow, Midline, Color.Red, Color.light_Red);\n\n\n####$$$$$$$$\n\n\ninput priceSlm = close;\n\ninput superFastLength = 8;\n\ninput fastLengthSlm = 13;\n\ninput slowLengthSlm = 21;\n\n\n\n\ninput averageTypeSlm = AverageType.EXPONENTIAL;\n\ndef mov_avg8 = MovingAverage(averageTypeSlm, priceSlm[-displace], superFastLength);\n\ndef mov_avg13 = MovingAverage(averageTypeSlm, priceSlm[-displace], fastLengthSlm);\n\ndef mov_avg21 = MovingAverage(averageTypeSlm, priceSlm[-displace], slowLengthSlm);\n \n#moving averages\n\ndef Superfast = mov_avg8;\n\ndef Fast = mov_avg13;\n\ndef Slow = mov_avg21;\n\n\ndef buy = mov_avg8 &gt; mov_avg13 and mov_avg13 &gt; mov_avg21 and low &gt; mov_avg8;\n\ndef stopbuy = mov_avg8 &lt;= mov_avg13;\n\ndef buynow = !buy[1] and buy;\n\ndef buysignal = CompoundValue(1, if buynow and !stopbuy then 1 else if buysignal[1] == 1 and stopbuy then 0 else buysignal[1], 0);\n\n\ndef Buy_Signal = buysignal[1] == 0 and buysignal == 1;\n\ndef Momentum_Down = buysignal[1] == 1 and buysignal == 0;\n\n\ndef sell = mov_avg8 &lt; mov_avg13 and mov_avg13 &lt; mov_avg21 and high &lt; mov_avg8;\n\ndef stopsell = mov_avg8 &gt;= mov_avg13;\n\ndef sellnow = !sell[1] and sell;\n\ndef sellsignal = CompoundValue(1, if sellnow and !stopsell then 1 else if sellsignal[1] == 1 and stopsell then 0 else sellsignal[1], 0);\n\n\ndef Sell_Signal = sellsignal[1] == 0 and sellsignal;\n\ndef Momentum_Up = sellsignal[1] == 1 and sellsignal == 0;\n \n# when using this as a custom scan, change the word plot to def\n# then remove the \'#\' from in front of one of the \&quot;plot Scan\&quot; statements below\ndef Colorbars = if buysignal == 1 then 1 else if sellsignal == 1 then -1 else if buysignal == 0 or sellsignal == 0 then 0 else 0;\n\n# use this first Scan plot for SLM Ribbon Momentum UP\n#plot Scan = if Colorbars == 1 then yes else no;\n\n# use this second Scan plot for SLM Ribbon Momentum DOWN\n#plot Scan = if Colorbars == -1 then yes else no;\n\n\n\n\n\n\n###############\n\ndef Colorbars1 = if buysignal == 1 then 1 else if sellsignal == 1 then 2 else if buysignal == 0 or sellsignal == 0 then 3 else 0;\n\ninput lengthHma = 20;\n\ndef HMA = MovingAverage(AverageType.HULL, price, lengthHma);\ndef HMA_Up=  HMA &gt; HMA[1];\ndef HMA_Down =! HMA_UP;\n\n###############\n\n#def Colorbars1 = if buysignal == 1 then 1 else if sellsignal == 1 then 2 else if buysignal == 0 or sellsignal == 0 then 3 else 0;\n\n\n\nMidLine.definecolor(\&quot;Buy\&quot;, color.dark_green);\n\n\nMidLine.definecolor(\&quot;Sell\&quot;, color.red);\n\nMidLine.definecolor(\&quot;Neutral\&quot;, Color.PLUM);\n#MidLine.definecolor(\&quot;NeutralDown\&quot;, Color.orange);\nMidLine.definecolor(\&quot;HullMA_up\&quot;, color.blue);\n\nMidLine.definecolor(\&quot;HullMA_down\&quot;, color.orange);\n\nMidLine.AssignValueColor(if buysignal and HMA_Up then MidLine.color(\&quot;Buy\&quot;) else if buysignal and !HMA_Up then MidLine.color(\&quot;HullMA_down\&quot;) else if sellsignal and HMA_Down  then MidLine.color(\&quot;Sell\&quot;) else  if sellsignal and !HMA_Down  then MidLine.color(\&quot;HullMA_up\&quot;) else  MidLine.color(\&quot;neutral\&quot;));;#\n# if Momentum_Up then  RSI.color(\&quot;neutralUp\&quot;) else  RSI.color(\&quot;neutraldown\&quot;));\n\n\n\n\n\n\n\n#MidLine.definecolor(\&quot;Buy_Signal_Bars\&quot;, color.dark_green);\n\n#MidLine.definecolor(\&quot;Sell_Signal_Bars\&quot;, color.red);\n\n#MidLine.definecolor(\&quot;NeutralUp\&quot;, color.plum);\n\n#MidLine.definecolor(\&quot;NeutralDown\&quot;, color.orange);\n\n#MidLine.AssignValueColor(if Colorbars1 ==1 then MidLine.color(\&quot;buy_signal_bars\&quot;) else if colorbars1 ==2 then #MidLine.color(\&quot;Sell_Signal_bars\&quot;) else if Momentum_Up then  MidLine.color(\&quot;neutralUp\&quot;) else MidLine.color(\&quot;neutralDown\&quot;) );\n\n\nplot UpSignal = if (buysignal and price crosses above MidLine) then LowerBand else Double.NaN;\nplot DownSignal = if (sellsignal and price crosses below MidLine) then UpperBand else Double.NaN;\ninput showBreakoutSignals =no;\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\n\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\n\n\n\nMidLine.setlineWeight(3);\n\n\n\n\n\n\n######$$$$&quot;,name=&quot;_cbc1e041_e9b4_4664_b964_97e197ec9dfd&quot;}){hidden=&lt;T,inputsMap:TreeMap1{^(&quot;price&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap1}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;###############################################################################################################################################\n################################################################################################################################################\n#\n# Author: Kory Gill, [USER=212]@korygill[/USER]\n#\n# Created from idea on https://usethinkscript.com/threads/finite-volume-elements.593/\n# Original idea is from http://mkatsanos.com/FVE.html\n#\n# VERSION HISTORY (sortable date and time (your local time is fine), and your initials\n# 20190907-1200-KG    - Created.\n\n###############################################################################\n### NORMALIZATION (Volume Damping adaptation) by Ramon Del Villar AKA PElonsax\n### 7/20/2020 #################################################################\n###############################################################################\n# The damping logic is taken directly from VFI #\n\n#declare once_per_bar;\n\n\n#################################################################$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n\n#########################################%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%$$$$$$$$$$$$$$$$$\n\n\n\n#\n# inputs\n#\ninput RSI_prev = 2; #previous bar to check\ninput def_cond = no;\ninput Samples = 14;\n\n\n\n#vwap vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\n#input numDevUp = 2.0;\ninput vwapTimeFrame = {default DAY, WEEK, MONTH};\n\ndef cap = getAggregationPeriod();\ndef errorInAggregation =\n    vwapTimeFrame == vwapTimeFrame.DAY and cap &gt;= AggregationPeriod.WEEK or\n    vwapTimeFrame== vwapTimeFrame.WEEK and cap &gt;= AggregationPeriod.MONTH;\nassert(!errorInAggregation, \&quot;timeFrame should be not less than current chart aggregation period\&quot;);\n\ndef yyyyMmDd = getYyyyMmDd();\ndef periodIndx;\nswitch (vwapTimeFrame) {\ncase DAY:\n    periodIndx = yyyyMmDd;\ncase WEEK:\n    periodIndx = Floor((daysFromDate(first(yyyyMmDd)) + getDayOfWeek(first(yyyyMmDd))) / 7);\ncase MONTH:\n    periodIndx = roundDown(yyyyMmDd / 100, 0);\n}\ndef isPeriodRolled = compoundValue(1, periodIndx != periodIndx[1], yes);\n\ndef volumeSum;\ndef volumeVwapSum;\ndef volumeVwap2Sum;\n\nif (isPeriodRolled) {\n    volumeSum = volume;\n    volumeVwapSum = volume * vwap;\n    volumeVwap2Sum = volume * Sqr(vwap);\n} else {\n    volumeSum = compoundValue(1, volumeSum[1] + volume, volume);\n    volumeVwapSum = compoundValue(1, volumeVwapSum[1] + volume * vwap, volume * vwap);\n    volumeVwap2Sum = compoundValue(1, volumeVwap2Sum[1] + volume * Sqr(vwap), volume * Sqr(vwap));\n}\ndef vWapprice = volumeVwapSum / volumeSum;\ndef deviation = Sqrt(Max(volumeVwap2Sum / volumeSum - Sqr(vWapprice), 0));\n\ndef VWAP = vWapprice;\n\n\n\ninput vwapCondition =no;\n#input vp=close;\ndef conVwapBuy =if  vwapCondition then  close &gt;= VWAp else 1;\n\n#####^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n\n#\n# FVE logic\n#\ndef bn = BarNumber();\ndef nan = double.NaN;\n\n\ninput maxVolumeCutOff = 2.5;\n###Coefficient used in calculation of “Cut Off” value. Lower values mean stronger damping of volume spikes###\n\nAssert(maxVolumeCutOff &gt; 0, \&quot;\'max volume cut off\' must be positive: \&quot; + maxVolumeCutOff);\n\ndef cutOff = 0.2 * StDev(Log(hlc3) - Log(hlc3[1]), 30) * close;\ndef hlcChange = hlc3 - hlc3[1];\ndef avgVolume = Average(volume, 30)[1];\ndef minVolume = Min(volume, avgVolume * maxVolumeCutOff);\ndef dirVolume = if hlcChange &gt; cutOff\n    then minVolume\n    else if hlcChange &lt; -cutOff\n        then -minVolume\n        else 0;\n\n\ndef mf = (close - (high+low)/2) + hlc3 - hlc3 [1];\ndef fveSum = Sum(dirVolume, Samples);\n\ndef fve = if bn &gt; Samples\n          then (fveSum / (Average(avgVolume, Samples) * Samples)) * 100\n          else nan;\n\n\n#\n# plots\n#\ndef pFVE = fve;\n\ndef pFVE_MA = MovingAverage(AverageType.SIMPLE, fve, 30);\n#pFVE_MA.SetDefaultColor(Color.Gray);\n#PFVE_MA.SetPaintingStrategy(PaintingStrategy.DASHES);\n\ndef zeroLine = 0;\ndef pFVE_Bull = if pFVE crosses above pFVE_MA then pFVE  else double.NaN ;\ndef pFVE_Bear = if pFVE &gt; pFVE_MA and pFVE[1] &gt; pFVE then pFVE else double.NaN ;\n\n#format plot \n\n#zeroLine.SetDefaultColor(Color.White);\n#pFVE.AssignValueColor(if pFVE &gt; pFVE_MA then color.green else color.red) ;\n#pFVE.SetLineWeight(3);\n\n\n#pFVE_Bull.SetPaintingStrategy(PaintingStrategy.SQUARES);\n#pFVE_Bull.SetLineWeight(5);\n#pFVE_Bull.SetDefaultColor(color.dark_green) ;\n\n#pFVE_Bear.SetPaintingStrategy(PaintingStrategy.SQUARES);\n#pFVE_Bear.SetLineWeight(5);\n#pFVE_Bear.SetDefaultColor(color.white) ;\n\n#AddCloud(pFVE, pFVE_MA, color.light_green, color.pink);\n\n\n\n#####################################################################################################################################################\n\n\n\n# Simple 2 Period RSI Trading Indicator\n# Assembled by BenTen at useThinkScript.com\n# You are free to use this code for personal use, and make derivative works from it. You are NOT GRANTED permission to use this code (or derivative works) for commercial purposes which includes and is not limited to selling, reselling, or packaging with other commercial indicators. Headers and attribution in this code should remain as provided, and any derivative works should extend the existing headers.\n\n#MACD\ninput price = close;\n#input length_macd = 14;\ninput displace = 0;\n#input showBreakoutSignals = no;\ninput crossingType = {default above, below};\n\ninput fastLength = 12;\ninput slowLength = 26;\ninput MACDLength = 9;\ndef fastAvg = Sum(volume * price, fastLength) / Sum(volume, fastLength);\ndef slowAvg = Sum(volume * price, slowLength) / Sum(volume, slowLength);\ndef Value = fastAvg - slowAvg;\ndef Avg = ExpAverage(Value, MACDLength);\ndef MACD_Diff  = Value - Avg;\n#def ZeroLine = 0;\n\n# RSI\ninput rsiLength = 14;\ninput overBought = 80;\ninput overSold = 28;\ninput rsiBuyLevel =40;\ninput averageType = AverageType.WILDERS;\ndef NetChgAvg = MovingAverage(averageType, price - price[1], RSIlength);\ndef TotChgAvg = MovingAverage(averageType, AbsValue(price - price[1]), RSIlength);\ndef ChgRatio = if TotChgAvg != 0 then NetChgAvg / TotChgAvg else 0;\ndef RSI = 50 * (ChgRatio + 1);\n#def OverSold = overSold;\n#def OverBought = overBought;\n\n#test\n#plot p= VWAp;#(period= AggregationPeriod.DAY);\n\n####################################\n\ndef cond_logic = if (def_cond) then MACD_Diff &lt;= 0 else yes;\n######\n#def sig_buy = Crosses(RSI(length = RSIlength, averageType = averageType).RSI, over_Sold, crossingType == crossingType.above) within RSI_prev bars and pFVE_Bull and cond_logic; # and Diff &lt;= 0;\ndef sig_buy = conVwapBuy and RSI&lt; rsiBuyLevel and pFVE_Bull  and cond_logic ;# and Diff &gt;= 0;\n#def sig_buy = pFVE_Bull and Diff &gt;= 0;\nplot signal_buy = sig_buy ;\n\n\ndef sig_sell = Crosses(RSI(length = RSIlength, averageType = averageType).RSI, overBought, crossingType == crossingType.below) within RSI_prev bars and pFVE_Bear ;\nplot signal_sell = sig_sell;\n\nsignal_buy.DefineColor(\&quot;Above\&quot;, Color.YELLOW);\nsignal_buy.DefineColor(\&quot;Below\&quot;, GetColor(8));\nsignal_buy.AssignValueColor(if crossingType == crossingType.above then signal_buy.Color(\&quot;Above\&quot;) else signal_buy.Color(\&quot;Below\&quot;));\nsignal_buy.setlineWeight(5);\nsignal_buy.SetPaintingStrategy(if crossingType == crossingType.above\n    then PaintingStrategy.BOOLEAN_ARROW_UP\n    else PaintingStrategy.BOOLEAN_ARROW_DOWN);\n\nsignal_sell.DefineColor(\&quot;Above\&quot;, Color.VIOLET);\nsignal_sell.DefineColor(\&quot;Below\&quot;, GetColor(8));\nsignal_sell.AssignValueColor(if crossingType == crossingType.above then signal_sell.Color(\&quot;Above\&quot;) else signal_sell.Color(\&quot;Below\&quot;));\n\nsignal_sell.SetPaintingStrategy(if crossingType == crossingType.above\n    then PaintingStrategy.BOOLEAN_ARROW_DOWN\n    else PaintingStrategy.BOOLEAN_ARROW_UP);\nsignal_sell.setlineWeight(5);\ninput bubble =no; \nAddChartBubble(bubble and sig_sell == 1, price, \&quot;S= \&quot; + price + \&quot; rsi \&quot; + RSI, Color.VIOLET, no);&quot;,name=&quot;_259d509b_f440_4edf_840b_2df1df75ab8c&quot;}){inputsMap:TreeMap2{^(&quot;price&quot;,!%7.FundamentalType.valueOf(*%7.FundamentalType.class,&quot;OPEN&quot;)),!get:Integer0(&quot;MACDLength&quot;)},inputsMap=@TreeMap2}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;input Length = 20;\n\nplot UpperBand = Average(data = High * (1 + 4 * (High - Low) / (High + Low)), length = Length);\n\nplot MidLine = Average(data = close, length = Length);\n\nplot LowerBand = Average(data = Low * (1 - 4 * (High - Low) / (High + Low)), length = Length);\n\nLowerBand.SetDefaultColor(GetColor(0));\nMidLine.SetDefaultColor(GetColor(1));\nUpperBand.SetDefaultColor(GetColor(5));\n\n#############################\n\nAddCloud(UpperBand, Midline, Color.Green, Color.light_Green);\nAddCloud(LowerBand, Midline, Color.Red, Color.light_Red);&quot;,name=&quot;_e50ff960_2d50_4d8a_96d1_1e0bf658ce54&quot;}){hidden=&lt;T,plots{1:{hiding=&lt;T}}}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;#start\n\n#hint: &lt;b&gt;Ask SLM Ribbon&lt;/b&gt;\\nThe Ask SLM Ribbon is a momentum indicator that uses a combination of three exponential moving averages. When the averages are in alinement, with the \&quot;superfast\&quot; moving average above the \&quot;fast\&quot; moving average and the fast moving average above the \&quot;slow\&quot; moving average, the momentum condition is positive. A \&quot;buy signal\&quot; is generated, with an up arrow, when above conditions are met and a \&quot;clear bar\&quot; occurs; with the low of that bar is above all of the moving averages. The positive momentum ends if the superfast moving average touches the fast moving average; then condition is considered neutral and an oppostive arrow will appear. Negative momentum and a \&quot;Sell signal\&quot; are the opposite of the bullish conditions. \\n \\n\\n--------------------------------------------------------------------------------\\nVolume bars can be colored to match the Chart by clicking on Style&gt;Settings&gt;Appearance&gt;Common, and color symbol as ticks  \\n\n\n\ndef timeFrame = getAggregationPeriod();\ninput aggregationPeriod =AggregationPeriod.FIVE_MIN;\ninput useAggegateForP1 =no;\n\n\n\n# Variables:\n\n \n\ninput price = close;\n\ninput superfast_length = 8;\n\ninput fast_length = 13;\n\ninput slow_length = 21;\ninput color_bars=no;\n\ninput displace = 0;\ninput averageType = AverageType.EXPONENTIAL;\n\ndef mov_avg8 = MovingAverage(averageType, price[-displace], superfast_length);\n\n\ndef mov_avg13 ;#= MovingAverage(averageType, price[-displace], fast_length);\nif(!useAggegateForP1) \n{\n\n mov_avg13 = MovingAverage(averageType, price[-displace], fast_length);\n}\n\nelse\n{\nmov_avg13 = MovingAverage(averageType, close(period = aggregationPeriod)[-displace], superfast_length);\n}\n\n\ndef mov_avg21 = MovingAverage(averageType, price[-displace], slow_length);\n\n \n\n\n \n\n#moving averages\n\nPlot Superfast = mov_avg8;\n\nplot Fast = mov_avg13;\n\nplot Slow = mov_avg21;\nSuperfast.setdefaultColor(color.cyan);\nFast.setdefaultColor(color.gray);\nSlow.setdefaultColor(color.blue);\n\n\n \n\ndef buy = mov_avg8 &gt; mov_avg13 and mov_avg13 &gt; mov_avg21 and low &gt; mov_avg8;\n\ndef stopbuy = mov_avg8 &lt;= mov_avg13;\n\ndef buynow = !buy[1] and buy;\n\ndef buysignal = CompoundValue(1, if buynow and !stopbuy then 1 else if buysignal[1]==1 and stopbuy then 0 else buysignal[1], 0);\n\n \n\nplot Buy_Signal = buysignal[1] == 0 and buysignal==1;\n\nBuy_signal.setpaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\n\nBuy_signal.setdefaultColor(color.dark_GREEN);\n\nBuy_signal.hidetitle();\n\n#Alert(condition = buysignal[1] == 0 and buysignal == 1, text = \&quot;Buy Signal\&quot;, sound = Sound.Bell, \&quot;alert type\&quot; = Alert.BAR);\n\n \n\nplot Momentum_Down = buysignal[1] ==1 and buysignal==0;\n\nMomentum_down.setpaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);\n\nMomentum_Down.setdefaultColor(color.plum);\n\nMomentum_down.hidetitle();\n\n#Alert(condition = buysignal[1] == 1 and buysignal == 0, text = \&quot;Momentum_Down\&quot;, sound = Sound.Bell, \&quot;alert type\&quot; = Alert.BAR);\n\n \n\ndef sell = mov_avg8 &lt; mov_avg13 and mov_avg13 &lt; mov_avg21 and high &lt; mov_avg8;\n\ndef stopsell = mov_avg8 &gt;= mov_avg13;\n\ndef sellnow = !sell[1] and sell;\n\ndef sellsignal = CompoundValue(1, if sellnow and !stopsell then 1 else if sellsignal[1]==1 and stopsell then 0 else sellsignal[1], 0);\n\n \n\nPlot Sell_Signal = sellsignal[1] ==0 and sellsignal;\n\nSell_signal.setpaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_down);\n\nsell_signal.setDefaultColor(color.red);\n\nSell_signal.hidetitle();\n\n#Alert(condition = sellsignal[1] == 0 and sellsignal == 1, text = \&quot;Sell Signal\&quot;, sound = Sound.Bell, \&quot;alert type\&quot; = Alert.BAR);\n\n \n\nPlot Momentum_Up = sellsignal[1]==1 and sellSignal==0;\n\nMomentum_up.setpaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_up);\n\nMomentum_up.setDefaultColor(color.plum);\n\nMomentum_up.hidetitle();\n\n#Alert(condition = sellsignal[1] == 1 and sellSignal == 0, text = \&quot;Momentum_Up\&quot;, sound = Sound.Bell, \&quot;alert type\&quot; = Alert.BAR);\ninput priceHma = close;\n input lengthHma = 20;\n\ndef HMA = MovingAverage(AverageType.HULL, priceHma, lengthHma);\ndef HMA_Up=  HMA &gt; HMA[1];\ndef HMA_Down =! HMA_UP;\n\nplot Colorbars = if buysignal and HMA_Up then 1 else if  buysignal and !HMA_Up then  2 else if sellsignal and HMA_Down then 3  else if sellsignal and !HMA_Down then  4 else if !buysignal or !sellsignal then 5 else 0;\n\ncolorbars.setHiding(1);\n\nColorbars.definecolor(\&quot;Buy\&quot;, color.dark_green);\n\nColorbars.definecolor(\&quot;Sell\&quot;, color.red);\n\nColorbars.definecolor(\&quot;Neutral\&quot;, color.plum);\nColorbars.definecolor(\&quot;HullMA_up\&quot;, color.blue);\n\nColorbars.definecolor(\&quot;HullMA_down\&quot;, color.orange);\n\n\n\n\n\n\n\n\n###############\n\n#def Colorbars1 = if buysignal == 1 then 1 else if sellsignal == 1 then 2 else if buysignal == 0 or sellsignal == 0 then 3 else 0;\n\n\n\n\n\n\n\n\n \n\nAssignPriceColor(if Colorbars ==1 and color_bars then colorbars.color(\&quot;Buy\&quot;) else if colorbars ==2 and color_bars  then colorbars.color(\&quot;HullMA_down\&quot;) else if colorbars ==3 and color_bars  then colorbars.color(\&quot;Sell\&quot;)  else if colorbars ==4 and color_bars  then colorbars.color(\&quot;HullMA_up\&quot;)else if color_bars  then colorbars.color(\&quot;neutral\&quot;) else  Color.CURRENT);\n\n#end&quot;,name=&quot;_cb74f5f9_72e6_3b87_b741_98a2d860ea3a&quot;}){inputsMap:TreeMap3{^(&quot;price&quot;,&quot;CLOSE&quot;),^(&quot;priceHma&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap3}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;### xiuyu vwap cross signal with abnormal volume\n\n#declare hide_on_daily;\n\n####\n#MTF\ndef tFrame = GetAggregationPeriod();\ninput timeFrame = {default DAY, WEEK, MONTH};\ninput aggregationPeriod = AggregationPeriod.HOUR;\ninput useAutoAggegate = yes;\n\n\n\n# Variables:\n#def  =if (useAutoAggegate) then open(period = aggregationPeriod1) else open;\n\ndef AutoAGG = if tFrame &lt;  AggregationPeriod.DAY then AggregationPeriod.DAY\n             else if  tFrame &lt; AggregationPeriod.WEEK then AggregationPeriod.WEEK\n                  else AggregationPeriod.MONTH;\ndef AGG = if (!useAutoAggegate) then aggregationPeriod else AutoAGG;\n\ndef testTimeFrames = if tFrame &lt; AGG  then yes else no;\n\n#AddLabel(useAutoAggegate, if testTimeFrames  then \&quot;Time Frames Are Correct\&quot; else \&quot;Time Frames Are \n\ninput length = 10; #average volume lenght\ninput volMinimum = 50000;\ninput showPriceColor = yes;\ninput factor = 1.50; #show what factors to avgvolume \ninput nDevUp = 2.0;\ninput nDevDn = -2.0;\n\ndef avgvolume = Average(volume, length) * factor;\n\n\n#plot vwap = reference VWAP( AGG);\n#######\n\n\ndef cap = GetAggregationPeriod();\ndef errorInAggregation =\n    timeFrame == timeFrame.DAY and cap &gt;= AggregationPeriod.WEEK or\n    timeFrame == timeFrame.WEEK and cap &gt;= AggregationPeriod.MONTH;\nAssert(!errorInAggregation, \&quot;timeFrame should be not less than current chart aggregation period\&quot;);\n\ndef yyyyMmDd = GetYYYYMMDD();\ndef periodIndx;\nswitch (timeFrame) {\ncase DAY:\n    periodIndx = yyyyMmDd;\ncase WEEK:\n    periodIndx = Floor((DaysFromDate(First(yyyyMmDd)) + GetDayOfWeek(First(yyyyMmDd))) / 7);\ncase MONTH:\n    periodIndx = RoundDown(yyyyMmDd / 100, 0);\n}\ndef isPeriodRolled = CompoundValue(1, periodIndx != periodIndx[1], yes);\n\ndef volumeSum;\ndef volumeVwapSum;\ndef volumeVwap2Sum;\n\nif (isPeriodRolled) {\n    volumeSum = volume;\n    volumeVwapSum = volume * vwap;\n    volumeVwap2Sum = volume * Sqr(vwap);\n} else {\n    volumeSum = CompoundValue(1, volumeSum[1] + volume, volume);\n    volumeVwapSum = CompoundValue(1, volumeVwapSum[1] + volume * vwap, volume * vwap);\n    volumeVwap2Sum = CompoundValue(1, volumeVwap2Sum[1] + volume * Sqr(vwap), volume * Sqr(vwap));\n}\ndef price = volumeVwapSum / volumeSum;\ndef deviation = Sqrt(Max(volumeVwap2Sum / volumeSum - Sqr(price), 0));\n\nplot VWAP = price;\nplot UpperBand = price + nDevUp * deviation;\nplot LowerBand = price + nDevDn * deviation;\nplot UpperBand2 = price + (1+nDevUp) * deviation;\nplot LowerBand2 = price +(-1+ nDevDn) * deviation;\ndef sdvP1=  price + deviation;\ndef sdvN1=  price - deviation;\n#####\n\n\nplot SD1up =close[1] crosses above sdvp1 and ( open&lt; close) and low&gt;sdvp1;\nSD1up.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nSD1up.SetDefaultColor(Color.graY);\nSD1up.SetLineWeight(2);\nAssignPriceColor(if SD1up and showPriceColor and open&lt; close then Color.violet else Color.CURRENT);\n\nAddLabel(yes, \&quot;VWAP= \&quot; + astext(VWAP), if VWAP&lt; close then Color.LIGHT_GREEN else if VWAP&gt; close then color.LIGHT_red else Color.GRAY);\n#AddLabel(yes, \&quot;VWAP= \&quot; + astext(VWAP), Color.White);\ndef vwDif= close- VWAP;\n#AddLabel(yes, \&quot; \&quot;+astext(vwDif), if vwDif&gt; 0 then Color.LIGHT_GREEN else if vwDif&lt; 0 then color.LIGHT_red else Color.GRAY);\nAddLabel(yes and vwDif&gt;0, \&quot; +\&quot;+astext(vwDif),  Color.LIGHT_GREEN );\nAddLabel(yes and vwDif&lt;=0, \&quot; \&quot;+astext(vwDif),  if vwDif&lt; 0 then color.LIGHT_red else Color.LIGHT_GRAY);\n\ninput vwapLableAll =yes;\nAddLabel(vwapLableAll, \&quot;VWAP +1= \&quot; + astext(sdvP1), if sdvP1&lt; close then Color.LIGHT_GREEN else if sdvP1&gt; close then color.LIGHT_red else Color.GRAY);\n\nAddLabel(vwapLableAll, \&quot;VWAP +2= \&quot; + astext(UpperBand), if UpperBand&lt; close then Color.LIGHT_GREEN else if UpperBand&gt; close then color.LIGHT_red else Color.GRAY);\nAddLabel(vwapLableAll, \&quot;VWAP +3= \&quot; + astext(UpperBand2), if UpperBand2&lt; close then Color.LIGHT_GREEN else if UpperBand2&gt; close then color.LIGHT_red else Color.GRAY);\n\nAddLabel(vwapLableAll, \&quot;VWAP -1= \&quot; + astext(sdvN1), if sdvN1&lt; close then Color.LIGHT_GREEN else if sdvN1&gt; close then color.LIGHT_red else Color.GRAY);\nAddLabel(vwapLableAll, \&quot;VWAP -2= \&quot; + astext(LowerBand), if LowerBand&lt; close then Color.LIGHT_GREEN else if LowerBand&gt; close then color.LIGHT_red else Color.GRAY);\nAddLabel(vwapLableAll, \&quot;VWAP -3= \&quot; + astext(LowerBand2), if LowerBand2&lt; close then Color.LIGHT_GREEN else if LowerBand2&gt; close then color.LIGHT_red else Color.GRAY);\n\n#AddLabel(vwapLableAll, \&quot;VWAP R= \&quot; + astext(upperBand/sdvN1 -1)+\&quot;  \&quot;+astext(upperBand/lowerBand -1)+\&quot;  \&quot;+astext(upperBand2/lowerBand2 -1), if LowerBand&lt; close then Color.LIGHT_GREEN else if LowerBand&gt; close then color.LIGHT_red else Color.GRAY);\n\nAddLabel(vwapLableAll, \&quot;VWAP R= \&quot; + astext(upperBand/sdvN1 -1)+\&quot;  \&quot;+astext(upperBand/lowerBand -1)+\&quot;  \&quot;+astext(upperBand2/lowerBand2 -1), if LowerBand&lt; close then Color.LIGHT_GREEN else if LowerBand&gt; close then color.LIGHT_red else Color.GRAY);\n\n\n\ndef volCheck = volume &gt;= avgvolume &amp;&amp; volume &gt;= volMinimum &amp;&amp; volume &gt;= volume[1];\ndef isCross =  close crosses VWAP;\ndef abnormalSignal = isCross and volCheck;\n\n\nVWAP.SetDefaultColor(color.white);#(GetColor(0));\nplot signalup = if abnormalSignal and close &gt; VWAP then low else Double.NaN;\nsignalup.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nsignalup.SetDefaultColor(Color.CYAN);\nsignalup.SetLineWeight(2);\n\nplot signaldown =  if abnormalSignal and close &lt; VWAP then high else Double.NaN;\nsignaldown.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);\nsignaldown.SetDefaultColor(Color.CYAN);\nsignaldown.SetLineWeight(2);\n\nAssignPriceColor(if abnormalSignal and showPriceColor then Color.CYAN else Color.CURRENT);\n\n\n#####\nvwap.SetStyle(Curve.POINTS);\nUpperBand.SetDefaultColor(GetColor(0));\nLowerBand.SetDefaultColor(GetColor(0));\n\nUpperBand.SetStyle(Curve.POINTS);\nLowerBand.SetStyle(Curve.POINTS);\n\nUpperBand2.SetDefaultColor(Color.YELLOW);\nLowerBand2.SetDefaultColor(Color.YELLOW);\n\nUpperBand2.SetStyle(Curve.SHORT_DASH);\nLowerBand2.SetStyle(Curve.SHORT_DASH);\n#input AutoHide=yes;\n#def hideLower = if AutoHide then close &gt;vwap  else 0;;\n#def hideUpper = if AutoHide then  close &lt;vwap  else 0;#- deviation\n#addLabel(yes, \&quot;hide U\&quot;+hideUpper +\&quot; L\&quot;+hideLower);\n#UpperBand.setHiding(hideUpper);\n#LowerBand.setHiding(hideLower);\n#UpperBand.Hide();\n#LowerBand.Hide();\n#UpperBand2.Hide();\n#LowerBand2.Hide();&quot;,name=&quot;_740dc265_6e6e_38a5_ba0e_c0a058a5d552&quot;}){inputsMap:TreeMap4{^(&quot;vwapLableAll&quot;,&lt;F)},inputsMap=@TreeMap4,plots{0:{lineStyle=3},1:{lineStyle=3},2:{lineStyle=3}}}),+(!%5.CompiledStudy.resolveStudy(@ScriptEssence0){hidden=&lt;T,inputsMap:TreeMap5{^(&quot;price&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap5})}},!get(#%4.SubgraphId(&quot;Volume&quot;)){height=80,storableIndicators.+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# Modified by Mahi\n# Second Mod by Ramon DV\n\ndeclare on_volume;\n#v2\n#Inputs\n\ninput ShowDayAvg = yes;\ninput AvgDayVolLength = 30;\ninput ShowTodayVolume = yes;\ninput ShowTodayVolumeProjection = yes;\ninput ShowPercentOfDayAvg = yes;\ninput UnusualVolumePercent = 200;\ninput ShowBarAvg = yes;\ninput AvgBarVolLength = 30;\ninput ShowCurrentBar = yes;\ninput ShowPercentOfBarAvg = yes;\ninput ShowSellVolumePercent = yes;\ninput ShowBuyVolumePercent = yes;\ninput AvgType = AverageType.SIMPLE;\n\ndef O = open;\ndef H = high;\ndef C = close;\ndef L = low;\ndef V = volume;\n\ndef buying =  V * (C - L) / (H - L);\ndef selling = V * (H - C) / (H - L);\n\n#def buying =   V * (H - O) / (H - L) ;\n#def selling =  V * (O - L) / (H - L) ;\n\ndef O_day = open(period = AggregationPeriod.DAY);\ndef H_day = high(period = AggregationPeriod.DAY);\ndef C_day = close(period = AggregationPeriod.DAY);\ndef L_day = low(period = AggregationPeriod.DAY);\ndef V_day = volume(period = AggregationPeriod.DAY);\ndef selling_day = V_day * (H_day - C_day) / (H_day - L_day);\ndef buying_day = V_day * (C_day - L_day) / (H_day - L_day);\n#def selling_day = V_day * (H_day - O_day) / (H_day - L_day);\n#def buying_day = V_day * (O_day - L_day) / (H_day - L_day);\n# Selling Volume pressure\n\nplot SellVol = selling;\nSellVol.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);\nSellVol.SetDefaultColor(Color.RED);\nSellVol.HideTitle();\nSellVol.HideBubble();\nSellVol.SetLineWeight(5);\n\n# Total Volume\n# Buying Volume pressure\n\nplot BuyVol = buying + selling; # plot in the background of selling volume\nBuyVol.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);\nBuyVol.SetDefaultColor(Color.DARK_GREEN);\nBuyVol.HideTitle();\nBuyVol.HideBubble();\nBuyVol.SetLineWeight(5);\n\n#Volume Data\n\ndef DayVol = volume(period = “DAY”);\ndef AvgDayVol = MovingAverage(AvgType, DayVol[1], AvgDayVolLength);\ndef percentOfDay = Round((DayVol / AvgDayVol) * 100, 0);\n\n\ndef AvgBarVol = MovingAverage(AvgType, volume[1], AvgBarVolLength);\ndef percentOfBar = Round((volume / AvgBarVol) * 100, 0);\ndef SellVolPercent = Round((selling / volume) * 100, 0);\ndef BuyVolPercent = 100 - SellVolPercent;\n\ndef SellVolPercent_day = Round((selling_day / V_day) * 100, 0);\ndef BuyVolPercent_day = 100 - SellVolPercent_day;\n\n# Labels\n\nAddLabel(ShowDayAvg, \&quot;Avg “ + AvgDayVolLength + “ Days: \&quot; + Round(AvgDayVol, 0), Color.LIGHT_GRAY);\n\nAddLabel(ShowTodayVolume, \&quot;Today: \&quot; + DayVol, (if percentOfDay &gt;= UnusualVolumePercent then Color.GREEN else if percentOfDay &gt;= 100 then Color.ORANGE else Color.LIGHT_GRAY));\n\nAddLabel(ShowPercentOfDayAvg, percentOfDay + \&quot;%\&quot;, (if percentOfDay &gt;= UnusualVolumePercent then Color.GREEN else if percentOfDay &gt;= 100 then Color.ORANGE else Color.WHITE) );\n\nAddLabel(ShowBarAvg, \&quot;Avg “ + AvgBarVolLength + ” Bars: \&quot; + Round(AvgBarVol, 0), Color.LIGHT_GRAY);\n\nAddLabel(ShowCurrentBar, \&quot;Cur Bar: \&quot; + volume, (if percentOfBar &gt;= UnusualVolumePercent then Color.GREEN else if percentOfBar &gt;= 100 then Color.ORANGE else Color.LIGHT_GRAY));\n\nAddLabel(ShowPercentOfBarAvg, percentOfBar + \&quot;%\&quot;, (if percentOfBar &gt;= UnusualVolumePercent then Color.GREEN else if percentOfBar &gt;= 100 then Color.ORANGE else Color.WHITE) );\n\n\nAddLabel(ShowSellVolumePercent and (SellVolPercent &gt; BuyVolPercent) , \&quot;Cur Bar Sell %: \&quot; + SellVolPercent, if SellVolPercent &gt; BuyVolPercent then Color.RED else Color.GRAY);\nAddLabel(ShowBuyVolumePercent and (SellVolPercent &lt;= BuyVolPercent), \&quot;Cur Bar Buy %: \&quot; + BuyVolPercent, if BuyVolPercent &gt; SellVolPercent then Color.GREEN else Color.GRAY);\n\n\n# PriceOpen.Hide();\ninput length = 50;\n\nplot Vol = volume;\nplot VolAvg = Average(volume, length);\n\nVol.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);\nVol.SetLineWeight(3);\nVol.DefineColor(\&quot;Up\&quot;, Color.UPTICK);\nVol.DefineColor(\&quot;Down\&quot;, Color.DOWNTICK);\nVol.AssignValueColor(if close &gt; close[1] then Vol.Color(\&quot;Up\&quot;) else if close &lt; close[1] then Vol.Color(\&quot;Down\&quot;) else GetColor(1));\nVolAvg.SetDefaultColor(GetColor(8));\n\n\n#########################################################\n\n#def rth = (RegularTradingEnd(GetYYYYMMDD()) - RegularTradingStart(GetYYYYMMDD())) / AggregationPeriod.HOUR;\ndef rth = (RegularTradingEnd(GetYYYYMMDD()) - RegularTradingStart(GetYYYYMMDD())) / AggregationPeriod.MIN;\ndef MarketNotClosed = GetTime() &lt;= RegularTradingEnd (GetYYYYMMDD());\n# def eod = ((  RegularTradingEnd (GetYYYYMMDD()) - GetTime() ) / AggregationPeriod.MIN);\ndef eod = if MarketNotClosed then ((  RegularTradingEnd (GetYYYYMMDD()) - GetTime() ) / AggregationPeriod.MIN) else ((  RegularTradingEnd (GetYYYYMMDD())  ) / AggregationPeriod.MIN);\n\ndef DayVol_Projetion = volume(period = “DAY”) * rth / (rth - eod);\ndef percentOfDayProjection = Round((DayVol_Projetion / AvgDayVol) * 100, 0);\nAddLabel(ShowBuyVolumePercent, \&quot;Day Buy %: \&quot; + BuyVolPercent_day, if BuyVolPercent_day &gt; SellVolPercent_day then Color.GREEN else Color.GRAY);\n\nAddLabel(ShowTodayVolumeProjection, \&quot;Est. Vol: \&quot; + Round(DayVol_Projetion, 0) , if DayVol_Projetion &gt; AvgDayVol * 1.5  then Color.GREEN else Color.GRAY);\n\nAddLabel(ShowTodayVolumeProjection,  percentOfDayProjection  + \&quot;%\&quot;, if DayVol_Projetion &gt; AvgDayVol * 1.5  then Color.GREEN else Color.GRAY);\n\ndef y = GetTime() / AggregationPeriod.MIN;\n#eod =2;\n#AddLabel(yes, \&quot;RTH duration (min): \&quot; + rth);\n#AddLabel(yes, \&quot;EOD duration (min): \&quot; + eod);\n#AddLabel(yes, \&quot;Market Not closed: \&quot; + y);\n\n#######&quot;,name=&quot;_5261aedd_9830_4f97_bb0c_d3f9282e8428&quot;}))},^(#%4.SubgraphId(&quot;Subgraph20&quot;),#%4.SubgraphStorableModel{height=80,storableIndicators.+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence:ScriptEssence1{body=&quot;declare lower;\ndeclare zerobase;\n\ninput length = 14;\ninput numDev = 2.0;\ninput numDev2 = 3.0;\ninput allowNegativeValues = no;\ninput price =close;\n\ndef rawRelPrice = (price - Average(price, length)) / StDev(price, length);\nplot Relprice = if allowNegativeValues then rawRelPrice else Max(0, rawRelPrice);\nplot StDevLevel = numDev;\nplot StDevLevel2 = numDev2;\n\nRelprice.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);\nRelprice.SetLineWeight(3);\nRelprice.DefineColor(\&quot;Above2\&quot;, GetColor(0));\nRelprice.DefineColor(\&quot;Above3\&quot;, GetColor(1));\nRelprice.DefineColor(\&quot;Below\&quot;, GetColor(2));\nRelprice.AssignValueColor(if  Relprice &gt;= numDev2 then Relprice.Color(\&quot;Above3\&quot;) else if Relprice &gt;= numDev then Relprice.Color(\&quot;Above2\&quot;) else Relprice.Color(\&quot;Below\&quot;));\nStDevLevel.SetDefaultColor(GetColor(7));\nStDevLevel.SetStyle(Curve.SHORT_DASH);\nStDevLevel2.SetDefaultColor(GetColor(7));\nStDevLevel2.SetStyle(Curve.SHORT_DASH);&quot;,name=&quot;_d695cb43_1a60_4ba9_8b95_07a832b1793f&quot;}){hidden=&lt;T,inputsMap:TreeMap6{^(&quot;price&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap6})}),^(#%4.SubgraphId(&quot;Subgraph24&quot;),#%4.SubgraphStorableModel{height=80,storableIndicators.+(!%5.CompiledStudy.resolveStudy(@ScriptEssence1){hidden=&lt;T,inputsMap:TreeMap7{^(&quot;price&quot;,!%7.FundamentalType.valueOf:FundamentalType0(*%7.FundamentalType.class,&quot;VOLUME&quot;))},inputsMap=@TreeMap7})}),^(#%4.SubgraphId(&quot;Subgraph32&quot;),#%4.SubgraphStorableModel{height=142,storableIndicators.+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;declare lower;\ninput priceSmi = hlc3;\ninput price = close;\n\ninput over_bought = 40.0;\ninput over_sold = -40.0;\ninput percentDLength = 4;\ninput percentKLength = 5;\n\ndef min_low = Lowest(low, percentKLength);\ndef max_high = Highest(high, percentKLength);\ndef rel_diff = priceSmi - (max_high + min_low) / 2;\ndef diff = max_high - min_low;\n\ndef avgrel = ExpAverage(ExpAverage(rel_diff, percentDLength), percentDLength);\ndef avgdiff = ExpAverage(ExpAverage(diff, percentDLength), percentDLength);\n\nplot SMI = if avgdiff != 0 then avgrel / (avgdiff / 2) * 100 else 0;\nSMI.SetDefaultColor(GetColor(1));\n\nplot AvgSMI = ExpAverage(SMI, percentDLength);\nAvgSMI.SetDefaultColor(Color.CYAN);\nplot z = 0;\nz.SetStyle(Curve.SHORT_DASH);\nz.SetDefaultColor(Color.YELLOW);\n\nplot overbought = over_bought;\noverbought.SetDefaultColor(GetColor(5));\n\nplot oversold = over_sold;\noversold.SetDefaultColor(GetColor(5));\n\ninput Buyth=-40;\n\ninput thCondition = {default \&quot;blw\&quot; , \&quot;abv\&quot;};\ndef cond;\ndef Na = Double.Nan;\n\nswitch (thCondition)\n{\n case blw: \n    cond = 1;\ncase abv :\n   cond = 0;\n}\nplot buySmi;\nplot sellsmi;\n\nif cond \n{\n buySmi = if SMI crosses above AvgSMI and SMI &lt;Buyth and SMI&lt;over_bought then SMI* 0.996 else Na;\n#sell = if SMI crosses below AvgSMI and SMI &gt;Sth and SMI&lt;80 then 1 else 0;\n}\nelse{\n buySmi = if SMI crosses above AvgSMI and SMI &gt;Buyth and SMI&lt;60 then Smi* 0.996 else na;\n\n\n}\n\n\n\nsellSmi = if SMI crosses below AvgSMI and SMI &gt;60 and SMI&lt;80 then smi* 1.004 else na;\n\nSellSmi.setpaintingStrategy(PaintingStrategy.ARROW_down);\n\nsellSmi.setDefaultColor(color.pink);\nBuySmi.setpaintingStrategy(PaintingStrategy.ARROW_up);\n\nBuySmi.setDefaultColor(color.yellow);\nBuySMI.SetLineWeight(3);\nSellSMI.SetLineWeight(3);\n\n\n#AddCloud(-100, over_sold, Color.RED, Color.GREEN);\n#AddCloud(over_bought, 100, Color.GREEN, Color.RED);\n\n#####\ndef cldH = if SMI &gt;= overbought then SMI else overbought;\nAddCloud(cldH, overbought, Color.GREEN, Color.GREEN);\n\ndef cldL = if SMI &lt; oversold then SMI else oversold;\nAddCloud(cldL, oversold, Color.RED, Color.RED);\noverbought.SetDefaultColor(GetColor(7));\noversold.SetDefaultColor(GetColor(7));\nSMI.SetLineWeight(1);\nAvgSMI.SetLineWeight(3);\noverbought.SetStyle(Curve.SHORT_DASH);\noversold.SetStyle(Curve.SHORT_DASH);\n\n####\n\n\n####$$$$$$$$\n\n\ninput priceSlm = close;\n\ninput superFastLength = 8;\n\ninput fastLengthSlm = 13;\n\ninput slowLengthSlm = 21;\n\ninput displaceSlm = 0;\n\n\ninput averageTypeSlm = AverageType.EXPONENTIAL;\n\ndef mov_avg8 = MovingAverage(averageTypeSlm, priceSlm[-displaceSlm], superFastLength);\n\ndef mov_avg13 = MovingAverage(averageTypeSlm, priceSlm[-displaceSlm], fastLengthSlm);\n\ndef mov_avg21 = MovingAverage(averageTypeSlm, priceSlm[-displaceSlm], slowLengthSlm);\n \n#moving averages\n\ndef Superfast = mov_avg8;\n\ndef Fast = mov_avg13;\n\ndef Slow = mov_avg21;\n\n\ndef buy = mov_avg8 &gt; mov_avg13 and mov_avg13 &gt; mov_avg21 and low &gt; mov_avg8;\n\ndef stopbuy = mov_avg8 &lt;= mov_avg13;\n\ndef buynow = !buy[1] and buy;\n\ndef buysignal = CompoundValue(1, if buynow and !stopbuy then 1 else if buysignal[1] == 1 and stopbuy then 0 else buysignal[1], 0);\n\n\ndef Buy_Signal = buysignal[1] == 0 and buysignal == 1;\n\ndef Momentum_Down = buysignal[1] == 1 and buysignal == 0;\n\n\ndef sell = mov_avg8 &lt; mov_avg13 and mov_avg13 &lt; mov_avg21 and high &lt; mov_avg8;\n\ndef stopsell = mov_avg8 &gt;= mov_avg13;\n\ndef sellnow = !sell[1] and sell;\n\ndef sellsignal = CompoundValue(1, if sellnow and !stopsell then 1 else if sellsignal[1] == 1 and stopsell then 0 else sellsignal[1], 0);\n\n\ndef Sell_Signal = sellsignal[1] == 0 and sellsignal;\n\ndef Momentum_Up = sellsignal[1] == 1 and sellsignal == 0;\n \n# when using this as a custom scan, change the word plot to def\n# then remove the \'#\' from in front of one of the \&quot;plot Scan\&quot; statements below\n########\n\ninput length = 20;\ninput priceHMA = close;\n\ndef HMA = MovingAverage(AverageType.HULL, priceHMA, length);\ndef HMA_Up =  HMA &gt; HMA[1];\ndef HMA_Down = ! HMA_Up;\n\n###############\n\n#def Colorbars1 = if buysignal == 1 then 1 else if sellsignal == 1 then 2 else if buysignal == 0 or sellsignal == 0 then 3 else 0;\n\n\n\nAvgSMI.DefineColor(\&quot;Buy\&quot;, Color.DARK_GREEN);\n\n\nAvgSMI.DefineColor(\&quot;Sell\&quot;, Color.RED);\n\nAvgSMI.DefineColor(\&quot;Neutral\&quot;, Color.PLUM);\n#RSI.DefineColor(\&quot;NeutralDown\&quot;, Color.orange);\nAvgSMI.DefineColor(\&quot;HullMA_up\&quot;, Color.BLUE);\n\nAvgSMI.DefineColor(\&quot;HullMA_down\&quot;, Color.ORANGE);\n\nAvgSMI.AssignValueColor(if buysignal and HMA_Up then AvgSMI.Color(\&quot;Buy\&quot;) else if buysignal and !HMA_Up then AvgSMI.Color(\&quot;HullMA_down\&quot;) else if sellsignal and HMA_Down  then AvgSMI.Color(\&quot;Sell\&quot;) else  if sellsignal and !HMA_Down  then AvgSMI.Color(\&quot;HullMA_up\&quot;) else  AvgSMI.Color(\&quot;neutral\&quot;));\n;#\n# if Momentum_Up then  RSI.color(\&quot;neutralUp\&quot;) else  RSI.color(\&quot;neutraldown\&quot;));\n\n\n\n\n\n####$$$$$$$$$$$$$$$$\n###############\n\n\n\n#plot UpSignal = if (buysignal and SMI crosses above AvgSMI-3 and SMI &lt;40) then SMI-3 else Double.NaN;\n\nplot UpSignal = if ((buysignal or Momentum_Up) and SMI crosses above AvgSMI ) then SMI - 3 else Double.NaN;\nplot DownSignal = if (sellsignal and SMI crosses below AvgSMI + 3 and SMI &gt; over_bought) then SMI + 3 else Double.NaN;\ninput showBreakoutSignals = yes;\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\n\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\n\n\n\n\n\n######$$$$\n\n\n#RSI\ninput overBoughtRsi = 75;\ninput overSoldRsi = 25;\ninput rsiLength = 14;\ninput rsiPrice = close;\ninput rsi_th = 42;\ndef rsi_val = reference RSI(length = rsiLength, price = rsiPrice );\nplot rsi_val_normalized = rsi_val - 50;\n####\n\n\n\nAddLabel(yes, \&quot;RSI = \&quot; + rsi_val , if rsi_val &gt; overBoughtRsi  then Color.RED else if rsi_val &lt; overSoldRsi then  Color.GREEN else Color.GRAY);\n##########\n#########################RSI\n\n\n\n\n\nrsi_val_normalized.DefineColor(\&quot;OverBought\&quot;, Color.LIGHT_RED);\nrsi_val_normalized.DefineColor(\&quot;Normal\&quot;, GetColor(7));\nrsi_val_normalized.DefineColor(\&quot;OverSold\&quot;, Color.LIGHT_GREEN);\nrsi_val_normalized.DefineColor(\&quot;Below50\&quot;, Color.CYAN);\nrsi_val_normalized.DefineColor(\&quot;Above50\&quot;, Color.PINK);\n\nrsi_val_normalized.AssignValueColor(if rsi_val &gt;= overBoughtRsi then rsi_val_normalized.Color(\&quot;OverBought\&quot;) else if rsi_val &lt;= overSoldRsi then rsi_val_normalized.Color(\&quot;OverSold\&quot;) else if (rsi_val &gt; overSoldRsi and rsi_val &lt; rsi_th) then rsi_val_normalized.Color(\&quot;Below50\&quot;) else if (rsi_val &lt; overBoughtRsi and rsi_val &gt; rsi_th) then rsi_val_normalized.Color(\&quot;Above50\&quot;) else  rsi_val_normalized.Color(\&quot;Normal\&quot;)) ;\n\n\n\n\n\n#########\ndef ImpVol = imp_volatility();\n\nAddLabel(yes, \&quot;iV= \&quot; + ImpVol, Color.GRAY);\n\n#trend reversal\ndef y = rsi_val ;\ninput riReversLength = 2;\ninput lookBack = 2;\n\n\ndef rsi_expAvg = ExpAverage(rsi_val, riReversLength);\n\n#trend reversal\ndef overBoughtReversal = if ((rsi_expAvg &gt; overBoughtRsi)within 2 bar) and  (rsi_expAvg crosses above rsi_val) then price else 0;# if (rsi_expAvg &gt; OverBought and  rsi_expAvg crosses above rsi_val  within 3 bar ) then 40 else 0;\ndef oversoldRevesal = if ((rsi_expAvg &lt; overSoldRsi)within 2 bar) and  (rsi_expAvg crosses below rsi_val within 2 bar) then price else 0;\n\n##############\n########!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n#vwap vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\n\n#####^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n#MACD\n\ninput fastLength = 12;\ninput slowLength = 26;\ninput MACDLength = 9;\ninput displace = 0;\ndef fastAvg = Sum(volume * price, fastLength) / Sum(volume, fastLength);\ndef slowAvg = Sum(volume * price, slowLength) / Sum(volume, slowLength);\ndef Value = fastAvg - slowAvg;\ndef Avg = ExpAverage(Value, MACDLength);\ndef MACD_Diff  = Value - Avg;\n#def ZeroLine = 0;\n\ninput def_cond = no;\ndef MACD_cond_logic = if (def_cond) then MACD_Diff &lt;= 0 else yes;\n\n\n#MACD Pivot reversal\n#input FilterLength=3;\n######################\n#def MACDV_Diff_expAvg = ExpAverage(MACD_Diff, FilterLength);\n#plot oversoldRevesalMACDV =if ((Diff_MACDV &lt; MacdZeroLine)within lookBack bar) and  ( Diff_MACDV crosses above   MACDV_Diff_expAvg within lookBack bar)and Diff_MACDV &gt; Diff_MACDV[1] then 1 else 0;# if (MACDV_Diff_expAvg &gt; OverBought and  MACDV_Diff_expAvg crosses above rsi_val  within 3 bar ) then 40 else 0;\n#plot overBoughtReversalMACDV = if ((Diff_MACDV &gt; MacdZeroLine)within lookBack bar) and  (MACDV_Diff_expAvg crosses above  Diff_MACDV  within lookBack bar)  and Diff_MACDV &lt; Diff_MACDV[1] and Diff_MACDV&gt;0 then 1 else 0;\n\n\n#trend Pivot reversal\ndef twoBarPivotMACD_Buy =  MACD_Diff &gt; MACD_Diff[1] and MACD_Diff[1] &gt; MACD_Diff[2] and MACD_Diff[2] &lt; MACD_Diff[3] and MACD_Diff[3] &lt; MACD_Diff [4];\ndef twoBarPivotMACD_Sell = MACD_Diff &lt; MACD_Diff[1] and MACD_Diff[1] &lt; MACD_Diff[2] and MACD_Diff[2] &gt; MACD_Diff[3] and MACD_Diff[3] &gt; MACD_Diff [4];\n###################\n\n\ndef uptrend = if price &gt; price[1] and price[1] &gt;= price[2] then 1 else 0;\n\n#####################################-----------------\n\n\n\ndef SMI_Buy_Signal = if  (AvgSMI crosses above overbought  within lookBack bar) and SMI &gt;  AvgSMI and (rsi_val &gt; overSoldRsi and rsi_val &lt; overBoughtRsi + 10 ) and (uptrend) then 1 else 0;\n\n\nplot buy2 = SMI_Buy_Signal;\n\n#def  buySvix_Signal = if ( MACD_cond_logic  and  EMA_condition and  oversoldRevesal  and buySvix &lt; Zeroline - 10 ) then 1 else 0;\n#plot buy3 = buySvix_Signal;\n\n\n\n\n\n\ndef SMI_Sell_Signal = if ( (SMI crosses below AvgSMI within lookBack bar) and (overBoughtReversal)) then 1 else 0;\n#def sellSignal2 = if ((rsi_val  &gt; overBoughtRsi within 3 bar) and (smi crosses below AvgSMI within 3 bar)) then 1 else 0;\n\n\nplot sell2 = SMI_Sell_Signal;\n\n#######\n\n#def FVE_buySignal = conVwapBuy and oversoldRevesal and pFVE_Bull  and MACD_cond_logic ;# and Diff &gt;= 0;\n#def sig_buy = pFVE_Bull and Diff &gt;= 0;\n#plot buy4 = FVE_buySignal ;\n\n\n#def FVE_sellSignal = overBoughtReversal and pFVE_Bear ;\n#plot sell4 = FVE_sellSignal;\nplot buy5 = twoBarPivotMACD_Buy and oversoldRevesal;\nplot sell5 = twoBarPivotMACD_Sell and overBoughtReversal;\n\n####\n#def buySignal2 = if (oversoldRevesal  and buythedip2 &lt; Zeroline ) then 1 else 0;\n\n#def buySignal3 = if ( oversoldRevesal  and buythedip3 &lt; Zeroline - 10 ) then 1 else 0;\n#plot buy3 = buySignal3;\ninput bubble = no;\nAddChartBubble(bubble and buy2 == 1, buy2, \&quot;B2SMI= \&quot; +  low[1] + \&quot; rsi \&quot; + rsi_val + \&quot; w \&quot; + vwap[1], Color.LIGHT_ORANGE, no);\n#AddChartBubble(buy3 == 1, buy3,  \&quot;B3Svix= \&quot; + price + \&quot; rsi \&quot; + rsi_val, Color.LIGHT_GRAY, no);\n#AddChartBubble(buy4 == 1, buy4,  \&quot;B4FVE= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.YELLOW, no);\nAddChartBubble(bubble and buy5 == 1, buy5,  \&quot;B5Macd= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.CYAN, no);\n\n#AddChartBubble(sell1 == 1, sell1, \&quot;S1STR= \&quot; + price + \&quot; rsi \&quot; + rsi_val, Color.LIGHT_RED, no);#Buy the Dip\n\nAddChartBubble(bubble and sell2 == 1, sell2, \&quot;S2SMI= \&quot; + price + \&quot; rsi \&quot; + rsi_val, Color.PINK, no);#Buy the Dip\n#AddChartBubble(sell4 == 1, sell4, \&quot;S4FVE= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.VIOLET, no);#Buy the Dip\nAddChartBubble(bubble and sell5 == 1, sell5, \&quot;S5Macd= \&quot; + price + \&quot; rsi \&quot; + rsi_val[lookBack], Color.BLUE, no);#Buy the Dip\n#AddChartBubble(oversoldRevesal , close, rsi_val, Color.blue, no);#Buy the Dip\n\ndef o = open;\ndef c = close;\ndef h = high;\ndef l = low;\n\nplot d1 = ((h - l) / o) * 100;\nplot d2 = ((h - l) / (c - o)) * 1;\nplot d = ((c - c[1]) / c[1]) * 100;\nd1.Hide();\nd2.Hide();\nd.Hide();\n\n\ninput vfiLength = 130;\ninput averageLength = 100;\ninput trendQualityLength = 63;\ninput maxStiffness = 7;\ninput marketIndex = \&quot;SPY\&quot;;\ninput weightForMoneyFlow = 1.0;\ninput weightForTradingAboveAverage = 1.0;\ninput weightForUptrend = 1.0;\ninput weightForTrendQuality = 1.0;\ninput weightForMarketDirection = 2.0;\ninput showLabel = No;\n\ndef vfi = reference VolumeFlowIndicator(length = vfiLength, \&quot;max volume cut off\&quot; = 2.5);\ndef sma = Average(close, averageLength);\ndef ema = ExpAverage(close(marketIndex), averageLength);\ndef stiffness = Sum(close &lt; sma, trendQualityLength);\n\ndef Score;\ndef MoneyFlow = vfi &gt; 0;\ndef TradingAboveAverage = close &gt; sma;\ndef Uptrend1 = sma &gt; sma[4];\ndef TrendQuality = stiffness &lt;= maxStiffness;\ndef MarketDirection = ema &gt;= ema[2];\n\nScore = weightForMoneyFlow * MoneyFlow + weightForTradingAboveAverage * TradingAboveAverage + weightForUptrend * uptrend + weightForTrendQuality * TrendQuality + weightForMarketDirection * MarketDirection;\n\n\nAddLabel(showLabel and MoneyFlow, \&quot;Money flow\&quot;, GetColor(2));\nAddLabel(showLabel and TradingAboveAverage, \&quot;Trading above average\&quot;, GetColor(3));\nAddLabel(showLabel and Uptrend1, \&quot;Uptrend\&quot;, GetColor(4));\nAddLabel(showLabel and TrendQuality, \&quot;Trend quality\&quot;, GetColor(5));\nAddLabel(showLabel and TrendQuality, \&quot;Trend quality\&quot;, GetColor(5));\nAddLabel(showLabel and MarketDirection, \&quot;Market direction\&quot;, GetColor(6));\nAddLabel(showLabel , \&quot;Market score \&quot; + Score, GetColor(7));&quot;,name=&quot;_7662dae8_fa6f_4a07_aa35_2ec04cb46236&quot;}){inputsMap:TreeMap8{^(&quot;price&quot;,&quot;CLOSE&quot;),^(&quot;priceSlm&quot;,&quot;CLOSE&quot;),^(&quot;rsiPrice&quot;,&quot;CLOSE&quot;),^(&quot;slowLengthSlm&quot;,19),^(&quot;superFastLength&quot;,@Integer0)},inputsMap=@TreeMap8,plots{0:{color=@CustomColor2},3:{hiding=&lt;T},4:{hiding=&lt;T},10:{hiding=&lt;T},11:{hiding=&lt;T},12:{hiding=&lt;T},13:{hiding=&lt;T}}})}),^(#%4.SubgraphId(&quot;Subgraph40&quot;),#%4.SubgraphStorableModel{height=143,storableIndicators.+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# RSI-Laguerre Self Adjusting With Fractal Energy Gaussian Price Filter\n# Mobius\n# V01.12.2016\n# Both Fractal Energy and RSI are plotted. RSI in cyan and FE in yellow. Look for trend exhaustion in the FE and a reversal of RSI or Price compression in FE and an RSI reversal.\n\ndeclare lower;\n\n#Inputs: \ninput nFE = 8;#hint nFE: length for Fractal Energy calculation. \ninput AlertOn = no;\ninput Glength  = 13;\ninput betaDev =  8;\ninput data = close;\n\ndef w = (2 * Double.Pi / Glength);\ndef beta = (1 - Cos(w)) / (Power(1.414, 2.0 / betaDev) - 1 );\ndef alpha = (-beta + Sqrt(beta * beta + 2 * beta));\ndef Go = Power(alpha, 4) * open + \n             4 * (1 – alpha) * Go[1] – 6 * Power( 1 - alpha, 2 ) * Go[2] + \n             4 * Power( 1 - alpha, 3 ) * Go[3] - Power( 1 - alpha, 4 ) * Go[4];\ndef Gh = Power(alpha, 4) * high + \n             4 * (1 – alpha) * Gh[1] – 6 * Power( 1 - alpha, 2 ) * Gh[2] + \n             4 * Power( 1 - alpha, 3 ) * Gh[3] - Power( 1 - alpha, 4 ) * Gh[4];\ndef Gl = Power(alpha, 4) * low + \n             4 * (1 – alpha) * Gl[1] – 6 * Power( 1 - alpha, 2 ) * Gl[2] + \n             4 * Power( 1 - alpha, 3 ) * Gl[3] - Power( 1 - alpha, 4 ) * Gl[4];\ndef Gc = Power(alpha, 4) * data + \n             4 * (1 – alpha) * Gc[1] – 6 * Power( 1 - alpha, 2 ) * Gc[2] + \n             4 * Power( 1 - alpha, 3 ) * Gc[3] - Power( 1 - alpha, 4 ) * Gc[4];\n# Variables:\ndef o;\ndef h;\ndef l;\ndef c;\ndef CU1;\ndef CU2;\ndef CU;\ndef CD1;\ndef CD2;\ndef CD;\ndef L0;\ndef L1;\ndef L2;\ndef L3;\nplot RSI;\nplot OS;\nplot OB;\nplot M;\n\n# Calculations\no = (Go + Gc[1]) / 2;\nh = Max(Gh, Gc[1]);\nl = Min(Gl, Gc[1]);\nc = (o + h + l + Gc) / 4;\nplot gamma = Log(Sum((Max(Gh, Gc[1]) - Min(Gl, Gc[1])), nFE) / \n        (Highest(Gh, nFE) - Lowest(Gl, nFE)))\n            / Log(nFE);\ngamma.SetDefaultColor(Color.YELLOW);\nL0 = (1 – gamma) * Gc + gamma * L0[1];\nL1 = -gamma * L0 + L0[1] + gamma * L1[1];\nL2 = -gamma * L1 + L1[1] + gamma * L2[1];\nL3 = -gamma * L2 + L2[1] + gamma * L3[1];\nif L0 &gt;= L1\nthen {\n    CU1 = L0 - L1;\n    CD1 = 0;\n} else {\n    CD1 = L1 - L0;\n    CU1 = 0;\n}\nif L1 &gt;= L2\nthen {\n    CU2 = CU1 + L1 - L2;\n    CD2 = CD1;\n} else {\n    CD2 = CD1 + L2 - L1;\n    CU2 = CU1;\n}\nif L2 &gt;= L3\nthen {\n    CU = CU2 + L2 - L3;\n    CD = CD2;\n} else {\n    CU = CU2;\n    CD = CD2 + L3 - L2;\n}\n\nRSI = if CU + CD &lt;&gt; 0 then CU / (CU + CD) else 0;\nRSI.SetDefaultColor(Color.CYAN);\nOS = if IsNaN(c) then Double.NaN else 0.2;\nOS.SetDefaultColor(Color.GRAY);\nOS.HideBubble();\nOS.HideTitle();\nOB = if IsNaN(c) then Double.NaN else 0.8;\nOB.SetDefaultColor(Color.GRAY);\nOB.HideBubble();\nOB.HideTitle();\nM = if IsNaN(c) then Double.NaN else 0.5;\nM.SetStyle(Curve.LONG_DASH);\nM.SetDefaultColor(Color.GRAY);\nM.HideBubble();\nM.HideTitle();\nplot FEh = if IsNaN(c) then Double.NaN else .618;\nFEh.SetStyle(Curve.SHORT_DASH);\nFEh.HideBubble();\nFEh.SetDefaultColor(Color.GRAY);\nFEh.HideTitle();\nplot FEl = if IsNaN(c) then Double.NaN else .382;\nFEl.SetStyle(Curve.SHORT_DASH);\nFEl.SetDefaultColor(Color.GRAY);\nFEl.HideBubble();\nFEl.HideTitle();\nAddCloud(0, OS, Color.RED, Color.GREEN);\nAddCloud(OB, 1, Color.GREEN, Color.RED);\nAlert(AlertOn and RSI crosses below .8, \&quot;\&quot;, Alert.BAR, Sound.Bell);\nAlert(AlertOn and RSI crosses above .2, \&quot;\&quot;, Alert.BAR, Sound.Bell);\n\n#######\n\n#SLIM ribon\ninput price = close;\n\ninput superfast_length =4;\n\ninput fast_length = 7;\n\ninput slow_length = 21;\n\ninput displace = 0;\n\n################\ninput averageTypeSuperfast = AverageType.simple;\ninput averageTypefast = AverageType.simple;\ninput averageTypeSlow = AverageType.EXPONENTIAL;\n\ninput  priceSupperFast = hlc3 ;\ninput priceFast  = close ;\ninput priceSlow  = close ;\n\ndef mov_avg_superFast = MovingAverage(averageTypeSuperfast, priceSupperFast[-displace], superfast_length);\ndef mov_avg_Fast = MovingAverage(averageTypefast, priceFast[-displace], fast_length);\ndef mov_avg_Slow = MovingAverage(averageTypeSlow, priceSlow[-displace], slow_length);\n\n#moving averages\ndef Superfast = mov_avg_superFast;\ndef Fast = mov_avg_Fast;\ndef Slow = mov_avg_Slow;\n\n################################\ndef buy = mov_avg_superFast &gt; mov_avg_Fast and mov_avg_Fast &gt; mov_avg_Slow and low &gt; mov_avg_superFast;\n\ndef stopbuy = mov_avg_superFast &lt;= mov_avg_Fast;\n\ndef buynow = !buy[1] and buy;\n\ndef buysignal = CompoundValue(1, if buynow and !stopbuy then 1 else if buysignal[1] == 1 and stopbuy then 0 else buysignal[1], 0);\n\n\ndef Buy_Signal = buysignal[1] == 0 and buysignal == 1;\n\ndef Momentum_Down = buysignal[1] == 1 and buysignal == 0;\n\n\ndef sell = mov_avg_superFast &lt; mov_avg_Fast and mov_avg_Fast &lt; mov_avg_Slow and high &lt; mov_avg_superFast;\n\ndef stopsell = mov_avg_superFast &gt;= mov_avg_Fast;\n\n\n\n###########################\ndef sellnow = !sell[1] and sell;\n\ndef sellsignal = CompoundValue(1, if sellnow and !stopsell then 1 else if sellsignal[1] == 1 and stopsell then 0 else sellsignal[1], 0);\n\n\ndef Sell_Signal = sellsignal[1] == 0 and sellsignal;\n\ndef Momentum_Up = sellsignal[1] == 1 and sellsignal == 0;\n \n# when using this as a custom scan, change the word plot to def\n# then remove the \'#\' from in front of one of the \&quot;plot Scan\&quot; statements below\ndef Colorbars = if buysignal == 1 then 1 else if sellsignal == 1 then -1 else if buysignal == 0 or sellsignal == 0 then 0 else 0;\n\n# use this first Scan plot for SLM Ribbon Momentum UP\n#plot Scan = if Colorbars == 1 then yes else no;\n\n# use this second Scan plot for SLM Ribbon Momentum DOWN\n#plot Scan = if Colorbars == -1 then yes else no;\n\ninput length = 19;\n\ndef HMA = MovingAverage(AverageType.HULL, price, length)[-displace];\ndef HMA_Up=  HMA &gt; HMA[1];\ndef HMA_Down =! HMA_UP;\n\n###############\n\n#def Colorbars1 = if buysignal == 1 then 1 else if sellsignal == 1 then 2 else if buysignal == 0 or sellsignal == 0 then 3 else 0;\n\n\n\nRSI.definecolor(\&quot;Buy\&quot;, color.dark_green);\n\n\nRSI.definecolor(\&quot;Sell\&quot;, color.red);\n\nRSI.DefineColor(\&quot;Neutral\&quot;, Color.PLUM);\n#RSI.DefineColor(\&quot;NeutralDown\&quot;, Color.orange);\nRSI.definecolor(\&quot;HullMA_up\&quot;, color.blue);\n\nRSI.definecolor(\&quot;HullMA_down\&quot;, color.orange);\n\nRSI.AssignValueColor(if buysignal and HMA_Up then RSI.color(\&quot;Buy\&quot;) else if buysignal and !HMA_Up then RSI.color(\&quot;HullMA_down\&quot;) else if sellsignal and HMA_Down  then RSI.color(\&quot;Sell\&quot;) else  if sellsignal and !HMA_Down  then RSI.color(\&quot;HullMA_up\&quot;) else  RSI.color(\&quot;neutral\&quot;));;#\n# if Momentum_Up then  RSI.color(\&quot;neutralUp\&quot;) else  RSI.color(\&quot;neutraldown\&quot;));\n\n\n\n\n####$$$$$$$$$$$$$$$$\n###############\n\n\n\n\nplot UpSignal = if (buysignal and RSI crosses above OS) then RSI-0.1 else Double.NaN;\nplot DownSignal = if (sellsignal and RSI crosses below OB) then RSI+0.1 else Double.NaN;\ninput showBreakoutSignals =yes;\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\n\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\n\n\n\n\n\n\n\n\n\n# End Code RSI_Laguerre Self Adjusting with Fractal Energy&quot;,name=&quot;_94f3daa4_27de_42e1_9e1c_1f3e66613988&quot;}){alerts:LocalAlertArray0,alerts=@LocalAlertArray0,inputsMap:TreeMap9{^(&quot;data&quot;,&quot;CLOSE&quot;),^(&quot;price&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap9,plots{0:{lineWeight=3},4:{color=@CustomColor3},7:{lineWeight=3},8:{lineWeight=3}}})}),^(#%4.SubgraphId(&quot;Subgraph42&quot;),#%4.SubgraphStorableModel{height=143,storableIndicators.+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;declare lower;\n\n################\n\n\n\n\n\n#######\n\n\n\n\n\n\ninput price = close;\n\ninput superfast_length = 8;\n\ninput fast_length = 13;\n\ninput slow_length = 21;\n\ninput displace = 0;\n\n################\ninput averageType = AverageType.EXPONENTIAL;\n\ndef mov_avg8 = MovingAverage(averageType, price[-displace], superfast_length);\n\ndef mov_avg13 = MovingAverage(averageType, price[-displace], fast_length);\n\ndef mov_avg21 = MovingAverage(averageType, price[-displace], slow_length);\n \n#moving averages\n\ndef Superfast = mov_avg8;\n\ndef Fast = mov_avg13;\n\ndef Slow = mov_avg21;\n\n\ndef buy = mov_avg8 &gt; mov_avg13 and mov_avg13 &gt; mov_avg21 and low &gt; mov_avg8;\n\ndef stopbuy = mov_avg8 &lt;= mov_avg13;\n\ndef buynow = !buy[1] and buy;\n\ndef buysignal = CompoundValue(1, if buynow and !stopbuy then 1 else if buysignal[1] == 1 and stopbuy then 0 else buysignal[1], 0);\n\n\ndef Buy_Signal = buysignal[1] == 0 and buysignal == 1;\n\ndef Momentum_Down = buysignal[1] == 1 and buysignal == 0;\n\n\ndef sell = mov_avg8 &lt; mov_avg13 and mov_avg13 &lt; mov_avg21 and high &lt; mov_avg8;\n\ndef stopsell = mov_avg8 &gt;= mov_avg13;\n\ndef sellnow = !sell[1] and sell;\n\ndef sellsignal = CompoundValue(1, if sellnow and !stopsell then 1 else if sellsignal[1] == 1 and stopsell then 0 else sellsignal[1], 0);\n\n\ndef Sell_Signal = sellsignal[1] == 0 and sellsignal;\n\ndef Momentum_Up = sellsignal[1] == 1 and sellsignal == 0;\n \n# when using this as a custom scan, change the word plot to def\n# then remove the \'#\' from in front of one of the \&quot;plot Scan\&quot; statements below\ndef Colorbars = if buysignal == 1 then 1 else if sellsignal == 1 then -1 else if buysignal == 0 or sellsignal == 0 then 0 else 0;\n\n# use this first Scan plot for SLM Ribbon Momentum UP\n#plot Scan = if Colorbars == 1 then yes else no;\n\n# use this second Scan plot for SLM Ribbon Momentum DOWN\n#plot Scan = if Colorbars == -1 then yes else no;\n\n\n\ninput length = 14;\n\ndef MaxBound = HighestWeighted(high, length, LinearRegressionSlope(price = high, length = length));\ndef MinBound = LowestWeighted(low, length, LinearRegressionSlope(price = low, length = length));\ndef diff = MaxBound - MinBound;\n\nplot PROSC = if diff != 0 then 100 * (close - MinBound) / diff else 0;\nplot OverBought = 75;\nplot OverSold = 25;\nplot z =50;\nz.SetDefaultColor(color.gray);\n\nPROSC.SetDefaultColor(GetColor(8));\nOverBought.SetDefaultColor(GetColor(5));\nOverSold.SetDefaultColor(GetColor(5));\n\n\n###############\n\ndef Colorbars1 = if buysignal ==1 then 1 else if sellsignal ==1 then 2 else if buysignal ==0 or sellsignal==0 then 3 else 0;\n\n\n\nPROSC.definecolor(\&quot;Buy_Signal_Bars\&quot;, color.dark_green);\n\nPROSC.definecolor(\&quot;Sell_Signal_Bars\&quot;, color.red);\n\nPROSC.definecolor(\&quot;Neutral\&quot;, color.plum);\n\nPROSC.AssignValueColor(if Colorbars1 ==1 then PROSC.color(\&quot;buy_signal_bars\&quot;) else if colorbars1 ==2 then PROSC.color(\&quot;Sell_Signal_bars\&quot;) else  PROSC.color(\&quot;neutral\&quot;));\nPROSC.setlineWeight(2);\nOverBought.hide();\nOverSold.hide();\n\n\n\n\n\nAddCloud(0, OverSold, Color.RED, Color.light_green);\nAddCloud(OverBought, 100, Color.Green, Color.light_red);\n\n\nplot UpSignal = if (buysignal and PROSC crosses above OverSold) then OverSold else Double.NaN;\nplot DownSignal = if (sellsignal and PROSC crosses below OverBought) then OverBought else Double.NaN;\nplot DownSignal2 = if (( Momentum_Down or sellsignal) and PROSC  crosses below OverSold) then OverSold else Double.NaN;\n\nplot UpSignal2 = if ( Momentum_Up and PROSC&gt;= overbought) then overbought else Double.NaN;\ninput showBreakoutSignals =yes;\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\n\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\nUpSignal2.SetDefaultColor(Color.plum);\nUpSignal2.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\n\nDownSignal2.SetDefaultColor(Color.plum);\nDownSignal2.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\n\n\n\n&quot;,name=&quot;_bc0d152e_88dc_44b4_99a7_78acd8502e84&quot;}){inputsMap:TreeMap10{^(&quot;price&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap10,plots{3:{color=@CustomColor4,lineStyle=3}}})}),^(#%4.SubgraphId(&quot;Subgraph62&quot;),#%4.SubgraphStorableModel{height=107,storableIndicators.+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;declare lower;\n\ninput fastLength = 23;\ninput slowLength = 50;\ninput KPeriod = 10;\ninput DPeriod = 3;\ninput over_bought = 75;\ninput over_sold = 25;\ninput averageType = AverageType.EXPONENTIAL;\ndef price1= open;\ninput rsi_th=42;\ndef length1 =22;\n\ndef macdRsi =   reference MomentumSMA();\n# ((low - Highest(price1[1], length1)) / Highest(price1[1], length1)) * 100;\n#((price1 - Lowest(low[1], length1)) / (Highest(high[1], length1) - Lowest(low[1], length1)));\n#reference RSI(length = 14, price = close );\ndef fastK1rsi = FastKCustom(macdRsi, KPeriod);\ndef fastD1Rsi = MovingAverage(averageType, fastK1rsi, DPeriod);\ndef fastK2rsi = FastKCustom(fastD1Rsi, KPeriod);\n#plot RSIm = fastD1Rsi;#MovingAverage(averageType, fastK2rsi, DPeriod);\n\ninput priceSch =close;\n\ndef macd = MovingAverage(averageType, priceSch, fastLength) - MovingAverage(averageType, priceSch, slowLength);\ndef fastK1 = FastKCustom(macd, KPeriod);\ndef fastD1 = MovingAverage(averageType, fastK1, DPeriod);\ndef fastK2 = FastKCustom(fastD1, KPeriod);\nplot STC = MovingAverage(averageType, fastK2, DPeriod);\n\nplot OverBought = over_bought;\nplot OverSold = over_sold;\n\nSTC.SetDefaultColor(GetColor(8));\nOverBought.SetDefaultColor(GetColor(7));\nOverSold.SetDefaultColor(GetColor(7));\ndef cldH= if STC &gt; OverBought then STC else OverBought;\nAddCloud(cldH,OverBought, Color.Green, Color.Green);\n\ndef cldL= if STC &lt; OverSold then STC else OverSold;\nAddCloud(cldL,OverSold, Color.RED, Color.RED);\nSTC.setlineWeight(3);\nOverBought.setStyle(curve.short_dash);\noversold.setStyle(curve.short_dash);\n####$$$$$$$$\n\n\ninput priceSlm = close;\n\ninput superFastLength = 8;\n\ninput fastLengthSlm = 13;\n\ninput slowLengthSlm = 21;\n\ninput displace = 0;\n\n\ninput averageTypeSlm = AverageType.EXPONENTIAL;\n\ndef mov_avg8 = MovingAverage(averageTypeSlm, priceSlm[-displace], superFastLength);\n\ndef mov_avg13 = MovingAverage(averageTypeSlm, priceSlm[-displace], fastLengthSlm);\n\ndef mov_avg21 = MovingAverage(averageTypeSlm, priceSlm[-displace], slowLengthSlm);\n \n#moving averages\n\ndef Superfast = mov_avg8;\n\ndef Fast = mov_avg13;\n\ndef Slow = mov_avg21;\n\n\ndef buy = mov_avg8 &gt; mov_avg13 and mov_avg13 &gt; mov_avg21 and low &gt; mov_avg8;\n\ndef stopbuy = mov_avg8 &lt;= mov_avg13;\n\ndef buynow = !buy[1] and buy;\n\ndef buysignal = CompoundValue(1, if buynow and !stopbuy then 1 else if buysignal[1] == 1 and stopbuy then 0 else buysignal[1], 0);\n\n\ndef Buy_Signal = buysignal[1] == 0 and buysignal == 1;\n\ndef Momentum_Down = buysignal[1] == 1 and buysignal == 0;\n\n\ndef sell = mov_avg8 &lt; mov_avg13 and mov_avg13 &lt; mov_avg21 and high &lt; mov_avg8;\n\ndef stopsell = mov_avg8 &gt;= mov_avg13;\n\ndef sellnow = !sell[1] and sell;\n\ndef sellsignal = CompoundValue(1, if sellnow and !stopsell then 1 else if sellsignal[1] == 1 and stopsell then 0 else sellsignal[1], 0);\n\n\ndef Sell_Signal = sellsignal[1] == 0 and sellsignal;\n\ndef Momentum_Up = sellsignal[1] == 1 and sellsignal == 0;\n \n# when using this as a custom scan, change the word plot to def\n# then remove the \'#\' from in front of one of the \&quot;plot Scan\&quot; statements below\ndef Colorbars = if buysignal == 1 then 1 else if sellsignal == 1 then -1 else if buysignal == 0 or sellsignal == 0 then 0 else 0;\n\n# use this first Scan plot for SLM Ribbon Momentum UP\n#plot Scan = if Colorbars == 1 then yes else no;\n\n# use this second Scan plot for SLM Ribbon Momentum DOWN\n#plot Scan = if Colorbars == -1 then yes else no;\n\n\n\n\n\n\n###############\n\ndef Colorbars1 = if buysignal == 1 then 1 else if sellsignal == 1 then 2 else if buysignal == 0 or sellsignal == 0 then 3 else 0;\n\n\n\nSTC.definecolor(\&quot;Buy_Signal_Bars\&quot;, color.dark_green);\n\nSTC.definecolor(\&quot;Sell_Signal_Bars\&quot;, color.red);\n\nSTC.definecolor(\&quot;NeutralUp\&quot;, color.plum);\n\nSTC.definecolor(\&quot;NeutralDown\&quot;, color.orange);\n\nSTC.AssignValueColor(if Colorbars1 ==1 then STC.color(\&quot;buy_signal_bars\&quot;) else if colorbars1 ==2 then STC.color(\&quot;Sell_Signal_bars\&quot;) else if Momentum_Up then  STC.color(\&quot;neutralUp\&quot;) else STC.color(\&quot;neutralDown\&quot;) );\n\n\nplot UpSignal = if (buysignal and STC crosses above over_sold) then STC else Double.NaN;\nplot DownSignal = if (sellsignal and STC crosses below over_bought) then STC else Double.NaN;\ninput showBreakoutSignals =yes;\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\n\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\n\n\n\n\n\n\n\n\n\n\n######$$$$\n\n#########################RSI\n\n\ninput length = 14;\ninput over_BoughtRsi = 70;\ninput over_SoldRSI = 30;\ninput priceRsi = close;\ninput priceRsi2 = vwap;\n\n\n\ninput averageTypeRSI = AverageType.WILDERS;\ninput averageTypeRSI2 = AverageType.simple;\n#input showBreakoutSignals = no;\n\ninput showlable = yes;\n\ndef NetChgAvg = MovingAverage(averageTypeRSI, priceRsi - priceRsi[1], length);\ndef TotChgAvg = MovingAverage(averageTypeRSI, AbsValue(priceRsi - priceRsi[1]), length);\ndef ChgRatio = if TotChgAvg != 0 then NetChgAvg / TotChgAvg else 0;\n\nplot RSI = 50 * (ChgRatio + 1);\n\n\ndef NetChgAvg2 = MovingAverage(averageTypeRSI2, priceRsi2 - priceRsi2[1], length+5);\ndef TotChgAvg2 = MovingAverage(averageTypeRSI2, AbsValue(priceRsi2 - priceRsi2[1]), length+5);\ndef ChgRatio2= if TotChgAvg2 != 0 then NetChgAvg2 / TotChgAvg2 else 0;\n\nplot RSI2 = 50 * (ChgRatio2 + 1);\n\n\n\n\n\n\nplot OverSoldR = over_SoldRSI;\nplot OverBoughtR = over_BoughtRsi;\n#plot UpSignal = if RSI crosses above OverSold then OverSold else Double.NaN;\n#plot DownSignal = if RSI crosses below OverBought then OverBought else Double.NaN;\nplot MID = 50;\n\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\nRSI.DefineColor(\&quot;OverBought\&quot;, Color.LIGHT_RED);\nRSI.DefineColor(\&quot;Normal\&quot;, GetColor(7));\nRSI.DefineColor(\&quot;OverSold\&quot;, Color.LIGHT_GREEN);\nRSI.DefineColor(\&quot;Below50\&quot;, Color.CYAN);\nRSI.DefineColor(\&quot;Above50\&quot;, Color.PINK);\n\nRSI.AssignValueColor(if RSI &gt;= over_Bought then RSI.Color(\&quot;OverBought\&quot;) else if RSI &lt;= over_Sold then RSI.Color(\&quot;OverSold\&quot;) else if (RSI &gt; over_Sold and RSI &lt; rsi_th) then RSI.Color(\&quot;Below50\&quot;) else if (RSI &lt; over_Bought and RSI &gt;rsi_th) then RSI.Color(\&quot;Above50\&quot;) else  RSI.Color(\&quot;Normal\&quot;)) ;\nOverSoldR.SetDefaultColor(GetColor(8));\nOverBoughtR.SetDefaultColor(GetColor(8));\n#UpSignal.SetDefaultColor(Color.UPTICK);\n#UpSignal.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\n#DownSignal.SetDefaultColor(Color.DOWNTICK);\n#DownSignal.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\nOverSoldR.hide();\nOverBoughtR.hide();\nmid.hide();\n\nAddLabel(showlable, \&quot;RSI = \&quot; + RSI , if RSI &gt; over_Bought  then Color.RED else if RSI &lt; over_Sold then  Color.GREEN else Color.GRAY);\ndef cldRSIL= if RSI &lt; OverSoldR then RSI else OverSoldR;\nAddCloud(cldRSIL,OverSoldR,  Color.Green, Color.Green);\n\ndef cldRsiH= if RSI &gt; OverBought then RSI else OverBoughtR;\nAddCloud(cldRsiH,OverBoughtR,Color.RED, Color.RED);\n\n\n\ndef ImpVol = imp_volatility();\n\nAddLabel(showlable, \&quot;iV= \&quot; + ImpVol, Color.GRAY);\nMID.DefineColor(\&quot;Mid\&quot;, Color.GREEN);\n\n\n## momentum\n\ndef CloseOpenDiff = if close &gt; open then close - open else 0;\ndef OpenCloseDiff = if close &lt; open then open - close else 0;\ndef avgCloseOpen = Average(CloseOpenDiff, length);\ndef avgOpenClose = Average(OpenCloseDiff, length);\n\n#plot IMI = avgCloseOpen / (avgCloseOpen + avgOpenClose) * 100;\n#IMI.SetDefaultColor(GetColor(8));\n##############################\n\n\n\n#\n# TD Ameritrade IP Company, Inc. (c) 2018-2020\n#\n\n\n\ninput vfiLength = 130;\ninput averageLength = 100;\ninput trendQualityLength = 63;\ninput maxStiffness = 7;\ninput marketIndex = \&quot;SPY\&quot;;\ninput weightForMoneyFlow = 1.0;\ninput weightForTradingAboveAverage = 1.0;\ninput weightForUptrend = 1.0;\ninput weightForTrendQuality = 1.0;\ninput weightForMarketDirection = 2.0;\ninput showLabel = No;\n\ndef vfi = reference VolumeFlowIndicator(length = vfiLength, \&quot;max volume cut off\&quot; = 2.5);\ndef sma = Average(close, averageLength);\ndef ema = ExpAverage(close(marketIndex), averageLength);\ndef stiffness = Sum(close &lt; sma, trendQualityLength);\n\ndef Score;\ndef MoneyFlow = vfi &gt; 0;\ndef TradingAboveAverage = close &gt; sma;\ndef Uptrend = sma &gt; sma[4];\ndef TrendQuality = stiffness &lt;= maxStiffness;\ndef MarketDirection = ema &gt;= ema[2];\n\nScore = weightForMoneyFlow * MoneyFlow + weightForTradingAboveAverage * TradingAboveAverage + weightForUptrend * Uptrend + weightForTrendQuality * TrendQuality + weightForMarketDirection * MarketDirection;\n\n\nAddLabel(showLabel and MoneyFlow, \&quot;Money flow\&quot;, GetColor(2));\nAddLabel(showLabel and TradingAboveAverage, \&quot;Trading above average\&quot;, GetColor(3));\nAddLabel(showLabel and Uptrend, \&quot;Uptrend\&quot;, GetColor(4));\nAddLabel(showLabel and TrendQuality, \&quot;Trend quality\&quot;,GetColor(5));\nAddLabel(showLabel and TrendQuality, \&quot;Trend quality\&quot;,GetColor(5));\nAddLabel(showLabel and MarketDirection, \&quot;Market direction\&quot;,GetColor(6));\nAddLabel(showLabel , \&quot;Market score \&quot;+ score,GetColor(7));&quot;,name=&quot;_ef7ee43b_ddba_4881_809e_96703a28d1ce&quot;}){hidden=&lt;T,inputsMap:TreeMap11{^(&quot;averageType&quot;,&quot;HULL&quot;),^(&quot;priceSlm&quot;,&quot;CLOSE&quot;),^(&quot;showLabel&quot;,&lt;T)},inputsMap=@TreeMap11})}),^(#%4.SubgraphId(&quot;Subgraph64&quot;),#%4.SubgraphStorableModel{height=80,storableIndicators.+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;#Follow @KRose_TDA on twitter for updates to this and other scripts\n#this script provides 2 moving averages of the study chosen\n#default study in OnBalanceVolume Volume\ndeclare lower;\n#place the study desired after reference in the line below you must include the brackets \&quot;()\&quot;\n#Initial study is OnBalanceVolume\ndef tFrame = GetAggregationPeriod();\ninput timeFrame = {default DAY, WEEK, MONTH};\n\n\n\n\n# Variables:\n\n\n#AddLabel(useAutoAggegate, if testTimeFrames  then \&quot;Time Frames Are Correct\&quot; else \&quot;Time Frames Are \n\n\ninput nDevUp = 2.0;\ninput nDevDn = -2.0;\n\n\n\n\n#plot vwap = reference VWAP( AGG);\n#######\n\n\n\ndef yyyyMmDd = GetYYYYMMDD();\ndef periodIndx;\nswitch (timeFrame) {\ncase DAY:\n    periodIndx = yyyyMmDd;\ncase WEEK:\n    periodIndx = Floor((DaysFromDate(First(yyyyMmDd)) + GetDayOfWeek(First(yyyyMmDd))) / 7);\ncase MONTH:\n    periodIndx = RoundDown(yyyyMmDd / 100, 0);\n}\ndef isPeriodRolled = CompoundValue(1, periodIndx != periodIndx[1], yes);\n\ndef volumeSum;\ndef volumeVwapSum;\ndef volumeVwap2Sum;\n\nif (isPeriodRolled) {\n    volumeSum = volume;\n    volumeVwapSum = volume * vwap;\n    volumeVwap2Sum = volume * Sqr(vwap);\n} else {\n    volumeSum = CompoundValue(1, volumeSum[1] + volume, volume);\n    volumeVwapSum = CompoundValue(1, volumeVwapSum[1] + volume * vwap, volume * vwap);\n    volumeVwap2Sum = CompoundValue(1, volumeVwap2Sum[1] + volume * Sqr(vwap), volume * Sqr(vwap));\n}\ndef price = volumeVwapSum / volumeSum;\nplot deviation = Sqrt(Max(volumeVwap2Sum / volumeSum - Sqr(price), 0));\n\ndef VWAP = price;\ndef UpperBand = price + nDevUp * deviation;\ndef LowerBand = price + nDevDn * deviation;\ndef UpperBand2 = price + (1+nDevUp) * deviation;\ndef LowerBand2 = price +(-1+ nDevDn) * deviation;\n\n##HMA\ninput hmaLength = 19;\ninput devSupport =1.3;\n\ndef HMA = MovingAverage(AverageType.HULL, price, hmaLength);\ndef HMA_Up=  HMA &gt; HMA[1];\ndef HMA_Down =! HMA_UP;\nplot dev2= (nDevUp) * deviation;\n\nplot diff = if dev2&gt; dev2[2] and HMA_Up and close&gt; VWAP+ devSupport* deviation then 2 else  0;\n\n\nplot diff2= if dev2&gt; dev2[1]*1.01  then 1 else  if dev2&lt;= dev2[1]*1.01 and  dev2&gt;= dev2[1]*0.99 then 0 else -1;\n\n\n\n\ndiff.SetDefaultColor(GetColor(8));\ndiff2.SetDefaultColor(GetColor(9));\n\n\n\n\n\n\n&quot;,name=&quot;_ef0bdfb2_aba3_459c_81fc_6cca80a3acd7&quot;}){hidden=&lt;T,plots{0:{hiding=&lt;T},1:{color=@CustomColor1,hiding=&lt;T},3:{hiding=&lt;T}}})}),^(#%4.SubgraphId(&quot;Subgraph66&quot;),#%4.SubgraphStorableModel{height=142,storableIndicators.+(!%5.CompiledStudy.resolveStudy(@ScriptEssence1){inputsMap:TreeMap12{^(&quot;price&quot;,@FundamentalType0)},inputsMap=@TreeMap12})})}}" DEFAULT_TYPE="DASHBOARD" ORDER_ENTRY_EXPANDED="false" ORDER_ENTRY_PINNED_PROPERTY="false" ROW_COUNT="1" SHARED_USER_SCRIPTS="@v6@owner{chartAggregationPeriods:ChartAggregationPeriodArray0,chartAggregationPeriods=@ChartAggregationPeriodArray0}#java.util.HashMap{^(&quot;_60475667_d5a0_4a24_8038_b84ac1548626&quot;,&quot;TheoProjectionPivots&quot;),^(&quot;_f59c642e_bc17_46b6_b151_447e2c413c14&quot;,&quot;rsiLaguerreTime&quot;)}" SYMBOL="DCTH" SYMBOL_GROUP="2" VERTICAL="false" VISIBLE="true" WEIGHT="3.0"/>
            <DASHBOARD SYMBOL="MESA" SYMBOL_GROUP="2" VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <LEVEL_II SYMBOL="OCGN" SYMBOL_GROUP="2" VERTICAL="false" VISIBLE="false" WEIGHT="1.0">
              <SORTING COLUMN="BID" ORDER="-1"/>
              <SORTING1 COLUMN="ASK" ORDER="1"/>
            </LEVEL_II>
            <LIVE_NEWS SYMBOL="DCTH" SYMBOL_GROUP="2" VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <PHASE_SCORES VERTICAL="false" VISIBLE="false" WEIGHT="2.0"/>
            <TIME_SALES VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <TRADE CONFIGURATION_NAME="SINGLE" ORDER_RULES_SET="STOCK" ORDER_TYPE="LIMIT" OS_AUTO="false" OS_EXPANDED="true" OS_TIF="DAY" QTY="100.0" QTY_STEP="1.0" TEMPLATE="SINGLE" TRADE_BUTTONS="BUY_MKT;SELL_MKT;MULTI_CANCEL;REVERSE;FLAT;SECOND_LINE;QUANTITY;AUTO_SEND;ORDER_SETUP" VISIBLE="false">
              <OCO_STOP>
                <TRG_0 TRG_ENBL="true" TRG_LINK="ASK_BID" TRG_OFFSET_MODE="TICK" TRG_OT="STOP" TRG_SETUP="10.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AA="10.0" AAL="10.0" AAP="10.0" AAPL="10.0" ABG="10.0" ABML="10.0" ACER="10.0" ADBE="10.0" ADMP="10.0" AEG="10.0" AEHL="10.0" AFI="10.0" AJRD="10.0" AKU="10.0" ALEC="10.0" AMC="10.0" AMCR="10.0" AMD="10.0" AMRS="10.0" AMTX="10.0" AMZN="10.0" ANIX="10.0" ANPC="10.0" ANTE="10.0" AP="10.0" APOP="10.0" APTO="10.0" AR="10.0" AREC="10.0" ARES="10.0" ARLO="10.0" ASLEW="10.0" ATHM="10.0" ATIF="10.0" ATNF="10.0" AUY="10.0" AVCO="10.0" AXL="10.0" AZN="10.0" AZRX="10.0" BA="10.0" BABA="10.0" BBBY="10.0" BBD="10.0" BBDC="10.0" BFT="10.0" BILI="10.0" BLIN="10.0" BMY="10.0" BOX="10.0" BP="10.0" BRQS="10.0" BSGM="10.0" BURL="10.0" BWAY="10.0" BXRX="10.0" BYFC="10.0" CAKE="10.0" CAL="10.0" CCI="10.0" CCIV="10.0" CCJ="10.0" CEQPP="10.0" CHNG="10.0" CHX="10.0" CIDM="10.0" CIIC="10.0" CLBS="10.0" CLDR="10.0" CLEU="10.0" CLSN="10.0" CLVS="10.0" CNNE="10.0" COHN="10.0" COMP="10.0" CPRX="10.0" CRBP="10.0" CRTD="10.0" CSCO="10.0" CTIC="10.0" CUB="10.0" CVX="10.0" DCTH="10.0" DHT="10.0" DIS="10.0" DISCK="10.0" DNN="10.0" DOX="10.0" DPW="10.0" DS="10.0" DSKE="10.0" DTSS="10.0" EARS="10.0" EBS="10.0" EDTK="10.0" EMAN="10.0" ENPH="10.0" ETSY="10.0" EURN="10.0" EVRG="10.0" EW="10.0" EWA="10.0" EXEL="10.0" EYE="10.0" EYES="10.0" FAST="10.0" FB="10.0" FCAC="10.0" FLR="10.0" FLY="10.0" FPRX="10.0" FSLR="10.0" FSR="10.0" FUSE="10.0" FUV="10.0" GEL="10.0" GLOP="10.0" GME="10.0" GMER="10.0" GNCA="10.0" GOCO="10.0" GOED="10.0" HBI="10.0" HCHC="10.0" HENKY="10.0" HPE="10.0" HPQ="10.0" HPR="10.0" HTBX="10.0" HTHIY="10.0" HTZ="10.0" HUGE="10.0" HYLN="10.0" HZON="10.0" IDEX="10.0" IDXX="10.0" IGSB="10.0" IMTE="10.0" INFI="10.0" INFY="10.0" ING="10.0" INO="10.0" INPX="10.0" INTC="10.0" INTU="10.0" INUV="10.0" INVO="10.0" INVU="10.0" IWM="10.0" IZEA="10.0" JE="10.0" JENGQ="10.0" JFIN="10.0" JOB="10.0" K="10.0" KBR="10.0" KEYS="10.0" KMPH="10.0" KMX="10.0" KR="10.0" LAZR="10.0" LCI="10.0" LCTX="10.0" LEAF="10.0" LIVX="10.0" LKQ="10.0" LODE="10.0" LRTNF="10.0" LUV="10.0" MARA="10.0" MBT="10.0" MDII="10.0" MESA="10.0" METX="10.0" MFGP="10.0" MMDA1="10.0" MRIN="10.0" MSFT="10.0" MTEM="10.0" MU="10.0" MVIS="10.0" MX="10.0" MYO="10.0" MYSZ="10.0" NCLH="10.0" NDX="10.0" NEOS="10.0" NGD="10.0" NGL="10.0" NIO="10.0" NLOK="10.0" NLSN="10.0" NLSP="10.0" NLST="10.0" NNVC="10.0" NOK="10.0" NOV="10.0" NQ="10.0" NSLP="10.0" NTP="10.0" NUZE="10.0" NVDA="10.0" NXE="10.0" OCGN="10.0" OGEN="10.0" OGI="10.0" OHI="10.0" OI="10.0" OLO="10.0" OPEN="10.0" OPGN="10.0" ORCL="10.0" ORMP="10.0" OTIS="10.0" OVID="10.0" PAA="10.0" PAAS="10.0" PERI="10.0" PFF="10.0" PGX="10.0" PHM="10.0" PNC="10.0" POTX="10.0" PPG="10.0" PPL="10.0" PTE="10.0" QQQ="10.0" QSR="10.0" RAD="10.0" RAIL="10.0" RIBT="10.0" RKT="10.0" RMO="10.0" RP="10.0" RPAY="10.0" RRD="10.0" RSX="10.0" RUT="10.0" RVLV="10.0" RYCEY="10.0" SAVA="10.0" SAVE="10.0" SGLB="10.0" SID="10.0" SIFY="10.0" SINO="10.0" SINT="10.0" SIOX="10.0" SIRI="10.0" SITC="10.0" SIVR="10.0" SJI="10.0" SKLZ="10.0" SKT="10.0" SLDB="10.0" SLQT="10.0" SNAP="10.0" SNCA="10.0" SNOA="10.0" SOGO="10.0" SOS="10.0" SPCB="10.0" SPD="10.0" SPRT="10.0" SPX="10.0" SPY="10.0" SQ="10.0" STON="10.0" SUNW="10.0" SWI="10.0" SWK="10.0" T="10.0" TAP="10.0" TGTX="10.0" TH="10.0" THTX="10.0" TSIA="10.0" TSLA="10.0" TSLAX="10.0" TZA="10.0" U="10.0" UAL="10.0" UAMY="10.0" UEC="10.0" UIS="10.0" ULTA="10.0" USAC="10.0" USWS="10.0" UTZ="10.0" UUUU="10.0" UXIN="10.0" VALE="10.0" VEU="10.0" VIX="10.0" VJET="10.0" VSTM="10.0" VTRS="10.0" VVOS="10.0" VWO="10.0" WAFU="10.0" WETF="10.0" WKEY="10.0" WKHS="10.0" X="10.0" XELA="10.0" XERS="10.0" XL="10.0" XLP="10.0" XLU="10.0" XTLB="10.0" YGMZ="10.0" ZKIN="10.0" ZM="10.0"/>
                </TRG_0>
              </OCO_STOP>
              <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="1.0" TRG_TIF="DAY">
                <OFFSET_PER_SYMBOL AA="1.0" AAL="1.0" AAP="1.0" AAPL="1.0" ABG="1.0" ABML="1.0" ACER="1.0" ADBE="1.0" ADMP="1.0" AEG="1.0" AEHL="1.0" AFI="1.0" AJRD="1.0" AKU="1.0" ALEC="1.0" AMC="1.0" AMCR="1.0" AMD="1.0" AMRS="1.0" AMTX="1.0" AMZN="1.0" ANIX="1.0" ANPC="1.0" ANTE="1.0" AP="1.0" APOP="1.0" APTO="1.0" AR="1.0" AREC="1.0" ARES="1.0" ARLO="1.0" ASLEW="1.0" ATHM="1.0" ATIF="1.0" ATNF="1.0" AUY="1.0" AVCO="1.0" AXL="1.0" AZN="1.0" AZRX="1.0" BA="1.0" BABA="1.0" BBBY="1.0" BBD="1.0" BBDC="1.0" BFT="1.0" BILI="1.0" BLIN="1.0" BMY="1.0" BOX="1.0" BP="1.0" BRQS="1.0" BSGM="1.0" BURL="1.0" BWAY="1.0" BXRX="1.0" BYFC="1.0" CAKE="1.0" CAL="1.0" CCI="1.0" CCIV="1.0" CCJ="1.0" CEQPP="1.0" CHNG="1.0" CHX="1.0" CIDM="1.0" CIIC="1.0" CLBS="1.0" CLDR="1.0" CLEU="1.0" CLSN="1.0" CLVS="1.0" CNNE="1.0" COHN="1.0" COMP="1.0" CPRX="1.0" CRBP="1.0" CRTD="1.0" CSCO="1.0" CTIC="1.0" CUB="1.0" CVX="1.0" DCTH="1.0" DHT="1.0" DIS="1.0" DISCK="1.0" DNN="1.0" DOX="1.0" DPW="1.0" DS="1.0" DSKE="1.0" DTSS="1.0" EARS="1.0" EBS="1.0" EDTK="1.0" EMAN="1.0" ENPH="1.0" ETSY="1.0" EURN="1.0" EVRG="1.0" EW="1.0" EWA="1.0" EXEL="1.0" EYE="1.0" EYES="1.0" FAST="1.0" FB="1.0" FCAC="1.0" FLR="1.0" FLY="1.0" FPRX="1.0" FSLR="1.0" FSR="1.0" FUSE="1.0" FUV="1.0" GEL="1.0" GLOP="1.0" GME="1.0" GMER="1.0" GNCA="1.0" GOCO="1.0" GOED="1.0" HBI="1.0" HCHC="1.0" HENKY="1.0" HPE="1.0" HPQ="1.0" HPR="1.0" HTBX="1.0" HTHIY="1.0" HTZ="1.0" HUGE="1.0" HYLN="1.0" HZON="1.0" IDEX="1.0" IDXX="1.0" IGSB="1.0" IMTE="1.0" INFI="1.0" INFY="1.0" ING="1.0" INO="1.0" INPX="1.0" INTC="1.0" INTU="1.0" INUV="1.0" INVO="1.0" INVU="1.0" IWM="1.0" IZEA="1.0" JE="1.0" JENGQ="1.0" JFIN="1.0" JOB="1.0" K="1.0" KBR="1.0" KEYS="1.0" KMPH="1.0" KMX="1.0" KR="1.0" LAZR="1.0" LCI="1.0" LCTX="1.0" LEAF="1.0" LIVX="1.0" LKQ="1.0" LODE="1.0" LRTNF="1.0" LUV="1.0" MARA="1.0" MBT="1.0" MDII="1.0" MESA="1.0" METX="1.0" MFGP="1.0" MMDA1="1.0" MRIN="1.0" MSFT="1.0" MTEM="1.0" MU="1.0" MVIS="1.0" MX="1.0" MYO="1.0" MYSZ="1.0" NCLH="1.0" NDX="1.0" NEOS="1.0" NGD="1.0" NGL="1.0" NIO="1.0" NLOK="1.0" NLSN="1.0" NLSP="1.0" NLST="1.0" NNVC="1.0" NOK="1.0" NOV="1.0" NQ="1.0" NSLP="1.0" NTP="1.0" NUZE="1.0" NVDA="1.0" NXE="1.0" OCGN="1.0" OGEN="1.0" OGI="1.0" OHI="1.0" OI="1.0" OLO="1.0" OPEN="1.0" OPGN="1.0" ORCL="1.0" ORMP="1.0" OTIS="1.0" OVID="1.0" PAA="1.0" PAAS="1.0" PERI="1.0" PFF="1.0" PGX="1.0" PHM="1.0" PNC="1.0" POTX="1.0" PPG="1.0" PPL="1.0" PTE="1.0" QQQ="1.0" QSR="1.0" RAD="1.0" RAIL="1.0" RIBT="1.0" RKT="1.0" RMO="1.0" RP="1.0" RPAY="1.0" RRD="1.0" RSX="1.0" RUT="1.0" RVLV="1.0" RYCEY="1.0" SAVA="1.0" SAVE="1.0" SGLB="1.0" SID="1.0" SIFY="1.0" SINO="1.0" SINT="1.0" SIOX="1.0" SIRI="1.0" SITC="1.0" SIVR="1.0" SJI="1.0" SKLZ="1.0" SKT="1.0" SLDB="1.0" SLQT="1.0" SNAP="1.0" SNCA="1.0" SNOA="1.0" SOGO="1.0" SOS="1.0" SPCB="1.0" SPD="1.0" SPRT="1.0" SPX="1.0" SPY="1.0" SQ="1.0" STON="1.0" SUNW="1.0" SWI="1.0" SWK="1.0" T="1.0" TAP="1.0" TGTX="1.0" TH="1.0" THTX="1.0" TSIA="1.0" TSLA="1.0" TSLAX="1.0" TZA="1.0" U="1.0" UAL="1.0" UAMY="1.0" UEC="1.0" UIS="1.0" ULTA="1.0" USAC="1.0" USWS="1.0" UTZ="1.0" UUUU="1.0" UXIN="1.0" VALE="1.0" VEU="1.0" VIX="1.0" VJET="1.0" VSTM="1.0" VTRS="1.0" VVOS="1.0" VWO="1.0" WAFU="1.0" WETF="1.0" WKEY="1.0" WKHS="1.0" X="1.0" XELA="1.0" XERS="1.0" XL="1.0" XLP="1.0" XLU="1.0" XTLB="1.0" YGMZ="1.0" ZKIN="1.0" ZM="1.0"/>
              </TRG_0>
              <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-1.0" TRG_TIF="DAY">
                <OFFSET_PER_SYMBOL AA="-1.0" AAL="-1.0" AAP="-1.0" AAPL="-1.0" ABG="-1.0" ABML="-1.0" ACER="-1.0" ADBE="-1.0" ADMP="-1.0" AEG="-1.0" AEHL="-1.0" AFI="-1.0" AJRD="-1.0" AKU="-1.0" ALEC="-1.0" AMC="-1.0" AMCR="-1.0" AMD="-1.0" AMRS="-1.0" AMTX="-1.0" AMZN="-1.0" ANIX="-1.0" ANPC="-1.0" ANTE="-1.0" AP="-1.0" APOP="-1.0" APTO="-1.0" AR="-1.0" AREC="-1.0" ARES="-1.0" ARLO="-1.0" ASLEW="-1.0" ATHM="-1.0" ATIF="-1.0" ATNF="-1.0" AUY="-1.0" AVCO="-1.0" AXL="-1.0" AZN="-1.0" AZRX="-1.0" BA="-1.0" BABA="-1.0" BBBY="-1.0" BBD="-1.0" BBDC="-1.0" BFT="-1.0" BILI="-1.0" BLIN="-1.0" BMY="-1.0" BOX="-1.0" BP="-1.0" BRQS="-1.0" BSGM="-1.0" BURL="-1.0" BWAY="-1.0" BXRX="-1.0" BYFC="-1.0" CAKE="-1.0" CAL="-1.0" CCI="-1.0" CCIV="-1.0" CCJ="-1.0" CEQPP="-1.0" CHNG="-1.0" CHX="-1.0" CIDM="-1.0" CIIC="-1.0" CLBS="-1.0" CLDR="-1.0" CLEU="-1.0" CLSN="-1.0" CLVS="-1.0" CNNE="-1.0" COHN="-1.0" COMP="-1.0" CPRX="-1.0" CRBP="-1.0" CRTD="-1.0" CSCO="-1.0" CTIC="-1.0" CUB="-1.0" CVX="-1.0" DCTH="-1.0" DHT="-1.0" DIS="-1.0" DISCK="-1.0" DNN="-1.0" DOX="-1.0" DPW="-1.0" DS="-1.0" DSKE="-1.0" DTSS="-1.0" EARS="-1.0" EBS="-1.0" EDTK="-1.0" EMAN="-1.0" ENPH="-1.0" ETSY="-1.0" EURN="-1.0" EVRG="-1.0" EW="-1.0" EWA="-1.0" EXEL="-1.0" EYE="-1.0" EYES="-1.0" FAST="-1.0" FB="-1.0" FCAC="-1.0" FLR="-1.0" FLY="-1.0" FPRX="-1.0" FSLR="-1.0" FSR="-1.0" FUSE="-1.0" FUV="-1.0" GEL="-1.0" GLOP="-1.0" GME="-1.0" GMER="-1.0" GNCA="-1.0" GOCO="-1.0" GOED="-1.0" HBI="-1.0" HCHC="-1.0" HENKY="-1.0" HPE="-1.0" HPQ="-1.0" HPR="-1.0" HTBX="-1.0" HTHIY="-1.0" HTZ="-1.0" HUGE="-1.0" HYLN="-1.0" HZON="-1.0" IDEX="-1.0" IDXX="-1.0" IGSB="-1.0" IMTE="-1.0" INFI="-1.0" INFY="-1.0" ING="-1.0" INO="-1.0" INPX="-1.0" INTC="-1.0" INTU="-1.0" INUV="-1.0" INVO="-1.0" INVU="-1.0" IWM="-1.0" IZEA="-1.0" JE="-1.0" JENGQ="-1.0" JFIN="-1.0" JOB="-1.0" K="-1.0" KBR="-1.0" KEYS="-1.0" KMPH="-1.0" KMX="-1.0" KR="-1.0" LAZR="-1.0" LCI="-1.0" LCTX="-1.0" LEAF="-1.0" LIVX="-1.0" LKQ="-1.0" LODE="-1.0" LRTNF="-1.0" LUV="-1.0" MARA="-1.0" MBT="-1.0" MDII="-1.0" MESA="-1.0" METX="-1.0" MFGP="-1.0" MMDA1="-1.0" MRIN="-1.0" MSFT="-1.0" MTEM="-1.0" MU="-1.0" MVIS="-1.0" MX="-1.0" MYO="-1.0" MYSZ="-1.0" NCLH="-1.0" NDX="-1.0" NEOS="-1.0" NGD="-1.0" NGL="-1.0" NIO="-1.0" NLOK="-1.0" NLSN="-1.0" NLSP="-1.0" NLST="-1.0" NNVC="-1.0" NOK="-1.0" NOV="-1.0" NQ="-1.0" NSLP="-1.0" NTP="-1.0" NUZE="-1.0" NVDA="-1.0" NXE="-1.0" OCGN="-1.0" OGEN="-1.0" OGI="-1.0" OHI="-1.0" OI="-1.0" OLO="-1.0" OPEN="-1.0" OPGN="-1.0" ORCL="-1.0" ORMP="-1.0" OTIS="-1.0" OVID="-1.0" PAA="-1.0" PAAS="-1.0" PERI="-1.0" PFF="-1.0" PGX="-1.0" PHM="-1.0" PNC="-1.0" POTX="-1.0" PPG="-1.0" PPL="-1.0" PTE="-1.0" QQQ="-1.0" QSR="-1.0" RAD="-1.0" RAIL="-1.0" RIBT="-1.0" RKT="-1.0" RMO="-1.0" RP="-1.0" RPAY="-1.0" RRD="-1.0" RSX="-1.0" RUT="-1.0" RVLV="-1.0" RYCEY="-1.0" SAVA="-1.0" SAVE="-1.0" SGLB="-1.0" SID="-1.0" SIFY="-1.0" SINO="-1.0" SINT="-1.0" SIOX="-1.0" SIRI="-1.0" SITC="-1.0" SIVR="-1.0" SJI="-1.0" SKLZ="-1.0" SKT="-1.0" SLDB="-1.0" SLQT="-1.0" SNAP="-1.0" SNCA="-1.0" SNOA="-1.0" SOGO="-1.0" SOS="-1.0" SPCB="-1.0" SPD="-1.0" SPRT="-1.0" SPX="-1.0" SPY="-1.0" SQ="-1.0" STON="-1.0" SUNW="-1.0" SWI="-1.0" SWK="-1.0" T="-1.0" TAP="-1.0" TGTX="-1.0" TH="-1.0" THTX="-1.0" TSIA="-1.0" TSLA="-1.0" TSLAX="-1.0" TZA="-1.0" U="-1.0" UAL="-1.0" UAMY="-1.0" UEC="-1.0" UIS="-1.0" ULTA="-1.0" USAC="-1.0" USWS="-1.0" UTZ="-1.0" UUUU="-1.0" UXIN="-1.0" VALE="-1.0" VEU="-1.0" VIX="-1.0" VJET="-1.0" VSTM="-1.0" VTRS="-1.0" VVOS="-1.0" VWO="-1.0" WAFU="-1.0" WETF="-1.0" WKEY="-1.0" WKHS="-1.0" X="-1.0" XELA="-1.0" XERS="-1.0" XL="-1.0" XLP="-1.0" XLU="-1.0" XTLB="-1.0" YGMZ="-1.0" ZKIN="-1.0" ZM="-1.0"/>
              </TRG_1>
              <_2>
                <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="2.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AA="2.0" AAL="2.0" AAP="2.0" AAPL="2.0" ABG="2.0" ABML="2.0" ACER="2.0" ADBE="2.0" ADMP="2.0" AEG="2.0" AEHL="2.0" AFI="2.0" AJRD="2.0" AKU="2.0" ALEC="2.0" AMC="2.0" AMCR="2.0" AMD="2.0" AMRS="2.0" AMTX="2.0" AMZN="2.0" ANIX="2.0" ANPC="2.0" ANTE="2.0" AP="2.0" APOP="2.0" APTO="2.0" AR="2.0" AREC="2.0" ARES="2.0" ARLO="2.0" ASLEW="2.0" ATHM="2.0" ATIF="2.0" ATNF="2.0" AUY="2.0" AVCO="2.0" AXL="2.0" AZN="2.0" AZRX="2.0" BA="2.0" BABA="2.0" BBBY="2.0" BBD="2.0" BBDC="2.0" BFT="2.0" BILI="2.0" BLIN="2.0" BMY="2.0" BOX="2.0" BP="2.0" BRQS="2.0" BSGM="2.0" BURL="2.0" BWAY="2.0" BXRX="2.0" BYFC="2.0" CAKE="2.0" CAL="2.0" CCI="2.0" CCIV="2.0" CCJ="2.0" CEQPP="2.0" CHNG="2.0" CHX="2.0" CIDM="2.0" CIIC="2.0" CLBS="2.0" CLDR="2.0" CLEU="2.0" CLSN="2.0" CLVS="2.0" CNNE="2.0" COHN="2.0" COMP="2.0" CPRX="2.0" CRBP="2.0" CRTD="2.0" CSCO="2.0" CTIC="2.0" CUB="2.0" CVX="2.0" DCTH="2.0" DHT="2.0" DIS="2.0" DISCK="2.0" DNN="2.0" DOX="2.0" DPW="2.0" DS="2.0" DSKE="2.0" DTSS="2.0" EARS="2.0" EBS="2.0" EDTK="2.0" EMAN="2.0" ENPH="2.0" ETSY="2.0" EURN="2.0" EVRG="2.0" EW="2.0" EWA="2.0" EXEL="2.0" EYE="2.0" EYES="2.0" FAST="2.0" FB="2.0" FCAC="2.0" FLR="2.0" FLY="2.0" FPRX="2.0" FSLR="2.0" FSR="2.0" FUSE="2.0" FUV="2.0" GEL="2.0" GLOP="2.0" GME="2.0" GMER="2.0" GNCA="2.0" GOCO="2.0" GOED="2.0" HBI="2.0" HCHC="2.0" HENKY="2.0" HPE="2.0" HPQ="2.0" HPR="2.0" HTBX="2.0" HTHIY="2.0" HTZ="2.0" HUGE="2.0" HYLN="2.0" HZON="2.0" IDEX="2.0" IDXX="2.0" IGSB="2.0" IMTE="2.0" INFI="2.0" INFY="2.0" ING="2.0" INO="2.0" INPX="2.0" INTC="2.0" INTU="2.0" INUV="2.0" INVO="2.0" INVU="2.0" IWM="2.0" IZEA="2.0" JE="2.0" JENGQ="2.0" JFIN="2.0" JOB="2.0" K="2.0" KBR="2.0" KEYS="2.0" KMPH="2.0" KMX="2.0" KR="2.0" LAZR="2.0" LCI="2.0" LCTX="2.0" LEAF="2.0" LIVX="2.0" LKQ="2.0" LODE="2.0" LRTNF="2.0" LUV="2.0" MARA="2.0" MBT="2.0" MDII="2.0" MESA="2.0" METX="2.0" MFGP="2.0" MMDA1="2.0" MRIN="2.0" MSFT="2.0" MTEM="2.0" MU="2.0" MVIS="2.0" MX="2.0" MYO="2.0" MYSZ="2.0" NCLH="2.0" NDX="2.0" NEOS="2.0" NGD="2.0" NGL="2.0" NIO="2.0" NLOK="2.0" NLSN="2.0" NLSP="2.0" NLST="2.0" NNVC="2.0" NOK="2.0" NOV="2.0" NQ="2.0" NSLP="2.0" NTP="2.0" NUZE="2.0" NVDA="2.0" NXE="2.0" OCGN="2.0" OGEN="2.0" OGI="2.0" OHI="2.0" OI="2.0" OLO="2.0" OPEN="2.0" OPGN="2.0" ORCL="2.0" ORMP="2.0" OTIS="2.0" OVID="2.0" PAA="2.0" PAAS="2.0" PERI="2.0" PFF="2.0" PGX="2.0" PHM="2.0" PNC="2.0" POTX="2.0" PPG="2.0" PPL="2.0" PTE="2.0" QQQ="2.0" QSR="2.0" RAD="2.0" RAIL="2.0" RIBT="2.0" RKT="2.0" RMO="2.0" RP="2.0" RPAY="2.0" RRD="2.0" RSX="2.0" RUT="2.0" RVLV="2.0" RYCEY="2.0" SAVA="2.0" SAVE="2.0" SGLB="2.0" SID="2.0" SIFY="2.0" SINO="2.0" SINT="2.0" SIOX="2.0" SIRI="2.0" SITC="2.0" SIVR="2.0" SJI="2.0" SKLZ="2.0" SKT="2.0" SLDB="2.0" SLQT="2.0" SNAP="2.0" SNCA="2.0" SNOA="2.0" SOGO="2.0" SOS="2.0" SPCB="2.0" SPD="2.0" SPRT="2.0" SPX="2.0" SPY="2.0" SQ="2.0" STON="2.0" SUNW="2.0" SWI="2.0" SWK="2.0" T="2.0" TAP="2.0" TGTX="2.0" TH="2.0" THTX="2.0" TSIA="2.0" TSLA="2.0" TSLAX="2.0" TZA="2.0" U="2.0" UAL="2.0" UAMY="2.0" UEC="2.0" UIS="2.0" ULTA="2.0" USAC="2.0" USWS="2.0" UTZ="2.0" UUUU="2.0" UXIN="2.0" VALE="2.0" VEU="2.0" VIX="2.0" VJET="2.0" VSTM="2.0" VTRS="2.0" VVOS="2.0" VWO="2.0" WAFU="2.0" WETF="2.0" WKEY="2.0" WKHS="2.0" X="2.0" XELA="2.0" XERS="2.0" XL="2.0" XLP="2.0" XLU="2.0" XTLB="2.0" YGMZ="2.0" ZKIN="2.0" ZM="2.0"/>
                </TRG_0>
                <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-2.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AA="-2.0" AAL="-2.0" AAP="-2.0" AAPL="-2.0" ABG="-2.0" ABML="-2.0" ACER="-2.0" ADBE="-2.0" ADMP="-2.0" AEG="-2.0" AEHL="-2.0" AFI="-2.0" AJRD="-2.0" AKU="-2.0" ALEC="-2.0" AMC="-2.0" AMCR="-2.0" AMD="-2.0" AMRS="-2.0" AMTX="-2.0" AMZN="-2.0" ANIX="-2.0" ANPC="-2.0" ANTE="-2.0" AP="-2.0" APOP="-2.0" APTO="-2.0" AR="-2.0" AREC="-2.0" ARES="-2.0" ARLO="-2.0" ASLEW="-2.0" ATHM="-2.0" ATIF="-2.0" ATNF="-2.0" AUY="-2.0" AVCO="-2.0" AXL="-2.0" AZN="-2.0" AZRX="-2.0" BA="-2.0" BABA="-2.0" BBBY="-2.0" BBD="-2.0" BBDC="-2.0" BFT="-2.0" BILI="-2.0" BLIN="-2.0" BMY="-2.0" BOX="-2.0" BP="-2.0" BRQS="-2.0" BSGM="-2.0" BURL="-2.0" BWAY="-2.0" BXRX="-2.0" BYFC="-2.0" CAKE="-2.0" CAL="-2.0" CCI="-2.0" CCIV="-2.0" CCJ="-2.0" CEQPP="-2.0" CHNG="-2.0" CHX="-2.0" CIDM="-2.0" CIIC="-2.0" CLBS="-2.0" CLDR="-2.0" CLEU="-2.0" CLSN="-2.0" CLVS="-2.0" CNNE="-2.0" COHN="-2.0" COMP="-2.0" CPRX="-2.0" CRBP="-2.0" CRTD="-2.0" CSCO="-2.0" CTIC="-2.0" CUB="-2.0" CVX="-2.0" DCTH="-2.0" DHT="-2.0" DIS="-2.0" DISCK="-2.0" DNN="-2.0" DOX="-2.0" DPW="-2.0" DS="-2.0" DSKE="-2.0" DTSS="-2.0" EARS="-2.0" EBS="-2.0" EDTK="-2.0" EMAN="-2.0" ENPH="-2.0" ETSY="-2.0" EURN="-2.0" EVRG="-2.0" EW="-2.0" EWA="-2.0" EXEL="-2.0" EYE="-2.0" EYES="-2.0" FAST="-2.0" FB="-2.0" FCAC="-2.0" FLR="-2.0" FLY="-2.0" FPRX="-2.0" FSLR="-2.0" FSR="-2.0" FUSE="-2.0" FUV="-2.0" GEL="-2.0" GLOP="-2.0" GME="-2.0" GMER="-2.0" GNCA="-2.0" GOCO="-2.0" GOED="-2.0" HBI="-2.0" HCHC="-2.0" HENKY="-2.0" HPE="-2.0" HPQ="-2.0" HPR="-2.0" HTBX="-2.0" HTHIY="-2.0" HTZ="-2.0" HUGE="-2.0" HYLN="-2.0" HZON="-2.0" IDEX="-2.0" IDXX="-2.0" IGSB="-2.0" IMTE="-2.0" INFI="-2.0" INFY="-2.0" ING="-2.0" INO="-2.0" INPX="-2.0" INTC="-2.0" INTU="-2.0" INUV="-2.0" INVO="-2.0" INVU="-2.0" IWM="-2.0" IZEA="-2.0" JE="-2.0" JENGQ="-2.0" JFIN="-2.0" JOB="-2.0" K="-2.0" KBR="-2.0" KEYS="-2.0" KMPH="-2.0" KMX="-2.0" KR="-2.0" LAZR="-2.0" LCI="-2.0" LCTX="-2.0" LEAF="-2.0" LIVX="-2.0" LKQ="-2.0" LODE="-2.0" LRTNF="-2.0" LUV="-2.0" MARA="-2.0" MBT="-2.0" MDII="-2.0" MESA="-2.0" METX="-2.0" MFGP="-2.0" MMDA1="-2.0" MRIN="-2.0" MSFT="-2.0" MTEM="-2.0" MU="-2.0" MVIS="-2.0" MX="-2.0" MYO="-2.0" MYSZ="-2.0" NCLH="-2.0" NDX="-2.0" NEOS="-2.0" NGD="-2.0" NGL="-2.0" NIO="-2.0" NLOK="-2.0" NLSN="-2.0" NLSP="-2.0" NLST="-2.0" NNVC="-2.0" NOK="-2.0" NOV="-2.0" NQ="-2.0" NSLP="-2.0" NTP="-2.0" NUZE="-2.0" NVDA="-2.0" NXE="-2.0" OCGN="-2.0" OGEN="-2.0" OGI="-2.0" OHI="-2.0" OI="-2.0" OLO="-2.0" OPEN="-2.0" OPGN="-2.0" ORCL="-2.0" ORMP="-2.0" OTIS="-2.0" OVID="-2.0" PAA="-2.0" PAAS="-2.0" PERI="-2.0" PFF="-2.0" PGX="-2.0" PHM="-2.0" PNC="-2.0" POTX="-2.0" PPG="-2.0" PPL="-2.0" PTE="-2.0" QQQ="-2.0" QSR="-2.0" RAD="-2.0" RAIL="-2.0" RIBT="-2.0" RKT="-2.0" RMO="-2.0" RP="-2.0" RPAY="-2.0" RRD="-2.0" RSX="-2.0" RUT="-2.0" RVLV="-2.0" RYCEY="-2.0" SAVA="-2.0" SAVE="-2.0" SGLB="-2.0" SID="-2.0" SIFY="-2.0" SINO="-2.0" SINT="-2.0" SIOX="-2.0" SIRI="-2.0" SITC="-2.0" SIVR="-2.0" SJI="-2.0" SKLZ="-2.0" SKT="-2.0" SLDB="-2.0" SLQT="-2.0" SNAP="-2.0" SNCA="-2.0" SNOA="-2.0" SOGO="-2.0" SOS="-2.0" SPCB="-2.0" SPD="-2.0" SPRT="-2.0" SPX="-2.0" SPY="-2.0" SQ="-2.0" STON="-2.0" SUNW="-2.0" SWI="-2.0" SWK="-2.0" T="-2.0" TAP="-2.0" TGTX="-2.0" TH="-2.0" THTX="-2.0" TSIA="-2.0" TSLA="-2.0" TSLAX="-2.0" TZA="-2.0" U="-2.0" UAL="-2.0" UAMY="-2.0" UEC="-2.0" UIS="-2.0" ULTA="-2.0" USAC="-2.0" USWS="-2.0" UTZ="-2.0" UUUU="-2.0" UXIN="-2.0" VALE="-2.0" VEU="-2.0" VIX="-2.0" VJET="-2.0" VSTM="-2.0" VTRS="-2.0" VVOS="-2.0" VWO="-2.0" WAFU="-2.0" WETF="-2.0" WKEY="-2.0" WKHS="-2.0" X="-2.0" XELA="-2.0" XERS="-2.0" XL="-2.0" XLP="-2.0" XLU="-2.0" XTLB="-2.0" YGMZ="-2.0" ZKIN="-2.0" ZM="-2.0"/>
                </TRG_1>
              </_2>
              <_3>
                <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="3.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AA="3.0" AAL="3.0" AAP="3.0" AAPL="3.0" ABG="3.0" ABML="3.0" ACER="3.0" ADBE="3.0" ADMP="3.0" AEG="3.0" AEHL="3.0" AFI="3.0" AJRD="3.0" AKU="3.0" ALEC="3.0" AMC="3.0" AMCR="3.0" AMD="3.0" AMRS="3.0" AMTX="3.0" AMZN="3.0" ANIX="3.0" ANPC="3.0" ANTE="3.0" AP="3.0" APOP="3.0" APTO="3.0" AR="3.0" AREC="3.0" ARES="3.0" ARLO="3.0" ASLEW="3.0" ATHM="3.0" ATIF="3.0" ATNF="3.0" AUY="3.0" AVCO="3.0" AXL="3.0" AZN="3.0" AZRX="3.0" BA="3.0" BABA="3.0" BBBY="3.0" BBD="3.0" BBDC="3.0" BFT="3.0" BILI="3.0" BLIN="3.0" BMY="3.0" BOX="3.0" BP="3.0" BRQS="3.0" BSGM="3.0" BURL="3.0" BWAY="3.0" BXRX="3.0" BYFC="3.0" CAKE="3.0" CAL="3.0" CCI="3.0" CCIV="3.0" CCJ="3.0" CEQPP="3.0" CHNG="3.0" CHX="3.0" CIDM="3.0" CIIC="3.0" CLBS="3.0" CLDR="3.0" CLEU="3.0" CLSN="3.0" CLVS="3.0" CNNE="3.0" COHN="3.0" COMP="3.0" CPRX="3.0" CRBP="3.0" CRTD="3.0" CSCO="3.0" CTIC="3.0" CUB="3.0" CVX="3.0" DCTH="3.0" DHT="3.0" DIS="3.0" DISCK="3.0" DNN="3.0" DOX="3.0" DPW="3.0" DS="3.0" DSKE="3.0" DTSS="3.0" EARS="3.0" EBS="3.0" EDTK="3.0" EMAN="3.0" ENPH="3.0" ETSY="3.0" EURN="3.0" EVRG="3.0" EW="3.0" EWA="3.0" EXEL="3.0" EYE="3.0" EYES="3.0" FAST="3.0" FB="3.0" FCAC="3.0" FLR="3.0" FLY="3.0" FPRX="3.0" FSLR="3.0" FSR="3.0" FUSE="3.0" FUV="3.0" GEL="3.0" GLOP="3.0" GME="3.0" GMER="3.0" GNCA="3.0" GOCO="3.0" GOED="3.0" HBI="3.0" HCHC="3.0" HENKY="3.0" HPE="3.0" HPQ="3.0" HPR="3.0" HTBX="3.0" HTHIY="3.0" HTZ="3.0" HUGE="3.0" HYLN="3.0" HZON="3.0" IDEX="3.0" IDXX="3.0" IGSB="3.0" IMTE="3.0" INFI="3.0" INFY="3.0" ING="3.0" INO="3.0" INPX="3.0" INTC="3.0" INTU="3.0" INUV="3.0" INVO="3.0" INVU="3.0" IWM="3.0" IZEA="3.0" JE="3.0" JENGQ="3.0" JFIN="3.0" JOB="3.0" K="3.0" KBR="3.0" KEYS="3.0" KMPH="3.0" KMX="3.0" KR="3.0" LAZR="3.0" LCI="3.0" LCTX="3.0" LEAF="3.0" LIVX="3.0" LKQ="3.0" LODE="3.0" LRTNF="3.0" LUV="3.0" MARA="3.0" MBT="3.0" MDII="3.0" MESA="3.0" METX="3.0" MFGP="3.0" MMDA1="3.0" MRIN="3.0" MSFT="3.0" MTEM="3.0" MU="3.0" MVIS="3.0" MX="3.0" MYO="3.0" MYSZ="3.0" NCLH="3.0" NDX="3.0" NEOS="3.0" NGD="3.0" NGL="3.0" NIO="3.0" NLOK="3.0" NLSN="3.0" NLSP="3.0" NLST="3.0" NNVC="3.0" NOK="3.0" NOV="3.0" NQ="3.0" NSLP="3.0" NTP="3.0" NUZE="3.0" NVDA="3.0" NXE="3.0" OCGN="3.0" OGEN="3.0" OGI="3.0" OHI="3.0" OI="3.0" OLO="3.0" OPEN="3.0" OPGN="3.0" ORCL="3.0" ORMP="3.0" OTIS="3.0" OVID="3.0" PAA="3.0" PAAS="3.0" PERI="3.0" PFF="3.0" PGX="3.0" PHM="3.0" PNC="3.0" POTX="3.0" PPG="3.0" PPL="3.0" PTE="3.0" QQQ="3.0" QSR="3.0" RAD="3.0" RAIL="3.0" RIBT="3.0" RKT="3.0" RMO="3.0" RP="3.0" RPAY="3.0" RRD="3.0" RSX="3.0" RUT="3.0" RVLV="3.0" RYCEY="3.0" SAVA="3.0" SAVE="3.0" SGLB="3.0" SID="3.0" SIFY="3.0" SINO="3.0" SINT="3.0" SIOX="3.0" SIRI="3.0" SITC="3.0" SIVR="3.0" SJI="3.0" SKLZ="3.0" SKT="3.0" SLDB="3.0" SLQT="3.0" SNAP="3.0" SNCA="3.0" SNOA="3.0" SOGO="3.0" SOS="3.0" SPCB="3.0" SPD="3.0" SPRT="3.0" SPX="3.0" SPY="3.0" SQ="3.0" STON="3.0" SUNW="3.0" SWI="3.0" SWK="3.0" T="3.0" TAP="3.0" TGTX="3.0" TH="3.0" THTX="3.0" TSIA="3.0" TSLA="3.0" TSLAX="3.0" TZA="3.0" U="3.0" UAL="3.0" UAMY="3.0" UEC="3.0" UIS="3.0" ULTA="3.0" USAC="3.0" USWS="3.0" UTZ="3.0" UUUU="3.0" UXIN="3.0" VALE="3.0" VEU="3.0" VIX="3.0" VJET="3.0" VSTM="3.0" VTRS="3.0" VVOS="3.0" VWO="3.0" WAFU="3.0" WETF="3.0" WKEY="3.0" WKHS="3.0" X="3.0" XELA="3.0" XERS="3.0" XL="3.0" XLP="3.0" XLU="3.0" XTLB="3.0" YGMZ="3.0" ZKIN="3.0" ZM="3.0"/>
                </TRG_0>
                <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-3.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AA="-3.0" AAL="-3.0" AAP="-3.0" AAPL="-3.0" ABG="-3.0" ABML="-3.0" ACER="-3.0" ADBE="-3.0" ADMP="-3.0" AEG="-3.0" AEHL="-3.0" AFI="-3.0" AJRD="-3.0" AKU="-3.0" ALEC="-3.0" AMC="-3.0" AMCR="-3.0" AMD="-3.0" AMRS="-3.0" AMTX="-3.0" AMZN="-3.0" ANIX="-3.0" ANPC="-3.0" ANTE="-3.0" AP="-3.0" APOP="-3.0" APTO="-3.0" AR="-3.0" AREC="-3.0" ARES="-3.0" ARLO="-3.0" ASLEW="-3.0" ATHM="-3.0" ATIF="-3.0" ATNF="-3.0" AUY="-3.0" AVCO="-3.0" AXL="-3.0" AZN="-3.0" AZRX="-3.0" BA="-3.0" BABA="-3.0" BBBY="-3.0" BBD="-3.0" BBDC="-3.0" BFT="-3.0" BILI="-3.0" BLIN="-3.0" BMY="-3.0" BOX="-3.0" BP="-3.0" BRQS="-3.0" BSGM="-3.0" BURL="-3.0" BWAY="-3.0" BXRX="-3.0" BYFC="-3.0" CAKE="-3.0" CAL="-3.0" CCI="-3.0" CCIV="-3.0" CCJ="-3.0" CEQPP="-3.0" CHNG="-3.0" CHX="-3.0" CIDM="-3.0" CIIC="-3.0" CLBS="-3.0" CLDR="-3.0" CLEU="-3.0" CLSN="-3.0" CLVS="-3.0" CNNE="-3.0" COHN="-3.0" COMP="-3.0" CPRX="-3.0" CRBP="-3.0" CRTD="-3.0" CSCO="-3.0" CTIC="-3.0" CUB="-3.0" CVX="-3.0" DCTH="-3.0" DHT="-3.0" DIS="-3.0" DISCK="-3.0" DNN="-3.0" DOX="-3.0" DPW="-3.0" DS="-3.0" DSKE="-3.0" DTSS="-3.0" EARS="-3.0" EBS="-3.0" EDTK="-3.0" EMAN="-3.0" ENPH="-3.0" ETSY="-3.0" EURN="-3.0" EVRG="-3.0" EW="-3.0" EWA="-3.0" EXEL="-3.0" EYE="-3.0" EYES="-3.0" FAST="-3.0" FB="-3.0" FCAC="-3.0" FLR="-3.0" FLY="-3.0" FPRX="-3.0" FSLR="-3.0" FSR="-3.0" FUSE="-3.0" FUV="-3.0" GEL="-3.0" GLOP="-3.0" GME="-3.0" GMER="-3.0" GNCA="-3.0" GOCO="-3.0" GOED="-3.0" HBI="-3.0" HCHC="-3.0" HENKY="-3.0" HPE="-3.0" HPQ="-3.0" HPR="-3.0" HTBX="-3.0" HTHIY="-3.0" HTZ="-3.0" HUGE="-3.0" HYLN="-3.0" HZON="-3.0" IDEX="-3.0" IDXX="-3.0" IGSB="-3.0" IMTE="-3.0" INFI="-3.0" INFY="-3.0" ING="-3.0" INO="-3.0" INPX="-3.0" INTC="-3.0" INTU="-3.0" INUV="-3.0" INVO="-3.0" INVU="-3.0" IWM="-3.0" IZEA="-3.0" JE="-3.0" JENGQ="-3.0" JFIN="-3.0" JOB="-3.0" K="-3.0" KBR="-3.0" KEYS="-3.0" KMPH="-3.0" KMX="-3.0" KR="-3.0" LAZR="-3.0" LCI="-3.0" LCTX="-3.0" LEAF="-3.0" LIVX="-3.0" LKQ="-3.0" LODE="-3.0" LRTNF="-3.0" LUV="-3.0" MARA="-3.0" MBT="-3.0" MDII="-3.0" MESA="-3.0" METX="-3.0" MFGP="-3.0" MMDA1="-3.0" MRIN="-3.0" MSFT="-3.0" MTEM="-3.0" MU="-3.0" MVIS="-3.0" MX="-3.0" MYO="-3.0" MYSZ="-3.0" NCLH="-3.0" NDX="-3.0" NEOS="-3.0" NGD="-3.0" NGL="-3.0" NIO="-3.0" NLOK="-3.0" NLSN="-3.0" NLSP="-3.0" NLST="-3.0" NNVC="-3.0" NOK="-3.0" NOV="-3.0" NQ="-3.0" NSLP="-3.0" NTP="-3.0" NUZE="-3.0" NVDA="-3.0" NXE="-3.0" OCGN="-3.0" OGEN="-3.0" OGI="-3.0" OHI="-3.0" OI="-3.0" OLO="-3.0" OPEN="-3.0" OPGN="-3.0" ORCL="-3.0" ORMP="-3.0" OTIS="-3.0" OVID="-3.0" PAA="-3.0" PAAS="-3.0" PERI="-3.0" PFF="-3.0" PGX="-3.0" PHM="-3.0" PNC="-3.0" POTX="-3.0" PPG="-3.0" PPL="-3.0" PTE="-3.0" QQQ="-3.0" QSR="-3.0" RAD="-3.0" RAIL="-3.0" RIBT="-3.0" RKT="-3.0" RMO="-3.0" RP="-3.0" RPAY="-3.0" RRD="-3.0" RSX="-3.0" RUT="-3.0" RVLV="-3.0" RYCEY="-3.0" SAVA="-3.0" SAVE="-3.0" SGLB="-3.0" SID="-3.0" SIFY="-3.0" SINO="-3.0" SINT="-3.0" SIOX="-3.0" SIRI="-3.0" SITC="-3.0" SIVR="-3.0" SJI="-3.0" SKLZ="-3.0" SKT="-3.0" SLDB="-3.0" SLQT="-3.0" SNAP="-3.0" SNCA="-3.0" SNOA="-3.0" SOGO="-3.0" SOS="-3.0" SPCB="-3.0" SPD="-3.0" SPRT="-3.0" SPX="-3.0" SPY="-3.0" SQ="-3.0" STON="-3.0" SUNW="-3.0" SWI="-3.0" SWK="-3.0" T="-3.0" TAP="-3.0" TGTX="-3.0" TH="-3.0" THTX="-3.0" TSIA="-3.0" TSLA="-3.0" TSLAX="-3.0" TZA="-3.0" U="-3.0" UAL="-3.0" UAMY="-3.0" UEC="-3.0" UIS="-3.0" ULTA="-3.0" USAC="-3.0" USWS="-3.0" UTZ="-3.0" UUUU="-3.0" UXIN="-3.0" VALE="-3.0" VEU="-3.0" VIX="-3.0" VJET="-3.0" VSTM="-3.0" VTRS="-3.0" VVOS="-3.0" VWO="-3.0" WAFU="-3.0" WETF="-3.0" WKEY="-3.0" WKHS="-3.0" X="-3.0" XELA="-3.0" XERS="-3.0" XL="-3.0" XLP="-3.0" XLU="-3.0" XTLB="-3.0" YGMZ="-3.0" ZKIN="-3.0" ZM="-3.0"/>
                </TRG_1>
              </_3>
            </TRADE>
          </CELL0>
          <CELL1 ROWSPANELWEIGHT="1.0" ROWWEIGHT0="1.5557851239669422" ROWWEIGHT1="0.44421487603305787" SELECTED_TYPE="CHART" SIDEBAR_IS_ACTIVE="true" SYMBOL="DCTH" SYMBOL_GROUP="2" TRADE_BUTTONS_MIGRATED="true">
            <ACTIVETRADER CELL_IDS="POSITION_BREAKDOWN;NET_POSITION;AVERAGE_PRICE;PL_OPEN;PL_DAY" COLUMNS="TRADE_AMOUNT:43:,BUY_ORDER:59:,BIDSIZE:20:,PRICE:69:,ASKSIZE:24:,SELL_ORDER:48:" ENABLED="true" SHOW_STUDY_MARKERS="false" SYMBOL="AAPL" SYMBOL_GROUP="2" SYNC_AT_AND_CHART_CROSSHAIR="true" VERTICAL="false" VISIBLE="false" WEIGHT="1.4930182599355533" ZOOMING_STEPS="1">
              <POSITION_SUMMARY_PANEL CELL_IDS="POSITION_BREAKDOWN;NET_POSITION;AVERAGE_PRICE;PL_OPEN;PL_DAY" ENABLED="true"/>
              <TRADE_BUTTONS_CONFIG CONFIGURATION_NAME="SINGLE" ORDER_RULES_SET="STOCK" ORDER_TYPE="LIMIT" OS_AUTO="false" OS_EXPANDED="false" OS_TIF="DAY" QTY="100.0" QTY_STEP="1.0" TEMPLATE="SINGLE" TRADE_BUTTONS="BUY_MKT;SELL_MKT;MULTI_CANCEL;REVERSE;FLAT;SECOND_LINE;QUANTITY_WITH_BUTTONS;ORDER_TEMPLATE;AUTO_SEND;ORDER_SETUP">
                <OCO_STOP>
                  <TRG_0 TRG_ENBL="true" TRG_LINK="ASK_BID" TRG_OFFSET_MODE="TICK" TRG_OT="STOP" TRG_SETUP="10.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL AAL="10.0" AAPL="10.0" AFI="10.0" AMC="10.0" AMD="10.0" AMZN="10.0" ANTE="10.0" ARLO="10.0" AXL="10.0" BBD="10.0" BMY="10.0" BSGM="10.0" BXRX="10.0" CCJ="10.0" CCL="10.0" CHNG="10.0" CHX="10.0" CIDM="10.0" CLBS="10.0" CLDR="10.0" CLSN="10.0" CRBP="10.0" CSCO="10.0" DIS="10.0" DISCK="10.0" DNN="10.0" DPW="10.0" DS="10.0" EMAN="10.0" ETSY="10.0" EW="10.0" EWA="10.0" FCAC="10.0" FSR="10.0" FUSE="10.0" GME="10.0" GOCO="10.0" HBI="10.0" HPQ="10.0" HPR="10.0" HTZ="10.0" HUGE="10.0" HYLN="10.0" IDEX="10.0" IGSB="10.0" INFI="10.0" INO="10.0" INTC="10.0" IZEA="10.0" JE="10.0" KEYS="10.0" LCI="10.0" LKQ="10.0" LUV="10.0" MBT="10.0" MDII="10.0" MMDA1="10.0" MRIN="10.0" NGD="10.0" NIO="10.0" NLOK="10.0" NLSN="10.0" NNVC="10.0" NOK="10.0" OGI="10.0" OPEN="10.0" OPGN="10.0" PAAS="10.0" PERI="10.0" PGX="10.0" POTX="10.0" RAD="10.0" RKT="10.0" RP="10.0" RRD="10.0" RSX="10.0" SAVA="10.0" SIOX="10.0" SITC="10.0" SIVR="10.0" SKLZ="10.0" SLQT="10.0" SNAP="10.0" SOS="10.0" SQ="10.0" TGTX="10.0" TSLA="10.0" TZA="10.0" U="10.0" UAMY="10.0" UEC="10.0" USWS="10.0" UUUU="10.0" VJET="10.0" VTRS="10.0" WETF="10.0" X="10.0" XL="10.0" XLP="10.0" XLU="10.0" ZM="10.0"/>
                  </TRG_0>
                </OCO_STOP>
                <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="1.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AAL="1.0" AAPL="1.0" AFI="1.0" AMC="1.0" AMD="1.0" AMZN="1.0" ANTE="1.0" ARLO="1.0" AXL="1.0" BBD="1.0" BMY="1.0" BSGM="1.0" BXRX="1.0" CCJ="1.0" CCL="1.0" CHNG="1.0" CHX="1.0" CIDM="1.0" CLBS="1.0" CLDR="1.0" CLSN="1.0" CRBP="1.0" CSCO="1.0" DIS="1.0" DISCK="1.0" DNN="1.0" DPW="1.0" DS="1.0" EMAN="1.0" ETSY="1.0" EW="1.0" EWA="1.0" FCAC="1.0" FSR="1.0" FUSE="1.0" GME="1.0" GOCO="1.0" HBI="1.0" HPQ="1.0" HPR="1.0" HTZ="1.0" HUGE="1.0" HYLN="1.0" IDEX="1.0" IGSB="1.0" INFI="1.0" INO="1.0" INTC="1.0" IZEA="1.0" JE="1.0" KEYS="1.0" LCI="1.0" LKQ="1.0" LUV="1.0" MBT="1.0" MDII="1.0" MMDA1="1.0" MRIN="1.0" NGD="1.0" NIO="1.0" NLOK="1.0" NLSN="1.0" NNVC="1.0" NOK="1.0" OGI="1.0" OPEN="1.0" OPGN="1.0" PAAS="1.0" PERI="1.0" PGX="1.0" POTX="1.0" RAD="1.0" RKT="1.0" RP="1.0" RRD="1.0" RSX="1.0" SAVA="1.0" SIOX="1.0" SITC="1.0" SIVR="1.0" SKLZ="1.0" SLQT="1.0" SNAP="1.0" SOS="1.0" SQ="1.0" TGTX="1.0" TSLA="1.0" TZA="1.0" U="1.0" UAMY="1.0" UEC="1.0" USWS="1.0" UUUU="1.0" VJET="1.0" VTRS="1.0" WETF="1.0" X="1.0" XL="1.0" XLP="1.0" XLU="1.0" ZM="1.0"/>
                </TRG_0>
                <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-1.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AAL="-1.0" AAPL="-1.0" AFI="-1.0" AMC="-1.0" AMD="-1.0" AMZN="-1.0" ANTE="-1.0" ARLO="-1.0" AXL="-1.0" BBD="-1.0" BMY="-1.0" BSGM="-1.0" BXRX="-1.0" CCJ="-1.0" CCL="-1.0" CHNG="-1.0" CHX="-1.0" CIDM="-1.0" CLBS="-1.0" CLDR="-1.0" CLSN="-1.0" CRBP="-1.0" CSCO="-1.0" DIS="-1.0" DISCK="-1.0" DNN="-1.0" DPW="-1.0" DS="-1.0" EMAN="-1.0" ETSY="-1.0" EW="-1.0" EWA="-1.0" FCAC="-1.0" FSR="-1.0" FUSE="-1.0" GME="-1.0" GOCO="-1.0" HBI="-1.0" HPQ="-1.0" HPR="-1.0" HTZ="-1.0" HUGE="-1.0" HYLN="-1.0" IDEX="-1.0" IGSB="-1.0" INFI="-1.0" INO="-1.0" INTC="-1.0" IZEA="-1.0" JE="-1.0" KEYS="-1.0" LCI="-1.0" LKQ="-1.0" LUV="-1.0" MBT="-1.0" MDII="-1.0" MMDA1="-1.0" MRIN="-1.0" NGD="-1.0" NIO="-1.0" NLOK="-1.0" NLSN="-1.0" NNVC="-1.0" NOK="-1.0" OGI="-1.0" OPEN="-1.0" OPGN="-1.0" PAAS="-1.0" PERI="-1.0" PGX="-1.0" POTX="-1.0" RAD="-1.0" RKT="-1.0" RP="-1.0" RRD="-1.0" RSX="-1.0" SAVA="-1.0" SIOX="-1.0" SITC="-1.0" SIVR="-1.0" SKLZ="-1.0" SLQT="-1.0" SNAP="-1.0" SOS="-1.0" SQ="-1.0" TGTX="-1.0" TSLA="-1.0" TZA="-1.0" U="-1.0" UAMY="-1.0" UEC="-1.0" USWS="-1.0" UUUU="-1.0" VJET="-1.0" VTRS="-1.0" WETF="-1.0" X="-1.0" XL="-1.0" XLP="-1.0" XLU="-1.0" ZM="-1.0"/>
                </TRG_1>
                <_2>
                  <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="2.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL AAL="2.0" AAPL="2.0" AFI="2.0" AMC="2.0" AMD="2.0" AMZN="2.0" ANTE="2.0" ARLO="2.0" AXL="2.0" BBD="2.0" BMY="2.0" BSGM="2.0" BXRX="2.0" CCJ="2.0" CCL="2.0" CHNG="2.0" CHX="2.0" CIDM="2.0" CLBS="2.0" CLDR="2.0" CLSN="2.0" CRBP="2.0" CSCO="2.0" DIS="2.0" DISCK="2.0" DNN="2.0" DPW="2.0" DS="2.0" EMAN="2.0" ETSY="2.0" EW="2.0" EWA="2.0" FCAC="2.0" FSR="2.0" FUSE="2.0" GME="2.0" GOCO="2.0" HBI="2.0" HPQ="2.0" HPR="2.0" HTZ="2.0" HUGE="2.0" HYLN="2.0" IDEX="2.0" IGSB="2.0" INFI="2.0" INO="2.0" INTC="2.0" IZEA="2.0" JE="2.0" KEYS="2.0" LCI="2.0" LKQ="2.0" LUV="2.0" MBT="2.0" MDII="2.0" MMDA1="2.0" MRIN="2.0" NGD="2.0" NIO="2.0" NLOK="2.0" NLSN="2.0" NNVC="2.0" NOK="2.0" OGI="2.0" OPEN="2.0" OPGN="2.0" PAAS="2.0" PERI="2.0" PGX="2.0" POTX="2.0" RAD="2.0" RKT="2.0" RP="2.0" RRD="2.0" RSX="2.0" SAVA="2.0" SIOX="2.0" SITC="2.0" SIVR="2.0" SKLZ="2.0" SLQT="2.0" SNAP="2.0" SOS="2.0" SQ="2.0" TGTX="2.0" TSLA="2.0" TZA="2.0" U="2.0" UAMY="2.0" UEC="2.0" USWS="2.0" UUUU="2.0" VJET="2.0" VTRS="2.0" WETF="2.0" X="2.0" XL="2.0" XLP="2.0" XLU="2.0" ZM="2.0"/>
                  </TRG_0>
                  <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-2.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL AAL="-2.0" AAPL="-2.0" AFI="-2.0" AMC="-2.0" AMD="-2.0" AMZN="-2.0" ANTE="-2.0" ARLO="-2.0" AXL="-2.0" BBD="-2.0" BMY="-2.0" BSGM="-2.0" BXRX="-2.0" CCJ="-2.0" CCL="-2.0" CHNG="-2.0" CHX="-2.0" CIDM="-2.0" CLBS="-2.0" CLDR="-2.0" CLSN="-2.0" CRBP="-2.0" CSCO="-2.0" DIS="-2.0" DISCK="-2.0" DNN="-2.0" DPW="-2.0" DS="-2.0" EMAN="-2.0" ETSY="-2.0" EW="-2.0" EWA="-2.0" FCAC="-2.0" FSR="-2.0" FUSE="-2.0" GME="-2.0" GOCO="-2.0" HBI="-2.0" HPQ="-2.0" HPR="-2.0" HTZ="-2.0" HUGE="-2.0" HYLN="-2.0" IDEX="-2.0" IGSB="-2.0" INFI="-2.0" INO="-2.0" INTC="-2.0" IZEA="-2.0" JE="-2.0" KEYS="-2.0" LCI="-2.0" LKQ="-2.0" LUV="-2.0" MBT="-2.0" MDII="-2.0" MMDA1="-2.0" MRIN="-2.0" NGD="-2.0" NIO="-2.0" NLOK="-2.0" NLSN="-2.0" NNVC="-2.0" NOK="-2.0" OGI="-2.0" OPEN="-2.0" OPGN="-2.0" PAAS="-2.0" PERI="-2.0" PGX="-2.0" POTX="-2.0" RAD="-2.0" RKT="-2.0" RP="-2.0" RRD="-2.0" RSX="-2.0" SAVA="-2.0" SIOX="-2.0" SITC="-2.0" SIVR="-2.0" SKLZ="-2.0" SLQT="-2.0" SNAP="-2.0" SOS="-2.0" SQ="-2.0" TGTX="-2.0" TSLA="-2.0" TZA="-2.0" U="-2.0" UAMY="-2.0" UEC="-2.0" USWS="-2.0" UUUU="-2.0" VJET="-2.0" VTRS="-2.0" WETF="-2.0" X="-2.0" XL="-2.0" XLP="-2.0" XLU="-2.0" ZM="-2.0"/>
                  </TRG_1>
                </_2>
                <_3>
                  <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="3.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL AAL="3.0" AAPL="3.0" AFI="3.0" AMC="3.0" AMD="3.0" AMZN="3.0" ANTE="3.0" ARLO="3.0" AXL="3.0" BBD="3.0" BMY="3.0" BSGM="3.0" BXRX="3.0" CCJ="3.0" CCL="3.0" CHNG="3.0" CHX="3.0" CIDM="3.0" CLBS="3.0" CLDR="3.0" CLSN="3.0" CRBP="3.0" CSCO="3.0" DIS="3.0" DISCK="3.0" DNN="3.0" DPW="3.0" DS="3.0" EMAN="3.0" ETSY="3.0" EW="3.0" EWA="3.0" FCAC="3.0" FSR="3.0" FUSE="3.0" GME="3.0" GOCO="3.0" HBI="3.0" HPQ="3.0" HPR="3.0" HTZ="3.0" HUGE="3.0" HYLN="3.0" IDEX="3.0" IGSB="3.0" INFI="3.0" INO="3.0" INTC="3.0" IZEA="3.0" JE="3.0" KEYS="3.0" LCI="3.0" LKQ="3.0" LUV="3.0" MBT="3.0" MDII="3.0" MMDA1="3.0" MRIN="3.0" NGD="3.0" NIO="3.0" NLOK="3.0" NLSN="3.0" NNVC="3.0" NOK="3.0" OGI="3.0" OPEN="3.0" OPGN="3.0" PAAS="3.0" PERI="3.0" PGX="3.0" POTX="3.0" RAD="3.0" RKT="3.0" RP="3.0" RRD="3.0" RSX="3.0" SAVA="3.0" SIOX="3.0" SITC="3.0" SIVR="3.0" SKLZ="3.0" SLQT="3.0" SNAP="3.0" SOS="3.0" SQ="3.0" TGTX="3.0" TSLA="3.0" TZA="3.0" U="3.0" UAMY="3.0" UEC="3.0" USWS="3.0" UUUU="3.0" VJET="3.0" VTRS="3.0" WETF="3.0" X="3.0" XL="3.0" XLP="3.0" XLU="3.0" ZM="3.0"/>
                  </TRG_0>
                  <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-3.0" TRG_TIF="DAY">
                    <OFFSET_PER_SYMBOL AAL="-3.0" AAPL="-3.0" AFI="-3.0" AMC="-3.0" AMD="-3.0" AMZN="-3.0" ANTE="-3.0" ARLO="-3.0" AXL="-3.0" BBD="-3.0" BMY="-3.0" BSGM="-3.0" BXRX="-3.0" CCJ="-3.0" CCL="-3.0" CHNG="-3.0" CHX="-3.0" CIDM="-3.0" CLBS="-3.0" CLDR="-3.0" CLSN="-3.0" CRBP="-3.0" CSCO="-3.0" DIS="-3.0" DISCK="-3.0" DNN="-3.0" DPW="-3.0" DS="-3.0" EMAN="-3.0" ETSY="-3.0" EW="-3.0" EWA="-3.0" FCAC="-3.0" FSR="-3.0" FUSE="-3.0" GME="-3.0" GOCO="-3.0" HBI="-3.0" HPQ="-3.0" HPR="-3.0" HTZ="-3.0" HUGE="-3.0" HYLN="-3.0" IDEX="-3.0" IGSB="-3.0" INFI="-3.0" INO="-3.0" INTC="-3.0" IZEA="-3.0" JE="-3.0" KEYS="-3.0" LCI="-3.0" LKQ="-3.0" LUV="-3.0" MBT="-3.0" MDII="-3.0" MMDA1="-3.0" MRIN="-3.0" NGD="-3.0" NIO="-3.0" NLOK="-3.0" NLSN="-3.0" NNVC="-3.0" NOK="-3.0" OGI="-3.0" OPEN="-3.0" OPGN="-3.0" PAAS="-3.0" PERI="-3.0" PGX="-3.0" POTX="-3.0" RAD="-3.0" RKT="-3.0" RP="-3.0" RRD="-3.0" RSX="-3.0" SAVA="-3.0" SIOX="-3.0" SITC="-3.0" SIVR="-3.0" SKLZ="-3.0" SLQT="-3.0" SNAP="-3.0" SOS="-3.0" SQ="-3.0" TGTX="-3.0" TSLA="-3.0" TZA="-3.0" U="-3.0" UAMY="-3.0" UEC="-3.0" USWS="-3.0" UUUU="-3.0" VJET="-3.0" VTRS="-3.0" WETF="-3.0" X="-3.0" XL="-3.0" XLP="-3.0" XLU="-3.0" ZM="-3.0"/>
                  </TRG_1>
                </_3>
              </TRADE_BUTTONS_CONFIG>
            </ACTIVETRADER>
            <BIG_BUTTONS VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <CHART CONFIGURATION="@v9@%0:com.devexperts.toschart.model,1:com.devexperts.tos.chartdata,2:com.devexperts.tos.thinkscript.data,3:com.devexperts.toschart.utils,4:com.devexperts.toschart.control.subgraph,5:com.devexperts.toschart.elstudies,6:com.devexperts.toschart.script%owner{chartAggregationPeriods:ChartAggregationPeriodArray0{17::ChartAggregationPeriod0},chartAggregationPeriods=@ChartAggregationPeriodArray0,colors{7::CustomColor0,9::CustomColor1,0::CustomColor2,5::CustomColor3,3::CustomColor4,6::CustomColor5}}#com.devexperts.toschart.core.ChartModel{encodedMixinsState=&quot;{\&quot;common\&quot;:{\&quot;DRAWING_SETS\&quot;:\&quot;{}\&quot;},\&quot;state_props\&quot;:{\&quot;state_type\&quot;:\&quot;REGULAR\&quot;},\&quot;monkey_bars_exp\&quot;:{\&quot;LikefolioMixin\&quot;:\&quot;{\\\&quot;paintingSettings\\\&quot;:{\\\&quot;neutralSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;positiveSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;negativeSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;sentimentSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true}},\\\&quot;shownDivisions\\\&quot;:[],\\\&quot;allDivisions\\\&quot;:[]}\&quot;},\&quot;monkey_bars\&quot;:{},\&quot;seasonality\&quot;:{},\&quot;regular\&quot;:{\&quot;DescriberMixin\&quot;:\&quot;{\\\&quot;visibility\\\&quot;:\\\&quot;HIDE_PANEL\\\&quot;,\\\&quot;studiesMode\\\&quot;:\\\&quot;HIDE_STUDIES\\\&quot;}\&quot;,\&quot;LikefolioMixin\&quot;:\&quot;{\\\&quot;paintingSettings\\\&quot;:{\\\&quot;neutralSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;positiveSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;negativeSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;sentimentSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true}},\\\&quot;shownDivisions\\\&quot;:[],\\\&quot;allDivisions\\\&quot;:[]}\&quot;}}&quot;,encodedPatternsModel=&quot;{\&quot;showPatterns\&quot;:true,\&quot;models\&quot;:[],\&quot;fibModels\&quot;:[]}&quot;,groupId=&quot;default&quot;,styleSettings{activeTool=12,chartAggregationSettings{monkeyChartsAggSettings=!%0.TimeFrameAggregationSettings.createTickOrTimeAggregation(!%1.ChartRange.findByCode(&quot;DAY3&quot;),@ChartAggregationPeriod0),timeAggregationSettings=!%0.TimeFrameAggregationSettings.createTickOrTimeAggregation(!%1.ChartRange.findByCode(&quot;DAY10&quot;),@ChartAggregationPeriod0)},commonStyleSettings{colorSettings{backgroundColor=!%2.CustomColor.findByIndex(&quot;101&quot;),barTypeColors{downColor=#%2.CustomColor(#java.awt.Color(51,51,255,255)),neutralColor=@CustomColor0,upColor=@CustomColor1},candleTypeColors.fillUp=&lt;T,monkeyProfileTypeColors.defaultRowHeight=&lt;F,mpExpandedTypeColors.defaultRowHeight=&lt;F,volumeColor=@CustomColor0},expansion{down=10,right=10,up=10},fitArrowsToScreen=&lt;F,fitStudiesToScreen=&lt;F,leftAxisRegulator{maxValue=21.34114905d,minValue=16.81218429d},manualAxisRegulator{maxValue=15.72796317d,minValue=11.67868862d},overlappedVolume=&lt;T,previousRightExpansion=10,shortCuts{^(&quot;Time Zone&quot;,&lt;F),^(&quot;Show Expiration Friday &quot;,&lt;F),^(&quot;Keep Price Zoom&quot;,&lt;F),^(&quot;enableLeftAxis&quot;,&lt;F),^(&quot;Fit expected price ranges&quot;,&lt;F),^(&quot;emphasizeDigitMPExpanded&quot;,&lt;F),^(&quot;showWicksCandleTrend&quot;,&lt;F),^(&quot;highlightEarnings&quot;,&lt;F),^(&quot;synchronizeCrosshair&quot;,&lt;F),^(&quot;myToolsMode&quot;,&lt;F),^(&quot;seasonalityStyle&quot;,&lt;F),^(&quot;Show Price Subgraph&quot;,&lt;F),^(&quot;closePriceLevel&quot;,&lt;F),^(&quot;Color Volume As Symbol Ticks&quot;,&lt;F),^(&quot;highlightPhantomRBars&quot;,&lt;F),^(&quot;Cross type &quot;,&lt;F),^(&quot;Fit Studies to Screen&quot;,&lt;F),^(&quot;Fit Orders&quot;,&lt;F),^(&quot;Bubbles as Percentage&quot;,&lt;F),^(&quot;hideStatusString&quot;,&lt;F),^(&quot;Show Studies &quot;,&lt;F),^(&quot;showWicksHeikinAshi&quot;,&lt;F),^(&quot;Alerts&quot;,&lt;F),^(&quot;Chart scale&quot;,&lt;F),^(&quot;Fit High/Low&quot;,&lt;F),^(&quot;Orders&quot;,&lt;F),^(&quot;Use Log Scale &quot;,&lt;T),^(&quot;Fit Study Markers to Screen&quot;,&lt;F),^(&quot;Fit Alerts&quot;,&lt;F),^(&quot;Fit patterns&quot;,&lt;F),^(&quot;Percentage View&quot;,&lt;F),^(&quot;Make Auto Zoom &quot;,&lt;F),^(&quot;Show Year Marking Line&quot;,&lt;F),^(&quot;Show Rollover Line&quot;,&lt;F),^(&quot;Show High/Low Bubbles &quot;,&lt;F),^(&quot;Snap mode&quot;,&lt;F),^(&quot;highlightStudies&quot;,&lt;F),^(&quot;Overlapped Volume&quot;,&lt;F),^(&quot;Show Symbol Logo&quot;,&lt;F),^(&quot;Show Last Price Bubble &quot;,&lt;F),^(&quot;emphasizeDigitMP&quot;,&lt;F),^(&quot;Snap crosshairs to&quot;,&lt;F),^(&quot;Show grid&quot;,&lt;F),^(&quot;showWicksCandle&quot;,&lt;F),^(&quot;Show trades&quot;,&lt;F),^(&quot;highlightSeasons&quot;,&lt;F),^(&quot;Snap drawings to&quot;,&lt;F),^(&quot;Extend Order/Alert Line to Left&quot;,&lt;F)},showExpFriday=&lt;F,showTradeExecution=&lt;T,snapMode=!%3.SnapUtils$SnapMode.valueOf(*%3.SnapUtils$SnapMode.class,&quot;SNAP_TO_HLOC&quot;),step=30.303030303030305d,suppressAutoZoom=&lt;T},forexStyleSettings.shortCuts.^(&quot;Show Volume Subgraph&quot;,&lt;F),futuresStyleSettings{highlightExtendedHours=&lt;T,shortCuts{^(&quot;adjustForContractChanges&quot;,&lt;F),^(&quot;Show Open Interest&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,&lt;T),^(&quot;showContractChangeEvents&quot;,&lt;F),^(&quot;futures_daily_close_price&quot;,&lt;F),^(&quot;Show Options&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,&lt;F),^(&quot;startAtMarketOpen&quot;,&lt;F)},showOpenInterest=&lt;F,showVolume=&lt;F},optionsStyleSettings.shortCuts{^(&quot;Show Open Interest&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,&lt;T),^(&quot;Show Theo Price&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,&lt;F),^(&quot;startAtMarketOpen&quot;,&lt;F)},otherStyleSettings{shortCuts{^(&quot;Show Social Sentiment&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,&lt;T),^(&quot;Show Options&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,&lt;T),^(&quot;Show Corporate Actions&quot;,&lt;F),^(&quot;Show CNBC Video&quot;,&lt;F),^(&quot;startAtMarketOpen&quot;,&lt;F),^(&quot;adjustForDividends&quot;,&lt;F)},startAggregationAtMarketOpen=&lt;F,tradingHoursOnly=&lt;T},setsIdentifiers.styleSetName=&quot;waveTech6&quot;},subgraphModels{!get(#%4.SubgraphId(&quot;Symbol&quot;)){height=507,storableIndicators{+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# @new\n# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2009-2021\n#\n# Source code isn\'t available.\n\nplot slowAvg = Double.NaN;\nplot fastAvg = Double.NaN;\nplot BuySignal = Double.NaN;\nplot SellSignal = Double.NaN;&quot;,name=&quot;PPS&quot;}){hidden=&lt;T,plots{0:{hiding=&lt;T},1:{hiding=&lt;T},2:{color=@CustomColor2,lineWeight=3},3:{color=@CustomColor3,lineWeight=3}}}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# Jerry Romine PE Ratio &amp; Percent Change Labels\n\n# \&quot;prof\&quot; is used to show or hide the profit. The profit functions work only if you have \&quot;advanced features\&quot; enabled in TOS.\n# Profit can be only displayed if the aggregation period is a \&quot;standard\&quot; one like 1min, 2min, 5min, 1day,.... if you use different aggregation period (ex. 195min) you have to set PROF = 0 in the input menu so the whole bar will not disappear of the screen.\ninput profit_label = No;\n\n#AddLabel(yes, \&quot;Jerry Romine\&quot;, Color.WHITE);\n\n# Any percentage is calculated using DAY as aggregation period\ndef agg = AggregationPeriod.DAY;\n\ninput Lable1Month = Yes;\ninput Lable2Month = Yes;\ninput Lable3Month = Yes;\ninput Lable6Month = Yes;\ninput Lable1Year = Yes;\ninput Lable2Year =no;\ninput Lable3Year =no;\n\n\n# If the aggregation period is more than 1 day it shows a warning. This is a limit with the AggregationPeriod function, it doesn\'t work if the actual period is larger than the one set up (in this case DAY).\ndef showdata = if GetAggregationPeriod() &gt; AggregationPeriod.DAY then 0 else 1;\nAddLabel(!showdata, \&quot;AGGREGATION PERIOD must be 1 DAY or LESS\&quot;, Color.RED);\n\n# PE Ratio Label\ndef AE = if IsNaN(GetActualEarnings()) then 0 else GetActualEarnings();\n\n# 252 + 1/2 attempt to catch the # of trading days in a year. Close is close enough. \nplot EPS = Sum(AE, 252 + 1 / 2); def pe; if showdata then {pe = close(period = agg) / EPS;} else {pe = 0.0;};\n\nAddLabel(yes,  if EPS != 0 then \&quot;P/E: \&quot; + Round(pe, 2) else \&quot;P/E: N/A\&quot;,  if (pe == 0 or EPS == 0) then Color.LIGHT_GRAY else if pe &gt; 0 then CreateColor(51, 204, 0) else Color.RED);\n\ndef weekChange; if showdata then {weekChange = (((close(period = agg) - close(period = agg)[5]) / close(period = agg)[5]) * 100);} else {weekChange = 0;};\n\ndef monthChange; if showdata then {monthChange = (((close(period = agg) - close(period = agg)[21]) / close(period = agg)[21]) * 100);} else {monthChange = 0;};\n\ndef twoMonthChange; if showdata then {twoMonthChange = (((close(period = agg) - close(period = agg)[42]) / close(period = agg)[42]) * 100);} else {twoMonthChange = 0;};\n\ndef threeMonthChange; if showdata then {threeMonthChange = (((close(period = agg) - close(period = agg)[63]) / close(period = agg)[63]) * 100);} else {threeMonthChange = 0;};\n\ndef sixMonthChange; if showdata then {sixMonthChange = (((close(period = agg) - close(period = agg)[126]) / close(period = agg)[126]) * 100);} else {sixMonthChange = 0;};\n\ndef oneYearChange; if showdata then {oneYearChange = (((close(period = agg) - close(period = agg)[252]) / close(period = agg)[252]) * 100);} else {oneYearChange = 0;};\n\ndef twoYearChange; if showdata then {twoYearChange = (((close(period = agg) - close(period = agg)[504]) / close(period = agg)[504]) * 100);} else {twoYearChange = 0;};\n\ndef threeYearChange; if showdata then {threeYearChange = (((close(period = agg) - close(period = agg)[756]) / close(period = agg)[756]) * 100);} else {threeYearChange = 0;};\n\n#AddLabel tells ThinkScript you want the results of your code displayed.  Yes means show the label.  Words or sybols in \&quot; \&quot; will appear with your label.  \n\ndef value = Round(weekChange, 2);\nAddLabel(yes, \&quot;1Wk: \&quot; + Round(weekChange, 2) + \&quot;%\&quot;, if value == 0 then Color.LIGHT_GRAY else if value &gt; 0 then CreateColor(51, 204, 0) else Color.RED);\n\ndef value1month = Round(monthChange, 2);\nAddLabel( Lable1Month, \&quot;1M: \&quot; + Round(monthChange, 2) + \&quot;%\&quot;, if value1month == 0 then Color.LIGHT_GRAY else if value1month &gt; 0 then CreateColor(51, 204, 0) else Color.RED);\n\ndef value2month = Round(twomonthChange, 2);\nAddLabel(Lable2Month, \&quot;2M: \&quot; + Round(twomonthChange, 2) + \&quot;%\&quot;, if value2month == 0 then Color.LIGHT_GRAY else if value2month &gt; 0 then CreateColor(51, 204, 0) else Color.RED);\n\ndef value3month = Round(threeMonthChange, 2);\nAddLabel(Lable3Month, \&quot;3M: \&quot; + Round(threeMonthChange, 2) + \&quot;%\&quot;, if value3month == 0 then Color.LIGHT_GRAY else if value3month &gt; 0 then CreateColor(51, 204, 0) else Color.RED);\n\ndef value6month = Round(sixMonthChange, 2);\nAddLabel(Lable6Month, \&quot;6M: \&quot; + Round(sixMonthChange, 2) + \&quot;%\&quot;, if value6month == 0 then Color.LIGHT_GRAY else if value6month &gt; 0 then CreateColor(51, 204, 0) else Color.RED);\n\ndef value1year = Round(oneYearChange, 2);\nAddLabel(Lable1Year, \&quot;1Yr: \&quot; + Round(oneYearChange, 2) + \&quot;%\&quot;, if value1year == 0 then Color.LIGHT_GRAY else if value1year &gt; 0 then CreateColor(51, 204, 0) else Color.RED);\n\ndef value2year = Round(twoYearChange, 2);\nAddLabel(Lable2Year, \&quot;2Yr: \&quot; + Round(twoYearChange, 2) + \&quot;%\&quot;, if value2year == 0 then Color.LIGHT_GRAY else if value2year &gt; 0 then CreateColor(51, 204, 0) else Color.RED);\n\ndef value3year = Round(threeYearChange, 2);\nAddLabel(Lable3Year, \&quot;3Yr: \&quot; + Round(threeYearChange, 2) + \&quot;%\&quot;, if value3year == 0 then Color.LIGHT_GRAY else if value3year &gt; 0 then CreateColor(51, 204, 0) else Color.RED);\n\n#Profit Label\ndef GetOpenPL; if profit_label then {GetOpenPL = GetOpenPL();} else {GetOpenPL = 0;};\n\ndef GetAveragePrice; if profit_label then {GetAveragePrice = GetAveragePrice();} else {GetAveragePrice = 0;};\n\ndef AvgPrice; if GetAveragePrice != 0 then {AvgPrice = close - GetAveragePrice;} else {AvgPrice = 0;};\n\nAddLabel(profit_label, \&quot; P/L: $ \&quot; + Round(GetOpenPL) + \&quot; | \&quot; + (Round((AvgPrice / GetAveragePrice) * 100, 2) + \&quot; %\&quot;), if GetOpenPL &gt;= 0 then Color.GREEN else Color.LIGHT_RED);\n\n# END&quot;,name=&quot;_8a644010_ff47_4841_a232_b83b1b068fd7&quot;}){plots{0:{hiding=&lt;T}},inputsMap.!get:Boolean0(&quot;Lable1Month&quot;)}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# @new\n# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2009-2021\n#\n\n#wizard text: CLOSE\n#wizard input: crossingType\n#wizard input: band\n#wizard text: Inputs: length:\n#wizard input: length\n#wizard text: std deviation:\n#wizard input: Std_Deviation\n#wizard text: average type:\n#wizard input: averageType\n\ninput length = 20;\ninput Std_Deviation = 2.0;\ninput band = {default upper, middle, lower};\ninput crossingType = {default above, below};\ninput averageType = AverageType.SIMPLE;\n\ndef bollinger;\nswitch (band) {\ncase upper:\n    bollinger = BollingerBands(length = length, Num_Dev_Dn = -Std_Deviation, Num_Dev_up = Std_Deviation, averageType = averageType).UpperBand;\ncase middle:\n    bollinger = BollingerBands(length = length, Num_Dev_Dn = -Std_Deviation, Num_Dev_up = Std_Deviation, averageType = averageType).MidLine;\ncase lower:\n    bollinger = BollingerBands(length = length, Num_Dev_Dn = -Std_Deviation, Num_Dev_up = Std_Deviation, averageType = averageType).LowerBand;\n}\n\nplot signal = Crosses(close, bollinger, crossingType == CrossingType.above);\n\nsignal.DefineColor(\&quot;Above\&quot;, GetColor(1));\nsignal.DefineColor(\&quot;Below\&quot;, GetColor(2));\nsignal.AssignValueColor(if crossingType == CrossingType.above then signal.color(\&quot;Above\&quot;) else signal.color(\&quot;Below\&quot;));\n\nsignal.SetPaintingStrategy(if crossingType == CrossingType.above\n    then PaintingStrategy.BOOLEAN_ARROW_UP\n    else PaintingStrategy.BOOLEAN_ARROW_DOWN);&quot;,name=&quot;BollingerBandsCrossover&quot;}){hidden=&lt;T,inputsMap.!get:Integer0(&quot;length&quot;)}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence:ScriptEssence0{body=&quot;#ShadowTrader_VA_Pivots\n#ShadowTrader (Copyright ShadowTrader), a division of ShadowTrader Technologies, LLC. 2017. All rights reserved. This ShadowTrader Script is for educational purposes only.  ShadowTrader is not responsible for the use,  functionality or the performance of this Script. This work is copyrighted by ShadowTrader and all rights of this work under the license are reserved. Use of the ShadowTrader licensed code is for private use only and any other use are prohibited. By exercising any of the rights herein, you are accepting the terms of this license. You have a non-exclusive right to use or alter the ShadowTrader code. Use of this ShadowTrader Script other than as provided for in this license is prohibited. Any redistribution is strictly prohibited and will be enforced.\n\n# A big ShadowTrader thank you to Justin Lane Williams for initially creating this script for us.\n#08/31/11: Total redesign, added automated Pivot values, proximity plotting, new features.\n#09/12/11: Added “ShowLevel4” option due to recent volitility. Will plot S4 &amp; R4.\n#12/11/11: Added “AfterHours” option to turn off plot after hours.\n#12/21/11: Bug fixes due to TOS upgrades. Removed “AfterHours”, not workin correctly.\n#01/25/12: Enter daily inputs as 4 digits and script will interpret.\n# -added rounding to make the pivots appear as they do on the show.\n#01/26/12: Removed ability to truncate inputs due to it only being accurate 99% of time.\n#02/02/12: Small update to make sure \&quot;Auto Pivots\&quot; menu option functioned properly.\n#06/07/12: Added (6)VPOC inputs, should be manually entered/deleted, displays when applicable.\n#06/25/12: Removed some code and fixed a few bugs.\n#07/09/12: Fixed one small but important bug.\n#07/13/12: Added value bubbles, removed proximity plot function.\n#08/13/12: Removed a lot of superfluous code plus a few upgrades.\n#08/15/12: Fixed a bug that was giving false numbers.\n#08/30/12: Fixed a bug that wasn\'t plotting the NQ profile.\n#09/02/12: Reordered inputs and removed \&quot;LabelESonly\&quot; input.\n#12/28/12: Made the plot hide on daily charts and updated code to current standards.\n#01/04/13: Fixed a rare bug that hides labels if using tick charts.\n#01/28/13: Added ability to hide each individual level.\n#02/09/21 :mahiby customized for  \n# Pivot values will be off the day following market holidays and possibly the day after rollover.\n# On these days make \&quot;AutoPivots=No\&quot; and manually draw pivots. Change back to \&quot;AutoPivots=Yes\&quot; the day after.\n\ninput AggPeriod =  { \&quot;CHART\&quot;, \&quot;5 MIN\&quot; , \&quot;10 MIN\&quot;, \&quot;15 MIN\&quot; ,  \&quot;30 MIN\&quot;,  \&quot;1 HOUR\&quot;, \&quot;2 HOURs\&quot;,  \&quot;4 HOURs\&quot;, default \&quot;DAY\&quot;,  \&quot;2 DAYS\&quot;, \&quot;3 DAYS\&quot;, \&quot;4 DAYS\&quot;, WEEK, MONTH, \&quot;OPT EXP\&quot;, QUARTER, YEAR}; #AggregationPeriod.DAY;#\ninput VaPrior = yes;\ninput ShowCloud1  = no;#Hint ShowCloud: Shows the value area as a cloud.\ninput ShowCloud2  = yes;#Hint ShowCloud: Shows the value area as a cloud.\ninput CloudOpenOnly = yes;#Hint CloudOpenOnly: Will only cloud open candles.\ninput showOnlyToday = no;\n\ninput AutoPivots = yes;#Hint AutoPivots: Turns off pivot lines, value area stays on.\ndef showVAH = no; # for debuging\ninput Labels = {default \&quot;Proximity\&quot;, \&quot;Off\&quot;, \&quot;All\&quot;, \&quot;ValueAreaOnly\&quot;};#Hint Labels: Labels at top of chart.\ninput ShowPivotPoint = no;#Hint ShowPivotPoint: Hides Pivot Point plot.\n\ninput PivotBubbles  = no;#yes;#Hint PivotBubbles: Shows bubbles on pivot plot lines.\ninput ValueBubbles  = no;#yes;#Hint ValueBubbles: Shows bubbles on value plot lines.\ninput PlotStartTime = 0930;#Hint PlotStartTime: Move to earlier time to shift bubbles to the left.\n\n\n\ninput HideAfterHoursLabel = no;#Hint HideAfterHoursLabel: Hides \&quot;NoShadowPlotAfterHours\&quot; label.\ninput VpocBubbles  = no;#yes;#Hint VpocBubbles: Shows bubbles on VPOC plot lines.\n\ninput ShowL1 = yes;#Hint ShowS1: Hide/Show S1 /R1.\ninput ShowL2 = yes;#Hint ShowS2: Hide/Show S2 /R2.\ninput ShowL3 =yes;#Hint ShowS3: Hide/Show S3 /R3.\ninput ShowLevel4UP = no;#Hint ShowLevel4 and UP: Will display S4 and R4 for days with large moves.\n\ninput ShowORB = no;#Hint ShowORB: Displays 2 small, dashed lines at the top/bottom of opening range.\ninput OrbTime = 30;#Hint OrbTime: Defines the time range in minutes for the ORB.\n\ninput triggerUpperVaLimitHigh = 5;\ninput triggerUpperVaLimitLow = -5;\ninput triggerLowerVaLimitHigh = 5;\ninput triggerLowerVaLimitLow = -5;\ninput showLines = no;\ninput opacity = 20;\n\ndef Na = Double.NaN;\ninput showDebugLable = yes;\n#declare hide_on_daily;\n\n\n#Previous Day Functions\ndef Day   = GetDayOfWeek(GetYYYYMMDD());\ndef CloseTime = SecondsTillTime(1545) &gt;= 0;\ndef OpenTime = SecondsFromTime(0930) &gt;= 0;\ndef RegHrs = CloseTime and OpenTime;\n\n###\ndef PLow ;\ndef PHigh ;\ndef PrevLow ;\ndef PrevHigh;\ndef a = if  \&quot;TimeFrame\&quot; == \&quot;DAY\&quot; then 1 else 0;\n\nif  a {\n    PLow  =  CompoundValue(1, If(Day == Day[1] and RegHrs and low &lt; PLow[1], low, If(SecondsFromTime(0930) &lt;= 0 and RegHrs, low, PLow[1])), low);\n    PHigh = CompoundValue(1, If(Day == Day[1] and RegHrs and high &gt; PHigh[1], high, If(SecondsFromTime(0930) &lt;= 0 and RegHrs, high, PHigh[1])), high);\n    PrevLow  = If(Day != Day[1], PLow[1], PrevLow[1]);\n    PrevHigh = If(Day != Day[1], PHigh[1], PrevHigh[1]);\n\n#AddLabel (yes,period);\n}\n\nelse {\n    PLow  = low(period = AggPeriod);\n    PHigh = high(period = AggPeriod);\n    PrevLow  = low(period = AggPeriod)[1];\n    PrevHigh = high(period = AggPeriod)[1];\n\n}\n##################\n#Prior Day Profile - counting formula by functionform\n\ndef period;\ndef yyyymmdd = GetYYYYMMDD();\ndef seconds = SecondsFromTime(0);\ndef month = GetYear() * 12 + GetMonth();\ndef day_number = DaysFromDate(First(yyyymmdd)) + GetDayOfWeek(First(yyyymmdd));\ndef dom = GetDayOfMonth(yyyymmdd);\ndef dow = GetDayOfWeek(yyyymmdd - dom + 1);\ndef expthismonth = (if dow &gt; 5 then 27 else 20) - dow;\ndef exp_opt = month + (dom &gt; expthismonth);\n\nswitch (AggPeriod) {\ncase CHART:\n    period = 0;\n\ncase \&quot;5 MIN\&quot;:\n    period = Floor(seconds / 60 + day_number * 24 * 60);\ncase \&quot;10 MIN\&quot;:\n    period = Floor(seconds / 60 + day_number * 24 * 60);\n  \ncase \&quot;15 MIN\&quot;:\n    period = Floor(seconds / 60 + day_number * 24 * 60);\n\ncase \&quot;30 MIN\&quot;:\n    period = Floor(seconds / (30 * 60) + day_number * 24 * 60);\n   # timeFrame = \&quot;30 MINUTES\&quot;; #\&quot;2 DAYS\&quot;\ncase \&quot;1 HOUR\&quot;:\n    period = Floor(seconds / 3600 + day_number * 24);\n   # timeFrame = \&quot;1 HOUR\&quot;; #\&quot;2 DAYS\&quot;\ncase \&quot;2 HOURS\&quot;:\n    period = Floor(seconds / (2 * 3600) + day_number * 24);\n   # timeFrame = \&quot;2 HOURS\&quot;; #\&quot;2 DAYS\&quot;\ncase \&quot;4 HOURS\&quot;:\n    period = Floor(seconds / (4 * 3600) + day_number * 24);\n   \ncase DAY:\n    period = CountTradingDays(Min(First(yyyymmdd), yyyymmdd), yyyymmdd) - 1;\n   # timeFrame =  \&quot;1 DAY\&quot;;\ncase \&quot;2 DAYS\&quot;:\n    period =  Floor((CountTradingDays(Min(First(yyyymmdd), yyyymmdd), yyyymmdd) - 1) / 2);\n   # timeFrame =  \&quot;2 DAYS\&quot;;\ncase \&quot;3 DAYS\&quot; :\n    period = Floor((CountTradingDays(Min(First(yyyymmdd), yyyymmdd), yyyymmdd) - 1) / 3);\n  \ncase \&quot;4 DAYS\&quot;:\n    period =  Floor((CountTradingDays(Min(First(yyyymmdd), yyyymmdd), yyyymmdd) - 1) / 4);\n  \ncase WEEK:\n    period = Floor(day_number / 7);\n  \n\ncase MONTH:\n    period = Floor(month - First(month));\n  \ncase \&quot;OPT EXP\&quot;:\n    period = exp_opt - First(exp_opt);\n\ncase \&quot;Quarter\&quot;:\n\n    period =  Floor((CountTradingDays(Min(First(yyyymmdd), yyyymmdd), yyyymmdd) - 1) / 90);\n  \n\ncase \&quot;Year\&quot;:\n\n    period =  Floor((CountTradingDays(Min(First(yyyymmdd), yyyymmdd), yyyymmdd) - 1) /365);\n  \n\n   \n#case BAR:\n #   period = BarNumber() - 1;\n}\n\n\ndef count;\nif VaPrior\n{\n\n    count = CompoundValue(1, if !(period != period[1]) then count[1] + 1 else 1, 1);\n\n}\nelse\n{\n\n\n\n count = CompoundValue(1, if period != period[1] then count[1]   else  (count[1] + period - period[1]), 0);\n\n\n\n}\ndef cond = count &lt; count[1] + period - period[1];\n\ndef Pivot = hlc3(period = AggPeriod)[1];\n\n\n\ndef priorperiod = if IsNaN(count[1]) then 1 else Max(count, count[1]);\nprofile vol1 = VolumeProfile(\&quot;startNewProfile\&quot; = period != period[1], \&quot;onExpansion\&quot; = no);\n\ndef vahprior = vol1.GetHighestValueArea();\ndef pocprior = vol1.GetPointOfControl();\ndef valprior = vol1.GetLowestValueArea();\n\ndef vahprev = GetValue(vahprior, priorperiod);\ndef pocprev = GetValue(pocprior, priorperiod);\ndef valprev = GetValue(valprior, priorperiod);\n\n#if showProfile then\ndef  showProfile = no;\ndef showPointOfControl = no;\n\n#vol.Show(if showProfile then GlobalColor(\&quot;Profile\&quot;) else Color.CURRENT, if showPointOfControl then GlobalColor(\&quot;Point Of Control\&quot;) else Color.CURRENT, if showValueArea then GlobalColor(\&quot;Value Area\&quot;) else Color.CURRENT, opacity);\n#profile vol = VolumeProfile(\&quot;startNewProfile\&quot; = cond, \&quot;onExpansion\&quot; = no);\n#vol.Show(if showProfile then GlobalColor(\&quot;Profile\&quot;) else Color.CURRENT, if showPointOfControl then GlobalColor(\&quot;Point Of Control\&quot;) else Color.CURRENT, if showValueArea then GlobalColor(\&quot;Value Area\&quot;) else Color.CURRENT, opacity);\ndef VAH = vahprev;\ndef VAL = valprev;\ndef POC = pocprev;\n\n\n############\n#Value Area Functions\ndef PPoint = If(Pivot &gt; 0, Pivot, Na);\ndef VArea  = Between(close, VAL, VAH);\ndef VAreaabove  = close &gt; VAH;\ndef VAreabelow  = close &lt; VAL;\n\n\n###%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n#def oneVol = Roundup(( VAHigh - VALow) / VAHigh, 2);\ndef oneVol = RoundUp(( VAH - VAL) / 100, 2);\ndef upperValimitH = VAH + oneVol * (triggerUpperVaLimitHigh);\ndef upperValimitL = VAH + oneVol * (triggerUpperVaLimitLow);\n\ndef lowerValimitH = VAL + oneVol * (triggerLowerVaLimitHigh);\ndef lowerValimitL = VAL + oneVol * (triggerLowerVaLimitLow);\n#triggerUpperVaLimitlow = if triggerUpperVaLimitlow&gt;=0 then triggerUpperVaLimitlow =-5 else triggerUpperVaLimitlow= triggerUpperVaLimitlow;\n\nplot VA_high_short = upperValimitH;\nplot VA_high_long = upperValimitL;\n\nplot VA_low_short = lowerValimitL;\nplot VA_low_long = lowerValimitH;\n\n#AddCloud(VA_high_long, VA_high_short, Color.LIGHT_RED, Color.LIGHT_RED);\n#AddCloud(VA_high_long, VA_high_short, Color.LIGHT_RED, Color.LIGHT_RED);\n\n#VA_low_short.SetPaintingStrategy(PaintingStrategy.DASHES);\n#VA_low_long.SetDefaultColor(Color.BLUE);\nVA_low_short.SetHiding(!showLines);\nVA_low_short.SetPaintingStrategy(PaintingStrategy.DASHES);\nVA_low_short.SetDefaultColor(Color.RED);\nVA_low_long.SetHiding(!showLines);\nVA_low_long.SetPaintingStrategy(PaintingStrategy.DASHES);\nVA_low_long.SetDefaultColor(Color.GREEN);\n\n\n\nVA_high_short.SetHiding(!showLines);\nVA_high_short.SetPaintingStrategy(PaintingStrategy.DASHES);\nVA_high_short.SetDefaultColor(Color.RED);\nVA_high_long.SetHiding(!showLines);\nVA_high_long.SetPaintingStrategy(PaintingStrategy.DASHES);\nVA_high_long.SetDefaultColor(Color.GREEN);\n\n\n####%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\n\n\n\n\n#Time Functions\ndef timeFrame = getAggregationPeriod();\ndef prdMax =highestAll(if(!IsNaN(close[-1]),period,Na))  ;\ndef cnt =if(period &gt; prdMax-2  ,1,Na);\ndef Chart2  =  if showOnlyToday then cnt else 1 ;;#if showOnlyToday then (IsNaN(period[-1] and (period == period[1])))  else 1 ;\n#def Chart2  =  if showOnlyToday then MarketOpen and NewDay else 1 ;\n\ndef CloseTime2 = SecondsTillTime(1600) &gt;= 0;\ndef OpenTime2 = SecondsFromTime(PlotStartTime) &gt;= 0;\ndef MarketOpen = OpenTime2 and CloseTime2;\ndef NewDay = IsNaN(close(period = “Day”)[-1]);\ndef Chart1;\nif  timeFrame&lt; aggregationPeriod.DAY\n{\nChart1  =  if showOnlyToday then MarketOpen and NewDay else 1 ;\n}\nelse\n{ \n Chart1  =  chart2 ;\n}\n#plot prd =period;\n\n#AddLabel (yes,Chart1);\n#Pivot Functions\ninput useFib =no;\n\n###################\n\n\n\ninput FibUseAggregate = NO;\n\n\n\ninput length = 3;\ndef displace = -1;\n\ninput PivotPrice = {default CLOSE, HLC3, VWAP, OHLC4, OPEN, HL2};\ninput PivotLength = 1;\n\ndef averageType = AverageType.SIMPLE;\ndef fib1 = 0.236; #fib 0.236\ndef fib2 = 0.5;  #fib2 0.5\ndef fib3 = 0.764; #fib3 0.764\ndef fib4 = 1.0; # Extreems\n\n\n\n\n#def mov_avg = MovingAverage(averageType, price[-displace], length);\n\ndef ll;\ndef hh;\ndef pv;\n\nif FibUseAggregate\n{\n    ll = low (period = AggPeriod)[-displace];;\n    hh = high (period = AggPeriod)[-displace];\n     switch (PivotPrice)\n       {\n            case \&quot;CLOSE\&quot;:\n                    pv = close(period = AggPeriod)  [-displace];\n            case \&quot;HLC3\&quot; :\n                    pv = hlc3(period = AggPeriod)[-displace];\n\n            case \&quot;VWAP\&quot; :\n                    pv = vwap(period = AggPeriod)[-displace];\n            case \&quot;HL2\&quot; :\n                    pv = hl2(period = AggPeriod)[-displace];\n            case \&quot;OHLC4\&quot; :\n                    pv = ohlc4(period = AggPeriod)[-displace];\n            case \&quot;OPEN\&quot; :\n                    pv = open(period = AggPeriod)[-displace];\n       }\n}\nelse\n{\n    ll = average( low[-displace], length);#MovingAverage(averageType, low[-displace], length);\n    hh = average( high[-displace], length);#MovingAverage(averageType, high[-displace], length);\n      switch (PivotPrice)\n       {\n            case \&quot;CLOSE\&quot;:\n                    pv = MovingAverage(averageType, close  [-displace], PivotLength);;\n            case \&quot;HLC3\&quot; :\n                    pv = MovingAverage(averageType,hlc3[-displace], PivotLength);;\n            case \&quot;VWAP\&quot; :\n                    pv = MovingAverage(averageType,vwap[-displace], PivotLength);;\n            case \&quot;HL2\&quot; :\n                    pv =MovingAverage(averageType, hl2[-displace], PivotLength);;\n            case \&quot;OHLC4\&quot; :\n                    pv = MovingAverage(averageType,ohlc4[-displace], PivotLength);;\n            case \&quot;OPEN\&quot; :\n                    pv = MovingAverage(averageType,open[-displace], PivotLength);;\n\n       }\n}\n\n\n\n\n#\n# logic\n#\n    def nan = Double.NaN;\n\n\n    def delta = hh - ll;\n    def pp_ = pv; #pivot Point\n    def s1_ = pp_ - (fib1 * delta);\n    def s2_ = pp_ - (fib2 * delta);\n    def s3_ = pp_ - (fib3 * delta);\n    def s4_ = pp_ - (fib4 * delta);\n    def r1_ = pp_ + (fib1 * delta);\n    def r2_ = pp_ + (fib2 * delta);\n    def r3_ = pp_ + (fib3 * delta);\n    def r4_ = pp_ + (fib4 * delta);\n\n\n\n\n\n##########\n\ndef Res1  =if(usefib, r1_, (2 * PPoint) - PrevLow);\ndef Supp1 =if(usefib, s1_, (2 * PPoint) - PrevHigh);\ndef Res2  = if(usefib, r2_, PPoint + (Res1 - Supp1));\ndef Supp2 = if(usefib, s2_, PPoint - (Res1 - Supp1));\ndef Res3  = if(usefib, r3_, PrevHigh + 2 * (PPoint - PrevLow));\ndef Supp3 = if(usefib, s3_, PrevLow - 2 * (PrevHigh - PPoint));\ndef Res4  = if(usefib, r4_, PrevHigh + 3 * (PPoint - PrevLow));\ndef Supp4 = if(usefib, s4_, PrevLow - 3 * (PrevHigh - PPoint));\ndef Res5  = PrevHigh + 4 * (PPoint - PrevLow);\ndef Supp5 = PrevLow - 4 * (PrevHigh - PPoint);\n\ndef Res6  = PrevHigh + 5 * (PPoint - PrevLow);\ndef Supp6 = PrevLow - 5 * (PrevHigh - PPoint);\n\ndef Res7  = PrevHigh + 6 * (PPoint - PrevLow);\ndef Supp7 = PrevLow - 6 * (PrevHigh - PPoint);\n\ndef Res8  = PrevHigh + 7 * (PPoint - PrevLow);\ndef Supp8 = PrevLow - 7 * (PrevHigh - PPoint);\n\n\n\n\n\n\n\n\n\n\n\n#Rounding Functions\ndef round = 0.01;\ndef RI   = RoundDown(Res1, 0) - ((Round(((RoundDown(Res1, 0) - Res1) / round), 0)) * round);\ndef SI   = RoundDown(Supp1, 0) - ((Round(((RoundDown(Supp1, 0) - Supp1) / round), 0)) * round);\ndef RII  = RoundDown(Res2, 0) - ((Round(((RoundDown(Res2, 0) - Res2) / round), 0)) * round);\ndef SII  = RoundDown(Supp2, 0) - ((Round(((RoundDown(Supp2, 0) - Supp2) / round), 0)) * round);\ndef RIII = RoundDown(Res3, 0) - ((Round(((RoundDown(Res3, 0) - Res3) / round), 0)) * round);\ndef SIII = RoundDown(Supp3, 0) - ((Round(((RoundDown(Supp3, 0) - Supp3) / round), 0)) * round);\ndef RIV  = RoundDown(Res4, 0) - ((Round(((RoundDown(Res4, 0) - Res4) / round), 0)) * round);\ndef SIV  = RoundDown(Supp4, 0) - ((Round(((RoundDown(Supp4, 0) - Supp4) / round), 0)) * round);\n\n\ndef RV  = RoundDown(Res5, 0) - ((Round(((RoundDown(Res5, 0) - Res5) / round), 0)) * round);\ndef SV  = RoundDown(Supp5, 0) - ((Round(((RoundDown(Supp5, 0) - Supp5) / round), 0)) * round);\ndef RVI  = RoundDown(Res6, 0) - ((Round(((RoundDown(Res6, 0) - Res6) / round), 0)) * round);\ndef SVI  = RoundDown(Supp6, 0) - ((Round(((RoundDown(Supp6, 0) - Supp6) / round), 0)) * round);\ndef RVII  = RoundDown(Res7, 0) - ((Round(((RoundDown(Res7, 0) - Res7) / round), 0)) * round);\ndef SVII  = RoundDown(Supp7, 0) - ((Round(((RoundDown(Supp7, 0) - Supp7) / round), 0)) * round);\ndef RVIII  = RoundDown(Res8, 0) - ((Round(((RoundDown(Res8, 0) - Res8) / round), 0)) * round);\ndef SVIII  = RoundDown(Supp8, 0) - ((Round(((RoundDown(Supp8, 0) - Supp8) / round), 0)) * round);\ndef PivP = RoundDown(PPoint, 0) - ((Round(((RoundDown(PPoint, 0) - PPoint) / round), 0)) * round);\n\n\n\n#Plots\nplot VH  = If(Chart1 and VAH &gt; 0, VAH, Na);\nplot PC  = If(Chart1 and POC &gt; 0, POC, Na);\nplot VL  = If(Chart1 and VAL &gt; 0, VAL, Na);\n\n##Auto Show \ndef R1_auto_show;\ndef R2_auto_show;\ndef R3_auto_show;\ndef R4_auto_show;\ndef R5_auto_show;\ndef R6_auto_show;\ndef R7_auto_show;\ndef R8_auto_show;\n\ndef S1_auto_show;\ndef S2_auto_show;\ndef S3_auto_show;\ndef S4_auto_show;\ndef S5_auto_show;\ndef S6_auto_show;\ndef S7_auto_show;\ndef S8_auto_show;\n\ndef cmax = highestAll( count);\ndef R1AutoShow = (close&gt;VH or (Between(RI,VL,VH) and close&gt;VL));\ndef S1AutoShow = (close&lt;VL or (Between(SI,VL,VH) and close&lt;VH));;\ndef R2AutoShow =  close &gt; VH and close &lt; RV;\ndef S2AutoShow = (close &lt; VL) and close &gt; SV  ;\ndef R3AutoShow = close &gt; (RI + ((RII - RI) / 2));;\ndef S3AutoShow = close &lt; (SI - ((SI - SII) / 2));\ndef R4AutoShow = close &gt; (RII + ((RIII - RII) / 2));\ndef S4AutoShow =  close &lt; (SII - ((SII - SIII) / 2));\ndef R5AutoShow =  close &gt; (RIII + ((RIV - RIII) / 2));\ndef S5AutoShow =  close &lt; (SIII - ((SIII - SIV) / 2));\ndef R6AutoShow =  close &gt; (RIV + ((RV - RIV) / 2));\ndef S6AutoShow =  close &lt; (SIV - ((SVI - SV) / 2));\ndef R7AutoShow =  close &gt; (RV + ((RVI - RV) / 2));\ndef S7AutoShow =  close &lt; (SV - ((SV - SVI) / 2));\ndef R8AutoShow =  close &gt; (RVI + ((RVII - RVI) / 2));\ndef S8AutoShow =  close &lt; (SVI - ((SVI - SVII) / 2));\n\nR1_auto_show = if ( (period==period[1]) and R1_auto_show[1] )  then R1_auto_show[1] else R1AutoShow;\nR2_auto_show = if ( (period==period[1]) and R2_auto_show[1] )  then R2_auto_show[1] else R2AutoShow;\nR3_auto_show = if ( (period==period[1]) and R3_auto_show[1] )  then R3_auto_show[1] else R3AutoShow;\nR4_auto_show = if ( (period==period[1]) and R4_auto_show[1] )  then R4_auto_show[1] else R4AutoShow;\nR5_auto_show = if ( (period==period[1]) and R5_auto_show[1] )  then R5_auto_show[1] else R5AutoShow;\nR6_auto_show = if ( (period==period[1]) and R6_auto_show[1] )  then R6_auto_show[1] else R6AutoShow;\nR7_auto_show = if ( (period==period[1]) and R7_auto_show[1] )  then R7_auto_show[1] else R7AutoShow;\nR8_auto_show = if ( (period==period[1]) and R8_auto_show[1] )  then R8_auto_show[1] else R8AutoShow;\n\n\nS1_auto_show = CompoundValue(2,if ( (period==period[1]) and S1_auto_show[1] )  then S1_auto_show[1] else S1AutoShow,S1AutoShow);\nS2_auto_show = if ( (period==period[1]) and S2_auto_show[1] )  then S2_auto_show[1] else S2AutoShow;\nS3_auto_show = if ( (period==period[1]) and S3_auto_show[1] )  then S3_auto_show[1] else S3AutoShow;\nS4_auto_show = if ( (period==period[1]) and S4_auto_show[1] )  then S4_auto_show[1] else S4AutoShow;\nS5_auto_show = if ( (period==period[1]) and S5_auto_show[1] )  then S5_auto_show[1] else S5AutoShow;\nS6_auto_show = if ( (period==period[1]) and S6_auto_show[1] )  then S6_auto_show[1] else S6AutoShow;\nS7_auto_show = if ( (period==period[1]) and S7_auto_show[1] )  then S7_auto_show[1] else S7AutoShow;\nS8_auto_show = if ( (period==period[1]) and S8_auto_show[1] )  then S8_auto_show[1] else S8AutoShow;\n\n#plot gg=(S1AutoShow);#==1);\n#plot ggg = ( s1_auto_show);# if ( isnan( s1_autoshow))then  1 else double.NaN ;\n#gg.SetHiding(0);\n#ggg.SetHiding(0);\n\n#input showHigherLevel =yes;\n##\n\nplot R4  = If(Chart1 and AutoPivots and ShowLevel4UP and   RIV &gt; 0, RIV, Na);\nplot R3  = If(Chart1 and AutoPivots and ShowL3   and RIII &gt; 0, RIII,Na);\nplot R2  = If(Chart1 and AutoPivots and ShowL2   and RII &gt; 0, RII, Na);\nplot R1  = If(Chart1 and AutoPivots and ShowL1   and RI &gt; 0, RI, Na);\nplot PP  = If(Chart1 and AutoPivots and ShowPivotPoint and PPoint &gt; 0, PivP, Na);\nplot S1  = If(Chart1 and AutoPivots and ShowL1   and SI &gt; 0, SI, Na);\nplot S2  = If(Chart1 and AutoPivots and ShowL2   and SII &gt; 0, SII, Na);\nplot S3  = If(Chart1 and AutoPivots and ShowL3  and SIII &gt; 0, SIII, Na);\nplot S4  = If(Chart1 and AutoPivots and ShowLevel4UP and SIV &gt; 0, SIV, Na);\n\n#######\n\nplot R5  = If(Chart1 and AutoPivots and ShowLevel4UP  and RV &gt; 0, RV, Na);\nplot R6  = If(Chart1 and AutoPivots and ShowLevel4UP and RVI &gt; 0, RVI, Na);\nplot R7  = If(Chart1 and AutoPivots and ShowLevel4UP  and RVII &gt; 0, RVII, Na);\nplot R8  = If(Chart1 and AutoPivots and ShowLevel4UP   and RVIII &gt; 0, RVIII, Na);\n\n\nplot S5  = If(Chart1 and AutoPivots and ShowLevel4UP   and SV &gt; 0, SV, Na);\nplot S6  = If(Chart1 and AutoPivots and ShowLevel4UP and SVI &gt; 0, SVI, Na);\nplot S7  = If(Chart1 and AutoPivots and ShowLevel4UP and SVII &gt; 0, SVII, Na);\nplot S8  = If(Chart1 and AutoPivots and ShowLevel4UP and SVIII &gt; 0, SVIII, Na);\n####\n\n\ninput closeTimeC = 1615;\n#Value Area Cloud\n#def CloudClose = SecondsTillTime(1615) &gt; 0;\ndef CloudClose = SecondsTillTime(closeTimeC) &gt; 0;\ndef Cloud      = OpenTime and CloudClose;\ndef ChartCloud = if(timeFrame &gt; aggregationPeriod.DAY, Cloud and Chart1, chart1);\ndef CloudTest  = If(CloudOpenOnly, ChartCloud, Chart1);\ndef cloudhigh = If(CloudTest and ShowCloud1, VAH, Na);\ndef cloudlow  = If(CloudTest and ShowCloud1, VAL, Na);\nAddCloud(cloudhigh, cloudlow, Color.GRAY, Color.GRAY);\ndef AfterHours = OpenTime2 and CloudClose;\n\n#Chart Labels\ndef Futures = Between(close, close(\&quot;/es\&quot;) - 15, close(\&quot;/es\&quot;) + 15) or Between(close, close(\&quot;/nq\&quot;) - 15, close(\&quot;/nq\&quot;) + 15);\ndef Label = Chart1;# and Futures;\ndef ZeroTest = VAH &gt; 0 and VAL &gt; 0;\ndef PNotZero = PPoint &gt; 0;\ndef ChartLabels;\nswitch (Labels) {\ncase \&quot;Proximity\&quot;:\n    ChartLabels = 1;\ncase \&quot;Off\&quot;:\n    ChartLabels = 0;\ncase \&quot;All\&quot;:\n    ChartLabels = 2;\ncase \&quot;ValueAreaOnly\&quot;:\n    ChartLabels = 3;\n}\n\n\nAddLabel(ChartLabels == 1 and Label and AutoPivots and VArea and ZeroTest, “InsideValue: ” + AggPeriod, Color.WHITE);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and VAreaabove and ZeroTest, “AboveValue: ”  + AggPeriod, Color.GREEN);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and VAreabelow and ZeroTest, “BelowValue: ”  + AggPeriod, Color.RED);\nAddLabel(ChartLabels == 1 and Label and !AutoPivots and VArea and ZeroTest, “InsideValueArea: ”  + AggPeriod, Color.WHITE);\nAddLabel(ChartLabels == 1 and Label and !AutoPivots and VAreaabove and ZeroTest, “AboveValueArea: ”  + AggPeriod, Color.GREEN);\nAddLabel(ChartLabels == 1 and Label and !AutoPivots and VAreabelow and ZeroTest, “BelowValueArea: ”  + AggPeriod, Color.RED);\n\n\nAddLabel(ChartLabels == 1 and Label and AutoPivots and Between(close, VL, (RI + ((RII - RI) / 2))), \&quot;VH=\&quot; + AsText(VH), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and Between(close, VL, VH), \&quot;POC=\&quot; + AsText(PC), Color.YELLOW);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and Between(close, (SI - ((SI - SII) / 2)), VH), \&quot;VL=\&quot; + AsText(VL), Color.GREEN);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and (close &gt; VH or (Between(RI, VL, VH) and close &gt; VL)), \&quot;R1=\&quot; + AsText(RI), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and close &gt; VH, \&quot;R2=\&quot; + AsText(RII), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and close &gt; (RI + ((RII - RI) / 2)), \&quot;R3=\&quot; + AsText(RIII), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and ShowLevel4UP and close &gt; (RII + ((RIII - RII) / 2)), \&quot;R4=\&quot; + AsText(RIV), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and ShowLevel4UP and close &gt; (RIII + ((RIV - RIII) / 2)), \&quot;R5=\&quot; + AsText(RV), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and ShowLevel4UP and close &gt; (RII + ((RV - RIV) / 2)), \&quot;R6=\&quot; + AsText(RVI), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and ShowLevel4UP and close &gt; (RII + ((RVI - RV) / 2)), \&quot;R7=\&quot; + AsText(RVII), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and ShowLevel4UP and close &gt; (RII + ((RVII - RVI) / 2)), \&quot;R8=\&quot; + AsText(RVIII), Color.RED);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and ShowPivotPoint and close &gt; SI and close &lt; RI, \&quot;PP=\&quot; + AsText(PP), Color.WHITE);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and (close &lt; VL or (Between(SI, VL, VH) and close &lt; VH)), \&quot;S1=\&quot; + AsText(SI), Color.GREEN);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and close &lt; VL, \&quot;S2=\&quot; + AsText(SII), Color.GREEN);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and close &lt; (SI - ((SI - SII) / 2)), \&quot;S3=\&quot; + AsText(SIII), Color.GREEN);\nAddLabel(ChartLabels == 1 and Label and AutoPivots and ShowLevel4UP and close &lt; (SII - ((SII - SIII) / 2)), \&quot;S4=\&quot; + AsText(SIV), Color.GREEN);\n\nAddLabel(ChartLabels == 2 and Label and ZeroTest, \&quot;VH=\&quot; + AsText(VH), Color.RED);\nAddLabel(ChartLabels == 2 and Label and ZeroTest, \&quot;POC=\&quot; + AsText(PC), Color.YELLOW);\nAddLabel(ChartLabels == 2 and Label and ZeroTest, \&quot;VL=\&quot; + AsText(VL), Color.GREEN);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero, \&quot;R1=\&quot; + AsText(RI), Color.RED);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero, \&quot;R2=\&quot; + AsText(RII), Color.RED);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero, \&quot;R3=\&quot; + AsText(RIII), Color.RED);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero and ShowLevel4UP, \&quot;R4=\&quot; + AsText(RIV), Color.RED);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero and ShowPivotPoint, \&quot;PP=\&quot; + AsText(PP), Color.WHITE);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero, \&quot;S1=\&quot; + AsText(SI), Color.GREEN);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero, \&quot;S2=\&quot; + AsText(SII), Color.GREEN);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero, \&quot;S3=\&quot; + AsText(SIII), Color.GREEN);\nAddLabel(ChartLabels == 2 and Label and AutoPivots and PNotZero and ShowLevel4UP, \&quot;S4=\&quot; + AsText(SIV), Color.GREEN);\n\nAddLabel(ChartLabels == 3 and Label and VArea and ZeroTest, “InsideValueArea”, Color.WHITE);\nAddLabel(ChartLabels == 3 and Label and VAreaabove and ZeroTest, “AboveValueArea”, Color.GREEN);\nAddLabel(ChartLabels == 3 and Label and VAreabelow and ZeroTest, \&quot;BelowValueArea”, Color.RED);\nAddLabel(!AfterHours and !Chart1 and !HideAfterHoursLabel, \&quot;NoShadowPlotAfterHours\&quot;, Color.ORANGE);\n\n#Chart Bubbles\ninput BubbleLeftSide = yes;\ndef  leftLoc =  if BubbleLeftSide then 1 else -1;#\nAddChartBubble(IsNaN(VH[leftLoc]) and ValueBubbles, VH, VH, Color.RED, no);\nAddChartBubble(IsNaN(PC[leftLoc]) and ValueBubbles, PC, PC, Color.YELLOW, no);\nAddChartBubble(IsNaN(VL[leftLoc]) and ValueBubbles, VL, VL, Color.GREEN, no);\nAddChartBubble(IsNaN(S1[leftLoc]) and PivotBubbles and S1_auto_show, S1, “S1”, Color.WHITE, no);\nAddChartBubble(IsNaN(S2[leftLoc]) and PivotBubbles and S2_auto_show, S2, “S2”, Color.WHITE, no);\nAddChartBubble(IsNaN(S3[leftLoc]) and PivotBubbles and S1_auto_show, S3, “S3”, Color.WHITE, no);\nAddChartBubble(IsNaN(S4[leftLoc]) and PivotBubbles and ShowLevel4UP and S4_auto_show, S4, “S4”, Color.WHITE, no);\nAddChartBubble(IsNaN(PP[leftLoc]) and ShowPivotPoint and PivotBubbles, PP, “PP”, Color.WHITE, no);\nAddChartBubble(IsNaN(R1[leftLoc]) and PivotBubbles and R1_auto_show, R1, “R1”, Color.WHITE, no);\nAddChartBubble(IsNaN(R2[leftLoc]) and PivotBubbles and R2_auto_show, R2, “R2”, Color.WHITE, no);\nAddChartBubble(IsNaN(R3[leftLoc]) and PivotBubbles and R3_auto_show, R3, “R3”, Color.WHITE, no);\nAddChartBubble(IsNaN(R4[leftLoc]) and PivotBubbles  and ShowLevel4UP and R4_auto_show, R4, “R4”, Color.WHITE, no);\n\n\n#Opening Range Breakout Functions\ndef ORBopen = SecondsTillTime(945) &lt;= 0;\ndef IsMarketOpen = ORBopen and CloseTime2;\ndef FirstBar = If(GetDay()[1] != GetDay(), GetDay() - 1, 0);\ndef OpenRange = SecondsFromTime(945);\ndef PastOpeningRange = OpenRange &gt;= (OrbTime - 15) * 60;\ndef DisplayedHigh = If(high &gt; DisplayedHigh[1] and IsMarketOpen and ShowORB, high, If(IsMarketOpen and !FirstBar, DisplayedHigh[1], high));\ndef DisplayedLow = If(low &lt; DisplayedLow[1] and IsMarketOpen and ShowORB, low, If(IsMarketOpen and !FirstBar, DisplayedLow[1], low));\ndef ORBHi = If(PastOpeningRange, ORBHi[1], DisplayedHigh);\ndef ORBLo  = If(PastOpeningRange, ORBLo[1], DisplayedLow);\nplot ORBHigh = If(Chart1 and PastOpeningRange and IsMarketOpen and ShowORB, ORBHi, Na);\nplot ORBLow  = If(Chart1 and PastOpeningRange and IsMarketOpen and ShowORB, ORBLo, Na);\n\n#Plot Criteria\nORBHigh.SetDefaultColor(Color.MAGENTA);\nORBHigh.SetStyle(Curve.SHORT_DASH);\nORBHigh.HideBubble();\nORBLow.SetDefaultColor(Color.MAGENTA);\nORBLow.SetStyle(Curve.SHORT_DASH);\nORBLow.HideBubble();\nVH.SetDefaultColor(Color.RED);\nPC.SetDefaultColor(Color.YELLOW);\nPC.SetStyle(Curve.LONG_DASH);\nVL.SetDefaultColor(Color.GREEN);\nR4.SetDefaultColor(Color.WHITE);\nR3.SetDefaultColor(Color.WHITE);\nR2.SetDefaultColor(Color.WHITE);\nR1.SetDefaultColor(Color.WHITE);\nPP.SetDefaultColor(Color.WHITE);\nS4.SetDefaultColor(Color.WHITE);\nS3.SetDefaultColor(Color.WHITE);\nS2.SetDefaultColor(Color.WHITE);\nS1.SetDefaultColor(Color.WHITE);\n\n#cloudhigh.SetDefaultColor(Color.RED);\n#cloudlow.SetDefaultColor(Color.GREEN);\nAddLabel(showVAH , \&quot;vah= \&quot; + AsText(VAH), Color.PINK);\nAddLabel(showVAH , \&quot;val= \&quot; + AsText(VAL), Color.LIGHT_GREEN);\nAddLabel(showVAH , \&quot;poc= \&quot; + AsText(POC), Color.LIGHT_ORANGE);\nAddLabel(showVAH , \&quot;pivot= \&quot; + AsText(Pivot), Color.PINK);\nVH.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nPC.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nVL.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nPP.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nR1.SetStyle(Curve.SHORT_DASH);\nR1.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nR2.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nR3.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nR4.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nS1.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nS2.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nS3.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nS4.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\n\n\nR1.SetHiding(R1_auto_show);\nR2.SetHiding(R2_auto_show);\nR3.SetHiding(R3_auto_show);\nR4.SetHiding(R4_auto_show);\nS1.SetHiding(S1_auto_show);\nS2.SetHiding(S2_auto_show);\nS3.SetHiding(S3_auto_show);\nS4.SetHiding(S4_auto_show);\n\n\n\n\ndef opacity_inv ;#= if (opacity &gt;= 0 and opacity &lt;= 100) then 100 - opacity else 50;\nif (no)#show_VA_cloud2\nthen\n{\n   opacity_inv = 1000;\n}\nelse\n\n{\n   opacity_inv = if (opacity &gt;= 0 and opacity &lt;= 100) then 100 - opacity else 50;\n}\n\ndef Vls  = If(Chart2 and ShowCloud2 and VA_low_short &gt; 0, VA_low_short, Na);\ndef Vll  = If(Chart2 and ShowCloud2  and VA_low_long &gt; 0, VA_low_long, Na);\ndef Vhs  = If(Chart2 and ShowCloud2  and VA_high_short &gt; 0, VA_high_short, Na);\ndef Vhl  = If(Chart2 and ShowCloud2  and VA_high_long &gt; 0, VA_high_long, Na);\n\nAddCloud(Vls,  Vll , CreateColor(144 * opacity_inv / 100, 240, 144 * opacity_inv / 100),  CreateColor(144 * opacity_inv / 100, 240, 144 * opacity_inv / 100));\n\nAddCloud(Vhs,   Vhl,  CreateColor(204, 184 * opacity_inv / 100, 202 * opacity_inv / 100),   CreateColor(204, 184 * opacity_inv / 100, 202 * opacity_inv / 100));\n\n\n#S5.SetHiding(!S5_auto_show);\n#AddLabel(yes , \&quot;R44= \&quot; + (S5_auto_show), Color.pink);\n#AddLabel(yes , \&quot;R5= \&quot; + ((RIII + ((RIV - SIII) / 2))), Color.pink);&quot;,name=&quot;_8c4f0368_c01c_4494_9a23_2b992ac82dab&quot;}){hidden=&lt;T,inputsMap:TreeMap0{^(&quot;AggPeriod&quot;,&quot;MONTH&quot;),^(&quot;CloudOpenOnly&quot;,&lt;F),^(&quot;ShowL1&quot;,&lt;F),^(&quot;ShowL2&quot;,&lt;F),^(&quot;ShowL3&quot;,&lt;F)},inputsMap=@TreeMap0,plots{4:{hiding=&lt;T},5:{lineStyle=1},6:{hiding=&lt;T},10:{lineStyle=1}}}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# TD Ameritrade IP Company, Inc. (c) 2009-2020\n# alert mod by WTF_Dude\n#\n\ninput trailType = {default modified, unmodified};\ninput ATRPeriod = 5;\ninput ATRFactor = 3.5;\ninput firstTrade = {default long, short};\ninput averageType = AverageType.WILDERS;\n\nAssert(ATRFactor &gt; 0, \&quot;\'atr factor\' must be positive: \&quot; + ATRFactor);\n\ndef HiLo = Min(high - low, 1.5 * Average(high - low, ATRPeriod));\ndef HRef = if low &lt;= high[1]\n    then high - close[1]\n    else (high - close[1]) - 0.5 * (low - high[1]);\ndef LRef = if high &gt;= low[1]\n    then close[1] - low\n    else (close[1] - low) - 0.5 * (low[1] - high);\n\ndef trueRange;\nswitch (trailType) {\ncase modified:\n    trueRange = Max(HiLo, Max(HRef, LRef));\ncase unmodified:\n    trueRange = TrueRange(high, close, low);\n}\ndef loss = ATRFactor * MovingAverage(averageType, trueRange, ATRPeriod);\n\ndef state = {default init, long, short};\ndef trail;\nswitch (state[1]) {\ncase init:\n    if (!IsNaN(loss)) {\n        switch (firstTrade) {\n        case long:\n            state = state.long;\n            trail =  close - loss;\n        case short:\n            state = state.short;\n            trail = close + loss;\n        }\n    } else {\n        state = state.init;\n        trail = Double.NaN;\n    }\ncase long:\n    if (close &gt; trail[1]) {\n        state = state.long;\n        trail = Max(trail[1], close - loss);\n    } else {\n        state = state.short;\n        trail = close + loss;\n    }\ncase short:\n    if (close &lt; trail[1]) {\n        state = state.short;\n        trail = Min(trail[1], close + loss);\n    } else {\n        state = state.long;\n        trail =  close - loss;\n    }\n}\n\nplot BuySignal = Crosses(state == state.long, 0, CrossingDirection.ABOVE);\nplot SellSignal = Crosses(state == state.short, 0, CrossingDirection.ABOVE);\n\nplot TrailingStop = trail;\n\nTrailingStop.SetPaintingStrategy(PaintingStrategy.POINTS);\nTrailingStop.DefineColor(\&quot;Buy\&quot;, GetColor(0));\nTrailingStop.DefineColor(\&quot;Sell\&quot;, GetColor(1));\nTrailingStop.AssignValueColor(if state == state.long\n    then TrailingStop.Color(\&quot;Sell\&quot;)\n    else TrailingStop.Color(\&quot;Buy\&quot;));\n\n\n\n\n\n# Alerts:\n\ninput alerttext=\&quot;ATR stop switch\&quot;;\ninput UseAlerts = {false, default true};\ninput AlertType = {default \&quot;BAR\&quot;, \&quot;ONCE\&quot;, \&quot;TICK\&quot;};\ninput AlertSound = {\&quot;Bell\&quot;, \&quot;Chimes\&quot;, default \&quot;Ding\&quot;, \&quot;NoSound\&quot;, \&quot;Ring\&quot;};\nAlert(BuySignal, alerttext, AlertType, AlertSound);\nAlert(SellSignal,alerttext, AlertType, AlertSound);&quot;,name=&quot;_a92ddc7c_fe45_46aa_9b44_ade9a093f63f&quot;}){alerts:LocalAlertArray0{0:{enabled=&lt;F},1:{enabled=&lt;F}},alerts=@LocalAlertArray0,inputsMap:TreeMap1{^(&quot;ATRFactor&quot;,2.0d),^(&quot;ATRPeriod&quot;,@Integer0),^(&quot;trailType&quot;,&quot;unmodified&quot;)},inputsMap=@TreeMap1,plots{0:{color=@CustomColor4,hiding=&lt;T,lineWeight=2,paintingStrategy=10},1:{color=@CustomColor4,hiding=&lt;T,lineWeight=3,paintingStrategy=9},2:{lineWeight=2,paintingStrategy=0,palette{^(&quot;Buy&quot;,@CustomColor3),^(&quot;Sell&quot;,@CustomColor5)}}}}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# @new\n# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2009-2021\n#\n\n#wizard text: CLOSE\n#wizard input: crossingType\n#wizard input: band\n#wizard text: Inputs: length:\n#wizard input: length\n#wizard text: std deviation:\n#wizard input: Std_Deviation\n#wizard text: average type:\n#wizard input: averageType\n\ninput length = 20;\ninput Std_Deviation = 2.0;\ninput band = {default upper, middle, lower};\ninput crossingType = {default above, below};\ninput averageType = AverageType.SIMPLE;\n\ndef bollinger;\nswitch (band) {\ncase upper:\n    bollinger = BollingerBands(length = length, Num_Dev_Dn = -Std_Deviation, Num_Dev_up = Std_Deviation, averageType = averageType).UpperBand;\ncase middle:\n    bollinger = BollingerBands(length = length, Num_Dev_Dn = -Std_Deviation, Num_Dev_up = Std_Deviation, averageType = averageType).MidLine;\ncase lower:\n    bollinger = BollingerBands(length = length, Num_Dev_Dn = -Std_Deviation, Num_Dev_up = Std_Deviation, averageType = averageType).LowerBand;\n}\n\nplot signal = Crosses(close, bollinger, crossingType == CrossingType.above);\n\nsignal.DefineColor(\&quot;Above\&quot;, GetColor(1));\nsignal.DefineColor(\&quot;Below\&quot;, GetColor(2));\nsignal.AssignValueColor(if crossingType == CrossingType.above then signal.color(\&quot;Above\&quot;) else signal.color(\&quot;Below\&quot;));\n\nsignal.SetPaintingStrategy(if crossingType == CrossingType.above\n    then PaintingStrategy.BOOLEAN_ARROW_UP\n    else PaintingStrategy.BOOLEAN_ARROW_DOWN);&quot;,name=&quot;BollingerBandsCrossover&quot;}){inputsMap:TreeMap2{^(&quot;averageType&quot;,&quot;EXPONENTIAL&quot;),^(&quot;band&quot;,&quot;lower&quot;),^(&quot;length&quot;,9),^(&quot;Std_Deviation&quot;,2.1d)},inputsMap=@TreeMap2,plots{0:{lineWeight=3,palette.^(&quot;Above&quot;,!%2.CustomColor.findByIndex(&quot;15&quot;))}}}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# @new\n# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2009-2021\n#\n\n#wizard text: CLOSE\n#wizard input: crossingType\n#wizard input: band\n#wizard text: Inputs: length:\n#wizard input: length\n#wizard text: std deviation:\n#wizard input: Std_Deviation\n#wizard text: average type:\n#wizard input: averageType\n\ninput length = 20;\ninput Std_Deviation = 2.0;\ninput band = {default upper, middle, lower};\ninput crossingType = {default above, below};\ninput averageType = AverageType.SIMPLE;\n\ndef bollinger;\nswitch (band) {\ncase upper:\n    bollinger = BollingerBands(length = length, Num_Dev_Dn = -Std_Deviation, Num_Dev_up = Std_Deviation, averageType = averageType).UpperBand;\ncase middle:\n    bollinger = BollingerBands(length = length, Num_Dev_Dn = -Std_Deviation, Num_Dev_up = Std_Deviation, averageType = averageType).MidLine;\ncase lower:\n    bollinger = BollingerBands(length = length, Num_Dev_Dn = -Std_Deviation, Num_Dev_up = Std_Deviation, averageType = averageType).LowerBand;\n}\n\nplot signal = Crosses(close, bollinger, crossingType == CrossingType.above);\n\nsignal.DefineColor(\&quot;Above\&quot;, GetColor(1));\nsignal.DefineColor(\&quot;Below\&quot;, GetColor(2));\nsignal.AssignValueColor(if crossingType == CrossingType.above then signal.color(\&quot;Above\&quot;) else signal.color(\&quot;Below\&quot;));\n\nsignal.SetPaintingStrategy(if crossingType == CrossingType.above\n    then PaintingStrategy.BOOLEAN_ARROW_UP\n    else PaintingStrategy.BOOLEAN_ARROW_DOWN);&quot;,name=&quot;BollingerBandsCrossover&quot;}){inputsMap:TreeMap3{^(&quot;crossingType&quot;,&quot;below&quot;),^(&quot;Std_Deviation&quot;,2.5d)},inputsMap=@TreeMap3,plots{0:{lineWeight=2,palette.^(&quot;Below&quot;,@CustomColor0)}}}),+(!%5.CompiledStudy.resolveStudy(@ScriptEssence0){hidden=&lt;T,inputsMap:TreeMap4{^(&quot;AggPeriod&quot;,&quot;WEEK&quot;),^(&quot;ShowCloud1&quot;,@Boolean0),^(&quot;ShowCloud2&quot;,&lt;F),^(&quot;ShowL1&quot;,&lt;F),^(&quot;ShowL2&quot;,&lt;F),^(&quot;ShowL3&quot;,&lt;F),^(&quot;showOnlyToday&quot;,@Boolean0)},inputsMap=@TreeMap4,plots{5:{lineStyle=1},10:{lineStyle=1}}}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# @new\n# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2009-2021\n#\n\n#wizard input: length1\n#wizard text: -period\n#wizard input: averageType1\n#wizard text: crosses\n#wizard input: crossingType\n#wizard input: length2\n#wizard text: -period\n#wizard input: averageType2\n#wizard text: Price:\n#wizard input: price\n\ninput price = close;\ninput length1 = 15;\ninput length2 = 30;\ninput averageType1 = AverageType.Simple;\ninput averageType2 = AverageType.Simple;\ninput crossingType = {default above, below};\n\ndef avg1 = MovingAverage(averageType1, price, length1);\ndef avg2 = MovingAverage(averageType2, price, length2);\n\nplot signal = crosses(avg1, avg2, crossingType == CrossingType.above);\n\nsignal.DefineColor(\&quot;Above\&quot;, GetColor(6));\nsignal.DefineColor(\&quot;Below\&quot;, GetColor(7));\nsignal.AssignValueColor(if crossingType == CrossingType.above then signal.color(\&quot;Above\&quot;) else signal.color(\&quot;Below\&quot;));\n\nsignal.SetPaintingStrategy(if crossingType == CrossingType.above\n    then PaintingStrategy.BOOLEAN_ARROW_UP\n    else PaintingStrategy.BOOLEAN_ARROW_DOWN);&quot;,name=&quot;MovingAvgCrossover&quot;}){hidden=&lt;T,inputsMap:TreeMap5{^(&quot;averageType1&quot;,&quot;EXPONENTIAL&quot;),^(&quot;averageType2&quot;,&quot;EXPONENTIAL&quot;),^(&quot;length1&quot;,9),^(&quot;length2&quot;,@Integer0),^(&quot;price&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap5}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# @new\n# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2009-2021\n#\n\n#wizard input: crossingType\n#wizard text: Inputs: fast length:\n#wizard input: fastLength\n#wizard text: slow length:\n#wizard input: slowLength\n#wizard text: macd length:\n#wizard input: MACDLength\n#wizard text: average type:\n#wizard input: AverageType\n\ninput fastLength = 12;\ninput slowLength = 26;\ninput MACDLength = 9;\ninput averageType = AverageType.EXPONENTIAL;\ninput crossingType = {default \&quot;Positive to Negative\&quot;, \&quot;Negative to Positive\&quot;};\n\ndef Diff = MACD(fastLength, slowLength, MACDLength, averageType).Diff;\n\nplot signal = crosses(Diff, 0, crossingType == CrossingType.\&quot;Negative to Positive\&quot;);\n\nsignal.DefineColor(\&quot;Negative to Positive\&quot;, GetColor(2));\nsignal.DefineColor(\&quot;Positive to Negative\&quot;, GetColor(3));\nsignal.AssignValueColor(if crossingType == CrossingType.\&quot;Negative to Positive\&quot; then signal.color(\&quot;Negative to Positive\&quot;) else signal.color(\&quot;Positive to Negative\&quot;));\n\nsignal.SetPaintingStrategy(if crossingType == CrossingType.\&quot;Negative to Positive\&quot;\n    then PaintingStrategy.BOOLEAN_ARROW_UP\n    else PaintingStrategy.BOOLEAN_ARROW_DOWN);&quot;,name=&quot;MACDHistogramCrossover&quot;}){inputsMap:TreeMap6{^(&quot;crossingType&quot;,&quot;Negative to Positive&quot;)},inputsMap=@TreeMap6,plots{0:{lineWeight=3,palette.^(&quot;Negative to Positive&quot;,!%2.CustomColor.findByIndex(&quot;17&quot;))}}}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# @new\n# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2009-2021\n#\n\n#wizard input: crossingType\n#wizard text: Inputs: acceleration factor:\n#wizard input: accelerationFactor\n#wizard text: acceleration limit:\n#wizard input: accelerationLimit\n\ninput accelerationFactor = 0.02;\ninput accelerationLimit = 0.2;\ninput crossingType = {default Bearish, Bullish};\n\ndef sar = ParabolicSAR(accelerationFactor=accelerationFactor, accelerationLimit=accelerationLimit);\n\nplot signal = crosses(sar, close, CrossingType == CrossingType.Bearish);\n\nsignal.DefineColor(\&quot;Bullish\&quot;, GetColor(5));\nsignal.DefineColor(\&quot;Bearish\&quot;, GetColor(6));\nsignal.AssignValueColor(if crossingType == CrossingType.Bullish then signal.color(\&quot;Bullish\&quot;) else signal.color(\&quot;Bearish\&quot;));\n\nsignal.SetPaintingStrategy(if crossingType == CrossingType.bullish\n    then PaintingStrategy.BOOLEAN_ARROW_UP\n    else PaintingStrategy.BOOLEAN_ARROW_DOWN);&quot;,name=&quot;ParabolicSARCrossover&quot;}){inputsMap:TreeMap7{^(&quot;crossingType&quot;,&quot;Bullish&quot;)},inputsMap=@TreeMap7,plots{0:{lineWeight=4}}}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2009-2021\n#\n\n#wizard input: stochasticMode\n#wizard text: crosses\n#wizard input: crossingType\n#wizard text: Inputs: k period:\n#wizard input: KPeriod\n\ninput KPeriod = 14;\ninput stochasticMode = {default StochasticFast, StochasticSlow};\ninput crossingType = {default Overbought, Oversold};\n\ndef stochastic;\nswitch (stochasticMode) {\ncase StochasticFast:\n    stochastic = StochasticFull(KPeriod = KPeriod, slowing_period = 1).FullK;\ncase StochasticSlow:\n    stochastic = StochasticFull(KPeriod = KPeriod, slowing_period = 3).FullK;\n}\n\nplot signal;\nswitch (crossingType) {\ncase Overbought:\n    signal = crosses(stochastic, 80, CrossingDirection.Above);\ncase Oversold:\n    signal = crosses(stochastic, 20, CrossingDirection.Below);\n}\n\nsignal.DefineColor(\&quot;OverBought\&quot;, GetColor(1));\nsignal.DefineColor(\&quot;OverSold\&quot;, GetColor(9));\nsignal.AssignValueColor(if crossingType == CrossingType.oversold then signal.color(\&quot;oversold\&quot;) else signal.color(\&quot;overbought\&quot;));\nsignal.SetPaintingStrategy(if crossingType == CrossingType.Oversold\n      then PaintingStrategy.BOOLEAN_ARROW_UP\n      else PaintingStrategy.BOOLEAN_ARROW_DOWN);&quot;,name=&quot;StochasticCrossover&quot;}){inputsMap:TreeMap8{^(&quot;crossingType&quot;,&quot;Oversold&quot;),^(&quot;stochasticMode&quot;,&quot;StochasticSlow&quot;)},inputsMap=@TreeMap8,plots{0:{lineWeight=4}}}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;input price = close;\ninput displace = 0;\ninput length = 20;\ninput Num_Dev_Dn = -2.0;\ninput Num_Dev_up = 2.0;\ninput averageType = AverageType.Simple;\ninput showCloud= yes;\n\ndef sDev = stdev(data = price[-displace], length = length);\n\nplot MidLine = MovingAverage(averageType, data = price[-displace], length = length);\nplot LowerBand = MidLine + num_Dev_Dn * sDev;\nplot UpperBand = MidLine + num_Dev_Up * sDev;\n\nLowerBand.SetDefaultColor(GetColor(0));\nMidLine.SetDefaultColor(GetColor(1));\nUpperBand.SetDefaultColor(GetColor(5));\n\n#############################\ndef Na = Double.NaN;\n\ndef cloudhigh = If( ShowCloud, UpperBand, Na);\ndef cloudlow  = If(ShowCloud, LowerBand, Na);\n#AddCloud(cloudhigh, cloudlow, Color.GRAY, Color.GRAY);\n\n\nAddCloud(cloudhigh, Midline, Color.Green, Color.light_Green);\nAddCloud(cloudlow, Midline, Color.Red, Color.light_Red);\n\n\n####$$$$$$$$\n\n\ninput priceSlm = close;\n\ninput superFastLength = 8;\n\ninput fastLengthSlm = 13;\n\ninput slowLengthSlm = 21;\n\n\n\n\ninput averageTypeSlm = AverageType.EXPONENTIAL;\n\ndef mov_avg8 = MovingAverage(averageTypeSlm, priceSlm[-displace], superFastLength);\n\ndef mov_avg13 = MovingAverage(averageTypeSlm, priceSlm[-displace], fastLengthSlm);\n\ndef mov_avg21 = MovingAverage(averageTypeSlm, priceSlm[-displace], slowLengthSlm);\n \n#moving averages\n\ndef Superfast = mov_avg8;\n\ndef Fast = mov_avg13;\n\ndef Slow = mov_avg21;\n\n\ndef buy = mov_avg8 &gt; mov_avg13 and mov_avg13 &gt; mov_avg21 and low &gt; mov_avg8;\n\ndef stopbuy = mov_avg8 &lt;= mov_avg13;\n\ndef buynow = !buy[1] and buy;\n\ndef buysignal = CompoundValue(1, if buynow and !stopbuy then 1 else if buysignal[1] == 1 and stopbuy then 0 else buysignal[1], 0);\n\n\ndef Buy_Signal = buysignal[1] == 0 and buysignal == 1;\n\ndef Momentum_Down = buysignal[1] == 1 and buysignal == 0;\n\n\ndef sell = mov_avg8 &lt; mov_avg13 and mov_avg13 &lt; mov_avg21 and high &lt; mov_avg8;\n\ndef stopsell = mov_avg8 &gt;= mov_avg13;\n\ndef sellnow = !sell[1] and sell;\n\ndef sellsignal = CompoundValue(1, if sellnow and !stopsell then 1 else if sellsignal[1] == 1 and stopsell then 0 else sellsignal[1], 0);\n\n\ndef Sell_Signal = sellsignal[1] == 0 and sellsignal;\n\ndef Momentum_Up = sellsignal[1] == 1 and sellsignal == 0;\n \n# when using this as a custom scan, change the word plot to def\n# then remove the \'#\' from in front of one of the \&quot;plot Scan\&quot; statements below\ndef Colorbars = if buysignal == 1 then 1 else if sellsignal == 1 then -1 else if buysignal == 0 or sellsignal == 0 then 0 else 0;\n\n# use this first Scan plot for SLM Ribbon Momentum UP\n#plot Scan = if Colorbars == 1 then yes else no;\n\n# use this second Scan plot for SLM Ribbon Momentum DOWN\n#plot Scan = if Colorbars == -1 then yes else no;\n\n\n\n\n\n\n###############\n\ndef Colorbars1 = if buysignal == 1 then 1 else if sellsignal == 1 then 2 else if buysignal == 0 or sellsignal == 0 then 3 else 0;\n\ninput lengthHma = 20;\n\ndef HMA = MovingAverage(AverageType.HULL, price, lengthHma);\ndef HMA_Up=  HMA &gt; HMA[1];\ndef HMA_Down =! HMA_UP;\n\n###############\n\n#def Colorbars1 = if buysignal == 1 then 1 else if sellsignal == 1 then 2 else if buysignal == 0 or sellsignal == 0 then 3 else 0;\n\n\n\nMidLine.definecolor(\&quot;Buy\&quot;, color.dark_green);\n\n\nMidLine.definecolor(\&quot;Sell\&quot;, color.red);\n\nMidLine.definecolor(\&quot;Neutral\&quot;, Color.PLUM);\n#MidLine.definecolor(\&quot;NeutralDown\&quot;, Color.orange);\nMidLine.definecolor(\&quot;HullMA_up\&quot;, color.blue);\n\nMidLine.definecolor(\&quot;HullMA_down\&quot;, color.orange);\n\nMidLine.AssignValueColor(if buysignal and HMA_Up then MidLine.color(\&quot;Buy\&quot;) else if buysignal and !HMA_Up then MidLine.color(\&quot;HullMA_down\&quot;) else if sellsignal and HMA_Down  then MidLine.color(\&quot;Sell\&quot;) else  if sellsignal and !HMA_Down  then MidLine.color(\&quot;HullMA_up\&quot;) else  MidLine.color(\&quot;neutral\&quot;));;#\n# if Momentum_Up then  RSI.color(\&quot;neutralUp\&quot;) else  RSI.color(\&quot;neutraldown\&quot;));\n\n\n\n\n\n\n\n#MidLine.definecolor(\&quot;Buy_Signal_Bars\&quot;, color.dark_green);\n\n#MidLine.definecolor(\&quot;Sell_Signal_Bars\&quot;, color.red);\n\n#MidLine.definecolor(\&quot;NeutralUp\&quot;, color.plum);\n\n#MidLine.definecolor(\&quot;NeutralDown\&quot;, color.orange);\n\n#MidLine.AssignValueColor(if Colorbars1 ==1 then MidLine.color(\&quot;buy_signal_bars\&quot;) else if colorbars1 ==2 then #MidLine.color(\&quot;Sell_Signal_bars\&quot;) else if Momentum_Up then  MidLine.color(\&quot;neutralUp\&quot;) else MidLine.color(\&quot;neutralDown\&quot;) );\n\n\nplot UpSignal = if (buysignal and price crosses above MidLine) then LowerBand else Double.NaN;\nplot DownSignal = if (sellsignal and price crosses below MidLine) then UpperBand else Double.NaN;\ninput showBreakoutSignals =no;\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\n\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\n\n\n\nMidLine.setlineWeight(3);\n\n\n\n\n\n\n######$$$$&quot;,name=&quot;_cbc1e041_e9b4_4664_b964_97e197ec9dfd&quot;}){hidden=&lt;T,inputsMap:TreeMap9{^(&quot;averageType&quot;,&quot;EXPONENTIAL&quot;),^(&quot;length&quot;,9),^(&quot;price&quot;,&quot;CLOSE&quot;),^(&quot;priceSlm&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap9}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# @new\n# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2009-2021\n#\n\n#wizard text: ADX crosses\n#wizard input: crossingType\n#wizard input: threshold\n#wizard text: Inputs: length:\n#wizard input: length\n\ninput length = 14;\ninput crossingType = {default above, below};\ninput threshold = 20;\ninput averageType = AverageType.WILDERS;\n\nplot signal = crosses(DMI(length, averageType).ADX, threshold, crossingType == CrossingType.above);\n\nsignal.DefineColor(\&quot;Above\&quot;, GetColor(0));\nsignal.DefineColor(\&quot;Below\&quot;, GetColor(1));\nsignal.AssignValueColor(if crossingType == CrossingType.above then signal.color(\&quot;Above\&quot;) else signal.color(\&quot;Below\&quot;));\n\nsignal.SetPaintingStrategy(if crossingType == CrossingType.above\n    then PaintingStrategy.BOOLEAN_ARROW_UP\n    else PaintingStrategy.BOOLEAN_ARROW_DOWN);&quot;,name=&quot;ADXCrossover&quot;}){plots{0:{lineWeight=5}}}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# @new\n# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2009-2021\n#\n# Source code isn\'t available.\n\nplot slowAvg = Double.NaN;\nplot fastAvg = Double.NaN;\nplot BuySignal = Double.NaN;\nplot SellSignal = Double.NaN;&quot;,name=&quot;PPS&quot;})),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# @new\n# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2010-2021\n#\n\ninput pricePerRowHeightMode = {default AUTOMATIC, TICKSIZE, CUSTOM};\ninput customRowHeight = 1.0;\ninput aggregationPeriod = {\&quot;1 min\&quot;, \&quot;2 min\&quot;, \&quot;3 min\&quot;, \&quot;4 min\&quot;, \&quot;5 min\&quot;, \&quot;10 min\&quot;, \&quot;15 min\&quot;, \&quot;20 min\&quot;, default \&quot;30 min\&quot;, \&quot;1 hour\&quot;, \&quot;2 hours\&quot;, \&quot;4 hours\&quot;, \&quot;Day\&quot;, \&quot;2 Days\&quot;, \&quot;3 Days\&quot;, \&quot;4 Days\&quot;, \&quot;Week\&quot;, \&quot;Month\&quot;, \&quot;Quarter\&quot;, \&quot;Year\&quot;};\ninput timePerProfile = {default CHART, MINUTE, HOUR, DAY, WEEK, MONTH, \&quot;OPT EXP\&quot;, BAR, YEAR};\ninput multiplier = 1;\ninput onExpansion = yes;\ninput profiles = 1000;\ninput showMonkeyBar = yes;\ninput showThePlayground = yes;\ninput thePlaygroundPercent = 70;\ninput opacity = 100;\ninput emphasizeFirstDigit = no;\ninput markOpenPrice = yes;\ninput markClosePrice = yes;\ninput volumeShowStyle = MonkeyVolumeShowStyle.NONE;\ninput showVolumeVA = yes;\ninput showVolumePoc = yes;\ninput theVolumePercent = 70;\ninput showInitialBalance = yes;\ninput initialBalanceRange = 3;\n\ndef period;\ndef yyyymmdd = getYyyyMmDd();\ndef seconds = secondsFromTime(0);\ndef year = getYear();\ndef month = year * 12 + getMonth();\ndef day_number = daysFromDate(first(yyyymmdd)) + getDayOfWeek(first(yyyymmdd));\ndef dom = getDayOfMonth(yyyymmdd);\ndef dow = getDayOfWeek(yyyymmdd - dom + 1);\ndef expthismonth = (if dow &gt; 5 then 27 else 20) - dow;\ndef exp_opt = month + (dom &gt; expthismonth);\ndef periodMin = Floor(seconds / 60 + day_number * 24 * 60);\ndef periodHour = Floor(seconds / 3600 + day_number * 24);\ndef periodDay = countTradingDays(Min(first(yyyymmdd), yyyymmdd), yyyymmdd) - 1;\ndef periodWeek = Floor(day_number / 7);\ndef periodMonth = month - first(month);\ndef periodQuarter = Ceil(month / 3) - first(Ceil(month / 3));\ndef periodYear = year - first(year);\n\nswitch (timePerProfile) {\ncase CHART:\n    period = 0;\ncase MINUTE:\n    period = periodMin;\ncase HOUR:\n    period = periodHour;\ncase DAY:\n    period = periodDay;\ncase WEEK:\n    period = periodWeek;\ncase MONTH:\n    period = periodMonth;\ncase \&quot;OPT EXP\&quot;:\n    period = exp_opt - first(exp_opt);\ncase BAR:\n    period = barNumber() - 1;\ncase YEAR:\n    period = periodYear;\n}\n\ndef count = compoundvalue(1, if period != period[1] then (getValue(count, 1) + period - period[1]) % multiplier else getValue(count, 1), 0);\ndef cond = compoundvalue(1, count &lt; count[1] + period - period[1], yes);\ndef height;\nswitch (pricePerRowHeightMode) {\ncase AUTOMATIC:\n    height = PricePerRow.AUTOMATIC;\ncase TICKSIZE:\n    height = PricePerRow.TICKSIZE;\ncase CUSTOM:\n    height = customRowHeight;\n}\n\ndef timeInterval;\ndef aggMultiplier;\nswitch (aggregationPeriod) {\ncase \&quot;1 min\&quot;:\n    timeInterval = periodMin;\n    aggMultiplier = 1;\ncase \&quot;2 min\&quot;:\n    timeInterval = periodMin;\n    aggMultiplier = 2;\ncase \&quot;3 min\&quot;:\n    timeInterval = periodMin;\n    aggMultiplier = 3;\ncase \&quot;4 min\&quot;:\n    timeInterval = periodMin;\n    aggMultiplier = 4;\ncase \&quot;5 min\&quot;:\n    timeInterval = periodMin;\n    aggMultiplier = 5;\ncase \&quot;10 min\&quot;:\n    timeInterval = periodMin;\n    aggMultiplier = 10;\ncase \&quot;15 min\&quot;:\n    timeInterval = periodMin;\n    aggMultiplier = 15;\ncase \&quot;20 min\&quot;:\n    timeInterval = periodMin;\n    aggMultiplier = 20;\ncase \&quot;30 min\&quot;:\n    timeInterval = periodMin;\n    aggMultiplier = 30;\ncase \&quot;1 hour\&quot;:\n    timeInterval = periodHour;\n    aggMultiplier = 1;\ncase \&quot;2 hours\&quot;:\n    timeInterval = periodHour;\n    aggMultiplier = 2;\ncase \&quot;4 hours\&quot;:\n    timeInterval = periodHour;\n    aggMultiplier = 4;\ncase \&quot;Day\&quot;:\n    timeInterval = periodDay;\n    aggMultiplier = 1;\ncase \&quot;2 Days\&quot;:\n    timeInterval = periodDay;\n    aggMultiplier = 2;\ncase \&quot;3 Days\&quot;:\n    timeInterval = periodDay;\n    aggMultiplier = 3;\ncase \&quot;4 Days\&quot;:\n    timeInterval = periodDay;\n    aggMultiplier = 4;\ncase \&quot;Week\&quot;:\n    timeInterval = periodWeek;\n    aggMultiplier = 1;\ncase \&quot;Month\&quot;:\n    timeInterval = periodMonth;\n    aggMultiplier = 1;\ncase \&quot;Quarter\&quot;:\n    timeInterval = periodQuarter;\n    aggMultiplier = 1;\ncase \&quot;Year\&quot;:\n    timeInterval = periodYear;\n    aggMultiplier = 1;\n}\n\ndef agg_count = compoundvalue(1, if timeInterval != timeInterval[1] then (getValue(agg_count, 1) + timeInterval - timeInterval[1]) % aggMultiplier else getValue(agg_count, 1), 0);\ndef agg_cond = compoundvalue(1,  agg_count &lt; agg_count[1] + timeInterval - timeInterval[1], yes);\n\ndef digit = compoundValue(1, if cond then 1 else agg_cond + getValue(digit, 1), 1);\n\nprofile monkey = monkeyBars(digit, \&quot;startNewProfile\&quot; = cond, \&quot;onExpansion\&quot; = onExpansion,\n\&quot;numberOfProfiles\&quot; = profiles, \&quot;pricePerRow\&quot; = height, \&quot;the playground percent\&quot; = thePlaygroundPercent,\n\&quot;emphasize first digit\&quot; = emphasizeFirstDigit, \&quot;volumeProfileShowStyle\&quot; = volumeShowStyle, \&quot;volumePercentVA\&quot; = theVolumePercent,\n \&quot;show initial balance\&quot; = showInitialBalance, \&quot;initial balance range\&quot; = initialBalanceRange);\ndef con = compoundValue(1, onExpansion, no);\ndef mbar = compoundvalue(1, if IsNaN(monkey.getPointOfControl()) and con then getValue(mbar, 1) else monkey.getPointOfControl(), monkey.getPointOfControl());\ndef hPG = compoundvalue(1, if IsNaN(monkey.getHighestValueArea()) and con then getValue(hPG, 1) else monkey.getHighestValueArea(), monkey.getHighestValueArea());\ndef lPG = compoundvalue(1, if IsNaN(monkey.getLowestValueArea()) and con then getValue(lPG, 1) else monkey.getLowestValueArea(), monkey.getLowestValueArea());\n\ndef hProfile = compoundvalue(1, if IsNaN(monkey.getHighest()) and con then getValue(hProfile, 1) else monkey.getHighest(), monkey.getHighest());\ndef lProfile = compoundvalue(1, if IsNaN(monkey.getLowest()) and con then getValue(lProfile, 1) else monkey.getLowest(), monkey.getLowest());\ndef plotsDomain = IsNaN(close) == onExpansion;\n\nplot MB = if plotsDomain then mbar else Double.NaN;\nplot ProfileHigh = if plotsDomain then hProfile else Double.NaN;\nplot ProfileLow = if plotsDomain then lProfile else Double.NaN;\nplot PGHigh = if plotsDomain then hPG else Double.NaN;\nplot PGLow = if plotsDomain then lPG else Double.NaN;\n\nDefineGlobalColor(\&quot;Monkey Bar\&quot;, GetColor(4));\nDefineGlobalColor(\&quot;The Playground\&quot;, GetColor(3));\nDefineGlobalColor(\&quot;Open Price\&quot;, GetColor(1));\nDefineGlobalColor(\&quot;Close Price\&quot;, GetColor(1));\nDefineGlobalColor(\&quot;Volume\&quot;, GetColor(8));\nDefineGlobalColor(\&quot;Volume Value Area\&quot;, GetColor(2));\nDefineGlobalColor(\&quot;Volume Point of Control\&quot;, GetColor(3));\nDefineGlobalColor(\&quot;Initial Balance\&quot;, GetColor(7));\n\nmonkey.show(color.red, if showMonkeyBar then globalColor(\&quot;Monkey Bar\&quot;) else color.current,\n if showThePlayground then globalColor(\&quot;The Playground\&quot;) else color.current,\n opacity, if markOpenPrice then globalColor(\&quot;Open Price\&quot;) else color.current,\n if markClosePrice then globalColor(\&quot;Close Price\&quot;) else color.current,\n if showInitialBalance then globalColor(\&quot;Initial Balance\&quot;) else color.current,\n globalColor(\&quot;Volume\&quot;),\n if showVolumeVA then globalColor(\&quot;Volume Value Area\&quot;) else color.current,\n if showVolumePOC then globalColor(\&quot;Volume Point of Control\&quot;) else color.current);\nMB.SetDefaultColor(globalColor(\&quot;Monkey Bar\&quot;));\nMB.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nPGHigh.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nPGLow.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nPGHigh.SetDefaultColor(globalColor(\&quot;The Playground\&quot;));\nPGLow.SetDefaultColor(globalColor(\&quot;The Playground\&quot;));\nProfileHigh.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nProfileLow.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nProfileHigh.SetDefaultColor(GetColor(3));\nProfileLow.SetDefaultColor(GetColor(3));\nProfileHigh.hide();\nProfileLow.hide();&quot;,name=&quot;MonkeyBars&quot;}){inputsMap:TreeMap10{^(&quot;onExpansion&quot;,&lt;F),^(&quot;timePerProfile&quot;,&quot;DAY&quot;)},inputsMap=@TreeMap10})}},!get(#%4.SubgraphId(&quot;Volume&quot;)){height=80},^(#%4.SubgraphId(&quot;Subgraph1&quot;),#%4.SubgraphStorableModel{height=105,storableIndicators.+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# OBV/OBV_MA  by MerryDay 5/24/20\n#When the OBV (On Balance Volume) crosses OBV’s 20-period moving average, the divergence signal of a trend reversal is confirmed. While research indicates a default of 20 is norm, I have been using a 34 period.  The difference is slight.\n# If the OBV is greater than the OBV ma then a green cloud appears under the OBV.\n\ndeclare lower;\ninput length = 20; #default = 20\ninput price = close;\n\nplot OBV = TotalSum(Sign(price - price[1]) * volume);\nplot OBVma = Average(OBV, length);\n\ndef aboveMA   = OBV &gt;= OBVma ;\n\n\n## LIPSTICK ##\nDefineGlobalColor(\&quot;LabelGreen\&quot;, CreateColor(0, 190, 0)) ;\nDefineGlobalColor(\&quot;PaleGreen\&quot;, CreateColor(180, 220, 180)) ;\nDefineGlobalColor(\&quot;PaleRed\&quot;, CreateColor (220, 200, 200)) ;\nDefineGlobalColor(\&quot;DullGold\&quot;, CreateColor(220, 220, 128)) ;\nDefineGlobalColor(\&quot;BlueJeans\&quot;, CreateColor(0, 150, 200)) ;\nOBVma.SetDefaultColor(GlobalColor(\&quot;DullGold\&quot;));\nOBVma.SetLineWeight(3);\nOBVma.HideBubble();\nOBVma.HideTitle();\n\nOBV.SetPaintingStrategy(PaintingStrategy.LINE_VS_TRIANGLES);\nOBV.SetLineWeight(2);\nOBV.HideBubble();\nOBV.HideTitle();\nOBV.DefineColor(\&quot;Up\&quot;, GlobalColor(\&quot;LabelGreen\&quot;));\nOBV.DefineColor(\&quot;Weak\&quot;, Color.LIGHT_GRAY);\nOBV.DefineColor(\&quot;Down\&quot;, GlobalColor(\&quot;PaleRed\&quot;));\nOBV.AssignValueColor(if OBV &gt; OBVma  then OBV.Color(\&quot;Up\&quot;) else OBV.Color(\&quot;Down\&quot;));\n\nplot OBVlow = if  OBV crosses below OBVma then 1 else 0;\nOBVlow.hide();\n\nplot crossup = if OBV crosses above OBVma then OBV else double.NaN;\ncrossup.HideBubble() ;\ncrossup.HideTitle() ;\ncrossup.SetPaintingStrategy(PaintingStrategy.TRIANGLES);\ncrossup.SetLineWeight(5);\ncrossup.SetDefaultColor(color.blue) ;\nplot crossdown = if OBV crosses below OBVma then OBV else double.NaN;\ncrossdown.HideBubble() ;\ncrossdown.HideTitle() ;\ncrossdown.SetPaintingStrategy(PaintingStrategy.TRIANGLES);\ncrossdown.SetLineWeight(5);\ncrossdown.SetDefaultColor(color.pink) ;\n\nAddCloud(OBV, OBVma, Color.LIGHT_GREEN, Color.PINK);\n\n#Alert(crosses_above_MA, \&quot;What\'s going to happen?\&quot; + GetSymbol(), Alert.BAR, Sound.bell);\nDefineGlobalColor(\&quot;MyCyan\&quot;, CreateColor(150, 0, 255)) ;\nDefineGlobalColor(\&quot;Sell\&quot;, CreateColor(255, 150, 0)) ;\n\n\n# End of OBV/OBV_MA &quot;,name=&quot;_5a6a53b8_41ce_3ef6_a10e_07a88a720b77&quot;}))}),^(#%4.SubgraphId(&quot;Subgraph44&quot;),#%4.SubgraphStorableModel{height=105,storableIndicators.+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;#converted from mobisu macd to ppo\n# this is actually macd and sqz indicator in one\n# added pivots\n\ndeclare lower;\n\ninput fastPeriod   = 12; #9/18/6 for 5m\ninput slowPeriod   = 26;\ninput signalPeriod = 9;\ninput price        = close;\ninput show = yes;\n\n\ndef fastEma   = ExpAverage( price, fastPeriod );\ndef slowEma   = ExpAverage( price, slowPeriod );\ndef periodOK  = fastPeriod &lt; slowPeriod;\nAddLabel( !periodOK, \&quot;ERROR: fastPeriod MUST be less than slowPeriod\&quot; );\ndef _ppo      = if periodOK then ((fastEma - slowEma) / slowEma) * 100 else 0;\ndef _signal   = ExpAverage( _ppo, signalPeriod );\n\n# generic plots wiht colors\nplot pmain   = _ppo;\npmain.SetDefaultColor( Color.BLUE );\npmain.SetLineWeight(2);\npmain.AssignValueColor(if pmain &lt; 0 and pmain &lt; pmain[1]  then Color.RED\n                       else if pmain &lt; 0 and  pmain &gt; pmain[1] then Color.DARK_GREEN\n                       else if pmain &gt; 0 and pmain &gt; pmain[1] then Color.GREEN\n                       else Color.DARK_RED);\npmain.HideBubble();\n\nplot mainEma   = _signal;\nmainEma.SetDefaultColor( Color.RED );\nmainEma.HideBubble();\nAddCloud(pmain, mainEma, Color.GREEN, Color.RED);\n\n#diff as histogram\nplot diff    = _ppo - _signal;\ndiff.SetDefaultColor(GetColor(5));\ndiff.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);\ndiff.SetLineWeight(3);\ndiff.DefineColor(\&quot;Positive and Up\&quot;, Color.GREEN);\ndiff.DefineColor(\&quot;Positive and Down\&quot;, Color.DARK_GREEN);\ndiff.DefineColor(\&quot;Negative and Down\&quot;, Color.RED);\ndiff.DefineColor(\&quot;Negative and Up\&quot;, Color.DARK_RED);\ndiff.AssignValueColor(if diff &gt;= 0 then if diff &gt; diff[1] then diff.Color(\&quot;Positive and Up\&quot;) else diff.Color(\&quot;Positive and Down\&quot;) else if diff &lt; diff[1] then diff.Color(\&quot;Negative and Down\&quot;) else diff.Color(\&quot;Negative and Up\&quot;));\n\n\n#mobius divergence calc\ndef pmainh = CompoundValue(1, \n            if pmain &lt; 0 then Double.NaN\n            else if pmain crosses above 0  then pmain\n            else if pmain &gt; 0 and  pmain &gt; pmainh[1]\n            then pmain else pmainh[1], 0);\n\ndef Valueh = CompoundValue(1, \n             if pmain &lt; 0 then Double.NaN\n             else if pmain crosses above 0  then high\n             else if pmain &gt; 0 and high &gt; Valueh[1] then high\n             else Valueh[1], 0);\n\nplot divLowSignal = if pmain &gt; 0 and  high &gt; Valueh[1] and pmain &lt; pmainh[1] then 0\n                 else Double.NaN;\ndivLowSignal.SetPaintingStrategy(PaintingStrategy.SQUARES);\ndivLowSignal.SetLineWeight(5);\ndivLowSignal.SetDefaultColor(Color.dark_orange);\n\ndef pmainL = CompoundValue(1, if pmain &gt; 0 then Double.NaN\n                             else if pmain crosses below 0  then pmain\n                             else if pmain &lt; 0 and pmain &lt; pmainl[1] then pmain\n                             else pmainl[1], 0);\n\ndef ValueL = CompoundValue(1, if pmain &gt; 0  then Double.NaN\n                              else if pmain crosses below 0 then low\n                              else if pmain &lt; 0 and low &lt; Valuel[1] then low\n                              else Valuel[1], 0);\n\nplot divUpSignall = if pmain &lt; 0 and   low &lt; Valuel[1] and pmain &gt; pmainl[1] then 0\n                 else Double.NaN;\ndivupSignall.SetPaintingStrategy(PaintingStrategy.SQUARES);\ndivUpSignall.SetLineWeight(5);\ndivUPSignall.SetDefaultColor(Color.blue);\n\n\n\n#zeroline\nplot zeroLine = 0;\nzeroLine.SetPaintingStrategy(PaintingStrategy.LINE);\nzeroLine.SetLineWeight(1);\nzeroLine.SetDefaultColor(Color.BLACK);\n\n\n#pivots\n\ndef ptrend = pmain;\ndef prange = 2;\ndef pivotHigh = if IsNaN(ptrend[-1]) then 0  else Lowest(ptrend, prange)[1] &gt; ptrend and Lowest(ptrend, prange)[-prange] &gt; ptrend ;\ndef pivotLow =  if  IsNaN(ptrend[-1]) then 0  else Highest(ptrend, prange)[1] &lt; ptrend and Highest(ptrend, prange)[-prange] &lt; ptrend ;\n#study\nplot plotPH = if pivotHigh and show then ptrend else Double.NaN;\nplotPH.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\nplotPH.SetDefaultColor(Color.GREEN);\n\nplot phline = if pivotHigh then pmain else Double.NaN;\nphline.SetDefaultColor(Color.DARK_GREEN);\nphline.EnableApproximation();phline.Hide();\n#\nplot plotPL = if pivotLow and show then ptrend else Double.NaN;\nplotPL.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\nplotPL.SetDefaultColor(Color.RED);\n\nplot plline = if pivotLow then pmain else Double.NaN;\nplline.SetDefaultColor(Color.RED);\nplline.EnableApproximation(); plline.hide();&quot;,name=&quot;_58fa56d7_7ed3_4ff5_b1a8_d0c87dfe1afc&quot;}))}),^(#%4.SubgraphId(&quot;Subgraph46&quot;),#%4.SubgraphStorableModel{height=105,storableIndicators.+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;#Created by Buy Low and given permission to share\n#Renamed SMI Trigger System by Hguru\n#IronRod Lower (may2015)- hull smoothed SMI with AwsomeOscillator histogram\n#  ribbonStudy added- based on distance between midprice and ema(20)\n# This is the smi-based lower Ive been using for quite a while:  I look for red on red and green on green for trading, where for example both the cloud is red and the smi dashed line is red.  Most reliable and easy to read signals Ive found.\n\n#Look for the Dashed lines to turn color and Avg line to cross the Dash line for an entry but with more risk, next entry when avg line and dashed color line  crosses the 40 line. Next and probably the best risk is when the avg line and dashed line cross the zero line and Dashed line and cloud are the same color. I use this with a MACD crossover arrow setting at 5,13,4 or 5,13,6 or 3,13,6\n\n#Not 100% on the ADX vertical line and histogram this might need to be adjusted to match a normal ADX line. The ADX vertical line can be turned off in the edit study. The hisotgram can be hidden as well. \n\n#Use with the Upper matching MP_SMIandVerticalLineWarning System  here&gt;&gt;&gt;  http://tos.mx/mDvxaX \n\n#use setting gridsize .10 for/CL for tick charts and lower agg time frames and 1.0 for 1 hour and Daily.\n\ndeclare lower;\n#SMI engine\ninput gridsize = 1.0;\ninput aoscale = 1;\ninput smiscale = 100;\ninput audio = yes;\ninput label = yes;\ninput smilimit = 40.0;\ninput adxvline = yes;\ndef aofast = 5;\ndef aoslow = 34;\n\ndef percentDLength = 3;\ndef percentKLength = 5;\ndef smihull = 3;\ndef anglescalingfactor = 1 / gridsize;\n\ndef min_low = Lowest(low, percentKLength);\ndef max_high = Highest(high, percentKLength);\ndef rel_diff = close - (max_high + min_low) / 2;\ndef diffx = max_high - min_low;\n\ndef avgrel = ExpAverage(ExpAverage(rel_diff, percentDLength), percentDLength);\ndef avgdiff = ExpAverage(ExpAverage(diffx, percentDLength), percentDLength);\n#plot SMI =  if avgdiff != 0 then avgrel / (avgdiff / 2) * smiscale else 0;\nplot SMI = ExpAverage( if avgdiff != 0 then avgrel / (avgdiff / 2) * smiscale else 0, 3);\n#smi.setDefaultColor(getColor(1));\nSMI.DefineColor(\&quot;Up\&quot;, Color.DARK_GREEN);\nSMI.DefineColor(\&quot;Down\&quot;, Color.DOWNTICK);\nSMI.DefineColor(\&quot;flat\&quot;, Color.GRAY);\nSMI.AssignValueColor(if SMI &gt;= SMI[1] then SMI.Color(\&quot;up\&quot;) else SMI.Color(\&quot;down\&quot;));\nSMI.SetLineWeight(4);\nSMI.SetStyle(Curve.SHORT_DASH);\n\nplot SMI1 = if avgdiff != 0 then avgrel / (avgdiff / 2) * smiscale else 0;\nSMI1.SetDefaultColor(Color.GRAY);\n\nplot upper = smilimit;\nupper.SetDefaultColor(Color.BLUE);\n\nplot lower = -smilimit;\nlower.SetDefaultColor(Color.BLUE);\n\n# Awesome Oscillator\n\nplot Zero = 0;\nZero.SetDefaultColor(Color.DARK_GRAY);\n\n#AddCloud(SMI, smilimit, Color.GREEN, Color.LIGHT_GRAY);\n#AddCloud(-smilimit, SMI, Color.RED, Color.LIGHT_GRAY);\nAddCloud(SMI, 0, Color.LIGHT_GREEN, CreateColor(255, 50, 50));\n\nAlert(audio and SMI crosses above 0, \&quot;SMI Long\&quot;,  Alert.BAR, Sound.Ring);\nAlert(audio and SMI crosses below 0, \&quot;SMI Short\&quot;,  Alert.BAR, Sound.Ring);\nAlert(audio and SMI crosses smilimit, \&quot;\&quot;, Alert.BAR, Sound.Bell);\nupper.SetDefaultColor(Color.RED);\n#upper.SetStyle(Curve.SHORT_DASH);\nlower.SetDefaultColor(Color.UPTICK);\n#lower.SetStyle(Curve.SHORT_DASH);\n\n#AddCloud(diff, SMI, Color.DOWNTICK, Color.UPTICK);\nAddLabel(label and yes, \&quot;Dashed= SMI, cloud w/limit; Histogram = mAwesomeOscillator\&quot; , Color.BLUE);\n \n#adx histogram\ninput length = 10;\ninput averageType = AverageType.WILDERS;\n\nplot ADX = (DMI(length, averageType).ADX) - 18;\nADX.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);\nADX.SetLineWeight(1);\nADX.DefineColor(\&quot;Up\&quot;, Color.BLUE);\nADX.DefineColor(\&quot;Down\&quot;, Color.DARK_ORANGE);\nADX.AssignValueColor(\n      if ADX &gt;= ADX[1] then ADX.Color(\&quot;up\&quot;)\n else ADX.Color(\&quot;down\&quot;));\nplot adxcaut = 20;\nadxcaut.SetDefaultColor(Color.DARK_ORANGE);\n\nAddVerticalLine (adxvline and ADX &gt;= 1 and ADX &lt; ADX[1] and ADX[1] &gt; ADX[2], \&quot;mADX\&quot;, Color.BLUE);\n#alert(ADX1 &gt;= 1 and ADX1 &lt; ADX1[1] and ADX1[1] &gt; ADX1[2], alert.bar, sound.bell);\n &quot;,name=&quot;_f8ca8355_3348_45f0_b0ba_f9e021275c98&quot;}){alerts:LocalAlertArray1,alerts=@LocalAlertArray1})}),^(#%4.SubgraphId(&quot;Subgraph48&quot;),#%4.SubgraphStorableModel{height=104,storableIndicators.+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# @new\n# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2009-2021\n#\n# Source code isn\'t available.\n\ndeclare lower;\n\ninput price = CLOSE;\ninput length = 20;\ninput nK = 1.5;\ninput nBB = 2.0;\ninput alertLine = 1.0;\n\nplot Histogram = Double.NaN;\nplot VolComp = Double.NaN;\nplot SqueezeAlert = Double.NaN;&quot;,name=&quot;TTM_Squeeze&quot;}){alerts:LocalAlertArray2{0:{enabled=&lt;F},1:{enabled=&lt;F}},alerts=@LocalAlertArray2})})}}" SYMBOL="DCTH" SYMBOL_GROUP="2" VERTICAL="false" VISIBLE="true" WEIGHT="3.506981740064447"/>
            <DASHBOARD SYMBOL="AAPL" SYMBOL_GROUP="2" VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <LEVEL_II SYMBOL="NVDA" SYMBOL_GROUP="2" VERTICAL="false" VISIBLE="false" WEIGHT="1.0">
              <SORTING COLUMN="BID" ORDER="-1"/>
              <SORTING1 COLUMN="ASK" ORDER="1"/>
            </LEVEL_II>
            <LIVE_NEWS SYMBOL="DCTH" SYMBOL_GROUP="2" VERTICAL="false" VISIBLE="false" WEIGHT="1.0">
              <SORTING COLUMN="TIME" ORDER="-1"/>
            </LIVE_NEWS>
            <PHASE_SCORES VERTICAL="false" VISIBLE="false" WEIGHT="2.0"/>
            <TIME_SALES VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <TRADE CONFIGURATION_NAME="SINGLE" ORDER_RULES_SET="STOCK" ORDER_TYPE="LIMIT" OS_AUTO="false" OS_EXPANDED="false" OS_TIF="DAY" QTY="100.0" QTY_STEP="1.0" TEMPLATE="SINGLE" TRADE_BUTTONS="BUY_MKT;SELL_MKT;MULTI_CANCEL;REVERSE;FLAT;SECOND_LINE;QUANTITY;AUTO_SEND;ORDER_SETUP" VISIBLE="false">
              <OCO_STOP>
                <TRG_0 TRG_ENBL="true" TRG_LINK="ASK_BID" TRG_OFFSET_MODE="TICK" TRG_OT="STOP" TRG_SETUP="10.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AA="10.0" AAL="10.0" AAP="10.0" AAPL="10.0" ABG="10.0" ABML="10.0" ACER="10.0" ADMP="10.0" AEG="10.0" AEHL="10.0" AFI="10.0" AJRD="10.0" AKU="10.0" ALEC="10.0" AMC="10.0" AMCR="10.0" AMD="10.0" AMRS="10.0" AMTX="10.0" AMZN="10.0" ANIX="10.0" ANPC="10.0" ANTE="10.0" AP="10.0" APOP="10.0" APTO="10.0" AR="10.0" AREC="10.0" ARES="10.0" ARLO="10.0" ASLEW="10.0" ATHM="10.0" ATIF="10.0" ATNF="10.0" AUY="10.0" AVCO="10.0" AXL="10.0" AZN="10.0" AZRX="10.0" BABA="10.0" BBD="10.0" BBDC="10.0" BFT="10.0" BILI="10.0" BLIN="10.0" BMY="10.0" BOX="10.0" BP="10.0" BRQS="10.0" BSGM="10.0" BURL="10.0" BWAY="10.0" BXRX="10.0" BYFC="10.0" CAKE="10.0" CAL="10.0" CCI="10.0" CCIV="10.0" CCJ="10.0" CCL="10.0" CEQPP="10.0" CHNG="10.0" CHX="10.0" CIDM="10.0" CIIC="10.0" CLBS="10.0" CLDR="10.0" CLEU="10.0" CLSN="10.0" CLVS="10.0" CNNE="10.0" COHN="10.0" COMP="10.0" CPHI="10.0" CPRX="10.0" CRBP="10.0" CRTD="10.0" CSCO="10.0" CTIC="10.0" CUB="10.0" CVX="10.0" DCTH="10.0" DHT="10.0" DIS="10.0" DISCK="10.0" DNN="10.0" DOX="10.0" DPW="10.0" DS="10.0" DSKE="10.0" DTSS="10.0" EARS="10.0" EBS="10.0" EDTK="10.0" EMAN="10.0" ENPH="10.0" ETSY="10.0" EURN="10.0" EVRG="10.0" EW="10.0" EWA="10.0" EXEL="10.0" EYE="10.0" EYES="10.0" FAST="10.0" FB="10.0" FCAC="10.0" FLR="10.0" FLY="10.0" FPRX="10.0" FSLR="10.0" FSR="10.0" FUSE="10.0" FUV="10.0" GEL="10.0" GLOP="10.0" GME="10.0" GMER="10.0" GNCA="10.0" GOCO="10.0" HBI="10.0" HCHC="10.0" HENKY="10.0" HPE="10.0" HPQ="10.0" HPR="10.0" HTBX="10.0" HTHIY="10.0" HTZ="10.0" HUGE="10.0" HYLN="10.0" HZON="10.0" IDEX="10.0" IGSB="10.0" IMTE="10.0" INFI="10.0" INFY="10.0" ING="10.0" INO="10.0" INPX="10.0" INTC="10.0" INUV="10.0" INVO="10.0" INVU="10.0" IWM="10.0" IZEA="10.0" JE="10.0" JENGQ="10.0" JFIN="10.0" JOB="10.0" K="10.0" KBR="10.0" KEYS="10.0" KMPH="10.0" KMX="10.0" KR="10.0" LAZR="10.0" LCI="10.0" LCTX="10.0" LEAF="10.0" LIVX="10.0" LKQ="10.0" LODE="10.0" LRTNF="10.0" LUV="10.0" MARA="10.0" MBT="10.0" MDII="10.0" MESA="10.0" METX="10.0" MFGP="10.0" MMDA1="10.0" MRIN="10.0" MSFT="10.0" MTEM="10.0" MU="10.0" MVIS="10.0" MX="10.0" MYO="10.0" MYSZ="10.0" NCLH="10.0" NDX="10.0" NEOS="10.0" NGD="10.0" NGL="10.0" NIO="10.0" NLOK="10.0" NLSN="10.0" NLSP="10.0" NLST="10.0" NNVC="10.0" NOK="10.0" NOV="10.0" NQ="10.0" NSLP="10.0" NTP="10.0" NUZE="10.0" NVDA="10.0" NXE="10.0" OCGN="10.0" OGEN="10.0" OGI="10.0" OHI="10.0" OI="10.0" OLO="10.0" OPEN="10.0" OPGN="10.0" ORCL="10.0" ORMP="10.0" OTIS="10.0" OVID="10.0" PAA="10.0" PAAS="10.0" PERI="10.0" PFF="10.0" PGX="10.0" PHM="10.0" PNC="10.0" POTX="10.0" PPG="10.0" PPL="10.0" PTE="10.0" QQQ="10.0" QSR="10.0" RAD="10.0" RAIL="10.0" RIBT="10.0" RKT="10.0" RMO="10.0" RP="10.0" RPAY="10.0" RRD="10.0" RSX="10.0" RUT="10.0" RVLV="10.0" RYCEY="10.0" SAVA="10.0" SAVE="10.0" SGLB="10.0" SID="10.0" SIFY="10.0" SINO="10.0" SINT="10.0" SIOX="10.0" SIRI="10.0" SITC="10.0" SIVR="10.0" SJI="10.0" SKLZ="10.0" SKT="10.0" SLDB="10.0" SLQT="10.0" SNAP="10.0" SNCA="10.0" SNOA="10.0" SOGO="10.0" SOS="10.0" SPCB="10.0" SPD="10.0" SPRT="10.0" SPX="10.0" SPY="10.0" SQ="10.0" STON="10.0" SUNW="10.0" SWI="10.0" SWK="10.0" T="10.0" TGTX="10.0" TH="10.0" THTX="10.0" TSIA="10.0" TSLA="10.0" TSLAX="10.0" TZA="10.0" U="10.0" UAL="10.0" UAMY="10.0" UEC="10.0" UIS="10.0" ULTA="10.0" USAC="10.0" USWS="10.0" UTZ="10.0" UUUU="10.0" UXIN="10.0" VALE="10.0" VEU="10.0" VJET="10.0" VSTM="10.0" VTRS="10.0" VVOS="10.0" VWO="10.0" WAFU="10.0" WETF="10.0" WKEY="10.0" X="10.0" XELA="10.0" XERS="10.0" XL="10.0" XLP="10.0" XLU="10.0" XTLB="10.0" YGMZ="10.0" ZKIN="10.0" ZM="10.0"/>
                </TRG_0>
              </OCO_STOP>
              <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="1.0" TRG_TIF="DAY">
                <OFFSET_PER_SYMBOL AA="1.0" AAL="1.0" AAP="1.0" AAPL="1.0" ABG="1.0" ABML="1.0" ACER="1.0" ADMP="1.0" AEG="1.0" AEHL="1.0" AFI="1.0" AJRD="1.0" AKU="1.0" ALEC="1.0" AMC="1.0" AMCR="1.0" AMD="1.0" AMRS="1.0" AMTX="1.0" AMZN="1.0" ANIX="1.0" ANPC="1.0" ANTE="1.0" AP="1.0" APOP="1.0" APTO="1.0" AR="1.0" AREC="1.0" ARES="1.0" ARLO="1.0" ASLEW="1.0" ATHM="1.0" ATIF="1.0" ATNF="1.0" AUY="1.0" AVCO="1.0" AXL="1.0" AZN="1.0" AZRX="1.0" BABA="1.0" BBD="1.0" BBDC="1.0" BFT="1.0" BILI="1.0" BLIN="1.0" BMY="1.0" BOX="1.0" BP="1.0" BRQS="1.0" BSGM="1.0" BURL="1.0" BWAY="1.0" BXRX="1.0" BYFC="1.0" CAKE="1.0" CAL="1.0" CCI="1.0" CCIV="1.0" CCJ="1.0" CCL="1.0" CEQPP="1.0" CHNG="1.0" CHX="1.0" CIDM="1.0" CIIC="1.0" CLBS="1.0" CLDR="1.0" CLEU="1.0" CLSN="1.0" CLVS="1.0" CNNE="1.0" COHN="1.0" COMP="1.0" CPHI="1.0" CPRX="1.0" CRBP="1.0" CRTD="1.0" CSCO="1.0" CTIC="1.0" CUB="1.0" CVX="1.0" DCTH="1.0" DHT="1.0" DIS="1.0" DISCK="1.0" DNN="1.0" DOX="1.0" DPW="1.0" DS="1.0" DSKE="1.0" DTSS="1.0" EARS="1.0" EBS="1.0" EDTK="1.0" EMAN="1.0" ENPH="1.0" ETSY="1.0" EURN="1.0" EVRG="1.0" EW="1.0" EWA="1.0" EXEL="1.0" EYE="1.0" EYES="1.0" FAST="1.0" FB="1.0" FCAC="1.0" FLR="1.0" FLY="1.0" FPRX="1.0" FSLR="1.0" FSR="1.0" FUSE="1.0" FUV="1.0" GEL="1.0" GLOP="1.0" GME="1.0" GMER="1.0" GNCA="1.0" GOCO="1.0" HBI="1.0" HCHC="1.0" HENKY="1.0" HPE="1.0" HPQ="1.0" HPR="1.0" HTBX="1.0" HTHIY="1.0" HTZ="1.0" HUGE="1.0" HYLN="1.0" HZON="1.0" IDEX="1.0" IGSB="1.0" IMTE="1.0" INFI="1.0" INFY="1.0" ING="1.0" INO="1.0" INPX="1.0" INTC="1.0" INUV="1.0" INVO="1.0" INVU="1.0" IWM="1.0" IZEA="1.0" JE="1.0" JENGQ="1.0" JFIN="1.0" JOB="1.0" K="1.0" KBR="1.0" KEYS="1.0" KMPH="1.0" KMX="1.0" KR="1.0" LAZR="1.0" LCI="1.0" LCTX="1.0" LEAF="1.0" LIVX="1.0" LKQ="1.0" LODE="1.0" LRTNF="1.0" LUV="1.0" MARA="1.0" MBT="1.0" MDII="1.0" MESA="1.0" METX="1.0" MFGP="1.0" MMDA1="1.0" MRIN="1.0" MSFT="1.0" MTEM="1.0" MU="1.0" MVIS="1.0" MX="1.0" MYO="1.0" MYSZ="1.0" NCLH="1.0" NDX="1.0" NEOS="1.0" NGD="1.0" NGL="1.0" NIO="1.0" NLOK="1.0" NLSN="1.0" NLSP="1.0" NLST="1.0" NNVC="1.0" NOK="1.0" NOV="1.0" NQ="1.0" NSLP="1.0" NTP="1.0" NUZE="1.0" NVDA="1.0" NXE="1.0" OCGN="1.0" OGEN="1.0" OGI="1.0" OHI="1.0" OI="1.0" OLO="1.0" OPEN="1.0" OPGN="1.0" ORCL="1.0" ORMP="1.0" OTIS="1.0" OVID="1.0" PAA="1.0" PAAS="1.0" PERI="1.0" PFF="1.0" PGX="1.0" PHM="1.0" PNC="1.0" POTX="1.0" PPG="1.0" PPL="1.0" PTE="1.0" QQQ="1.0" QSR="1.0" RAD="1.0" RAIL="1.0" RIBT="1.0" RKT="1.0" RMO="1.0" RP="1.0" RPAY="1.0" RRD="1.0" RSX="1.0" RUT="1.0" RVLV="1.0" RYCEY="1.0" SAVA="1.0" SAVE="1.0" SGLB="1.0" SID="1.0" SIFY="1.0" SINO="1.0" SINT="1.0" SIOX="1.0" SIRI="1.0" SITC="1.0" SIVR="1.0" SJI="1.0" SKLZ="1.0" SKT="1.0" SLDB="1.0" SLQT="1.0" SNAP="1.0" SNCA="1.0" SNOA="1.0" SOGO="1.0" SOS="1.0" SPCB="1.0" SPD="1.0" SPRT="1.0" SPX="1.0" SPY="1.0" SQ="1.0" STON="1.0" SUNW="1.0" SWI="1.0" SWK="1.0" T="1.0" TGTX="1.0" TH="1.0" THTX="1.0" TSIA="1.0" TSLA="1.0" TSLAX="1.0" TZA="1.0" U="1.0" UAL="1.0" UAMY="1.0" UEC="1.0" UIS="1.0" ULTA="1.0" USAC="1.0" USWS="1.0" UTZ="1.0" UUUU="1.0" UXIN="1.0" VALE="1.0" VEU="1.0" VJET="1.0" VSTM="1.0" VTRS="1.0" VVOS="1.0" VWO="1.0" WAFU="1.0" WETF="1.0" WKEY="1.0" X="1.0" XELA="1.0" XERS="1.0" XL="1.0" XLP="1.0" XLU="1.0" XTLB="1.0" YGMZ="1.0" ZKIN="1.0" ZM="1.0"/>
              </TRG_0>
              <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-1.0" TRG_TIF="DAY">
                <OFFSET_PER_SYMBOL AA="-1.0" AAL="-1.0" AAP="-1.0" AAPL="-1.0" ABG="-1.0" ABML="-1.0" ACER="-1.0" ADMP="-1.0" AEG="-1.0" AEHL="-1.0" AFI="-1.0" AJRD="-1.0" AKU="-1.0" ALEC="-1.0" AMC="-1.0" AMCR="-1.0" AMD="-1.0" AMRS="-1.0" AMTX="-1.0" AMZN="-1.0" ANIX="-1.0" ANPC="-1.0" ANTE="-1.0" AP="-1.0" APOP="-1.0" APTO="-1.0" AR="-1.0" AREC="-1.0" ARES="-1.0" ARLO="-1.0" ASLEW="-1.0" ATHM="-1.0" ATIF="-1.0" ATNF="-1.0" AUY="-1.0" AVCO="-1.0" AXL="-1.0" AZN="-1.0" AZRX="-1.0" BABA="-1.0" BBD="-1.0" BBDC="-1.0" BFT="-1.0" BILI="-1.0" BLIN="-1.0" BMY="-1.0" BOX="-1.0" BP="-1.0" BRQS="-1.0" BSGM="-1.0" BURL="-1.0" BWAY="-1.0" BXRX="-1.0" BYFC="-1.0" CAKE="-1.0" CAL="-1.0" CCI="-1.0" CCIV="-1.0" CCJ="-1.0" CCL="-1.0" CEQPP="-1.0" CHNG="-1.0" CHX="-1.0" CIDM="-1.0" CIIC="-1.0" CLBS="-1.0" CLDR="-1.0" CLEU="-1.0" CLSN="-1.0" CLVS="-1.0" CNNE="-1.0" COHN="-1.0" COMP="-1.0" CPHI="-1.0" CPRX="-1.0" CRBP="-1.0" CRTD="-1.0" CSCO="-1.0" CTIC="-1.0" CUB="-1.0" CVX="-1.0" DCTH="-1.0" DHT="-1.0" DIS="-1.0" DISCK="-1.0" DNN="-1.0" DOX="-1.0" DPW="-1.0" DS="-1.0" DSKE="-1.0" DTSS="-1.0" EARS="-1.0" EBS="-1.0" EDTK="-1.0" EMAN="-1.0" ENPH="-1.0" ETSY="-1.0" EURN="-1.0" EVRG="-1.0" EW="-1.0" EWA="-1.0" EXEL="-1.0" EYE="-1.0" EYES="-1.0" FAST="-1.0" FB="-1.0" FCAC="-1.0" FLR="-1.0" FLY="-1.0" FPRX="-1.0" FSLR="-1.0" FSR="-1.0" FUSE="-1.0" FUV="-1.0" GEL="-1.0" GLOP="-1.0" GME="-1.0" GMER="-1.0" GNCA="-1.0" GOCO="-1.0" HBI="-1.0" HCHC="-1.0" HENKY="-1.0" HPE="-1.0" HPQ="-1.0" HPR="-1.0" HTBX="-1.0" HTHIY="-1.0" HTZ="-1.0" HUGE="-1.0" HYLN="-1.0" HZON="-1.0" IDEX="-1.0" IGSB="-1.0" IMTE="-1.0" INFI="-1.0" INFY="-1.0" ING="-1.0" INO="-1.0" INPX="-1.0" INTC="-1.0" INUV="-1.0" INVO="-1.0" INVU="-1.0" IWM="-1.0" IZEA="-1.0" JE="-1.0" JENGQ="-1.0" JFIN="-1.0" JOB="-1.0" K="-1.0" KBR="-1.0" KEYS="-1.0" KMPH="-1.0" KMX="-1.0" KR="-1.0" LAZR="-1.0" LCI="-1.0" LCTX="-1.0" LEAF="-1.0" LIVX="-1.0" LKQ="-1.0" LODE="-1.0" LRTNF="-1.0" LUV="-1.0" MARA="-1.0" MBT="-1.0" MDII="-1.0" MESA="-1.0" METX="-1.0" MFGP="-1.0" MMDA1="-1.0" MRIN="-1.0" MSFT="-1.0" MTEM="-1.0" MU="-1.0" MVIS="-1.0" MX="-1.0" MYO="-1.0" MYSZ="-1.0" NCLH="-1.0" NDX="-1.0" NEOS="-1.0" NGD="-1.0" NGL="-1.0" NIO="-1.0" NLOK="-1.0" NLSN="-1.0" NLSP="-1.0" NLST="-1.0" NNVC="-1.0" NOK="-1.0" NOV="-1.0" NQ="-1.0" NSLP="-1.0" NTP="-1.0" NUZE="-1.0" NVDA="-1.0" NXE="-1.0" OCGN="-1.0" OGEN="-1.0" OGI="-1.0" OHI="-1.0" OI="-1.0" OLO="-1.0" OPEN="-1.0" OPGN="-1.0" ORCL="-1.0" ORMP="-1.0" OTIS="-1.0" OVID="-1.0" PAA="-1.0" PAAS="-1.0" PERI="-1.0" PFF="-1.0" PGX="-1.0" PHM="-1.0" PNC="-1.0" POTX="-1.0" PPG="-1.0" PPL="-1.0" PTE="-1.0" QQQ="-1.0" QSR="-1.0" RAD="-1.0" RAIL="-1.0" RIBT="-1.0" RKT="-1.0" RMO="-1.0" RP="-1.0" RPAY="-1.0" RRD="-1.0" RSX="-1.0" RUT="-1.0" RVLV="-1.0" RYCEY="-1.0" SAVA="-1.0" SAVE="-1.0" SGLB="-1.0" SID="-1.0" SIFY="-1.0" SINO="-1.0" SINT="-1.0" SIOX="-1.0" SIRI="-1.0" SITC="-1.0" SIVR="-1.0" SJI="-1.0" SKLZ="-1.0" SKT="-1.0" SLDB="-1.0" SLQT="-1.0" SNAP="-1.0" SNCA="-1.0" SNOA="-1.0" SOGO="-1.0" SOS="-1.0" SPCB="-1.0" SPD="-1.0" SPRT="-1.0" SPX="-1.0" SPY="-1.0" SQ="-1.0" STON="-1.0" SUNW="-1.0" SWI="-1.0" SWK="-1.0" T="-1.0" TGTX="-1.0" TH="-1.0" THTX="-1.0" TSIA="-1.0" TSLA="-1.0" TSLAX="-1.0" TZA="-1.0" U="-1.0" UAL="-1.0" UAMY="-1.0" UEC="-1.0" UIS="-1.0" ULTA="-1.0" USAC="-1.0" USWS="-1.0" UTZ="-1.0" UUUU="-1.0" UXIN="-1.0" VALE="-1.0" VEU="-1.0" VJET="-1.0" VSTM="-1.0" VTRS="-1.0" VVOS="-1.0" VWO="-1.0" WAFU="-1.0" WETF="-1.0" WKEY="-1.0" X="-1.0" XELA="-1.0" XERS="-1.0" XL="-1.0" XLP="-1.0" XLU="-1.0" XTLB="-1.0" YGMZ="-1.0" ZKIN="-1.0" ZM="-1.0"/>
              </TRG_1>
              <_2>
                <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="2.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AA="2.0" AAL="2.0" AAP="2.0" AAPL="2.0" ABG="2.0" ABML="2.0" ACER="2.0" ADMP="2.0" AEG="2.0" AEHL="2.0" AFI="2.0" AJRD="2.0" AKU="2.0" ALEC="2.0" AMC="2.0" AMCR="2.0" AMD="2.0" AMRS="2.0" AMTX="2.0" AMZN="2.0" ANIX="2.0" ANPC="2.0" ANTE="2.0" AP="2.0" APOP="2.0" APTO="2.0" AR="2.0" AREC="2.0" ARES="2.0" ARLO="2.0" ASLEW="2.0" ATHM="2.0" ATIF="2.0" ATNF="2.0" AUY="2.0" AVCO="2.0" AXL="2.0" AZN="2.0" AZRX="2.0" BABA="2.0" BBD="2.0" BBDC="2.0" BFT="2.0" BILI="2.0" BLIN="2.0" BMY="2.0" BOX="2.0" BP="2.0" BRQS="2.0" BSGM="2.0" BURL="2.0" BWAY="2.0" BXRX="2.0" BYFC="2.0" CAKE="2.0" CAL="2.0" CCI="2.0" CCIV="2.0" CCJ="2.0" CCL="2.0" CEQPP="2.0" CHNG="2.0" CHX="2.0" CIDM="2.0" CIIC="2.0" CLBS="2.0" CLDR="2.0" CLEU="2.0" CLSN="2.0" CLVS="2.0" CNNE="2.0" COHN="2.0" COMP="2.0" CPHI="2.0" CPRX="2.0" CRBP="2.0" CRTD="2.0" CSCO="2.0" CTIC="2.0" CUB="2.0" CVX="2.0" DCTH="2.0" DHT="2.0" DIS="2.0" DISCK="2.0" DNN="2.0" DOX="2.0" DPW="2.0" DS="2.0" DSKE="2.0" DTSS="2.0" EARS="2.0" EBS="2.0" EDTK="2.0" EMAN="2.0" ENPH="2.0" ETSY="2.0" EURN="2.0" EVRG="2.0" EW="2.0" EWA="2.0" EXEL="2.0" EYE="2.0" EYES="2.0" FAST="2.0" FB="2.0" FCAC="2.0" FLR="2.0" FLY="2.0" FPRX="2.0" FSLR="2.0" FSR="2.0" FUSE="2.0" FUV="2.0" GEL="2.0" GLOP="2.0" GME="2.0" GMER="2.0" GNCA="2.0" GOCO="2.0" HBI="2.0" HCHC="2.0" HENKY="2.0" HPE="2.0" HPQ="2.0" HPR="2.0" HTBX="2.0" HTHIY="2.0" HTZ="2.0" HUGE="2.0" HYLN="2.0" HZON="2.0" IDEX="2.0" IGSB="2.0" IMTE="2.0" INFI="2.0" INFY="2.0" ING="2.0" INO="2.0" INPX="2.0" INTC="2.0" INUV="2.0" INVO="2.0" INVU="2.0" IWM="2.0" IZEA="2.0" JE="2.0" JENGQ="2.0" JFIN="2.0" JOB="2.0" K="2.0" KBR="2.0" KEYS="2.0" KMPH="2.0" KMX="2.0" KR="2.0" LAZR="2.0" LCI="2.0" LCTX="2.0" LEAF="2.0" LIVX="2.0" LKQ="2.0" LODE="2.0" LRTNF="2.0" LUV="2.0" MARA="2.0" MBT="2.0" MDII="2.0" MESA="2.0" METX="2.0" MFGP="2.0" MMDA1="2.0" MRIN="2.0" MSFT="2.0" MTEM="2.0" MU="2.0" MVIS="2.0" MX="2.0" MYO="2.0" MYSZ="2.0" NCLH="2.0" NDX="2.0" NEOS="2.0" NGD="2.0" NGL="2.0" NIO="2.0" NLOK="2.0" NLSN="2.0" NLSP="2.0" NLST="2.0" NNVC="2.0" NOK="2.0" NOV="2.0" NQ="2.0" NSLP="2.0" NTP="2.0" NUZE="2.0" NVDA="2.0" NXE="2.0" OCGN="2.0" OGEN="2.0" OGI="2.0" OHI="2.0" OI="2.0" OLO="2.0" OPEN="2.0" OPGN="2.0" ORCL="2.0" ORMP="2.0" OTIS="2.0" OVID="2.0" PAA="2.0" PAAS="2.0" PERI="2.0" PFF="2.0" PGX="2.0" PHM="2.0" PNC="2.0" POTX="2.0" PPG="2.0" PPL="2.0" PTE="2.0" QQQ="2.0" QSR="2.0" RAD="2.0" RAIL="2.0" RIBT="2.0" RKT="2.0" RMO="2.0" RP="2.0" RPAY="2.0" RRD="2.0" RSX="2.0" RUT="2.0" RVLV="2.0" RYCEY="2.0" SAVA="2.0" SAVE="2.0" SGLB="2.0" SID="2.0" SIFY="2.0" SINO="2.0" SINT="2.0" SIOX="2.0" SIRI="2.0" SITC="2.0" SIVR="2.0" SJI="2.0" SKLZ="2.0" SKT="2.0" SLDB="2.0" SLQT="2.0" SNAP="2.0" SNCA="2.0" SNOA="2.0" SOGO="2.0" SOS="2.0" SPCB="2.0" SPD="2.0" SPRT="2.0" SPX="2.0" SPY="2.0" SQ="2.0" STON="2.0" SUNW="2.0" SWI="2.0" SWK="2.0" T="2.0" TGTX="2.0" TH="2.0" THTX="2.0" TSIA="2.0" TSLA="2.0" TSLAX="2.0" TZA="2.0" U="2.0" UAL="2.0" UAMY="2.0" UEC="2.0" UIS="2.0" ULTA="2.0" USAC="2.0" USWS="2.0" UTZ="2.0" UUUU="2.0" UXIN="2.0" VALE="2.0" VEU="2.0" VJET="2.0" VSTM="2.0" VTRS="2.0" VVOS="2.0" VWO="2.0" WAFU="2.0" WETF="2.0" WKEY="2.0" X="2.0" XELA="2.0" XERS="2.0" XL="2.0" XLP="2.0" XLU="2.0" XTLB="2.0" YGMZ="2.0" ZKIN="2.0" ZM="2.0"/>
                </TRG_0>
                <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-2.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AA="-2.0" AAL="-2.0" AAP="-2.0" AAPL="-2.0" ABG="-2.0" ABML="-2.0" ACER="-2.0" ADMP="-2.0" AEG="-2.0" AEHL="-2.0" AFI="-2.0" AJRD="-2.0" AKU="-2.0" ALEC="-2.0" AMC="-2.0" AMCR="-2.0" AMD="-2.0" AMRS="-2.0" AMTX="-2.0" AMZN="-2.0" ANIX="-2.0" ANPC="-2.0" ANTE="-2.0" AP="-2.0" APOP="-2.0" APTO="-2.0" AR="-2.0" AREC="-2.0" ARES="-2.0" ARLO="-2.0" ASLEW="-2.0" ATHM="-2.0" ATIF="-2.0" ATNF="-2.0" AUY="-2.0" AVCO="-2.0" AXL="-2.0" AZN="-2.0" AZRX="-2.0" BABA="-2.0" BBD="-2.0" BBDC="-2.0" BFT="-2.0" BILI="-2.0" BLIN="-2.0" BMY="-2.0" BOX="-2.0" BP="-2.0" BRQS="-2.0" BSGM="-2.0" BURL="-2.0" BWAY="-2.0" BXRX="-2.0" BYFC="-2.0" CAKE="-2.0" CAL="-2.0" CCI="-2.0" CCIV="-2.0" CCJ="-2.0" CCL="-2.0" CEQPP="-2.0" CHNG="-2.0" CHX="-2.0" CIDM="-2.0" CIIC="-2.0" CLBS="-2.0" CLDR="-2.0" CLEU="-2.0" CLSN="-2.0" CLVS="-2.0" CNNE="-2.0" COHN="-2.0" COMP="-2.0" CPHI="-2.0" CPRX="-2.0" CRBP="-2.0" CRTD="-2.0" CSCO="-2.0" CTIC="-2.0" CUB="-2.0" CVX="-2.0" DCTH="-2.0" DHT="-2.0" DIS="-2.0" DISCK="-2.0" DNN="-2.0" DOX="-2.0" DPW="-2.0" DS="-2.0" DSKE="-2.0" DTSS="-2.0" EARS="-2.0" EBS="-2.0" EDTK="-2.0" EMAN="-2.0" ENPH="-2.0" ETSY="-2.0" EURN="-2.0" EVRG="-2.0" EW="-2.0" EWA="-2.0" EXEL="-2.0" EYE="-2.0" EYES="-2.0" FAST="-2.0" FB="-2.0" FCAC="-2.0" FLR="-2.0" FLY="-2.0" FPRX="-2.0" FSLR="-2.0" FSR="-2.0" FUSE="-2.0" FUV="-2.0" GEL="-2.0" GLOP="-2.0" GME="-2.0" GMER="-2.0" GNCA="-2.0" GOCO="-2.0" HBI="-2.0" HCHC="-2.0" HENKY="-2.0" HPE="-2.0" HPQ="-2.0" HPR="-2.0" HTBX="-2.0" HTHIY="-2.0" HTZ="-2.0" HUGE="-2.0" HYLN="-2.0" HZON="-2.0" IDEX="-2.0" IGSB="-2.0" IMTE="-2.0" INFI="-2.0" INFY="-2.0" ING="-2.0" INO="-2.0" INPX="-2.0" INTC="-2.0" INUV="-2.0" INVO="-2.0" INVU="-2.0" IWM="-2.0" IZEA="-2.0" JE="-2.0" JENGQ="-2.0" JFIN="-2.0" JOB="-2.0" K="-2.0" KBR="-2.0" KEYS="-2.0" KMPH="-2.0" KMX="-2.0" KR="-2.0" LAZR="-2.0" LCI="-2.0" LCTX="-2.0" LEAF="-2.0" LIVX="-2.0" LKQ="-2.0" LODE="-2.0" LRTNF="-2.0" LUV="-2.0" MARA="-2.0" MBT="-2.0" MDII="-2.0" MESA="-2.0" METX="-2.0" MFGP="-2.0" MMDA1="-2.0" MRIN="-2.0" MSFT="-2.0" MTEM="-2.0" MU="-2.0" MVIS="-2.0" MX="-2.0" MYO="-2.0" MYSZ="-2.0" NCLH="-2.0" NDX="-2.0" NEOS="-2.0" NGD="-2.0" NGL="-2.0" NIO="-2.0" NLOK="-2.0" NLSN="-2.0" NLSP="-2.0" NLST="-2.0" NNVC="-2.0" NOK="-2.0" NOV="-2.0" NQ="-2.0" NSLP="-2.0" NTP="-2.0" NUZE="-2.0" NVDA="-2.0" NXE="-2.0" OCGN="-2.0" OGEN="-2.0" OGI="-2.0" OHI="-2.0" OI="-2.0" OLO="-2.0" OPEN="-2.0" OPGN="-2.0" ORCL="-2.0" ORMP="-2.0" OTIS="-2.0" OVID="-2.0" PAA="-2.0" PAAS="-2.0" PERI="-2.0" PFF="-2.0" PGX="-2.0" PHM="-2.0" PNC="-2.0" POTX="-2.0" PPG="-2.0" PPL="-2.0" PTE="-2.0" QQQ="-2.0" QSR="-2.0" RAD="-2.0" RAIL="-2.0" RIBT="-2.0" RKT="-2.0" RMO="-2.0" RP="-2.0" RPAY="-2.0" RRD="-2.0" RSX="-2.0" RUT="-2.0" RVLV="-2.0" RYCEY="-2.0" SAVA="-2.0" SAVE="-2.0" SGLB="-2.0" SID="-2.0" SIFY="-2.0" SINO="-2.0" SINT="-2.0" SIOX="-2.0" SIRI="-2.0" SITC="-2.0" SIVR="-2.0" SJI="-2.0" SKLZ="-2.0" SKT="-2.0" SLDB="-2.0" SLQT="-2.0" SNAP="-2.0" SNCA="-2.0" SNOA="-2.0" SOGO="-2.0" SOS="-2.0" SPCB="-2.0" SPD="-2.0" SPRT="-2.0" SPX="-2.0" SPY="-2.0" SQ="-2.0" STON="-2.0" SUNW="-2.0" SWI="-2.0" SWK="-2.0" T="-2.0" TGTX="-2.0" TH="-2.0" THTX="-2.0" TSIA="-2.0" TSLA="-2.0" TSLAX="-2.0" TZA="-2.0" U="-2.0" UAL="-2.0" UAMY="-2.0" UEC="-2.0" UIS="-2.0" ULTA="-2.0" USAC="-2.0" USWS="-2.0" UTZ="-2.0" UUUU="-2.0" UXIN="-2.0" VALE="-2.0" VEU="-2.0" VJET="-2.0" VSTM="-2.0" VTRS="-2.0" VVOS="-2.0" VWO="-2.0" WAFU="-2.0" WETF="-2.0" WKEY="-2.0" X="-2.0" XELA="-2.0" XERS="-2.0" XL="-2.0" XLP="-2.0" XLU="-2.0" XTLB="-2.0" YGMZ="-2.0" ZKIN="-2.0" ZM="-2.0"/>
                </TRG_1>
              </_2>
              <_3>
                <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="3.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AA="3.0" AAL="3.0" AAP="3.0" AAPL="3.0" ABG="3.0" ABML="3.0" ACER="3.0" ADMP="3.0" AEG="3.0" AEHL="3.0" AFI="3.0" AJRD="3.0" AKU="3.0" ALEC="3.0" AMC="3.0" AMCR="3.0" AMD="3.0" AMRS="3.0" AMTX="3.0" AMZN="3.0" ANIX="3.0" ANPC="3.0" ANTE="3.0" AP="3.0" APOP="3.0" APTO="3.0" AR="3.0" AREC="3.0" ARES="3.0" ARLO="3.0" ASLEW="3.0" ATHM="3.0" ATIF="3.0" ATNF="3.0" AUY="3.0" AVCO="3.0" AXL="3.0" AZN="3.0" AZRX="3.0" BABA="3.0" BBD="3.0" BBDC="3.0" BFT="3.0" BILI="3.0" BLIN="3.0" BMY="3.0" BOX="3.0" BP="3.0" BRQS="3.0" BSGM="3.0" BURL="3.0" BWAY="3.0" BXRX="3.0" BYFC="3.0" CAKE="3.0" CAL="3.0" CCI="3.0" CCIV="3.0" CCJ="3.0" CCL="3.0" CEQPP="3.0" CHNG="3.0" CHX="3.0" CIDM="3.0" CIIC="3.0" CLBS="3.0" CLDR="3.0" CLEU="3.0" CLSN="3.0" CLVS="3.0" CNNE="3.0" COHN="3.0" COMP="3.0" CPHI="3.0" CPRX="3.0" CRBP="3.0" CRTD="3.0" CSCO="3.0" CTIC="3.0" CUB="3.0" CVX="3.0" DCTH="3.0" DHT="3.0" DIS="3.0" DISCK="3.0" DNN="3.0" DOX="3.0" DPW="3.0" DS="3.0" DSKE="3.0" DTSS="3.0" EARS="3.0" EBS="3.0" EDTK="3.0" EMAN="3.0" ENPH="3.0" ETSY="3.0" EURN="3.0" EVRG="3.0" EW="3.0" EWA="3.0" EXEL="3.0" EYE="3.0" EYES="3.0" FAST="3.0" FB="3.0" FCAC="3.0" FLR="3.0" FLY="3.0" FPRX="3.0" FSLR="3.0" FSR="3.0" FUSE="3.0" FUV="3.0" GEL="3.0" GLOP="3.0" GME="3.0" GMER="3.0" GNCA="3.0" GOCO="3.0" HBI="3.0" HCHC="3.0" HENKY="3.0" HPE="3.0" HPQ="3.0" HPR="3.0" HTBX="3.0" HTHIY="3.0" HTZ="3.0" HUGE="3.0" HYLN="3.0" HZON="3.0" IDEX="3.0" IGSB="3.0" IMTE="3.0" INFI="3.0" INFY="3.0" ING="3.0" INO="3.0" INPX="3.0" INTC="3.0" INUV="3.0" INVO="3.0" INVU="3.0" IWM="3.0" IZEA="3.0" JE="3.0" JENGQ="3.0" JFIN="3.0" JOB="3.0" K="3.0" KBR="3.0" KEYS="3.0" KMPH="3.0" KMX="3.0" KR="3.0" LAZR="3.0" LCI="3.0" LCTX="3.0" LEAF="3.0" LIVX="3.0" LKQ="3.0" LODE="3.0" LRTNF="3.0" LUV="3.0" MARA="3.0" MBT="3.0" MDII="3.0" MESA="3.0" METX="3.0" MFGP="3.0" MMDA1="3.0" MRIN="3.0" MSFT="3.0" MTEM="3.0" MU="3.0" MVIS="3.0" MX="3.0" MYO="3.0" MYSZ="3.0" NCLH="3.0" NDX="3.0" NEOS="3.0" NGD="3.0" NGL="3.0" NIO="3.0" NLOK="3.0" NLSN="3.0" NLSP="3.0" NLST="3.0" NNVC="3.0" NOK="3.0" NOV="3.0" NQ="3.0" NSLP="3.0" NTP="3.0" NUZE="3.0" NVDA="3.0" NXE="3.0" OCGN="3.0" OGEN="3.0" OGI="3.0" OHI="3.0" OI="3.0" OLO="3.0" OPEN="3.0" OPGN="3.0" ORCL="3.0" ORMP="3.0" OTIS="3.0" OVID="3.0" PAA="3.0" PAAS="3.0" PERI="3.0" PFF="3.0" PGX="3.0" PHM="3.0" PNC="3.0" POTX="3.0" PPG="3.0" PPL="3.0" PTE="3.0" QQQ="3.0" QSR="3.0" RAD="3.0" RAIL="3.0" RIBT="3.0" RKT="3.0" RMO="3.0" RP="3.0" RPAY="3.0" RRD="3.0" RSX="3.0" RUT="3.0" RVLV="3.0" RYCEY="3.0" SAVA="3.0" SAVE="3.0" SGLB="3.0" SID="3.0" SIFY="3.0" SINO="3.0" SINT="3.0" SIOX="3.0" SIRI="3.0" SITC="3.0" SIVR="3.0" SJI="3.0" SKLZ="3.0" SKT="3.0" SLDB="3.0" SLQT="3.0" SNAP="3.0" SNCA="3.0" SNOA="3.0" SOGO="3.0" SOS="3.0" SPCB="3.0" SPD="3.0" SPRT="3.0" SPX="3.0" SPY="3.0" SQ="3.0" STON="3.0" SUNW="3.0" SWI="3.0" SWK="3.0" T="3.0" TGTX="3.0" TH="3.0" THTX="3.0" TSIA="3.0" TSLA="3.0" TSLAX="3.0" TZA="3.0" U="3.0" UAL="3.0" UAMY="3.0" UEC="3.0" UIS="3.0" ULTA="3.0" USAC="3.0" USWS="3.0" UTZ="3.0" UUUU="3.0" UXIN="3.0" VALE="3.0" VEU="3.0" VJET="3.0" VSTM="3.0" VTRS="3.0" VVOS="3.0" VWO="3.0" WAFU="3.0" WETF="3.0" WKEY="3.0" X="3.0" XELA="3.0" XERS="3.0" XL="3.0" XLP="3.0" XLU="3.0" XTLB="3.0" YGMZ="3.0" ZKIN="3.0" ZM="3.0"/>
                </TRG_0>
                <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-3.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AA="-3.0" AAL="-3.0" AAP="-3.0" AAPL="-3.0" ABG="-3.0" ABML="-3.0" ACER="-3.0" ADMP="-3.0" AEG="-3.0" AEHL="-3.0" AFI="-3.0" AJRD="-3.0" AKU="-3.0" ALEC="-3.0" AMC="-3.0" AMCR="-3.0" AMD="-3.0" AMRS="-3.0" AMTX="-3.0" AMZN="-3.0" ANIX="-3.0" ANPC="-3.0" ANTE="-3.0" AP="-3.0" APOP="-3.0" APTO="-3.0" AR="-3.0" AREC="-3.0" ARES="-3.0" ARLO="-3.0" ASLEW="-3.0" ATHM="-3.0" ATIF="-3.0" ATNF="-3.0" AUY="-3.0" AVCO="-3.0" AXL="-3.0" AZN="-3.0" AZRX="-3.0" BABA="-3.0" BBD="-3.0" BBDC="-3.0" BFT="-3.0" BILI="-3.0" BLIN="-3.0" BMY="-3.0" BOX="-3.0" BP="-3.0" BRQS="-3.0" BSGM="-3.0" BURL="-3.0" BWAY="-3.0" BXRX="-3.0" BYFC="-3.0" CAKE="-3.0" CAL="-3.0" CCI="-3.0" CCIV="-3.0" CCJ="-3.0" CCL="-3.0" CEQPP="-3.0" CHNG="-3.0" CHX="-3.0" CIDM="-3.0" CIIC="-3.0" CLBS="-3.0" CLDR="-3.0" CLEU="-3.0" CLSN="-3.0" CLVS="-3.0" CNNE="-3.0" COHN="-3.0" COMP="-3.0" CPHI="-3.0" CPRX="-3.0" CRBP="-3.0" CRTD="-3.0" CSCO="-3.0" CTIC="-3.0" CUB="-3.0" CVX="-3.0" DCTH="-3.0" DHT="-3.0" DIS="-3.0" DISCK="-3.0" DNN="-3.0" DOX="-3.0" DPW="-3.0" DS="-3.0" DSKE="-3.0" DTSS="-3.0" EARS="-3.0" EBS="-3.0" EDTK="-3.0" EMAN="-3.0" ENPH="-3.0" ETSY="-3.0" EURN="-3.0" EVRG="-3.0" EW="-3.0" EWA="-3.0" EXEL="-3.0" EYE="-3.0" EYES="-3.0" FAST="-3.0" FB="-3.0" FCAC="-3.0" FLR="-3.0" FLY="-3.0" FPRX="-3.0" FSLR="-3.0" FSR="-3.0" FUSE="-3.0" FUV="-3.0" GEL="-3.0" GLOP="-3.0" GME="-3.0" GMER="-3.0" GNCA="-3.0" GOCO="-3.0" HBI="-3.0" HCHC="-3.0" HENKY="-3.0" HPE="-3.0" HPQ="-3.0" HPR="-3.0" HTBX="-3.0" HTHIY="-3.0" HTZ="-3.0" HUGE="-3.0" HYLN="-3.0" HZON="-3.0" IDEX="-3.0" IGSB="-3.0" IMTE="-3.0" INFI="-3.0" INFY="-3.0" ING="-3.0" INO="-3.0" INPX="-3.0" INTC="-3.0" INUV="-3.0" INVO="-3.0" INVU="-3.0" IWM="-3.0" IZEA="-3.0" JE="-3.0" JENGQ="-3.0" JFIN="-3.0" JOB="-3.0" K="-3.0" KBR="-3.0" KEYS="-3.0" KMPH="-3.0" KMX="-3.0" KR="-3.0" LAZR="-3.0" LCI="-3.0" LCTX="-3.0" LEAF="-3.0" LIVX="-3.0" LKQ="-3.0" LODE="-3.0" LRTNF="-3.0" LUV="-3.0" MARA="-3.0" MBT="-3.0" MDII="-3.0" MESA="-3.0" METX="-3.0" MFGP="-3.0" MMDA1="-3.0" MRIN="-3.0" MSFT="-3.0" MTEM="-3.0" MU="-3.0" MVIS="-3.0" MX="-3.0" MYO="-3.0" MYSZ="-3.0" NCLH="-3.0" NDX="-3.0" NEOS="-3.0" NGD="-3.0" NGL="-3.0" NIO="-3.0" NLOK="-3.0" NLSN="-3.0" NLSP="-3.0" NLST="-3.0" NNVC="-3.0" NOK="-3.0" NOV="-3.0" NQ="-3.0" NSLP="-3.0" NTP="-3.0" NUZE="-3.0" NVDA="-3.0" NXE="-3.0" OCGN="-3.0" OGEN="-3.0" OGI="-3.0" OHI="-3.0" OI="-3.0" OLO="-3.0" OPEN="-3.0" OPGN="-3.0" ORCL="-3.0" ORMP="-3.0" OTIS="-3.0" OVID="-3.0" PAA="-3.0" PAAS="-3.0" PERI="-3.0" PFF="-3.0" PGX="-3.0" PHM="-3.0" PNC="-3.0" POTX="-3.0" PPG="-3.0" PPL="-3.0" PTE="-3.0" QQQ="-3.0" QSR="-3.0" RAD="-3.0" RAIL="-3.0" RIBT="-3.0" RKT="-3.0" RMO="-3.0" RP="-3.0" RPAY="-3.0" RRD="-3.0" RSX="-3.0" RUT="-3.0" RVLV="-3.0" RYCEY="-3.0" SAVA="-3.0" SAVE="-3.0" SGLB="-3.0" SID="-3.0" SIFY="-3.0" SINO="-3.0" SINT="-3.0" SIOX="-3.0" SIRI="-3.0" SITC="-3.0" SIVR="-3.0" SJI="-3.0" SKLZ="-3.0" SKT="-3.0" SLDB="-3.0" SLQT="-3.0" SNAP="-3.0" SNCA="-3.0" SNOA="-3.0" SOGO="-3.0" SOS="-3.0" SPCB="-3.0" SPD="-3.0" SPRT="-3.0" SPX="-3.0" SPY="-3.0" SQ="-3.0" STON="-3.0" SUNW="-3.0" SWI="-3.0" SWK="-3.0" T="-3.0" TGTX="-3.0" TH="-3.0" THTX="-3.0" TSIA="-3.0" TSLA="-3.0" TSLAX="-3.0" TZA="-3.0" U="-3.0" UAL="-3.0" UAMY="-3.0" UEC="-3.0" UIS="-3.0" ULTA="-3.0" USAC="-3.0" USWS="-3.0" UTZ="-3.0" UUUU="-3.0" UXIN="-3.0" VALE="-3.0" VEU="-3.0" VJET="-3.0" VSTM="-3.0" VTRS="-3.0" VVOS="-3.0" VWO="-3.0" WAFU="-3.0" WETF="-3.0" WKEY="-3.0" X="-3.0" XELA="-3.0" XERS="-3.0" XL="-3.0" XLP="-3.0" XLU="-3.0" XTLB="-3.0" YGMZ="-3.0" ZKIN="-3.0" ZM="-3.0"/>
                </TRG_1>
              </_3>
            </TRADE>
          </CELL1>
          <CELL2 ROWSPANELWEIGHT="1.0" ROWWEIGHT0="1.0" ROWWEIGHT1="1.0" SELECTED_TYPE="CHART" SIDEBAR_IS_ACTIVE="true" SYMBOL="USAC" SYMBOL_GROUP="6" TRADE_BUTTONS_MIGRATED="true">
            <ACTIVETRADER VERTICAL="false" VISIBLE="false" WEIGHT="2.0"/>
            <BIG_BUTTONS VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <CHART CONFIGURATION="@v9@%0:com.devexperts.tos.chartdata,1:com.devexperts.tos.thinkscript.constants,2:com.devexperts.tos.thinkscript.data,3:com.devexperts.toschart.control.subgraph,4:com.devexperts.toschart.elstudies,5:com.devexperts.toschart.script%owner{chartAggregationPeriods:ChartAggregationPeriodArray0{11::ChartAggregationPeriod0},chartAggregationPeriods=@ChartAggregationPeriodArray0}#com.devexperts.toschart.core.ChartModel{encodedMixinsState=&quot;{\&quot;common\&quot;:{\&quot;DRAWING_SETS\&quot;:\&quot;{}\&quot;},\&quot;state_props\&quot;:{\&quot;state_type\&quot;:\&quot;REGULAR\&quot;},\&quot;monkey_bars_exp\&quot;:{\&quot;LikefolioMixin\&quot;:\&quot;{\\\&quot;paintingSettings\\\&quot;:{\\\&quot;neutralSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;positiveSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;negativeSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;sentimentSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true}},\\\&quot;shownDivisions\\\&quot;:[],\\\&quot;allDivisions\\\&quot;:[]}\&quot;},\&quot;monkey_bars\&quot;:{},\&quot;seasonality\&quot;:{},\&quot;regular\&quot;:{\&quot;DescriberMixin\&quot;:\&quot;{\\\&quot;visibility\\\&quot;:\\\&quot;HIDE_PANEL\\\&quot;,\\\&quot;studiesMode\\\&quot;:\\\&quot;HIDE_STUDIES\\\&quot;}\&quot;,\&quot;LikefolioMixin\&quot;:\&quot;{\\\&quot;paintingSettings\\\&quot;:{\\\&quot;neutralSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;positiveSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;negativeSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;sentimentSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true}},\\\&quot;shownDivisions\\\&quot;:[],\\\&quot;allDivisions\\\&quot;:[]}\&quot;}}&quot;,encodedPatternsModel=&quot;{\&quot;showPatterns\&quot;:true,\&quot;models\&quot;:[],\&quot;fibModels\&quot;:[]}&quot;,groupId=&quot;default&quot;,styleSettings{chartAggregationSettings.timeAggregationSettings=!com.devexperts.toschart.model.TimeFrameAggregationSettings.createTickOrTimeAggregation(!%0.ChartRange.findByCode(&quot;DAY3&quot;),@ChartAggregationPeriod0),commonStyleSettings{chartModeName:ChartModeName0,chartModes.!get(@ChartModeName0){chartPaintingType=!java.lang.Enum.valueOf(*%1.ChartPaintingType.class,&quot;CANDLE_TREND&quot;)},colorSettings{backgroundColor=!%2.CustomColor.findByIndex(&quot;101&quot;),candleTypeColors.fillUp=&lt;T,monkeyProfileTypeColors.defaultRowHeight=&lt;F,mpExpandedTypeColors.defaultRowHeight=&lt;F},expansion.right=23,fitArrowsToScreen=&lt;F,fitStudiesToScreen=&lt;F,leftAxisRegulator{maxValue=21.34114905d,minValue=16.81218429d},manualAxisRegulator{maxValue=16.61431635d,minValue=13.72068365d},previousRightExpansion=23,shortCuts{^(&quot;Time Zone&quot;,&lt;F),^(&quot;Show Expiration Friday &quot;,&lt;F),^(&quot;Keep Price Zoom&quot;,&lt;F),^(&quot;enableLeftAxis&quot;,&lt;F),^(&quot;Fit expected price ranges&quot;,&lt;F),^(&quot;emphasizeDigitMPExpanded&quot;,&lt;F),^(&quot;showWicksCandleTrend&quot;,&lt;F),^(&quot;highlightEarnings&quot;,&lt;F),^(&quot;synchronizeCrosshair&quot;,&lt;F),^(&quot;myToolsMode&quot;,&lt;F),^(&quot;seasonalityStyle&quot;,&lt;F),^(&quot;Show Price Subgraph&quot;,&lt;F),^(&quot;closePriceLevel&quot;,&lt;F),^(&quot;Color Volume As Symbol Ticks&quot;,&lt;F),^(&quot;highlightPhantomRBars&quot;,&lt;F),^(&quot;Cross type &quot;,&lt;F),^(&quot;Fit Studies to Screen&quot;,&lt;F),^(&quot;Fit Orders&quot;,&lt;F),^(&quot;Bubbles as Percentage&quot;,&lt;F),^(&quot;hideStatusString&quot;,&lt;F),^(&quot;Show Studies &quot;,&lt;F),^(&quot;showWicksHeikinAshi&quot;,&lt;F),^(&quot;Alerts&quot;,&lt;F),^(&quot;Chart scale&quot;,&lt;F),^(&quot;Fit High/Low&quot;,&lt;F),^(&quot;Orders&quot;,&lt;F),^(&quot;Use Log Scale &quot;,&lt;F),^(&quot;Fit Study Markers to Screen&quot;,&lt;F),^(&quot;Fit Alerts&quot;,&lt;F),^(&quot;Fit patterns&quot;,&lt;F),^(&quot;Percentage View&quot;,&lt;F),^(&quot;Make Auto Zoom &quot;,&lt;F),^(&quot;Show Year Marking Line&quot;,&lt;F),^(&quot;Show Rollover Line&quot;,&lt;F),^(&quot;Show High/Low Bubbles &quot;,&lt;F),^(&quot;Snap mode&quot;,&lt;F),^(&quot;highlightStudies&quot;,&lt;F),^(&quot;Overlapped Volume&quot;,&lt;F),^(&quot;Show Symbol Logo&quot;,&lt;F),^(&quot;Show Last Price Bubble &quot;,&lt;F),^(&quot;emphasizeDigitMP&quot;,&lt;F),^(&quot;Snap crosshairs to&quot;,&lt;F),^(&quot;Show grid&quot;,&lt;F),^(&quot;showWicksCandle&quot;,&lt;F),^(&quot;Show trades&quot;,&lt;F),^(&quot;highlightSeasons&quot;,&lt;F),^(&quot;Snap drawings to&quot;,&lt;F),^(&quot;Extend Order/Alert Line to Left&quot;,&lt;F),!get:Boolean0(&quot;Chart mode&quot;)},showBubbles=&lt;F,showGrid=&lt;F,step=2.5906735751295336d,volumeColorByTicks=&lt;T},forexStyleSettings.shortCuts.^(&quot;Show Volume Subgraph&quot;,&lt;F),futuresStyleSettings{highlightExtendedHours=&lt;T,shortCuts{^(&quot;adjustForContractChanges&quot;,&lt;F),^(&quot;Show Open Interest&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,@Boolean0),^(&quot;showContractChangeEvents&quot;,&lt;F),^(&quot;futures_daily_close_price&quot;,&lt;F),^(&quot;Show Options&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,&lt;F),^(&quot;startAtMarketOpen&quot;,&lt;F)},tradingHoursOnly=&lt;T},optionsStyleSettings.shortCuts{^(&quot;Show Open Interest&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,@Boolean0),^(&quot;Show Theo Price&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,&lt;F),^(&quot;startAtMarketOpen&quot;,&lt;F)},otherStyleSettings{shortCuts{^(&quot;Show Social Sentiment&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,@Boolean0),^(&quot;Show Options&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,&lt;F),^(&quot;Show Corporate Actions&quot;,&lt;F),^(&quot;Show CNBC Video&quot;,&lt;F),^(&quot;startAtMarketOpen&quot;,&lt;F),^(&quot;adjustForDividends&quot;,&lt;F)},startAggregationAtMarketOpen=&lt;F,tradingHoursOnly=&lt;T},setsIdentifiers.styleSetName=&quot;DEF_X_STYLE&quot;},subgraphModels{!get(#%3.SubgraphId(&quot;Symbol&quot;)){height=425,storableIndicators{+(!%4.CompiledStudy.resolveStudy(#%5.ScriptEssence{body=&quot;###############################################################################################################################################\n################################################################################################################################################\n#\n# Author: Kory Gill, [USER=212]@korygill[/USER]\n#\n# Created from idea on https://usethinkscript.com/threads/finite-volume-elements.593/\n# Original idea is from http://mkatsanos.com/FVE.html\n#\n# VERSION HISTORY (sortable date and time (your local time is fine), and your initials\n# 20190907-1200-KG    - Created.\n\n###############################################################################\n### NORMALIZATION (Volume Damping adaptation) by Ramon Del Villar AKA PElonsax\n### 7/20/2020 #################################################################\n###############################################################################\n# The damping logic is taken directly from VFI #\n\n#declare once_per_bar;\n\n\n#################################################################$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n\n#########################################%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%$$$$$$$$$$$$$$$$$\n\n\n\n#\n# inputs\n#\ninput RSI_prev = 2; #previous bar to check\ninput def_cond = no;\ninput Samples = 14;\n\n\n\n#vwap vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\n#input numDevUp = 2.0;\ninput vwapTimeFrame = {default DAY, WEEK, MONTH};\n\ndef cap = getAggregationPeriod();\ndef errorInAggregation =\n    vwapTimeFrame == vwapTimeFrame.DAY and cap &gt;= AggregationPeriod.WEEK or\n    vwapTimeFrame== vwapTimeFrame.WEEK and cap &gt;= AggregationPeriod.MONTH;\nassert(!errorInAggregation, \&quot;timeFrame should be not less than current chart aggregation period\&quot;);\n\ndef yyyyMmDd = getYyyyMmDd();\ndef periodIndx;\nswitch (vwapTimeFrame) {\ncase DAY:\n    periodIndx = yyyyMmDd;\ncase WEEK:\n    periodIndx = Floor((daysFromDate(first(yyyyMmDd)) + getDayOfWeek(first(yyyyMmDd))) / 7);\ncase MONTH:\n    periodIndx = roundDown(yyyyMmDd / 100, 0);\n}\ndef isPeriodRolled = compoundValue(1, periodIndx != periodIndx[1], yes);\n\ndef volumeSum;\ndef volumeVwapSum;\ndef volumeVwap2Sum;\n\nif (isPeriodRolled) {\n    volumeSum = volume;\n    volumeVwapSum = volume * vwap;\n    volumeVwap2Sum = volume * Sqr(vwap);\n} else {\n    volumeSum = compoundValue(1, volumeSum[1] + volume, volume);\n    volumeVwapSum = compoundValue(1, volumeVwapSum[1] + volume * vwap, volume * vwap);\n    volumeVwap2Sum = compoundValue(1, volumeVwap2Sum[1] + volume * Sqr(vwap), volume * Sqr(vwap));\n}\ndef vWapprice = volumeVwapSum / volumeSum;\ndef deviation = Sqrt(Max(volumeVwap2Sum / volumeSum - Sqr(vWapprice), 0));\n\ndef VWAP = vWapprice;\n\n\n\ninput vwapCondition =no;\n#input vp=close;\ndef conVwapBuy =if  vwapCondition then  close &gt;= VWAp else 1;\n\n#####^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n\n#\n# FVE logic\n#\ndef bn = BarNumber();\ndef nan = double.NaN;\n\n\ninput maxVolumeCutOff = 2.5;\n###Coefficient used in calculation of “Cut Off” value. Lower values mean stronger damping of volume spikes###\n\nAssert(maxVolumeCutOff &gt; 0, \&quot;\'max volume cut off\' must be positive: \&quot; + maxVolumeCutOff);\n\ndef cutOff = 0.2 * StDev(Log(hlc3) - Log(hlc3[1]), 30) * close;\ndef hlcChange = hlc3 - hlc3[1];\ndef avgVolume = Average(volume, 30)[1];\ndef minVolume = Min(volume, avgVolume * maxVolumeCutOff);\ndef dirVolume = if hlcChange &gt; cutOff\n    then minVolume\n    else if hlcChange &lt; -cutOff\n        then -minVolume\n        else 0;\n\n\ndef mf = (close - (high+low)/2) + hlc3 - hlc3 [1];\ndef fveSum = Sum(dirVolume, Samples);\n\ndef fve = if bn &gt; Samples\n          then (fveSum / (Average(avgVolume, Samples) * Samples)) * 100\n          else nan;\n\n\n#\n# plots\n#\ndef pFVE = fve;\n\ndef pFVE_MA = MovingAverage(AverageType.SIMPLE, fve, 30);\n#pFVE_MA.SetDefaultColor(Color.Gray);\n#PFVE_MA.SetPaintingStrategy(PaintingStrategy.DASHES);\n\ndef zeroLine = 0;\ndef pFVE_Bull = if pFVE crosses above pFVE_MA then pFVE  else double.NaN ;\ndef pFVE_Bear = if pFVE &gt; pFVE_MA and pFVE[1] &gt; pFVE then pFVE else double.NaN ;\n\n#format plot \n\n#zeroLine.SetDefaultColor(Color.White);\n#pFVE.AssignValueColor(if pFVE &gt; pFVE_MA then color.green else color.red) ;\n#pFVE.SetLineWeight(3);\n\n\n#pFVE_Bull.SetPaintingStrategy(PaintingStrategy.SQUARES);\n#pFVE_Bull.SetLineWeight(5);\n#pFVE_Bull.SetDefaultColor(color.dark_green) ;\n\n#pFVE_Bear.SetPaintingStrategy(PaintingStrategy.SQUARES);\n#pFVE_Bear.SetLineWeight(5);\n#pFVE_Bear.SetDefaultColor(color.white) ;\n\n#AddCloud(pFVE, pFVE_MA, color.light_green, color.pink);\n\n\n\n#####################################################################################################################################################\n\n\n\n# Simple 2 Period RSI Trading Indicator\n# Assembled by BenTen at useThinkScript.com\n# You are free to use this code for personal use, and make derivative works from it. You are NOT GRANTED permission to use this code (or derivative works) for commercial purposes which includes and is not limited to selling, reselling, or packaging with other commercial indicators. Headers and attribution in this code should remain as provided, and any derivative works should extend the existing headers.\n\n#MACD\ninput price = close;\n#input length_macd = 14;\ninput displace = 0;\n#input showBreakoutSignals = no;\ninput crossingType = {default above, below};\n\ninput fastLength = 12;\ninput slowLength = 26;\ninput MACDLength = 9;\ndef fastAvg = Sum(volume * price, fastLength) / Sum(volume, fastLength);\ndef slowAvg = Sum(volume * price, slowLength) / Sum(volume, slowLength);\ndef Value = fastAvg - slowAvg;\ndef Avg = ExpAverage(Value, MACDLength);\ndef MACD_Diff  = Value - Avg;\n#def ZeroLine = 0;\n\n# RSI\ninput rsiLength = 14;\ninput overBought = 80;\ninput overSold = 28;\ninput rsiBuyLevel =40;\ninput averageType = AverageType.WILDERS;\ndef NetChgAvg = MovingAverage(averageType, price - price[1], RSIlength);\ndef TotChgAvg = MovingAverage(averageType, AbsValue(price - price[1]), RSIlength);\ndef ChgRatio = if TotChgAvg != 0 then NetChgAvg / TotChgAvg else 0;\ndef RSI = 50 * (ChgRatio + 1);\n#def OverSold = overSold;\n#def OverBought = overBought;\n\n#test\n#plot p= VWAp;#(period= AggregationPeriod.DAY);\n\n####################################\n\ndef cond_logic = if (def_cond) then MACD_Diff &lt;= 0 else yes;\n######\n#def sig_buy = Crosses(RSI(length = RSIlength, averageType = averageType).RSI, over_Sold, crossingType == crossingType.above) within RSI_prev bars and pFVE_Bull and cond_logic; # and Diff &lt;= 0;\ndef sig_buy = conVwapBuy and RSI&lt; rsiBuyLevel and pFVE_Bull  and cond_logic ;# and Diff &gt;= 0;\n#def sig_buy = pFVE_Bull and Diff &gt;= 0;\nplot signal_buy = sig_buy ;\n\n\ndef sig_sell = Crosses(RSI(length = RSIlength, averageType = averageType).RSI, overBought, crossingType == crossingType.below) within RSI_prev bars and pFVE_Bear ;\nplot signal_sell = sig_sell;\n\nsignal_buy.DefineColor(\&quot;Above\&quot;, Color.YELLOW);\nsignal_buy.DefineColor(\&quot;Below\&quot;, GetColor(8));\nsignal_buy.AssignValueColor(if crossingType == crossingType.above then signal_buy.Color(\&quot;Above\&quot;) else signal_buy.Color(\&quot;Below\&quot;));\nsignal_buy.setlineWeight(5);\nsignal_buy.SetPaintingStrategy(if crossingType == crossingType.above\n    then PaintingStrategy.BOOLEAN_ARROW_UP\n    else PaintingStrategy.BOOLEAN_ARROW_DOWN);\n\nsignal_sell.DefineColor(\&quot;Above\&quot;, Color.VIOLET);\nsignal_sell.DefineColor(\&quot;Below\&quot;, GetColor(8));\nsignal_sell.AssignValueColor(if crossingType == crossingType.above then signal_sell.Color(\&quot;Above\&quot;) else signal_sell.Color(\&quot;Below\&quot;));\n\nsignal_sell.SetPaintingStrategy(if crossingType == crossingType.above\n    then PaintingStrategy.BOOLEAN_ARROW_DOWN\n    else PaintingStrategy.BOOLEAN_ARROW_UP);\nsignal_sell.setlineWeight(5);\ninput bubble =no; \nAddChartBubble(bubble and sig_sell == 1, price, \&quot;S= \&quot; + price + \&quot; rsi \&quot; + RSI, Color.VIOLET, no);&quot;,name=&quot;_259d509b_f440_4edf_840b_2df1df75ab8c&quot;}){inputsMap:TreeMap0{^(&quot;price&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap0,plots{0:{lineWeight=4},1:{lineWeight=4}}}),+(!%4.CompiledStudy.resolveStudy(#%5.ScriptEssence{body=&quot;#start\n\n#hint: &lt;b&gt;Ask SLM Ribbon&lt;/b&gt;\\nThe Ask SLM Ribbon is a momentum indicator that uses a combination of three exponential moving averages. When the averages are in alinement, with the \&quot;superfast\&quot; moving average above the \&quot;fast\&quot; moving average and the fast moving average above the \&quot;slow\&quot; moving average, the momentum condition is positive. A \&quot;buy signal\&quot; is generated, with an up arrow, when above conditions are met and a \&quot;clear bar\&quot; occurs; with the low of that bar is above all of the moving averages. The positive momentum ends if the superfast moving average touches the fast moving average; then condition is considered neutral and an oppostive arrow will appear. Negative momentum and a \&quot;Sell signal\&quot; are the opposite of the bullish conditions. \\n \\n\\n--------------------------------------------------------------------------------\\nVolume bars can be colored to match the Chart by clicking on Style&gt;Settings&gt;Appearance&gt;Common, and color symbol as ticks  \\n\n\n \n\ninput price = close;\n\ninput superfast_length = 8;\n\ninput fast_length = 13;\n\ninput slow_length = 21;\n\ninput displace = 0;\ninput paint_bar = no;\n\n################\ninput averageType = AverageType.EXPONENTIAL;\n\ndef mov_avg8 = MovingAverage(averageType, price[-displace], superfast_length);\n\ndef mov_avg13 = MovingAverage(averageType, price[-displace], fast_length);\n\ndef mov_avg21 = MovingAverage(averageType, price[-displace], slow_length);\n\n \n\n#moving averages\n\nplot Superfast = mov_avg8;\n\nplot Fast = mov_avg13;\n\nplot Slow = mov_avg21;\n\n\n\ndef buy = mov_avg8 &gt; mov_avg13 and mov_avg13 &gt; mov_avg21 and low &gt; mov_avg8;\n\ndef stopbuy = mov_avg8 &lt;= mov_avg13;\n\ndef buynow = !buy[1] and buy;\n\ndef buysignal = CompoundValue(1, if buynow and !stopbuy then 1 else if buysignal[1] == 1 and stopbuy then 0 else buysignal[1], 0);\n\n\n\nplot Buy_Signal = buysignal[1] == 0 and buysignal == 1;\n\nBuy_Signal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\n\nBuy_Signal.SetDefaultColor(Color.DARK_GREEN);\n\nBuy_Signal.HideTitle();\nBuy_Signal.SetLineWeight(3);\nAlert(condition = buysignal[1] == 0 and buysignal == 1, text = \&quot;Buy Signal\&quot;, sound = Sound.Bell, \&quot;alert type\&quot; = Alert.BAR);\n\n\n\nplot Momentum_Down = buysignal[1] == 1 and buysignal == 0;\n\nMomentum_Down.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);\n\nMomentum_Down.SetDefaultColor(Color.PLUM);\n\nMomentum_Down.HideTitle();\n\nMomentum_Down.SetLineWeight(3);\nAlert(condition = buysignal[1] == 1 and buysignal == 0, text = \&quot;Momentum_Down\&quot;, sound = Sound.Bell, \&quot;alert type\&quot; = Alert.BAR);\n\n\n\ndef sell = mov_avg8 &lt; mov_avg13 and mov_avg13 &lt; mov_avg21 and high &lt; mov_avg8;\n\ndef stopsell = mov_avg8 &gt;= mov_avg13;\n\ndef sellnow = !sell[1] and sell;\n\ndef sellsignal = CompoundValue(1, if sellnow and !stopsell then 1 else if sellsignal[1] == 1 and stopsell then 0 else sellsignal[1], 0);\n\n\n\n\nplot Sell_Signal = sellsignal[1] == 0 and sellsignal;\n\nSell_Signal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);\n\nSell_Signal.SetDefaultColor(Color.RED);\n\nSell_Signal.HideTitle();\nSell_Signal.SetLineWeight(3);\nAlert(condition = sellsignal[1] == 0 and sellsignal == 1, text = \&quot;Sell Signal\&quot;, sound = Sound.Bell, \&quot;alert type\&quot; = Alert.BAR);\n\n\n\nplot Momentum_Up = sellsignal[1] == 1 and sellsignal == 0;\n\nMomentum_Up.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\n\nMomentum_Up.SetDefaultColor(Color.BLUE);\n\nMomentum_Up.HideTitle();\n\nMomentum_Up.SetLineWeight(3);\nAlert(condition = sellsignal[1] == 1 and sellsignal == 0, text = \&quot;Momentum_Up\&quot;, sound = Sound.Bell, \&quot;alert type\&quot; = Alert.BAR);\n\n\n\nplot Colorbars = if buysignal == 1 then 1 else if sellsignal == 1 then 2 else if buysignal == 0 or sellsignal == 0 then 3 else 0;\n\n#Colorbars.SetHiding(!paint_bar);\n\n#Colorbars.DefineColor(\&quot;Buy_Signal_Bars\&quot;, Color.DARK_GREEN);\n\n#Colorbars.DefineColor(\&quot;Sell_Signal_Bars\&quot;, Color.RED);\n\n#Colorbars.DefineColor(\&quot;Neutral\&quot;, Color.PLUM);\n#Colorbars.SetHiding(!paint_bar);\n\n\nAssignPriceColor(if Colorbars == 1 then Colorbars.Color(\&quot;buy_signal_bars\&quot;) else if Colorbars == 2 then Colorbars.Color(\&quot;Sell_Signal_bars\&quot;) else  Colorbars.Color(\&quot;neutral\&quot;));\n\n############################################\n\n#Superfast.SetDefaultColor(GetColor(0));\n#Fast.SetDefaultColor(GetColor(1));\n#Slow.SetDefaultColor(GetColor(5));\n\n\nSuperfast.SetDefaultColor( Color.Cyan);\n\nFast.SetDefaultColor( Color.Gray);\n\nSlow.SetDefaultColor(GetColor(5));\nSlow.SetStyle(Curve.Medium_DASH);\n\n\n\n\n#end&quot;,name=&quot;_d32b15e4_bf81_441f_be67_162a0593b898&quot;}){alerts:LocalAlertArray0,alerts=@LocalAlertArray0,inputsMap:TreeMap1{^(&quot;price&quot;,&quot;CLOSE&quot;)},inputsMap=@TreeMap1}),+(!%4.CompiledStudy.resolveStudy(#%5.ScriptEssence{body=&quot;# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2011-2021\n#\n\ninput price = close;\ninput reversalAmount = 8.0;\ninput showBubbles = no;\ninput showLabel = no;\n\nassert(reversalAmount &gt; 0, \&quot;\'reversal amount\' should be positive: \&quot; + reversalAmount);\n\nplot \&quot;ZZ%\&quot; = reference ZigZagHighLow(price, price, reversalAmount, 0, 1, 0);\n\ndef zzSave = if !IsNaN(\&quot;ZZ%\&quot;) then price else getValue(zzSave, 1);\ndef chg = (price / getValue(zzSave, 1) - 1) * 100;\ndef isUp = chg &gt;= 0;\ndef isConf = AbsValue(chg) &gt;= reversalAmount or (IsNaN(getValue(\&quot;ZZ%\&quot;, 1)) and getValue(isConf, 1));\n\n\&quot;ZZ%\&quot;.EnableApproximation();\n\&quot;ZZ%\&quot;.DefineColor(\&quot;Up Trend\&quot;, Color.UPTICK);\n\&quot;ZZ%\&quot;.DefineColor(\&quot;Down Trend\&quot;, Color.DOWNTICK);\n\&quot;ZZ%\&quot;.DefineColor(\&quot;Undefined\&quot;, Color.DARK_ORANGE);\n\&quot;ZZ%\&quot;.AssignValueColor(if !isConf then \&quot;ZZ%\&quot;.color(\&quot;Undefined\&quot;) else if isUp then \&quot;ZZ%\&quot;.color(\&quot;Up Trend\&quot;) else \&quot;ZZ%\&quot;.color(\&quot;Down Trend\&quot;));\n\nDefineGlobalColor(\&quot;Unconfirmed\&quot;, Color.DARK_ORANGE);\nDefineGlobalColor(\&quot;Up\&quot;, Color.UPTICK);\nDefineGlobalColor(\&quot;Down\&quot;, Color.DOWNTICK);\n\ndef barNumber = barNumber();\n\nAddChartBubble(showBubbles and !IsNaN(\&quot;ZZ%\&quot;) and barNumber != 1, price, round(chg) + \&quot;%\&quot;, if !isConf then globalColor(\&quot;Unconfirmed\&quot;) else if isUp then globalColor(\&quot;Up\&quot;) else globalColor(\&quot;Down\&quot;), isUp);\nAddLabel(showLabel and barNumber != 1, (if isConf then \&quot;Confirmed \&quot; else \&quot;Unconfirmed \&quot;) + \&quot;ZigZag: \&quot; + round(chg) + \&quot;%\&quot;, if !isConf then globalColor(\&quot;Unconfirmed\&quot;) else if isUp then globalColor(\&quot;Up\&quot;) else globalColor(\&quot;Down\&quot;));&quot;,name=&quot;ZigZagPercent&quot;}))}},!get(#%3.SubgraphId(&quot;Volume&quot;)){height=168,storableIndicators.+(!%4.CompiledStudy.resolveStudy(#%5.ScriptEssence{body=&quot;# Modified by Mahi\n# Second Mod by Ramon DV\n\ndeclare on_volume;\n\n#Inputs\n\ninput ShowDayAvg = yes;\ninput AvgDayVolLength = 30;\ninput ShowTodayVolume = yes;\ninput ShowTodayVolumeProjection = yes;\ninput ShowPercentOfDayAvg = yes;\ninput UnusualVolumePercent = 200;\ninput ShowBarAvg = yes;\ninput AvgBarVolLength = 30;\ninput ShowCurrentBar = yes;\ninput ShowPercentOfBarAvg = yes;\ninput ShowSellVolumePercent = yes;\ninput ShowBuyVolumePercent = yes;\ninput AvgType = AverageType.SIMPLE;\n\ndef O = open;\ndef H = high;\ndef C = close;\ndef L = low;\ndef V = volume;\ndef buying = V * (C - L) / (H - L);\ndef selling = V * (H - C) / (H - L);\n\ndef O_day = open(period = AggregationPeriod.DAY);\ndef H_day = high(period = AggregationPeriod.DAY);\ndef C_day = close(period = AggregationPeriod.DAY);\ndef L_day = low(period = AggregationPeriod.DAY);\n\ndef selling_day = V * (H_day - C_day) / (H_day - L_day);\ndef buying_day = V * (C_day - L_day) / (H_day - L_day);\n# Selling Volume pressure\n\nplot SellVol = selling;\nSellVol.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);\nSellVol.SetDefaultColor(Color.RED);\nSellVol.HideTitle();\nSellVol.HideBubble();\nSellVol.SetLineWeight(5);\n\n# Total Volume\n# Buying Volume pressure\n\nplot BuyVol = buying + selling; # plot in the background of selling volume\nBuyVol.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);\nBuyVol.SetDefaultColor(Color.DARK_GREEN);\nBuyVol.HideTitle();\nBuyVol.HideBubble();\nBuyVol.SetLineWeight(5);\n\n#Volume Data\n\ndef DayVol = volume(period = “DAY”);\ndef AvgDayVol = MovingAverage(AvgType, DayVol[1], AvgDayVolLength);\ndef percentOfDay = Round((DayVol / AvgDayVol) * 100, 0);\n\n\ndef AvgBarVol = MovingAverage(AvgType, volume[1], AvgBarVolLength);\ndef percentOfBar = Round((volume / AvgBarVol) * 100, 0);\ndef SellVolPercent = Round((selling / volume) * 100, 0);\ndef BuyVolPercent = 100 - SellVolPercent;\n\ndef SellVolPercent_day = Round((selling_day / volume) * 100, 0);\ndef BuyVolPercent_day = 100 - SellVolPercent_day;\n\n# Labels\n\nAddLabel(ShowDayAvg, \&quot;Avg “ + AvgDayVolLength + “ Days: \&quot; + Round(AvgDayVol, 0), Color.LIGHT_GRAY);\n\nAddLabel(ShowTodayVolume, \&quot;Today: \&quot; + DayVol, (if percentOfDay &gt;= UnusualVolumePercent then Color.GREEN else if percentOfDay &gt;= 100 then Color.ORANGE else Color.LIGHT_GRAY));\n\nAddLabel(ShowPercentOfDayAvg, percentOfDay + \&quot;%\&quot;, (if percentOfDay &gt;= UnusualVolumePercent then Color.GREEN else if percentOfDay &gt;= 100 then Color.ORANGE else Color.WHITE) );\n\nAddLabel(ShowBarAvg, \&quot;Avg “ + AvgBarVolLength + ” Bars: \&quot; + Round(AvgBarVol, 0), Color.LIGHT_GRAY);\n\nAddLabel(ShowCurrentBar, \&quot;Cur Bar: \&quot; + volume, (if percentOfBar &gt;= UnusualVolumePercent then Color.GREEN else if percentOfBar &gt;= 100 then Color.ORANGE else Color.LIGHT_GRAY));\n\nAddLabel(ShowPercentOfBarAvg, percentOfBar + \&quot;%\&quot;, (if percentOfBar &gt;= UnusualVolumePercent then Color.GREEN else if percentOfBar &gt;= 100 then Color.ORANGE else Color.WHITE) );\n\n\nAddLabel(ShowSellVolumePercent and (SellVolPercent &gt; BuyVolPercent) , \&quot;Cur Bar Sell %: \&quot; + SellVolPercent, if SellVolPercent &gt; BuyVolPercent then Color.RED else Color.GRAY);\nAddLabel(ShowBuyVolumePercent and (SellVolPercent &lt;= BuyVolPercent), \&quot;Cur Bar Buy %: \&quot; + BuyVolPercent, if BuyVolPercent &gt; SellVolPercent then Color.GREEN else Color.GRAY);\n\n\n# PriceOpen.Hide();\ninput length = 50;\n\nplot Vol = volume;\nplot VolAvg = Average(volume, length);\n\nVol.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);\nVol.SetLineWeight(3);\nVol.DefineColor(\&quot;Up\&quot;, Color.UPTICK);\nVol.DefineColor(\&quot;Down\&quot;, Color.DOWNTICK);\nVol.AssignValueColor(if close &gt; close[1] then Vol.Color(\&quot;Up\&quot;) else if close &lt; close[1] then Vol.Color(\&quot;Down\&quot;) else GetColor(1));\nVolAvg.SetDefaultColor(GetColor(8));\n\n\n#########################################################\n\n#def rth = (RegularTradingEnd(GetYYYYMMDD()) - RegularTradingStart(GetYYYYMMDD())) / AggregationPeriod.HOUR;\ndef rth = (RegularTradingEnd(GetYYYYMMDD()) - RegularTradingStart(GetYYYYMMDD())) / AggregationPeriod.MIN;\ndef MarketNotClosed = GetTime() &lt;= RegularTradingEnd (GetYYYYMMDD());\n# def eod = ((  RegularTradingEnd (GetYYYYMMDD()) - GetTime() ) / AggregationPeriod.MIN);\ndef eod = if MarketNotClosed then ((  RegularTradingEnd (GetYYYYMMDD()) - GetTime() ) / AggregationPeriod.MIN) else ((  RegularTradingEnd (GetYYYYMMDD())  ) / AggregationPeriod.MIN);\n\ndef DayVol_Projetion = volume(period = “DAY”) * rth / (rth - eod);\ndef percentOfDayProjection = Round((DayVol_Projetion / AvgDayVol) * 100, 0);\nAddLabel(ShowBuyVolumePercent, \&quot;Day Buy %: \&quot; + BuyVolPercent_day, if BuyVolPercent_day &gt; SellVolPercent_day then Color.GREEN else Color.GRAY);\n\nAddLabel(ShowTodayVolumeProjection, \&quot;Est. Vol: \&quot; + Round(DayVol_Projetion, 0) , if DayVol_Projetion &gt; AvgDayVol * 1.5  then Color.GREEN else Color.GRAY);\n\nAddLabel(ShowTodayVolumeProjection,  percentOfDayProjection  + \&quot;%\&quot;, if DayVol_Projetion &gt; AvgDayVol * 1.5  then Color.GREEN else Color.GRAY);\n\ndef y = GetTime() / AggregationPeriod.MIN;\n#eod =2;\n#AddLabel(yes, \&quot;RTH duration (min): \&quot; + rth);\n#AddLabel(yes, \&quot;EOD duration (min): \&quot; + eod);\n#AddLabel(yes, \&quot;Market Not closed: \&quot; + y);\n\n#######&quot;,name=&quot;_3561862d_5455_4870_b26e_b0e3a91d177d&quot;}){plots{2:{hiding=&lt;T}}})},^(#%3.SubgraphId(&quot;Subgraph3&quot;),#%3.SubgraphStorableModel{height=168,storableIndicators.+(!%4.CompiledStudy.resolveStudy(#%5.ScriptEssence{body=&quot;declare lower;\n\n################\n\n\n\n\n\n#######\n\n\n\n\n\n\ninput price = close;\n\ninput superfast_length = 8;\n\ninput fast_length = 13;\n\ninput slow_length = 21;\n\ninput displace = 0;\n\n################\ninput averageType = AverageType.EXPONENTIAL;\n\ndef mov_avg8 = MovingAverage(averageType, price[-displace], superfast_length);\n\ndef mov_avg13 = MovingAverage(averageType, price[-displace], fast_length);\n\ndef mov_avg21 = MovingAverage(averageType, price[-displace], slow_length);\n \n#moving averages\n\ndef Superfast = mov_avg8;\n\ndef Fast = mov_avg13;\n\ndef Slow = mov_avg21;\n\n\ndef buy = mov_avg8 &gt; mov_avg13 and mov_avg13 &gt; mov_avg21 and low &gt; mov_avg8;\n\ndef stopbuy = mov_avg8 &lt;= mov_avg13;\n\ndef buynow = !buy[1] and buy;\n\ndef buysignal = CompoundValue(1, if buynow and !stopbuy then 1 else if buysignal[1] == 1 and stopbuy then 0 else buysignal[1], 0);\n\n\ndef Buy_Signal = buysignal[1] == 0 and buysignal == 1;\n\ndef Momentum_Down = buysignal[1] == 1 and buysignal == 0;\n\n\ndef sell = mov_avg8 &lt; mov_avg13 and mov_avg13 &lt; mov_avg21 and high &lt; mov_avg8;\n\ndef stopsell = mov_avg8 &gt;= mov_avg13;\n\ndef sellnow = !sell[1] and sell;\n\ndef sellsignal = CompoundValue(1, if sellnow and !stopsell then 1 else if sellsignal[1] == 1 and stopsell then 0 else sellsignal[1], 0);\n\n\ndef Sell_Signal = sellsignal[1] == 0 and sellsignal;\n\ndef Momentum_Up = sellsignal[1] == 1 and sellsignal == 0;\n \n# when using this as a custom scan, change the word plot to def\n# then remove the \'#\' from in front of one of the \&quot;plot Scan\&quot; statements below\ndef Colorbars = if buysignal == 1 then 1 else if sellsignal == 1 then -1 else if buysignal == 0 or sellsignal == 0 then 0 else 0;\n\n# use this first Scan plot for SLM Ribbon Momentum UP\n#plot Scan = if Colorbars == 1 then yes else no;\n\n# use this second Scan plot for SLM Ribbon Momentum DOWN\n#plot Scan = if Colorbars == -1 then yes else no;\n\n\n\ninput length = 14;\n\ndef MaxBound = HighestWeighted(high, length, LinearRegressionSlope(price = high, length = length));\ndef MinBound = LowestWeighted(low, length, LinearRegressionSlope(price = low, length = length));\ndef diff = MaxBound - MinBound;\n\nplot PROSC = if diff != 0 then 100 * (close - MinBound) / diff else 0;\nplot OverBought = 75;\nplot OverSold = 25;\nplot z =50;\nz.SetDefaultColor(color.gray);\n\nPROSC.SetDefaultColor(GetColor(8));\nOverBought.SetDefaultColor(GetColor(5));\nOverSold.SetDefaultColor(GetColor(5));\n\n\n###############\n\ndef Colorbars1 = if buysignal ==1 then 1 else if sellsignal ==1 then 2 else if buysignal ==0 or sellsignal==0 then 3 else 0;\n\n\n\nPROSC.definecolor(\&quot;Buy_Signal_Bars\&quot;, color.dark_green);\n\nPROSC.definecolor(\&quot;Sell_Signal_Bars\&quot;, color.red);\n\nPROSC.definecolor(\&quot;Neutral\&quot;, color.plum);\n\nPROSC.AssignValueColor(if Colorbars1 ==1 then PROSC.color(\&quot;buy_signal_bars\&quot;) else if colorbars1 ==2 then PROSC.color(\&quot;Sell_Signal_bars\&quot;) else  PROSC.color(\&quot;neutral\&quot;));\nPROSC.setlineWeight(2);\nOverBought.hide();\nOverSold.hide();\n\n\n\n\n\nAddCloud(0, OverSold, Color.RED, Color.light_green);\nAddCloud(OverBought, 100, Color.Green, Color.light_red);\n\n\nplot UpSignal = if (buysignal and PROSC crosses above OverSold) then OverSold else Double.NaN;\nplot DownSignal = if (sellsignal and PROSC crosses below OverBought) then OverBought else Double.NaN;\nplot DownSignal2 = if (( Momentum_Down or sellsignal) and PROSC  crosses below OverSold) then OverSold else Double.NaN;\n\nplot UpSignal2 = if ( Momentum_Up and PROSC&gt;= overbought) then overbought else Double.NaN;\ninput showBreakoutSignals =yes;\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\n\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\nUpSignal2.SetDefaultColor(Color.plum);\nUpSignal2.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\n\nDownSignal2.SetDefaultColor(Color.plum);\nDownSignal2.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\n\n\n\n&quot;,name=&quot;_bc0d152e_88dc_44b4_99a7_78acd8502e84&quot;}))}),^(#%3.SubgraphId(&quot;Subgraph7&quot;),#%3.SubgraphStorableModel{height=168,storableIndicators.+(!%4.CompiledStudy.resolveStudy(#%5.ScriptEssence{body=&quot;# RSI-Laguerre Self Adjusting With Fractal Energy Gaussian Price Filter\n# Mobius\n# V01.12.2016\n# Both Fractal Energy and RSI are plotted. RSI in cyan and FE in yellow. Look for trend exhaustion in the FE and a reversal of RSI or Price compression in FE and an RSI reversal.\n\ndeclare lower;\n\n#Inputs: \ninput nFE = 8;#hint nFE: length for Fractal Energy calculation. \ninput AlertOn = no;\ninput Glength  = 13;\ninput betaDev =  8;\ninput data = close;\n\ndef w = (2 * Double.Pi / Glength);\ndef beta = (1 - Cos(w)) / (Power(1.414, 2.0 / betaDev) - 1 );\ndef alpha = (-beta + Sqrt(beta * beta + 2 * beta));\ndef Go = Power(alpha, 4) * open + \n             4 * (1 – alpha) * Go[1] – 6 * Power( 1 - alpha, 2 ) * Go[2] + \n             4 * Power( 1 - alpha, 3 ) * Go[3] - Power( 1 - alpha, 4 ) * Go[4];\ndef Gh = Power(alpha, 4) * high + \n             4 * (1 – alpha) * Gh[1] – 6 * Power( 1 - alpha, 2 ) * Gh[2] + \n             4 * Power( 1 - alpha, 3 ) * Gh[3] - Power( 1 - alpha, 4 ) * Gh[4];\ndef Gl = Power(alpha, 4) * low + \n             4 * (1 – alpha) * Gl[1] – 6 * Power( 1 - alpha, 2 ) * Gl[2] + \n             4 * Power( 1 - alpha, 3 ) * Gl[3] - Power( 1 - alpha, 4 ) * Gl[4];\ndef Gc = Power(alpha, 4) * data + \n             4 * (1 – alpha) * Gc[1] – 6 * Power( 1 - alpha, 2 ) * Gc[2] + \n             4 * Power( 1 - alpha, 3 ) * Gc[3] - Power( 1 - alpha, 4 ) * Gc[4];\n# Variables:\ndef o;\ndef h;\ndef l;\ndef c;\ndef CU1;\ndef CU2;\ndef CU;\ndef CD1;\ndef CD2;\ndef CD;\ndef L0;\ndef L1;\ndef L2;\ndef L3;\nplot RSI;\nplot OS;\nplot OB;\nplot M;\n\n# Calculations\no = (Go + Gc[1]) / 2;\nh = Max(Gh, Gc[1]);\nl = Min(Gl, Gc[1]);\nc = (o + h + l + Gc) / 4;\nplot gamma = Log(Sum((Max(Gh, Gc[1]) - Min(Gl, Gc[1])), nFE) / \n        (Highest(Gh, nFE) - Lowest(Gl, nFE)))\n            / Log(nFE);\ngamma.SetDefaultColor(Color.YELLOW);\nL0 = (1 – gamma) * Gc + gamma * L0[1];\nL1 = -gamma * L0 + L0[1] + gamma * L1[1];\nL2 = -gamma * L1 + L1[1] + gamma * L2[1];\nL3 = -gamma * L2 + L2[1] + gamma * L3[1];\nif L0 &gt;= L1\nthen {\n    CU1 = L0 - L1;\n    CD1 = 0;\n} else {\n    CD1 = L1 - L0;\n    CU1 = 0;\n}\nif L1 &gt;= L2\nthen {\n    CU2 = CU1 + L1 - L2;\n    CD2 = CD1;\n} else {\n    CD2 = CD1 + L2 - L1;\n    CU2 = CU1;\n}\nif L2 &gt;= L3\nthen {\n    CU = CU2 + L2 - L3;\n    CD = CD2;\n} else {\n    CU = CU2;\n    CD = CD2 + L3 - L2;\n}\n\nRSI = if CU + CD &lt;&gt; 0 then CU / (CU + CD) else 0;\nRSI.SetDefaultColor(Color.CYAN);\nOS = if IsNaN(c) then Double.NaN else 0.2;\nOS.SetDefaultColor(Color.GRAY);\nOS.HideBubble();\nOS.HideTitle();\nOB = if IsNaN(c) then Double.NaN else 0.8;\nOB.SetDefaultColor(Color.GRAY);\nOB.HideBubble();\nOB.HideTitle();\nM = if IsNaN(c) then Double.NaN else 0.5;\nM.SetStyle(Curve.LONG_DASH);\nM.SetDefaultColor(Color.GRAY);\nM.HideBubble();\nM.HideTitle();\nplot FEh = if IsNaN(c) then Double.NaN else .618;\nFEh.SetStyle(Curve.SHORT_DASH);\nFEh.HideBubble();\nFEh.SetDefaultColor(Color.GRAY);\nFEh.HideTitle();\nplot FEl = if IsNaN(c) then Double.NaN else .382;\nFEl.SetStyle(Curve.SHORT_DASH);\nFEl.SetDefaultColor(Color.GRAY);\nFEl.HideBubble();\nFEl.HideTitle();\nAddCloud(0, OS, Color.RED, Color.GREEN);\nAddCloud(OB, 1, Color.GREEN, Color.RED);\nAlert(AlertOn and RSI crosses below .8, \&quot;\&quot;, Alert.BAR, Sound.Bell);\nAlert(AlertOn and RSI crosses above .2, \&quot;\&quot;, Alert.BAR, Sound.Bell);\n\n#######\n\n#SLIM ribon\ninput price = close;\n\ninput superfast_length =4;\n\ninput fast_length = 7;\n\ninput slow_length = 21;\n\ninput displace = 0;\n\n################\ninput averageTypeSuperfast = AverageType.simple;\ninput averageTypefast = AverageType.simple;\ninput averageTypeSlow = AverageType.EXPONENTIAL;\n\ninput  priceSupperFast = hlc3 ;\ninput priceFast  = close ;\ninput priceSlow  = close ;\n\ndef mov_avg_superFast = MovingAverage(averageTypeSuperfast, priceSupperFast[-displace], superfast_length);\ndef mov_avg_Fast = MovingAverage(averageTypefast, priceFast[-displace], fast_length);\ndef mov_avg_Slow = MovingAverage(averageTypeSlow, priceSlow[-displace], slow_length);\n\n#moving averages\ndef Superfast = mov_avg_superFast;\ndef Fast = mov_avg_Fast;\ndef Slow = mov_avg_Slow;\n\n################################\ndef buy = mov_avg_superFast &gt; mov_avg_Fast and mov_avg_Fast &gt; mov_avg_Slow and low &gt; mov_avg_superFast;\n\ndef stopbuy = mov_avg_superFast &lt;= mov_avg_Fast;\n\ndef buynow = !buy[1] and buy;\n\ndef buysignal = CompoundValue(1, if buynow and !stopbuy then 1 else if buysignal[1] == 1 and stopbuy then 0 else buysignal[1], 0);\n\n\ndef Buy_Signal = buysignal[1] == 0 and buysignal == 1;\n\ndef Momentum_Down = buysignal[1] == 1 and buysignal == 0;\n\n\ndef sell = mov_avg_superFast &lt; mov_avg_Fast and mov_avg_Fast &lt; mov_avg_Slow and high &lt; mov_avg_superFast;\n\ndef stopsell = mov_avg_superFast &gt;= mov_avg_Fast;\n\n\n\n###########################\ndef sellnow = !sell[1] and sell;\n\ndef sellsignal = CompoundValue(1, if sellnow and !stopsell then 1 else if sellsignal[1] == 1 and stopsell then 0 else sellsignal[1], 0);\n\n\ndef Sell_Signal = sellsignal[1] == 0 and sellsignal;\n\ndef Momentum_Up = sellsignal[1] == 1 and sellsignal == 0;\n \n# when using this as a custom scan, change the word plot to def\n# then remove the \'#\' from in front of one of the \&quot;plot Scan\&quot; statements below\ndef Colorbars = if buysignal == 1 then 1 else if sellsignal == 1 then -1 else if buysignal == 0 or sellsignal == 0 then 0 else 0;\n\n# use this first Scan plot for SLM Ribbon Momentum UP\n#plot Scan = if Colorbars == 1 then yes else no;\n\n# use this second Scan plot for SLM Ribbon Momentum DOWN\n#plot Scan = if Colorbars == -1 then yes else no;\n\ninput length = 19;\n\ndef HMA = MovingAverage(AverageType.HULL, price, length)[-displace];\ndef HMA_Up=  HMA &gt; HMA[1];\ndef HMA_Down =! HMA_UP;\n\n###############\n\n#def Colorbars1 = if buysignal == 1 then 1 else if sellsignal == 1 then 2 else if buysignal == 0 or sellsignal == 0 then 3 else 0;\n\n\n\nRSI.definecolor(\&quot;Buy\&quot;, color.dark_green);\n\n\nRSI.definecolor(\&quot;Sell\&quot;, color.red);\n\nRSI.DefineColor(\&quot;Neutral\&quot;, Color.PLUM);\n#RSI.DefineColor(\&quot;NeutralDown\&quot;, Color.orange);\nRSI.definecolor(\&quot;HullMA_up\&quot;, color.blue);\n\nRSI.definecolor(\&quot;HullMA_down\&quot;, color.orange);\n\nRSI.AssignValueColor(if buysignal and HMA_Up then RSI.color(\&quot;Buy\&quot;) else if buysignal and !HMA_Up then RSI.color(\&quot;HullMA_down\&quot;) else if sellsignal and HMA_Down  then RSI.color(\&quot;Sell\&quot;) else  if sellsignal and !HMA_Down  then RSI.color(\&quot;HullMA_up\&quot;) else  RSI.color(\&quot;neutral\&quot;));;#\n# if Momentum_Up then  RSI.color(\&quot;neutralUp\&quot;) else  RSI.color(\&quot;neutraldown\&quot;));\n\n\n\n\n####$$$$$$$$$$$$$$$$\n###############\n\n\n\n\nplot UpSignal = if (buysignal and RSI crosses above OS) then RSI-0.1 else Double.NaN;\nplot DownSignal = if (sellsignal and RSI crosses below OB) then RSI+0.1 else Double.NaN;\ninput showBreakoutSignals =yes;\nUpSignal.SetHiding(!showBreakoutSignals);\nDownSignal.SetHiding(!showBreakoutSignals);\n\n\nUpSignal.SetDefaultColor(Color.UPTICK);\nUpSignal.SetPaintingStrategy(PaintingStrategy.ARROW_UP);\nDownSignal.SetDefaultColor(Color.DOWNTICK);\nDownSignal.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);\n\n\n\n\n\n\n\n\n\n# End Code RSI_Laguerre Self Adjusting with Fractal Energy&quot;,name=&quot;_94f3daa4_27de_42e1_9e1c_1f3e66613988&quot;}){alerts:LocalAlertArray1,alerts=@LocalAlertArray1})})}}" SYMBOL="USAC" SYMBOL_GROUP="6" VERTICAL="false" VISIBLE="true" WEIGHT="1.0"/>
            <DASHBOARD SYMBOL=".AAPL210409C127" SYMBOL_GROUP="6" VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <LEVEL_II VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <LIVE_NEWS VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <PHASE_SCORES VERTICAL="false" VISIBLE="false" WEIGHT="2.0"/>
            <TIME_SALES VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <TRADE CONFIGURATION_NAME="SINGLE" ORDER_RULES_SET="STOCK" ORDER_TYPE="LIMIT" OS_AUTO="false" OS_EXPANDED="false" OS_TIF="DAY" QTY="100.0" TEMPLATE="SINGLE" TRADE_BUTTONS="BUY_MKT;SELL_MKT;MULTI_CANCEL;REVERSE;FLAT;SECOND_LINE;QUANTITY;AUTO_SEND;ORDER_SETUP" VISIBLE="false">
              <OCO_STOP>
                <TRG_0 TRG_ENBL="true" TRG_LINK="ASK_BID" TRG_OFFSET_MODE="TICK" TRG_OT="STOP" TRG_SETUP="10.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL USAC="10.0"/>
                </TRG_0>
              </OCO_STOP>
              <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="1.0" TRG_TIF="DAY">
                <OFFSET_PER_SYMBOL USAC="1.0"/>
              </TRG_0>
              <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-1.0" TRG_TIF="DAY">
                <OFFSET_PER_SYMBOL USAC="-1.0"/>
              </TRG_1>
              <_2>
                <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="2.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL USAC="2.0"/>
                </TRG_0>
                <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-2.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL USAC="-2.0"/>
                </TRG_1>
              </_2>
              <_3>
                <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="3.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL USAC="3.0"/>
                </TRG_0>
                <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-3.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL USAC="-3.0"/>
                </TRG_1>
              </_3>
            </TRADE>
          </CELL2>
          <MODELNODE0 COUNT="3" ROWLAYOUT="true" TYPE="SPLIT" WEIGHT="0.0">
            <MODELNODE0 COMPOSITENAME="CELL0" NAME="0" TYPE="LEAF" WEIGHT="0.3333333333333333"/>
            <MODELNODE1 COMPOSITENAME="CELL1" NAME="1" TYPE="LEAF" WEIGHT="0.3333333333333333"/>
            <MODELNODE2 COMPOSITENAME="CELL2" NAME="2" TYPE="LEAF" WEIGHT="0.3333333333333333"/>
          </MODELNODE0>
        </TOS_CHARTS>
      </DETACHED_FRAME_120>
      <DETACHED_FRAME_121 ALWAYS_ON_TOP="false" HEIGHT="1056" LAYOUT="TOS CHARTS" SHARED_VERSION_LINK="M2PxjJE" STATE="MAXIMIZED_HORIZ  MAXIMIZED_VERT" WIDTH="1936" X="-3848" Y="5">
        <TOS_CHARTS COLUMN_COUNT="1" CURRENT_GRID_NAME="mah_anchor3d" DEFAULT_TYPE="DASHBOARD" ORDER_ENTRY_EXPANDED="false" ROW_COUNT="1">
          <CELL0 ROWSPANELWEIGHT="1.0" ROWWEIGHT0="1.0" ROWWEIGHT1="1.0" SELECTED_TYPE="CHART" SIDEBAR_IS_ACTIVE="true" SYMBOL="DCTH" SYMBOL_GROUP="2" TRADE_BUTTONS_MIGRATED="true">
            <ACTIVETRADER VERTICAL="false" VISIBLE="false" WEIGHT="2.0"/>
            <BIG_BUTTONS VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <CHART COLUMN_COUNT="1" CONFIGURATION="@v9@%0:com.devexperts.tos.chartdata,1:com.devexperts.tos.thinkscript.constants,2:com.devexperts.tos.thinkscript.data,3:java.awt,4:com.devexperts.toschart.control.subgraph,5:com.devexperts.toschart.elstudies,6:com.devexperts.toschart.script%owner{chartAggregationPeriods:ChartAggregationPeriodArray0,chartAggregationPeriods=@ChartAggregationPeriodArray0,colors{5::CustomColor0,6::CustomColor1}}#com.devexperts.toschart.core.ChartModel{encodedMixinsState=&quot;{\&quot;common\&quot;:{\&quot;DRAWING_SETS\&quot;:\&quot;{\\\&quot;MRVL\\\&quot;:\\\&quot;9e3b36c7-d6fe-41b1-965f-323baae94284\\\&quot;}\&quot;},\&quot;state_props\&quot;:{\&quot;state_type\&quot;:\&quot;REGULAR\&quot;},\&quot;monkey_bars_exp\&quot;:{\&quot;LikefolioMixin\&quot;:\&quot;{\\\&quot;paintingSettings\\\&quot;:{\\\&quot;neutralSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;positiveSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;negativeSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;sentimentSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true}},\\\&quot;shownDivisions\\\&quot;:[],\\\&quot;allDivisions\\\&quot;:[]}\&quot;},\&quot;monkey_bars\&quot;:{},\&quot;seasonality\&quot;:{},\&quot;regular\&quot;:{\&quot;DescriberMixin\&quot;:\&quot;{\\\&quot;visibility\\\&quot;:\\\&quot;HIDE_PANEL\\\&quot;,\\\&quot;studiesMode\\\&quot;:\\\&quot;HIDE_STUDIES\\\&quot;}\&quot;,\&quot;LikefolioMixin\&quot;:\&quot;{\\\&quot;paintingSettings\\\&quot;:{\\\&quot;neutralSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;positiveSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;negativeSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true},\\\&quot;sentimentSettings\\\&quot;:{\\\&quot;visible\\\&quot;:true}},\\\&quot;shownDivisions\\\&quot;:[],\\\&quot;allDivisions\\\&quot;:[]}\&quot;}}&quot;,encodedPatternsModel=&quot;{\&quot;showPatterns\&quot;:true,\&quot;models\&quot;:[],\&quot;fibModels\&quot;:[]}&quot;,groupId=&quot;default&quot;,styleSettings{activeTool=3,chartAggregationSettings.tickAggregationSettings=!com.devexperts.toschart.model.TimeFrameAggregationSettings.createTickOrTimeAggregation(!%0.ChartRange.findByCode(&quot;DAY5&quot;),!%0.ChartAggregationPeriod.create(&quot;5000t&quot;)),commonStyleSettings{chartModeName:ChartModeName0,chartModes.!get(@ChartModeName0){chartPaintingType=!java.lang.Enum.valueOf(*%1.ChartPaintingType.class,&quot;HEIKIN_ASHI&quot;)},colorSettings{candleTypeColors{downColor=#%2.CustomColor(#%3.Color(255,102,102,255)),fillDownColor=#%2.CustomColor(#%3.Color(255,102,102,255)),fillUp=&lt;T,fillUpColor=#%2.CustomColor(#%3.Color(0,102,0,255)),upColor=#%2.CustomColor(#%3.Color(0,102,0,255))},heikinAshiTypeColors{downColor=#%2.CustomColor(#%3.Color(255,102,102,255)),fillDownColor=#%2.CustomColor(#%3.Color(255,102,102,255)),fillUp=&lt;T,fillUpColor=#%2.CustomColor(#%3.Color(0,102,51,255)),upColor=#%2.CustomColor(#%3.Color(0,102,51,255))},monkeyProfileTypeColors.defaultRowHeight=&lt;F,mpExpandedTypeColors.defaultRowHeight=&lt;F},expansion{down=10,right=100,up=10},fitStudiesToScreen=&lt;F,leftAxisRegulator{maxValue=49.47538991d,minValue=43.20461009d},manualAxisRegulator{maxValue=21.85918632d,minValue=10.15581368d},myToolsPanelPined=&lt;T,previousRightExpansion=100,shortCuts{^(&quot;Time Zone&quot;,&lt;F),^(&quot;Show Expiration Friday &quot;,&lt;F),^(&quot;Keep Price Zoom&quot;,&lt;F),^(&quot;enableLeftAxis&quot;,&lt;F),^(&quot;Fit expected price ranges&quot;,&lt;F),^(&quot;emphasizeDigitMPExpanded&quot;,&lt;F),^(&quot;showWicksCandleTrend&quot;,&lt;F),^(&quot;highlightEarnings&quot;,&lt;F),^(&quot;synchronizeCrosshair&quot;,&lt;F),^(&quot;myToolsMode&quot;,&lt;F),^(&quot;seasonalityStyle&quot;,&lt;F),^(&quot;Show Price Subgraph&quot;,&lt;F),^(&quot;closePriceLevel&quot;,&lt;F),^(&quot;Color Volume As Symbol Ticks&quot;,&lt;F),^(&quot;highlightPhantomRBars&quot;,&lt;F),^(&quot;Cross type &quot;,&lt;F),^(&quot;Fit Studies to Screen&quot;,&lt;F),^(&quot;Fit Orders&quot;,&lt;F),^(&quot;Bubbles as Percentage&quot;,&lt;F),^(&quot;hideStatusString&quot;,&lt;F),^(&quot;Show Studies &quot;,&lt;F),^(&quot;showWicksHeikinAshi&quot;,&lt;F),^(&quot;Alerts&quot;,&lt;F),^(&quot;Chart scale&quot;,&lt;F),^(&quot;Fit High/Low&quot;,&lt;F),^(&quot;Orders&quot;,&lt;F),^(&quot;Use Log Scale &quot;,&lt;F),^(&quot;Fit Study Markers to Screen&quot;,&lt;F),^(&quot;Fit Alerts&quot;,&lt;F),^(&quot;Fit patterns&quot;,&lt;F),^(&quot;Percentage View&quot;,&lt;F),^(&quot;Make Auto Zoom &quot;,&lt;F),^(&quot;Show Year Marking Line&quot;,&lt;F),^(&quot;Show Rollover Line&quot;,&lt;F),^(&quot;Show High/Low Bubbles &quot;,&lt;F),^(&quot;Snap mode&quot;,&lt;F),^(&quot;highlightStudies&quot;,&lt;F),^(&quot;Overlapped Volume&quot;,&lt;F),^(&quot;Show Symbol Logo&quot;,&lt;F),^(&quot;Show Last Price Bubble &quot;,&lt;F),^(&quot;emphasizeDigitMP&quot;,&lt;F),^(&quot;Show grid&quot;,&lt;F),^(&quot;showWicksCandle&quot;,&lt;F),^(&quot;Show trades&quot;,&lt;F),^(&quot;highlightSeasons&quot;,&lt;F),^(&quot;Extend Order/Alert Line to Left&quot;,&lt;F)},showGrid=&lt;F,step=2.849002849002849d,suppressAutoZoom=&lt;T},forexStyleSettings.shortCuts.^(&quot;Show Volume Subgraph&quot;,&lt;F),futuresStyleSettings.shortCuts{^(&quot;adjustForContractChanges&quot;,&lt;F),^(&quot;Show Open Interest&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,&lt;F),^(&quot;showContractChangeEvents&quot;,&lt;F),^(&quot;futures_daily_close_price&quot;,&lt;F),^(&quot;Show Options&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,&lt;F),^(&quot;startAtMarketOpen&quot;,&lt;F)},optionsStyleSettings.shortCuts{^(&quot;Show Open Interest&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,&lt;F),^(&quot;Show Theo Price&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,&lt;F),^(&quot;startAtMarketOpen&quot;,&lt;F)},otherStyleSettings{shortCuts{^(&quot;Show Social Sentiment&quot;,&lt;F),^(&quot;Show Trading Hours Only&quot;,&lt;F),^(&quot;Show Options&quot;,&lt;F),^(&quot;Show Volume Subgraph&quot;,&lt;F),^(&quot;Highlight Extended Hours&quot;,&lt;F),^(&quot;Show Corporate Actions&quot;,&lt;F),^(&quot;Show CNBC Video&quot;,&lt;F),^(&quot;startAtMarketOpen&quot;,&lt;F),^(&quot;adjustForDividends&quot;,&lt;F)},showVolume=&lt;F,tradingHoursOnly=&lt;T}},subgraphModels{!get(#%4.SubgraphId(&quot;Symbol&quot;)){height=594,storableIndicators{+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;#Horizontal Price Line by Thinkscripter\nplot priceLine = HighestAll(if IsNaN(close[-1]) and !IsNaN(close) then close else Double.NaN);\npriceLine.SetDefaultColor(Color.white);\npriceLine.SetLineWeight(2);\n\n#Squeeze Added \ninput showsqueeze = yes;\ndef bbupper = reference BollingerBands().UpperBand;\ndef kcupper = KeltnerChannels().Upper_Band;\ndef Squeeze  = bbupper - kcupper &lt; 0;\nplot Squeezeplot = if showsqueeze and Squeeze then priceLine else Double.NaN;\nSqueezeplot.SetDefaultColor(Color.black);\nSqueezeplot.SetPaintingStrategy(PaintingStrategy.POINTS);\nSqueezeplot.SetLineWeight(3);\nSqueezeplot.HideBubble();\n\n#Count of Periods in consecutive squeeze\nrec countsq = if Squeeze then countsq[1] + 1 else 0;\nrec count1sq = if !Squeeze then count1sq[1] + 1 else 0;\n\n#Expansion Bubbles\ninput n = 5;\ndef n1  = n + 1;\ndef c = close;\n\ninput showsqueezebubble = no;\nAddChartBubble(showsqueezebubble and !IsNaN(c[n1]) and IsNaN(c[n]), c[n1] ,( if Squeeze[n1] then \&quot;S \\n\&quot;+Round(countsq[n1], 2) else \&quot;NS \\n\&quot; + count1sq[n1]) , color.orange);&quot;,name=&quot;_24bd0814_340b_3ec1_963a_f8deb94c2e6f&quot;}){plots{0:{color=#%2.CustomColor(#%3.Color(204,255,204,255)),lineWeight=1},1:{color=@CustomColor0,lineWeight=1}}}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;#Indicates Trending or Chop\n\ndef h = high;\ndef l = low;\ndef o = open;\ndef c = close;\n\nAddLabel(yes, \&quot; \&quot;, Color.BLACK);\n\ninput AverageType2 = AverageType.HULL;\n\ndef AvgLength     = 13; #TOS default 8 \n\ndef Lengthchop    = 13;\n\ndef Choppy        = 61.8;\n\ndef MidLine       = 50;\n\ndef Trending      = 38.2;\n\n\ndef AVG = MovingAverage(AverageType = AverageType2, c, AvgLength);\n\ndef CIB = ((Log(Sum(TrueRange(h, c, l), Lengthchop) / \n\n             (Highest(if h &gt;= c[1] then h else \n\n             c[1], Lengthchop) - \n\n             Lowest( if l &lt;= c[1] then l else c[1], Lengthchop)))  \n\n             / Log(10)) / (Log(Lengthchop) / Log(10))) * 100;\n\ndef CI  = CIB;\n\ninput enableCHOP = yes;\nAddLabel(enableCHOP, if CI &gt; MidLine and CI &lt; 62  then \&quot;MILD CHOP \&quot; + Round(CI, 0) else if CI &gt;= 61.8 then \&quot;STRONG CHOP \&quot; + Round(CI, 0) else if CI &lt;= MidLine and CI &gt; 31.8 then \&quot; MILD TRENDING \&quot; + Round(CI, 0) else \&quot;STRONG TRENDING \&quot; + Round(CI, 0), if CI &gt; MidLine then Color.YELLOW else Color.CYAN);\n\n\n# Simple Trend Score\n# Assembled by BenTen at useThinkScript.com\n# Converted from https://www.tradingview.com/script/ViXoUfeL/\n\n#AddLabel(YES, \&quot; \&quot;, Color.BLACK); \n\ndef TrendScore = If(close &gt;= close[11], 1, -1) + If(close &gt;= close[12], 1, -1) + If(close &gt;= close[13], 1, -1) + If(close &gt;= close[14], 1, -1) + If(close &gt;= close[15], 1, -1) + If(close &gt;= close[16], 1, -1) + If(close &gt;= close[17], 1, -1) + If(close &gt;= close[18], 1, -1) + If(close &gt;= close[19], 1, -1) + If(close &gt;= close[20], 1, -1);\n\ndef col1 = TrendScore &gt; 5;\ndef col2 = TrendScore &lt; -5;\ndef colNET = !col1 and !col2;\ndef histogram = TrendScore;\n\ninput showSTS = yes;\nAddLabel(showSTS and  col1, \&quot; Bullish \&quot;, Color.GREEN);\nAddLabel(showSTS and  col2, \&quot; Bearish \&quot;, Color.PLUM);\nAddLabel(showSTS and  colNET, \&quot; Neutral \&quot;, Color.GRAY);&quot;,name=&quot;_e32449f7_bad1_3ed9_9449_8f2dc52a5cd9&quot;})),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# Custom ATR Plot by 7of9 for BRT\n# edited 3/20/19\n\ndeclare upper;\n\ninput AtrAvgLength = 14;\n\ndef ATR = WildersAverage(TrueRange(high(period = aggregationPeriod.DAY), close(period = aggregationPeriod.DAY), low(period = aggregationPeriod.DAY)), AtrAvgLength);\n\ndef TodayHigh = Highest(high(period = aggregationPeriod.DAY), 1);\ndef TodayLow = Lowest(low(period = aggregationPeriod.DAY), 1);\n\ndef DTR = TodayHigh - TodayLow;\n\ndef DTRpct = Round((DTR / ATR) * 100, 0);\n\nAddLabel (yes, \&quot;DTR \&quot; + Round (DTR , 2) + \&quot; vs. ATR \&quot; + round (ATR,2)+ \&quot; = \&quot; + round (DTRpct,0) + \&quot;%\&quot;, (if DTRpct &lt;= 70 then Color.GREEN else if DTRpct &gt;= 90 then Color.RED else Color.ORANGE));\n\n&quot;,name=&quot;_5435277c_ee0f_3db7_9e37_8da0d7aea6c7&quot;})),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# ------------------------\n# Script para Embajadores Shark Trading System\n# Gustavo Moyano\n# V.1.0 Año 2018\n# Creado y Documentado Edwin Londoño\n# web: http://www.stsinnova.com/\n# Correos: \n#  info@stsinnova.com\n#\n# Mostrar en el grafico Diferentes indices\n# \n# Indicadores_Mercado\n# V01.0.2018\n# -----------------------------------------------------\n#--------------------\ndeclare upper;\ninput Temporalidad = AggregationPeriod.day;\nInput Indicador=  {\&quot;SPY\&quot;, \&quot;QQQ\&quot;, \&quot;DIA\&quot;, default \&quot;VIX\&quot;};\ninput Color_del_recuadro = {\&quot;magenta\&quot;, \&quot;green\&quot;, \&quot;pink\&quot;, default \&quot;cyan\&quot;, \&quot;orange\&quot;, \&quot;red\&quot;, \&quot;blue\&quot;, \&quot;gray\&quot;, \&quot;violet\&quot;};\n\ndef Indicador_ = close(Indicador,period = Temporalidad);\n\nAddLabel(yes, Indicador +\&quot;: \&quot; + Indicador_, GetColor(Color_del_recuadro));&quot;,name=&quot;_e0b3e443_960a_3997_863a_33fd1ea4e4e2&quot;})),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# @new\n# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2011-2021\n#\n\ninput numDevDn = -2.0;\ninput numDevUp = 2.0;\ninput timeFrame = {default DAY, WEEK, MONTH};\n\ndef cap = getAggregationPeriod();\ndef errorInAggregation =\n    timeFrame == timeFrame.DAY and cap &gt;= AggregationPeriod.WEEK or\n    timeFrame == timeFrame.WEEK and cap &gt;= AggregationPeriod.MONTH;\nassert(!errorInAggregation, \&quot;timeFrame should be not less than current chart aggregation period\&quot;);\n\ndef yyyyMmDd = getYyyyMmDd();\ndef periodIndx;\nswitch (timeFrame) {\ncase DAY:\n    periodIndx = yyyyMmDd;\ncase WEEK:\n    periodIndx = Floor((daysFromDate(first(yyyyMmDd)) + getDayOfWeek(first(yyyyMmDd))) / 7);\ncase MONTH:\n    periodIndx = roundDown(yyyyMmDd / 100, 0);\n}\ndef isPeriodRolled = compoundValue(1, periodIndx != periodIndx[1], yes);\n\ndef volumeSum;\ndef volumeVwapSum;\ndef volumeVwap2Sum;\n\nif (isPeriodRolled) {\n    volumeSum = volume;\n    volumeVwapSum = volume * vwap;\n    volumeVwap2Sum = volume * Sqr(vwap);\n} else {\n    volumeSum = compoundValue(1, volumeSum[1] + volume, volume);\n    volumeVwapSum = compoundValue(1, volumeVwapSum[1] + volume * vwap, volume * vwap);\n    volumeVwap2Sum = compoundValue(1, volumeVwap2Sum[1] + volume * Sqr(vwap), volume * Sqr(vwap));\n}\ndef price = volumeVwapSum / volumeSum;\ndef deviation = Sqrt(Max(volumeVwap2Sum / volumeSum - Sqr(price), 0));\n\nplot VWAP = price;\nplot UpperBand = price + numDevUp * deviation;\nplot LowerBand = price + numDevDn * deviation;\n\nVWAP.setDefaultColor(getColor(0));\nUpperBand.setDefaultColor(getColor(2));\nLowerBand.setDefaultColor(getColor(4));&quot;,name=&quot;VWAP&quot;}){plots{0:{color=#%2.CustomColor(#%3.Color(102,153,255,255))},1:{color=!%2.CustomColor.findByIndex:CustomColor2(&quot;17&quot;),hiding=&lt;T},2:{color=@CustomColor2,hiding=&lt;T}}}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# +--------------------------------------------------+\n# | Example: Daily range including pre-market hours. |\n# |                   robert payne                   |\n# |              funwiththinkscript.com              |\n# +--------------------------------------------------+\n\ninput TimeToStart = 0800;\ninput TimeToStop = 1600;\n\ndef nMinutes = GetAggregationPeriod() / 60000;\ndef startTime = SecondsFromTime(TimeToStart) &gt;= 0 and SecondsFromTime(TimeToStart) &lt; nMinutes * 60;\ndef endTime = SecondsFromTime(TimeToStop) &gt;= 0;\n\n# set the initial high / low as the high / low at the start time\n# if it is past the end time, then just remember what the previous values were\n# if a new high or low is reached, remember that new value\n# otherwise, just keep the old value ( H[1] or L[1] )\n\ndef H = if startTime then high else if endtime then h[1] else if high &gt; H[1] then high else H[1];\ndef L = if startTime then low else if low &lt; L[1] then low else L[1];\n\n# calculate the range\ndef range = H - L;\n\n# display the range in a label\nAddLabel(yes, \&quot;Range: \&quot; + range, Color.YELLOW);&quot;,name=&quot;_251270f2_1ca2_3998_be96_002c0d49ff1f&quot;})),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;input n = 5;#hint n: For pivot and standard deviation\ninput addAtPercentStDev = 75;#hint addAtPercentStDev: Add at this percent of standard deviation below previous low\ninput initialLots = 4;#hint initialLots: Set to preference\ninput lotsToAdd = 2;#hint lotsToAdd: Number of lots to add on a pull back\ninput stDevMult = 2.0;#hint stDevMult: trail stop multiplier\ninput labels = no;\n\ndef openingLots = Max(4, initialLots);\ndef addedlots = Max(2, lotsToAdd);\nAddLabel(initialLots &lt; openingLots, \&quot; Error: Initial lots must be 4 or more \&quot;, Color.Cyan);\nAddLabel(lotsToAdd &lt; addedLots, \&quot; Error: Lots to add must be 2 or more \&quot;, Color.Cyan);\ndef h = high;\ndef l = low;\ndef c = close;\ndef nan = Double.NaN;\ndef tick = TickSize();\ndef x = BarNumber();\ndef stDev = CompoundValue(1, StDev(c, n), nan);\ndef hh = h == Highest(h, n);\ndef LPx = if hh then x else nan;\ndef LP_low = if !IsNaN(LPx) then l else LP_Low[1];\ndef LP_High = if !IsNaN(LPx) then h else LP_High[1];\ndef confirmation_count = if hh then 0 else\nif c crosses below LP_Low\nthen confirmation_count[1] + 1\nelse confirmation_count[1];\ndef confirmationX = if confirmation_count crosses above 0\nthen x else nan;\ndef confirmed = confirmation_count crosses above 0;\n\ndef ro;\ndef stc;\ndef trail;\ndef retrace;\nif confirmed {\nro = Round((c - (LP_High - c) / (openingLots - 2)) / tick, 0) * tick;\nstc = LP_High;\ntrail = LP_High;\nretrace = LP_High;\n}else{\nro = CompoundValue(1, ro[1], nan);\nstc = stc[1];\ntrail = Round(Min(trail[1], h[1] + stDev[1] * stDevMult) / tick, 0) * tick;\nretrace = Round(Min(retrace[1], h[1] + StDev[1] * addAtPercentStDev / 100) / tick, 0) * tick;\n}\n\ndef ro_reached = if confirmed then 0 else\nif l &lt; ro then 1 else ro_reached[1];\ndef added = if confirmed then 0 else\nif h crosses above retrace then 1 else added[1];\ndef trail_hit = if confirmed then 0 else\nif c &gt; trail then 1 else trail_hit[1];\ndef stop_hit = if confirmed then 0 else\nif h &gt; stc then 1 else stop_hit[1];\n\n\nplot\nPivotConfirmed = confirmed;\nPivotConfirmed.SetDefaultColor(Color.Light_Red);\nPivotConfirmed.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);\n\nplot\nBuyToOpen = if confirmed then c else nan;\nBuyToOpen.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nBuyToOpen.SetDefaultColor(Color.Light_Green);\n\nplot\nSellToClose = if !stop_hit or stop_hit crosses above 0 then stc else nan;\nSellToClose.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nSellToClose.SetDefaultColor(Color.RED);\n\nplot\nTrailingStop = if ! trail_hit or trail_hit crosses above 0 then trail else nan;\nTrailingStop.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nTrailingStop.SetDefaultColor(Color.Pink);\n\nplot\nAdd = if !added or added crosses above 0 then retrace else nan;\nAdd.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nAdd.SetDefaultColor(Color.Dark_Green);\n\nplot\nRiskOut = if !ro_reached or ro_reached crosses above 0 then ro else nan;\nRiskOut.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);\nRiskOut.SetDefaultColor(CreateColor(215, 215, 215));\n\nAddLabel(labels and BuyToOpen, \&quot; BTO \&quot;+ openingLots +\&quot; = \&quot; + BuyToOpen + \&quot; \&quot;, Color.Light_Green);\nAddlabel(labels and BuyToOpen, \&quot; \&quot;, CreateColor(0, 0, 0));\nAddLabel(labels and ro_reached and Add, \&quot; Add \&quot;+ addedlots +\&quot; at = \&quot; + Add + \&quot; \&quot;, Color.Dark_Green);\nAddLabel(labels and ro_reached and Add, \&quot; \&quot;, CreateColor(0, 0, 0));\nAddLabel(labels and RiskOut, \&quot; Sell \&quot; + (openingLots - 2) + \&quot; = \&quot; + ro + \&quot; \&quot;, CreateColor(215, 215, 215));\nAddLabel(labels and RiskOut, \&quot; \&quot;, CreateColor(0, 0, 0));\nAddLabel(labels and ro_reached and TrailingStop, \&quot; Sell \&quot;+(1+addedLots-1)+\&quot; at = \&quot;+trail+\&quot; \&quot;, Color.Pink);\nAddlabel(labels and ro_reached and TrailingStop, \&quot; \&quot;, CreateColor(0, 0, 0));\nAddLabel(labels and SellToClose, \&quot; Sell All = \&quot; + stc + \&quot; \&quot;, Color.Red);\nAddlabel(labels and SellToClose, \&quot; \&quot;, CreateColor(0, 0, 0));\n\n#f/ Pivot Confirmation With Trading Levels\n\n#For long,\nAlert(confirmed or l crosses below stc, \&quot;\&quot;, Alert.Bar, Sound.Ding);\n\n#For short,\nAlert(confirmed or h crosses above stc, \&quot;\&quot;, Alert.Bar, Sound.Ding);&quot;,name=&quot;_e86c7374_2a24_3db0_ae1b_70e77c14f0a2&quot;}){alerts:LocalAlertArray0,alerts=@LocalAlertArray0,plots{0:{color=#%2.CustomColor(#%3.Color(255,102,102,255)),lineWeight=4},1:{color=#%2.CustomColor(#%3.Color(0,153,51,255)),lineWeight=2,paintingStrategy=0},2:{color=#%2.CustomColor(#%3.Color(255,102,102,255)),lineWeight=2,paintingStrategy=0},3:{hiding=&lt;T},4:{hiding=&lt;T},5:{hiding=&lt;T,lineWeight=3}}}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;#StudyName:     RSI_Laguerre_Lines_wTargets\n#Version/Date:  v1 5/30/17                                           \n#TOS.mx Link:\n#Type:          [Study]                                               \n#Description:   RSI in Laguerre Time MTF plotted on Upper chart\n#Author:        jcseattle\n#Copyright:     Copyright jcseattle/amalia 2016. All rights reserved.\n#Copyleft:      This program is free software: you can redistribute it and/or modify\n#               it under the terms of the GNU General Public License as published by\n#               the Free Software Foundation, either version 3 of the License, or\n#               (at your option) any later version. See &lt;http://www.gnu.org/licenses/&gt;\n#Requested By:   \&quot;\&quot;\n#History:       Ver  Date        Auth  Change\n#First draft    v1   5/30/17     jcseattle - No changes\n# Notes           :Based off original script in \n#                  RSI in Laguerre Time MTF Option_v3\n#                  Mobius\n#                  V02.07.2014\n#                  translation of J Elher\'s code\n# Annotation      : \&quot;\&quot;\n# Trading Notes   : \&quot;\&quot;\n\n#                                        Start Code \n\ndef na = Double.NaN;\nscript R {\n    input gamma              = .2;\n    input usecandletype      = {candle_hybrid, default candle};\n    input usehigheraggperiod = {default \&quot;Current\&quot;, \&quot;Higher\&quot;};\n    input outputformat       = {default Rounded, \&quot;Not Rounded\&quot;};\n    ;#Hint outputformat: \'Not Rounded\' is used for notes, bonds (eg: 109\'110), forex, etc type format. \n    input atrlength          = 21;\n    input agg                = AggregationPeriod.TWO_MIN;\n    input overbought         = .8;\n    input oversold           = .2;\n    def o;\n    def h;\n    def l;\n    def c;\n    def CU1;\n    def CU2;\n    def CU;\n    def CD1;\n    def CD2;\n    def CD;\n    def L0;\n    def L1;\n    def L2;\n    def L3;\n    plot RSI;\n    plot OS;\n    plot OB;\n    def error = usehigheraggperiod == usehigheraggperiod.\&quot;Higher\&quot; and GetAggregationPeriod() &gt; agg;\n    switch (usehigheraggperiod) {\n    case Current:\n        if usecandletype == usecandletype.candle_hybrid {\n            o = (open + close[1]) / 2;\n            h = Max(high, close[1]);\n            l = Min(low, close[1]);\n            c = (o + h + l + close) / 4;\n        } else {\n            o = open;\n            h = high;\n            l = low;\n            c = close;\n        }\n    case Higher:\n        if error {\n            o = Double.NaN;\n            h = Double.NaN;\n            l = Double.NaN;\n            c = Double.NaN;\n        } else {\n            if usecandletype == usecandletype.candle_hybrid {\n                o = (open(period = agg)     + close(period = agg)[1]) / 2;\n                h = Max(high(period = agg)  , close(period = agg)[1]);\n                l = Min(low(period = agg)   , close(period = agg)[1]);\n                c = ((open(period = agg)    + close(period = agg)[1]) / 2 \n            + Max(high(period = agg), close(period = agg)[1]) \n            + Min(low(period = agg) , close(period = agg)[1]) \n            + close(period = agg)) / 4;\n            } else {\n                o = open(period = agg);\n                h = high(period = agg);\n                l = low(period = agg);\n                c = close(period = agg);\n            }\n        }\n}\n    L0 = (1 – gamma) * c + gamma * L0[1];\n    L1 = -gamma * L0 + L0[1] + gamma * L1[1];\n    L2 = -gamma * L1 + L1[1] + gamma * L2[1];\n    L3 = -gamma * L2 + L2[1] + gamma * L3[1];\n    if L0 &gt;= L1\n    then {\n        CU1 = L0 - L1;\n        CD1 = 0;\n    } else {\n        CD1 = L1 - L0;\n        CU1 = 0;\n    }\n    if L1 &gt;= L2\n    then {\n        CU2 = CU1 + L1 - L2;\n        CD2 = CD1;\n    } else {\n        CD2 = CD1 + L2 - L1;\n        CU2 = CU1;\n    }\n    if L2 &gt;= L3\n    then {\n        CU = CU2 + L2 - L3;\n        CD = CD2;\n    } else {\n        CU = CU2;\n        CD = CD2 + L3 - L2;\n    }\n\n    RSI = if IsNaN(close) then Double.NaN\n      else if CU + CD &lt;&gt; 0\n      then    CU / (CU + CD) else 0;\n    OS  = if IsNaN(close)\n      then Double.NaN else oversold;\n    OB  = if IsNaN(close)\n      then Double.NaN\n      else overbought;\n    def mid = if IsNaN(close) then Double.NaN else 0.5;\n    def lineh = 1.2;\n    def linel = -.2;\n    \n# End Code Basic RSI Laguerre - Author: Mobius\n\n}\n\ndef Up = if R() crosses above R().OS then 1 else 0;\ndef u = if R() crosses above R().OB then 1 else 0;\n\ndef Dn = if R() crosses below R().OB then 1 else 0;\ndef d = if R() crosses below R().OS then 1 else 0;\n\ndef Green = if Up \n#or u \nthen low else 0;\ndef Red = if Dn \n#or d \nthen high else 0;\n\ndef showLines = 1;\n\n\ndef trendchange = if Green then low else if Red then high else trendchange[1];\n\ndef PL = if !IsNaN(trendchange) \n             then trendchange \n             else PL[1];\n\nplot pivotLine = if PL &gt; 0\n                       then PL\n                       else Double.NaN;\npivotLine.SetPaintingStrategy(PaintingStrategy.LINE);\npivotLine.SetHiding(!showLines);\n\ninput showArrows = yes;\nplot ArrUp = if showArrows and Green then low else 0;\nArrUp.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nArrUp.SetDefaultColor(Color.GREEN);\n\nplot ArrDn = if showArrows and Red then high else 0;\nArrDn.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);\nArrDn.SetDefaultColor(Color.RED);\n\npivotLine.AssignValueColor(if R() &lt; R().OB then Color.RED else if R() &gt; R().OS then Color.GREEN else Color.BLACK);\n\ninput ShowLabels = yes;\n#Multipliers for ATR targets\ninput firsttgt = 1.618;\ninput secondtgt = 3.447;\ninput thirdtgt = 4.25;\ninput ATRLength = 8;#default is 14\n\ndef agg = if GetAggregationPeriod() &gt; AggregationPeriod.FIFTEEN_MIN then GetAggregationPeriod() else AggregationPeriod.FIFTEEN_MIN;#You can edit this to just (GetAggregationPeriod())\ndef ATR = Average(TrueRange(High(period = agg),Close(period = agg),Low(period = agg)),ATRLength);\naddlabel(ShowLabels, \&quot;ATR = \&quot; + Round((ATR) / TickSize(),0)*TickSize(), Color.GRAY);\n\ninput showStrategy = yes;\ndef co = if PL[1] and R()[1] &gt; R().OS[1] then 1 else 0;\ndef firstlongtarget = if co then (PivotLine + ATR*firsttgt) else 0;\ndef secondlongtarget = if co then (PivotLine + ATR*secondtgt) else 0;\ndef thirdlongtarget = if co then (PivotLine + ATR*thirdtgt) else 0;\n\ndef sto = if PL and R() &lt; R().OB then 1 else 0;\ndef firstshorttarget = if sto then (PivotLine - ATR*firsttgt) else 0;\ndef secondshorttarget = if sto then (PivotLine - ATR*secondtgt) else 0;\ndef thirdshorttarget = if sto then (PivotLine - ATR*thirdtgt) else 0;\n\n\n#    Internal Script Reference\n#    Author: Mobius\n\n    def LineLimit = 30;\n    def Detrend = 0;\n    def OnExpansion = yes;\n    def data = firstlongtarget;\n    def bar = 0;\n    def ShowAllPlots = 0;\n    def ThisBar = HighestAll(bar) - Detrend;\n    def cLine   = if ShowAllPlots == 0 \n            then if bar == ThisBar \n                 then data\n                 else Double.NaN\n            else data;\n    def cond1 = CompoundValue(1, if IsNaN(data)\n                                then cond1[1] \n                                else data, data);\n    def P = if ShowAllPlots == 0 \n            then if ThisBar - LineLimit &lt;= bar\n            then HighestAll(cLine)\n            else Double.NaN\n            else cLine;\n    plot firstLTarget = if OnExpansion and \n                     IsNaN(data[-1]) \n                  then cond1 \n                  else Double.NaN;\nfirstLTarget.SetDefaultColor(Color.GREEN);\naddlabel(ShowLabels, if R() &gt; R().OS then \&quot;Long Target = \&quot; + Round((firstLTarget) / TickSize(),0)*TickSize() else \&quot;\&quot;, Color.GREEN);\nAddChartBubble(IsNaN(close) and !isNaN(close[1]), \n               firstLTarget, \n              \&quot;First Target = \&quot; + Round((firstLTarget) / TickSize(),0)*TickSize(), \n               Color.GREEN, \n               yes);\n\ndef difflongtarget = if close &lt; firstlongtarget then (firstlongtarget - close) else (close - firstlongtarget);\naddLabel(ShowLabels, if R() &gt; R().OS then \&quot;Diff 1st L tgt = \&quot; + (Round((difflongtarget) / TickSize(),0)*TickSize()) else \&quot;\&quot;, Color.LIGHT_GREEN);\n\n\n    def LineLimit3 = 30;\n    def Detrend3 = 0;\n    def OnExpansion3 = yes;\n    def data3 = secondlongtarget;\n    def bar3 = 0;\n    def ShowAllPlots3 = 0;\n    def ThisBar3 = HighestAll(bar) - Detrend;\n    def cLine3   = if ShowAllPlots3 == 0 \n            then if bar3 == ThisBar3 \n                 then data3\n                 else Double.NaN\n            else data3;\n    def cond3 = CompoundValue(1, if IsNaN(data3)\n                                then cond3[1] \n                                else data3, data3);\n    def P3 = if ShowAllPlots3 == 0 \n            then if ThisBar3 - LineLimit3 &lt;= bar3\n            then HighestAll(cLine3)\n            else Double.NaN\n            else cLine3;\n    plot secondLTarget = if OnExpansion3 and \n                     IsNaN(data3[-1]) \n                  then cond3 \n                  else Double.NaN;\nsecondLTarget.SetDefaultColor(Color.GREEN);\naddlabel(ShowLabels, if R() &gt; R().OS then \&quot;2nd Long Target = \&quot; + Round((secondLTarget) / TickSize(),0)*TickSize() else \&quot;\&quot;, Color.GREEN);\nAddChartBubble(IsNaN(close) and !isNaN(close[1]), \n               secondLTarget, \n              \&quot;2nd Long Target = \&quot; + Round((secondLTarget) / TickSize(),0)*TickSize(), \n               Color.GREEN, \n               yes);\n\ndef difflongtarget2 = if close &lt; secondlongtarget then (secondlongtarget - close) else (close - secondlongtarget);\naddLabel(ShowLabels, if R() &gt; R().OS then \&quot;Diff 2nd L tgt = \&quot; + Round((difflongtarget2) / TickSize(),0)*TickSize() else \&quot;\&quot;, Color.LIGHT_GREEN);\n\n\n    def LineLimit9 = 30;\n    def Detrend9 = 0;\n    def OnExpansion9 = yes;\n    def data9 = thirdlongtarget;\n    def bar9 = 0;\n    def ShowAllPlots9 = 0;\n    def ThisBar9 = HighestAll(bar9) - Detrend9;\n    def cLine9   = if ShowAllPlots9 == 0 \n            then if bar9 == ThisBar9 \n                 then data9\n                 else Double.NaN\n            else data9;\n    def cond9 = CompoundValue(1, if IsNaN(data9)\n                                then cond9[1] \n                                else data9, data9);\n    def P9 = if ShowAllPlots9 == 0 \n            then if ThisBar9 - LineLimit9 &lt;= bar9\n            then HighestAll(cLine9)\n            else Double.NaN\n            else cLine9;\n    plot thirdLTarget = if OnExpansion9 and \n                     IsNaN(data9[-1]) \n                  then cond9 \n                  else Double.NaN;\nthirdLTarget.SetDefaultColor(Color.GREEN);\naddlabel(ShowLabels, if R() &gt; R().OS then \&quot;3rd Long Target = \&quot; + Round((thirdLTarget) / TickSize(),0)*TickSize() else \&quot;\&quot;, Color.GREEN);\nAddChartBubble(IsNaN(close) and !isNaN(close[1]), \n              thirdLTarget, \n            \&quot;3rd Long Target = \&quot; + Round((thirdLTarget) / TickSize(),0)*TickSize(), \n               Color.GREEN, \n               yes);\n\ndef difflongtarget9 = if close &lt; thirdlongtarget then (thirdlongtarget - close) else (close - thirdlongtarget);\naddLabel(ShowLabels, if R() &gt; R().OS then \&quot;Diff 3rd L tgt = \&quot; + Round((difflongtarget9) / TickSize(),0)*TickSize() else \&quot;\&quot;, Color.LIGHT_GREEN);\n\n\n    def LineLimit2 = 30;\n    def Detrend2 = 0;\n    def OnExpansion2 = yes;\n    def data2 = firstshorttarget;\n    def bar2 = 0;\n    def ShowAllPlots2 = 0;\n    def ThisBar2 = HighestAll(bar2) - Detrend2;\n    def cLine2   = if ShowAllPlots2 == 0 \n            then if bar2 == ThisBar2 \n                 then data2\n                 else Double.NaN\n           else data2;\n    def cond2 = CompoundValue(1, if IsNaN(data2)\n                                then cond2[1] \n                                else data2, data2);\n    def P2 = if ShowAllPlots2 == 0 \n            then if ThisBar2 - LineLimit2 &lt;= bar2\n            then HighestAll(cLine2)\n            else Double.NaN\n            else cLine2;\n    plot firstSTarget = if OnExpansion2 and \n                     IsNaN(data2[-1]) \n                  then cond2 \n                  else Double.NaN;\nfirstSTarget.SetDefaultColor(Color.RED);\naddlabel(ShowLabels, if R() &lt; R().OB then \&quot;1st Short Target = \&quot; + Round((firstSTarget) / TickSize(),0)*TickSize() else \&quot;\&quot;, Color.RED);\nAddChartBubble(IsNaN(close) and !IsNaN(Close[1]),\n                firstSTarget,\n                \&quot;Short Target = \&quot; + Round((firstSTarget) / TickSize(),0)*TickSize(),\n                Color.RED,\n                no);\n\ndef diffshorttarget = if close &lt; data2 then (data2 - close) else (close - data2);\naddLabel(ShowLabels, if R() &lt; R().OB then \&quot;Diff 1st S tgt = \&quot; + Round((diffshorttarget) / TickSize(),0)*TickSize() else \&quot;\&quot;, Color.LIGHT_RED);\n#\n\n    def LineLimit4 = 30;\n    def Detrend4 = 0;\n    def OnExpansion4 = yes;\n    def data4 = secondshorttarget;\n    def bar4 = 0;\n    def ShowAllPlots4 = 0;\n    def ThisBar4 = HighestAll(bar4) - Detrend4;\n    def cLine4   = if ShowAllPlots4 == 0 \n            then if bar4 == ThisBar4 \n                 then data4\n                 else Double.NaN\n           else data4;\n    def cond4 = CompoundValue(1, if IsNaN(data4)\n                                then cond4[1] \n                                else data4, data4);\n    def P4 = if ShowAllPlots4 == 0 \n            then if ThisBar4 - LineLimit4 &lt;= bar4\n            then HighestAll(cLine4)\n            else Double.NaN\n            else cLine4;\n    plot secondSTarget = if OnExpansion4 and \n                  IsNaN(data4[-1]) \n                  then cond4 #\n                  else Double.NaN;\nsecondSTarget.SetDefaultColor(Color.RED);\n#Round((close + (atr)) / TickSize(), 0) * TickSize()\naddlabel(ShowLabels, if R() &lt; R().OB then \&quot;2nd Short Target = \&quot; + Round((secondSTarget) / TickSize(),0)*TickSize() else \&quot;\&quot;, Color.RED);\nAddChartBubble(IsNaN(close) and !IsNaN(Close[1]),\n                secondSTarget,\n                \&quot;2nd Short Target = \&quot; + Round((secondSTarget) / TickSize(),0)*TickSize(),\n                Color.RED,\n                no);\n\ndef diffshorttgt2 = if close &lt; secondshorttarget then (secondshorttarget - close) else (close - secondshorttarget);\naddLabel(ShowLabels, if R() &lt; R().OB then \&quot;Diff 2nd S tgt = \&quot; + Round((diffshorttgt2) / TickSize(),0)*TickSize() else \&quot;\&quot;, Color.LIGHT_RED);\n\n    def LineLimit8 = 30;\n    def Detrend8 = 0;\n    def OnExpansion8 = yes;\n    def data8 = thirdshorttarget;\n    def bar8 = 0;\n    def ShowAllPlots8 = 0;\n    def ThisBar8 = HighestAll(bar8) - Detrend8;\n    def cLine8  = if ShowAllPlots8 == 0 \n            then if bar8 == ThisBar8 \n                 then data8\n                 else Double.NaN\n            else data8;\n    def cond8 = CompoundValue(1, if IsNaN(data8)\n                                then cond8[1] \n                                else data8, data8);\n    def P8 = if ShowAllPlots8 == 0 \n            then if ThisBar8 - LineLimit8 &lt;= bar8\n            then HighestAll(cLine8)\n            else Double.NaN\n            else cLine8;\n    plot thirdSTarget = if OnExpansion8 and \n                     IsNaN(data8[-1]) \n                  then cond8 \n                  else Double.NaN;\nthirdSTarget.SetDefaultColor(Color.RED);\naddlabel(ShowLabels, if R() &lt; R().OB then \&quot;3rd Short Target = \&quot; + Round((thirdSTarget) / TickSize(),0)*TickSize() else \&quot;\&quot;, Color.RED);\nAddChartBubble(IsNaN(close) and !isNaN(close[1]), \n               thirdSTarget, \n              \&quot;3rd Short Target = \&quot; + Round((thirdSTarget) / TickSize(),0)*TickSize(), \n               Color.RED, \n               no);\n\ndef diffshorttarget3 = if close &lt; thirdshorttarget then (thirdshorttarget - close) else (close - thirdshorttarget);\naddLabel(ShowLabels, if R() &lt; R().OB then \&quot;Diff 3rd S tgt = \&quot; + Round((diffshorttarget3) / TickSize(),0)*TickSize() else \&quot;\&quot;, Color.LIGHT_RED);\n\n#Inputs: \ninput nFE = 34;#hint nFE: length for Fractal Energy calculation.\ninput PriceColor = yes;\nplot gamma1 = Log(Sum((Max(high, close[1]) - Min(low, close[1])), nFE) / \n        (Highest(high, nFE) - Lowest(low, nFE))) / Log(nFE);\ngamma1.AssignNormGradientColor(nFE, Color.GREEN, Color.RED);\ngamma1.SetLineWeight(2);\n\naddLabel(showlabels, if showlabels and gamma1 &lt; 0.382 then \&quot;Trending =\&quot; + gamma1 else if gamma1 &gt; 0.618 then \&quot;Non-Trending =\&quot; + gamma1 else \&quot;FE = \&quot; + gamma1, if gamma1 &lt; 0.382 then Color.WHITE else if gamma1 &gt; 0.618 then Color.CYAN else Color.GRAY);\n\nAssignPriceColor(if PriceColor and gamma1 \n#crosses below \n&lt;\n.382 then Color.WHITE else if PriceColor and  gamma1 \n#crosses above \n&gt;\n.618 then Color.CYAN else Color.CURRENT);\n\n#                                        End Code\n\n&quot;,name=&quot;_9e643aac_7bec_396d_94ff_794ced7ac2f2&quot;}){inputsMap:TreeMap0{^(&quot;PriceColor&quot;,&lt;F),^(&quot;ShowLabels&quot;,&lt;F),!get:Integer0(&quot;ATRLength&quot;)},inputsMap=@TreeMap0,plots{1:{color=#%2.CustomColor(#%3.Color(51,153,255,255)),lineWeight=3},2:{color=#%2.CustomColor(#%3.Color(51,153,255,255)),lineWeight=3},3:{color=#%2.CustomColor(#%3.Color(0,153,0,255)),lineWeight=2},4:{color=#%2.CustomColor(#%3.Color(0,153,0,255))},5:{color=#%2.CustomColor(#%3.Color(51,153,0,255))},6:{color=#%2.CustomColor(#%3.Color(255,51,0,255))},7:{color=#%2.CustomColor(#%3.Color(255,51,0,255))},8:{color=#%2.CustomColor(#%3.Color(255,51,51,255))},9:{lineWeight=1}}}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# FVO_Fisher_CCI_Combo\n# Recycled Indicators - combined by @cos251\n# 2020.10.01    -    The script will calculate then FisherTransform and CCI in combinationto generate signals\n#                    indicating possible trend.  The signals alone are not buy or sell signals but only a\n#                    combination of two indicators to provide indication or trend as they relate to the two\n#                    indicators mentioned.\n\n\n# Signals            GREEN UP ARROW - FT crossed above FTOneBarBack and CCI has crossed above +100\n#                    DARK_GREEN UP ARROW - FT crossed above FTOneBarBack and CCI &gt; CCI[1]\n#                    RED DOWN ARROW - FT crossed below FTOneBarBack and CCI has crossed below -100\n#                    DARK_RED DOWN ARROW - FT crossed below FTOneBarBack and CCI &lt; CCI[1]\n###############################################################################################################\n\n\ndeclare upper;\n\n#### Fisher Transform Inputs\ninput length = 10;\ninput volumeFastLength = 1;\ninput volumeSlowLength = 20;\ninput volumeOscThreshold = 0.5;\n\n###### CCI Inputs\ninput lengthCCI = 14;\ninput over_sold = -100;\ninput over_bought = 100;\ninput showBreakoutSignals = no;\ndef offset = .5;\n\n###################### Calculate Fisher Transform &amp; CCI ###########################################\ndef maxHigh;\ndef minLow;\ndef range;\ndef value;\ndef truncValue;\ndef fish;\ndef FTUpArrow;\ndef FTDownArrow;\ndef FTOneBarBack;\n\nmaxHigh = Highest(hl2(), length);\nminLow = Lowest(hl2(), length);\nrange = maxHigh - minLow;\nvalue = if IsNaN(hl2()) then Double.NaN else if IsNaN(range)\n    then value[1] else if range == 0 then 0 else 0.66 * ((hl2() - minLow) / range - 0.5) + 0.67 * value[1];\ntruncValue = if value &gt; 0.99 then 0.999 else if value &lt; -0.99 then -0.999 else value;\nfish = 0.5 * (log((1 + truncValue) / (1 - truncValue)) + fish[1]);\nFTOneBarBack = fish[1];\nFTUpArrow = if (fish[1] &lt; FTOneBarBack[1]) and (fish &gt; FTOneBarBack) then 1 else\n    Double.NaN;\nFTDownArrow = if (fish[1] &gt; FTOneBarBack[1]) and (fish &lt; FTOneBarBack) then 1 else\n    Double.Nan;\n\n\n# CCI Calculation\ndef price;\ndef linDev;\ndef CCI;\nprice = close() + low() + high();\nlinDev = lindev(price, lengthCCI);\nCCI = if linDev == 0 then 0 else (price - Average(price, lengthCCI)) / linDev / 0.015;\n\n# Signals for both FisherTransform and CCI\n# Find if CCI current is crossed above AND is greater than 100 within previou 2 bars\ndef CCIUpSignal = if lowest(CCI[1],2) &lt; 100 and CCI &gt; 100 then 1 else Double.Nan;\n# Find if CCI current is crossed below  AND is less than -100 within previou 2 bars\ndef CCIDownSignal = if highest(CCI[1],2) &gt; -100 and CCI &lt; -100 then 1 else Double.Nan;\n# Find if curent fish is greater then fish previous at least 2 bars back\ndef FTUp = if lowest(fish[1],2) &lt; FTOneBarBack and fish &gt; FTOneBarBack then 1 else Double.NaN;\n# Find if current fish is less than previous fish at least 2 bars back\ndef FTDOWN = if highest(fish[1],2) &gt; FTOneBarBack and fish &lt; FTOneBarBack then 1 else Double.NaN;\n\n##### PLOTS  #####\n# Plot arrow if CCI crossed above +100 and is currently greater than +100 and FT has crossed above FTOneBarBack\nplot comboUP = if CCIUpSignal and FTUp then 1 else double.Nan;\ncomboUP.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\ncomboUP.AssignValueColor(Color.GREEN);\n# Plot arrow if CCI crossed below -100 and is currently less than -100 and FT has crossed below FTOneBarBack\nplot comboDown = if CCIDownSignal and FTDown then 1 else double.Nan;\ncomboDown.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);\ncomboDown.AssignValueColor(Color.RED);\n\n\n# Signal - Plot if FT has crossed above FTOneBarBack and CCI is greater than previous CCI\nplot fishUPCCIUp = if (FTOneBarBack[1] &gt; fish[1] and FTOneBarBack &lt; fish and CCI &gt; CCI[1]) then 1 else Double.Nan;\nfishUPCCIUp.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);\nfishUPCCIUp.AssignValueColor(Color.DARK_GREEN);\n# Signal - Plot if FT has crossed below FTOneBarBack and CCI is less than previous CCI\nplot fishDownCCIDown = if (FTOneBarBack[1] &lt; fish[1] and FTOneBarBack &gt; fish and CCI &lt; CCI[1]) then 1 else Double.Nan;\nfishDownCCIDown.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);\nfishDownCCIDown.AssignValueColor(Color.DARK_RED);\n\n\n\n###################################################################\n# Volume Spike\n# Credit to Raghee Horner shared scripts shared_ST\ndef volumeOsc = reference VolumeOsc(\&quot;fast length\&quot; = volumeFastLength, \&quot;slow length\&quot; = volumeSlowLength, \&quot;diff type\&quot; = \&quot;percent\&quot;);\nplot VolumeSpike = volumeOsc &gt; volumeOscThreshold;\nVolumeSpike.SetDefaultColor(Color.CYAN);\nVolumeSpike.SetLineWeight(3);\nVolumeSpike.SetPaintingStrategy(PaintingStrategy.BOOLEAN_POINTS);\n###################################################################&quot;,name=&quot;_0704b296_a894_3b19_a4b2_9a387334b4bf&quot;}){plots{0:{lineWeight=4},1:{lineWeight=5},2:{hiding=&lt;T,lineWeight=4},3:{hiding=&lt;T,lineWeight=4},4:{color=!%2.CustomColor.findByIndex(&quot;16&quot;),lineWeight=5,paintingStrategy=10}}}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# GlobeX or Overnight High / Low with Fibonacci Values?\n\n# Mobius?\n\n# V01.2012?\n\ninput PlotOverNightExtremes = yes;\n\ninput coeff_1 = .236;\n\ninput coeff_2 = .327;\n\n# gmh: added the rest of the Fibs?\n\ninput coeff_3 = .500;\n\ninput coeff_4 = .618;\n\ninput coeff_5 = .789;\n\ninput coeff_6 = .882;\n\n\n\ndef o = open;\n\ndef h = high;\n\ndef l = low;\n\ndef c = close;\n\ndef v = volume;\n\ndef bar = BarNumber();\n\ndef GlobeX = GetTime() &lt; RegularTradingStart(GetYYYYMMDD());\n\ndef vol = if GlobeX and !Globex[1]\n\n          then v\n\n          else if GlobeX\n\n               then vol[1] + v\n\n               else Double.NaN;\n\ndef GlobeX_Volume = vol;\n\ndef ONhigh = if GlobeX and !Globex[1]\n\n             then h\n\n             else if Globex and\n\n                     h &gt; ONhigh[1]\n\n                     then h\n\n                  else ONhigh[1];\n\ndef ONhighBar = if GlobeX and h == ONhigh\n\n                then Bar\n\n                else double.nan;\n\ndef ONlow = if GlobeX and !GlobeX[1]\n\n            then l\n\n            else if GlobeX and\n\n                    l &lt; ONlow[1]\n\n            then l\n\n                 else ONlow[1];\n\ndef ONlowBar = if GlobeX and l == ONlow\n\n               then Bar\n\n               else double.nan;\n\ndef OverNightHigh = if BarNumber() == HighestAll(ONhighBar)\n\n                    then ONhigh\n\n                    else OverNightHigh[1];\n\ndef OverNightLow = if BarNumber() == HighestAll(ONlowBar)\n\n                   then ONlow\n\n                   else OverNightLow[1];\n\nplot ONH = if OverNightHigh &gt; 0\n\n           then OverNightHigh\n\n           else Double.NaN;\n\n     ONH.SetHiding(!PlotOverNightExtremes);\n\n     ONH.SetPaintingStrategy(PaintingStrategy.SQUARES);\n\n     ONH.SetDefaultColor(Color.BLUE);\n\n     ONH.HideBubble();\n\n     ONH.HideTitle();\n\nplot ONL = if OverNightLow &gt; 0\n\n           then OverNightLow\n\n           else Double.NaN;\n\n     ONL.SetHiding(!PlotOverNightExtremes);\n\n     ONL.SetPaintingStrategy(PaintingStrategy.SQUARES);\n\n     ONL.SetDefaultColor(Color.LIGHT_GRAY);\n\n     ONL.HideBubble();\n\n     ONL.HideTitle();\n\n\n\ndef MaxBar = Max(HighestAll(ONhighBar), HighestAll(ONlowBar));\n\n\n\nplot coeff1 = if HighestAll(ONhighBar) == MaxBar and OverNightLow &gt; 0 and OverNightHigh &gt; 0\n\n              then ((OverNightHigh - OverNightLow) * coeff_1) + OverNightLow\n\n              else if HighestAll(ONlowBar) == MaxBar and OverNightLow &gt; 0 and OverNightHigh &gt; 0\n\n              then OverNightHigh - ((OverNightHigh - OverNightLow) * coeff_1)\n\n              else double.nan;\n\nplot coeff2 = if HighestAll(ONhighBar) == MaxBar and OverNightLow &gt; 0 and OverNightHigh &gt; 0\n\n              then ((OverNightHigh - OverNightLow) * coeff_2) + OverNightLow\n\n               else if HighestAll(ONlowBar) == MaxBar and OverNightLow &gt; 0 and OverNightHigh &gt; 0\n\n              then OverNightHigh - ((OverNightHigh - OverNightLow) * coeff_2)\n\n              else double.nan;\n\nplot coeff3 = if HighestAll(ONhighBar) == MaxBar and OverNightLow &gt; 0 and OverNightHigh &gt; 0\n\n              then ((OverNightHigh - OverNightLow) * coeff_3) + OverNightLow\n\n              else if HighestAll(ONlowBar) == MaxBar and OverNightLow &gt; 0 and OverNightHigh &gt; 0\n\n              then OverNightHigh - ((OverNightHigh - OverNightLow) * coeff_3)\n\n              else double.nan;\n\nplot coeff4 = if HighestAll(ONhighBar) == MaxBar and OverNightLow &gt; 0 and OverNightHigh &gt; 0\n\n              then ((OverNightHigh - OverNightLow) * coeff_4) + OverNightLow\n\n              else if HighestAll(ONlowBar) == MaxBar and OverNightLow &gt; 0 and OverNightHigh &gt; 0\n\n              then OverNightHigh - ((OverNightHigh - OverNightLow) * coeff_4)\n\n              else double.nan;\n\nplot coeff5 = if HighestAll(ONhighBar) == MaxBar and OverNightLow &gt; 0 and OverNightHigh &gt; 0\n\n              then ((OverNightHigh - OverNightLow) * coeff_5) + OverNightLow\n\n              else if HighestAll(ONlowBar) == MaxBar and OverNightLow &gt; 0 and OverNightHigh &gt; 0\n\n              then OverNightHigh - ((OverNightHigh - OverNightLow) * coeff_5)\n\n              else double.nan;\n\nplot coeff6 = if HighestAll(ONhighBar) == MaxBar and OverNightLow &gt; 0 and OverNightHigh &gt; 0\n\n              then ((OverNightHigh - OverNightLow) * coeff_6) + OverNightLow\n\n              else if HighestAll(ONlowBar) == MaxBar and OverNightLow &gt; 0 and OverNightHigh &gt; 0\n\n              then OverNightHigh - ((OverNightHigh - OverNightLow) * coeff_6)\n\n              else double.nan;\n\n#?\n\n# End Code GlobeX High Low with Fibs?\n&quot;,name=&quot;_2e9df4e3_1577_35e2_816b_30db3225570e&quot;}){plots{0:{color=#%2.CustomColor(#%3.Color(0,153,0,255)),lineWeight=2,paintingStrategy=11},1:{color=#%2.CustomColor(#%3.Color(255,51,51,255)),lineWeight=2,paintingStrategy=11},2:{hiding=&lt;T},3:{hiddenLast=&lt;T,hiding=&lt;T,titleHidden=&lt;T},4:{hiding=&lt;T},5:{hiding=&lt;T},6:{hiding=&lt;T},7:{hiding=&lt;T}},showPlotNames=&lt;T}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;#https://usethinkscript.com/threads/savage-oscillator.4214/\n#Assembled by FateOwnzYou on UseThinkscript.com\n\ninput Sensitivity = 1;\nInput Reversal_Warning = 8;\ninput Label = yes;\nInput HighVolume = yes;\ninput volumeAveragingLength = 20;\ninput volumePercentThreshold = 50;\n\ndef s1 = Max(-100, Min(100, (StochasticFull(KPeriod = 8, slowing_period = 5, averageType = AverageType.EXPONENTIAL))) - 50) / 50.01;\ndef s2 = Max(-100, Min(100, (StochasticFull(KPeriod = 17, slowing_period = 5, averageType = AverageType.EXPONENTIAL))) - 50) / 50.01;\ndef s3 = Max(-100, Min(100, reference RSI(2)) - 50) / 50.01;\n\ndef Bull =expAverage((s1 + s2 + s3)/3,sensitivity)*10;\ndef avg = if bull &lt; 1.5 then ((movingAverage(averageType.Weighted, bull, 20))-1.5) else ((movingAverage(averageType.Weighted, bull, 10)))-1.5 ;\ndef Bear = (avg - bull);\n\ndef aVol = Average(volume, volumeAveragingLength);\ndef pVol = 100 * ((volume - aVol[1]) /aVol[1]);\ndef pDot = pVol &gt;= volumePercentThreshold;\nplot volumeStrength = if pDot and (Bull or Bear) and HighVolume then hl2 else Double.NaN;\n\naddLabel(Label, if Bull &gt; Bear then \&quot;Bullish\&quot; else \&quot;Bearish\&quot;, if Bull &gt; Bear then Color.Green else color.red);\nvolumeStrength.SetPaintingStrategy(PaintingStrategy.POINTS);\nvolumeStrength.SetLineWeight(3);\nvolumeStrength.SetDefaultColor(color.cyan);\nvolumeStrength.hideBubble();\nassignpriceColor(if Bull &gt; Bear then color.GREEN else color.current);\nassignpriceColor(if Bull &lt; Bear then color.RED else color.current);\nassignpricecolor(if Bull &gt; Reversal_Warning then color.BLUE else color.current);\nassignpricecolor(if Bull &lt; (Reversal_Warning *-1) then color.BLUE else color.current);&quot;,name=&quot;_f59f515e_29ae_38b1_92be_263b5cdf216b&quot;}){inputsMap:TreeMap1{^(&quot;Reversal_Warning&quot;,7)},inputsMap=@TreeMap1}),+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;# @new\n# @reference\n#\n# TD Ameritrade IP Company, Inc. (c) 2015-2021\n#\n\n#wizard plots\n#wizard text: Inputs: sequence count:\n#wizard input: sequenceCount\n\ninput sequenceCount = 2;\n\ndef maxSideLength = sequenceCount + 10;\ndef upRightSide = fold i1 = 1 to maxSideLength + 1 with count1 while count1 != sequenceCount and count1 != -1 do\n    if GetValue(high, -i1, -maxSideLength) &gt; high or (GetValue(high, -i1, -maxSideLength) == high and count1 == 0) then -1\n    else if GetValue(high, -i1, -maxSideLength) &lt; high then count1 + 1 else count1;\ndef upLeftSide = fold i2 = 1 to maxSideLength + 1 with count2 while count2 != sequenceCount and count2 != -1 do\n    if GetValue(high, i2, maxSideLength) &gt; high or (GetValue(high, i2, maxSideLength) == high and count2 &gt;= 1) then -1\n    else if GetValue(high, i2, maxSideLength) &lt; high then count2 + 1 else count2;\n\ndef downRightSide = fold i3 = 1 to maxSideLength + 1 with count3 while count3 != sequenceCount and count3 != -1 do\n    if GetValue(low, -i3, -maxSideLength) &lt; low or (GetValue(low, -i3, -maxSideLength) == low and count3 == 0) then -1\n    else if GetValue(high, -i3, -maxSideLength) &gt; low then count3 + 1 else count3;\ndef downLeftSide = fold i4 = 1 to maxSideLength + 1 with count4 while count4 != sequenceCount and count4 != -1 do\n    if GetValue(low, i4, maxSideLength) &lt; low or (GetValue(low, i4, maxSideLength) == low and count4 &gt;= 1) then -1\n    else if GetValue(low, i4, maxSideLength) &gt; low then count4 + 1 else count4;\n\nplot UpFractal = if upRightSide == sequenceCount and upLeftSide == sequenceCount then high else Double.NaN;\nplot DownFractal = if downRightSide == sequenceCount and downLeftSide == sequenceCount then low else Double.NaN;\n\nUpFractal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_WEDGE_UP);\nUpFractal.SetDefaultColor(GetColor(3));\nUpFractal.SetLineWeight(2);\nDownFractal.SetPaintingStrategy(PaintingStrategy.BOOLEAN_WEDGE_DOWN);\nDownFractal.SetDefaultColor(GetColor(4));\nDownFractal.SetLineWeight(2);&quot;,name=&quot;WilliamsFractal&quot;}){inputsMap:TreeMap2{^(&quot;sequenceCount&quot;,@Integer0)},inputsMap=@TreeMap2,plots{0:{color=#%2.CustomColor(#%3.Color(255,102,102,255)),lineWeight=5},1:{color=#%2.CustomColor(#%3.Color(255,102,102,255)),lineWeight=5}}})}},!get(#%4.SubgraphId(&quot;Volume&quot;)){height=80},^(#%4.SubgraphId(&quot;Subgraph20&quot;),#%4.SubgraphStorableModel{height=169,storableIndicators.+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;#https://usethinkscript.com/threads/savage-oscillator.4214/\n#Assembled by FateOwnzYou on UseThinkscript.com\n\n\ndeclare lower;\nInput Price_Color = yes;\nInput Sensitivity = 1;\nInput Reversal_Warning_Candle = yes;\nInput Reversal_Warning = 8;\nInput AverageLine = yes;\nInput HighVolume = yes;\nInput VolumeAveragingLength = 20;\nInput VolumePercentThreshold = 60;\n\nPlot _High = 9;\nPlot CautionHigh = Reversal_Warning;\nPlot _Low = -9;\nPlot CautionLow = (Reversal_Warning)*-1;\nPlot Zero = 0;\n\n##Stochastics\nDef S1 = Max(-100, Min(100, (StochasticFull(KPeriod = 8, slowing_period = 5, averageType = AverageType.EXPONENTIAL))) - 50) / 50.01;\nDef S2 = Max(-100, Min(100, (StochasticFull(KPeriod = 17, slowing_period = 5, averageType = AverageType.EXPONENTIAL))) - 50) / 50.01;\nDef S3 = Max(-100, Min(100, reference RSI(2)) - 50) / 50.01;\n\nPlot Bull =(expAverage((S1 + S2 + S3)/3,Sensitivity))*10;\nDef SpdChng = if Bull &lt; 1.5 then ((movingAverage(averageType.Weighted, Bull, 20))-1.5) else ((movingAverage(averageType.Weighted, Bull, 10))-1.5) ;\nplot Bear = (SpdChng - Bull);\nplot middle = if AverageLine then((bull - bear)/2)+bear else double.nan;\n\n##Reversals\nPlot Top = if Bull &gt; Reversal_Warning then Bull else double.nan;\nPlot Bottom = if Bull &lt; (Reversal_Warning)*-1 then Bull else double.nan;\n\n##High Volume\ndef aVol = Average(volume, volumeAveragingLength);\ndef pVol = 100 * ((volume - aVol[1]) /aVol[1]);\ndef pDot = pVol &gt;= volumePercentThreshold;\n\n#Paint\nzero.assignValueColor(if pDot and HighVolume then color.CYAN else color.current);\nzero.setlineWeight(2);\nmiddle.setdefaultColor(color.white);\nBottom.setdefaultColor(Color.yellow);\nBottom.setPaintingStrategy(paintingStrategy.POINTS);\nBottom.setlineWeight(3);\nTop.setdefaultColor(Color.yellow);\nTop.setPaintingStrategy(paintingStrategy.POINTS);\nTop.setlineWeight(3);\n_High.setdefaultColor(color.gray);\n_Low.setdefaultColor(color.gray);\nZero.setdefaultColor(color.gray);\nCautionhigh.setdefaultColor(color.gray);\nCautionlow.setdefaultColor(color.gray);\nBear.assignValueColor(color.red);\nBull.assignvalueColor(color.green);\nBear.assignValueColor(color.red);\nBull.assignvalueColor(color.green);\naddLabel(yes, if Bull &gt; Bear then \&quot;Bullish\&quot; else \&quot;Bearish\&quot;, if Bull &gt; Bear then Color.Green else color.red);\nassignpriceColor(if Price_Color AND Bull &gt; Bear then color.green else color.current);\nassignpriceColor(if Price_Color AND Bull &lt; Bear then color.red else color.current);\nassignpriceColor(if Reversal_Warning_Candle AND Bull &gt; Reversal_Warning then color.blue else color.current);\nassignpriceColor(if Reversal_Warning_Candle AND Bull &lt; (Reversal_Warning)*-1 then color.blue else color.current);\naddcloud(cautionhigh,_high,color.yellow, color.yellow);\naddcloud(cautionlow,_low,color.yellow, color.yellow);&quot;,name=&quot;_aee3def6_c50d_3e73_b76d_332042331b2f&quot;}){inputsMap:TreeMap3{^(&quot;Reversal_Warning&quot;,7)},inputsMap=@TreeMap3,plots{0:{color=@CustomColor1},1:{color=!%2.CustomColor.findByIndex:CustomColor3(&quot;12&quot;),lineWeight=2},2:{color=!%2.CustomColor.findByIndex(&quot;13&quot;)},3:{color=@CustomColor3,lineWeight=2},7:{color=#%2.CustomColor(#%3.Color(153,153,255,255))},8:{color=#%2.CustomColor(#%3.Color(255,51,51,255)),lineWeight=5},9:{color=#%2.CustomColor(#%3.Color(255,51,51,255)),lineWeight=5}}})}),^(#%4.SubgraphId(&quot;Subgraph21&quot;),#%4.SubgraphStorableModel{height=169,storableIndicators.+(!%5.CompiledStudy.resolveStudy(#%6.ScriptEssence{body=&quot;#TMO True Momentum Oscilator _Mobius\n#Monday, May 14, 2018 8:31 AM\n\n## \&quot;##\&quot; indicates an addition or alteration by the Archivist\n## OneNote Archive Name: TMO True Momentum Oscilator _Mobius\n## Archive Section: Momentum\n## Suggested Tos Name: TrueMomentumOscillator_Mobius\n## Archive Date: 5.14.2018\n## Archive Notes: \n # Markos changed colors for cloud 01-31-19\n## Original Code Follows\n\n# TMO ((T)rue (M)omentum (O)scilator)\n# Mobius\n# V01.05.2018\n#hint: TMO calculates momentum using the delta of price. Giving a much better picture of trend, tend reversals and divergence than momentum oscillators using price.\n\ndeclare Lower;\n\ninput length = 14;\ninput calcLength = 5;\ninput smoothLength = 3;\n\ndef o = open;\ndef c = close;\ndef data = fold i = 0 to length\n           with s\n           do s + (if c &gt; getValue(o, i)\n                   then 1\n                   else if c &lt; getValue(o, i)\n                        then - 1\n                        else 0);\ndef EMA5 = ExpAverage(data, calcLength);\nplot Main = ExpAverage(EMA5, smoothLength);\nplot Signal = ExpAverage(Main, smoothLength);\n     Main.AssignValueColor(if Main &gt; Signal\n                           then color.green\n                           else color.red);\n     Signal.AssignValueColor(if Main &gt; Signal\n                             then color.green\n                             else color.red);\n     Signal.HideBubble();\n     Signal.HideTitle();\naddCloud(Main, Signal, color.green, color.red);\nplot zero = if isNaN(c) then double.nan else 0;\n     zero.SetDefaultColor(Color.gray);\n     zero.hideBubble();\n     zero.hideTitle();\nplot ob = if isNaN(c) then double.nan else round(length * .7);\n     ob.SetDefaultColor(Color.gray);\n     ob.HideBubble();\n     ob.HideTitle();\nplot os = if isNaN(c) then double.nan else -round(length * .7);\n     os.SetDefaultColor(Color.gray);\n     os.HideBubble();\n     os.HideTitle();\naddCloud(ob, length, color.green, color.green, Yes);\nAddCloud(data1 = -length, data2 = os, color1 = Color.RED, showBorder = yes);\n# End Code TMO&quot;,name=&quot;_b6fd2789_4a1b_3b20_86cf_9cef555c2053&quot;}){plots{3:{color=@CustomColor1},4:{color=@CustomColor0}}})})}}" DEFAULT_TYPE="DASHBOARD" ORDER_ENTRY_EXPANDED="false" ROW_COUNT="1" SHARED_USER_SCRIPTS="@v8@owner{chartAggregationPeriods:ChartAggregationPeriodArray0,chartAggregationPeriods=@ChartAggregationPeriodArray0}#java.util.HashMap{^(&quot;_d231fbce_37b3_3ef1_ab31_7887ca13a4c0&quot;,&quot;AA_VIX_LABEL_J&quot;),^(&quot;_899ffa03_1bff_4524_92e3_6f033a86fa70&quot;,&quot;AA_SAVAGE_CANDLE_COLOR&quot;),^(&quot;_cf7bcbcc_1f53_4867_a255_a1b4412b4cb9&quot;,&quot;AA_PREMARKET_HIGH_LO&quot;),^(&quot;_96f7fcf2_e153_4520_95f1_a5008f60d113&quot;,&quot;AA_ATR_LABEL_2&quot;),^(&quot;_ff77763b_ede6_4ef6_94fa_60d0e25cb7a1&quot;,&quot;R_DAILY_RANGE_PLUS_PREMARKET&quot;),^(&quot;_01f940de_cdce_4ff2_8193_43ae94f89363&quot;,&quot;AA_SWING_WAVES_SHORT_ENTRY&quot;),^(&quot;_c4fdaf54_10b8_3607_a59d_3f154d25e1eb&quot;,&quot;AA__RSI_Laguerre_Lines_UpperChart_Mo&quot;),^(&quot;_3624e369_967f_4b95_b564_e538d8d42404&quot;,&quot;AA_RAF_UPPER_CLEANEDUP_VERS&quot;),^(&quot;_5360d618_bf59_360e_bff9_486e034be68a&quot;,&quot;AA_HORIZONTAL_PRICE_J&quot;),^(&quot;_0be9287e_5c56_4ade_9266_c0d59586e32d&quot;,&quot;AA_SAVAGE&quot;),^(&quot;_29a2f7a7_fd5e_44c4_974b_ed8bc073f9cf&quot;,&quot;AA_BULL_BEAR_LABEL&quot;),^(&quot;_16494df8_e2e4_3be7_9921_c62a134ed630&quot;,&quot;B_MARKOS_SHORT_TMO_sMobius_TMO_ms&quot;)}" SYMBOL="DCTH" SYMBOL_GROUP="2" VERTICAL="false" VISIBLE="true" WEIGHT="1.0">
              <CELL0/>
            </CHART>
            <DASHBOARD SYMBOL="MRVL" SYMBOL_GROUP="-1" VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <LEVEL_II VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <LIVE_NEWS VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <PHASE_SCORES VERTICAL="false" VISIBLE="false" WEIGHT="2.0"/>
            <SORTING/>
            <SORTING1/>
            <SORTING2/>
            <TIME_SALES VERTICAL="false" VISIBLE="false" WEIGHT="1.0"/>
            <TRADE CONFIGURATION_NAME="SINGLE" ORDER_RULES_SET="STOCK" ORDER_TYPE="LIMIT" OS_AUTO="false" OS_EXPANDED="false" OS_TIF="DAY" QTY="100.0" QTY_STEP="1.0" TEMPLATE="SINGLE" TRADE_BUTTONS="BUY_MKT;SELL_MKT;MULTI_CANCEL;REVERSE;FLAT;SECOND_LINE;QUANTITY;AUTO_SEND;ORDER_SETUP" VISIBLE="false">
              <OCO_STOP>
                <TRG_0 TRG_ENBL="true" TRG_LINK="ASK_BID" TRG_OFFSET_MODE="TICK" TRG_OT="STOP" TRG_SETUP="10.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AAL="10.0" AAPL="10.0" AJRD="10.0" AKU="10.0" AMD="10.0" AZRX="10.0" DCTH="10.0" DOX="10.0" EBS="10.0" ENPH="10.0" GLOP="10.0" IWM="10.0" KMX="10.0" MRVL="10.0" MSFT="10.0" MYO="10.0" NUZE="10.0" OLO="10.0" RMO="10.0" SJI="10.0" SLDB="10.0" SWI="10.0" T="10.0" USAC="10.0" VSTM="10.0"/>
                </TRG_0>
              </OCO_STOP>
              <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="1.0" TRG_TIF="DAY">
                <OFFSET_PER_SYMBOL AAL="1.0" AAPL="1.0" AJRD="1.0" AKU="1.0" AMD="1.0" AZRX="1.0" DCTH="1.0" DOX="1.0" EBS="1.0" ENPH="1.0" GLOP="1.0" IWM="1.0" KMX="1.0" MRVL="1.0" MSFT="1.0" MYO="1.0" NUZE="1.0" OLO="1.0" RMO="1.0" SJI="1.0" SLDB="1.0" SWI="1.0" T="1.0" USAC="1.0" VSTM="1.0"/>
              </TRG_0>
              <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-1.0" TRG_TIF="DAY">
                <OFFSET_PER_SYMBOL AAL="-1.0" AAPL="-1.0" AJRD="-1.0" AKU="-1.0" AMD="-1.0" AZRX="-1.0" DCTH="-1.0" DOX="-1.0" EBS="-1.0" ENPH="-1.0" GLOP="-1.0" IWM="-1.0" KMX="-1.0" MRVL="-1.0" MSFT="-1.0" MYO="-1.0" NUZE="-1.0" OLO="-1.0" RMO="-1.0" SJI="-1.0" SLDB="-1.0" SWI="-1.0" T="-1.0" USAC="-1.0" VSTM="-1.0"/>
              </TRG_1>
              <_2>
                <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="2.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AAL="2.0" AAPL="2.0" AJRD="2.0" AKU="2.0" AMD="2.0" AZRX="2.0" DCTH="2.0" DOX="2.0" EBS="2.0" ENPH="2.0" GLOP="2.0" IWM="2.0" KMX="2.0" MRVL="2.0" MSFT="2.0" MYO="2.0" NUZE="2.0" OLO="2.0" RMO="2.0" SJI="2.0" SLDB="2.0" SWI="2.0" T="2.0" USAC="2.0" VSTM="2.0"/>
                </TRG_0>
                <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-2.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AAL="-2.0" AAPL="-2.0" AJRD="-2.0" AKU="-2.0" AMD="-2.0" AZRX="-2.0" DCTH="-2.0" DOX="-2.0" EBS="-2.0" ENPH="-2.0" GLOP="-2.0" IWM="-2.0" KMX="-2.0" MRVL="-2.0" MSFT="-2.0" MYO="-2.0" NUZE="-2.0" OLO="-2.0" RMO="-2.0" SJI="-2.0" SLDB="-2.0" SWI="-2.0" T="-2.0" USAC="-2.0" VSTM="-2.0"/>
                </TRG_1>
              </_2>
              <_3>
                <TRG_0 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="LIMIT" TRG_SETUP="3.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AAL="3.0" AAPL="3.0" AJRD="3.0" AKU="3.0" AMD="3.0" AZRX="3.0" DCTH="3.0" DOX="3.0" EBS="3.0" ENPH="3.0" GLOP="3.0" IWM="3.0" KMX="3.0" MRVL="3.0" MSFT="3.0" MYO="3.0" NUZE="3.0" OLO="3.0" RMO="3.0" SJI="3.0" SLDB="3.0" SWI="3.0" T="3.0" USAC="3.0" VSTM="3.0"/>
                </TRG_0>
                <TRG_1 TRG_ENBL="true" TRG_LINK="TRG" TRG_OFFSET_MODE="ABSOLUTE" TRG_OT="STOP" TRG_SETUP="-3.0" TRG_TIF="DAY">
                  <OFFSET_PER_SYMBOL AAL="-3.0" AAPL="-3.0" AJRD="-3.0" AKU="-3.0" AMD="-3.0" AZRX="-3.0" DCTH="-3.0" DOX="-3.0" EBS="-3.0" ENPH="-3.0" GLOP="-3.0" IWM="-3.0" KMX="-3.0" MRVL="-3.0" MSFT="-3.0" MYO="-3.0" NUZE="-3.0" OLO="-3.0" RMO="-3.0" SJI="-3.0" SLDB="-3.0" SWI="-3.0" T="-3.0" USAC="-3.0" VSTM="-3.0"/>
                </TRG_1>
              </_3>
            </TRADE>
          </CELL0>
          <MODELNODE0 COMPOSITENAME="CELL0" NAME="0" TYPE="LEAF" WEIGHT="0.0"/>
          <TOS_CHARTS ORDER_ENTRY_EXPANDED="false" SELECTED_LAYOUT="TOS CHARTS"/>
        </TOS_CHARTS>
      </DETACHED_FRAME_121>
      <LINES LEVEL="Beginner" RAPID="false"/>
      <MESSAGE_CENTER_LAYOUT>
        <SORTING COLUMN="TIME" ORDER="1"/>
      </MESSAGE_CENTER_LAYOUT>
      <MINESWEEPER BOMBS="10" COLUMNS="9" LEVEL="Beginner" QMARK="false" ROWS="9"/>
      <TETRIS LEVEL="Beginner" ROTATE="false"/>
    </DETACHED_FRAME_0>
  </WORKSPACE>
</PREFERENCES>
